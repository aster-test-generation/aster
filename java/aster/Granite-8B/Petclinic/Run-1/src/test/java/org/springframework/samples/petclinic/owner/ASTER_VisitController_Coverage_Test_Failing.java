/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VisitController_Coverage_Test_Failing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit2_YJaZ1_uqTi0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		VisitController visitController = new VisitController(owners);
		int ownerId = 2;
		int petId = 2;
		Map<String, Object> model = new HashMap<>();
		Visit actual = visitController.loadPetWithVisit(ownerId, petId, model);
		Owner expectedOwner = new Owner();
		when(owners.findById(ownerId)).thenReturn(expectedOwner);
		Pet expectedPet = new Pet();
		expectedOwner.addPet(expectedPet);
		Visit expectedVisit = new Visit();
		expectedPet.addVisit(expectedVisit);
		assertEquals(expectedVisit, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit4_eRGU3_QTAN0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		VisitController visitController = new VisitController(owners);
		int ownerId = 4;
		int petId = 4;
		Map<String, Object> model = new HashMap<>();
		Visit actual = visitController.loadPetWithVisit(ownerId, petId, model);
		Owner expectedOwner = new Owner();
		when(owners.findById(ownerId)).thenReturn(expectedOwner);
		Pet expectedPet = new Pet();
		expectedOwner.addPet(expectedPet);
		Visit expectedVisit = new Visit();
		expectedPet.addVisit(expectedVisit);
		assertEquals(expectedVisit, actual);
	}

}