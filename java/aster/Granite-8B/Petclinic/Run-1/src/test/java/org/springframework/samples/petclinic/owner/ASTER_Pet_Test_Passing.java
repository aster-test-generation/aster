/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import java.util.Collection;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Pet_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisits_dxrE0() {
		Pet pet = new Pet();
		Collection<Visit> visits = pet.getVisits();
		assertNotNull(visits);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisitsWithNoVisits_hmVo1() {
		Pet pet = new Pet();
		Collection<Visit> visits = pet.getVisits();
		assertTrue(visits.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisitsWithOneVisit_WZAf2_1() {
		Pet pet = new Pet();
		Visit visit = new Visit();
		pet.addVisit(visit);
		Collection<Visit> visits = pet.getVisits();
		assertEquals(1, visits.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetVisitsWithOneVisit_WZAf2_2() {
		Pet pet = new Pet();
		Visit visit = new Visit();
		pet.addVisit(visit);
		Collection<Visit> visits = pet.getVisits();
		assertTrue(visits.contains(visit));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_qykL0_1() {
		Pet pet = new Pet();
		Visit visit = new Visit();
		visit.setDate(LocalDate.now());
		visit.setDescription("Sample visit description");
		pet.addVisit(visit);
		assertNotNull(pet.getVisits());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_qykL0_2() {
		Pet pet = new Pet();
		Visit visit = new Visit();
		visit.setDate(LocalDate.now());
		visit.setDescription("Sample visit description");
		pet.addVisit(visit);
		assertEquals(1, pet.getVisits().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDate_TdGt0() {
		Pet pet = new Pet();
		LocalDate birthDate = LocalDate.now();
		pet.setBirthDate(birthDate);
		assertEquals(birthDate, pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDateNull_zsCC1() {
		Pet pet = new Pet();
		pet.setBirthDate(null);
		assertNull(pet.getBirthDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDateFutureDate_ROBa2() {
		Pet pet = new Pet();
		LocalDate futureDate = LocalDate.now().plusDays(7);
		pet.setBirthDate(futureDate);
		assertTrue(pet.getBirthDate().isAfter(LocalDate.now()));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetBirthDatePastDate_YZIt3() {
		Pet pet = new Pet();
		LocalDate pastDate = LocalDate.now().minusDays(7);
		pet.setBirthDate(pastDate);
		assertTrue(pet.getBirthDate().isBefore(LocalDate.now()));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void getTypeTest_ZuIQ0() {
		Pet pet = new Pet();
		PetType type = pet.getType();
		assertNotNull(type);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBirthDate_jLFj0() {
		Pet pet = new Pet();
		pet.setBirthDate(LocalDate.now());
		LocalDate birthDate = pet.getBirthDate();
		assertNotNull(birthDate);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetType_PTAt0() {
		Pet pet = new Pet();
		PetType type = new PetType();
		pet.setType(type);
		assertNotNull(pet.getType());
	}

}