/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Failing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithInvalidPetId_SWct0() {
		Owner owner = new Owner();
		Integer petId = null;
		Visit visit = new Visit();
		owner.addVisit(petId, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_Tgfd1() {
		Owner owner = new Owner();
		Integer petId = 1;
		Visit visit = null;
		owner.addVisit(petId, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithValidPetIdAndVisit_vmVJ2() {
		Owner owner = new Owner();
		Integer petId = 1;
		Visit visit = new Visit();
		owner.addVisit(petId, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPetWithNullPet_hLyX2() {
		Owner owner = new Owner();
		owner.addPet(null);
		assertEquals(0, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPetWithNullOwner_wkFM3() {
		Owner owner = null;
		Pet pet = new Pet();
		owner.addPet(pet);
		assertEquals(0, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPetWithExistingPet_pYck1_fid1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		owner.addPet(pet);
		assertEquals(1, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPetWithEmptyOwner_ZzIA4_fid1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		assertEquals(0, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString3_APJK2() {
		Owner owner = new Owner();
		owner.setLastName("Doe");
		assertEquals("Owner{id=null, new=false, lastName=Doe, firstName=null, address=null, city=null, telephone=null}",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString4_RapS3() {
		Owner owner = new Owner();
		owner.setFirstName("John");
		assertEquals(
				"Owner{id=null, new=false, lastName=null, firstName=John, address=null, city=null, telephone=null}",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString5_pPRd4() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		assertEquals(
				"Owner{id=null, new=false, lastName=null, firstName=null, address=123 Main St, city=null, telephone=null}",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString6_FyaJ5() {
		Owner owner = new Owner();
		owner.setCity("Anytown");
		assertEquals(
				"Owner{id=null, new=false, lastName=null, firstName=null, address=null, city=Anytown, telephone=null}",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString7_hGaV6() {
		Owner owner = new Owner();
		owner.setTelephone("555-1234");
		assertEquals(
				"Owner{id=null, new=false, lastName=null, firstName=null, address=null, city=null, telephone=555-1234}",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString1_zOQG0_BFPu0() {
		Owner owner = new Owner();
		owner.setId(1);
		assertEquals("Owner{id=1, new=false, lastName=null, firstName=null, address=null, city=null, telephone=null}",
				owner.toString());
	}

}