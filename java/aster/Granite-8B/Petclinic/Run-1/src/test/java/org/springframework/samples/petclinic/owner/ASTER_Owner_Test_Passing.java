/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_LQOA0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPetWithNewPet_Yvqk0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		assertEquals(1, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPetWithExistingPet_Ssji1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		Pet existingPet = new Pet();
		owner.addPet(existingPet);
		assertEquals(2, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_Royn0_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName");
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_Royn0_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName");
		assertEquals("petName", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetNotFound_uKLY1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("notFound");
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetWithDisabledNotFound_JfxS3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("notFound", true);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getPet_whenPetExists_returnsPet_pSZP0_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("doggie");
		owner.addPet(pet);
		Pet result = owner.getPet("doggie", false);
		assertNotNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getPet_whenPetExists_returnsPet_pSZP0_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("doggie");
		owner.addPet(pet);
		Pet result = owner.getPet("doggie", false);
		assertEquals("doggie", result.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getPet_whenPetDoesNotExist_returnsNull_SAux2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("catty");
		owner.addPet(pet);
		Pet result = owner.getPet("doggie", false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getPet_whenPetNameIsEmpty_returnsNull_afSz4() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("catty");
		owner.addPet(pet);
		Pet result = owner.getPet("", false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getPet_whenPetNameIsNull_returnsNull_kXxZ6() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("catty");
		owner.addPet(pet);
		Pet result = owner.getPet(null, false);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_wzZh0() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		owner.addVisit(1, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_IQwr0_1() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_IQwr0_2() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertTrue(pets.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetsWithOnePet_YORj2_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetsWithOnePet_YORj2_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		List<Pet> pets = owner.getPets();
		assertFalse(pets.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetsWithOnePet_YORj2_3() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		List<Pet> pets = owner.getPets();
		assertEquals(1, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetsWithOnePet_YORj2_4() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetsWithMultiplePets_rxlc3_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetsWithMultiplePets_rxlc3_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		List<Pet> pets = owner.getPets();
		assertFalse(pets.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetsWithMultiplePets_rxlc3_3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		List<Pet> pets = owner.getPets();
		assertEquals(2, pets.size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetsWithMultiplePets_rxlc3_4() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet1));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetsWithMultiplePets_rxlc3_5() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		List<Pet> pets = owner.getPets();
		assertTrue(pets.contains(pet2));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_1_JRfT0() {
		Owner owner = new Owner();
		Integer id = 1;
		Pet pet = owner.getPet(id);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_2_sYRX1() {
		Owner owner = new Owner();
		Integer id = 2;
		Pet pet = owner.getPet(id);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_3_mvVF2() {
		Owner owner = new Owner();
		Integer id = 3;
		Pet pet = owner.getPet(id);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getPet_4_mJdT3() {
		Owner owner = new Owner();
		Integer id = 4;
		Pet pet = owner.getPet(id);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPet_Royn0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName");
		assertNotNull(pet);
		assertEquals("petName", pet.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getPet_whenPetExists_returnsPet_pSZP0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("doggie");
		owner.addPet(pet);
		Pet result = owner.getPet("doggie", false);
		assertNotNull(result);
		assertEquals("doggie", result.getName());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_IQwr0() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
		assertTrue(pets.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetsWithOnePet_YORj2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
		assertFalse(pets.isEmpty());
		assertEquals(1, pets.size());
		assertTrue(pets.contains(pet));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPetsWithMultiplePets_rxlc3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		Pet pet2 = new Pet();
		owner.addPet(pet1);
		owner.addPet(pet2);
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
		assertFalse(pets.isEmpty());
		assertEquals(2, pets.size());
		assertTrue(pets.contains(pet1));
		assertTrue(pets.contains(pet2));
	}

}