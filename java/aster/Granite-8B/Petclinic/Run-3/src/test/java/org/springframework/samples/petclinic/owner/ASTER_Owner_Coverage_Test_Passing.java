/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test1_LlOc0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test2_xSmU1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(2);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test3_ScHC2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(3);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test4_mrPU3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(4);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test5_mUDj4() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(5);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test6_Wgpi5() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(6);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_Wpya0() {
		Owner owner = new Owner();
		Visit visit = null;
		try {
			owner.addVisit(1, visit);
		}
		catch (IllegalArgumentException e) {
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithInvalidPetId_mKMv1() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		try {
			owner.addVisit(0, visit);
		}
		catch (IllegalArgumentException e) {
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPetNameEmpty_dOlm1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("", false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPetNameNotFound_NnUn3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("non-existent", false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithValidPetIdAndNullVisit_GLyB3_jNYl0() {
		Owner owner = new Owner();
		Visit visit = null;
		Pet pet = new Pet();
		pet.setId(1);
		try {
			owner.addVisit(pet.getId(), visit);
		}
		catch (IllegalArgumentException e) {
		}
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithValidPetIdAndInvalidVisit_rXOs4_UCWo0() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		Pet pet = new Pet();
		pet.setId(1);
		try {
			owner.addVisit(pet.getId(), visit);
		}
		catch (IllegalArgumentException e) {
		}
	}

}