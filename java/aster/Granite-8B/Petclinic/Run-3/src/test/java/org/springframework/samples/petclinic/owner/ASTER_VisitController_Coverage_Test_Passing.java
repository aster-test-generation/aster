/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.Map;
import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VisitController_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit1_xCQK0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		VisitController visitController = new VisitController(owners);
		int ownerId = 0;
		int petId = 0;
		Map<String, Object> model = new HashMap<>();
		Visit visit = visitController.loadPetWithVisit(ownerId, petId, model);
		verify(owners).findById(ownerId);
		verify(owners).findById(ownerId);
		verify(owners).findById(ownerId);
		verify(owners).findById(ownerId);
		verify(owners).findById(ownerId);
		verify(owners).findById(ownerId);
		verify(owners).findById(ownerId);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLoadPetWithVisit7_WvEX6() {
		OwnerRepository owners = mock(OwnerRepository.class);
		VisitController visitController = new VisitController(owners);
		int ownerId = 0;
		int petId = 0;
		Map<String, Object> model = new HashMap<>();
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessNewVisitForm_WithErrors_RedirectAttributesNull_NUtv5_TmGF0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		Owner owner = new Owner();
		Visit visit = new Visit();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = null;
		String actual = new VisitController(owners).processNewVisitForm(owner, 0, visit, result, redirectAttributes);
		assertEquals("pets/createOrUpdateVisitForm", actual);
	}

}