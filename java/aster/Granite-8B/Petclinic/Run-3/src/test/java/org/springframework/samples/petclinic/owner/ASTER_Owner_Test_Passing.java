/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCity_clOh0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_eIuo0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assert owner.getCity().equals("New York");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_PaaH0() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPetWithNullPet_AAcc0() {
		Owner owner = new Owner();
		owner.addPet(new Pet());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPetWithExistingPet_rkXw1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void getPet_whenPetDoesNotExist_returnsNull_pQyn1() {
		Owner owner = new Owner();
		Pet result = owner.getPet(1);
		assertNull(result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_IvBo2_1() {
		Owner owner = new Owner();
		Visit visit = null;
		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			owner.addVisit(1, visit);
		});
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_IvBo2() {
		Owner owner = new Owner();
		Visit visit = null;
		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			owner.addVisit(1, visit);
		});
		assertEquals("Visit must not be null!", exception.getMessage());
	}

}