/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Visit_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetDate_ExOH0() {
		Visit visit = new Visit();
		visit.setDate(LocalDate.now());
		LocalDate date = visit.getDate();
		assertNotNull(date);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetDescription_ALxV0() {
		Visit visit = new Visit();
		visit.setDescription("Sample description");
		assertEquals("Sample description", visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDescription_rrDq0() {
		Visit visit = new Visit();
		String description = "Sample description";
		visit.setDescription(description);
		assertEquals(description, visit.getDescription());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDate_wnPg0() {
		Visit visit = new Visit();
		LocalDate date = LocalDate.now();
		visit.setDate(date);
		assertEquals(date, visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDateWithNull_zYVH1() {
		Visit visit = new Visit();
		LocalDate date = null;
		visit.setDate(date);
		assertNull(visit.getDate());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDateWithFutureDate_nYpo2() {
		Visit visit = new Visit();
		LocalDate date = LocalDate.now().plusDays(1);
		visit.setDate(date);
		assertTrue(visit.getDate().isAfter(LocalDate.now()));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetDateWithPastDate_QBqV3() {
		Visit visit = new Visit();
		LocalDate date = LocalDate.now().minusDays(1);
		visit.setDate(date);
		assertTrue(visit.getDate().isBefore(LocalDate.now()));
	}

}