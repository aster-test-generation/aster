/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OwnerController_Test_Passing {

	@BeforeEach
	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testProcessCreationForm_WithValidOwner_ShouldRedirectToOwnerDetailsPage_LlXm0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		String viewName = ownerController.processCreationForm(owner, result, redirectAttributes);
		assertNotNull(viewName);
		assertEquals("redirect:/owners/" + owner.getId(), viewName);
		verify(ownerRepository, times(1)).save(owner);
		verify(redirectAttributes, times(1)).addFlashAttribute("message", "New Owner Created");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testProcessCreationForm_WithValidOwner_ShouldRedirectToOwnerDetailsPage_LlXm0_1() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		String viewName = ownerController.processCreationForm(owner, result, redirectAttributes);
		verify(ownerRepository, times(1)).save(owner);
		verify(redirectAttributes, times(1)).addFlashAttribute("message", "New Owner Created");
		assertNotNull(viewName);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testProcessCreationForm_WithValidOwner_ShouldRedirectToOwnerDetailsPage_LlXm0_2() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(ownerRepository);
		Owner owner = new Owner();
		BindingResult result = mock(BindingResult.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		String viewName = ownerController.processCreationForm(owner, result, redirectAttributes);
		verify(ownerRepository, times(1)).save(owner);
		verify(redirectAttributes, times(1)).addFlashAttribute("message", "New Owner Created");
		assertEquals("redirect:/owners/" + owner.getId(), viewName);
	}

}