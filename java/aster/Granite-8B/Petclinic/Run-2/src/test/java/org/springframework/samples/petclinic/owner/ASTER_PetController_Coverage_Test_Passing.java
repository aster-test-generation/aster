/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.time.LocalDate;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetController_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateForm_RedirectAttributesAddFlashAttribute_PBGT7() {
		Pet pet = new Pet();
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessCreationForm_WhenPetBirthDateIsBeforeCurrentDateAndResultHasNoErrors_ThenSaveOwnerAndRedirectToOwnerDetails_HPjo5() {
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateForm_OwnersSave_bDSP6_qtzN0() {
		Pet pet = new Pet();
		BindingResult result = mock(BindingResult.class);
		Owner owner = new Owner();
		ModelMap model = new ModelMap();
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		OwnerRepository owners = mock(OwnerRepository.class);
		PetController petController = new PetController(owners);
		petController.processUpdateForm(pet, result, owner, model, redirectAttributes);
		verify(owners, times(1)).save(owner);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testInitCreationFormWithValidOwnerAndModelMap_gHjf2_PEzA0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		PetController petController = new PetController(owners);
		Owner owner = new Owner();
		ModelMap model = new ModelMap();
		Pet pet = new Pet();
		owner.addPet(pet);
		model.put("pet", pet);
		String actual = petController.initCreationForm(owner, model);
		String expected = "pets/createOrUpdatePetForm";
		assertEquals(expected, actual);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithValidOwnerIdAndPetId_mAOg4_WVmF0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		Owner owner = new Owner();
		owner.setId(1);
		ownerRepository.save(owner);
		Pet pet = new Pet();
		pet.setId(1);
		owner.addPet(pet);
		ownerRepository.save(owner);
		PetController petController = new PetController(ownerRepository);
		Pet foundPet = petController.findPet(1, 1);
		assertSame(pet, foundPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindPetWithNonexistentOwnerId_JeME3_TCTB0() {
		OwnerRepository ownerRepository = mock(OwnerRepository.class);
		PetController petController = new PetController(ownerRepository);
		Pet pet = petController.findPet(2, 1);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateForm_PetBirthDateIsBeforeCurrentDate_IBQE2_HjSr0() {
		Pet pet = new Pet();
		BindingResult result = mock(BindingResult.class);
		Owner owner = new Owner();
		ModelMap model = new ModelMap();
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		OwnerRepository owners = mock(OwnerRepository.class);
		PetController petController = new PetController(owners);
		LocalDate currentDate = LocalDate.now();
		pet.setBirthDate(currentDate.minusDays(1));
		petController.processUpdateForm(pet, result, owner, model, redirectAttributes);
		verify(result, never()).rejectValue("birthDate", "typeMismatch.birthDate");
	}

}