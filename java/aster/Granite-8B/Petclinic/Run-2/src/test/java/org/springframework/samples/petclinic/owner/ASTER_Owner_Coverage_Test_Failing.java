/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Coverage_Test_Failing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNullName_FyJr0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(null, false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testValidName_DusU2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("validName", false);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithInvalidPetId_AHZP0() {
		Owner owner = new Owner();
		Integer petId = null;
		Visit visit = new Visit();
		owner.addVisit(petId, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_lKGp1() {
		Owner owner = new Owner();
		Integer petId = 1;
		Visit visit = null;
		owner.addVisit(petId, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithValidPetIdAndVisit_NcKh2() {
		Owner owner = new Owner();
		Integer petId = 1;
		Visit visit = new Visit();
		owner.addVisit(petId, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString1_wYid0() {
		Owner owner = new Owner();
		owner.setId(1);
		assertEquals("Owner{id=1, new=false, lastName=null, firstName=null, address=null, city=null, telephone=null}",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString3_lVvq2() {
		Owner owner = new Owner();
		owner.setLastName("Doe");
		assertEquals("Owner{id=null, new=false, lastName=Doe, firstName=null, address=null, city=null, telephone=null}",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString4_Juun3() {
		Owner owner = new Owner();
		owner.setFirstName("John");
		assertEquals(
				"Owner{id=null, new=false, lastName=null, firstName=John, address=null, city=null, telephone=null}",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString5_LyMr4() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
		assertEquals(
				"Owner{id=null, new=false, lastName=null, firstName=null, address=123 Main St, city=null, telephone=null}",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString6_HZZl5() {
		Owner owner = new Owner();
		owner.setCity("Anytown");
		assertEquals(
				"Owner{id=null, new=false, lastName=null, firstName=null, address=null, city=Anytown, telephone=null}",
				owner.toString());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString7_YKEz6() {
		Owner owner = new Owner();
		owner.setTelephone("555-1234");
		assertEquals(
				"Owner{id=null, new=false, lastName=null, firstName=null, address=null, city=null, telephone=555-1234}",
				owner.toString());
	}

}