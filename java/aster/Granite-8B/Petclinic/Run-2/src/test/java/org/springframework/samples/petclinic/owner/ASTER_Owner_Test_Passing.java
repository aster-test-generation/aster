/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Owner_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetCity_HKIL0() {
		Owner owner = new Owner();
		owner.setCity("New York");
		assertEquals("New York", owner.getCity());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPet_Fdhf0() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		assertEquals(1, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddPetWithExistingPet_OKse1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		owner.addPet(pet);
		Pet existingPet = new Pet();
		owner.addPet(existingPet);
		assertEquals(2, owner.getPets().size());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetPet_yZqR0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("petName");
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetPetWithNonexistentPetName_atMn2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("nonexistentPetName");
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetPetWithExistingPetName_vNAI3() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("existingPetName");
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetPetWithExistingPetNameAndIncludeVisits_nvEU4_1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("existingPetName", true);
		assertNotNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetPetWithExistingPetNameAndIncludeVisits_nvEU4_2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("existingPetName", true);
		assertNotNull(pet.getVisits());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNullName_rQAQ0() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(null, false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEmptyName_tZLh1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("", false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNonExistentPet_gBCV2() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("non-existent", false);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testExistentPet_pyHA3_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("existent");
		owner.addPet(pet);
		Pet retrievedPet = owner.getPet("existent", false);
		assertNotNull(retrievedPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testExistentPet_pyHA3_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("existent");
		owner.addPet(pet);
		Pet retrievedPet = owner.getPet("existent", false);
		assertEquals(pet, retrievedPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisit_lQZb0() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		owner.addVisit(1, visit);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullPetId_mKUH1_1() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		Exception exception = assertThrows(IllegalArgumentException.class, () -> owner.addVisit(null, visit));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_vyPh2_1() {
		Owner owner = new Owner();
		Exception exception = assertThrows(IllegalArgumentException.class, () -> owner.addVisit(1, null));
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_dNdm0_1() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_dNdm0_2() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertTrue(pets.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNonExistentPetId_wZyv1() {
		Owner owner = new Owner();
		Pet pet = owner.getPet(1);
		assertNull(pet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testExistentPetId_RDDD2_1() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.addPet(pet);
		Pet retrievedPet = owner.getPet(1);
		assertNotNull(retrievedPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testExistentPetId_RDDD2_2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.addPet(pet);
		Pet retrievedPet = owner.getPet(1);
		assertEquals(pet, retrievedPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testExistentPetIdWithMultiplePets_GKLK3_1() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		pet1.setId(1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		owner.addPet(pet1);
		owner.addPet(pet2);
		Pet retrievedPet = owner.getPet(1);
		assertNotNull(retrievedPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testExistentPetIdWithMultiplePets_GKLK3_2() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		pet1.setId(1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		owner.addPet(pet1);
		owner.addPet(pet2);
		Pet retrievedPet = owner.getPet(1);
		assertEquals(pet1, retrievedPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetAddress_mMdZ0() {
		Owner owner = new Owner();
		owner.setAddress("123 Main St");
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetPetWithExistingPetNameAndIncludeVisits_nvEU4() {
		Owner owner = new Owner();
		Pet pet = owner.getPet("existingPetName", true);
		assertNotNull(pet);
		assertNotNull(pet.getVisits());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testExistentPet_pyHA3() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setName("existent");
		owner.addPet(pet);
		Pet retrievedPet = owner.getPet("existent", false);
		assertNotNull(retrievedPet);
		assertEquals(pet, retrievedPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullPetId_mKUH1() {
		Owner owner = new Owner();
		Visit visit = new Visit();
		Exception exception = assertThrows(IllegalArgumentException.class, () -> owner.addVisit(null, visit));
		assertNotNull(exception);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddVisitWithNullVisit_vyPh2() {
		Owner owner = new Owner();
		Exception exception = assertThrows(IllegalArgumentException.class, () -> owner.addVisit(1, null));
		assertNotNull(exception);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPets_dNdm0() {
		Owner owner = new Owner();
		List<Pet> pets = owner.getPets();
		assertNotNull(pets);
		assertTrue(pets.isEmpty());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testExistentPetId_RDDD2() {
		Owner owner = new Owner();
		Pet pet = new Pet();
		pet.setId(1);
		owner.addPet(pet);
		Pet retrievedPet = owner.getPet(1);
		assertNotNull(retrievedPet);
		assertEquals(pet, retrievedPet);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testExistentPetIdWithMultiplePets_GKLK3() {
		Owner owner = new Owner();
		Pet pet1 = new Pet();
		pet1.setId(1);
		Pet pet2 = new Pet();
		pet2.setId(2);
		owner.addPet(pet1);
		owner.addPet(pet2);
		Pet retrievedPet = owner.getPet(1);
		assertNotNull(retrievedPet);
		assertEquals(pet1, retrievedPet);
	}

}