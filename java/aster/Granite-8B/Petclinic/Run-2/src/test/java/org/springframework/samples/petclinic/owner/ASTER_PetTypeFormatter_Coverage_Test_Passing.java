/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import java.text.ParseException;
import java.util.Locale;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PetTypeFormatter_Coverage_Test_Passing {

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPrint_VkHF0_fJJW0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		PetType petType = new PetType();
		PetTypeFormatter petTypeFormatter = new PetTypeFormatter(owners);
		String result = petTypeFormatter.print(petType, Locale.getDefault());
		assertEquals(petType.getName(), result);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParse_withNonexistentType_throwsParseException_JXli2_Xshx0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		PetTypeFormatter formatter = new PetTypeFormatter(owners);
		try {
			formatter.parse("nonexistent", Locale.getDefault());
			fail("Expected ParseException");
		}
		catch (ParseException e) {
		}
	}

}