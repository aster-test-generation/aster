/**
 * Generated by Aster
 */
package org.springframework.samples.petclinic.owner;

import org.springframework.validation.BindingResult;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OwnerController_Coverage_Test_Passing {

	private OwnerController ownerController;

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerFormWithView_iJgC6_RgVR0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(owners);
		BindingResult result = mock(BindingResult.class);
		Owner owner = mock(Owner.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(false);
		ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessCreationForm_WhenResultHasNoErrors_ThenSaveOwnerAndRedirectToOwnerDetailsPage_kflt1_FKtt0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(owners);
		Owner owner = new Owner();
		BindingResult result = mock(BindingResult.class);
		when(result.hasErrors()).thenReturn(false);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		ownerController.processCreationForm(owner, result, redirectAttributes);
		verify(owners).save(owner);
		verify(redirectAttributes).addFlashAttribute("message", "New Owner Created");
		verify(redirectAttributes).addAttribute("ownerId", owner.getId());
	}

	@Test
	@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testProcessUpdateOwnerFormWithoutErrors_OmzF1_YInB0() {
		OwnerRepository owners = mock(OwnerRepository.class);
		OwnerController ownerController = new OwnerController(owners);
		BindingResult result = mock(BindingResult.class);
		Owner owner = mock(Owner.class);
		RedirectAttributes redirectAttributes = mock(RedirectAttributes.class);
		when(result.hasErrors()).thenReturn(false);
		ownerController.processUpdateOwnerForm(owner, result, 1, redirectAttributes);
		verify(result, times(1)).hasErrors();
		verify(owner, times(1)).setId(1);
		verify(owners, times(1)).save(owner);
		verify(redirectAttributes, times(1)).addFlashAttribute("message", "Owner Values Updated");
	}

}