/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_RdJH0() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues('a');
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithEmptyOption_SvqU4() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("");
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithOptionThatDoesNotExist_YZci5() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues('x');
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_hHKL0() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("option");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithDeprecatedOption_HvIc1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("deprecatedOption");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test11_ipfA10_tcLs0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'k';
        Object defaultValue = new Object();
        Object expected = new Object();
        Object actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithOptionPresent_yhoS1() {
        CommandLine commandLine = new CommandLine();
        String defaultValue = "default";
        String[] args = {"-o", "value"};
        String actual = commandLine.getOptionValue('o', defaultValue);
        assertEquals("value", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithDefaultValueNull_EevZ3_fid1() {
        CommandLine commandLine = new CommandLine();
        String defaultValue = null;
        String[] args = {"-o", "value"};
        String actual = commandLine.getOptionValue('o', defaultValue);
        assertEquals("value", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_qIdt0_fid1() {
        Option option = new Option("o", "option", true, "description");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_sWGA0() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertNotNull(iterator);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_sWGA0_2_fid3() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_fuQh1_vTEc0_fid3() {
        CommandLine commandLine = new CommandLine();
        String opt = "option2";
        Boolean defaultValue = true;
        Boolean expected = false;
        try {
            Boolean actual = commandLine.getParsedOptionValue(opt, defaultValue);
            assertEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_WGxC2_zNta0_fid3() {
        CommandLine commandLine = new CommandLine();
        String opt = "option3";
        String defaultValue = "default";
        String expected = "custom";
        String actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_Kwqk4_zkVg0_fid3() {
        CommandLine commandLine = new CommandLine();
        String opt = "option5";
        Float defaultValue = 1.5f;
        Float expected = 3.0f;
        Float actual;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_UqSv5_FFiu0_fid3() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "option6";
        Long defaultValue = 100L;
        Long expected = 200L;
        Long actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_qkIk7_AeEh0_fid3() {
        CommandLine commandLine = new CommandLine();
        String opt = "option8";
        Character defaultValue = 'a';
        Character expected = 'b';
        Character actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_sXGL8_GaBJ0_fid3() {
        CommandLine commandLine = new CommandLine();
        String opt = "option9";
        Boolean defaultValue = true;
        Boolean expected = false;
        try {
            Boolean actual = commandLine.getParsedOptionValue(opt, defaultValue);
            assertEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }
}