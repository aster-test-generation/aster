/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_gasp0() {
        Option option = new Option("option", "longOption", true, "description");
        int result = option.getArgs();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription_OZuX0_1() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", true, "description2");
        Option option3 = new Option("option3", "description3");
        assertEquals("description1", option1.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription_OZuX0_2() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", true, "description2");
        Option option3 = new Option("option3", "description3");
        assertEquals("description2", option2.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription_OZuX0_3() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", true, "description2");
        Option option3 = new Option("option3", "description3");
        assertEquals("description3", option3.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_IxnO0() {
        Option option = new Option("o", "longOption", true, "description");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_BweI1() {
        Option option = new Option("o", true, "description");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_DfkI2() {
        Option option = new Option("o", "description");
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_pLkv0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired2_hJnt1() {
        Option option = new Option("option", true, "description");
        option.setRequired(false);
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired3_MffC2() {
        Option option = new Option("option", "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired4_fzUC3() {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(false);
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired5_bZuK4() {
        Option option = new Option("option", true, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired6_GoAb5() {
        Option option = new Option("option", "description");
        option.setRequired(false);
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_zkjG0() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option1", "longOption1", true, "description1");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOption_DHuP1() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption1", true, "description1");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentLongOption_hDiL2() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option1", "longOption2", true, "description1");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_ejfx0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.acceptsArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg2_ZlyD1() {
        Option option = new Option("option", true, "description");
        boolean result = option.acceptsArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg4_EyKu3() {
        Option option = new Option("option", "longOption", false, "description");
        boolean result = option.acceptsArg();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg5_EPnd4() {
        Option option = new Option("option", false, "description");
        boolean result = option.acceptsArg();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg6_RWlm5() {
        Option option = new Option("option", "description");
        boolean result = option.acceptsArg();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter1_qKYv0() {
        Option option = new Option("option", "longOption", true, "description");
        Converter converter = option.getConverter();
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter2_VBtC1() {
        Option option = new Option("option", true, "description");
        Converter converter = option.getConverter();
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter3_hgIF2() {
        Option option = new Option("option", "description");
        Converter converter = option.getConverter();
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_kvyU0() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        assert option1.hashCode() != option2.hashCode();
        assert option1.hashCode() != option3.hashCode();
        assert option2.hashCode() != option3.hashCode();
        Option option4 = new Option("option4", "longOption4", false, "description4");
        Option option5 = new Option("option5", "longOption5", false, "description5");
        Option option6 = new Option("option6", "longOption6", false, "description6");
        assert option4.hashCode() != option5.hashCode();
        assert option4.hashCode() != option6.hashCode();
        assert option5.hashCode() != option6.hashCode();
        Option option7 = new Option("option7", "description7");
        Option option8 = new Option("option8", "description8");
        Option option9 = new Option("option9", "description9");
        assert option7.hashCode() != option8.hashCode();
        assert option7.hashCode() != option9.hashCode();
        assert option8.hashCode() != option9.hashCode();
        Option option10 = new Option("option10", "description10");
        Option option11 = new Option("option11", "description11");
        Option option12 = new Option("option12", "description12");
        assert option10.hashCode() != option11.hashCode();
        assert option10.hashCode() != option12.hashCode();
        assert option11.hashCode() != option12.hashCode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetopt_OhNc0() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getOpt();
        assertEquals("option", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptWithNullOption_dXxK1() {
        Option option = new Option(null, "longOption", true, "description");
        String result = option.getOpt();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptWithNullLongOption_Oiet4() {
        Option option = new Option("option", null, true, "description");
        String result = option.getOpt();
        assertEquals("option", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptWithEmptyLongOption_dshU5() {
        Option option = new Option("option", "", true, "description");
        String result = option.getOpt();
        assertEquals("option", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptWithNullDescription_iLtB7() {
        Option option = new Option("option", "longOption", true, null);
        String result = option.getOpt();
        assertEquals("option", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptWithEmptyDescription_osOT8() {
        Option option = new Option("option", "longOption", true, "");
        String result = option.getOpt();
        assertEquals("option", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator2_EIyU1() {
        Option option = new Option("option", true, "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator3_BAfe4() {
        Option option = new Option("option", "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator4_YXPo5() {
        Option option = new Option("option", "longOption", false, "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_sMAo0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId_zHFY0() {
        Option option = new Option("option", "longOption", true, "description");
        int id = option.getId();
        assertEquals(111, id);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithNoValues_wwTx0() {
        Option option = new Option("option", "longOption", false, "description");
        String[] values = option.getValues();
        Assertions.assertNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTypeTest_qHyY0() {
        Option option1 = new Option("option", "longOption", true, "description");
        Object type1 = option1.getType();
        Option option2 = new Option("option", true, "description");
        Object type2 = option2.getType();
        Option option3 = new Option("option", "description");
        Object type3 = option3.getType();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_withOption_TgAU0() {
        Option option = new Option("option", "longOption", true, "description");
        String expected = "option";
        String actual = option.getKey();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_withoutOption_OjXv1() {
        Option option = new Option(null, "longOption", true, "description");
        String expected = "longOption";
        String actual = option.getKey();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithNullLongOption_Qhbj0() {
        Option option = new Option("option", null, false, "description");
        boolean result = option.hasLongOpt();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithNonNullLongOption_jvEY1() {
        Option option = new Option("option", "longOption", false, "description");
        boolean result = option.hasLongOpt();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithOptionAndLongOptionAndHasArgAndDescription_bKvR0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasArg();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithOptionAndHasArgAndDescription_wZaM1() {
        Option option = new Option("option", true, "description");
        boolean result = option.hasArg();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparator_QSel0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setValueSeparator('=');
        assertEquals('=', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueList_YOzV0_1() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueList_YOzV0_2() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOpt_ynar0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("newLongOpt");
        assertEquals("newLongOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithNull_rnDB1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt(null);
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithEmpty_GZaF2() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("");
        assertEquals("", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithTab_tDpY4() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("\t");
        assertEquals("\t", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithNewline_XwLr5() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("\n");
        assertEquals("\n", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithCarriageReturn_SMFO6() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("\r");
        assertEquals("\r", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithFormFeed_tIeA7() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("\f");
        assertEquals("\f", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithBackspace_HZWS8() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("\b");
        assertEquals("\b", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithUnicode_IIWs9() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("unicode\u00A0");
        assertEquals("unicode\u00A0", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithNullChar_PNGD13() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("\u0000");
        assertEquals("\u0000", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithSurrogatePair_yvfi14() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("\uD834\uDD1E");
        assertEquals("\uD834\uDD1E", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptWithCombiningCharacter_RzGO15() {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("\u0300");
        assertEquals("\u0300", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedWithoutDeprecated_CmtL1() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.isDeprecated();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWithOptionAndHasArgAndDescription_UClB1() {
        Option option = new Option("option", true, "description");
        boolean result = option.requiresArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWithOptionAndDescription_cimS20() {
        Option option = new Option("option", "description");
        boolean result = option.requiresArg();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_uxaN0_3() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertFalse(option3.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOption2_GNBz2() {
        Option option = new Option("option", "description");
        boolean result = option.hasArgName();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOption3_Ocse3() {
        Option option = new Option("option", "longOption", false, "description");
        boolean result = option.hasArgName();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOption4_aVsD4() {
        Option option = new Option("option", false, "description");
        boolean result = option.hasArgName();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired3_SFnh2() {
        Option option = new Option("option", "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired4_udDJ3() {
        Option option = new Option("option", "longOption", false, "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired5_hkWr4() {
        Option option = new Option("option", false, "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionalArg_tmXt0_ssie0() {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgs15_GxBf14_UnkU0() {
        Option option = new Option("option", "description");
        option.setArgs(15);
        assertEquals(15, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgs17_vLul16_FYut0() {
        Option option = new Option("option", true, "description");
        option.setArgs(17);
        assertEquals(17, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_2_HGIx1_fid1() {
        Option option = new Option("option", true, "description");
        int result = option.getArgs();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_3_THZp2_fid1() {
        Option option = new Option("option", "description");
        int result = option.getArgs();
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_4_MoCn3_fid1() {
        Option option = new Option("option", "longOption", false, "description");
        int result = option.getArgs();
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_5_CGIR4_fid1() {
        Option option = new Option("option", false, "description");
        int result = option.getArgs();
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndex_kdwj0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        String value = option.getValue(0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithoutIndex_EVKk1_fid1() {
        Option option = new Option("option", true, "description");
        String value = option.getValue();
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentHasArg_gwSO3_fid1() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option1", "longOption1", false, "description1");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentDescription_LjMV4_fid1() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option1", "longOption1", true, "description2");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_iPWc0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.toString();
        String expected = "[ Option option longOption [ARG] :: description :: class java.lang.String ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_wBIY1_fid1() {
        Option option = new Option("option", true, "description");
        String actual = option.toString();
        String expected = "[ Option option [ARG] :: description :: class java.lang.String ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_mLcl2_fid1() {
        Option option = new Option("option", "description");
        String actual = option.toString();
        String expected = "[ Option option :: description :: class java.lang.String ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_gnxx3_fid1() {
        Option option = new Option("option", "longOption", false, "description");
        String actual = option.toString();
        String expected = "[ Option option longOption :: description :: class java.lang.String ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString1_xKfu0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString2_Piss1_fid1() {
        Option option = new Option("option", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString3_sZSF2_fid1() {
        Option option = new Option("option", "description");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_jQvV0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator2_rZZw1() {
        Option option = new Option("option", true, "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator3_hTab2() {
        Option option = new Option("option", "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator4_ceSc3() {
        Option option = new Option("option", "longOption", true, "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator5_gTyX4() {
        Option option = new Option("option", true, "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator6_WMYw5() {
        Option option = new Option("option", "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator7_NCvR6() {
        Option option = new Option("option", "longOption", true, "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator8_lzml7() {
        Option option = new Option("option", true, "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator9_xBZn8() {
        Option option = new Option("option", "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator10_Yitt9() {
        Option option = new Option("option", "longOption", true, "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndLongOptionAndHasArgAndDescription_sgfo0() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndHasArgAndDescription_VCwT1_fid1() {
        Option option = new Option("option", true, "description");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndDescription_RxBo2_fid1() {
        Option option = new Option("option", "description");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_rsol0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWithOptionAndLongOptionAndHasArgAndDescription_Ochi0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.requiresArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWithOptionAndDescription_ApAa2_fid1() {
        Option option = new Option("option", "description");
        boolean result = option.requiresArg();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_uxaN0_1_fid1() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertFalse(option1.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_uxaN0_2_fid1() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertFalse(option2.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOption_zKNQ0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasArgName();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOption1_ERFL1_fid1() {
        Option option = new Option("option", true, "description");
        boolean result = option.hasArgName();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_EWhd0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired2_FkgR1_fid1() {
        Option option = new Option("option", true, "description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription_OZuX0() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", true, "description2");
        Option option3 = new Option("option3", "description3");
        assertEquals("description1", option1.getDescription());
        assertEquals("description2", option2.getDescription());
        assertEquals("description3", option3.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueList_YOzV0() {
        Option option = new Option("option", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
        assertTrue(valuesList.isEmpty());
    }
}