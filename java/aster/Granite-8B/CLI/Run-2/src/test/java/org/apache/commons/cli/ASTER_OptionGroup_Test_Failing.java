/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Test_Failing {
    private OptionGroup optionGroup;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNull_EhQa1() {
        OptionGroup group = new OptionGroup();
        try {
            group.addOption(null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithExistingKey_ZAqe2() {
        OptionGroup group = new OptionGroup();
        Option option1 = new Option("o", "long", true, "description");
        Option option2 = new Option("o", "long", true, "description");
        group.addOption(option1);
        try {
            group.addOption(option2);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNames_KfyS0_2_fid1() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<String> actualNames = optionGroup.getNames();
        assertFalse(actualNames.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_lowI1_fid1() {
        OptionGroup optionGroup = new OptionGroup();
        String actual = optionGroup.toString();
        String expected = "[--longOpt, description]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_UmAi2_fid1() {
        OptionGroup optionGroup = new OptionGroup();
        String actual = optionGroup.toString();
        String expected = "[-opt, description]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNames_KfyS0() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<String> actualNames = optionGroup.getNames();
        assertNotNull(actualNames);
        assertFalse(actualNames.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_Mtjj1() {
        Collection<Option> options = optionGroup.getOptions();
        assertNotNull(options);
        assertTrue(!options.isEmpty());
        assertEquals(2, options.size());
    }
}