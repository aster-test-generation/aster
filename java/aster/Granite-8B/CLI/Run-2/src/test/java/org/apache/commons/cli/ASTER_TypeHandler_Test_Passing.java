/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.FileInputStream;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_TypeHandler_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFile_IOdu0() {
        File file = TypeHandler.createFile("test");
        assertEquals(new File("test"), file);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getConverter_NMZe0_1() {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        Class<String> clazz = String.class;
        Converter<String, ?> converter = typeHandler.getConverter(clazz);
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getConverter_NMZe0_2() {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        Class<String> clazz = String.class;
        Converter<String, ?> converter = typeHandler.getConverter(clazz);
        assertEquals(Converter.DEFAULT, converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenFile_QqIw0() throws ParseException {
        FileInputStream fileInputStream = TypeHandler.openFile("test.txt");
        assertNotNull(fileInputStream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOpenFileWithInvalidPath_pvvK1() {
        try {
            TypeHandler.openFile("invalid/path/test.txt");
            fail("Expected ParseException to be thrown");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateURL_SQZG0() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String string = "https://www.example.com";
        URL expected = new URL("https://www.example.com");
        URL actual = typeHandler.createURL(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateURLWithInvalidURLString_EUPo3() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String string = "invalid url";
        assertThrows(ParseException.class, () -> typeHandler.createURL(string));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getConverter_NMZe0() {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        Class<String> clazz = String.class;
        Converter<String, ?> converter = typeHandler.getConverter(clazz);
        assertNotNull(converter);
        assertEquals(Converter.DEFAULT, converter);
    }
}