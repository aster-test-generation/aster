/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.PrintWriter;
import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDescPadding_xRYC1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getDescPadding();
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDescPadding_with_custom_defaultDescPad_LQUq2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultDescPad = 5;
        int result = helpFormatter.getDescPadding();
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDescPadding_with_negative_defaultDescPad_iDvJ3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.defaultDescPad = -1;
        int result = helpFormatter.getDescPadding();
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_xpwS0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String optPrefix = helpFormatter.getOptPrefix();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_xiLm0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(100);
        assertEquals(100, helpFormatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidthWithZeroValue_Uxxo3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(0);
        assertEquals(0, helpFormatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidthWithMaxValue_rHnd4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, helpFormatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongOptSeparator_ByYM0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String expectedSeparator = " ";
        String actualSeparator = helpFormatter.getLongOptSeparator();
        assertEquals(expectedSeparator, actualSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_Weir0() {
        Options options = new Options();
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp("cmdLineSyntax", options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText1_svAV0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 4;
        String text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText2_gbYT1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 4;
        String text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText3_Frih2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 4;
        String text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_YChV0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 10, 0);
        int expected = 9;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_GRdI1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 14, 0);
        int expected = 14;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_dXjJ2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 1, 0);
        int expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_KIeN3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 100, 0);
        int expected = -1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_ENHt4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 10, 10);
        int expected = 14;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_jHnv6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 1, 10);
        int expected = 11;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_phVp7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 100, 10);
        int expected = -1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos9_pnOw8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 10, 20);
        int expected = -1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos11_VaXk10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 1, 20);
        int expected = -1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos12_TEyg11() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 100, 20);
        int expected = -1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_zaWM0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setArgName("arg");
        assertEquals("arg", formatter.defaultArgName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_hpnb0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLeftPadding(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_JeTM0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        String cmdLineSyntax = "test";
        String header = "header";
        Options options = new Options();
        int leftPad = 1;
        int descPad = 2;
        String footer = "footer";
        boolean autoUsage = true;
        helpFormatter.printHelp(pw, 80, cmdLineSyntax, header, options, leftPad, descPad, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_LKga0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Options options = new Options();
        helpFormatter.printHelp("cmdLineSyntax", options, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePadding_RZFB0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int len = 10;
        String expectedPadding = "          ";
        String actualPadding = helpFormatter.createPadding(len);
        assertEquals(expectedPadding, actualPadding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_tGic0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        formatter.printHelp(120, "cmdLineSyntax", "header", options, "footer", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_mSmh0() {
        Options options = new Options();
        options.hasLongOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_IHSm1() {
        Options options = new Options();
        options.getMatchingOptions("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_hjCY2() {
        Options options = new Options();
        options.getOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_MDvD3() {
        Options options = new Options();
        options.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_bLep4() {
        Options options = new Options();
        options.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_xAhj5() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_NRya6() {
        Options options = new Options();
        options.addOption(new Option("opt", "longOpt", true, "description"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_iZVR7() {
        Options options = new Options();
        options.getOptionGroup(new Option("opt", "longOpt", true, "description"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_zHlq8() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_pgEP9() {
        Options options = new Options();
        Options options1 = new Options();
        options.addOptions(options1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_IVAh10() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_RtRb11() {
        Options options = new Options();
        options.hasShortOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_QywQ12() {
        Options options = new Options();
        options.addOption("opt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_wCgG13() {
        Options options = new Options();
        options.getRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_SqhN14() {
        Options options = new Options();
        options.hasOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption3_hWLH15() {
        Options options = new Options();
        options.addOption("opt", "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_ObZR16() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        Options options = new Options();
        formatter.renderOptions(sb, 10, options, 5, 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparator_YKPh0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator(" ");
        assertEquals(" ", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorNull_WgIE1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator(null);
        assertEquals(null, helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorTab_ybMF4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("\t");
        assertEquals("\t", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorNewline_EJJI5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("\n");
        assertEquals("\n", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorMultiple_Ykje6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("---");
        assertEquals("---", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorMultipleTab_AeYO8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("\t---\t");
        assertEquals("\t---\t", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorMultipleNewline_mKpd9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("\n---\n");
        assertEquals("\n---\n", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorMultipleCombined_pCAP10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("   ---   \t\n");
        assertEquals("   ---   \t\n", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorMultipleCombined2_mDuB11() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("   ---   \t\n---\n");
        assertEquals("   ---   \t\n---\n", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorMultipleCombined3_OyOt12() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("   ---   \t\n---\n---\n");
        assertEquals("   ---   \t\n---\n---\n", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorMultipleCombined4_RJUC13() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("   ---   \t\n---\n---\n---\n");
        assertEquals("   ---   \t\n---\n---\n---\n", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptSeparatorMultipleCombined5_uuaP14() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptSeparator("   ---   \t\n---\n---\n---\n---\n");
        assertEquals("   ---   \t\n---\n---\n---\n---\n", helpFormatter.getLongOptSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_zxoI0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String newline = "\n";
        helpFormatter.setNewLine(newline);
        assertEquals("\n", helpFormatter.defaultNewLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSyntaxPrefix_rTet0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String actual = helpFormatter.getSyntaxPrefix();
        String expected = "usage: ";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_UVDq0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        formatter.printHelp("cmdLineSyntax", "header", options, "footer", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintUsage_DFhS15() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        formatter.printUsage(pw, 80, "app", new Options());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testNewLine_dcIa0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        assertEquals(System.getProperty("line.separator"), helpFormatter.getNewLine());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_Oimw0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setLongOptPrefix("prefix");
        assertEquals("prefix", helpFormatter.defaultLongOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_GhYQ0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String actual = helpFormatter.getArgName();
        String expected = "arg";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_oTlm0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> optionComparator = helpFormatter.getOptionComparator();
        assertEquals(optionComparator, helpFormatter.getOptionComparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_neGg0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "cmdLineSyntax";
        String header = "header";
        String footer = "footer";
        boolean autoUsage = true;
        formatter.printHelp(80, cmdLineSyntax, header, options, footer, autoUsage);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_LfwQ0() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setOptPrefix("prefix");
        assertEquals("prefix", formatter.defaultOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_EOFR1() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setSyntaxPrefix("syntax");
        assertEquals("syntax", formatter.defaultSyntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_eUwL0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(10);
        assertEquals(10, helpFormatter.defaultDescPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPaddingWithZero_Xdeb1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(0);
        assertEquals(0, helpFormatter.defaultDescPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPaddingWithNegativeNumber_NGhZ2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setDescPadding(-10);
        assertEquals(-10, helpFormatter.defaultDescPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLeftPadding_UevW0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getLeftPadding();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongOptPrefix_fYpG0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String longOptPrefix = helpFormatter.getLongOptPrefix();
        assertEquals("--", longOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_vYPP0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String s = "   Hello, World!   ";
        String expected = "   Hello, World!";
        String actual = helpFormatter.rtrim(s);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithEmptyInput_KieA1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String s = "";
        String expected = "";
        String actual = helpFormatter.rtrim(s);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithNullInput_ToaD2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String s = null;
        String expected = null;
        String actual = helpFormatter.rtrim(s);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_rxOk0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setSyntaxPrefix("prefix");
        assertEquals("prefix", helpFormatter.defaultSyntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_hfTJ0() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        formatter.printHelp("cmdLineSyntax", "header", options, "footer", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_Elyp0() {
        HelpFormatter formatter = new HelpFormatter();
        PrintWriter pw = new PrintWriter(System.out);
        Options options = new Options();
        formatter.printHelp(pw, 80, "programName", null, options, 2, 2, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWidth_hKXu0_huUE0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int width = helpFormatter.getWidth();
        assertEquals(74, width);
    }
}