/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_ocVS0_1() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        Assertions.assertNotNull(args);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_ocVS0_2() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        Assertions.assertEquals(0, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_Yzux0() {
        CommandLine commandLine = new CommandLine();
        Option[] expectedOptions = Option.EMPTY_ARRAY;
        Option[] actualOptions = commandLine.getOptions();
        assertEquals(expectedOptions, actualOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_uthp0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        String defaultValue = "default";
        String result = commandLine.getOptionValue(option, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_wIxu0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "option description");
        String defaultValue = "default value";
        String expected = "option value";
        String actual = commandLine.getOptionValue(option, () -> expected);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_buFx0_1() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_buFx0_2() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLine_WjxK1() {
        CommandLine commandLine = new CommandLine();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_TUcg2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetOptionValue_pABP0() {
        CommandLine commandLine = new CommandLine();
        String defaultValue = "default";
        String optionValue = commandLine.getOptionValue("option", defaultValue);
        assertEquals(defaultValue, optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_oFQH0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "option description");
        commandLine.addOption(option);
        String opt = "o";
        String defaultValue = "default";
        String expected = defaultValue;
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_ocAC0() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a');
        assertEquals(null, optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties_xFbc0() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties2_hlbO1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("longOpt");
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties3_iNNe2() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertTrue(props.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties4_ynGi3() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("longOpt");
        assertTrue(props.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetArgs_XfSW0() {
        Option option = new Option("o", "option", true, "description");
        int result = option.getArgs();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetDescription_BfyP1() {
        Option option = new Option("o", "option", true, "description");
        String result = option.getDescription();
        assertEquals("description", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetArgName_KMMZ2() {
        Option option = new Option("o", "option", true, "description");
        String argName = "argName";
        option.setArgName(argName);
        assertEquals(argName, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_YSyu0() {
        CommandLine commandLine = CommandLine.builder().build();
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetArgs_WZGb0() {
        Option option = new Option("option", "longOption", true, "description");
        int actual = option.getArgs();
        assertEquals(1, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetDescription_vaNe1() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.getDescription();
        assertEquals("description", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetArgName_iOFF2() {
        Option option = new Option("option", "longOption", true, "description");
        String argName = "argName";
        option.setArgName(argName);
        assertEquals(argName, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionObject_vUAR0() {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Object optionObject = commandLine.getOptionObject(opt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_pJkC0() {
        CommandLine commandLine = new CommandLine();
        String defaultValue = "default";
        String actual = commandLine.getOptionValue('o', defaultValue);
        assertEquals(defaultValue, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithOptionNotPresent_maTk2() {
        CommandLine commandLine = new CommandLine();
        String defaultValue = "default";
        String[] args = {"-x", "value"};
        String actual = commandLine.getOptionValue('o', defaultValue);
        assertEquals(defaultValue, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithDefaultValueNull_EevZ3() {
        CommandLine commandLine = new CommandLine();
        String defaultValue = null;
        String[] args = {"-o", "value"};
        String actual = commandLine.getOptionValue('o', defaultValue);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionObject_lohA0() {
        CommandLine cmd = new CommandLine();
        Object optionObject = cmd.getOptionObject('a');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test14_AUnZ13() {
        CommandLine commandLine = new CommandLine();
        char opt = 'n';
        Boolean defaultValue = true;
        Boolean expected = true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_BHMS0_1() {
        Option option = new Option("o", "longOption", true, "description");
        assertEquals("o", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_BHMS0_2() {
        Option option = new Option("o", "longOption", true, "description");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_BHMS0_3() {
        Option option = new Option("o", "longOption", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_BHMS0_4() {
        Option option = new Option("o", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor2_HETk1_1() {
        Option option = new Option("o", true, "description");
        assertEquals("o", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor2_HETk1_2() {
        Option option = new Option("o", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor2_HETk1_3() {
        Option option = new Option("o", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor3_KepI2_1() {
        Option option = new Option("o", "description");
        assertEquals("o", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor3_KepI2_2() {
        Option option = new Option("o", "description");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor3_KepI2_3() {
        Option option = new Option("o", "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValues_PfyI3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "longOption", true, "description");
        String[] values = commandLine.getOptionValues(option);
        assertNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_IUHH0() {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption('a');
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_qIdt0() {
        Option option = new Option("o", "option", true, "description");
        CommandLine commandLine = new CommandLine();
        assertFalse(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgList_mxwT0_1() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertNotNull(argList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgList_mxwT0_2() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertTrue(argList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_hDwX0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "defaultValue";
        String result = commandLine.getOptionValue(option, () -> defaultValue);
        assertEquals("defaultValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_BNck0() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "default");
        assertEquals("default", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_sWGA0_1() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_sWGA0_2() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithEmptyOption_ZqYw3() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("");
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithOptionThatDoesNotExist_Gdhm4() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("optionThatDoesNotExist");
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithOptionThatDoesNotExistAndIsDeprecated_WHoP5() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("deprecatedOptionThatDoesNotExist");
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_nYqT0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "option description");
        commandLine.addOption(option);
        String opt = "o";
        boolean expected = true;
        boolean actual = commandLine.hasOption(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithLongOption_Gime2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "option description");
        commandLine.addOption(option);
        String opt = "option";
        boolean expected = true;
        boolean actual = commandLine.hasOption(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithNoOption_GDtL3() {
        CommandLine commandLine = new CommandLine();
        String opt = "o";
        boolean expected = false;
        boolean actual = commandLine.hasOption(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithNullOption_TKjL4() {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        boolean expected = false;
        boolean actual = commandLine.hasOption(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_zcFQ0_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "option description");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_zcFQ0_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "option description");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_0_MHzB0() {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue(option);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_1_aiOP1() {
        Option option = new Option("option", true, "description");
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue(option);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOptionValue_2_BrsW2() {
        Option option = new Option("option", "description");
        CommandLine commandLine = new CommandLine();
        String result = commandLine.getOptionValue(option);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_ObqA0_yJBl0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        try {
            String result = commandLine.getParsedOptionValue(opt);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_fuQh1_vTEc0() {
        CommandLine commandLine = new CommandLine();
        String opt = "option2";
        Boolean defaultValue = true;
        Boolean expected = true;
        try {
            Boolean actual = commandLine.getParsedOptionValue(opt, defaultValue);
            assertEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_WGxC2_zNta0() {
        CommandLine commandLine = new CommandLine();
        String opt = "option3";
        String defaultValue = "default";
        String expected = "default";
        String actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_Kwqk4_zkVg0() {
        CommandLine commandLine = new CommandLine();
        String opt = "option5";
        Float defaultValue = 1.5f;
        Float expected = 1.5f;
        Float actual;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_UqSv5_FFiu0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "option6";
        Long defaultValue = 100L;
        Long expected = 100L;
        Long actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_qkIk7_AeEh0() {
        CommandLine commandLine = new CommandLine();
        String opt = "option8";
        Character defaultValue = 'a';
        Character expected = 'a';
        Character actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_sXGL8_GaBJ0() {
        CommandLine commandLine = new CommandLine();
        String opt = "option9";
        Boolean defaultValue = true;
        Boolean expected = true;
        try {
            Boolean actual = commandLine.getParsedOptionValue(opt, defaultValue);
            assertEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetParsedOptionValueWithDefaultValue_JdfT3_hgfi0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        String defaultValue = "default";
        String result = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_qAQH0_SROr0() {
        Option option = new Option("o", "option", true, "description");
        CommandLine commandLine = new CommandLine();
        String value = null;
        try {
            value = commandLine.getParsedOptionValue(option);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue2_MDgU1_YmoM0() {
        Option option = new Option("o", "option", true, "description");
        CommandLine commandLine = new CommandLine();
        String value = null;
        try {
            value = commandLine.getParsedOptionValue(option, () -> "default");
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals("default", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_Hoowy0_JZzg0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String defaultValue = "default";
        String expected = "default";
        String actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_FhQk1_vUrj0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'b';
        Integer defaultValue = 10;
        Integer expected = 10;
        Integer actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_EMdN2_Ngpe0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'c';
        Boolean defaultValue = true;
        Boolean expected = true;
        Boolean actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_nJPr3_PGNq0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'd';
        Float defaultValue = 3.14f;
        Float expected = 3.14f;
        Float actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_DLMo4_mNxT0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'e';
        Double defaultValue = 2.71828;
        Double expected = 2.71828;
        Double actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_HNLR5_JEdL0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'f';
        List<String> defaultValue = Arrays.asList("a", "b", "c");
        List<String> expected = Arrays.asList("a", "b", "c");
        List<String> actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_DzNp7_Vqmf0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'h';
        Set<String> defaultValue = new HashSet<>(Arrays.asList("a", "b", "c"));
        Set<String> expected = new HashSet<>(Arrays.asList("a", "b", "c"));
        Set<String> actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_zxKo9_gymk0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'j';
        Date defaultValue = new Date();
        Date expected = new Date();
        Date actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test12_XtVb11_mLtU0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'l';
        String defaultValue = "default";
        String expected = "default";
        String actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test13_Wlhu12_iWjj0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'm';
        Integer defaultValue = 10;
        Integer expected = 10;
        Integer actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_ocVS0() {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        Assertions.assertNotNull(args);
        Assertions.assertEquals(0, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_buFx0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(1, option.getArgs());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_BHMS0() {
        Option option = new Option("o", "longOption", true, "description");
        assertEquals("o", option.getOpt());
        assertEquals("longOption", option.getLongOpt());
        assertTrue(option.hasArg());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor2_HETk1() {
        Option option = new Option("o", true, "description");
        assertEquals("o", option.getOpt());
        assertTrue(option.hasArg());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor3_KepI2() {
        Option option = new Option("o", "description");
        assertEquals("o", option.getOpt());
        assertFalse(option.hasArg());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgList_mxwT0() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertNotNull(argList);
        assertTrue(argList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_zcFQ0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "option description");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("o"));
        assertFalse(commandLine.hasOption("x"));
    }
}