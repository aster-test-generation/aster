/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithEatTheRestFalse_BGPd1() throws org.apache.commons.cli.ParseException {
        PosixParser posixParser = new PosixParser();
        String[] arguments = {"--option1", "value1", "--option2", "value2"};
        String[] expectedTokens = {"--option1", "value1", "--option2", "value2"};
        String[] actualTokens = posixParser.flatten(new Options(), arguments, false);
        assertArrayEquals(expectedTokens, actualTokens);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithEmptyArguments_qwWp2() throws org.apache.commons.cli.ParseException {
        PosixParser posixParser = new PosixParser();
        String[] arguments = {};
        String[] expectedTokens = {};
        String[] actualTokens = posixParser.flatten(new Options(), arguments, false);
        assertArrayEquals(expectedTokens, actualTokens);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_jOWv6() throws org.apache.commons.cli.ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-a", "b"};
        boolean stopAtNonOption = true;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertEquals(true, Arrays.asList(result).contains("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_EpWh7() throws org.apache.commons.cli.ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"--long", "b"};
        boolean stopAtNonOption = true;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertEquals(true, Arrays.asList(result).contains("--long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_OGgC8() throws org.apache.commons.cli.ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"-a", "b"};
        boolean stopAtNonOption = true;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertEquals(true, Arrays.asList(result).contains("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_KKNo9() throws org.apache.commons.cli.ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"--long", "b"};
        boolean stopAtNonOption = true;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertEquals(true, Arrays.asList(result).contains("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_oFno11() throws org.apache.commons.cli.ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"--long", "b"};
        boolean stopAtNonOption = true;
        String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
        assertEquals(true, Arrays.asList(result).size() == 3);
    }
}