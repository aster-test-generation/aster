/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_LvfS0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_sfjo1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_TIwB2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_AUgI3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_QSql4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_kxZy5() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_sJSt6() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f-g");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions8_OTtL7() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f-g-h");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions9_sXAr8() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f-g-h-i");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions10_NkyF9() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f-g-h-i-j");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions11_PeOR10() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f-g-h-i-j-k");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions12_QmVk11() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f-g-h-i-j-k-l");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions13_lWis12() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f-g-h-i-j-k-l-m");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions14_ySsv13() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f-g-h-i-j-k-l-m-n");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions15_iMaH14() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f-g-h-i-j-k-l-m-n-o");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions16_iuYc15() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions17_ZuzV16() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("-a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_VJNH0_1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("abc");
        assertEquals(0, defaultParser.cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_VJNH0_2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("abc");
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_WXYq1_1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b");
        assertEquals(1, defaultParser.cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_WXYq1_2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b");
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_WXYq1_3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b");
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_tgrq2_1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c");
        assertEquals(2, defaultParser.cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_tgrq2_2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c");
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_tgrq2_3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c");
        assertEquals("-c", defaultParser.cmd.getOptions()[1].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_tgrq2_4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c");
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_nGwG3_1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d");
        assertEquals(3, defaultParser.cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_nGwG3_2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d");
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_nGwG3_3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d");
        assertEquals("-c", defaultParser.cmd.getOptions()[1].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_nGwG3_4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d");
        assertEquals("-d", defaultParser.cmd.getOptions()[2].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_nGwG3_5() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d");
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_EhIB4_1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e");
        assertEquals(4, defaultParser.cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_EhIB4_2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e");
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_EhIB4_3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e");
        assertEquals("-c", defaultParser.cmd.getOptions()[1].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_EhIB4_4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e");
        assertEquals("-d", defaultParser.cmd.getOptions()[2].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_EhIB4_5() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e");
        assertEquals("-e", defaultParser.cmd.getOptions()[3].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_EhIB4_6() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e");
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_oZYA5_1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f");
        assertEquals(5, defaultParser.cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_oZYA5_2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f");
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_oZYA5_3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f");
        assertEquals("-c", defaultParser.cmd.getOptions()[1].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_oZYA5_4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f");
        assertEquals("-d", defaultParser.cmd.getOptions()[2].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_oZYA5_5() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f");
        assertEquals("-e", defaultParser.cmd.getOptions()[3].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_oZYA5_6() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f");
        assertEquals("-f", defaultParser.cmd.getOptions()[4].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_oZYA5_7() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f");
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_WQRC6_1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
        assertEquals(6, defaultParser.cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_WQRC6_2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_WQRC6_3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
        assertEquals("-c", defaultParser.cmd.getOptions()[1].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_WQRC6_4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
        assertEquals("-d", defaultParser.cmd.getOptions()[2].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_WQRC6_5() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
        assertEquals("-e", defaultParser.cmd.getOptions()[3].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_WQRC6_6() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
        assertEquals("-f", defaultParser.cmd.getOptions()[4].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_WQRC6_7() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
        assertEquals("-g", defaultParser.cmd.getOptions()[5].toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_WQRC6_8() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_tNfX0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_dfMa1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("token");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_MhaM0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        CommandLine commandLine = null;
        try {
            commandLine = new DefaultParser().parse(options, arguments);
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
        assertNotNull(commandLine);
        assertTrue(commandLine.hasOption('a'));
        assertEquals("value", commandLine.getOptionValue('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_ybrq0() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "required option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-r", "value"}, null, false);
        assertEquals("value", cmd.getOptionValue("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_sAil2() throws ParseException {
        Options options = new Options();
        options.addOption("p", "property", true, "property option");
        DefaultParser parser = new DefaultParser();
        Properties properties = new Properties();
        properties.setProperty("p", "value");
        CommandLine cmd = parser.parse(options, new String[]{"--property"}, properties, false);
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_NVtt0() {
        Options options = new Options();
        assertTrue(options.hasLongOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_JDhE1_1() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("opt");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_JDhE1_2() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("opt");
        assertEquals("opt", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_KCqA2() {
        Options options = new Options();
        Option option = options.getOption("opt");
        assertEquals("opt", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_jQDQ3_1() {
        Options options = new Options();
        Collection<Option> opts = options.getOptions();
        Option option = opts.iterator().next();
        assertEquals(1, opts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_jQDQ3_2() {
        Options options = new Options();
        Collection<Option> opts = options.getOptions();
        Option option = opts.iterator().next();
        assertEquals("opt", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_Gpil1_1() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        matchingOpts = options.getMatchingOptions("o");
        matchingOpts = options.getMatchingOptions("non-existent");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_Gpil1_2() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        matchingOpts = options.getMatchingOptions("o");
        matchingOpts = options.getMatchingOptions("non-existent");
        assertEquals("long", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_Gpil1_4() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        matchingOpts = options.getMatchingOptions("o");
        matchingOpts = options.getMatchingOptions("non-existent");
        assertEquals("option", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_jQGn4() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        options.addOption("o", "option", false, "description");
        assertEquals("[l, option]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_bkoW7_1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        assertEquals(1, options.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_bkoW7_2() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        assertTrue(options.getOptionGroups().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_MkAf2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("longOption", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_rvsT4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertEquals("[l=longOption]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Diug4() {
        Options options = new Options();
        assertEquals("Options: []", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_RsFD1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("lo");
        assertEquals(2, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_RsFD1_3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("lo");
        assertTrue(matchingOptions.contains("otherOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_FvOj4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertEquals("Options: [l longOption]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_ebNl5_3() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertTrue(options.getRequiredOptions().contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_HdHt4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        assertEquals("[l, option]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_zdTz0_2() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose output");
        String[] arguments = {"-v"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertEquals("verbose output", commandLine.getOptionValue("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_Aqyj1_2() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose output");
        options.addOption("o", "output", true, "output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertEquals("verbose output", commandLine.getOptionValue("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_Aqyj1_3() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose output");
        options.addOption("o", "output", true, "output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_Aqyj1_4() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose output");
        options.addOption("o", "output", true, "output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertEquals("output.txt", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OOdI2_2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("v", "verbose", false, "verbose output"));
        group.addOption(new Option("q", "quiet", false, "quiet output"));
        options.addOptionGroup(group);
        String[] arguments = {"-v"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertEquals("verbose output", commandLine.getOptionValue("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_ztDw0() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "required option");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"-r", "value"}, null, false);
        assertEquals("value", cmd.getOptionValue("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionGroup_NxSm2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "alpha option"));
        group.addOption(new Option("b", "beta", false, "beta option"));
        options.addOptionGroup(group);
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"-a"}, null, false);
        assertEquals("alpha", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_tdoS0_2() throws ParseException {
        Options options = new Options();
        options.addOption("S", "shortOption", false, "short option description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-S"});
        assertEquals("short option description", commandLine.getOptionValue("S"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_aYyC1_2() throws ParseException {
        Options options = new Options();
        options.addOption("L", "longOption", false, "long option description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--longOption"});
        assertEquals("long option description", commandLine.getOptionValue("L"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_vYPx1_2() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        options.addOption("o", "output", true, "Output file");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-v", "output.txt"}, null, false);
        assertEquals("output.txt", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_EpSB4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals("[l, s]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_KeDo9_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertFalse(options.hasShortOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_beEt4() {
        Options options = new Options();
        String result = options.toString();
        assertEquals("Options []", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_ttmx8() {
        Options options = new Options();
        Options options2 = new Options();
        Options result = options.addOptions(options2);
        assertEquals(options2, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CMfW3() throws ParseException {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        String[] arguments = {"-l", "value"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_FrPC1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        options.addOption("L", "anotherLongOption", false, "description");
        assertEquals(2, options.getMatchingOptions("l").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_nnLs4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        options.addOption("L", "anotherLongOption", false, "description");
        assertEquals("[l, s, L]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_unkW1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("alpha").build());
        group.addOption(Option.builder("b").longOpt("beta").build());
        options.addOptionGroup(group);
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"--beta"});
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_tYRv0_2() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        String[] arguments = {"-v"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertEquals("Verbose output", cmd.getOptionValue("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_myIg1_2() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        options.addOption("o", "output", true, "Output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertEquals("Verbose output", cmd.getOptionValue("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_myIg1_3() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        options.addOption("o", "output", true, "Output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_myIg1_4() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        options.addOption("o", "output", true, "Output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertEquals("output.txt", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_qXSb2_2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("v").longOpt("verbose").desc("Verbose output").build());
        group.addOption(Option.builder("q").longOpt("quiet").desc("Quiet output").build());
        options.addOptionGroup(group);
        String[] arguments = {"--verbose"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertEquals("Verbose output", cmd.getOptionValue("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_yjIw1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("L", "anotherLongOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(2, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_yjIw1_3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("L", "anotherLongOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertTrue(matchingOptions.contains("anotherLongOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPrivateMethodCheckRequiredArgsMissingOptionGroup_gkdT5_1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("r", "required", false, "required option"));
        options.addOptionGroup(group);
        String[] arguments = {};
        Properties properties = new Properties();
        ParseException e = assertThrows(ParseException.class, () -> {
            new DefaultParser().parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_GIWj0() {
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "required option");
        String[] arguments = {"-r", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, null, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertNotNull(cmd);
        assertTrue(cmd.hasOption("r"));
        assertEquals("value", cmd.getOptionValue("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_rXpx1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("alpha").build());
        group.addOption(Option.builder("b").longOpt("beta").build());
        options.addOptionGroup(group);
        String[] arguments = {"--beta"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, null, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertNotNull(cmd);
        assertTrue(cmd.hasOption("b"));
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithJavaProperty_VfPN2() {
        Options options = new Options();
        options.addOption(Option.builder("D").longOpt("define").hasArg().build());
        String[] arguments = {"-Dkey=value"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, null, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertNotNull(cmd);
        assertTrue(cmd.hasOption("D"));
        assertEquals("value", cmd.getOptionValue("D"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_Acaq3() {
        Options options = new Options();
        options.addOption(Option.builder("a").longOpt("alpha").build());
        options.addOption(Option.builder("b").longOpt("beta").build());
        String[] arguments = {"--alpha", "value", "--beta"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, null, true);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertNotNull(cmd);
        assertTrue(cmd.hasOption("a"));
        assertEquals("value", cmd.getOptionValue("a"));
        assertTrue(cmd.hasOption("b"));
        assertEquals("beta", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_OaPJ0() {
        Options options = null;
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        assertThrows(IllegalArgumentException.class, () -> parser.parse(options, arguments, properties, stopAtNonOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_ODlt2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertEquals("longOption", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qWvK6_2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        String[] arguments = {"-l", "value"};
        CommandLine commandLine = defaultParser.parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qQNx0_1() throws ParseException {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        Properties properties = new Properties();
        options.addOption("o", "option", true, "description");
        String[] arguments = {"-o", "value"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("l", "longOption", true, "description");
        arguments = new String[]{"--longOption", "value"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("b", "booleanOption", false, "description");
        arguments = new String[]{"-b"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("n", "numberOption", true, "description");
        arguments = new String[]{"-n", "10"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("f", "fileOption", true, "description");
        arguments = new String[]{"-f", "/path/to/file"};
        defaultParser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qQNx0_2() throws ParseException {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        Properties properties = new Properties();
        options.addOption("o", "option", true, "description");
        String[] arguments = {"-o", "value"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("l", "longOption", true, "description");
        arguments = new String[]{"--longOption", "value"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("b", "booleanOption", false, "description");
        arguments = new String[]{"-b"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("n", "numberOption", true, "description");
        arguments = new String[]{"-n", "10"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("f", "fileOption", true, "description");
        arguments = new String[]{"-f", "/path/to/file"};
        defaultParser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qQNx0_3() throws ParseException {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        Properties properties = new Properties();
        options.addOption("o", "option", true, "description");
        String[] arguments = {"-o", "value"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("l", "longOption", true, "description");
        arguments = new String[]{"--longOption", "value"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("b", "booleanOption", false, "description");
        arguments = new String[]{"-b"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("n", "numberOption", true, "description");
        arguments = new String[]{"-n", "10"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("f", "fileOption", true, "description");
        arguments = new String[]{"-f", "/path/to/file"};
        defaultParser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qQNx0_4() throws ParseException {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        Properties properties = new Properties();
        options.addOption("o", "option", true, "description");
        String[] arguments = {"-o", "value"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("l", "longOption", true, "description");
        arguments = new String[]{"--longOption", "value"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("b", "booleanOption", false, "description");
        arguments = new String[]{"-b"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("n", "numberOption", true, "description");
        arguments = new String[]{"-n", "10"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("f", "fileOption", true, "description");
        arguments = new String[]{"-f", "/path/to/file"};
        defaultParser.parse(options, arguments, properties, false);
        assertEquals("10", commandLine.getOptionValue("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qQNx0_5() throws ParseException {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        Properties properties = new Properties();
        options.addOption("o", "option", true, "description");
        String[] arguments = {"-o", "value"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("l", "longOption", true, "description");
        arguments = new String[]{"--longOption", "value"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("b", "booleanOption", false, "description");
        arguments = new String[]{"-b"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("n", "numberOption", true, "description");
        arguments = new String[]{"-n", "10"};
        defaultParser.parse(options, arguments, properties, false);
        options.addOption("f", "fileOption", true, "description");
        arguments = new String[]{"-f", "/path/to/file"};
        defaultParser.parse(options, arguments, properties, false);
        assertEquals("/path/to/file", commandLine.getOptionValue("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_oWGU4() {
        Options options = new Options();
        String result = options.toString();
        assertEquals("[]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_fXti1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals(2, options.getMatchingOptions("l").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_Kpjt0() throws MissingOptionException {
        DefaultParser defaultParser = new DefaultParser(false);
        defaultParser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions2_gGKD1() throws MissingOptionException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_Tuhz1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "optionA", false, "Option A"));
        group.addOption(new Option("b", "optionB", false, "Option B"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("requires an argument"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_BeHa2() {
        Options options = new Options();
        options.addRequiredOption("a", "optionA", true, "Option A");
        String[] arguments = new String[]{"-a"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("requires an argument"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_RVjP3() {
        Options options = new Options();
        options.addOption("a", "optionA", true, "Option A");
        String[] arguments = new String[]{"-b"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("not recognized"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_JvHR12_fWVG0_2() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        @SuppressWarnings("unchecked")
        List<Option> requiredOptions = (List<Option>) options.getRequiredOptions();
        assertEquals("longOption", requiredOptions.get(0).getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_UYcD11_ffwm0_3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertEquals("l", options.getOption("l").getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_tAaB2_dHRg0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a1");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_nuZQ3_iFML0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a12");
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_hmaJ6_qUpI0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a12345");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions10_KPLq9_OMHx0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a12345678");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions11_Kihs10_ZToI0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a123456789");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions12_oeKH11_pRlj0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a1234567890");
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions13_jqJz12_DjKc0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a12345678901");
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions14_CoGb13_EcDp0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a123456789012");
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions15_vMzc14_qSsg0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a1234567890123");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions16_LVvs15_fOhl0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a12345678901234");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions17_kqRP16_SdxE0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a123456789012345");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions18_ArFL17_lvHh0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a1234567890123456");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions19_bxhu18_oSCG0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a12345678901234567");
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions20_RLvg19_LzhJ0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a123456789012345678");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredArgs_GxHB4_oDEJ0() {
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        String[] arguments = new String[]{"arg1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
            assertEquals(1, commandLine.getArgs().length);
            assertEquals("arg1", commandLine.getArgs()[0]);
            assertEquals("option", commandLine.getOptionValue("o"));
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_DTox2_osTZ0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "alpha description"));
        group.addOption(new Option("b", "beta", false, "beta description"));
        options.addOptionGroup(group);
        String[] arguments = {"-a"};
        CommandLine commandLine = null;
        try {
            commandLine = new DefaultParser().parse(options, arguments, null, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals("alpha", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_VJNH0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("abc");
        assertEquals(0, defaultParser.cmd.getOptions().length);
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_WXYq1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b");
        assertEquals(1, defaultParser.cmd.getOptions().length);
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_tgrq2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c");
        assertEquals(2, defaultParser.cmd.getOptions().length);
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
        assertEquals("-c", defaultParser.cmd.getOptions()[1].toString());
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_nGwG3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d");
        assertEquals(3, defaultParser.cmd.getOptions().length);
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
        assertEquals("-c", defaultParser.cmd.getOptions()[1].toString());
        assertEquals("-d", defaultParser.cmd.getOptions()[2].toString());
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_EhIB4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e");
        assertEquals(4, defaultParser.cmd.getOptions().length);
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
        assertEquals("-c", defaultParser.cmd.getOptions()[1].toString());
        assertEquals("-d", defaultParser.cmd.getOptions()[2].toString());
        assertEquals("-e", defaultParser.cmd.getOptions()[3].toString());
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_oZYA5() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f");
        assertEquals(5, defaultParser.cmd.getOptions().length);
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
        assertEquals("-c", defaultParser.cmd.getOptions()[1].toString());
        assertEquals("-d", defaultParser.cmd.getOptions()[2].toString());
        assertEquals("-e", defaultParser.cmd.getOptions()[3].toString());
        assertEquals("-f", defaultParser.cmd.getOptions()[4].toString());
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_WQRC6() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
        assertEquals(6, defaultParser.cmd.getOptions().length);
        assertEquals("-b", defaultParser.cmd.getOptions()[0].toString());
        assertEquals("-c", defaultParser.cmd.getOptions()[1].toString());
        assertEquals("-d", defaultParser.cmd.getOptions()[2].toString());
        assertEquals("-e", defaultParser.cmd.getOptions()[3].toString());
        assertEquals("-f", defaultParser.cmd.getOptions()[4].toString());
        assertEquals("-g", defaultParser.cmd.getOptions()[5].toString());
        assertEquals(null, defaultParser.currentOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_JDhE1() {
        Options options = new Options();
        List<String> matchingOpts = options.getMatchingOptions("opt");
        assertEquals(1, matchingOpts.size());
        assertEquals("opt", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_jQDQ3() {
        Options options = new Options();
        Collection<Option> opts = options.getOptions();
        assertEquals(1, opts.size());
        Option option = opts.iterator().next();
        assertEquals("opt", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_bkoW7() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        assertEquals(1, options.getOptionGroups().size());
        assertTrue(options.getOptionGroups().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_RsFD1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("lo");
        assertEquals(2, matchingOptions.size());
        assertTrue(matchingOptions.contains("longOption"));
        assertTrue(matchingOptions.contains("otherOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_ebNl5() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("l"));
        assertTrue(options.hasLongOption("longOption"));
        assertTrue(options.getRequiredOptions().contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_zdTz0() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose output");
        String[] arguments = {"-v"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("v"));
        assertEquals("verbose output", commandLine.getOptionValue("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_Aqyj1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose output");
        options.addOption("o", "output", true, "output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("v"));
        assertEquals("verbose output", commandLine.getOptionValue("v"));
        assertTrue(commandLine.hasOption("o"));
        assertEquals("output.txt", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OOdI2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("v", "verbose", false, "verbose output"));
        group.addOption(new Option("q", "quiet", false, "quiet output"));
        options.addOptionGroup(group);
        String[] arguments = {"-v"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("v"));
        assertEquals("verbose output", commandLine.getOptionValue("v"));
        assertFalse(commandLine.hasOption("q"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_tdoS0() throws ParseException {
        Options options = new Options();
        options.addOption("S", "shortOption", false, "short option description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-S"});
        assertTrue(commandLine.hasOption("S"));
        assertEquals("short option description", commandLine.getOptionValue("S"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_aYyC1() throws ParseException {
        Options options = new Options();
        options.addOption("L", "longOption", false, "long option description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--longOption"});
        assertTrue(commandLine.hasOption("L"));
        assertEquals("long option description", commandLine.getOptionValue("L"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_vYPx1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        options.addOption("o", "output", true, "Output file");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-v", "output.txt"}, null, false);
        assertTrue(commandLine.hasOption("v"));
        assertEquals("output.txt", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_KeDo9() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.hasShortOption("s"));
        assertFalse(options.hasShortOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_tYRv0() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        String[] arguments = {"-v"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertTrue(cmd.hasOption("v"));
        assertEquals("Verbose output", cmd.getOptionValue("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_myIg1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        options.addOption("o", "output", true, "Output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertTrue(cmd.hasOption("v"));
        assertEquals("Verbose output", cmd.getOptionValue("v"));
        assertTrue(cmd.hasOption("o"));
        assertEquals("output.txt", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_qXSb2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("v").longOpt("verbose").desc("Verbose output").build());
        group.addOption(Option.builder("q").longOpt("quiet").desc("Quiet output").build());
        options.addOptionGroup(group);
        String[] arguments = {"--verbose"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertTrue(cmd.hasOption("v"));
        assertEquals("Verbose output", cmd.getOptionValue("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_yjIw1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("L", "anotherLongOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(2, matchingOptions.size());
        assertTrue(matchingOptions.contains("longOption"));
        assertTrue(matchingOptions.contains("anotherLongOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPrivateMethodCheckRequiredArgsMissingOptionGroup_gkdT5() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("r", "required", false, "required option"));
        options.addOptionGroup(group);
        String[] arguments = {};
        Properties properties = new Properties();
        ParseException e = assertThrows(ParseException.class, () -> {
            new DefaultParser().parse(options, arguments, properties, false);
        });
        assertEquals("Missing required option: r", e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qWvK6() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        String[] arguments = {"-l", "value"};
        CommandLine commandLine = defaultParser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("l"));
        assertEquals("value", commandLine.getOptionValue("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qQNx0() throws ParseException {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        Properties properties = new Properties();
        options.addOption("o", "option", true, "description");
        String[] arguments = {"-o", "value"};
        defaultParser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("o"));
        options.addOption("l", "longOption", true, "description");
        arguments = new String[]{"--longOption", "value"};
        defaultParser.parse(options, arguments, properties, false);
        assertEquals("value", commandLine.getOptionValue("l"));
        options.addOption("b", "booleanOption", false, "description");
        arguments = new String[]{"-b"};
        defaultParser.parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("b"));
        options.addOption("n", "numberOption", true, "description");
        arguments = new String[]{"-n", "10"};
        defaultParser.parse(options, arguments, properties, false);
        assertEquals("10", commandLine.getOptionValue("n"));
        options.addOption("f", "fileOption", true, "description");
        arguments = new String[]{"-f", "/path/to/file"};
        defaultParser.parse(options, arguments, properties, false);
        assertEquals("/path/to/file", commandLine.getOptionValue("f"));
    }
}