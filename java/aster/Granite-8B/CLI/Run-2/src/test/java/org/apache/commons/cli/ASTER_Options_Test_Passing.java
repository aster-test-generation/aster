/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithNoOption_SsFB1() {
        Options options = new Options();
        String opt = "no-option";
        boolean result = options.hasLongOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithEmptyOption_WlKl2() {
        Options options = new Options();
        String opt = "";
        boolean result = options.hasLongOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptionWithNullOption_wvuU3() {
        Options options = new Options();
        String opt = null;
        boolean result = options.hasLongOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionsGetOptions_rVBc0() {
        Options options = new Options();
        Collection<Option> actual = options.getOptions();
        assertNotNull(actual);
        assertTrue(actual.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionGroups_bOOl0() {
        Options options = new Options();
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertNotNull(optionGroups);
        assertTrue(optionGroups.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_hEHJ0() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        Collection<Option> optionsCollection = options.getOptions();
        assertNotNull(optionsCollection);
        assertTrue(optionsCollection.contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_semH1() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        assertTrue(options.hasLongOption("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MVXv2() {
        Options options = new Options();
        Option option1 = new Option("o1", "option1", true, "description");
        Option option2 = new Option("o2", "option2", true, "description");
        options.addOption(option1);
        options.addOption(option2);
        List<String> matchingOptions = options.getMatchingOptions("o");
        assertEquals(2, matchingOptions.size());
        assertTrue(matchingOptions.contains("option1"));
        assertTrue(matchingOptions.contains("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_XSHi3() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        Option retrievedOption = options.getOption("o");
        assertNotNull(retrievedOption);
        assertEquals("option", retrievedOption.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_ArsT4() {
        Options options = new Options();
        Option option1 = new Option("o1", "option1", true, "description");
        Option option2 = new Option("o2", "option2", true, "description");
        options.addOption(option1);
        options.addOption(option2);
        Collection<Option> optionsCollection = options.getOptions();
        assertNotNull(optionsCollection);
        assertEquals(2, optionsCollection.size());
        assertTrue(optionsCollection.contains(option1));
        assertTrue(optionsCollection.contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_ScGc6() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        assertTrue(options.hasShortOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_wWbv7() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        List<?> requiredOptions = options.getRequiredOptions();
        assertNotNull(requiredOptions);
        assertTrue(requiredOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_DsGo8() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        assertTrue(options.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_Jdai0() {
        Options options = new Options();
        Options options2 = new Options();
        Options result = options.addOptions(options2);
        assertEquals(options, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_NsCf0() {
        Options options = new Options();
        String opt = "opt";
        boolean expected = false;
        boolean actual = options.hasShortOption(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_AAUq0() {
        Options options = new Options();
        options.addOption("o", true, "description");
        assertTrue(options.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRequiredOptions_FWhE0() {
        Options options = new Options();
        List<?> requiredOptions = options.getRequiredOptions();
        assertNotNull(requiredOptions);
        assertTrue(requiredOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_OjCd0() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertTrue(options.hasOption("o"));
        assertEquals("description", options.getOption("o").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_rWMv4() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertNotNull(options.getOption("o"));
        assertNull(options.getOption("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_AdYN5() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        options.addOption("x", "another option", false, "description");
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_jatV7() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertTrue(options.hasShortOption("o"));
        assertFalse(options.hasShortOption("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionsGetOptions_rVBc0_1() {
        Options options = new Options();
        Collection<Option> actual = options.getOptions();
        assertNotNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionsGetOptions_rVBc0_2() {
        Options options = new Options();
        Collection<Option> actual = options.getOptions();
        assertTrue(actual.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionGroups_bOOl0_1() {
        Options options = new Options();
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertNotNull(optionGroups);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionGroups_bOOl0_2() {
        Options options = new Options();
        Collection<OptionGroup> optionGroups = options.getOptionGroups();
        assertTrue(optionGroups.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_hEHJ0_1() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        Collection<Option> optionsCollection = options.getOptions();
        assertNotNull(optionsCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_hEHJ0_2() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        Collection<Option> optionsCollection = options.getOptions();
        assertTrue(optionsCollection.contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MVXv2_1() {
        Options options = new Options();
        Option option1 = new Option("o1", "option1", true, "description");
        Option option2 = new Option("o2", "option2", true, "description");
        options.addOption(option1);
        options.addOption(option2);
        List<String> matchingOptions = options.getMatchingOptions("o");
        assertEquals(2, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MVXv2_2() {
        Options options = new Options();
        Option option1 = new Option("o1", "option1", true, "description");
        Option option2 = new Option("o2", "option2", true, "description");
        options.addOption(option1);
        options.addOption(option2);
        List<String> matchingOptions = options.getMatchingOptions("o");
        assertTrue(matchingOptions.contains("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_MVXv2_3() {
        Options options = new Options();
        Option option1 = new Option("o1", "option1", true, "description");
        Option option2 = new Option("o2", "option2", true, "description");
        options.addOption(option1);
        options.addOption(option2);
        List<String> matchingOptions = options.getMatchingOptions("o");
        assertTrue(matchingOptions.contains("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_XSHi3_1() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        Option retrievedOption = options.getOption("o");
        assertNotNull(retrievedOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_XSHi3_2() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        Option retrievedOption = options.getOption("o");
        assertEquals("option", retrievedOption.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_ArsT4_1() {
        Options options = new Options();
        Option option1 = new Option("o1", "option1", true, "description");
        Option option2 = new Option("o2", "option2", true, "description");
        options.addOption(option1);
        options.addOption(option2);
        Collection<Option> optionsCollection = options.getOptions();
        assertNotNull(optionsCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_ArsT4_2() {
        Options options = new Options();
        Option option1 = new Option("o1", "option1", true, "description");
        Option option2 = new Option("o2", "option2", true, "description");
        options.addOption(option1);
        options.addOption(option2);
        Collection<Option> optionsCollection = options.getOptions();
        assertEquals(2, optionsCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_ArsT4_3() {
        Options options = new Options();
        Option option1 = new Option("o1", "option1", true, "description");
        Option option2 = new Option("o2", "option2", true, "description");
        options.addOption(option1);
        options.addOption(option2);
        Collection<Option> optionsCollection = options.getOptions();
        assertTrue(optionsCollection.contains(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_ArsT4_4() {
        Options options = new Options();
        Option option1 = new Option("o1", "option1", true, "description");
        Option option2 = new Option("o2", "option2", true, "description");
        options.addOption(option1);
        options.addOption(option2);
        Collection<Option> optionsCollection = options.getOptions();
        assertTrue(optionsCollection.contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_wWbv7_1() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        List<?> requiredOptions = options.getRequiredOptions();
        assertNotNull(requiredOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_wWbv7_2() {
        Options options = new Options();
        Option option = new Option("o", "option", true, "description");
        options.addOption(option);
        List<?> requiredOptions = options.getRequiredOptions();
        assertTrue(requiredOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRequiredOptions_FWhE0_1() {
        Options options = new Options();
        List<?> requiredOptions = options.getRequiredOptions();
        assertNotNull(requiredOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRequiredOptions_FWhE0_2() {
        Options options = new Options();
        List<?> requiredOptions = options.getRequiredOptions();
        assertTrue(requiredOptions.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_OjCd0_1() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertTrue(options.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_OjCd0_2() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertEquals("description", options.getOption("o").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_FPuf2_2() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertFalse(options.hasLongOption("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_rWMv4_1() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertNotNull(options.getOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_rWMv4_2() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertNull(options.getOption("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_DckY6_2() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        options.addOption("x", "another option", false, "description");
        assertNull(options.getOptionGroup(options.getOption("x")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_jatV7_1() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertTrue(options.hasShortOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_jatV7_2() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertFalse(options.hasShortOption("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOption_with_long_option_kQRL1_LCWa0() {
        Options options = new Options();
        Option option = new Option("l", "long", false, "long");
        options.addOption(option);
        Option result = options.getOption("long");
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_ipQi0_fid2() {
        Options options = new Options();
        String opt = "option";
        boolean result = options.hasLongOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_iTfG0_fid2() {
        Options options = new Options();
        String expected = "[ Options: [ short {} ] [ long {} ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_FPuf2_1_fid2() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertFalse(options.hasLongOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_veoI3_fid2() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        options.addOption("x", "another option", false, "description");
        assertEquals(1, options.getMatchingOptions("o").size());
    }
}