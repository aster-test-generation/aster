/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_TypeHandler_Coverage_Test_Passing {
    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateNumber_hEUT0_1() throws org.apache.commons.cli.ParseException {
        assertDoesNotThrow(() -> TypeHandler.createNumber("123"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateNumber_hEUT0_2() throws org.apache.commons.cli.ParseException {
        assertDoesNotThrow(() -> TypeHandler.createNumber("-123"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateNumber_hEUT0_3() throws org.apache.commons.cli.ParseException {
        assertDoesNotThrow(() -> TypeHandler.createNumber("123.456"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateNumber_hEUT0_4() throws org.apache.commons.cli.ParseException {
        assertDoesNotThrow(() -> TypeHandler.createNumber("-123.456"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateNumber_hEUT0_5() throws org.apache.commons.cli.ParseException {
        assertThrows(ParseException.class, () -> TypeHandler.createNumber("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateNumber_hEUT0_6() throws org.apache.commons.cli.ParseException {
        assertThrows(ParseException.class, () -> TypeHandler.createNumber("123abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObject_yzLL0() throws ParseException {
        String className = "java.lang.String";
        Object object = TypeHandler.createObject(className);
        assertEquals(String.class, object.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithStringAndObject_KBqj0() throws ParseException {
        String string = "exampleString";
        Object obj = String.class;
        Object expected = "exampleString";
        Object actual = TypeHandler.createValue(string, obj);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithStringAndClass_Yafn1() throws ParseException {
        String string = "exampleString";
        Class<?> obj = String.class;
        Object expected = "exampleString";
        Object actual = TypeHandler.createValue(string, obj);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithStringAndNull_yXDF2() throws ParseException {
        String string = "exampleString";
        Object obj = null;
        Object expected = "exampleString";
        Object actual = TypeHandler.createValue(string, obj);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithNullAndObject_orcH3() throws ParseException {
        String string = null;
        Object obj = String.class;
        Object expected = null;
        Object actual = TypeHandler.createValue(string, obj);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithNullAndClass_QXqV4() throws ParseException {
        String string = null;
        Class<?> obj = String.class;
        Object expected = null;
        Object actual = TypeHandler.createValue(string, obj);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValueWithNullAndNull_mcbH5() throws ParseException {
        String string = null;
        Object obj = null;
        Object expected = null;
        Object actual = TypeHandler.createValue(string, obj);
        assertEquals(expected, actual);
    }
}