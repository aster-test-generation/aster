/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_TypeHandler_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateValue_AhIZ0() throws ParseException {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = null;
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String string = "example";
        Object obj = String.class;
        Object expected = "example";
        Object actual = typeHandler.createValue(string, obj);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateValueWithNullString_DOZE1_1() {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = null;
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String string = null;
        Object obj = String.class;
        ParseException exception = assertThrows(ParseException.class, () -> typeHandler.createValue(string, obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateValueWithNullClass_bfIE2_1() throws ParseException {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = null;
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String string = "example";
        Object obj = null;
        ParseException exception = assertThrows(ParseException.class, () -> typeHandler.createValue(string, obj));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDate_KCvr0() {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String string = "2022-01-01";
        Date expected = new Date(1640995200000L);
        Date actual = typeHandler.createDate(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateFiles_Iomi0() {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = null;
        File[] result = TypeHandler.createFiles(null);
        assertTrue(result.length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateURLWithNullInput_slwn2() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String string = null;
        assertThrows(IllegalArgumentException.class, () -> typeHandler.createURL(string));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObject_dWIm0_1() throws ParseException {
        TypeHandler typeHandler = new TypeHandler();
        Object object = typeHandler.createObject("String");
        assertNotNull(object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObject_dWIm0_2() throws ParseException {
        TypeHandler typeHandler = new TypeHandler();
        Object object = typeHandler.createObject("String");
        assertTrue(object instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateValueWithNullString_DOZE1() {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = null;
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String string = null;
        Object obj = String.class;
        ParseException exception = assertThrows(ParseException.class, () -> typeHandler.createValue(string, obj));
        assertEquals("Value is null", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateValueWithNullClass_bfIE2() throws ParseException {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = null;
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String string = "example";
        Object obj = null;
        ParseException exception = assertThrows(ParseException.class, () -> typeHandler.createValue(string, obj));
        assertEquals("Class is null", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObject_dWIm0() throws ParseException {
        TypeHandler typeHandler = new TypeHandler();
        Object object = typeHandler.createObject("String");
        assertNotNull(object);
        assertTrue(object instanceof String);
    }
}