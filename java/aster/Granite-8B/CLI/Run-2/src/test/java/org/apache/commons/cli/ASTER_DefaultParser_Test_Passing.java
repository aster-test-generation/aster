/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder2_zDSF1() {
        DefaultParser defaultParser = DefaultParser.builder()
                .build();
        assertNotNull(defaultParser);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_atyP1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "alpha option"));
        group.addOption(new Option("b", "beta", false, "beta option"));
        options.addOptionGroup(group);
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_eqML3_1() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"--option", "value", "arg1", "arg2"}, null, true);
        assertEquals("value", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_eqML3_2() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"--option", "value", "arg1", "arg2"}, null, true);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_eqML3_3() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"--option", "value", "arg1", "arg2"}, null, true);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_eqML3_4() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"--option", "value", "arg1", "arg2"}, null, true);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_omKr0() throws ParseException {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_PLeg1_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_PLeg1_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ykqq2_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ykqq2_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ykqq2_3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ykqq2_4() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg3", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_hjHe6() {
        Options options = new Options();
        options.addRequiredOption("o", "option", true, "description");
        String[] arguments = new String[]{"arg1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        assertThrows(ParseException.class, () -> parser.parse(options, arguments, properties, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_NDjT0_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_NDjT0_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertFalse(options.hasLongOption("nonExistingOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_eKuW1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_eKuW1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_UegY2_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_UegY2_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleToken_CpWy0() {
        DefaultParser parser = new DefaultParser();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_imsi3() {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd;
        try {
            cmd = parser.parse(options, arguments, properties, stopAtNonOption);
            assertEquals(2, cmd.getArgs().length);
            assertEquals("arg1", cmd.getArgs()[0]);
            assertEquals("arg2", cmd.getArgs()[1]);
        } catch (ParseException e) {
            fail("Unexpected exception");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_jHoe2() {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
            assertNotNull(result);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_KkNb4() {
        CommandLine cmd = new CommandLine();
        String[] args = cmd.getArgs();
        assertEquals(0, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_quiq0_1() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        assertTrue(options.hasLongOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_quiq0_2() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        assertFalse(options.hasLongOption("non-existent"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_Gpil1_5() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        matchingOpts = options.getMatchingOptions("o");
        matchingOpts = options.getMatchingOptions("non-existent");
        assertTrue(matchingOpts.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_ecRh2_1() {
        Options options = new Options();
        Option option = new Option("l", "long", false, "description");
        options.addOption(option);
        assertEquals(option, options.getOption("long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_ecRh2_2() {
        Options options = new Options();
        Option option = new Option("l", "long", false, "description");
        options.addOption(option);
        assertNull(options.getOption("non-existent"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_aSQp3_1() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        options.addOption("o", "option", false, "description");
        Collection<Option> opts = options.getOptions();
        assertEquals(2, opts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_aSQp3_2() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        options.addOption("o", "option", false, "description");
        Collection<Option> opts = options.getOptions();
        assertTrue(opts.contains(new Option("l", "long", false, "description")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_aSQp3_3() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        options.addOption("o", "option", false, "description");
        Collection<Option> opts = options.getOptions();
        assertTrue(opts.contains(new Option("o", "option", false, "description")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_CUfX6_1() {
        Options options = new Options();
        Option option = new Option("l", "long", false, "description");
        options.addOption(option);
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_CUfX6_2() {
        Options options = new Options();
        Option option = new Option("l", "long", false, "description");
        options.addOption(option);
        assertTrue(options.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_wFIX10_1() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_wFIX10_2() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        assertTrue(options.getOptions().contains(new Option("l", "long", false, "description")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_PpDW0() {
        Options options = new Options();
        options.hasLongOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_TNum1() {
        Options options = new Options();
        options.getMatchingOptions("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_MbcA2() {
        Options options = new Options();
        options.getOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_UJXb3() {
        Options options = new Options();
        options.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_YxUj4() {
        Options options = new Options();
        options.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_ocSR5() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_aABe6() {
        Options options = new Options();
        options.addOption(new Option("opt", "longOpt", true, "description"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_prkd7() {
        Options options = new Options();
        options.addOptions(new Options());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_cixu8() {
        Options options = new Options();
        options.addOptionGroup(new OptionGroup());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_obig9() {
        Options options = new Options();
        options.hasShortOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_uepk10() {
        Options options = new Options();
        options.addOption("opt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_EZhX11() {
        Options options = new Options();
        options.addOption("opt", "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_iErQ13() {
        Options options = new Options();
        options.getRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_Bgdy14() {
        Options options = new Options();
        options.hasOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_yhmt16() {
        CommandLine commandLine = new CommandLine();
        commandLine.getArgs();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue1_jxjL19() {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptionValue(new Option("opt", "longOpt", true, "description"), "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue2_ojor20() {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptionValue("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue3_Ifaw21() {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptionValue("opt", () -> "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue4_kzOR22() {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptionValue(new Option("opt", "longOpt", true, "description"), () -> "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue5_blAE23() {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptionValue("opt", "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_SrDs0() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertEquals(true, options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_pNyz1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_pNyz1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_xTDZ3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        Collection<Option> optionsCollection = options.getOptions();
        assertEquals(2, optionsCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_UgEN5() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertEquals(true, options.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_rGjw6() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertEquals(true, options.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_pvIG7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "option", false, "description");
        options.addOptions(newOptions);
        assertEquals(true, options.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_sXzR8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        options.addOptionGroup(group);
        assertEquals(true, options.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithStringAndDescription_oaHl16() {
        Options options = new Options();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_VKtf1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_VKtf1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_izBZ2() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertEquals(option, options.getOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_vHdL3_1() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "longOption2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_vHdL3_2() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "longOption2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertTrue(options.getOptions().contains(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_vHdL3_3() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "longOption2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertTrue(options.getOptions().contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_GRhR6_1() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_GRhR6_2() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertTrue(options.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_Lpfo7_1() {
        Options options = new Options();
        Options options2 = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "longOption2", false, "description");
        options2.addOption(option1);
        options2.addOption(option2);
        options.addOptions(options2);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_Lpfo7_2() {
        Options options = new Options();
        Options options2 = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "longOption2", false, "description");
        options2.addOption(option1);
        options2.addOption(option2);
        options.addOptions(options2);
        assertTrue(options.getOptions().contains(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_Lpfo7_3() {
        Options options = new Options();
        Options options2 = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "longOption2", false, "description");
        options2.addOption(option1);
        options2.addOption(option2);
        options.addOptions(options2);
        assertTrue(options.getOptions().contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithNoArguments_fRud0() throws ParseException {
        Options options = new Options();
        options.addOption("h", "help", false, "Print this message");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{}, null, false);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneArgument_YStc1_1() throws ParseException {
        Options options = new Options();
        options.addOption("h", "help", false, "Print this message");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1"}, null, false);
        assertEquals(1, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneArgument_YStc1_2() throws ParseException {
        Options options = new Options();
        options.addOption("h", "help", false, "Print this message");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1"}, null, false);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithMultipleArguments_uLeE2_1() throws ParseException {
        Options options = new Options();
        options.addOption("h", "help", false, "Print this message");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2"}, null, false);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithMultipleArguments_uLeE2_2() throws ParseException {
        Options options = new Options();
        options.addOption("h", "help", false, "Print this message");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2"}, null, false);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithMultipleArguments_uLeE2_3() throws ParseException {
        Options options = new Options();
        options.addOption("h", "help", false, "Print this message");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2"}, null, false);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public static void main(String[] args) {
        Options options = new Options();
        options.addOption("h", "help", false, "Print this help message");
        options.addOption("v", "verbose", false, "Enable verbose output");
        options.addOption("f", "file", true, "Specify the input file");
        String[] arguments = {"-h", "-v", "input.txt"};
        CommandLineParser parser = new DefaultParser();
        CommandLine cmd;
        try {
            cmd = parser.parse(options, arguments);
            if (cmd.hasOption("h")) {
                System.out.println("Help message");
            }
            if (cmd.hasOption("v")) {
                System.out.println("Verbose output enabled");
            }
            if (cmd.hasOption("f")) {
                System.out.println("Input file: " + cmd.getOptionValue("f"));
            }
        } catch (ParseException e) {
            System.out.println("Error parsing command line: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_JXGr0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[0]);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_ThQo1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value"});
        assertEquals(1, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_ThQo1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value"});
        assertEquals("value", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_mmzH2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value1", "value2"});
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_mmzH2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value1", "value2"});
        assertEquals("value1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_mmzH2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value1", "value2"});
        assertEquals("value2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_UfSO3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value1", "value2", "value3"});
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_UfSO3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value1", "value2", "value3"});
        assertEquals("value1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_UfSO3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value1", "value2", "value3"});
        assertEquals("value2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_UfSO3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value1", "value2", "value3"});
        assertEquals("value3", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_RsFD1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("lo");
        assertTrue(matchingOptions.contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_EMwz2_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("l", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_EMwz2_3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_LUqs3_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        Collection<Option> optionsList = options.getOptions();
        assertEquals(2, optionsList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_LUqs3_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        Collection<Option> optionsList = options.getOptions();
        assertTrue(optionsList.contains(options.getOption("longOption")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_LUqs3_3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        Collection<Option> optionsList = options.getOptions();
        assertTrue(optionsList.contains(options.getOption("otherOption")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_ebNl5_1() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_ebNl5_2() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_EKEV6_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_CJuG7_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "otherOption", false, "description");
        options.addOptions(newOptions);
        assertTrue(options.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_CJuG7_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "otherOption", false, "description");
        options.addOptions(newOptions);
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_CJuG7_3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "otherOption", false, "description");
        options.addOptions(newOptions);
        assertTrue(options.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_CJuG7_4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "otherOption", false, "description");
        options.addOptions(newOptions);
        assertTrue(options.hasLongOption("otherOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_QBba8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").desc("description").build());
        options.addOptionGroup(group);
        assertTrue(options.getOptionGroups().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_BvQP9() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasShortOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutDescription_mMpg11_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, null);
        assertTrue(options.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutDescription_mMpg11_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, null);
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_WbMT0() throws ParseException {
        Options options = new Options();
        String[] arguments = {};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_HcMB1_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_HcMB1_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_fmRP2_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_fmRP2_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_fmRP2_3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_SBuG3_1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_SBuG3_2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_SBuG3_3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_SBuG3_4() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals("arg3", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_uUwX1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        assertEquals(1, options.getMatchingOptions("long").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_hvVW3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_bTls5() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_Hjol6() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_FwgX7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("n", "newOption", false, "description");
        options.addOptions(newOptions);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_dbyB8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").desc("description").build());
        group.addOption(Option.builder("o").longOpt("option").desc("description").build());
        options.addOptionGroup(group);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_yYdq13() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_zdTz0_1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose output");
        String[] arguments = {"-v"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_Aqyj1_1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose output");
        options.addOption("o", "output", true, "output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OOdI2_1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("v", "verbose", false, "verbose output"));
        group.addOption(new Option("q", "quiet", false, "quiet output"));
        options.addOptionGroup(group);
        String[] arguments = {"-v"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OOdI2_3() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("v", "verbose", false, "verbose output"));
        group.addOption(new Option("q", "quiet", false, "quiet output"));
        options.addOptionGroup(group);
        String[] arguments = {"-v"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertFalse(commandLine.hasOption("q"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_GMVn3_1() throws ParseException {
        Options options = new Options();
        options.addOption("p", "property", true, "property file");
        Properties properties = new Properties();
        properties.setProperty("property", "config.properties");
        String[] arguments = {};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_GMVn3_2() throws ParseException {
        Options options = new Options();
        options.addOption("p", "property", true, "property file");
        Properties properties = new Properties();
        properties.setProperty("property", "config.properties");
        String[] arguments = {};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, false);
        assertEquals("config.properties", commandLine.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionAndNoValue_bXGv1() {
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "required option");
        try {
            new DefaultParser().parse(options, new String[]{"-r"}, null, false);
            fail("ParseException expected");
        } catch (ParseException e) {
            assertEquals("Missing argument for option: r", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionGroupAndNoValue_hCbE3() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "alpha option"));
        group.addOption(new Option("b", "beta", false, "beta option"));
        options.addOptionGroup(group);
        try {
            new DefaultParser().parse(options, new String[]{"-a", "-b"}, null, false);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_tdoS0_1() throws ParseException {
        Options options = new Options();
        options.addOption("S", "shortOption", false, "short option description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-S"});
        assertTrue(commandLine.hasOption("S"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_aYyC1_1() throws ParseException {
        Options options = new Options();
        options.addOption("L", "longOption", false, "long option description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--longOption"});
        assertTrue(commandLine.hasOption("L"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_BORy2_1() throws ParseException {
        Options options = new Options();
        options.addOption("S", "shortOption", true, "short option with value description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-S", "value"});
        assertTrue(commandLine.hasOption("S"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_BORy2_2() throws ParseException {
        Options options = new Options();
        options.addOption("S", "shortOption", true, "short option with value description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-S", "value"});
        assertEquals("value", commandLine.getOptionValue("S"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_gAoF3_1() throws ParseException {
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option with value description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--longOption", "value"});
        assertTrue(commandLine.hasOption("L"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_gAoF3_2() throws ParseException {
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option with value description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--longOption", "value"});
        assertEquals("value", commandLine.getOptionValue("L"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_yISI1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_yISI1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_gyqx2_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_gyqx2_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_RDHK3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Collection<Option> optionsList = options.getOptions();
        assertEquals(2, optionsList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vrcd4_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        String optionsString = options.toString();
        assertTrue(optionsString.contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vrcd4_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        String optionsString = options.toString();
        assertTrue(optionsString.contains("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_eRPa5_1() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_eRPa5_2() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_yPDd7_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("L", "longOption2", false, "description");
        newOptions.addOption("S", "shortOption2", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("L");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_yPDd7_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("L", "longOption2", false, "description");
        newOptions.addOption("S", "shortOption2", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("L");
        assertEquals("longOption2", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_aFBX8_1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("s", "shortOption", false, "description"));
        options.addOptionGroup(group);
        Option option = options.getOption("l");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_aFBX8_2() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("s", "shortOption", false, "description"));
        options.addOptionGroup(group);
        Option option = options.getOption("l");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_BYQU9() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.hasShortOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_TYYb10_1() {
        Options options = new Options();
        options.addOption("l", "longOption", true, "description");
        Option option = options.getOption("l");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_TYYb10_2() {
        Options options = new Options();
        options.addOption("l", "longOption", true, "description");
        Option option = options.getOption("l");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgs_OIfE11_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_xUtl0() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-v"}, null, false);
        assertTrue(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_vYPx1_1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        options.addOption("o", "output", true, "Output file");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-v", "output.txt"}, null, false);
        assertTrue(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_whiY2_1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("v", "verbose", false, "Verbose output"));
        group.addOption(new Option("q", "quiet", false, "Quiet output"));
        options.addOptionGroup(group);
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-v"}, null, false);
        assertTrue(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_whiY2_2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("v", "verbose", false, "Verbose output"));
        group.addOption(new Option("q", "quiet", false, "Quiet output"));
        options.addOptionGroup(group);
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-v"}, null, false);
        assertFalse(commandLine.hasOption("q"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_VCTq3() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--verbose"}, null, false);
        assertTrue(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_oEHk3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Collection<Option> optionsCollection = options.getOptions();
        assertEquals(2, optionsCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_FzSu7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("b", "booleanOption", false, "description");
        options.addOptions(newOptions);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_LMew8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("s", "shortOption", false, "description"));
        options.addOptionGroup(group);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_muyr12() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_OUJA0_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertFalse(options.hasLongOption("nonExistentOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_Eqdr1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals(1, options.getMatchingOptions("l").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_Eqdr1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals(1, options.getMatchingOptions("s").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_Eqdr1_3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.getMatchingOptions("l").contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_Eqdr1_4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.getMatchingOptions("s").contains("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_gulB2_2() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertNull(options.getOption("nonExistentOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_ABDg3_1() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("s", "shortOption2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_ABDg3_2() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("s", "shortOption2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertTrue(options.getOptions().contains(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_ABDg3_3() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("s", "shortOption2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertTrue(options.getOptions().contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_daJV7_1() {
        Options options = new Options();
        Options options2 = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options2.addOption(option);
        options.addOptions(options2);
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_daJV7_2() {
        Options options = new Options();
        Options options2 = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options2.addOption(option);
        options.addOptions(options2);
        assertTrue(options.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_Sxfw0_1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[0]);
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_Sxfw0_2() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[0]);
        assertFalse(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_KuMa1_1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals(1, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_KuMa1_2() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_KuMa1_3() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1"});
        assertFalse(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_bUGe2_1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_bUGe2_2() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_bUGe2_3() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_bUGe2_4() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertFalse(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_LLtF3_1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals(3, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_LLtF3_2() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_LLtF3_3() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_LLtF3_4() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals("arg3", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_LLtF3_5() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertFalse(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_dsYJ0() {
        Options options = new Options();
        boolean result = options.hasLongOption("opt");
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_tIVv1() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_ECqM2() {
        Options options = new Options();
        Option result = options.getOption("opt");
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_pOiv3() {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_JpWY10() {
        Options options = new Options();
        boolean result = options.hasShortOption("opt");
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_bAFd16() {
        Options options = new Options();
        boolean result = options.hasOption("opt");
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_XnwM1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_XnwM1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_JMiO7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("L", "longOption2", false, "description2");
        newOptions.addOption("S", "shortOption2", false, "description2");
        options.addOptions(newOptions);
        assertEquals(4, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_dsnq5_1() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_dsnq5_2() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_uPbJ7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "option", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("option");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithShortOption_GSxh10() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Option option = options.getOption("shortOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOption_OLyD11() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_gtlA0() {
        Options options = new Options();
        boolean result = options.hasLongOption("opt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_Imfh1() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_rzzV2() {
        Options options = new Options();
        Option result = options.getOption("opt");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_yBUf3() {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_ZwWm7() {
        Options options = new Options();
        Options options2 = new Options();
        Options result = options.addOptions(options2);
        assertEquals(options, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_xCNT9() {
        Options options = new Options();
        boolean result = options.hasShortOption("opt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_GgiH15() {
        Options options = new Options();
        boolean result = options.hasOption("opt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_fjmZ3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        options.addOption("L", "anotherLongOption", false, "description");
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_vgFZ7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        options.addOption("L", "anotherLongOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("n", "newOption", false, "description");
        options.addOptions(newOptions);
        assertEquals(4, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_uyam8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("s", "shortOption", false, "description"));
        group.addOption(new Option("L", "anotherLongOption", false, "description"));
        options.addOptionGroup(group);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_toNF10() {
        Options options = new Options();
        options.addOption("l", "longOption", true, "description");
        assertTrue(options.getOption("longOption").hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithNoArgs_GFwA13() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertFalse(options.getOption("longOption").hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_MFSD0() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option description");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"-o", "value"});
        assertEquals("value", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_tHJI3() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option description");
        Properties properties = new Properties();
        properties.setProperty("option", "value");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{}, properties);
        assertEquals("value", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneOption_tYRv0_1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        String[] arguments = {"-v"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertTrue(cmd.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_myIg1_1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        options.addOption("o", "output", true, "Output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertTrue(cmd.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_qXSb2_1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("v").longOpt("verbose").desc("Verbose output").build());
        group.addOption(Option.builder("q").longOpt("quiet").desc("Quiet output").build());
        options.addOptionGroup(group);
        String[] arguments = {"--verbose"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertTrue(cmd.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_OJwZ1_1() throws ParseException {
        Options options = new Options();
        options.addOption("o", "output", true, "Output file");
        String[] arguments = {"-o", "output.txt"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertTrue(cmd.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_OJwZ1_2() throws ParseException {
        Options options = new Options();
        options.addOption("o", "output", true, "Output file");
        String[] arguments = {"-o", "output.txt"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertEquals("output.txt", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_EXiv2_1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("add").hasArg().build());
        group.addOption(Option.builder("s").longOpt("subtract").hasArg().build());
        group.addOption(Option.builder("m").longOpt("multiply").hasArg().build());
        group.addOption(Option.builder("d").longOpt("divide").hasArg().build());
        options.addOptionGroup(group);
        String[] arguments = {"-a", "5"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_EXiv2_2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("add").hasArg().build());
        group.addOption(Option.builder("s").longOpt("subtract").hasArg().build());
        group.addOption(Option.builder("m").longOpt("multiply").hasArg().build());
        group.addOption(Option.builder("d").longOpt("divide").hasArg().build());
        options.addOptionGroup(group);
        String[] arguments = {"-a", "5"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertEquals("5", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMix3_1() throws ParseException {
        Options options = new Options();
        options.addOption("p", "property", true, "Property file");
        Properties properties = new Properties();
        properties.setProperty("property", "config.properties");
        String[] arguments = {};
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertTrue(cmd.hasOption("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMix3_2() throws ParseException {
        Options options = new Options();
        options.addOption("p", "property", true, "Property file");
        Properties properties = new Properties();
        properties.setProperty("property", "config.properties");
        String[] arguments = {};
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertEquals("config.properties", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_yjIw1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("L", "anotherLongOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertTrue(matchingOptions.contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_lUpW7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "option", false, "description");
        options.addOptions(newOptions);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_VSka13() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.hasOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_MluF0() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "required option");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"-r"});
        assertTrue(cmd.hasOption("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_XfyT1() throws ParseException {
        Options options = new Options();
        options.addOption("r", "required", false, "required option");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"--required"});
        assertTrue(cmd.hasOption("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_ezQx2() throws ParseException {
        Options options = new Options();
        options.addOption("r", "required", false, "required option");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"-r"});
        assertTrue(cmd.hasOption("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissing_RuEG6() {
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "required option");
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        assertThrows(ParseException.class, () -> parser.parse(options, arguments, properties, stopAtNonOption));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissingValue_RQlf1_1() {
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "required option");
        String[] arguments = {"-r"};
        Properties properties = new Properties();
        ParseException e = assertThrows(ParseException.class, () -> {
            new DefaultParser().parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPrivateMethodCheckRequiredArgsMissingOption_MYlj4_1() {
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "required option");
        String[] arguments = {};
        Properties properties = new Properties();
        ParseException e = assertThrows(ParseException.class, () -> {
            new DefaultParser().parse(options, arguments, properties, false);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_mFJU4_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_mFJU4_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qWvK6_1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        String[] arguments = {"-l", "value"};
        CommandLine commandLine = defaultParser.parse(options, arguments, null, false);
        assertTrue(commandLine.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_NWZW7() {
        Options options = new Options();
        Options options2 = new Options();
        options.addOptions(options2);
        assertTrue(options.getOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_Lzgr8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        assertTrue(options.getOptionGroups().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_JgHi2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertNotNull(options.getOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_mixp3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_dkWA4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.toString().contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_sJmg5() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertNotNull(options.getOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_eieX7() {
        Options options = new Options();
        Options options2 = new Options();
        options2.addOption("l", "longOption", false, "description");
        options.addOptions(options2);
        assertNotNull(options.getOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_VKPi8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").build());
        options.addOptionGroup(group);
        assertNotNull(options.getOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_Bocf11() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertNotNull(options.getOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_hwAp0() {
        DefaultParser defaultParser = new DefaultParser();
        String token = "example=value";
        int expected = 7;
        int actual = defaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqualWithEmptyToken_XKwN1() {
        DefaultParser defaultParser = new DefaultParser();
        String token = "";
        int expected = -1;
        int actual = defaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqualWithNoEqualSign_zyqZ2() {
        DefaultParser defaultParser = new DefaultParser();
        String token = "example";
        int expected = -1;
        int actual = defaultParser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_wyaI0() {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        try {
            CommandLine result = defaultParser.parse(options, commandLine.getArgs(), false);
            assertTrue(result != null);
        } catch (ParseException e) {
            assertTrue(false);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionsParser_PpXj0() throws ParseException {
        Options options = new Options();
        options.addOption("h", "help", false, "Print this help message");
        options.addOption("v", "verbose", false, "Enable verbose output");
        options.addOption("f", "file", true, "Input file");
        String[] arguments = {"-h", "-v", "input.txt"};
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, null, false);
        if (commandLine.hasOption("h")) {
            System.out.println("Help message");
        }
        if (commandLine.hasOption("v")) {
            System.out.println("Verbose output enabled");
        }
        if (commandLine.hasOption("f")) {
            System.out.println("Input file: " + commandLine.getOptionValue("f"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_JvHR12_fWVG0_1() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        @SuppressWarnings("unchecked")
        List<Option> requiredOptions = (List<Option>) options.getRequiredOptions();
        assertEquals(1, requiredOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_UYcD11_ffwm0_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.getOption("l").hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_fzPW3_rstX0() {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(2, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleProperties_joOO5_JGkP0() {
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        String[] arguments = new String[]{"arg1"};
        Properties properties = new Properties();
        properties.setProperty("option", "value");
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_beCY0_TGgh0() {
        Options options = new Options();
        options.addOption("o", "option", true, "option description");
        String[] arguments = {"-o", "value"};
        CommandLine commandLine = null;
        try {
            commandLine = new DefaultParser().parse(options, arguments, null, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_ApXY1_qQBb0() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option description");
        String[] arguments = {"--option", "value"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertEquals("value", commandLine.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_NQlR4_tcPk0() {
        Options options = new Options();
        String[] arguments = {"-a", "b", "-c", "d"};
        Properties properties = new Properties();
        properties.setProperty("key", "value");
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_RUjt2_BzmE0() {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(2, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals("arg2", commandLine.getArgs()[1]);
        options = new Options();
        arguments = new String[0];
        properties = new Properties();
        stopAtNonOption = false;
        parser = new DefaultParser();
        commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(0, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue2_Uygy18_HcmU0() {
        CommandLine commandLine = new CommandLine();
        try {
            commandLine.getParsedOptionValue(new Option("opt", "longOpt", true, "description"), () -> null);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_hZXn0_THmG0() {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = null;
        try {
            cmd = new DefaultParser().parse(options, new String[0]);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(0, cmd.getArgs().length);
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_tsXI1_JpKb0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_tsXI1_JpKb0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals("arg1", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_tsXI1_JpKb0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_EKGU2_usBi0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_EKGU2_usBi0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals("arg1", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_EKGU2_usBi0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals("arg2", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_EKGU2_usBi0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_qHpi3_XAWl0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_qHpi3_XAWl0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals("arg1", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_qHpi3_XAWl0_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals("arg2", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_qHpi3_XAWl0_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals("arg3", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_qHpi3_XAWl0_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_ybrq0_fid1() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "required option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-r", "value"}, null, false);
        assertNull(cmd.getOptionValue("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_NVtt0_fid1() {
        Options options = new Options();
        assertFalse(options.hasLongOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_jQGn4_fid1() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        options.addOption("o", "option", false, "description");
        assertEquals("[ Options: [ short {l=[ Option l long :: description :: class java.lang.String ], o=[ Option o option :: description :: class java.lang.String ]} ] [ long {long=[ Option l long :: description :: class java.lang.String ], option=[ Option o option :: description :: class java.lang.String ]} ]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_bkoW7_2_fid1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        assertFalse(options.getOptionGroups().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_MkAf2_fid1() {
        Options options = new Options();
        options.addOption("l", "l", false, "description");
        Option option = options.getOption("l");
        assertEquals("l", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_rvsT4_fid1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertEquals("[ Options: [ short {l=[ Option l longOption :: description :: class java.lang.String ]} ] [ long {longOption=[ Option l longOption :: description :: class java.lang.String ]} ]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Diug4_fid1() {
        Options options = new Options();
        assertEquals("[ Options: [ short {} ] [ long {} ]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_RsFD1_1_fid1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("lo");
        assertEquals(1, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_RsFD1_3_fid1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("lo");
        assertFalse(matchingOptions.contains("otherOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_ebNl5_3_fid1() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertFalse(options.getRequiredOptions().contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_HdHt4_fid1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        assertEquals("[ Options: [ short {l=[ Option l longOption :: description :: class java.lang.String ], o=[ Option o option :: description :: class java.lang.String ]} ] [ long {longOption=[ Option l longOption :: description :: class java.lang.String ], option=[ Option o option :: description :: class java.lang.String ]} ]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_Aqyj1_3_fid1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose output");
        options.addOption("o", "output", true, "output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
        assertFalse(commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoOptions_Aqyj1_4_fid1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "verbose output");
        options.addOption("o", "output", true, "output file");
        String[] arguments = {"-v", "output.txt"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_eqML3() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"--option", "value", "arg1", "arg2"}, null, true);
        assertEquals("value", cmd.getOptionValue("o"));
        assertEquals(2, cmd.getArgList().size());
        assertEquals("arg1", cmd.getArgList().get(0));
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_PLeg1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_ykqq2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals("arg2", commandLine.getArgs()[1]);
        assertEquals("arg3", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_NDjT0() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasLongOption("longOption"));
        assertFalse(options.hasLongOption("nonExistingOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_eKuW1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_UegY2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_quiq0() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        assertTrue(options.hasLongOption("long"));
        assertFalse(options.hasLongOption("non-existent"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_Gpil1() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
        assertEquals("long", matchingOpts.get(0));
        matchingOpts = options.getMatchingOptions("o");
        assertEquals(1, matchingOpts.size());
        assertEquals("option", matchingOpts.get(0));
        matchingOpts = options.getMatchingOptions("non-existent");
        assertTrue(matchingOpts.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_ecRh2() {
        Options options = new Options();
        Option option = new Option("l", "long", false, "description");
        options.addOption(option);
        assertEquals(option, options.getOption("long"));
        assertNull(options.getOption("non-existent"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_aSQp3() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        options.addOption("o", "option", false, "description");
        Collection<Option> opts = options.getOptions();
        assertEquals(2, opts.size());
        assertTrue(opts.contains(new Option("l", "long", false, "description")));
        assertTrue(opts.contains(new Option("o", "option", false, "description")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_CUfX6() {
        Options options = new Options();
        Option option = new Option("l", "long", false, "description");
        options.addOption(option);
        assertEquals(1, options.getOptions().size());
        assertTrue(options.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_wFIX10() {
        Options options = new Options();
        options.addOption("l", "long", false, "description");
        assertEquals(1, options.getOptions().size());
        assertTrue(options.getOptions().contains(new Option("l", "long", false, "description")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_pNyz1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_VKtf1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_vHdL3() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "longOption2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertEquals(2, options.getOptions().size());
        assertTrue(options.getOptions().contains(option1));
        assertTrue(options.getOptions().contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_GRhR6() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertEquals(1, options.getOptions().size());
        assertTrue(options.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_Lpfo7() {
        Options options = new Options();
        Options options2 = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "longOption2", false, "description");
        options2.addOption(option1);
        options2.addOption(option2);
        options.addOptions(options2);
        assertEquals(2, options.getOptions().size());
        assertTrue(options.getOptions().contains(option1));
        assertTrue(options.getOptions().contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithOneArgument_YStc1() throws ParseException {
        Options options = new Options();
        options.addOption("h", "help", false, "Print this message");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1"}, null, false);
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testParseWithMultipleArguments_uLeE2() throws ParseException {
        Options options = new Options();
        options.addOption("h", "help", false, "Print this message");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2"}, null, false);
        assertEquals(2, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_ThQo1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value"});
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("value", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_mmzH2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value1", "value2"});
        assertEquals(2, commandLine.getArgs().length);
        assertEquals("value1", commandLine.getArgs()[0]);
        assertEquals("value2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_UfSO3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "arg");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"value1", "value2", "value3"});
        assertEquals(3, commandLine.getArgs().length);
        assertEquals("value1", commandLine.getArgs()[0]);
        assertEquals("value2", commandLine.getArgs()[1]);
        assertEquals("value3", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_EMwz2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("l", option.getOpt());
        assertEquals("longOption", option.getLongOpt());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_LUqs3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        Collection<Option> optionsList = options.getOptions();
        assertEquals(2, optionsList.size());
        assertTrue(optionsList.contains(options.getOption("longOption")));
        assertTrue(optionsList.contains(options.getOption("otherOption")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_EKEV6() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("l"));
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_CJuG7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "otherOption", false, "description");
        options.addOptions(newOptions);
        assertTrue(options.hasOption("l"));
        assertTrue(options.hasLongOption("longOption"));
        assertTrue(options.hasOption("o"));
        assertTrue(options.hasLongOption("otherOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutDescription_mMpg11() {
        Options options = new Options();
        options.addOption("l", "longOption", false, null);
        assertTrue(options.hasOption("l"));
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_HcMB1() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_fmRP2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_SBuG3() throws ParseException {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2", "arg3"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
        assertEquals(3, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals("arg2", commandLine.getArgs()[1]);
        assertEquals("arg3", commandLine.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_GMVn3() throws ParseException {
        Options options = new Options();
        options.addOption("p", "property", true, "property file");
        Properties properties = new Properties();
        properties.setProperty("property", "config.properties");
        String[] arguments = {};
        CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, false);
        assertTrue(commandLine.hasOption("p"));
        assertEquals("config.properties", commandLine.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_BORy2() throws ParseException {
        Options options = new Options();
        options.addOption("S", "shortOption", true, "short option with value description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-S", "value"});
        assertTrue(commandLine.hasOption("S"));
        assertEquals("value", commandLine.getOptionValue("S"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_gAoF3() throws ParseException {
        Options options = new Options();
        options.addOption("L", "longOption", true, "long option with value description");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"--longOption", "value"});
        assertTrue(commandLine.hasOption("L"));
        assertEquals("value", commandLine.getOptionValue("L"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_yISI1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_gyqx2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertNotNull(option);
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vrcd4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        String optionsString = options.toString();
        assertTrue(optionsString.contains("longOption"));
        assertTrue(optionsString.contains("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_eRPa5() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertNotNull(option);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_yPDd7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("L", "longOption2", false, "description");
        newOptions.addOption("S", "shortOption2", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("L");
        assertNotNull(option);
        assertEquals("longOption2", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_aFBX8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("s", "shortOption", false, "description"));
        options.addOptionGroup(group);
        Option option = options.getOption("l");
        assertNotNull(option);
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_TYYb10() {
        Options options = new Options();
        options.addOption("l", "longOption", true, "description");
        Option option = options.getOption("l");
        assertNotNull(option);
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgs_OIfE11() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertNotNull(option);
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_whiY2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("v", "verbose", false, "Verbose output"));
        group.addOption(new Option("q", "quiet", false, "Quiet output"));
        options.addOptionGroup(group);
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"-v"}, null, false);
        assertTrue(commandLine.hasOption("v"));
        assertFalse(commandLine.hasOption("q"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_OUJA0() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasLongOption("longOption"));
        assertFalse(options.hasLongOption("nonExistentOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_Eqdr1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals(1, options.getMatchingOptions("l").size());
        assertEquals(1, options.getMatchingOptions("s").size());
        assertTrue(options.getMatchingOptions("l").contains("longOption"));
        assertTrue(options.getMatchingOptions("s").contains("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_gulB2() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertEquals(option, options.getOption("longOption"));
        assertNull(options.getOption("nonExistentOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_ABDg3() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("s", "shortOption2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertEquals(2, options.getOptions().size());
        assertTrue(options.getOptions().contains(option1));
        assertTrue(options.getOptions().contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_daJV7() {
        Options options = new Options();
        Options options2 = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options2.addOption(option);
        options.addOptions(options2);
        assertEquals(1, options.getOptions().size());
        assertTrue(options.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_Sxfw0() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[0]);
        assertEquals(0, commandLine.getArgs().length);
        assertFalse(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_KuMa1() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertFalse(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_bUGe2() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals(2, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals("arg2", commandLine.getArgs()[1]);
        assertFalse(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_LLtF3() throws ParseException {
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose output");
        CommandLine commandLine = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals(3, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals("arg2", commandLine.getArgs()[1]);
        assertEquals("arg3", commandLine.getArgs()[2]);
        assertFalse(commandLine.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_XnwM1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_GXKn2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals("l", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_dsnq5() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionAndValue_OJwZ1() throws ParseException {
        Options options = new Options();
        options.addOption("o", "output", true, "Output file");
        String[] arguments = {"-o", "output.txt"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertTrue(cmd.hasOption("o"));
        assertEquals("output.txt", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_EXiv2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").longOpt("add").hasArg().build());
        group.addOption(Option.builder("s").longOpt("subtract").hasArg().build());
        group.addOption(Option.builder("m").longOpt("multiply").hasArg().build());
        group.addOption(Option.builder("d").longOpt("divide").hasArg().build());
        options.addOptionGroup(group);
        String[] arguments = {"-a", "5"};
        CommandLine cmd = new DefaultParser().parse(options, arguments);
        assertTrue(cmd.hasOption("a"));
        assertEquals("5", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_oMix3() throws ParseException {
        Options options = new Options();
        options.addOption("p", "property", true, "Property file");
        Properties properties = new Properties();
        properties.setProperty("property", "config.properties");
        String[] arguments = {};
        CommandLine cmd = new DefaultParser().parse(options, arguments, properties);
        assertTrue(cmd.hasOption("p"));
        assertEquals("config.properties", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_xbEU2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals("l", option.getOpt());
        assertEquals("longOption", option.getLongOpt());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOptionMissingValue_RQlf1() {
        Options options = new Options();
        options.addRequiredOption("r", "required", true, "required option");
        String[] arguments = {"-r"};
        Properties properties = new Properties();
        ParseException e = assertThrows(ParseException.class, () -> {
            new DefaultParser().parse(options, arguments, properties, false);
        });
        assertEquals("Missing argument for option: r", e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPrivateMethodCheckRequiredArgsMissingOption_MYlj4() {
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "required option");
        String[] arguments = {};
        Properties properties = new Properties();
        ParseException e = assertThrows(ParseException.class, () -> {
            new DefaultParser().parse(options, arguments, properties, false);
        });
        assertEquals("Missing required option: r", e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_mFJU4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("longOption"));
        assertTrue(toString.contains("shortOption"));
    }
}