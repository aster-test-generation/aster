/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionValidator_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateNull_dOgE0() {
        String option = null;
        String result = OptionValidator.validate(option);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateEmpty_dqPj1() {
        String option = "";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValid_pgMH4() {
        String option = "abc123";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidLong_bCJD5() {
        String option = "abcdefghijklmnopqrstuvwxyz1234567890";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateNull_srkp0() {
        String option = null;
        String result = OptionValidator.validate(option);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateEmpty_fOOo1() {
        String option = "";
        try {
            OptionValidator.validate(option);
            Assertions.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assertions.assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOption_TLwn4() {
        String option = "abc";
        String result = OptionValidator.validate(option);
        Assertions.assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOptionWithNumber_wdTf5() {
        String option = "abc123";
        String result = OptionValidator.validate(option);
        Assertions.assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidChar_zhQJ3() {
        String option = "abc!";
        try {
            OptionValidator.validate(option);
            Assertions.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateNull_gKyH0() {
        OptionValidator optionValidator = new OptionValidator();
        String option = null;
        String result = optionValidator.validate(option);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateEmpty_VkyB1() {
        OptionValidator optionValidator = new OptionValidator();
        String option = "";
        try {
            optionValidator.validate(option);
        } catch (IllegalArgumentException e) {
            assert e.getMessage().equals("Empty option name.");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidFirstChar_kvSY2() {
        OptionValidator optionValidator = new OptionValidator();
        String option = "123";
        try {
            optionValidator.validate(option);
        } catch (IllegalArgumentException e) {
            assert e.getMessage().equals("Illegal option name '1'.");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidMiddleChar_Upai3() {
        OptionValidator optionValidator = new OptionValidator();
        String option = "abc1";
        try {
            optionValidator.validate(option);
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOption_TAaX4() {
        OptionValidator optionValidator = new OptionValidator();
        String option = "abc";
        String result = optionValidator.validate(option);
        assert result.equals("abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOptionWithLongChars_dTSr5() {
        OptionValidator optionValidator = new OptionValidator();
        String option = "abc-";
        String result = optionValidator.validate(option);
        assert result.equals("abc-");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOptionWithLongChars2_HfoE6() {
        OptionValidator optionValidator = new OptionValidator();
        String option = "abc--";
        String result = optionValidator.validate(option);
        assert result.equals("abc--");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOptionWithLongChars3_MGWY7() {
        OptionValidator optionValidator = new OptionValidator();
        String option = "abc---";
        String result = optionValidator.validate(option);
        assert result.equals("abc---");
    }
}