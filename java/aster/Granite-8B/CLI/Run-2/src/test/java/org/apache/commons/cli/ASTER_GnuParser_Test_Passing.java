/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_WnlV0_1() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "bar"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_WnlV0_2() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "bar"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_WnlV0_3() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "bar"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("--foo", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_WnlV0_4() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "bar"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("bar", result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_QzAU1_1() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_QzAU1_2() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals(4, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_QzAU1_3() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("--foo", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_QzAU1_4() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("bar", result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_QzAU1_5() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "bar", "--", "--"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("--", result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_tBOr2_1() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_tBOr2_3() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "bar", "--", "--foo"};
        String[] result = new GnuParser().flatten(options, arguments, true);
        assertEquals("--foo", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_jkbO3_1() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=bar", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_jkbO2_2() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=bar", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_jkbO3_4() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=baz", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("baz", result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_EYhI4_1() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=bar", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_EYhI4_2() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=bar", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, true);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_EYhI4_3() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=bar", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, true);
        assertEquals("--foo=bar", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_EYhI4_4() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=bar", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, true);
        assertEquals("baz", result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_eQhn5_1() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_eQhn5_2() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_eQhn5_4() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=--", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("--", result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_eQhn5_5() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("baz", result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_JCYw6_1() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_JCYw6_3() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo=bar", "--", "--foo=bar"};
        String[] result = new GnuParser().flatten(options, arguments, true);
        assertEquals("--foo=bar", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_HQve7_1() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_HQve7_2() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals(4, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_HQve7_3() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("-f", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_HQve7_4() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("bar", result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_HQve7_5() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "--", "--"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("--", result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_QcSo8_1() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "--", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_QcSo8_3() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "--", "-f"};
        String[] result = new GnuParser().flatten(options, arguments, true);
        assertEquals("-f", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_wRYc9_1() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "-f", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_wRYc9_2() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "-f", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals(4, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_wRYc9_3() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "-f", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("-f", result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_wRYc9_4() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "-f", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("bar", result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_wRYc9_5() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "-f", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("-f", result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_wRYc9_6() {
        Options options = new Options();
        String[] arguments = new String[]{"-f", "bar", "-f", "baz"};
        String[] result = new GnuParser().flatten(options, arguments, false);
        assertEquals("baz", result[3]);
    }
}