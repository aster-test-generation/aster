/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_2_HGIx1() {
        Option option = new Option("option", true, "description");
        int result = option.getArgs();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_3_THZp2() {
        Option option = new Option("option", "description");
        int result = option.getArgs();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_4_MoCn3() {
        Option option = new Option("option", "longOption", false, "description");
        int result = option.getArgs();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_5_CGIR4() {
        Option option = new Option("option", false, "description");
        int result = option.getArgs();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndex_kdwj0() {
        Option option = new Option("option", "longOption", true, "description");
        String value = option.getValue(0);
        assertEquals("value", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithoutIndex_EVKk1() {
        Option option = new Option("option", true, "description");
        String value = option.getValue();
        assertEquals("value", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testBuilderWithNullOption_Hnfq9() {
        assertThrows(IllegalArgumentException.class, () -> Option.builder(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentHasArg_gwSO3() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option1", "longOption1", false, "description1");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentDescription_LjMV4() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option1", "longOption1", true, "description2");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_iPWc0() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.toString();
        String expected = "[ Option option longOption [ARG...] :: description ::  ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_wBIY1() {
        Option option = new Option("option", true, "description");
        String actual = option.toString();
        String expected = "[ Option option [ARG] :: description ::  ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_mLcl2() {
        Option option = new Option("option", "description");
        String actual = option.toString();
        String expected = "[ Option option  :: description ::  ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_gnxx3() {
        Option option = new Option("option", "longOption", false, "description");
        String actual = option.toString();
        String expected = "[ Option option longOption  :: description ::  ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg3_QSMJ2() {
        Option option = new Option("option", "description");
        boolean result = option.acceptsArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString1_xKfu0() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("Option 'option': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString2_Piss1() {
        Option option = new Option("option", true, "description");
        String result = option.toDeprecatedString();
        assertEquals("Option 'option': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString3_sZSF2() {
        Option option = new Option("option", "description");
        String result = option.toDeprecatedString();
        assertEquals("Option 'option': deprecated", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_jQvV0() {
        Option option = new Option("option", "longOption", true, "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator2_rZZw1_0() {
        Option option = new Option("option", true, "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator3_hTab2_0() {
        Option option = new Option("option", "description");
        char actual = option.getValueSeparator();
        assertEquals(' ', actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndLongOptionAndHasArgAndDescription_sgfo0_0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndHasArgAndDescription_VCwT1() {
        Option option = new Option("option", true, "description");
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndDescription_RxBo2() {
        Option option = new Option("option", "description");
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_paLO0() {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_IQic1() {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_OSLc2() {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetoptWithEmptyOption_qaFh2() {
        Option option = new Option("", "longOption", true, "description");
        String result = option.getOpt();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_rsol0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_BAYL1_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        Assertions.assertEquals(2, values.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_BAYL1_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        Assertions.assertEquals("value1", values[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_BAYL1_3() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        Assertions.assertEquals("value2", values[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithOptionAndDescription_BNxQ2() {
        Option option = new Option("option", "description");
        boolean result = option.hasArg();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithOptionAndLongOption_ptUI6() {
        Option option = new Option("option", "longOption");
        boolean result = option.hasArg();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_vtfd0() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.getArgName();
        String expected = "argName";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_2_UTrQ1() {
        Option option = new Option("option", true, "description");
        String actual = option.getArgName();
        String expected = "argName";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_3_sXXq2() {
        Option option = new Option("option", "description");
        String actual = option.getArgName();
        String expected = "argName";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWithOptionAndLongOptionAndHasArgAndDescription_Ochi0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.requiresArg();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWithOptionAndDescription_ApAa2() {
        Option option = new Option("option", "description");
        boolean result = option.requiresArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_uxaN0_1() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertTrue(option1.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_uxaN0_2() {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", true, "description");
        Option option3 = new Option("option", "description");
        assertTrue(option2.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOption_zKNQ0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasArgName();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOption1_ERFL1() {
        Option option = new Option("option", true, "description");
        boolean result = option.hasArgName();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithDefaultValue_zdao0() {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "default";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithoutDefaultValue_iyaS1() {
        Option option = new Option("option", "longOption", true, "description");
        String expectedValue = "value";
        String actualValue = option.getValue();
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullDefaultValue_jnjg2() {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = null;
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyDefaultValue_JywX3() {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithTabDefaultValue_PDpE5() {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "\t";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullOption_KrHG7() {
        Option option = new Option(null, "longOption", true, "description");
        String defaultValue = "default";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyOption_iADz8() {
        Option option = new Option("", "longOption", true, "description");
        String defaultValue = "default";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithTabOption_ynvC10() {
        Option option = new Option("\t", "longOption", true, "description");
        String defaultValue = "default";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullLongOption_XEIM12() {
        Option option = new Option("option", null, true, "description");
        String defaultValue = "default";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyLongOption_YhLY13() {
        Option option = new Option("option", "", true, "description");
        String defaultValue = "default";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_EWhd0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired2_FkgR1() {
        Option option = new Option("option", true, "description");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue_JcmU0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.addValue("value");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue2_TcnZ1() {
        Option option = new Option("option", true, "description");
        boolean result = option.addValue("value");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue3_JjuW2() {
        Option option = new Option("option", "description");
        boolean result = option.addValue("value");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_vtfd0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.getArgName();
        String expected = "argName";
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_2_UTrQ1_fid1() {
        Option option = new Option("option", true, "description");
        String actual = option.getArgName();
        String expected = "argName";
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_3_sXXq2_fid1() {
        Option option = new Option("option", "description");
        String actual = option.getArgName();
        String expected = "argName";
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithoutDefaultValue_iyaS1_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        String expectedValue = "value";
        String actualValue = option.getValue();
        assertNull(expectedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullDefaultValue_jnjg2_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = null;
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertNull(expectedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_BAYL1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        Assertions.assertEquals(2, values.length);
        Assertions.assertEquals("value1", values[0]);
        Assertions.assertEquals("value2", values[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_uxaN0() {
        Option option1 = new Option("option", "longOption", true, "description");
        assertTrue(option1.hasOptionalArg());
        Option option2 = new Option("option", true, "description");
        assertTrue(option2.hasOptionalArg());
        Option option3 = new Option("option", "description");
        assertFalse(option3.hasOptionalArg());
    }
}