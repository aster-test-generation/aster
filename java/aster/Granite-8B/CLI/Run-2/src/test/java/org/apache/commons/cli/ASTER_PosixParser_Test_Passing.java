/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_vpMu0() {
        Options options = new Options();
        boolean result = options.hasLongOption("opt");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_tDbP1() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        Assertions.assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_mIjC2() {
        Options options = new Options();
        Option result = options.getOption("opt");
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_rHqm3() {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        Assertions.assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ZhOs4() {
        Options options = new Options();
        String result = options.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_NbCJ6() {
        Options options = new Options();
        Option opt = new Option("opt", "longOpt", false, "description");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_FQUe7() {
        Options options = new Options();
        Options options2 = new Options();
        options.addOptions(options2);
        Assertions.assertTrue(options.getOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_jTJZ8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        Assertions.assertTrue(options.getOptionGroups().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_ZTgx9() {
        Options options = new Options();
        boolean result = options.hasShortOption("opt");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithStringStringBooleanString_Khpa10() {
        Options options = new Options();
        options.addOption("opt", "longOpt", false, "description");
        Assertions.assertTrue(options.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithStringBooleanString_NBGD11() {
        Options options = new Options();
        options.addOption("opt", false, "description");
        Assertions.assertTrue(options.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithStringString_Mtgt13() {
        Options options = new Options();
        options.addOption("opt", "longOpt");
        Assertions.assertTrue(options.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_VhhK4() {
        Options options = new Options();
        String result = options.toString();
        Assertions.assertEquals("[ Options: [ short {} ] [ long {} ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_tKpF6() {
        Options options = new Options();
        Option opt = new Option("opt", "longOpt", false, "description");
        options.addOption(opt);
        Assertions.assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_BrJy7() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        Assertions.assertEquals(1, options.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_FjrQ9() {
        Options options = new Options();
        options.addOption("opt", "description");
        Assertions.assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithBooleanString_qPeI10() {
        Options options = new Options();
        options.addOption("opt", true, "description");
        Assertions.assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_zknF11() {
        Options options = new Options();
        Options options2 = new Options();
        options.addOptions(options2);
        Assertions.assertEquals(0, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithStringStringStringBoolean_UlPi15_RlJZ0() {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addOption(option);
        Assertions.assertTrue(options.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithCharStringStringBoolean_zdkc18_wzxW0() {
        Options options = new Options();
        options.addOption(Option.builder("o").longOpt("longOpt").argName("argName").desc("description").hasArg(false).build());
        Assertions.assertTrue(options.hasOption("o"));
    }
}