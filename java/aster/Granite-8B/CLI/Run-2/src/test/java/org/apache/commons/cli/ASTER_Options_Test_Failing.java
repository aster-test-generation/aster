/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_ipQi0() {
        Options options = new Options();
        String opt = "option";
        boolean result = options.hasLongOption(opt);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_vurO0() {
        Options options = new Options();
        String opt = "clean";
        List<String> expected = Collections.singletonList("clean");
        List<String> actual = options.getMatchingOptions(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_nkJa1() {
        Options options = new Options();
        String opt = "longOpt";
        List<String> expected = new ArrayList<>();
        expected.add("longOpt");
        List<String> actual = options.getMatchingOptions(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_XWaY2() {
        Options options = new Options();
        String opt = "startsWith";
        List<String> expected = new ArrayList<>();
        expected.add("startsWith");
        List<String> actual = options.getMatchingOptions(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_ztML3() {
        Options options = new Options();
        String opt = "matchingOpts";
        List<String> expected = new ArrayList<>();
        expected.add("matchingOpts");
        List<String> actual = options.getMatchingOptions(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_iTfG0() {
        Options options = new Options();
        String expected = "[ Options: [ short [] ] [ long [] ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionGroup_tvhX0() {
        Option option = new Option("o", "option", true, "description");
        Options options = new Options();
        OptionGroup optionGroup = options.getOptionGroup(option);
        assertNotNull(optionGroup);
        assertTrue(optionGroup.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions2_NLTX1() {
        Options options = new Options();
        Option option = new Option("a", "long", false, "desc");
        options.addOption(option);
        Option option2 = new Option("b", "long2", false, "desc2");
        options.addOption(option2);
        Options result = options.addOptions(options);
        assertEquals(options, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_FPuf2() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertTrue(options.hasLongOption("o"));
        assertFalse(options.hasLongOption("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_veoI3() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        options.addOption("x", "another option", false, "description");
        assertEquals(2, options.getMatchingOptions("o").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_DckY6() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        options.addOption("x", "another option", false, "description");
        assertNotNull(options.getOptionGroup(options.getOption("o")));
        assertNull(options.getOptionGroup(options.getOption("x")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_tczB8() {
        Options options = new Options();
        options.addOption("o", "option", true, "description");
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionGroup_tvhX0_1() {
        Option option = new Option("o", "option", true, "description");
        Options options = new Options();
        OptionGroup optionGroup = options.getOptionGroup(option);
        assertNotNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionGroup_tvhX0_2() {
        Option option = new Option("o", "option", true, "description");
        Options options = new Options();
        OptionGroup optionGroup = options.getOptionGroup(option);
        assertTrue(optionGroup.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_FPuf2_1() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        assertTrue(options.hasLongOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_DckY6_1() {
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        options.addOption("x", "another option", false, "description");
        assertNotNull(options.getOptionGroup(options.getOption("o")));
    }
}