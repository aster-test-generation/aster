/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithStripLeadingAndTrailingQuotesDefaultOff_qrHD0() throws org.apache.commons.cli.ParseException {
        DefaultParser defaultParser = new DefaultParser();
        String token = "token";
        try {
            defaultParser.handleConcatenatedOptions(token);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptionsWithStripLeadingAndTrailingQuotesDefaultOn_rZcN1() throws org.apache.commons.cli.ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        String token = "token";
        try {
            defaultParser.handleConcatenatedOptions(token);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_kBsG0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        String token = "abc";
        try {
            parser.handleConcatenatedOptions(token);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_CurrentOptionRequiresArg_True_FZoP0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        String token = "token";
        defaultParser.currentOption = new Option("o", "option", true, "arg");
        defaultParser.handleConcatenatedOptions(token);
        verify(defaultParser.currentOption, times(1)).processValue(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_CurrentOptionRequiresArg_False_UePP2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        String token = "token";
        defaultParser.currentOption = new Option("o", "option", false, "arg");
        defaultParser.handleConcatenatedOptions(token);
        verify(defaultParser.currentOption, times(1)).processValue(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleOptionWithArgument_MBIY2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"-o", "value"};
        parser.parse(new Options(), arguments, new Properties(), false);
        assertEquals("value", parser.currentOption.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAllowPartialMatchingTrue_Texm0() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        String[] arguments = {"--L", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithAllowPartialMatchingFalse_THNp1() throws ParseException {
        DefaultParser parser = new DefaultParser(false);
        Options options = new Options();
        String[] arguments = {"--L", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullAsOptions_PXNV4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = null;
        String[] arguments = {"--L", "value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullAsProperties_VphS5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--L", "value"};
        Properties properties = null;
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseHasShortOptionPos1_NZQe2() throws ParseException {
        final DefaultParser parser = new DefaultParser();
        final Options options = new Options();
        options.addOption("S", "shortOption", false, "short option description");
        final String[] arguments = {"-S1S2S3"};
        parser.parse(options, arguments, null, false);
        verify(parser).handleConcatenatedOptions("-S1S2S3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseHandleLongOptionWithoutEqualPos1_BGGg7() throws ParseException {
        final DefaultParser parser = new DefaultParser();
        final Options options = new Options();
        options.addOption("L", "longOption", true, "long option description");
        final String[] arguments = {"-Lvalue1=value2"};
        parser.parse(options, arguments, null, false);
        verify(parser).handleConcatenatedOptions("-Lvalue1=value2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNegativeNumber_JQgc1_tLLq0() throws org.apache.commons.cli.ParseException {
        DefaultParser defaultParser = new DefaultParser();
        String token = "-1";
        boolean result = defaultParser.parse(null, new String[]{token}, null).hasOption('1');
        boolean expected = true;
        assertEquals(expected, result);
    }
}