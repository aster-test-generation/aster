/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText1_YEef0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 1;
        int nextLineTabStop = 1;
        String text = "This is a test string";
        helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a test string", sb.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrim_CjUp0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String s = "   ";
        String expected = "";
        String actual = helpFormatter.rtrim(s);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_VaVm4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 20;
        int expected = -1;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_qVfK5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 30;
        int expected = -1;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_EwWF6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 40;
        int expected = -1;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_OWjU7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 50;
        int expected = -1;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos9_ZMQR8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 60;
        int expected = -1;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos10_Bxes9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String text = "This is a sample text";
        int width = 10;
        int startPos = 70;
        int expected = -1;
        int actual = helpFormatter.findWrapPos(text, width, startPos);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions1_jOee0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer stringBuffer = new StringBuffer();
        int width = 0;
        Options options = new Options();
        int leftPad = 0;
        int descPad = 0;
        helpFormatter.renderOptions(stringBuffer, width, options, leftPad, descPad);
    }
}