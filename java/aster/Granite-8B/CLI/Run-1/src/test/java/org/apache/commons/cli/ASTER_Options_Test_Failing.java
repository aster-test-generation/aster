/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_oGZM0() {
        Options options = new Options();
        String opt = "option";
        boolean expected = true;
        boolean actual = options.hasLongOption(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_PpUQ0() {
        Options options = new Options();
        String opt = "test";
        List<String> expected = Collections.singletonList("test");
        List<String> actual = options.getMatchingOptions(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_UKky0() {
        Options options = new Options();
        String expected = "[ Options: [ short [] ] [ long [] ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionGroup_KEnw0() {
        Option option = new Option("option", "longOption", true, "description");
        Options options = new Options();
        OptionGroup optionGroup = options.getOptionGroup(option);
        assertNotNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionGroup2_vtOh1() {
        Option option = new Option("option", true, "description");
        Options options = new Options();
        OptionGroup optionGroup = options.getOptionGroup(option);
        assertNotNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionGroup3_sHav2() {
        Option option = new Option("option", "description");
        Options options = new Options();
        OptionGroup optionGroup = options.getOptionGroup(option);
        assertNotNull(optionGroup);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions2_ugdv1() {
        Options options = new Options();
        Option option = new Option("a", "long", false, "desc");
        options.addOption(option);
        Options result = options.addOptions(options);
        assertEquals(result, options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions3_AwQo2() {
        Options options = new Options();
        Option option = new Option("a", "long", false, "desc");
        options.addOption(option);
        Options options1 = new Options();
        options1.addOption(option);
        Options result = options.addOptions(options1);
        assertEquals(result, options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOptionWithOptThatExists_BuPq4() {
        Options options = new Options();
        String opt = "t";
        boolean expected = true;
        boolean actual = options.hasShortOption(opt);
        assertEquals(expected, actual);
    }
}