/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFlatten_ZGjH0() {
        Options options = new Options();
        String[] arguments = new String[]{"--option1", "value1", "--option2", "value2", "--", "arg1", "arg2"};
        String[] expected = new String[]{"--option1", "value1", "--option2", "value2", "--", "arg1", "arg2"};
        String[] actual = new GnuParser().flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFlattenWithStopAtNonOption_EKSZ1() {
        Options options = new Options();
        String[] arguments = new String[]{"--option1", "value1", "--option2", "value2", "--", "arg1", "arg2"};
        String[] expected = new String[]{"--option1", "value1", "--option2", "value2", "--", "arg1", "arg2"};
        String[] actual = new GnuParser().flatten(options, arguments, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFlattenWithNoOptions_XCRo2() {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        String[] expected = new String[]{"arg1", "arg2"};
        String[] actual = new GnuParser().flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFlattenWithNoArguments_ckhU3() {
        Options options = new Options();
        String[] arguments = new String[]{};
        String[] expected = new String[]{};
        String[] actual = new GnuParser().flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFlattenWithStopAtNonOptionAndNoOptions_pqrZ4() {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        String[] expected = new String[]{"arg1", "arg2"};
        String[] actual = new GnuParser().flatten(options, arguments, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFlattenWithStopAtNonOptionAndNoArguments_bJwa5() {
        Options options = new Options();
        String[] arguments = new String[]{};
        String[] expected = new String[]{};
        String[] actual = new GnuParser().flatten(options, arguments, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_AKvL0() throws IllegalArgumentException {
        new Option("option", "longOption", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor2_UKdJ1() throws IllegalArgumentException {
        new Option("option", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor3_uIjk2() throws IllegalArgumentException {
        new Option("option", "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_sHsz3() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription_Wtqg4() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_ahQq5() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_ouFZ6() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_hlop7() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_uobu8() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(null, option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionalArg_Aswk10() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        option.setOptionalArg(true);
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_CGLi11() throws ParseException {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", true, "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter_GrcH13() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_mGmB14() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(0, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_bvIq16() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        option.setDescription("newDescription");
        assertEquals("newDescription", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_EXHu17() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(option, option.clone());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDeprecatedAttributes_Vtmv19() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(null, option.getDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_ijSF20() throws ParseException {
        Option option1 = new Option("option", "longOption", true, "description");
        Option option2 = new Option("option", "longOption", true, "description");
        assertEquals(option1.hashCode(), option2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt_wRot21() throws ParseException {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("option", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetArgs_FxsO3() throws ParseException {
        final Option option = new Option("option", "description");
        assertEquals(-1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetDescription_ReEw4() throws ParseException {
        final Option option = new Option("option", "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetArgName_yNKH5() throws ParseException {
        final Option option = new Option("option", "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetLongOpt_npQm6() throws ParseException {
        final Option option = new Option("option", "description");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetRequired_TYzH7() throws ParseException {
        final Option option = new Option("option", "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionBuilder_LIMb9() throws ParseException {
        final Option option = Option.builder("option").build();
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetOptionalArg_POwI10() throws ParseException {
        final Option option = new Option("option", "description");
        option.setOptionalArg(true);
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionEquals_TOTm11() throws ParseException {
        final Option option1 = new Option("option", "description");
        final Option option2 = new Option("option", "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionToString_hadS12() throws ParseException {
        final Option option = new Option("option", "description");
        assertEquals("[ Option option :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetValueSeparator_ZArU14() throws ParseException {
        final Option option = new Option("option", "description");
        assertEquals(0, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionHasArgs_QJZM15() throws ParseException {
        final Option option = new Option("option", "description");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetDescription_wfoK16() throws ParseException {
        final Option option = new Option("option", "description");
        option.setDescription("newDescription");
        assertEquals("newDescription", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionHashCode_PvfE20() throws ParseException {
        final Option option1 = new Option("option", "description");
        final Option option2 = new Option("option", "description");
        assertEquals(option1.hashCode(), option2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetOpt_TgCc21() throws ParseException {
        final Option option = new Option("option", "description");
        assertEquals("option", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionHasValueSeparator_utGA22() throws ParseException {
        final Option option = new Option("option", "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetType_RcvY23() throws ParseException {
        final Option option = new Option("option", "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_TDqc1_1() throws ParseException {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_TDqc1_2() throws ParseException {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_mpGw3_1() throws ParseException {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_mpGw3_2() throws ParseException {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ltHD4() throws ParseException {
        Options options = new Options();
        String result = options.toString();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetArgs_ZzeI6_1() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetArgs_ZzeI6_2() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGnuParserParse_Nxpa7() throws ParseException {
        GnuParser gnuParser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        CommandLine result = null;
        try {
            result = gnuParser.parse(options, arguments, false);
        } catch (ParseException e) {
            fail("ParseException should not be thrown");
        }
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_cxpH1() {
        Options options = new Options();
        String opt = "opt";
        boolean result = options.hasLongOption(opt);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_ayhT2() {
        Options options = new Options();
        String opt = "opt";
        List<String> result = options.getMatchingOptions(opt);
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_GNAU3() {
        Options options = new Options();
        String opt = "opt";
        Option result = options.getOption(opt);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGnuParserParse_YHGr7() throws ParseException {
        GnuParser gnuParser = new GnuParser();
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine result = null;
        try {
            result = gnuParser.parse(options, arguments, properties);
        } catch (ParseException e) {
            fail("Parse exception occurred");
        }
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_rkyY0() throws ParseException {
        Options options = new Options();
        boolean result = options.hasLongOption("opt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_TnoI1() throws ParseException {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_Htjr2() throws ParseException {
        Options options = new Options();
        Option result = options.getOption("opt");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_OvgB3() throws ParseException {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SgqC4() throws ParseException {
        Options options = new Options();
        String result = options.toString();
        assertEquals("[ Options: [ short {} ] [ long {} ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_IHgy6() throws ParseException {
        Options options = new Options();
        Option opt = new Option("opt", "longOpt", false, "description");
        options.addOption(opt);
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_ZTag7() throws ParseException {
        Options options = new Options();
        Option opt = new Option("opt", "longOpt", false, "description");
        OptionGroup group = new OptionGroup();
        group.addOption(opt);
        options.getOptionGroup(opt);
        assertEquals(1, options.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_Xzvt8() throws ParseException {
        Options options = new Options();
        boolean result = options.hasShortOption("opt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_ZarI10() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_PSJa11() throws ParseException {
        Options options = new Options();
        Options options2 = new Options();
        options.addOptions(options2);
        assertEquals(0, options.getOptions().size());
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_FxdK12() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        assertEquals(1, options.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_SsOP13() throws ParseException {
        Options options = new Options();
        boolean result = options.hasOption("opt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_MPyM20() throws ParseException {
        CommandLine cmd = new CommandLine();
        String[] result = cmd.getArgs();
        assertTrue(result.length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_TDqc1() throws ParseException {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertNotNull(result);
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_mpGw3() throws ParseException {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertNotNull(result);
        assertEquals(0, result.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetArgs_ZzeI6() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String[] result = commandLine.getArgs();
        assertNotNull(result);
        assertEquals(0, result.length);
    }
}