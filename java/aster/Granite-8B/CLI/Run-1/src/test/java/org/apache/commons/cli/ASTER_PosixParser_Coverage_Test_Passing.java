/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionsGetOptions_kMuc0() {
        PosixParser posixParser = new PosixParser();
        Options options = posixParser.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseHelpOptions_NtqI0() throws org.apache.commons.cli.ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        posixParser.parse(options, arguments, properties, stopAtNonOption);
        for (final Option opt : options.helpOptions()) {
            opt.clearValues();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOptionGroups_FcUX1() throws org.apache.commons.cli.ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        posixParser.parse(options, arguments, properties, stopAtNonOption);
        for (final OptionGroup group : options.getOptionGroups()) {
            group.setSelected(null);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSetOptions_rbUL2_LmaU0() throws org.apache.commons.cli.ParseException {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        posixParser.parse(options, arguments, properties, stopAtNonOption);
        posixParser.setOptions(options);
    }
}