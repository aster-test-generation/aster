/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MissingArgumentException_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_Svdz8() {
        Option option = new Option("option", "longOption", true, "description");
        assertNotNull(option.getDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_lRle11() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList_Rlln19() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(Arrays.asList("value1", "value2"), option.getValuesList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_swOa21() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_zylH4_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("value", option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValueSeparator_JAkV6_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(':', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_vYYd7() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_BYnQ9_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(12345, option.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId_QfIK12_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(12345, option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValues_KzsS13() {
        Option option = new Option("option", "longOption", true, "description");
        assertArrayEquals(new String[]{"value1", "value2"}, option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_aFRJ15_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("key", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue1_DaXy18_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("value", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_MFlH20_fid2() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("argName", option.getArgName());
    }
}