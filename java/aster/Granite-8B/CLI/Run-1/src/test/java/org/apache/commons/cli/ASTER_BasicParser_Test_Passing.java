/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BasicParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_FrqH0() {
        Options options = new Options();
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"arg1", "arg2"};
        String[] flattenedArgs = parser.flatten(options, arguments, false);
        assertNotNull(flattenedArgs);
        assertEquals(2, flattenedArgs.length);
        assertTrue(flattenedArgs[0].equals("arg1"));
        assertTrue(flattenedArgs[1].equals("arg2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessProperties_wOaW0() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = new Properties();
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessPropertiesWithNullProperties_MBIw1() throws ParseException {
        BasicParser parser = new BasicParser();
        Properties properties = null;
        parser.processProperties(properties);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_Kjjg0() throws IllegalArgumentException {
        new Option("o", "longOption", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor2_HBSv1() throws IllegalArgumentException {
        new Option("o", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor3_Qrjv2() throws IllegalArgumentException {
        new Option("o", "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription_aVky4() throws ParseException {
        Option option = new Option("o", "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_qOeP5() throws ParseException {
        Option option = new Option("o", "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_MAGZ7() throws ParseException {
        Option option = new Option("o", "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptionalArg_upsG10() throws ParseException {
        Option option = new Option("o", "description");
        option.setOptionalArg(true);
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_XOfH11() throws ParseException {
        Option option1 = new Option("o", "description");
        Option option2 = new Option("o", "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_JHhf14() throws ParseException {
        Option option = new Option("o", "description");
        assertEquals(0, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescription_tFzM16() throws ParseException {
        Option option = new Option("o", "description");
        option.setDescription("newDescription");
        assertEquals("newDescription", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_gaMR17() throws CloneNotSupportedException {
        Option option = new Option("o", "description");
        Option clonedOption = (Option) option.clone();
        assertEquals(option, clonedOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_nxNe20() throws ParseException {
        Option option1 = new Option("o", "description");
        Option option2 = new Option("o", "description");
        assertEquals(option1.hashCode(), option2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt_rZGo21() throws ParseException {
        Option option = new Option("o", "description");
        assertEquals("o", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_aWIO22() throws ParseException {
        Option option = new Option("o", "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessOption10_MHeH9() throws ParseException {
        BasicParser parser = new BasicParser();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_UUlV0() throws IllegalArgumentException {
        new Option("option", "longOption", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor2_TuwG1() throws IllegalArgumentException {
        new Option("option", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor3_fNfc2() throws IllegalArgumentException {
        new Option("option", "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetDescription_LcpT4() throws ParseException {
        final Option option = new Option("option", "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetArgName_Yore5() throws ParseException {
        final Option option = new Option("option", "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetRequired_BMHP7() throws ParseException {
        final Option option = new Option("option", "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetOptionalArg_ieBM10() throws ParseException {
        final Option option = new Option("option", "description");
        option.setOptionalArg(true);
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionEquals_FMdB11() throws ParseException {
        final Option option1 = new Option("option", "description");
        final Option option2 = new Option("option", "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetValueSeparator_Vxgj14() throws ParseException {
        final Option option = new Option("option", "description");
        assertEquals(0, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionHasArgs_TyDQ15() throws ParseException {
        final Option option = new Option("option", "description");
        assertFalse(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetDescription_GSmW16() throws ParseException {
        final Option option = new Option("option", "description");
        option.setDescription("newDescription");
        assertEquals("newDescription", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionHashCode_LlGA20() throws ParseException {
        final Option option1 = new Option("option", "description");
        final Option option2 = new Option("option", "description");
        assertEquals(option1.hashCode(), option2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetOpt_xZlm21() throws ParseException {
        final Option option = new Option("option", "description");
        assertEquals("option", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionHasValueSeparator_FDCh22() throws ParseException {
        final Option option = new Option("option", "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetType_xuXW23() throws ParseException {
        final Option option = new Option("option", "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_YKLG0() throws ParseException {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasLongOption("longOption"));
        assertFalse(options.hasLongOption("nonexistentOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_ysGy1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionObject_boqG3() throws ParseException {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        BasicParser parser = new BasicParser();
        options.addOption(Option.builder("a").hasArg().build());
        try {
            CommandLine result = parser.parse(options, new String[]{"-a", "value"});
            assertNotNull(result);
            assertEquals("value", result.getOptionValue('a'));
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_GmPo1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("a").build());
        group.addOption(Option.builder("b").build());
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a"};
        try {
            CommandLine commandLine = new BasicParser().parse(options, arguments);
            assertNotNull(commandLine);
            assertTrue(commandLine.hasOption("a"));
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionObject_SCwA3() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").hasArg().build());
        String[] arguments = new String[]{"-a", "value"};
        try {
            CommandLine commandLine = new BasicParser().parse(options, arguments);
            assertNotNull(commandLine);
            Object optionObject = commandLine.getOptionObject("a");
            assertNotNull(optionObject);
            assertEquals("value", optionObject);
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_FrqH0_1() {
        Options options = new Options();
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"arg1", "arg2"};
        String[] flattenedArgs = parser.flatten(options, arguments, false);
        assertNotNull(flattenedArgs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_FrqH0_2() {
        Options options = new Options();
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"arg1", "arg2"};
        String[] flattenedArgs = parser.flatten(options, arguments, false);
        assertEquals(2, flattenedArgs.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_FrqH0_3() {
        Options options = new Options();
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"arg1", "arg2"};
        String[] flattenedArgs = parser.flatten(options, arguments, false);
        assertTrue(flattenedArgs[0].equals("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_FrqH0_4() {
        Options options = new Options();
        BasicParser parser = new BasicParser();
        String[] arguments = new String[]{"arg1", "arg2"};
        String[] flattenedArgs = parser.flatten(options, arguments, false);
        assertTrue(flattenedArgs[1].equals("arg2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_Mrka6_fid1() throws ParseException {
        Option option = new Option("o", "description");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_BCxl9_fid1() throws ParseException {
        Option option = Option.builder("o").build();
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetArgs_yvZB3_fid1() throws ParseException {
        final Option option = new Option("option", "description");
        assertEquals(-1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetLongOpt_HJSV6_fid1() throws ParseException {
        final Option option = new Option("option", "description");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionBuilder_QzWS9_fid1() throws ParseException {
        final Option option = Option.builder("option").build();
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionToString_QwXL12_fid1() throws ParseException {
        final Option option = new Option("option", "description");
        assertEquals("[ Option option :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_YKLG0_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_YKLG0_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertFalse(options.hasLongOption("nonexistentOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_ysGy1_1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_ysGy1_2() throws ParseException {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_JWSB3_fid1() throws ParseException {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        String[] arguments = {"-l", "value"};
        try {
            CommandLine commandLine = new BasicParser().parse(options, arguments, false);
            assertNull(commandLine.getOptionValue("longOption"));
        } catch (ParseException e) {
            fail("Parse exception occurred");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionProperties_LkbF4_fid1() throws ParseException {
        Options options = new Options();
        options.addOption(Option.builder("a").hasArg().build());
        String[] arguments = new String[]{"-a", "value"};
        try {
            CommandLine commandLine = new BasicParser().parse(options, arguments);
            assertNotNull(commandLine);
            Properties optionProperties = commandLine.getOptionProperties("a");
            assertNotNull(optionProperties);
            assertNull(optionProperties.getProperty("a"));
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
    }
}