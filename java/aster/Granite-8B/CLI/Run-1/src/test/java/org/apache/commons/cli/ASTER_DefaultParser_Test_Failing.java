/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_biNA0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_StiZ1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_EnVY2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_pKJD3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_SRSo4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_KXpK5() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_uFwA6() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions8_llad7() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions9_oplL8() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions10_YRhT9() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions11_rEMR10() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions12_dUvr11() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k-l");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions13_KSHQ12() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k-l-m");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions14_BUKT13() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k-l-m-n");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions15_lSBv14() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k-l-m-n-o");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions16_UXsf15() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions17_WGXx16() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_RDDJ2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_JKEI3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a12");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_tkkq4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a123");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_eOxV5() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1234");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_ChEV6() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions8_aoLE7() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a123456");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions9_Oaxm8() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1234567");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions10_pUmk9() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a12345678");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions11_Nsfo10() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a123456789");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions12_RUWX11() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1234567890");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions13_UJnf12() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a12345678901");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions14_oFsG13() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a123456789012");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions15_Hrhb14() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1234567890123");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions16_AZTe15() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a12345678901234");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions17_NyBv16() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a123456789012345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions18_colf17() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1234567890123456");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_uCLi0() {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        try {
            CommandLine result = defaultParser.parse(options, new String[]{"-a", "b"});
            assertNotNull(result);
            assertEquals("b", result.getOptionValue('a'));
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_bsNt0() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "required option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-r", "value"}, null, false);
        assertEquals("value", cmd.getOptionValue("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_Tntd2() throws ParseException {
        Options options = new Options();
        options.addOption("p", "property", true, "property option");
        DefaultParser parser = new DefaultParser();
        Properties properties = new Properties();
        properties.setProperty("p", "value");
        CommandLine cmd = parser.parse(options, new String[]{"--property"}, properties, false);
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_Kdmw0() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(null, new String[]{"arg1", "arg2"}, null, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_HCta4() {
        Options options = new Options();
        assertEquals("[]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_MJta8_1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        assertEquals(1, options.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_MJta8_2() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        assertTrue(options.getOptionGroups().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Cith4() {
        Options options = new Options();
        String result = options.toString();
        assertEquals("[]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ooJw4() {
        Options options = new Options();
        String result = options.toString();
        assertEquals("Options[]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_ZNsy11() {
        Options options = new Options();
        Options options2 = new Options();
        Options result = options.addOptions(options2);
        assertEquals(options2, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_VCJw4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals("[l, s]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_ykff2_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("longOption", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_eSWO12() {
        Options options = new Options();
        Option opt = new Option("opt", "description");
        OptionGroup group = new OptionGroup();
        group.addOption(opt);
        OptionGroup result = options.getOptionGroup(opt);
        assertEquals(group, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_LTLG11_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("l", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_GHSz0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_GHSz0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_GHSz0_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_lFMm0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        properties.setProperty("b", "value4");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value3", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_lFMm0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        properties.setProperty("b", "value4");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value4", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OCqk2_2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "optionA", true, "description"));
        group.addOption(new Option("b", "optionB", true, "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a", "value1"};
        Properties properties = new Properties();
        properties.setProperty("b", "value2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_IsXe3_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "nonOption"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value2", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_IsXe3_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "nonOption"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_IsXe3_3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "nonOption"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("nonOption", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_QzsV7() {
        CommandLine cmd = new CommandLine();
        try {
            cmd.getParsedOptionValue("opt", null);
            fail("ParseException expected");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullOptions_Zvbk0() {
        Options options = null;
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        boolean stopAtNonOption = false;
        try {
            CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException not thrown");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqualWithNullToken_IOSd3() {
        DefaultParser defaultParser = new DefaultParser();
        String token = null;
        int expectedIndex = -1;
        int actualIndex = defaultParser.indexOfEqual(token);
        assertEquals(expectedIndex, actualIndex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_Ujqu0() {
        DefaultParser defaultParser = new DefaultParser(false);
        try {
            defaultParser.checkRequiredOptions();
        } catch (MissingOptionException e) {
            fail("checkRequiredOptions should not throw MissingOptionException when expectedOpts is empty");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptionsWithExpectedOpts_gbPT1() {
        DefaultParser defaultParser = new DefaultParser(false);
        defaultParser.expectedOpts.add("option1");
        try {
            defaultParser.checkRequiredOptions();
            fail("checkRequiredOptions should throw MissingOptionException when expectedOpts is not empty");
        } catch (MissingOptionException e) {
            assertEquals("Missing required options: [option1]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CBUZ0() {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine result = parser.parse(options, new String[]{"-a", "b", "-c"}, false);
            assertNotNull(result);
            assertEquals(2, result.getArgs().length);
            assertEquals("b", result.getArgs()[0]);
            assertEquals("-c", result.getArgs()[1]);
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ghXA1() {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine result = parser.parse(options, new String[]{"-a", "b", "-c"}, true);
            assertNotNull(result);
            assertEquals(1, result.getArgs().length);
            assertEquals("-a", result.getArgs()[0]);
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_tCXY2() {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser parser = new DefaultParser(true);
        try {
            CommandLine result = parser.parse(options, new String[]{"-abc"}, false);
            assertNotNull(result);
            assertEquals(1, result.getArgs().length);
            assertEquals("-abc", result.getArgs()[0]);
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoPartialMatching_fmcS3() {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser parser = new DefaultParser(false);
        try {
            CommandLine result = parser.parse(options, new String[]{"-abc"}, false);
            assertNotNull(result);
            assertEquals(3, result.getArgs().length);
            assertEquals("-a", result.getArgs()[0]);
            assertEquals("b", result.getArgs()[1]);
            assertEquals("c", result.getArgs()[2]);
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions11_ZJic10_YcrT0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a123456789");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions12_YNlD11_kRiP0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a1234567890");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions13_ulut12_zuty0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a12345678901");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions14_YHcA13_mjew0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a123456789012");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions15_ZYVN14_SaqQ0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a1234567890123");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions16_AAJt15_AbJX0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a12345678901234");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions17_gexe16_eTEx0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a123456789012345");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions18_xwNR17_qNwv0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a1234567890123456");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions19_TBWT18_GOJp0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a12345678901234567");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions20_dHpg19_Jzoc0() {
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.handleConcatenatedOptions("a123456789012345678");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ScdH2_inLv0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "arg1", "--", "arg2"}, null, true);
        String[] args = cmd.getArgs();
        assertEquals(2, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ScdH2_inLv0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "arg1", "--", "arg2"}, null, true);
        String[] args = cmd.getArgs();
        assertEquals("arg1", args[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ScdH2_inLv0_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "arg1", "--", "arg2"}, null, true);
        String[] args = cmd.getArgs();
        assertEquals("arg2", args[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_kOJC3_TLnk0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "arg1", "--", "arg2"}, null, false);
        String[] args = cmd.getArgs();
        assertEquals(3, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_kOJC3_TLnk0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "arg1", "--", "arg2"}, null, false);
        String[] args = cmd.getArgs();
        assertEquals("-a", args[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_kOJC3_TLnk0_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "arg1", "--", "arg2"}, null, false);
        String[] args = cmd.getArgs();
        assertEquals("arg1", args[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoStopAtNonOption_kOJC3_TLnk0_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "arg1", "--", "arg2"}, null, false);
        String[] args = cmd.getArgs();
        assertEquals("arg2", args[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_baLY4_kZTu0() {
        DefaultParser parser = new DefaultParser();
        Properties props = new Properties();
        props.setProperty("key1", "value1");
        props.setProperty("key2", "value2");
        CommandLine cmd = null;
        try {
            cmd = parser.parse(new Options(), new String[]{"-a", "arg1"}, props, false);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals("value1", cmd.getOptionValue("key1"));
        assertEquals("value2", cmd.getOptionValue("key2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_fMTq0_IQrQ0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        properties.setProperty("c", "value4");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(2, commandLine.getArgs().length);
        assertEquals("value1", commandLine.getOptionValue("a"));
        assertEquals("value2", commandLine.getOptionValue("b"));
        assertEquals("value3", commandLine.getOptionValue("a"));
        assertEquals("value4", commandLine.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_oqJZ1_wYNI0() {
        Options options = new Options();
        options.addRequiredOption("a", "optionA", true, "description");
        String[] arguments = new String[]{"-a", "value1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("value1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_LzeL2_JbcE0() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "optionA", true, "description"));
        group.addOption(new Option("b", "optionB", true, "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a", "value1"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("value1", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPrivateMethod_LZXw3_tEdb0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(1, commandLine.getArgs().length);
        assertEquals("value3", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_TxOm0_YzDj0() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        Properties properties = new Properties();
        CommandLine commandLine = null;
        try {
            commandLine = new DefaultParser().parse(options, arguments, properties);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertNotNull(commandLine);
        assertTrue(commandLine.hasOption('a'));
        assertEquals("value", commandLine.getOptionValue('a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroup_eSWO12_fid1() {
        Options options = new Options();
        Option opt = new Option("opt", "description");
        OptionGroup group = new OptionGroup();
        group.addOption(opt);
        OptionGroup result = options.getOptionGroup(opt);
        assertNull(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_MJta8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        assertEquals(1, options.getOptionGroups().size());
        assertTrue(options.getOptionGroups().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_ykff2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals("longOption", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_LTLG11() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals("l", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_GHSz0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, cmd.getArgs().length);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_lFMm0() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        properties.setProperty("b", "value4");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value3", cmd.getOptionValue("a"));
        assertEquals("value4", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OCqk2() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "optionA", true, "description"));
        group.addOption(new Option("b", "optionB", true, "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a", "value1"};
        Properties properties = new Properties();
        properties.setProperty("b", "value2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_IsXe3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "nonOption"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value2", cmd.getOptionValue("a"));
        assertEquals(1, cmd.getArgList().size());
        assertEquals("nonOption", cmd.getArgList().get(0));
    }
}