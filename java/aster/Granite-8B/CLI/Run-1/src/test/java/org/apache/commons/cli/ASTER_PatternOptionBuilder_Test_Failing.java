/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PatternOptionBuilder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_JwUL5_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "long option description");
        options.addOption("s", "shortOption", false, "short option description");
        assertFalse(options.hasShortOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_rYyo6_2() {
        Options options = new Options();
        options.addOption("l", "longOption", true, "long option description");
        options.addOption("s", "shortOption", false, "short option description");
        List<?> requiredOptions = options.getRequiredOptions();
        assertEquals("longOption", ((Option) requiredOptions.get(0)).getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithUnicode_rLXw7() {
        assertTrue(PatternOptionBuilder.isValueCode('\u00A0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithSurrogatePair_SUro8() {
        assertTrue(PatternOptionBuilder.isValueCode('\uD834\uDD1E'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_WmQs2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "long option description");
        options.addOption("s", "shortOption", false, "short option description");
        Option option = options.getOption("l");
        assertNotNull(option);
        assertEquals("longOption", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_JwUL5() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "long option description");
        options.addOption("s", "shortOption", false, "short option description");
        assertTrue(options.hasShortOption("s"));
        assertFalse(options.hasShortOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_rYyo6() {
        Options options = new Options();
        options.addOption("l", "longOption", true, "long option description");
        options.addOption("s", "shortOption", false, "short option description");
        List<?> requiredOptions = options.getRequiredOptions();
        assertEquals(1, requiredOptions.size());
        assertEquals("longOption", ((Option) requiredOptions.get(0)).getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_WmQs2_2_fid2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "long option description");
        options.addOption("s", "shortOption", false, "short option description");
        Option option = options.getOption("l");
        assertEquals("longOption", option.getOpt());
    }
}