/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_OCFW1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions25_bKMN24() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_MEqY1() {
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "Argument");
        DefaultParser defaultParser = new DefaultParser();
        try {
            defaultParser.parse(options, new String[]{"-a"});
            fail("Expected ParseException for missing argument");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Missing argument for option: a"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_Sjoq2() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "arg", true, "Argument"));
        group.addOption(new Option("b", "bool", false, "Boolean"));
        options.addOptionGroup(group);
        DefaultParser defaultParser = new DefaultParser();
        try {
            CommandLine result = defaultParser.parse(options, new String[]{"-a", "b"});
            assertNotNull(result);
            assertEquals("b", result.getOptionValue('a'));
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleOptions_ETfE4() {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        DefaultParser defaultParser = new DefaultParser();
        try {
            CommandLine result = defaultParser.parse(options, new String[]{"-a", "b", "-b"});
            assertNotNull(result);
            assertEquals("b", result.getOptionValue('a'));
            assertTrue(result.hasOption('b'));
        } catch (ParseException e) {
            fail("Parse exception occurred: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder2_Pdko1() {
        DefaultParser defaultParser = DefaultParser.builder()
                .build();
        assertNotNull(defaultParser);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_ZMkW1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "alpha option"));
        group.addOption(new Option("b", "beta", false, "beta option"));
        options.addOptionGroup(group);
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-a"}, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_tVGu3_1() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-o", "value", "arg1", "arg2"}, null, true);
        assertEquals("value", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_tVGu3_2() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-o", "value", "arg1", "arg2"}, null, true);
        assertEquals(2, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_tVGu3_3() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-o", "value", "arg1", "arg2"}, null, true);
        assertEquals("arg1", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_tVGu3_4() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-o", "value", "arg1", "arg2"}, null, true);
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_QJkO2() {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
            assertEquals(2, commandLine.getArgs().length);
            assertEquals("arg1", commandLine.getArgs()[0]);
            assertEquals("arg2", commandLine.getArgs()[1]);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_NjzP0() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_BEau1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_BEau1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_Ppsb2_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_Ppsb2_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_oNuU3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        Collection<Option> optionsCollection = options.getOptions();
        assertEquals(2, optionsCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_pUtI4_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        String optionsString = options.toString();
        assertTrue(optionsString.contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_pUtI4_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        String optionsString = options.toString();
        assertTrue(optionsString.contains("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_oKrI7() {
        Options options = new Options();
        Options options2 = new Options();
        options2.addOption("l", "longOption", false, "description");
        options2.addOption("o", "option", false, "description");
        options.addOptions(options2);
        Collection<Option> optionsCollection = options.getOptions();
        assertEquals(2, optionsCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_PjuX8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("o", "option", false, "description"));
        options.addOptionGroup(group);
        Collection<Option> optionsCollection = options.getOptions();
        assertEquals(2, optionsCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_CcvH13() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ikRq4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_hsBw7() {
        Options options = new Options();
        Options options2 = new Options();
        options2.addOption("l", "longOption", false, "description");
        options.addOptions(options2);
        Collection<Option> optionsCollection = options.getOptions();
        assertEquals(1, optionsCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_ZIHg8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        options.addOptionGroup(group);
        Collection<Option> optionsCollection = options.getOptions();
        assertEquals(1, optionsCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_lISh0() {
        Options options = new Options();
        options.hasLongOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_HvzW1() {
        Options options = new Options();
        options.getMatchingOptions("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_UuVk2() {
        Options options = new Options();
        options.getOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_NAlv3() {
        Options options = new Options();
        options.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_bfvL4() {
        Options options = new Options();
        options.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_xqxl5() {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_CVsr6() {
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_XHIe7() {
        Options options = new Options();
        options.addOptions(new Options());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_Ugud8() {
        Options options = new Options();
        options.addOptionGroup(new OptionGroup());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_GEbr9() {
        Options options = new Options();
        options.hasShortOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_cODs10() {
        Options options = new Options();
        options.addOption("opt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_Jrae11() {
        Options options = new Options();
        options.addOption("opt", "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_smAy13() {
        Options options = new Options();
        options.getRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_yzeH14() {
        Options options = new Options();
        options.hasOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_RVHe16() {
        CommandLine commandLine = new CommandLine();
        commandLine.getArgs();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_YLZy18() {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue2_yplF20() {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptionValue("opt", "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue3_yHsW21() {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptionValue("opt", () -> null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullArguments_XFZK1() {
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(new Options(), null, null, false);
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_YPzg1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_YPzg1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_zrZB2_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("l", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OkMd4_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OkMd4_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OkMd4_3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OkMd4_4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_mVmL7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("n", "newOption", false, "description");
        options.addOptions(newOptions);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_kKzD8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("o", "option", false, "description"));
        options.addOptionGroup(group);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_RgFi0_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertFalse(options.hasLongOption("nonexistentOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_KgNQ13_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertFalse(options.hasOption("nonexistentOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_WOFw1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_WOFw1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_gGMP3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        Collection<Option> optionsList = options.getOptions();
        assertEquals(2, optionsList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_eThF7() {
        Options options = new Options();
        Options options2 = new Options();
        options2.addOption("l", "longOption", false, "description");
        options.addOptions(options2);
        Collection<Option> optionsList = options.getOptions();
        assertEquals(1, optionsList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_NebY8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        options.addOptionGroup(group);
        Collection<Option> optionsList = options.getOptions();
        assertEquals(1, optionsList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_yBUo2() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertEquals(option, options.getOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_AsfZ3_1() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "option2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_AsfZ3_2() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "option2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertTrue(options.getOptions().contains(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_AsfZ3_3() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "option2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertTrue(options.getOptions().contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_wMwX6_1() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_wMwX6_2() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertTrue(options.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_iyiw7_1() {
        Options options = new Options();
        Options options2 = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "option2", false, "description");
        options2.addOption(option1);
        options2.addOption(option2);
        options.addOptions(options2);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_iyiw7_2() {
        Options options = new Options();
        Options options2 = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "option2", false, "description");
        options2.addOption(option1);
        options2.addOption(option2);
        options.addOptions(options2);
        assertTrue(options.getOptions().contains(option1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_iyiw7_3() {
        Options options = new Options();
        Options options2 = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "option2", false, "description");
        options2.addOption(option1);
        options2.addOption(option2);
        options.addOptions(options2);
        assertTrue(options.getOptions().contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_rMxX3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        Collection<Option> optionsList = options.getOptions();
        assertEquals(2, optionsList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_BBPr5_1() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_BBPr5_2() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_Jxnc7_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("n", "newOption", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("newOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_Jxnc7_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("n", "newOption", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("newOption");
        assertEquals("n", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_AeAn8_1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").desc("description").build());
        group.addOption(Option.builder("o").longOpt("option").desc("description").build());
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_AeAn8_2() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").desc("description").build());
        group.addOption(Option.builder("o").longOpt("option").desc("description").build());
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertEquals("l", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_eyvA9() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasShortOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_MqJA13() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_pnrm0() {
        Options options = new Options();
        boolean result = options.hasLongOption("opt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_esOA1() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_qHPa2() {
        Options options = new Options();
        Option result = options.getOption("opt");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_oXDa3() {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_KTpz7() {
        Options options = new Options();
        Options options2 = new Options();
        Options result = options.addOptions(options2);
        assertEquals(options, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_BfbE16() {
        Options options = new Options();
        boolean result = options.hasOption("opt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_mkiB1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_mkiB1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_wGpu2_3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_CBfY3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        Collection<Option> optionsCollection = options.getOptions();
        assertEquals(2, optionsCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_nQjV4_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_nQjV4_3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("description"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_Soec5_1() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_Soec5_2() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_Soec5_3() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertTrue(options.getRequiredOptions().contains("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_Sxdc6_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_PfwR7_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "otherOption", false, "description");
        options.addOptions(newOptions);
        assertTrue(options.hasOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_PfwR7_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "otherOption", false, "description");
        options.addOptions(newOptions);
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_PfwR7_3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "otherOption", false, "description");
        options.addOptions(newOptions);
        assertTrue(options.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_PfwR7_4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "otherOption", false, "description");
        options.addOptions(newOptions);
        assertTrue(options.hasLongOption("otherOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_TVqz8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").desc("description").build());
        options.addOptionGroup(group);
        assertTrue(options.getOptionGroups().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_sxAH0_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[0]);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_sxAH0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[0]);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_TiCJ1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_TiCJ1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals("arg1", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_TiCJ1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_obay2_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_obay2_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals("arg1", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_obay2_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals("arg2", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_obay2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_uUsK3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"-a", "arg1"});
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_uUsK3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"-a", "arg1"});
        assertEquals(1, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_uUsK3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"-a", "arg1"});
        assertEquals("arg1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_Gjub18() {
        Options options = new Options();
        String opt = "opt";
        String longOpt = "longOpt";
        boolean hasArg = true;
        String description = "description";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_yRvM8() {
        Options options = new Options();
        boolean result = options.hasShortOption("opt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_AOJl12() {
        Options options = new Options();
        List result = options.getRequiredOptions();
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionWithChar_OJrr18() {
        Options options = new Options();
        Option opt = new Option("opt", "description");
        options.addOption(opt);
        Option result = options.getOption("opt");
        assertEquals(opt, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_JTrc1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals(1, options.getMatchingOptions("l").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_JTrc1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals(1, options.getMatchingOptions("s").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_HOyN2_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_HOyN2_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_xLXH3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_oHDy5() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_NbNE6() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_BBsw7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("s", "shortOption", false, "description");
        options.addOptions(newOptions);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_Qtzy8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        options.addOptionGroup(group);
        assertEquals(1, options.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_hUZS10() {
        Options options = new Options();
        options.addOption("l", "longOption", true, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_FkZL2_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertNotNull(options.getOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_FkZL2_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertNotNull(options.getOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_iOIA4_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.toString().contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_iOIA4_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.toString().contains("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_bWvO5() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        options.addRequiredOption("s", "shortOption", false, "description");
        assertEquals(2, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_BSSd7() {
        Options options1 = new Options();
        options1.addOption("l", "longOption", false, "description");
        options1.addOption("s", "shortOption", false, "description");
        Options options2 = new Options();
        options2.addOption("L", "longerOption", false, "description");
        options2.addOption("S", "shorterOption", false, "description");
        options1.addOptions(options2);
        assertEquals(4, options1.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_CRFt8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("s", "shortOption", false, "description"));
        options.addOptionGroup(group);
        assertEquals(1, options.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_rKVt9() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.hasShortOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_cgsp10() {
        Options options = new Options();
        options.addOption("l", "longOption", true, "description");
        options.addOption("s", "shortOption", true, "description");
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_CSdK1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_CSdK1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_FFeJ3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Collection<Option> optionsCollection = options.getOptions();
        assertEquals(2, optionsCollection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_txbx4_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        String optionsString = options.toString();
        assertTrue(optionsString.contains("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_txbx4_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        String optionsString = options.toString();
        assertTrue(optionsString.contains("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_Ijdo7_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("L", "longOption2", false, "description");
        newOptions.addOption("S", "shortOption2", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("longOption2");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_Ijdo7_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("L", "longOption2", false, "description");
        newOptions.addOption("S", "shortOption2", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("longOption2");
        assertEquals("longOption2", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_ZVit8_1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").build());
        group.addOption(Option.builder("s").longOpt("shortOption").build());
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_ZVit8_2() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").build());
        group.addOption(Option.builder("s").longOpt("shortOption").build());
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_jRac10_1() {
        Options options = new Options();
        options.addOption("l", "longOption", true, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_jRac10_2() {
        Options options = new Options();
        options.addOption("l", "longOption", true, "description");
        Option option = options.getOption("longOption");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgs_lsqA11_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_vbsM1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("lo");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_vbsM1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("lo");
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_TzaA3() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Collection<Option> optionsList = options.getOptions();
        assertEquals(2, optionsList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_LtUN7_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "option", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("option");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_LtUN7_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "option", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("option");
        assertEquals("option", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_zLnW8_1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("s", "shortOption", false, "description"));
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_zLnW8_2() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("s", "shortOption", false, "description"));
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_uaHU1_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_uaHU1_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_BFCA7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("L", "longerOption", false, "description");
        newOptions.addOption("S", "shorterOption", false, "description");
        options.addOptions(newOptions);
        assertEquals(4, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_iCyb8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("s", "shortOption", false, "description"));
        options.addOptionGroup(group);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_cDbI7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("n", "newOption", false, "description");
        options.addOptions(newOptions);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_gmWR7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "option", false, "description");
        options.addOptions(newOptions);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_hMEF8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").desc("description").build());
        group.addOption(Option.builder("s").longOpt("shortOption").desc("description").build());
        options.addOptionGroup(group);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_OQRJ6_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_bYkj8_1() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").desc("description").build());
        group.addOption(Option.builder("s").longOpt("shortOption").desc("description").build());
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_bYkj8_2() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").desc("description").build());
        group.addOption(Option.builder("s").longOpt("shortOption").desc("description").build());
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertEquals(group, options.getOptionGroup(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_RKJc0_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[0]);
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_CxeO1_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_FhlJ2_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_raqS3_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_raqS3_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals("arg1", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_raqS3_3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals("arg2", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_raqS3_4() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals("arg3", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_raqS3_5() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_tBSm2() {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(2, commandLine.getArgs().length);
        assertEquals("arg1", commandLine.getArgs()[0]);
        assertEquals("arg2", commandLine.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_TkFQ0() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "required option");
        String[] arguments = {"-r"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertTrue(cmd.hasOption("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_JjvY1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "alpha", false, "alpha option"));
        group.addOption(new Option("b", "beta", false, "beta option"));
        options.addOptionGroup(group);
        String[] arguments = {"-a"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertTrue(cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_MtxN2() throws ParseException {
        Options options = new Options();
        options.addOption("p", "property", true, "property option");
        Properties properties = new Properties();
        properties.setProperty("p", "value");
        String[] arguments = {};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, false);
        assertEquals("value", cmd.getOptionValue("p"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_cxRE3_1() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        String[] arguments = {"-o", "value", "nonOption"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertEquals("value", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_cxRE3_2() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        String[] arguments = {"-o", "value", "nonOption"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertEquals(1, cmd.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_cxRE3_3() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        String[] arguments = {"-o", "value", "nonOption"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertEquals("nonOption", cmd.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_febd1() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("a", "optionA", true, "description");
        String[] arguments = new String[]{"-a", "value1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_OCqk2_1() throws ParseException {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "optionA", true, "description"));
        group.addOption(new Option("b", "optionB", true, "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a", "value1"};
        Properties properties = new Properties();
        properties.setProperty("b", "value2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_fEnw0() {
        Options options = new Options();
        boolean result = options.hasLongOption("option");
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_LbBM1() {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("option");
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_DDmd2() {
        Options options = new Options();
        Option result = options.getOption("option");
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_tPvw3() {
        CommandLine cmd = new CommandLine();
        String[] result = cmd.getArgs();
        assertTrue(result.length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullArguments_qnGd1() {
        Options options = new Options();
        String[] arguments = null;
        Properties properties = new Properties();
        properties.setProperty("a", "1");
        properties.setProperty("b", "2");
        boolean stopAtNonOption = false;
        try {
            CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException not thrown");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNullProperties_URgC2() {
        Options options = new Options();
        String[] arguments = {"-a", "1", "-b", "2"};
        Properties properties = null;
        boolean stopAtNonOption = false;
        try {
            CommandLine commandLine = new DefaultParser().parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException not thrown");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_Flra0() {
        DefaultParser defaultParser = new DefaultParser();
        String token = "example=value";
        int expectedIndex = 7;
        int actualIndex = defaultParser.indexOfEqual(token);
        assertEquals(expectedIndex, actualIndex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqualWithEmptyToken_VZKt1() {
        DefaultParser defaultParser = new DefaultParser();
        String token = "";
        int expectedIndex = -1;
        int actualIndex = defaultParser.indexOfEqual(token);
        assertEquals(expectedIndex, actualIndex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqualWithNoEqualSign_fXKu2() {
        DefaultParser defaultParser = new DefaultParser();
        String token = "example";
        int expectedIndex = -1;
        int actualIndex = defaultParser.indexOfEqual(token);
        assertEquals(expectedIndex, actualIndex);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_PsGg2() {
        Options options = new Options();
        String[] arguments = new String[]{"-x"};
        Properties properties = new Properties();
        try {
            new DefaultParser().parse(options, arguments, properties);
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_qujo9_gFik0_1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasShortOption(String.valueOf('l')));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_qujo9_gFik0_2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertFalse(options.hasShortOption(String.valueOf('o')));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_DYvy6_PgJh0_1() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertEquals("l", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_DYvy6_PgJh0_2() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_DYvy6_PgJh0_3() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_WSYf10_BTqn0_1() {
        Options options = new Options();
        Option option = new Option("l", "longOption", true, "description");
        options.addOption(option);
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_WSYf10_BTqn0_2() {
        Options options = new Options();
        Option option = new Option("l", "longOption", true, "description");
        options.addOption(option);
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_WSYf10_BTqn0_3() {
        Options options = new Options();
        Option option = new Option("l", "longOption", true, "description");
        options.addOption(option);
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgs_xBrT11_nEGy0_1() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgs_xBrT11_nEGy0_3() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_CLyQ3_CCzf0() {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine result = null;
        try {
            result = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(2, result.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qeZQ5_nzuX0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals(2, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_bsNt0_fid1() throws ParseException {
        Options options = new Options();
        options.addRequiredOption("r", "required", false, "required option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-r", "value"}, null, false);
        assertNull(cmd.getOptionValue("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_HCta4_fid1() {
        Options options = new Options();
        assertEquals("[ Options: [ short {} ] [ long {} ]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Cith4_fid1() {
        Options options = new Options();
        String result = options.toString();
        assertEquals("[ Options: [ short {} ] [ long {} ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_VCJw4_fid1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals("[ Options: [ short {l=[ Option l longOption :: description :: class java.lang.String ], s=[ Option s shortOption :: description :: class java.lang.String ]} ] [ long {longOption=[ Option l longOption :: description :: class java.lang.String ], shortOption=[ Option s shortOption :: description :: class java.lang.String ]} ]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_ykff2_2_fid1() {
        Options options = new Options();
        options.addOption("l", "l", false, "description");
        Option option = options.getOption("l");
        assertEquals("l", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ScdH4_inLv0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "arg1", "--", "arg4"}, null, true);
        String[] args = cmd.getArgs();
        assertEquals(4, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ScdH2_inLv0_2_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "-a", "--", "arg2"}, null, true);
        String[] args = cmd.getArgs();
        assertEquals("-a", args[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ScdH2_inLv0_3_fid1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"-a", "arg1", "--", "arg1"}, null, true);
        String[] args = cmd.getArgs();
        assertEquals("arg1", args[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_tVGu3() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-o", "value", "arg1", "arg2"}, null, true);
        assertEquals("value", cmd.getOptionValue("o"));
        assertEquals(2, cmd.getArgList().size());
        assertEquals("arg1", cmd.getArgList().get(0));
        assertEquals("arg2", cmd.getArgList().get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_BEau1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_Ppsb2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_pUtI4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        String optionsString = options.toString();
        assertTrue(optionsString.contains("longOption"));
        assertTrue(optionsString.contains("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_YPzg1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_zrZB2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("l", option.getOpt());
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OkMd4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("l"));
        assertTrue(toString.contains("longOption"));
        assertTrue(toString.contains("o"));
        assertTrue(toString.contains("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_RgFi0() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasLongOption("longOption"));
        assertFalse(options.hasLongOption("nonexistentOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_KgNQ13() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("longOption"));
        assertFalse(options.hasOption("nonexistentOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_WOFw1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_AsfZ3() {
        Options options = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "option2", false, "description");
        options.addOption(option1);
        options.addOption(option2);
        assertEquals(2, options.getOptions().size());
        assertTrue(options.getOptions().contains(option1));
        assertTrue(options.getOptions().contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_wMwX6() {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertEquals(1, options.getOptions().size());
        assertTrue(options.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_iyiw7() {
        Options options = new Options();
        Options options2 = new Options();
        Option option1 = new Option("l", "longOption1", false, "description");
        Option option2 = new Option("o", "option2", false, "description");
        options2.addOption(option1);
        options2.addOption(option2);
        options.addOptions(options2);
        assertEquals(2, options.getOptions().size());
        assertTrue(options.getOptions().contains(option1));
        assertTrue(options.getOptions().contains(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vgeL4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("longOption"));
        assertTrue(toString.contains("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_BBPr5() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_hfku6() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals("l", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_Jxnc7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("n", "newOption", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("newOption");
        assertNotNull(option);
        assertEquals("n", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_AeAn8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").desc("description").build());
        group.addOption(Option.builder("o").longOpt("option").desc("description").build());
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals("l", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_mkiB1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "otherOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_wGpu2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("l", option.getOpt());
        assertEquals("longOption", option.getLongOpt());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_nQjV4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        String toString = options.toString();
        assertTrue(toString.contains("l"));
        assertTrue(toString.contains("longOption"));
        assertTrue(toString.contains("description"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_Soec5() {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("l"));
        assertTrue(options.hasLongOption("longOption"));
        assertTrue(options.getRequiredOptions().contains("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_Sxdc6() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("l"));
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_PfwR7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "otherOption", false, "description");
        options.addOptions(newOptions);
        assertTrue(options.hasOption("l"));
        assertTrue(options.hasLongOption("longOption"));
        assertTrue(options.hasOption("o"));
        assertTrue(options.hasLongOption("otherOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_sxAH0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[0]);
        assertEquals(0, cmd.getArgs().length);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_TiCJ1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals(1, cmd.getArgs().length);
        assertEquals("arg1", cmd.getArgs()[0]);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_obay2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals(2, cmd.getArgs().length);
        assertEquals("arg1", cmd.getArgs()[0]);
        assertEquals("arg2", cmd.getArgs()[1]);
        assertEquals(0, cmd.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOption_uUsK3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"-a", "arg1"});
        assertEquals(0, cmd.getArgs().length);
        assertEquals(1, cmd.getOptions().length);
        assertEquals("arg1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_JTrc1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals(1, options.getMatchingOptions("l").size());
        assertEquals(1, options.getMatchingOptions("s").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_HOyN2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("l");
        assertNotNull(option);
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_FkZL2() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertNotNull(options.getOption("l"));
        assertNotNull(options.getOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_iOIA4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.toString().contains("longOption"));
        assertTrue(options.toString().contains("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_CSdK1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_txbx4() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        String optionsString = options.toString();
        assertTrue(optionsString.contains("longOption"));
        assertTrue(optionsString.contains("shortOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_Ijdo7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("L", "longOption2", false, "description");
        newOptions.addOption("S", "shortOption2", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("longOption2");
        assertNotNull(option);
        assertEquals("longOption2", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_ZVit8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").build());
        group.addOption(Option.builder("s").longOpt("shortOption").build());
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_jRac10() {
        Options options = new Options();
        options.addOption("l", "longOption", true, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutArgs_lsqA11() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithDescription_RcYt12() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_vbsM1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("lo");
        assertEquals(1, matchingOpts.size());
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_LtUN7() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("o", "option", false, "description");
        options.addOptions(newOptions);
        Option option = options.getOption("option");
        assertNotNull(option);
        assertEquals("option", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_zLnW8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("s", "shortOption", false, "description"));
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_uaHU1() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        List<String> matchingOpts = options.getMatchingOptions("l");
        assertEquals(1, matchingOpts.size());
        assertEquals("longOption", matchingOpts.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_OQRJ6() {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_bYkj8() {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(Option.builder("l").longOpt("longOption").desc("description").build());
        group.addOption(Option.builder("s").longOpt("shortOption").desc("description").build());
        options.addOptionGroup(group);
        Option option = options.getOption("longOption");
        assertNotNull(option);
        assertEquals(group, options.getOptionGroup(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_RKJc0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[0]);
        assertEquals(0, cmd.getArgs().length);
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_CxeO1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1"});
        assertEquals(1, cmd.getArgs().length);
        assertEquals("arg1", cmd.getArgs()[0]);
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_FhlJ2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2"});
        assertEquals(2, cmd.getArgs().length);
        assertEquals("arg1", cmd.getArgs()[0]);
        assertEquals("arg2", cmd.getArgs()[1]);
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithThreeArguments_raqS3() throws ParseException {
        Options options = new Options();
        options.addOption("a", "arg", true, "an argument");
        CommandLine cmd = new DefaultParser().parse(options, new String[]{"arg1", "arg2", "arg3"});
        assertEquals(3, cmd.getArgs().length);
        assertEquals("arg1", cmd.getArgs()[0]);
        assertEquals("arg2", cmd.getArgs()[1]);
        assertEquals("arg3", cmd.getArgs()[2]);
        assertEquals(0, cmd.getOptionProperties("a").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_cxRE3() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option option");
        String[] arguments = {"-o", "value", "nonOption"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, true);
        assertEquals("value", cmd.getOptionValue("o"));
        assertEquals(1, cmd.getArgList().size());
        assertEquals("nonOption", cmd.getArgList().get(0));
    }
}