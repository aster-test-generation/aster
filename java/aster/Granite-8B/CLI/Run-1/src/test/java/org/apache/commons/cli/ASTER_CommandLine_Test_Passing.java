/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_DrWs0_1() {
        CommandLine commandLine = new CommandLine();
        String[] expected = new String[0];
        String[] actual = commandLine.getArgs();
        for (int i = 0; i < expected.length; i++) {
        }
        assertEquals(expected.length, actual.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_wIci0() {
        CommandLine commandLine = new CommandLine();
        Option[] expectedOptions = Option.EMPTY_ARRAY;
        Option[] actualOptions = commandLine.getOptions();
        assertEquals(expectedOptions, actualOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_LPMw0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "option description");
        Supplier<String> defaultValue = () -> "default value";
        String result = commandLine.getOptionValue(option, defaultValue);
        assertEquals("default value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_lXIo0_1() {
        String option = "option";
        String longOption = "longOption";
        boolean hasArg = true;
        String description = "description";
        Option option1 = new Option(option, longOption, hasArg, description);
        assertEquals(option, option1.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_lXIo0_2() {
        String option = "option";
        String longOption = "longOption";
        boolean hasArg = true;
        String description = "description";
        Option option1 = new Option(option, longOption, hasArg, description);
        assertEquals(longOption, option1.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_lXIo0_3() {
        String option = "option";
        String longOption = "longOption";
        boolean hasArg = true;
        String description = "description";
        Option option1 = new Option(option, longOption, hasArg, description);
        assertEquals(hasArg, option1.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_lXIo0_4() {
        String option = "option";
        String longOption = "longOption";
        boolean hasArg = true;
        String description = "description";
        Option option1 = new Option(option, longOption, hasArg, description);
        assertEquals(description, option1.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor2_jdLM1_1() {
        String option = "option";
        boolean hasArg = true;
        String description = "description";
        Option option1 = new Option(option, hasArg, description);
        assertEquals(option, option1.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor2_jdLM1_2() {
        String option = "option";
        boolean hasArg = true;
        String description = "description";
        Option option1 = new Option(option, hasArg, description);
        assertEquals(hasArg, option1.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor2_jdLM1_3() {
        String option = "option";
        boolean hasArg = true;
        String description = "description";
        Option option1 = new Option(option, hasArg, description);
        assertEquals(description, option1.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor3_zxKM2_1() {
        String option = "option";
        String description = "description";
        Option option1 = new Option(option, description);
        assertEquals(option, option1.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor3_zxKM2_2() {
        String option = "option";
        String description = "description";
        Option option1 = new Option(option, description);
        assertEquals(description, option1.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_NeOX0_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "option description");
        commandLine.addOption(option);
        assertEquals("default value", commandLine.getOptionValue("o", "default value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_NeOX0_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "option description");
        commandLine.addOption(option);
        assertNull(commandLine.getOptionValue("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_tant0() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a');
        assertEquals(null, optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties_wiuE0() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties2_hAnU1() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("longOpt");
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_2() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_3() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_5() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_6() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals(null, option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_7() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_11() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_12() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals(2, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_14() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals("longOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_15() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals('=', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_16() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals(null, option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_17() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals(Collections.emptyList(), option.getValuesList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_18() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertTrue(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_19() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_sdWc0() {
        CommandLine commandLine = CommandLine.builder().build();
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetArgs_QOEc0() {
        Option option = new Option("option", "longOption", true, "description");
        int result = option.getArgs();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetDescription_dfXd1() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getDescription();
        assertEquals("description", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetArgName_GMYy2() {
        Option option = new Option("option", "longOption", true, "description");
        String argName = "argName";
        option.setArgName(argName);
        assertEquals(argName, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetLongOpt_mTMk3() {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getLongOpt();
        assertEquals("longOption", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetRequired_djpi4() {
        Option option = new Option("option", "longOption", true, "description");
        boolean required = true;
        option.setRequired(required);
        assertEquals(required, option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_FnGo0() {
        CommandLine commandLine = new CommandLine();
        String defaultValue = "default";
        String result = commandLine.getOptionValue('o', defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithOption_zXhf1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = "optionValue";
        String result = commandLine.getOptionValue('o', optionValue);
        assertEquals(optionValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithEmptyOption_qvKE3() {
        CommandLine commandLine = new CommandLine();
        String defaultValue = "default";
        String result = commandLine.getOptionValue("", defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_OptionDoesNotExist_oyqq2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        String[] optionValues = commandLine.getOptionValues(option);
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_wgLe0() {
        CommandLine commandLine = new CommandLine();
        boolean result = commandLine.hasOption('a');
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_oXCL0_1() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertNotNull(argList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_oXCL0_2() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertTrue(argList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_CzDo0_1() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_CzDo0_2() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLine_lIUb1() {
        CommandLine commandLine = new CommandLine();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_cKRe0() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "default");
        assertEquals("default", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithoutOption_iXlR2() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('b', () -> "default");
        assertEquals("default", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithEmptyOption_jRqN4() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue("", () -> "default");
        assertEquals("default", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_NOiT0_1() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_FUrh0() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("option");
        assertNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_WTbe0_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "description");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_WTbe0_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "description");
        commandLine.addOption(option);
        assertFalse(commandLine.hasOption("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithLongOption_nwjk2_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "description");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_xUkb0() {
        Option option = new Option("o", "option", true, "description");
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue(option);
        assertEquals(null, optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddingArgWithNonNullArg_NsXy0_NSNO0_1() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("non-null-arg");
        assertEquals(1, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddingArgWithNonNullArg_NsXy0_NSNO0_2() {
        CommandLine commandLine = new CommandLine();
        commandLine.addArg("non-null-arg");
        assertEquals("non-null-arg", commandLine.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilderWithMultipleOptionsAndValues_gsmO5_uYsh1() {
        CommandLine commandLine = CommandLine.builder()
                .addOption(Option.builder("option1").hasArg().build())
                .addOption(Option.builder("option2").hasArg().build())
                .build();
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue_SkqJ0_gHCN0() throws ParseException {
        Option option = new Option("o", "option", true, "description");
        CommandLine commandLine = new CommandLine();
        String value = commandLine.getParsedOptionValue(option);
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue3_zlvv2_Kwjh0() {
        Option option = new Option("o", "option", true, "description");
        CommandLine commandLine = new CommandLine();
        String value = null;
        try {
            value = commandLine.getParsedOptionValue(option);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_GtoZ0_MrKL0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String defaultValue = "default";
        String expected = "default";
        String actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_LNwx3_hIeN0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'd';
        Float defaultValue = 3.14f;
        Float expected = 3.14f;
        Float actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_uIOw4_Srmk0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        char opt = 'e';
        Double defaultValue = 2.71828;
        Double expected = 2.71828;
        Double actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_kDFa5_OoVf0() {
        CommandLine commandLine = new CommandLine();
        char opt = 'f';
        List<String> defaultValue = Arrays.asList("a", "b", "c");
        List<String> expected = Arrays.asList("a", "b", "c");
        List<String> actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_DrWs0() {
        CommandLine commandLine = new CommandLine();
        String[] expected = new String[0];
        String[] actual = commandLine.getArgs();
        assertEquals(expected.length, actual.length);
        for (int i = 0; i < expected.length; i++) {
            assertEquals(expected[i], actual[i]);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor1_lXIo0() {
        String option = "option";
        String longOption = "longOption";
        boolean hasArg = true;
        String description = "description";
        Option option1 = new Option(option, longOption, hasArg, description);
        assertEquals(option, option1.getOpt());
        assertEquals(longOption, option1.getLongOpt());
        assertEquals(hasArg, option1.hasArg());
        assertEquals(description, option1.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor2_jdLM1() {
        String option = "option";
        boolean hasArg = true;
        String description = "description";
        Option option1 = new Option(option, hasArg, description);
        assertEquals(option, option1.getOpt());
        assertEquals(hasArg, option1.hasArg());
        assertEquals(description, option1.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionConstructor3_zxKM2() {
        String option = "option";
        String description = "description";
        Option option1 = new Option(option, description);
        assertEquals(option, option1.getOpt());
        assertEquals(description, option1.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_NeOX0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "option description");
        commandLine.addOption(option);
        assertEquals("default value", commandLine.getOptionValue("o", "default value"));
        assertNull(commandLine.getOptionValue("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_oXCL0() {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertNotNull(argList);
        assertTrue(argList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_CzDo0() {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(1, option.getArgs());
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_WTbe0() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "description");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("o"));
        assertFalse(commandLine.hasOption("x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithLongOption_nwjk2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", false, "description");
        commandLine.addOption(option);
        assertTrue(commandLine.hasOption("option"));
        assertFalse(commandLine.hasOption("x"));
    }
}