/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_NrhN0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        String token = "abc";
        defaultParser.handleConcatenatedOptions(token);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions1_iDgQ0() throws org.apache.commons.cli.ParseException {
        DefaultParser defaultParser = new DefaultParser();
        String token = "abc";
        try {
            defaultParser.handleConcatenatedOptions(token);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithoutEqual_xWKM0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(new Options(), new String[]{"--option"}, null, false);
        assertEquals(commandLine.getOptionValue("option"), null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleLongOptionWithEqual_XFSU1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(new Options(), new String[]{"--option=value"}, null, false);
        assertEquals(commandLine.getOptionValue("option"), "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_cctw0() throws ParseException {
        Options options = new Options();
        options.addOption("L", "longOption", false, "description");
        String[] arguments = {"--L"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertTrue(cmd.hasOption("L"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_QHyS1_1() throws ParseException {
        Options options = new Options();
        options.addOption("L", "longOption", true, "description");
        String[] arguments = {"--L", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertTrue(cmd.hasOption("L"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_QHyS1_2() throws ParseException {
        Options options = new Options();
        options.addOption("L", "longOption", true, "description");
        String[] arguments = {"--L", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertTrue(cmd.getOptionValue("L").equals("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleTokenWithTokenStartingWithDash_hQQV3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.parse(new Options(), new String[]{"-a"}, null, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_iudW6() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        parser.checkRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseForUncoveredLine1_CZrS0_1() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"--option1", "value1", "--option2", "value2"};
        Options options = new Options();
        options.addOption("option1", "o1", false, "option1 description");
        options.addOption("option2", "o2", false, "option2 description");
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", commandLine.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseForUncoveredLine1_CZrS0_2() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"--option1", "value1", "--option2", "value2"};
        Options options = new Options();
        options.addOption("option1", "o1", false, "option1 description");
        options.addOption("option2", "o2", false, "option2 description");
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value2", commandLine.getOptionValue("option2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_vJuR0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        String token = "--option=value";
        int expected = 10;
        int actual = parser.indexOfEqual(token);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_Jecp9() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        Option option = new Option("o", "option", true, "description");
        parser.expectedOpts.add(option);
        try {
            parser.checkRequiredOptions();
        } catch (MissingOptionException e) {
            assertEquals("Missing required option: " + option, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_NyGd12() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"--option=value"};
        Properties properties = new Properties();
        parser.parse(new Options(), arguments, properties, false);
        assertEquals("value", parser.cmd.getOptionValue("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_MoOJ7() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        int result = parser.indexOfEqual("test");
        int expected = 0;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_QHyS1() throws ParseException {
        Options options = new Options();
        options.addOption("L", "longOption", true, "description");
        String[] arguments = {"--L", "value"};
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, arguments, null, false);
        assertTrue(cmd.hasOption("L"));
        assertTrue(cmd.getOptionValue("L").equals("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseForUncoveredLine1_CZrS0() throws org.apache.commons.cli.ParseException {
        DefaultParser parser = new DefaultParser();
        String[] arguments = {"--option1", "value1", "--option2", "value2"};
        Options options = new Options();
        options.addOption("option1", "o1", false, "option1 description");
        options.addOption("option2", "o2", false, "option2 description");
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value1", commandLine.getOptionValue("option1"));
        assertEquals("value2", commandLine.getOptionValue("option2"));
    }
}