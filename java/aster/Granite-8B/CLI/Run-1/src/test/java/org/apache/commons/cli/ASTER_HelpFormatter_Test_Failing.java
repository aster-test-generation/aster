/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDescPadding_krsK0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getDescPadding();
        assertEquals(79, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidthWithNegativeValue_mAFR2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(-10);
        assertEquals(80, helpFormatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidthWithZeroValue_CFYt3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        helpFormatter.setWidth(0);
        assertEquals(80, helpFormatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText1_aJHy0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 10;
        int nextLineTabStop = 4;
        String text = "This is a sample text that needs to be wrapped.";
        StringBuffer result = helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a sample text that needs to be wrapped.", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText2_ZHYD1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        int width = 20;
        int nextLineTabStop = 4;
        String text = "This is a sample text that needs to be wrapped.";
        StringBuffer result = helpFormatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("This is a sample text that needs to be wrapped.", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos1_Wsnk0() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 10, 0);
        int expected = 11;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos2_SjCy1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 20, 0);
        int expected = 21;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos3_uurY2() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 30, 0);
        int expected = 31;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos4_yqgN3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 40, 0);
        int expected = 41;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos5_FbDW4() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 50, 0);
        int expected = 51;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos6_eMzE5() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 60, 0);
        int expected = 61;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos7_aFKA6() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 70, 0);
        int expected = 71;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos8_RtLn7() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 80, 0);
        int expected = 81;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos9_uNuf8() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 90, 0);
        int expected = 91;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos10_PTUL9() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 100, 0);
        int expected = 101;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos11_CTWz10() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 110, 0);
        int expected = 111;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos12_KwKD11() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int actual = helpFormatter.findWrapPos("This is a test string", 120, 0);
        int expected = 121;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithNegativeLength_vVQf3() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String padding = helpFormatter.createPadding(-5);
        assertEquals("     ", padding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSyntaxPrefix_sbpF0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String actual = helpFormatter.getSyntaxPrefix();
        String expected = "defaultSyntaxPrefix";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArgName_fPxY0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String argName = helpFormatter.getArgName();
        assertEquals("defaultArgName", argName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLeftPadding_rFMi0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        int result = helpFormatter.getLeftPadding();
        assertEquals(79, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongOptPrefix_FaMZ0_fid1() {
        HelpFormatter helpFormatter = new HelpFormatter();
        String longOptPrefix = helpFormatter.getLongOptPrefix();
        assertEquals("defaultLongOptPrefix", longOptPrefix);
    }
}