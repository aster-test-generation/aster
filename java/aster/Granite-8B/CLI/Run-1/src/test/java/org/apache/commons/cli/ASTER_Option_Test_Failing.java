/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_2_fdAj1() {
        Option option = new Option("option", true, "description");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_3_HJLN2() {
        Option option = new Option("option", "description");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_4_cfFe3() {
        Option option = new Option("option", "longOption", false, "description");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_5_arFk4() {
        Option option = new Option("option", false, "description");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndex_oypY0() {
        Option option = new Option("option", "longOption", true, "description");
        String value = option.getValue(0);
        assertEquals("value", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithoutIndex_cVRk1() {
        Option option = new Option("option", true, "description");
        String value = option.getValue();
        assertEquals("value", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithOptionObjectWithDifferentDescription_BHAT3() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option1", "longOption1", true, "description2");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithOptionObjectWithDifferentHasArg_JIIH4() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option1", "longOption1", false, "description1");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_kpFh0() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.toString();
        String expected = "[ Option option longOption [ARG...] :: description ::  ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_HQsz1() {
        Option option = new Option("option", true, "description");
        String actual = option.toString();
        String expected = "[ Option option [ARG] :: description ::  ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_uOoF2() {
        Option option = new Option("option", "description");
        String actual = option.toString();
        String expected = "[ Option option  :: description ::  ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_wQNO3() {
        Option option = new Option("option", "longOption", false, "description");
        String actual = option.toString();
        String expected = "[ Option option longOption  :: description ::  ]";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg3_IDGw2() {
        Option option = new Option("option", "description");
        boolean result = option.acceptsArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString1_OmTk0() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.toDeprecatedString();
        String expected = "Option 'option': deprecated";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString2_llVD1() {
        Option option = new Option("option", true, "description");
        String actual = option.toDeprecatedString();
        String expected = "Option 'option': deprecated";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString3_DyEi2() {
        Option option = new Option("option", "description");
        String actual = option.toDeprecatedString();
        String expected = "Option 'option': deprecated";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_vAUC0() {
        Option option = new Option("option", "longOption", true, "description");
        char actual = option.getValueSeparator();
        char expected = ' ';
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator2_NTqA1() {
        Option option = new Option("option", true, "description");
        char actual = option.getValueSeparator();
        char expected = ' ';
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator3_UGTM2() {
        Option option = new Option("option", "description");
        char actual = option.getValueSeparator();
        char expected = ' ';
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndLongOptionAndHasArgAndDescription_nJYm0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasArgs();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndHasArgAndDescription_FiGl1() {
        Option option = new Option("option", true, "description");
        boolean result = option.hasArgs();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndDescription_UaZn2() {
        Option option = new Option("option", "description");
        boolean result = option.hasArgs();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConverterWithNull_NwZb1() {
        Option option = new Option("option", "longOption", true, "description");
        option.setConverter(null);
        assertNull(option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_PXex0() {
        Option option = new Option("option", "longOption", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated2_YGHE1() {
        Option option = new Option("option", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated3_RUsx2() {
        Option option = new Option("option", "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullDescription_rxva3() {
        Option option = new Option("option", null, true, null);
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullLongOption_cjEb4() {
        Option option = new Option("option", null, true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullOption_HJeO5() {
        Option option = new Option(null, "longOption", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue3_ufhW2() {
        Option option = new Option("option", "description");
        option.processValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_qOYe0_1() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        assertEquals(option1.hashCode(), option2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_ckGG0() {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithNoValues_bfDd0_1() {
        Option option = new Option("option", "longOption", false, "description");
        String[] values = option.getValues();
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithNoValues_bfDd0_2() {
        Option option = new Option("option", "longOption", false, "description");
        String[] values = option.getValues();
        assertTrue(values.length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_BkXP1_1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        assertNotNull(values);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_BkXP1_2() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        assertTrue(values.length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_BkXP1_3() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        assertEquals("value1", values[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_BkXP1_4() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        assertEquals("value2", values[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTypeTest_HzIC0() {
        Option option = new Option("option", "longOption", true, "description");
        Object type = option.getType();
        assertEquals(type, "type");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_UtCq0() {
        Option option = new Option("option", "longOption", true, "description");
        String argName = option.getArgName();
        assertEquals("argName", argName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg_OlyY0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.requiresArg();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg3_nJcs2() {
        Option option = new Option("option", "description");
        boolean result = option.requiresArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_gHlb0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasOptionalArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgWithNullOption_mwOk2() {
        Option option = new Option(null, "longOption", true, "description");
        boolean result = option.hasOptionalArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgWithEmptyOption_uBne3() {
        Option option = new Option("", "longOption", true, "description");
        boolean result = option.hasOptionalArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgWithNullLongOption_XLbf4() {
        Option option = new Option("option", null, true, "description");
        boolean result = option.hasOptionalArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgWithEmptyLongOption_AkIR5() {
        Option option = new Option("option", "", true, "description");
        boolean result = option.hasOptionalArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgWithNullDescription_rZLF6() {
        Option option = new Option("option", "longOption", true, null);
        boolean result = option.hasOptionalArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgWithEmptyDescription_JQGe7() {
        Option option = new Option("option", "longOption", true, "");
        boolean result = option.hasOptionalArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithOptionAndLongOptionAndHasArgAndDescription_saPI0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasArgName();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithOptionAndHasArgAndDescriptionAndDefaultValue_RGhU0() {
        Option option = new Option("option", true, "description");
        String defaultValue = "default";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithOptionAndHasArgAndDescription_szqQ1() {
        Option option = new Option("option", true, "description");
        String expectedValue = "value";
        String actualValue = option.getValue();
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithOptionAndDescription_Woak2() {
        Option option = new Option("option", "description");
        String expectedValue = "value";
        String actualValue = option.getValue();
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_GoLG0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean required = option.isRequired();
        assertTrue(required);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired2_qHXJ1() {
        Option option = new Option("option", true, "description");
        boolean required = option.isRequired();
        assertTrue(required);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue_ZOxM0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.addValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithOptionAndLongOptionAndHasArgAndDescription_nXKq0_YitF0() {
        Option option = new Option("option", "longOption", true, "description");
        String expectedValue = "value";
        option.addValue(expectedValue);
        String actualValue = option.getValue();
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithOptionAndHasArgAndDescription_szqQ1_fid1() {
        Option option = new Option("option", true, "description");
        String expectedValue = "value";
        String actualValue = option.getValue();
        assertNull(expectedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithOptionAndDescription_Woak2_fid1() {
        Option option = new Option("option", "description");
        String expectedValue = "value";
        String actualValue = option.getValue();
        assertNull(expectedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_qOYe0() {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        Option option3 = new Option("option3", "longOption3", true, "description3");
        assertEquals(option1.hashCode(), option2.hashCode());
        assertNotEquals(option1.hashCode(), option3.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithNoValues_bfDd0() {
        Option option = new Option("option", "longOption", false, "description");
        String[] values = option.getValues();
        assertNotNull(values);
        assertTrue(values.length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesWithValues_BkXP1() {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        String[] values = option.getValues();
        assertNotNull(values);
        assertTrue(values.length == 2);
        assertEquals("value1", values[0]);
        assertEquals("value2", values[1]);
    }
}