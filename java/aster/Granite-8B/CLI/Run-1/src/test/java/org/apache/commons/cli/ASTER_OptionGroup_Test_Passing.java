/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_LhzM0() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(true);
        assertTrue(optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredFalse_BrrM1() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(false);
        assertFalse(optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNames_jxGz0_1() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<String> names = optionGroup.getNames();
        assertNotNull(names);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptions_aEij0_1() {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_MvAQ0() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("o", "option1", false, "description1"));
        optionGroup.addOption(new Option("l", "option2", false, "description2"));
        assertEquals("[-o description1, -l description2]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_ajHv1() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option(null, "option1", false, "description1"));
        optionGroup.addOption(new Option(null, "option2", false, "description2"));
        assertEquals("[--option1 description1, --option2 description2]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_BpDX2() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("o", "option1", false, "description1"));
        assertEquals("[-o description1]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_mZKB3() {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option(null, "option1", false, "description1"));
        assertEquals("[--option1 description1]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString5_tNoG4() {
        OptionGroup optionGroup = new OptionGroup();
        assertEquals("[]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedWithOption_gjmJ0_YonK0() {
        Option option = new Option("option", "longOption", true, "description");
        OptionGroup optionGroup = new OptionGroup();
        try {
            optionGroup.setSelected(option);
        } catch (AlreadySelectedException e) {
        }
        assertEquals("option", optionGroup.getSelected());
    }
}