/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_uPZR0() {
        Option option = new Option("o", "option", true, "description");
        CommandLine commandLine = new CommandLine();
        String defaultValue = "default";
        String expected = "value";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_kbAR0() {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        String defaultValue = "default";
        String expected = "expected";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties3_Nfoo2() {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(1, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_1() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_4() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals("option", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_8() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_9() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals(null, option.getValue("defaultValue"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0_13() {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder2 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder3 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder4 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder5 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        Option.Builder builder6 = Option.builder();
        option.setLongOpt("longOpt");
        option.setValueSeparator('=');
        option.setLongOpt("longOpt");
        option.setType(String.class);
        option.setArgs(2);
        assertEquals(null, option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetValue_HPPy5() {
        Option option = new Option("option", "longOption", true, "description");
        String value = "value";
        String result = option.getValue(0);
        assertEquals(value, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetOptionProperties_XmhU7() {
        Option option = new Option("option", "longOption", true, "description");
        List<Option> options = new ArrayList<>();
        options.add(option);
        CommandLine commandLine = new CommandLine();
        Properties result = commandLine.getOptionProperties(option);
        assertEquals("true", result.get("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionObject_gAFX0() {
        CommandLine commandLine = new CommandLine();
        String opt = "exampleOption";
        Object optionObject = commandLine.getOptionObject(opt);
        assertNotNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithEmptyDefaultValue_wPaN5() {
        CommandLine commandLine = new CommandLine();
        String optionValue = "optionValue";
        String result = commandLine.getOptionValue('o', "");
        assertEquals(optionValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionObject_HkXA0() {
        CommandLine commandLine = new CommandLine();
        Object optionObject = commandLine.getOptionObject('a');
        assertNotNull(optionObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_rHQF0_1() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues('a');
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_rHQF0_2() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues('a');
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_OptionExists_GOLB1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues(option);
        assertTrue(optionValues.length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_OptionMultipleValues_vhUj3_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues(option);
        assertTrue(optionValues.length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_OptionMultipleValues_vhUj3_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals("value1", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_OptionMultipleValues_vhUj3_3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals("value2", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_OptionSingleValue_Bkat4_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        option.addValue("value");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues(option);
        assertTrue(optionValues.length == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_OptionSingleValue_Bkat4_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        option.addValue("value");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues(option);
        assertEquals("value", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_tGkT0() {
        Option option = new Option("o", "option", true, "description");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithLongOption_ScNn1() {
        Option option = new Option("o", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithDescription_PTLe2() {
        Option option = new Option("o", "description");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithDeprecatedAttributes_exgP3() {
        Option option = new Option("o", "deprecatedAttributes");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithConverter_UlsR4() {
        Option option = new Option("o", "converter");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithCharValueSeparator_PfPQ5() {
        Option option = new Option("o", "charValueSeparator");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithIntArgs_MzAL6() {
        Option option = new Option("o", "intArgs");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithStringDescription_KwRB7() {
        Option option = new Option("o", "stringDescription");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithObjectClone_COJi8() {
        Option option = new Option("o", "objectClone");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithDeprecatedAttributes2_vJOQ9() {
        Option option = new Option("o", "deprecatedAttributes2");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithConverter2_SrUk10() {
        Option option = new Option("o", "converter2");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithCharValueSeparator2_wCfU11() {
        Option option = new Option("o", "charValueSeparator2");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithIntArgs2_rkYv12() {
        Option option = new Option("o", "intArgs2");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithStringDescription2_xMja13() {
        Option option = new Option("o", "stringDescription2");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithObjectClone2_eznO14() {
        Option option = new Option("o", "objectClone2");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithDeprecatedAttributes3_AcVq15() {
        Option option = new Option("o", "deprecatedAttributes3");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithConverter3_nVOK16() {
        Option option = new Option("o", "converter3");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithCharValueSeparator3_MWOn17() {
        Option option = new Option("o", "charValueSeparator3");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithIntArgs3_BFId18() {
        Option option = new Option("o", "intArgs3");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithStringDescription3_exfm19() {
        Option option = new Option("o", "stringDescription3");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithOption_nYvX1() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "default");
        assertEquals("value", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithEmptyDefaultValue_TmYn6() {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a', () -> "");
        assertEquals("value", optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_NOiT0_2() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_NHvw0() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("option");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithDeprecatedOption_lUVB1_1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", false, "description");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("option");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithDeprecatedOption_lUVB1_2() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", false, "description");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("option");
        assertEquals("option", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithMultipleOptions_wxlZ2_1() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", false, "description1");
        Option option2 = new Option("option2", "longOption2", false, "description2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] optionValues = commandLine.getOptionValues("option1");
        assertEquals(1, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithMultipleOptions_wxlZ2_2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", false, "description1");
        Option option2 = new Option("option2", "longOption2", false, "description2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] optionValues = commandLine.getOptionValues("option1");
        assertEquals("option1", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetParsedOptionValue_qQik0_Iaai0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        String defaultValue = "default";
        String expected = "expected";
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetParsedOptionValue2_iXJj1_tcJu0() {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Boolean defaultValue = true;
        Boolean expected = false;
        try {
            Boolean actual = commandLine.getParsedOptionValue(opt, defaultValue);
            assertEquals(expected, actual);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetParsedOptionValue4_GbVC3_KeXr0() throws ParseException {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Integer defaultValue = 10;
        Integer expected = 20;
        Integer actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetParsedOptionValue6_XEil5_ccoe0() {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Character defaultValue = 'a';
        Character expected = 'b';
        Character actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetParsedOptionValue7_FbCP6_KfPJ0() {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        List<String> defaultValue = Arrays.asList("a", "b");
        List<String> expected = Arrays.asList("c", "d");
        List<String> actual = null;
        try {
            actual = commandLine.getParsedOptionValue(opt, defaultValue);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_gIUx0() {
        Option option = new Option("o", "option", true, "description");
        assertEquals(1, option.getArgs());
        assertEquals("description", option.getDescription());
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
        assertEquals("option", option.getLongOpt());
        option.setRequired(true);
        assertTrue(option.isRequired());
        assertEquals(null, option.getValue(0));
        Option.Builder builder = Option.builder("o");
        option.setOptionalArg(true);
        assertTrue(option.hasOptionalArg());
        assertFalse(option.hasArgName());
        assertEquals(null, option.getValue("defaultValue"));
        assertTrue(option.isRequired());
        option.setType(String.class);
        assertEquals(String.class, option.getType());
        option.setArgs(2);
        assertEquals(2, option.getArgs());
        Option.Builder builder2 = Option.builder();
        assertEquals(null, option.getLongOpt());
        option.setLongOpt("longOpt");
        assertEquals("longOpt", option.getLongOpt());
        option.setValueSeparator('=');
        assertEquals('=', option.getValueSeparator());
        assertEquals(null, option.getValue());
        assertEquals(Collections.emptyList(), option.getValuesList());
        option.setLongOpt("longOpt");
        assertTrue(option.hasLongOpt());
        assertTrue(option.hasArg());
        assertEquals(null, option.getValue("defaultValue"));
        assertTrue(option.isRequired());
        option.setType(String.class);
        assertEquals(String.class, option.getType());
        option.setArgs(2);
        assertEquals(2, option.getArgs());
        Option.Builder builder3 = Option.builder();
        assertEquals(null, option.getLongOpt());
        option.setLongOpt("longOpt");
        assertEquals("longOpt", option.getLongOpt());
        option.setValueSeparator('=');
        assertEquals('=', option.getValueSeparator());
        assertEquals(null, option.getValue());
        assertEquals(Collections.emptyList(), option.getValuesList());
        option.setLongOpt("longOpt");
        assertTrue(option.hasLongOpt());
        assertTrue(option.hasArg());
        assertEquals(null, option.getValue("defaultValue"));
        assertTrue(option.isRequired());
        option.setType(String.class);
        assertEquals(String.class, option.getType());
        option.setArgs(2);
        assertEquals(2, option.getArgs());
        Option.Builder builder4 = Option.builder();
        assertEquals(null, option.getLongOpt());
        option.setLongOpt("longOpt");
        assertEquals("longOpt", option.getLongOpt());
        option.setValueSeparator('=');
        assertEquals('=', option.getValueSeparator());
        assertEquals(null, option.getValue());
        assertEquals(Collections.emptyList(), option.getValuesList());
        option.setLongOpt("longOpt");
        assertTrue(option.hasLongOpt());
        assertTrue(option.hasArg());
        assertEquals(null, option.getValue("defaultValue"));
        assertTrue(option.isRequired());
        option.setType(String.class);
        assertEquals(String.class, option.getType());
        option.setArgs(2);
        assertEquals(2, option.getArgs());
        Option.Builder builder5 = Option.builder();
        assertEquals(null, option.getLongOpt());
        option.setLongOpt("longOpt");
        assertEquals("longOpt", option.getLongOpt());
        option.setValueSeparator('=');
        assertEquals('=', option.getValueSeparator());
        assertEquals(null, option.getValue());
        assertEquals(Collections.emptyList(), option.getValuesList());
        option.setLongOpt("longOpt");
        assertTrue(option.hasLongOpt());
        assertTrue(option.hasArg());
        assertEquals(null, option.getValue("defaultValue"));
        assertTrue(option.isRequired());
        option.setType(String.class);
        assertEquals(String.class, option.getType());
        option.setArgs(2);
        assertEquals(2, option.getArgs());
        Option.Builder builder6 = Option.builder();
        assertEquals(null, option.getLongOpt());
        option.setLongOpt("longOpt");
        assertEquals("longOpt", option.getLongOpt());
        option.setValueSeparator('=');
        assertEquals('=', option.getValueSeparator());
        assertEquals(null, option.getValue());
        assertEquals(Collections.emptyList(), option.getValuesList());
        option.setLongOpt("longOpt");
        assertTrue(option.hasLongOpt());
        assertTrue(option.hasArg());
        assertEquals(null, option.getValue("defaultValue"));
        assertTrue(option.isRequired());
        option.setType(String.class);
        assertEquals(String.class, option.getType());
        option.setArgs(2);
        assertEquals(2, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_rHQF0() {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues('a');
        assertNotNull(optionValues);
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_OptionMultipleValues_vhUj3() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues(option);
        assertTrue(optionValues.length == 2);
        assertEquals("value1", optionValues[0]);
        assertEquals("value2", optionValues[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_OptionSingleValue_Bkat4() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        option.addValue("value");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues(option);
        assertTrue(optionValues.length == 1);
        assertEquals("value", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_NOiT0() {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertNotNull(iterator);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithDeprecatedOption_lUVB1() {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", false, "description");
        commandLine.addOption(option);
        String[] optionValues = commandLine.getOptionValues("option");
        assertEquals(1, optionValues.length);
        assertEquals("option", optionValues[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValuesWithMultipleOptions_wxlZ2() {
        CommandLine commandLine = new CommandLine();
        Option option1 = new Option("option1", "longOption1", false, "description1");
        Option option2 = new Option("option2", "longOption2", false, "description2");
        commandLine.addOption(option1);
        commandLine.addOption(option2);
        String[] optionValues = commandLine.getOptionValues("option1");
        assertEquals(1, optionValues.length);
        assertEquals("option1", optionValues[0]);
    }
}