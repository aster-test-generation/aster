/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionValidator_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateNull_dZpZ0() {
        String option = null;
        String result = OptionValidator.validate(option);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateEmpty_kRDf1_1() {
        String option = "";
        IllegalArgumentException exception =
                assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValidOption_AHXQ4() {
        String option = "abc";
        String result = OptionValidator.validate(option);
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValidOptionWithNumber_OhBg5() {
        String option = "abc123";
        String result = OptionValidator.validate(option);
        assertEquals("abc123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValidOptionWithUnderscore_tOkd6() {
        String option = "abc_123";
        String result = OptionValidator.validate(option);
        assertEquals("abc_123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValidOptionWithDash_umCu7() {
        String option = "abc-123";
        String result = OptionValidator.validate(option);
        assertEquals("abc-123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateNull_RQeN0() {
        assertEquals(null, OptionValidator.validate(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateEmpty_nqmb1_1() {
        IllegalArgumentException exception =
                assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValid_ScKi4() {
        assertEquals("abc", OptionValidator.validate("abc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValidWithMultipleChars_xuMs5() {
        assertEquals("abc123", OptionValidator.validate("abc123"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateInvalidMiddleChar_Icua3() {
        String option = "abc!";
        IllegalArgumentException exception =
                assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValid_ASta4() {
        String option = "abc123";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }
}