/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithDuplicateKey_icJX0() {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addOption(option);
        Options optionsWithDuplicateKey = new Options();
        Option optionWithDuplicateKey = new Option("opt", "longOpt", true, "description");
        optionsWithDuplicateKey.addOption(optionWithDuplicateKey);
        try {
            options.addOptions(optionsWithDuplicateKey);
        } catch (IllegalArgumentException e) {
            assertEquals("Duplicate key: opt", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithoutDuplicateKey_lKil1() {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        options.addOption(option);
        Options optionsWithoutDuplicateKey = new Options();
        Option optionWithoutDuplicateKey = new Option("opt2", "longOpt2", true, "description2");
        optionsWithoutDuplicateKey.addOption(optionWithoutDuplicateKey);
        try {
            options.addOptions(optionsWithoutDuplicateKey);
        } catch (IllegalArgumentException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutRequiredOption_Ebrj1_apPm0() {
        Options options = new Options();
        Option opt = new Option("o", "option", true, "description");
        options.addOption(opt);
        assertFalse(options.getRequiredOptions().contains("o"));
    }
}