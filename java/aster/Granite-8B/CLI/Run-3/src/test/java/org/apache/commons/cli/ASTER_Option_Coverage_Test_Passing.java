/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Coverage_Test_Passing {
    {
    }

    {
    }

    {
    }

    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals1_VKww0() {
        Option obj = new Option("a", "b", true, "c");
        boolean result = obj.equals(null);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals2_EhkC1() {
        Option obj = new Option("a", "b", true, "c");
        boolean result = obj.equals(new Object());
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_hdnZ0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.acceptsArg();
        boolean expected = true;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgs_ozww0() {
        Option option = new Option("option", "description");
        boolean result = option.hasArgs();
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithClass_pnIN0() {
        Option option = new Option("option", "description");
        option.setType(String.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValues_wQGg0() {
        Option option = new Option("option", "longOption", true, "description");
        option.getValues();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString1_NYns0() {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.toDeprecatedString();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString2_fDXD1() {
        Option option = new Option("option", true, "description");
        String actual = option.toDeprecatedString();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString3_uesn2() {
        Option option = new Option("option", "description");
        String actual = option.toDeprecatedString();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArg_Kczf0() {
        Option option = new Option("option", "description");
        boolean result = option.hasArg();
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_fmpg0() {
        Option option = new Option("option", "longOption", true, "description");
        String value = option.getValue();
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecated_JxXQ0() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.isDeprecated();
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_avza0() {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "defaultValue";
        String value = option.getValue(defaultValue);
        assertEquals("defaultValue", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg3_tkvV2() {
        Option option = new Option("option", "description");
        boolean result = option.requiresArg();
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue1_dihk0() {
        Option option = new Option("option", "longOption", true, "description");
        option.processValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue2_LprP1() {
        Option option = new Option("option", true, "description");
        option.processValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithSpace_SWza1_fid1() {
        Option option = new Option("o", "option", true, "description");
        assertEquals("[ Option o option [ARG] :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithoutArg_LycN4_fid1() {
        Option option = new Option("o", "option", false, "description");
        assertEquals("[ Option o option :: description :: class java.lang.String ]", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_HUJC0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.hasValueSeparator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_Sigb0_fid1() {
        Option option = new Option("option", "longOption", false, "description");
        boolean result = option.hasArgName();
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg1_Ctkl0_fid1() {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.requiresArg();
        boolean expected = true;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg2_hifn1_fid1() {
        Option option = new Option("option", true, "description");
        boolean result = option.requiresArg();
        boolean expected = true;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArg4_XgAA3_fid1() {
        Option option = new Option("option", "longOption", false, "description");
        boolean result = option.requiresArg();
        boolean expected = false;
        assertEquals(expected, result);
    }
}