/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionValidator_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateNull_mGiD0() throws Exception {
        String option = null;
        String result = OptionValidator.validate(option);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateEmpty_vNtP1() throws Exception {
        String option = "";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidFirstChar_zkBx2() throws Exception {
        String option = "123";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Illegal option name '1'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidChar_RDLr3() throws Exception {
        String option = "abc!";
        try {
            OptionValidator.validate(option);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOption_VhhT4() throws Exception {
        String option = "abc123";
        String result = OptionValidator.validate(option);
        assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateNull_vCJT0() throws Exception {
        String option = null;
        String result = OptionValidator.validate(option);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateEmpty_dcVs1() throws Exception {
        String option = "";
        try {
            OptionValidator.validate(option);
            Assertions.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assertions.assertEquals("Empty option name.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidFirstChar_dPbu2() throws Exception {
        String option = "123";
        try {
            OptionValidator.validate(option);
            Assertions.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            Assertions.assertEquals("Illegal option name '1'.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateInvalidMiddleChar_eTTZ3() throws Exception {
        String option = "abc1";
        try {
            OptionValidator.validate(option);
            Assertions.fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOption_pTJu4() throws Exception {
        String option = "abc123";
        String result = OptionValidator.validate(option);
        Assertions.assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidateValidOptionWithAdditionalChars_ahEY5() throws Exception {
        String option = "abc-123";
        String result = OptionValidator.validate(option);
        Assertions.assertEquals(option, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateEmpty_HfbR1_1() throws Exception {
        String option = "";
        IllegalArgumentException exception =
                assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateInvalidChar_qkzd2() throws Exception {
        String option = "abc123";
        IllegalArgumentException exception =
                assertThrows(IllegalArgumentException.class, () -> OptionValidator.validate(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValidOption_bONt3() throws Exception {
        String option = "abc";
        String result = OptionValidator.validate(option);
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValidOptionWithSpecialChars_KbaK4() throws Exception {
        String option = "abc-123";
        String result = OptionValidator.validate(option);
        assertEquals("abc-123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValidOptionWithLongChars_XeMU5() throws Exception {
        String option = "a-b_c.d";
        String result = OptionValidator.validate(option);
        assertEquals("a-b_c.d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValidOptionWithMultipleChars_iLtV6() throws Exception {
        String option = "abc123";
        String result = OptionValidator.validate(option);
        assertEquals("abc123", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testValidateValidOptionWithMultipleCharsAndSpecialChars_VDMn7() throws Exception {
        String option = "a-b_c.d123";
        String result = OptionValidator.validate(option);
        assertEquals("a-b_c.d123", result);
    }
}