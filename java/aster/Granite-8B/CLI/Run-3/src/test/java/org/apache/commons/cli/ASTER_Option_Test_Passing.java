/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription_RAIV0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_tNcf0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_2_ZeWJ1() throws Exception {
        Option option = new Option("option", true, "description");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgs_3_HCVb2() throws Exception {
        Option option = new Option("option", "description");
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter_tjsx0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        Converter converter = option.getConverter();
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter2_CzCV1() throws Exception {
        Option option = new Option("option", true, "description");
        Converter converter = option.getConverter();
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter3_LouO2() throws Exception {
        Option option = new Option("option", "description");
        Converter converter = option.getConverter();
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_KhZT0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        char expected = ' ';
        char actual = option.getValueSeparator();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_DwIt0() throws Exception {
        Option option1 = new Option("option1", "longOption1", true, "description1");
        Option option2 = new Option("option2", "longOption2", true, "description2");
        assertEquals(option1.hashCode(), option2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndLongOptionAndHasArgAndDescription_FqBB0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndHasArgAndDescription_XNKf1() throws Exception {
        Option option = new Option("option", true, "description");
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithOptionAndDescription_nGhv2() throws Exception {
        Option option = new Option("option", "description");
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOpt_KJkf0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithNullLongOption_aZcq1() throws Exception {
        Option option = new Option("option", null, true, "description");
        assertNull(option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithEmptyLongOption_DEFg2() throws Exception {
        Option option = new Option("option", "", true, "description");
        assertEquals("", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString1_TZJA0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String expected = "Option 'option': deprecated";
        assertEquals(expected, option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString2_jfPR1() throws Exception {
        Option option = new Option("option", true, "description");
        String expected = "Option 'option': deprecated";
        assertEquals(expected, option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedString3_kBVZ2() throws Exception {
        Option option = new Option("option", "description");
        String expected = "Option 'option': deprecated";
        assertEquals(expected, option.toDeprecatedString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetopt_zzUf0() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertEquals("o", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetId_cWOi0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(option.getKey().charAt(0), option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithNullLongOption_oIyO0() throws Exception {
        Option option = new Option("option", null, false, "description");
        assertFalse(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithNonNullLongOption_vldF1() throws Exception {
        Option option = new Option("option", "longOption", false, "description");
        assertTrue(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_GOkj0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.toString();
        assertEquals("[ Option option longOption [ARG...] :: description :: null ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_XVcv1() throws Exception {
        Option option = new Option("option", true, "description");
        String result = option.toString();
        assertEquals("[ Option option [ARG] :: description :: null ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_ofXe2() throws Exception {
        Option option = new Option("option", "description");
        String result = option.toString();
        assertEquals("[ Option option [ARG...] :: description :: null ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_kIvi3() throws Exception {
        Option option = new Option("option", "longOption", false, "description");
        String result = option.toString();
        assertEquals("[ Option option longOption :: description :: null ]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetValues1_vPMh0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String[] result = option.getValues();
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetValues2_YFfx1() throws Exception {
        Option option = new Option("option", true, "description");
        String[] result = option.getValues();
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetValues3_XMOo2() throws Exception {
        Option option = new Option("option", "description");
        String[] result = option.getValues();
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTypeTest_rxFz0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        Object type = option.getType();
        assertNotNull(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTypeTest2_cdSW1() throws Exception {
        Option option = new Option("option", true, "description");
        Object type = option.getType();
        assertNotNull(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTypeTest3_DXHi2() throws Exception {
        Option option = new Option("option", "description");
        Object type = option.getType();
        assertNotNull(type);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_WithOptionAndLongOption_NYSL0() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        String expectedKey = "o";
        String actualKey = option.getKey();
        assertEquals(expectedKey, actualKey);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKey_WithOptionAndNoLongOption_fCLq1() throws Exception {
        Option option = new Option("o", true, "description");
        String expectedKey = "o";
        String actualKey = option.getKey();
        assertEquals(expectedKey, actualKey);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue1_HifF0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String actual = option.getValue();
        String expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_iTxS1() throws Exception {
        Option option = new Option("option", true, "description");
        String actual = option.getValue();
        String expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithOptionAndLongOptionAndHasArgAndDescription_OfGt0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithOptionAndHasArgAndDescription_zFKN1() throws Exception {
        Option option = new Option("option", true, "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgWithOptionAndDescription_fDrX2() throws Exception {
        Option option = new Option("option", "description");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOpt_DIPY0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setLongOpt("newLongOpt");
        assertEquals("newLongOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName_EgbA0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName2_PcZr1() throws Exception {
        Option option = new Option("option", true, "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgName3_xXcY2() throws Exception {
        Option option = new Option("option", "description");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameOption_cxKd0() throws Exception {
        Option option1 = new Option("o", "option", true, "description");
        Option option2 = new Option("o", "option", true, "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOption_ipXa1() throws Exception {
        Option option1 = new Option("o", "option", true, "description");
        Option option2 = new Option("p", "option", true, "description");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameLongOption_WnDo2() throws Exception {
        Option option1 = new Option("o", "longOption", true, "description");
        Option option2 = new Option("o", "longOption", true, "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentLongOption_BsZP3() throws Exception {
        Option option1 = new Option("o", "longOption", true, "description");
        Option option2 = new Option("o", "differentLongOption", true, "description");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_eGpB0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWithOptionAndLongOptionAndHasArgAndDescription_MOsv0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.requiresArg();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWithOptionAndHasArgAndDescription_mfsa1() throws Exception {
        Option option = new Option("option", true, "description");
        boolean result = option.requiresArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRequiresArgWithOptionAndDescription_ohtI2() throws Exception {
        Option option = new Option("option", "description");
        boolean result = option.requiresArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_1_AeKz0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String result = option.getArgName();
        assertEquals("argName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_2_pgIp1() throws Exception {
        Option option = new Option("option", true, "description");
        String result = option.getArgName();
        assertEquals("argName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getArgName_3_ooqP2() throws Exception {
        Option option = new Option("option", "description");
        String result = option.getArgName();
        assertEquals("argName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_fRaR0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired2_kgIx1() throws Exception {
        Option option = new Option("option", true, "description");
        option.setRequired(false);
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired3_bnFw2() throws Exception {
        Option option = new Option("option", "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired4_wxBJ3() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.setRequired(false);
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired5_rbtc4() throws Exception {
        Option option = new Option("option", true, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired6_Mfie5() throws Exception {
        Option option = new Option("option", "description");
        option.setRequired(false);
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddValue_CIqt0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.addValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator_rSRQ0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator2_OJHA1() throws Exception {
        Option option = new Option("option", true, "description");
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator3_bfMW2() throws Exception {
        Option option = new Option("option", "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator4_KKNF3() throws Exception {
        Option option = new Option("option", "longOption", false, "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasValueSeparator5_NhAC4() throws Exception {
        Option option = new Option("option", false, "description");
        assertFalse(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetType_Vjhn0() throws Exception {
        Option option = new Option("option", "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithNull_SSon1() throws Exception {
        Option option = new Option("option", "description");
        option.setType(null);
        assertEquals(null, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithPrimitiveType_BmeV2() throws Exception {
        Option option = new Option("option", "description");
        option.setType(int.class);
        assertEquals(int.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithArray_kLYH3() throws Exception {
        Option option = new Option("option", "description");
        option.setType(String[].class);
        assertEquals(String[].class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithObjectType_gJuE4() throws Exception {
        Option option = new Option("option", "description");
        option.setType(Option.class);
        assertEquals(Option.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithWrongType_SKzT5() throws Exception {
        Option option = new Option("option", "description");
        option.setType(List.class);
        assertNotEquals(List.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithWrongType2_mmXD6() throws Exception {
        Option option = new Option("option", "description");
        option.setType(Map.class);
        assertNotEquals(Map.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithWrongType3_BGse7() throws Exception {
        Option option = new Option("option", "description");
        option.setType(Set.class);
        assertNotEquals(Set.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg_QmfE0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.acceptsArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg2_TXSt1() throws Exception {
        Option option = new Option("option", true, "description");
        boolean result = option.acceptsArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg3_PbNZ2() throws Exception {
        Option option = new Option("option", "description");
        boolean result = option.acceptsArg();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg4_Xrrx3() throws Exception {
        Option option = new Option("option", "longOption", false, "description");
        boolean result = option.acceptsArg();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg5_XLKX4() throws Exception {
        Option option = new Option("option", false, "description");
        boolean result = option.acceptsArg();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAcceptsArg6_ylSm5() throws Exception {
        Option option = new Option("option", "description");
        boolean result = option.acceptsArg();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueList_TyjH0_1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueList_TyjH0_2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithValues_KbIw1_1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithValues_KbIw1_2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        List<String> valuesList = option.getValuesList();
        assertFalse(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithValues_KbIw1_3() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        List<String> valuesList = option.getValuesList();
        assertEquals(2, valuesList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithValues_KbIw1_4() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.contains("value1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithValues_KbIw1_5() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.contains("value2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithNullValues_xkAi2_1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithNullValues_xkAi2_2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        List<String> valuesList = option.getValuesList();
        assertFalse(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithNullValues_xkAi2_3() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        List<String> valuesList = option.getValuesList();
        assertEquals(1, valuesList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithNullValues_xkAi2_4() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue(null);
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.contains(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithEmptyValues_XBqL3_1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        List<String> valuesList = option.getValuesList();
        assertNotNull(valuesList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithEmptyValues_XBqL3_2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        List<String> valuesList = option.getValuesList();
        assertFalse(valuesList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithEmptyValues_XBqL3_3() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        List<String> valuesList = option.getValuesList();
        assertEquals(1, valuesList.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListWithEmptyValues_XBqL3_4() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.addValue("");
        List<String> valuesList = option.getValuesList();
        assertTrue(valuesList.contains(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisRequired_eMwE0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        boolean result = option.isRequired();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisRequired2_VPDO1() throws Exception {
        Option option = new Option("option", true, "description");
        boolean result = option.isRequired();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisRequired3_BnoU2() throws Exception {
        Option option = new Option("option", "description");
        boolean result = option.isRequired();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisRequired4_eRcS3() throws Exception {
        Option option = new Option("option", "longOption", false, "description");
        boolean result = option.isRequired();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisRequired5_QElM4() throws Exception {
        Option option = new Option("option", false, "description");
        boolean result = option.isRequired();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue1_yDZF0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "defaultValue";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_dzzT1() throws Exception {
        Option option = new Option("option", true, "description");
        String defaultValue = "defaultValue";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue3_VggA2() throws Exception {
        Option option = new Option("option", "description");
        String defaultValue = "defaultValue";
        String expectedValue = "value";
        String actualValue = option.getValue(defaultValue);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue1_oUyo0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        option.processValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue2_LlGV1() throws Exception {
        Option option = new Option("option", true, "description");
        option.processValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue3_byuy2() throws Exception {
        Option option = new Option("option", "description");
        option.processValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparator_AstK0() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('=');
        assertEquals('=', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithNull_jtRW1() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('\u0000');
        assertEquals('\u0000', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithSpace_iiiw2() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator(' ');
        assertEquals(' ', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithTab_AyEl3() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('\t');
        assertEquals('\t', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithComma_dIXK4() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator(',');
        assertEquals(',', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithPipe_uYkC5() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('|');
        assertEquals('|', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithQuestionMark_hLKm6() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('?');
        assertEquals('?', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithExclamationMark_KQhk7() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('!');
        assertEquals('!', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithAtSymbol_DvwZ8() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('@');
        assertEquals('@', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithHashSymbol_VrCH9() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('#');
        assertEquals('#', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithPercentSymbol_Yuil11() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('%');
        assertEquals('%', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithCircumflexAccent_fDuI12() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('^');
        assertEquals('^', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithAmpersand_qvVY13() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('&');
        assertEquals('&', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithAsterisk_Yzjc14() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('*');
        assertEquals('*', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithLeftParenthesis_QySG15() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('(');
        assertEquals('(', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithRightParenthesis_AEHA16() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator(')');
        assertEquals(')', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithPlusSign_IPZa17() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('+');
        assertEquals('+', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithMinusSign_gYyI18() throws Exception {
        Option option = new Option("option", "description");
        option.setValueSeparator('-');
        assertEquals('-', option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueSeparatorWithLeftSquareBracket_Pezn22() throws Exception {
        Option option = new Option("option", "description");
    }
}