/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PosixParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_hUBh0_1() throws Exception {
        Options options = new Options();
        boolean result = options.hasLongOption("opt");
        options.addOption("opt", "longOpt", false, "description");
        result = options.hasLongOption("longOpt");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_hUBh0_2() throws Exception {
        Options options = new Options();
        boolean result = options.hasLongOption("opt");
        options.addOption("opt", "longOpt", false, "description");
        result = options.hasLongOption("longOpt");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_fJCN1_1() throws Exception {
        PosixParser parser = new PosixParser();
        String[] arguments = {"arg1", "arg2"};
        String[] result = parser.flatten(new Options(), arguments, false);
        arguments = new String[]{"--option", "value"};
        result = parser.flatten(new Options(), arguments, false);
        Assertions.assertArrayEquals(new String[]{"arg1", "arg2"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_fJCN1_2() throws Exception {
        PosixParser parser = new PosixParser();
        String[] arguments = {"arg1", "arg2"};
        String[] result = parser.flatten(new Options(), arguments, false);
        arguments = new String[]{"--option", "value"};
        result = parser.flatten(new Options(), arguments, false);
        Assertions.assertArrayEquals(new String[]{"--option", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_gPuH0() throws Exception {
        Options options = new Options();
        boolean result = options.hasLongOption("opt");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_IquD1() throws Exception {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        Assertions.assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_Ajhg2() throws Exception {
        Options options = new Options();
        Option result = options.getOption("opt");
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_Spxr3() throws Exception {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        Assertions.assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ihts4() throws Exception {
        Options options = new Options();
        String result = options.toString();
        Assertions.assertEquals("Options[]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_qWin7() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            Assertions.assertEquals(Arrays.asList("arg1", "arg2"), Arrays.asList(result));
        } catch (ParseException e) {
            Assertions.fail("ParseException should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_echu0() throws Exception {
        Options options = new Options();
        boolean result = options.hasLongOption("opt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_snRH1_1() throws Exception {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_snRH1_2() throws Exception {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_NvXi2() throws Exception {
        Options options = new Options();
        Option result = options.getOption("opt");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_DURK3_1() throws Exception {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_DURK3_2() throws Exception {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Osgw4() throws Exception {
        Options options = new Options();
        String result = options.toString();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten_nclz7() throws Exception {
        PosixParser posixParser = new PosixParser();
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        boolean stopAtNonOption = true;
        try {
            String[] result = posixParser.flatten(options, arguments, stopAtNonOption);
            assertNotNull(result);
            assertEquals(2, result.length);
            assertEquals("arg1", result[0]);
            assertEquals("arg2", result[1]);
        } catch (ParseException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
}