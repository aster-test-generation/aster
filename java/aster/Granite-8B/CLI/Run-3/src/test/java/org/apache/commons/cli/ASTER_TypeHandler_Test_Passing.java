/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.net.URL;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_TypeHandler_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefault_rLdw0() throws Exception {
        TypeHandler typeHandler = TypeHandler.getDefault();
        assertNotNull(typeHandler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConverter_grrP2() throws Exception {
        TypeHandler typeHandler = new TypeHandler();
        Class<String> clazz = String.class;
        Converter<String, ?> converter = typeHandler.getConverter(clazz);
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateURL_Hrft0() throws Exception {
        TypeHandler typeHandler = new TypeHandler();
        String string = "https://www.example.com";
        URL expected = new URL("https://www.example.com");
        URL actual = typeHandler.createURL(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateValue_gHdS0() throws Exception {
        String string = "example";
        Class<String> clazz = String.class;
        String expected = "example";
        String actual = TypeHandler.createValue(string, clazz);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFiles_NzKS0() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String string = "exampleString";
        File[] files = TypeHandler.createFiles(string);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateDate_iZuZ0() throws Exception {
        TypeHandler typeHandler = new TypeHandler();
        String string = "2022-01-01";
        Date expectedDate = new Date(1640995200000L);
        Date actualDate = typeHandler.createDate(string);
        assertEquals(expectedDate, actualDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClass_Rcqp0() throws Exception {
        TypeHandler typeHandler = new TypeHandler();
        String className = "java.lang.String";
        Class<?> expectedClass = String.class;
        Class<?> actualClass = typeHandler.createClass(className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateClassWithInvalidClassName_cghS1() throws Exception {
        TypeHandler typeHandler = new TypeHandler();
        String className = "InvalidClassName";
        assertThrows(ParseException.class, () -> typeHandler.createClass(className));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testOpenFile_CzUJ0() throws Exception {
        assertDoesNotThrow(() -> {
            TypeHandler.openFile("test");
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testOpenFileWithException_LazO1() throws Exception {
        assertThrows(ParseException.class, () -> {
            TypeHandler.openFile(null);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getConverter_with_default_converter_ASLu0_1() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        Converter<Object, ?> converter = typeHandler.getConverter(Object.class);
        assertNotNull(converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getConverter_with_default_converter_ASLu0_2() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        Converter<Object, ?> converter = typeHandler.getConverter(Object.class);
        assertTrue(converter instanceof Converter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateValue_hlxF0() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        Object obj = new Object();
        String string = "test";
        Object result = typeHandler.createValue(string, obj);
        assertEquals(obj, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateValueWithException_TyJL1() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String string = "test";
        assertThrows(ParseException.class, () -> {
            typeHandler.createValue(string, null);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateObject_LYLA0() throws Exception {
        Map<Class<?>, Converter<?, ? extends Throwable>> converterMap = new HashMap<>();
        TypeHandler typeHandler = new TypeHandler(converterMap);
        String className = "java.lang.String";
        Object obj = typeHandler.createObject(className);
        assertNotNull(obj);
        assertTrue(obj instanceof String);
        className = "invalid.ClassName";
        try {
            obj = typeHandler.createObject(className);
            fail("Expected ParseException to be thrown");
        } catch (ParseException e) {
        }
        className = null;
        try {
            obj = typeHandler.createObject(className);
            fail("Expected NullPointerException to be thrown");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFile_iVvh0() throws Exception {
        File file = TypeHandler.createFile("test.txt");
        assertEquals("test.txt", file.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithInvalidPath_eeoh1() throws Exception {
        try {
            TypeHandler.createFile("test/test.txt");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("test/test.txt"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithInvalidPath2_boXN2() throws Exception {
        try {
            TypeHandler.createFile("test\\test.txt");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("test\\test.txt"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithInvalidPath3_NiHn3() throws Exception {
        try {
            TypeHandler.createFile("test:test.txt");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("test:test.txt"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithInvalidPath4_zQoJ4() throws Exception {
        try {
            TypeHandler.createFile("test?test.txt");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("test?test.txt"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithInvalidPath5_XtWs5() throws Exception {
        try {
            TypeHandler.createFile("test*test.txt");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("test*test.txt"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithInvalidPath6_UQrY6() throws Exception {
        try {
            TypeHandler.createFile("test|test.txt");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("test|test.txt"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithInvalidPath7_gWHT7() throws Exception {
        try {
            TypeHandler.createFile("test\"test.txt");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("test\"test.txt"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithInvalidPath8_ThYP8() throws Exception {
        try {
            TypeHandler.createFile("test<test.txt");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("test<test.txt"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithInvalidPath9_HLrm9() throws Exception {
        try {
            TypeHandler.createFile("test>test.txt");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("test>test.txt"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateFileWithInvalidPath10_eDmE10() throws Exception {
        try {
            TypeHandler.createFile("test test.txt");
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("test test.txt"));
        }
    }
}