/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten1_OTow0() {
        Options options = new Options();
        String[] arguments = new String[]{"--"};
        String[] expected = new String[]{"--"};
        GnuParser parser = new GnuParser();
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten2_tIyq1() {
        Options options = new Options();
        String[] arguments = new String[]{"-"};
        String[] expected = new String[]{"-"};
        GnuParser parser = new GnuParser();
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten3_qzsq2() {
        Options options = new Options();
        String[] arguments = new String[]{"-a"};
        String[] expected = new String[]{"-a"};
        GnuParser parser = new GnuParser();
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten4_jDQf3() {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        String[] expected = new String[]{"-a", "value"};
        GnuParser parser = new GnuParser();
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten5_sZyM4() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo"};
        String[] expected = new String[]{"--foo"};
        GnuParser parser = new GnuParser();
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten6_lfFA5() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "value"};
        String[] expected = new String[]{"--foo", "value"};
        GnuParser parser = new GnuParser();
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten7_vXmO6() {
        Options options = new Options();
        String[] arguments = new String[]{"-Dproperty=value"};
        String[] expected = new String[]{"-Dproperty=value"};
        GnuParser parser = new GnuParser();
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten8_LhlJ7() {
        Options options = new Options();
        String[] arguments = new String[]{"-Dproperty=value", "value"};
        String[] expected = new String[]{"-Dproperty=value", "value"};
        GnuParser parser = new GnuParser();
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten9_tYRL8() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "--bar"};
        String[] expected = new String[]{"--foo", "--bar"};
        GnuParser parser = new GnuParser();
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten10_aIfo9() {
        Options options = new Options();
        String[] arguments = new String[]{"--foo", "--bar", "value"};
        String[] expected = new String[]{"--foo", "--bar", "value"};
        GnuParser parser = new GnuParser();
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlatten11_eXcV10() {
        Options options = new Options();
        String[] arguments = new String[]{"-Dproperty=value", "--bar"};
        String[] expected = new String[]{"-Dproperty=value", "--bar"};
        GnuParser parser = new GnuParser();
        String[] actual = parser.flatten(options, arguments, false);
        assertArrayEquals(expected, actual);
    }
}