/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Test_Passing {
    private Map<String, Option> optionMap = new LinkedHashMap<>();
    OptionGroup optiongroup;
    private Option option;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNames_tczm0_1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Collection<String> names = optionGroup.getNames();
        assertNotNull(names);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNames_tczm0_2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Collection<String> names = optionGroup.getNames();
        assertFalse(names.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequired_DwEe0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(true);
        assertTrue(optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredFalse_evHQ1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(false);
        assertFalse(optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisRequired_cFuy0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        boolean required = optionGroup.isRequired();
        assertTrue(required);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptions_acLD0_1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertNotNull(options);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptions_acLD0_2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Collection<Option> options = optionGroup.getOptions();
        assertFalse(options.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedWithOption_LEye0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "longOption", true, "description");
        optionGroup.setSelected(option);
        assertEquals("option", optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedWithOptionAndSelectedOption_cBfa1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        Option option = new Option("option", "longOption", true, "description");
        Option selectedOption = new Option("selectedOption", "selectedLongOption", true, "selectedDescription");
        optionGroup.setSelected(selectedOption);
        optionGroup.setSelected(option);
        assertEquals("option", optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelectedWithNullOption_SpTO2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setSelected(null);
        assertNull(optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_mFhy0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        assertEquals("[ ]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_MIIl1() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("a", "optA", false, "descriptionA"));
        assertEquals("[-a descriptionA ]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_KmpI2() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("a", "optA", false, "descriptionA"));
        optionGroup.addOption(new Option("b", "optB", false, "descriptionB"));
        assertEquals("[-a descriptionA, -b descriptionB ]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_XLej3() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("a", "optA", false, "descriptionA"));
        optionGroup.addOption(new Option("b", "optB", false, "descriptionB"));
        optionGroup.addOption(new Option("c", "optC", false, "descriptionC"));
        assertEquals("[-a descriptionA, -b descriptionB, -c descriptionC ]", optionGroup.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString5_kaDD4() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(new Option("a", "optA", false, "descriptionA"));
        optionGroup.addOption(new Option("b", "optB", false, "descriptionB"));
        optionGroup.addOption(new Option("c", "optC", false, "descriptionC"));
        optionGroup.addOption(new Option("d", "optD", false, "descriptionD"));
        assertEquals("[-a descriptionA, -b descriptionB, -c descriptionC, -d descriptionD ]", optionGroup.toString());
    }
}