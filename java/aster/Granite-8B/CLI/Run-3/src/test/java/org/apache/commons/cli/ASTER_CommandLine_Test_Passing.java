/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_CommandLine_Test_Passing {
    CommandLine commandline;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_jgvE0_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertNotNull(args);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_jgvE0_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] args = commandLine.getArgs();
        assertNotEquals(0, args.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_IAqX0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option[] expectedOptions = Option.EMPTY_ARRAY;
        Option[] actualOptions = commandLine.getOptions();
        assertEquals(expectedOptions, actualOptions);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithOptionObjectAndValues_ETuu1_2() throws Exception {
        Option option = new Option("o", "option", true, "description");
        option.addValue("value1");
        option.addValue("value2");
        CommandLine commandLine = new CommandLine();
        commandLine.addOption(option);
        assertEquals(2, option.getValues().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_HCWr0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        Supplier<String> defaultValue = () -> "default";
        String expected = "default";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_AEhR0_1() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_AEhR0_2() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLine_sKYQ1() throws Exception {
        CommandLine commandLine = new CommandLine();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testBuilder_yJYw0() throws Exception {
        CommandLine commandLine = CommandLine.builder().build();
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_aYLL0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String optionValue = commandLine.getOptionValue('a');
        assertEquals(null, optionValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionObject_jwUg0() throws Exception {
        CommandLine cmd = new CommandLine();
        Object result = cmd.getOptionObject("opt");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_RVkj0() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "default";
        String expected = "value";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithNullOption_oTzI1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = null;
        String defaultValue = "default";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithEmptyOption_pMFk2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("", "", true, "");
        String defaultValue = "default";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithNullDefaultValue_rvBh3() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = null;
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithEmptyDefaultValue_QwDu4() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("option", "longOption", true, "description");
        String defaultValue = "";
        String actual = commandLine.getOptionValue(option, defaultValue);
        assertEquals("", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_GLiU0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        String expected = "expected";
        String actual = commandLine.getOptionValue(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithNullOpt_ynDa1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = null;
        String actual = commandLine.getOptionValue(opt);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithEmptyOpt_sTvn2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "";
        String actual = commandLine.getOptionValue(opt);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithOptThatDoesNotExist_lEbj3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "nonexistent";
        String actual = commandLine.getOptionValue(opt);
        assertNull(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValueWithOptThatDoesNotExistAndDefaultValue_XTua4() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "nonexistent";
        String defaultValue = "default";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(defaultValue, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_GaJj0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String defaultValue = "default";
        String result = commandLine.getOptionValue('o', defaultValue);
        assertEquals(defaultValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_CTvb0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues('a');
        assertEquals(0, optionValues.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionObject_dDaN0() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        Object expected = new CommandLine().getOptionObject(String.valueOf(opt));
        Object actual = commandLine.getOptionObject(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_RyWC0() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        boolean expected = false;
        boolean actual = commandLine.hasOption(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_ckop0_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterator_ckop0_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Iterator<Option> iterator = commandLine.iterator();
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_Jovr0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        String defaultValue = "defaultValue";
        String answer = commandLine.getOptionValue(option, () -> defaultValue);
        assertEquals("defaultValue", answer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_sXoS1() throws Exception {
        Option option = new Option("option", true, "description");
        CommandLine commandLine = new CommandLine();
        String defaultValue = "defaultValue";
        String answer = commandLine.getOptionValue(option, () -> defaultValue);
        assertEquals("defaultValue", answer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_evpQ0_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertNotNull(argList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgList_evpQ0_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        List<String> argList = commandLine.getArgList();
        assertTrue(argList.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValues_SxTi0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String[] optionValues = commandLine.getOptionValues("opt");
        assertNotNull(optionValues);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_NHOh0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String defaultValue = "default";
        String actual = commandLine.getOptionValue('o', () -> defaultValue);
        assertEquals(defaultValue, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_mSCF0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        boolean expected = true;
        boolean actual = commandLine.hasOption(opt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetArgs_WLmy0_1() throws Exception {
        Option option = new Option("o", "option", true, "description");
        int expected = 1;
        int actual = option.getArgs();
        option = new Option("o", true, "description");
        expected = 1;
        actual = option.getArgs();
        option = new Option("o", "description");
        expected = 0;
        actual = option.getArgs();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetDescription_rcsJ1_1() throws Exception {
        Option option = new Option("o", "option", true, "description");
        String expected = "description";
        String actual = option.getDescription();
        option = new Option("o", true, "description");
        expected = "description";
        actual = option.getDescription();
        option = new Option("o", "description");
        expected = "description";
        actual = option.getDescription();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetParsedOptionValue_CmUv2_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Option option = new Option("o", "option", true, "description");
        String defaultValue = "default";
        String expected = "value";
        String actual = commandLine.getParsedOptionValue(option, defaultValue);
        commandLine = new CommandLine();
        option = new Option("o", true, "description");
        defaultValue = "default";
        expected = "value";
        actual = commandLine.getParsedOptionValue(option, defaultValue);
        commandLine = new CommandLine();
        option = new Option("o", "description");
        defaultValue = "default";
        expected = "value";
        actual = commandLine.getParsedOptionValue(option, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetParsedOptionValue_Oydi0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        String defaultValue = "default";
        String expected = "expected";
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetParsedOptionValue2_Jjzo1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Boolean defaultValue = true;
        Boolean expected = false;
        Boolean actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetParsedOptionValue3_Ywfx2() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Integer defaultValue = 10;
        Integer expected = 20;
        Integer actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetParsedOptionValue4_XxAW3() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Float defaultValue = 10.5f;
        Float expected = 20.5f;
        Float actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetParsedOptionValue5_FMZA4() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Double defaultValue = 10.5;
        Double expected = 20.5;
        Double actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetParsedOptionValue6_LECw5() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Character defaultValue = 'a';
        Character expected = 'b';
        Character actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCommandLineGetParsedOptionValue10_gLnP9() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "option";
        Enum defaultValue = Enum.valueOf(Enum.class, "DEFAULT");
        Enum expected = Enum.valueOf(Enum.class, "EXPECTED");
        Enum actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue_qGyH0() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        String defaultValue = "defaultValue";
        String expected = "defaultValue";
        String actual = commandLine.getOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionValue2_NMTH1() throws Exception {
        CommandLine commandLine = new CommandLine();
        String opt = "opt";
        String defaultValue = "defaultValue";
        String expected = "defaultValue";
        String actual = commandLine.getOptionValue(opt, () -> defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_dMUy0() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'a';
        String defaultValue = "default";
        String expected = "default";
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_UVQQ1() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'b';
        Integer defaultValue = 10;
        Integer expected = 10;
        Integer actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_ybTA2() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'c';
        Boolean defaultValue = true;
        Boolean expected = true;
        Boolean actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_gnCl3() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'd';
        Float defaultValue = 3.14f;
        Float expected = 3.14f;
        Float actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_VkMf4() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'e';
        Double defaultValue = 2.71828;
        Double expected = 2.71828;
        Double actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_UkNC5() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'f';
        Character defaultValue = 'A';
        Character expected = 'A';
        Character actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_HkUJ6() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'g';
        String defaultValue = "hello";
        String expected = "hello";
        String actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_tCFg7() throws Exception {
        CommandLine commandLine = new CommandLine();
        char opt = 'h';
        List<String> defaultValue = Arrays.asList("world", "universe");
        List<String> expected = Arrays.asList("world", "universe");
        List<String> actual = commandLine.getParsedOptionValue(opt, defaultValue);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties_fPUA0_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties_fPUA0_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("opt");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties2_PoAB1_1() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("longOpt");
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties2_PoAB1_2() throws Exception {
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties("longOpt");
        assertEquals(0, props.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties_zruB0() throws Exception {
        Option option = new Option("option", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties(option);
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties1_JFSP1() throws Exception {
        Option option = new Option("option", true, "description");
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties(option);
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOptionProperties2_IBrp2() throws Exception {
        Option option = new Option("option", "description");
        CommandLine commandLine = new CommandLine();
        Properties props = commandLine.getOptionProperties(option);
        assertNotNull(props);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetArgs_tnDn0() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetDescription_RIEt1() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetArgName_WLkl2() throws Exception {
        Option option = new Option("o", "option", true, "description");
        option.setArgName("argName");
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetLongOpt_hMYU3() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertEquals("option", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetRequired_VbNw4() throws Exception {
        Option option = new Option("o", "option", true, "description");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetValue_QBJD5() throws Exception {
        Option option = new Option("o", "option", true, "description");
        option.addValue("value");
        assertEquals("value", option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionBuilder_SHCH6() throws Exception {
        Option option = Option.builder("o").hasArg().desc("description").build();
        assertEquals("o", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetOptionalArg_sFLd7() throws Exception {
        Option option = new Option("o", "option", true, "description");
        option.setOptionalArg(true);
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionEquals_MMOx8() throws Exception {
        Option option1 = new Option("o", "option", true, "description");
        Option option2 = new Option("o", "option", true, "description");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionToString_WSTL9() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertEquals("-o <argName>  description", option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetValueSeparator_rnKO11() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertEquals(0, option.getValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionHasArgs_dsfn12() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertTrue(option.hasArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetDescription_KrxC13() throws Exception {
        Option option = new Option("o", "option", true, "description");
        option.setDescription("new description");
        assertEquals("new description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetDeprecated_MelF16() throws Exception {
        Option option = new Option("o", "option", true, "description");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionHashCode_Zuhm17() throws Exception {
        Option option1 = new Option("o", "option", true, "description");
        Option option2 = new Option("o", "option", true, "description");
        assertEquals(option1.hashCode(), option2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionGetOpt_QFOy18() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertEquals("o", option.getOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionHasValueSeparator_BGvY19() throws Exception {
        Option option = new Option("o", "option", true, "description");
        assertTrue(option.hasValueSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionSetType_ABbA20() throws Exception {
        Option option = new Option("o", "option", true, "description");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_1() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals(true, option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_2() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals("description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_3() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals("argName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_4() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_5() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_6() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals(null, option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_7() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals(null, option.getConverter());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_8() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals(0, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_9() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals(null, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_10() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals(false, option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_11() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals(false, option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_12() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals(false, option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_13() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals(null, option.getValue(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOption_kIxs0_14() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        option.setArgName("argName");
        option.setRequired(true);
        assertEquals(false, option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_kmIO0() throws Exception {
        Option option = new Option("o", "option", true, "description");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithLongOption_lbEy1() throws Exception {
        Option option = new Option("o", "longOption", true, "description");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithOptionOnly_ypBw2() throws Exception {
        Option option = new Option("o", "description");
        CommandLine commandLine = new CommandLine();
        assertTrue(commandLine.hasOption(option));
    }
}