/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Collection;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    Options options;
    Option currentOption;
    DefaultParser defaultParser;
    DefaultParser defaultparser;
    String[] arguments;
    private Properties properties;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_wvhk0_1() throws Exception {
        assertEquals(0, DefaultParser.indexOfEqual("="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_wvhk0_2() throws Exception {
        assertEquals(1, DefaultParser.indexOfEqual("=a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_wvhk0_3() throws Exception {
        assertEquals(-1, DefaultParser.indexOfEqual("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_wvhk0_4() throws Exception {
        assertEquals(4, DefaultParser.indexOfEqual("abcd=efg"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_wvhk0_5() throws Exception {
        assertEquals(0, DefaultParser.indexOfEqual("=a="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_hUVZ0() throws Exception {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        try {
            CommandLine parsedCommandLine = defaultParser.parse(options, commandLine.getArgs(), new Properties());
            assertTrue(parsedCommandLine != null);
        } catch (ParseException e) {
            assertTrue(false);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_uspk3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser defaultParser = new DefaultParser();
        CommandLine commandLine = defaultParser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_UqGL2() throws Exception {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
            assertNotNull(commandLine);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_NnMI0_1() throws ParseException {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine result = defaultParser.parse(options, new String[]{"arg1", "arg2"}, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_NnMI0_2() throws ParseException {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine result = defaultParser.parse(options, new String[]{"arg1", "arg2"}, false);
        assertEquals(2, result.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_NnMI0_3() throws ParseException {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine result = defaultParser.parse(options, new String[]{"arg1", "arg2"}, false);
        assertTrue(result.getArgs()[0].equals("arg1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_NnMI0_4() throws ParseException {
        Options options = new Options();
        CommandLine commandLine = new CommandLine();
        DefaultParser defaultParser = new DefaultParser();
        CommandLine result = defaultParser.parse(options, new String[]{"arg1", "arg2"}, false);
        assertTrue(result.getArgs()[1].equals("arg2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_WithExpectedOpts_dnvv0() throws Exception {
        DefaultParser parser = new DefaultParser(false);
        parser.expectedOpts.add("option1");
        try {
            parser.checkRequiredOptions();
            fail("Expected MissingOptionException");
        } catch (MissingOptionException e) {
            assertEquals("Missing required options: [option1]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptions_WithoutExpectedOpts_PTgg1() throws Exception {
        DefaultParser parser = new DefaultParser(false);
        try {
            parser.checkRequiredOptions();
        } catch (MissingOptionException e) {
            fail("Unexpected MissingOptionException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_rXov3() throws Exception {
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(2, commandLine.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_VoXZ5() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_qGqn0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[0], new Properties(), false);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_DniM1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"arg1"}, new Properties(), false);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_DniM1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"arg1"}, new Properties(), false);
        assertEquals("arg1", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_TqIz2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"arg1", "arg2"}, new Properties(), false);
        assertEquals(2, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_TqIz2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"arg1", "arg2"}, new Properties(), false);
        assertEquals("arg1", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithTwoArguments_TqIz2_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"arg1", "arg2"}, new Properties(), false);
        assertEquals("arg2", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_tkoz0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[0], null, false);
        assertEquals(0, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_ltlu1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"arg"}, null, false);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOneArgument_ltlu1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"arg"}, null, false);
        assertEquals("arg", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_knSu2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"arg1", "arg2", "arg3"}, null, false);
        assertEquals(3, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_knSu2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"arg1", "arg2", "arg3"}, null, false);
        assertEquals("arg1", cmd.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_knSu2_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"arg1", "arg2", "arg3"}, null, false);
        assertEquals("arg2", cmd.getArgs()[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMultipleArguments_knSu2_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(new Options(), new String[]{"arg1", "arg2", "arg3"}, null, false);
        assertEquals("arg3", cmd.getArgs()[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptions_Wleg3_1() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-o", "value"}, null, false);
        assertEquals(1, cmd.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptions_Wleg3_2() throws ParseException {
        Options options = new Options();
        options.addOption("o", "option", true, "option description");
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[]{"-o", "value"}, null, false);
        assertEquals("value", cmd.getOptionValue("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_BObP0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_boJc1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_KHlX2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_spMD3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_KFDD4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_IGDg5() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_uiBs6() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions8_eykr7() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions9_ldOY8() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions10_Qkwd9() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_SqgH0() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_ofUo1_1() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals(1, matchingOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_ofUo1_2() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        List<String> matchingOptions = options.getMatchingOptions("l");
        assertEquals("longOption", matchingOptions.get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_TXwO2() throws Exception {
        Options options = new Options();
        Option option = new Option("l", "longOption", false, "description");
        options.addOption(option);
        assertEquals(option, options.getOption("l"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_jJJV3_1() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        Collection<Option> allOptions = options.getOptions();
        assertEquals(2, allOptions.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_jJJV3_2() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        Collection<Option> allOptions = options.getOptions();
        assertTrue(allOptions.contains(new Option("l", "longOption", false, "description")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_jJJV3_3() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        Collection<Option> allOptions = options.getOptions();
        assertTrue(allOptions.contains(new Option("o", "option", false, "description")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Phgk4() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("o", "option", false, "description");
        assertEquals("[l, o]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_dGMI2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"arg1", "arg2"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        try {
            CommandLine commandLine = parser.parse(options, arguments, properties, stopAtNonOption);
            assertEquals(2, commandLine.getArgs().length);
            assertEquals("arg1", commandLine.getArgs()[0]);
            assertEquals("arg2", commandLine.getArgs()[1]);
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_tsee0() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1", "-b", "value2"};
        Properties properties = new Properties();
        properties.setProperty("a", "value3");
        properties.setProperty("b", "value4");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
            fail("Parse exception occurred");
        }
        assertEquals("value3", cmd.getOptionValue("a"));
        assertEquals("value4", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithRequiredOption_fGKG1() throws Exception {
        Options options = new Options();
        options.addRequiredOption("a", "optionA", true, "description");
        String[] arguments = new String[]{"-a", "value1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
            fail("Parse exception occurred");
        }
        assertEquals("value1", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithOptionGroup_RKRu2() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("a", "optionA", true, "description"));
        group.addOption(new Option("b", "optionB", true, "description"));
        options.addOptionGroup(group);
        String[] arguments = new String[]{"-a", "value1"};
        Properties properties = new Properties();
        properties.setProperty("b", "value2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
            fail("Parse exception occurred");
        }
        assertEquals("value1", cmd.getOptionValue("a"));
        assertEquals("value2", cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPrivateMethod_lcII3() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value1"};
        Properties properties = new Properties();
        properties.setProperty("a", "value2");
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, arguments, properties, stopAtNonOption);
        } catch (ParseException e) {
            e.printStackTrace();
            fail("Parse exception occurred");
        }
        assertTrue(cmd.hasOption("a"));
        assertEquals("value2", cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_RSVu1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_YbGf2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_czqB3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a12");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_fHZs4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a123");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_juwk5() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1234");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_QSPB6() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a12345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions8_NbvB7() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a123456");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions9_ObTi8() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1234567");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions10_BNvs9() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a12345678");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions11_NKyC10() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a123456789");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions12_qFpf11() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1234567890");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions13_gTcm12() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a12345678901");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions14_ZAbW13() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a123456789012");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions15_tUQL14() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1234567890123");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions16_JjqJ15() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a12345678901234");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions17_TGYt16() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a123456789012345");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions18_HAbR17() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a1234567890123456");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions19_OaGv18() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a12345678901234567");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions20_UBdN19() throws ParseException {
        DefaultParser defaultParser = new DefaultParser();
        defaultParser.handleConcatenatedOptions("a123456789012345678");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_YNGu0() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("abc");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions2_CQNs1() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions3_mfcy2() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions4_wznS3() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions5_WzWM4() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions6_Fqjs5() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions7_LQek6() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions8_TUqn7() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions9_iJFK8() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions10_gjop9() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions11_Tbiv10() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions12_gOhW11() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k-l");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions13_zQZr12() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k-l-m");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions14_ozCo13() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k-l-m-n");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions15_lsbk14() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k-l-m-n-o");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions16_hVQP15() throws ParseException {
        DefaultParser defaultParser = new DefaultParser(true);
        defaultParser.handleConcatenatedOptions("a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_juVZ0_1() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_juVZ0_2() throws Exception {
        Options options = new Options();
        String[] arguments = new String[]{"-a", "value"};
        CommandLine commandLine = new DefaultParser().parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_1() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertNotNull(commandLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_2() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertTrue(commandLine.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_4() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("c", commandLine.getOptionValue("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_5() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("1.0", commandLine.getOptionValue("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_6() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("enum", commandLine.getOptionValue("e"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_7() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("file", commandLine.getOptionValue("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_8() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("1.0", commandLine.getOptionValue("g"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_9() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("1", commandLine.getOptionValue("h"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_10() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("1", commandLine.getOptionValue("i"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_11() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("1", commandLine.getOptionValue("j"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPartialMatching_bxJU1_12() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        options.addOption("b", "bool", false, "Boolean");
        options.addOption("c", "char", true, "Character");
        options.addOption("d", "double", true, "Double");
        options.addOption("e", "enum", true, "Enum");
        options.addOption("f", "file", true, "File");
        options.addOption("g", "float", true, "Float");
        options.addOption("h", "integer", true, "Integer");
        options.addOption("i", "long", true, "Long");
        options.addOption("j", "number", true, "Number");
        options.addOption("k", "string", true, "String");
        String[] arguments = new String[]{"-a", "value", "-b", "-c", "c", "-d", "1.0", "-e", "enum", "-f", "file", "-g", "1.0", "-h", "1", "-i", "1", "-j", "1", "-k", "value"};
        CommandLine commandLine = new DefaultParser(true).parse(options, arguments);
        assertEquals("value", commandLine.getOptionValue("k"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithMissingRequiredOption_NqIM2() throws Exception {
        Options options = new Options();
        options.addRequiredOption("a", "arg", true, "Argument");
        String[] arguments = new String[]{"-b"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("ParseException expected");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Missing required option: a"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOption_foRz3() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        String[] arguments = new String[]{"-a"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("ParseException expected");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Missing argument for option: a"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithInvalidOptionValue_iEFn4() throws Exception {
        Options options = new Options();
        options.addOption("a", "arg", true, "Argument");
        String[] arguments = new String[]{"-a", "value"};
        try {
            new DefaultParser().parse(options, arguments);
            fail("ParseException expected");
        } catch (ParseException e) {
            assertTrue(e.getMessage().contains("Invalid value for option: a"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_rizc1() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals(2, options.getMatchingOptions("l").size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_GLyQ2_1() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertNotNull(option);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_GLyQ2_2() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        Option option = options.getOption("longOption");
        assertEquals("longOption", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_xHBj3() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_IyAD4() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertEquals("[l, s]", options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_Mgnp5() throws Exception {
        Options options = new Options();
        options.addRequiredOption("l", "longOption", false, "description");
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_yZmv6() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_GnOS7() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        Options newOptions = new Options();
        newOptions.addOption("L", "longOption2", false, "description2");
        options.addOptions(newOptions);
        assertEquals(3, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_DCqz8() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longOption", false, "description"));
        group.addOption(new Option("s", "shortOption", false, "description"));
        options.addOptionGroup(group);
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_NHOK9() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        options.addOption("s", "shortOption", false, "description");
        assertTrue(options.hasShortOption("s"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithArgs_kydL10() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", true, "description");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_hFKD12() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertTrue(options.hasOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithDescription_fdJb14() throws Exception {
        Options options = new Options();
        options.addOption("l", "longOption", false, "description");
        assertEquals("description", options.getOption("longOption").getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_HLQK0() throws Exception {
        Options options = new Options();
        boolean result = options.hasLongOption("opt");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_vDeo1() throws Exception {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        Assertions.assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_ZkaN2() throws Exception {
        Options options = new Options();
        Option result = options.getOption("opt");
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_mpIU3() throws Exception {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        Assertions.assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_syYg4() throws Exception {
        Options options = new Options();
        String result = options.toString();
        Assertions.assertEquals("[]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_EoqX6() throws Exception {
        Options options = new Options();
        Option opt = new Option("opt", "longOpt", true, "description");
        options.addOption(opt);
        Assertions.assertTrue(options.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_aeRi7() throws Exception {
        Options options = new Options();
        Options options2 = new Options();
        options.addOptions(options2);
        Assertions.assertTrue(options.getOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_hVaL8() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
        Assertions.assertTrue(options.getOptionGroups().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_MjBP9() throws Exception {
        Options options = new Options();
        boolean result = options.hasShortOption("opt");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithString_WoCj11() throws Exception {
        Options options = new Options();
        options.addOption("opt", "description");
        Assertions.assertTrue(options.hasOption("opt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_hpka13() throws Exception {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        Assertions.assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_UfPN14() throws Exception {
        Options options = new Options();
        boolean result = options.hasOption("opt");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_OkgB0() throws Exception {
        Options options = new Options();
        options.hasLongOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_lvqR1() throws Exception {
        Options options = new Options();
        options.getMatchingOptions("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_SdwC2() throws Exception {
        Options options = new Options();
        options.getOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_FEkk3() throws Exception {
        Options options = new Options();
        options.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_kLps4() throws Exception {
        Options options = new Options();
        options.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_flne5() throws Exception {
        Options options = new Options();
        options.addRequiredOption("opt", "longOpt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_IEII6() throws Exception {
        Options options = new Options();
        options.addOption(new Option("opt", "longOpt", true, "description"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_ILeS7() throws Exception {
        Options options = new Options();
        Options options1 = new Options();
        options.addOptions(options1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroup_tdVi8() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        options.addOptionGroup(group);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasShortOption_gbPQ9() throws Exception {
        Options options = new Options();
        options.hasShortOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption1_XyVR10() throws Exception {
        Options options = new Options();
        options.addOption("opt", true, "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption2_aGuo11() throws Exception {
        Options options = new Options();
        options.addOption("opt", "description");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptions_bNqZ13() throws Exception {
        Options options = new Options();
        options.getRequiredOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_dQGd14() throws Exception {
        Options options = new Options();
        options.hasOption("opt");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_Jiet16() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.getArgs();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue1_DCkH17() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.getParsedOptionValue("opt", () -> null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_FbXK18() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptions();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue1_efHf19() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptionValue(new Option("opt", "longOpt", true, "description"), "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue2_Ruog20() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptionValue("opt", "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionValue3_NSkE21() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.getOptionValue("opt", () -> "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue2_iuUr22() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.getParsedOptionValue("opt", "defaultValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetParsedOptionValue3_OLvA23() throws Exception {
        CommandLine commandLine = new CommandLine();
        commandLine.getParsedOptionValue(new Option("opt", "longOpt", true, "description"), () -> null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOption_hLRI0() throws Exception {
        Options options = new Options();
        boolean result = options.hasLongOption("opt");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMatchingOptions_ffqE1() throws Exception {
        Options options = new Options();
        List<String> result = options.getMatchingOptions("opt");
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOption_nEeu2() throws Exception {
        Options options = new Options();
        Option result = options.getOption("opt");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptions_PFGp3() throws Exception {
        Options options = new Options();
        Collection<Option> result = options.getOptions();
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_NBBr4() throws Exception {
        Options options = new Options();
        String result = options.toString();
        assertEquals("[]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptions_AdoZ7() throws Exception {
        Options options = new Options();
        Options options2 = new Options();
        Options result = options.addOptions(options2);
        assertEquals(options, result);
    }
}