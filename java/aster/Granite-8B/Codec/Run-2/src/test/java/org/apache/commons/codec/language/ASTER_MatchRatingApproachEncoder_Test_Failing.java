/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MatchRatingApproachEncoder_Test_Failing {
    @Test
    @Timeout(value = 3, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing2_aUzp1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("Jane", "Doe");
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_VPQo0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("John", "Doe");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing3_haBX2_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("John", "Dan");
        assertEquals(2, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing4_AArv3_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("Jane", "Dan");
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing5_jXnU4_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("John", "Mary");
        assertEquals(4, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing6_OkIz5() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        int result = encoder.leftToRightThenRightToLeftProcessing("Jane", "Mary");
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels_GMLU0_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Apple";
        String expected = "pple";
        String actual = encoder.removeVowels(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels2_LhrO1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Orange";
        String expected = "Ong";
        String actual = encoder.removeVowels(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_1_fid1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("a", "a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_6() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcd", "dcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_8() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdef", "fedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_9() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefg", "gfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_10() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefgh", "hgfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_11() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghi", "ihgfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_12() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghij", "jihgfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_13() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijk", "kjihgfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_14() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijkl", "lkjihgfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_15() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijklm", "mlkjihgfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_16() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijklmn", "mnlkjihgfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_17() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijklmno", "nolmkjihgfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_18() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijklmnop", "opnolmkjihgfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_19() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijklmnopqrst", "stpokolmnigfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_20() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijklmnopqrstu", "tustpokolmnigfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_21() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijklmnopqrstuv", "vutstpokolmnigfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_22() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijklmnopqrstuvw", "wuvtstpokolmnigfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_23() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijklmnopqrstuvwx", "xwvutstpokolmnigfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_24() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijklmnopqrstuvwxy", "ywxvutstpokolmnigfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_25() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertTrue(encoder.isEncodeEquals("abcdefghijklmnopqrstuvwxyz", "zyxwvutstpokolmnigfedcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_29() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("abcd", "bcda"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals_weVw0_30() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isEncodeEquals("abcde", "edcba"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_LxfP0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "doubleconsonant";
        String expected = "DUBLCONSONANT";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccentsMultipleChars_hfee3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.removeAccents("");
        assertEquals("aeiou", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_UbHt0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John-Doe";
        String expected = "JOHND";
        String actual = encoder.cleanName(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanNameWithAccents_sQzV1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Jos-Prez";
        String expected = "JOSEPEREZ";
        String actual = encoder.cleanName(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowelWithNull_QQzd1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertFalse(encoder.isVowel(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFirst3Last3WithLongName_jBjt1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "JohnSmith";
        String result = encoder.getFirst3Last3(name);
        assertEquals("JohSmi", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_xsxX0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "Hello";
        Object output = encoder.encode(input);
        assertEquals("Hello", output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QYdZ0_1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(encoder.encode("John"), "o");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QYdZ0_2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(encoder.encode("Doe"), "d");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QYdZ0_3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(encoder.encode("Smith"), "s");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QYdZ0_4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(encoder.encode("Jones"), "j");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QYdZ0_5() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(encoder.encode("Brown"), "br");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QYdZ0_6() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(encoder.encode("Williams"), "w");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QYdZ0_7() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(encoder.encode("Davis"), "d");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QYdZ0_8() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(encoder.encode("Miller"), "m");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QYdZ0_9() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(encoder.encode("Wilson"), "w");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QYdZ0_10() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(encoder.encode("Taylor"), "t");
    }
}