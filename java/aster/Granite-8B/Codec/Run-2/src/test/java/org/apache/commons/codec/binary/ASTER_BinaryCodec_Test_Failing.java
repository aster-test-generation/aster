/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BinaryCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsSingleByte_KzVp1() {
        byte[] raw = new byte[]{0b010101};
        char[] expected = {'0', '0', '0', '0', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsMultipleBytes_hARE2() {
        byte[] raw = new byte[]{0b010101, 0b1010101};
        char[] expected = {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsMaxByte_bRCK5() {
        byte[] raw = new byte[]{127};
        char[] expected = {'0', '0', '0', '0', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToByteArrayWithNonEmptyInput_bFok1() {
        BinaryCodec codec = new BinaryCodec();
        String ascii = "Hello, World!";
        byte[] expected = {72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33};
        byte[] actual = codec.toByteArray(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_zpLP0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] raw = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{49, 50, 51};
        byte[] actual = codec.encode(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_vVVG0() {
        BinaryCodec binaryCodec = new BinaryCodec();
        byte[] ascii = "Hello, World!".getBytes();
        byte[] expected = {72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33};
        byte[] actual = binaryCodec.decode(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_MultipleBitSets_uXLN2() {
        byte[] raw = new byte[]{(byte) 0xFF, (byte) 0x00, (byte) 0xFF};
        byte[] expected = new byte[]{(byte) '1', (byte) '1', (byte) '1', (byte) '1', (byte) '1', (byte) '1', (byte) '1', (byte) '1', (byte) '0', (byte) '0', (byte) '0', (byte) '0', (byte) '0', (byte) '0', (byte) '0', (byte) '0', (byte) '1', (byte) '1', (byte) '1', (byte) '1', (byte) '1', (byte) '1', (byte) '1', (byte) '1', (byte) '0', (byte) '0', (byte) '0', (byte) '0', (byte) '0', (byte) '0', (byte) '0', (byte) '0'};
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_MultipleBitSets_2_hJou3() {
        byte[] raw = new byte[]{(byte) 0x55, (byte) 0xAA};
        byte[] expected = new byte[]{(byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1', (byte) '0', (byte) '1'};
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiWithSingleBitSet_FTYT1_gPrL0() {
        char[] ascii = new char[]{'1'};
        byte[] expected = new byte[]{(byte) 128};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiWithMultipleGroupsOfBitsSet_zeDj3_EvZq0() {
        char[] ascii = new char[]{'1', '1', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0'};
        byte[] expected = new byte[]{(byte) 238, (byte) 238};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiWithOddNumberOfBits_QXse4_WiWW0() {
        char[] ascii = new char[]{'1', '0', '1', '0', '1', '0', '1'};
        byte[] expected = new byte[]{(byte) 170};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharArray_mliV1_eAlU0() {
        BinaryCodec codec = new BinaryCodec();
        char[] input = new char[]{'0', '1', '1', '0'};
        byte[] expected = new byte[]{0, 1, 1, 0};
        try {
            byte[] actual = (byte[]) codec.decode(input);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_vAGA0_fid1() {
        byte[] raw = {65, 66, 67};
        String expected = "ABC";
        assertEquals(expected, BinaryCodec.toAsciiString(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsSingleByte_KzVp1_fid1() {
        byte[] raw = new byte[]{0b010101};
        char[] expected = {'0', '1', '0', '1', '0', '1', '0', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsMultipleBytes_hARE2_fid1() {
        byte[] raw = new byte[]{0b010101, 0b1010101};
        char[] expected = {'0', '1', '0', '1', '0', '1', '0', '1', '1', '0', '1', '0', '1', '0', '1', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsMaxByte_bRCK5_fid1() {
        byte[] raw = new byte[]{127};
        char[] expected = {'1', '1', '1', '1', '1', '1', '1', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiSingleBitSet_DusU1_fid1() {
        byte[] ascii = new byte[]{'1'};
        byte[] expected = new byte[]{(byte) 0x80};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleBitSets_kxWQ2_fid1() {
        byte[] ascii = new byte[]{'1', '0', '1', '1', '0', '0', '1', '0'};
        byte[] expected = new byte[]{(byte) 0xDF};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleGroups_OUNf3_fid1() {
        byte[] ascii = new byte[]{'1', '0', '1', '1', '0', '0', '1', '0', '1', '1', '0', '0', '1', '0', '1', '1'};
        byte[] expected = new byte[]{(byte) 0xDF, (byte) 0x2A};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleGroupsWithPadding_hUsy4_fid1() {
        byte[] ascii = new byte[]{'1', '0', '1', '1', '0', '0', '1', '0', '1', '1', '0', '0', '1', '0', '1', '1', '0', '0'};
        byte[] expected = new byte[]{(byte) 0xDF, (byte) 0x2A, (byte) 0x00};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleGroupsWithEmptyGroup_BxQM5_fid1() {
        byte[] ascii = new byte[]{'1', '0', '1', '1', '0', '0', '1', '0', '1', '1', '0', '0', '1', '0', '1', '1', '0', '0', '0', '0'};
        byte[] expected = new byte[]{(byte) 0xDF, (byte) 0x2A, (byte) 0x00, (byte) 0x00};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_TXkJ0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = new byte[]{0, 1, 1, 0};
        byte[] expected = new byte[]{0, 1, 1, 0};
        byte[] actual = (byte[]) codec.decode(input);
        assertEquals(expected, actual);
    }
}