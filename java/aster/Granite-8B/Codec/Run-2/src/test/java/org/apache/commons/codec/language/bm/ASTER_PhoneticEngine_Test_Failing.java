/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.Arrays;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PhoneticEngine_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRuleType_with_NameType_ASHKENAZI_and_RuleType_RULES_and_boolean_true_and_int_3_iOyw6() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true, 3);
        RuleType actualRuleType = phoneticEngine.getRuleType();
        RuleType expectedRuleType = RuleType.RULES;
        assertEquals(expectedRuleType, actualRuleType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRuleType_with_NameType_ASHKENAZI_and_RuleType_RULES_and_boolean_true_NiQt7() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true);
        RuleType actualRuleType = phoneticEngine.getRuleType();
        RuleType expectedRuleType = RuleType.RULES;
        assertEquals(expectedRuleType, actualRuleType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes2_rAbq1() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes4_PEUF3() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, false);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes6_weFU5() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes8_mBpk7() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, false);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes9_oWvJ8() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true, 10);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes10_xwsT9() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes11_tlxp10() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, false, 10);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes12_ewSE11() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, false);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_OReD0() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        String input = "John";
        String expectedOutput = "Jnh";
        String actualOutput = phoneticEngine.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_TJYl0() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true, 10);
        String input = "John";
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("en")));
        String expected = "J-H-N";
        String actual = phoneticEngine.encode(input, languageSet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_KoZj1() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true, 10);
        String input = "d'Artagnan";
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("en")));
        String expected = "(D)-A-RT-A-GN-AN";
        String actual = phoneticEngine.encode(input, languageSet);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_cUQH2() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.RULES, true, 10);
        String input = "John Smith";
        LanguageSet languageSet = LanguageSet.from(new HashSet<>(Arrays.asList("en")));
        String expected = "J-H-N-S-M-I-T-H";
        String actual = phoneticEngine.encode(input, languageSet);
        assertEquals(expected, actual);
    }
}