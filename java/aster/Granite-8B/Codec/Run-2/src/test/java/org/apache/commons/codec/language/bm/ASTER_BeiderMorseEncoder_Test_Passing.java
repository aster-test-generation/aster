/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BeiderMorseEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetnameType_mcWA0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        NameType nameType = NameType.ASHKENAZI;
        beiderMorseEncoder.setNameType(nameType);
        assertEquals(nameType, beiderMorseEncoder.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_cvSQ0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        RuleType ruleType = beiderMorseEncoder.getRuleType();
        assertNotNull(ruleType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_iySP0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        boolean result = encoder.isConcat();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameType_TbYs0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        NameType nameType = beiderMorseEncoder.getNameType();
        assertNotNull(nameType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullSource_pCfw0_CdUs0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String encoded = null;
        try {
            encoded = encoder.encode(null);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        Assertions.assertNull(encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonNullSource_gKQA1_njjB0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String source = "Hello, World!";
        String encoded = null;
        try {
            encoded = encoder.encode(source);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        Assertions.assertNotNull(encoded);
        Assertions.assertNotEquals("", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_Pxib1_GqlC0_fid2() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String input = "Hello, World! 1234567890";
        String expectedOutput = "YlYvYrlt|YlYvorlt|YlovYrlt|Ylovorlt|ilYvYrlt|ilYvorlt|ilovYrlt|ilovorlt|ilovurlt|iloworlt|xilovorlt|xilovurlt|xiloworlt";
        try {
            assertEquals(expectedOutput, encoder.encode(input));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }
}