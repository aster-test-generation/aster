/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest_Txcf0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest2_sCcO1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("ISO-8859-1"));
        assertEquals("ISO-8859-1", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest3_NOah2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-16");
        assertEquals("UTF-16", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest4_Ftov3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals(Charset.defaultCharset().name(), codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest5_xSXt4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest6_NPbe5() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("ISO-8859-1"), true);
        assertEquals("ISO-8859-1", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest8_AetT7() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), false);
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest9_hSWH8() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("ISO-8859-1"), false);
        assertEquals("ISO-8859-1", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedInputType_Dmwh3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = new Object();
        try {
            codec.decode(input);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Objects of type " + input.getClass().getName() + " cannot be quoted-printable decoded"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_tVgk0() {
        QuotedPrintableCodec qpc = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        assertEquals(Charset.forName("UTF-8"), qpc.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset2_nHZW1() {
        QuotedPrintableCodec qpc = new QuotedPrintableCodec(Charset.forName("ISO-8859-1"));
        assertEquals(Charset.forName("ISO-8859-1"), qpc.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset3_ksvS2() {
        QuotedPrintableCodec qpc = new QuotedPrintableCodec("UTF-8");
        assertEquals(Charset.forName("UTF-8"), qpc.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset4_FNMG3() {
        QuotedPrintableCodec qpc = new QuotedPrintableCodec("ISO-8859-1");
        assertEquals(Charset.forName("ISO-8859-1"), qpc.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset5_rFrY4() {
        QuotedPrintableCodec qpc = new QuotedPrintableCodec();
        assertEquals(Charset.defaultCharset(), qpc.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset6_flhC5() {
        QuotedPrintableCodec qpc = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        assertEquals(Charset.forName("UTF-8"), qpc.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset7_HGHE6() {
        QuotedPrintableCodec qpc = new QuotedPrintableCodec(Charset.forName("ISO-8859-1"), true);
        assertEquals(Charset.forName("ISO-8859-1"), qpc.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_jcAo0_1() {
        BitSet printable = null;
        byte[] bytes = new byte[]{65, 66, 67};
        boolean strict = true;
        byte[] expected = new byte[]{65, 66, 67};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        printable = null;
        bytes = new byte[]{65, 66, 67};
        strict = false;
        expected = new byte[]{65, 66, 67};
        actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull_VVcV0() {
        final byte[] bytes = null;
        final BitSet printable = null;
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull2_OLbR1() {
        final byte[] bytes = null;
        final BitSet printable = new BitSet();
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull3_PkzT2() {
        final byte[] bytes = null;
        final BitSet printable = new BitSet();
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull4_YnNw3() {
        final byte[] bytes = new byte[0];
        final BitSet printable = null;
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull5_bxWq4() {
        final byte[] bytes = new byte[0];
        final BitSet printable = new BitSet();
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull7_pOXl6() {
        final byte[] bytes = new byte[1];
        final BitSet printable = null;
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull8_qaJH7() {
        final byte[] bytes = new byte[1];
        final BitSet printable = new BitSet();
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ReWb0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String encodedStr = codec.encode(sourceStr);
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_sjws1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "Hello, !";
        String encodedStr = codec.encode(sourceStr);
        assertEquals("Hello, !", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrict_pCnX2() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello, World!";
        String encodedStr = codec.encode(sourceStr);
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndStrict_NPCp3() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "Hello, !";
        String encodedStr = codec.encode(sourceStr);
        assertEquals("Hello, !", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptySourceStr_wxEU5() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "";
        String encodedStr = codec.encode(sourceStr);
        assertEquals("", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedEncoding_INDp7() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        try {
            codec.encode("Hello World!", "UnsupportedEncoding");
            fail("UnsupportedCharsetException expected");
        } catch (UnsupportedEncodingException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_kJKQ0_hbsL0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello World!";
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World!", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_BVWq1_vUPb0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "Hello World!";
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World!", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetAndStrict_vErj2_dccn0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "Hello World!";
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World!", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_mgGo2_IQVA0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, World!";
        String encoded = null;
        try {
            encoded = codec.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello, World!", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableEmpty_MFZW1_xWNd0() {
        final byte[] bytes = new byte[0];
        try {
            final byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
            assert result.length == 0;
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableNoEscape_FRNw2_oIek0() throws DecoderException {
        final byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_8);
        final byte[] result = QuotedPrintableCodec.decodeQuotedPrintable(bytes);
        assert new String(result).equals("Hello, World!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Jbqi0_MBDN0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = "Hello World!".getBytes();
        byte[] expectedOutput = "Hello World!".getBytes();
        byte[] actualOutput = null;
        try {
            actualOutput = codec.decode(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStrict_oUuG1_zoeS0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] input = "Hello=20World!".getBytes();
        byte[] expectedOutput = "Hello World!".getBytes();
        byte[] actualOutput = null;
        try {
            actualOutput = codec.decode(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_Gylo2_zZuA0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        byte[] input = "Hello World!".getBytes(Charset.forName("UTF-8"));
        byte[] expectedOutput = "Hello World!".getBytes(Charset.forName("UTF-8"));
        byte[] actualOutput = null;
        try {
            actualOutput = codec.decode(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetAndStrict_StHI3_AraU0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        byte[] input = "Hello=20World!".getBytes(Charset.forName("UTF-8"));
        byte[] expectedOutput = "Hello World!".getBytes(Charset.forName("UTF-8"));
        byte[] actualOutput = null;
        try {
            actualOutput = codec.decode(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceStr_xTnP4_Uwci0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        String encodedStr = null;
        try {
            encodedStr = codec.encode(sourceStr);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertNull(encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictTrue_buKc0_dtKp0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String encodedString = null;
        try {
            encodedString = codec.encode("Hello World!", "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World!", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_RpvJ1_VJAs0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String encodedString = codec.encode("Hello World!", "UTF-8");
        assertEquals("Hello World!", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndStrictTrue_xmxh4_KKVd0() throws UnsupportedEncodingException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String encodedString = codec.encode("Hello World!", "UTF-8");
        assertEquals("Hello World!", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceStr_NFNp5_MiKH0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String encodedString = null;
        try {
            encodedString = codec.encode(null, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        assertNull(encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_jcAo0() {
        BitSet printable = null;
        byte[] bytes = new byte[]{65, 66, 67};
        boolean strict = true;
        byte[] expected = new byte[]{65, 66, 67};
        byte[] actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
        printable = null;
        bytes = new byte[]{65, 66, 67};
        strict = false;
        expected = new byte[]{65, 66, 67};
        actual = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertArrayEquals(expected, actual);
    }
}