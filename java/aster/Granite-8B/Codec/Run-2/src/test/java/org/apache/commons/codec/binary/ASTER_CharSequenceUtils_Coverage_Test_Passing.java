/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CharSequenceUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches1_wVXL0() {
        CharSequence cs = "abc";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "abc";
        int start = 0;
        int length = 3;
        boolean expected = true;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches2_SLHH1() {
        CharSequence cs = "abc";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "def";
        int start = 0;
        int length = 3;
        boolean expected = false;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches3_GVRk2() {
        CharSequence cs = "abc";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "a";
        int start = 0;
        int length = 1;
        boolean expected = true;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches6_iXdb5() {
        CharSequence cs = "abc";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "d";
        int start = 0;
        int length = 1;
        boolean expected = false;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches8_zlCE7() {
        CharSequence cs = "abc";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "B";
        int start = 0;
        int length = 1;
        boolean expected = false;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches9_XydS8() {
        CharSequence cs = "abc";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "C";
        int start = 0;
        int length = 1;
        boolean expected = false;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches10_PPxZ9() {
        CharSequence cs = "abc";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "D";
        int start = 0;
        int length = 1;
        boolean expected = false;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assert actual == expected;
    }
}