/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DaitchMokotoffSoundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringInput_ZBcU0_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String input = "Hello";
        String expectedOutput = "H212";
        String actualOutput = (String) dms.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithBooleanFoldingInput_gvwk1_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex(true);
        String input = "Hello";
        String expectedOutput = "H212";
        String actualOutput = (String) dms.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptySource_myVi1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.encode("");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSingleLetterSource_ZMpx2_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.encode("a");
        assertEquals("A00", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultipleLettersSource_nXAs3_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String result = dms.encode("apple");
        assertEquals("A12", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithFolding_nzEW4_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex(true);
        String result = dms.encode("apple");
        assertEquals("A20", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmptySource_KHyy1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        assertEquals("", dms.encode(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeSingleLetterSource_ZASZ2_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        assertEquals("A00", dms.encode("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeMultiLetterSource_fSSv3_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        assertEquals("A12", dms.encode("apple"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithFolding_NRYN4_fid1() {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex(true);
        assertEquals("A12", dms.encode("apple"));
    }
}