/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Test_Failing {
    private String cleanInput(String input) {
        if (input == null) {
            return null;
        }
        input = input.trim();
        if (input.isEmpty()) {
            return null;
        }
        return input.toUpperCase(java.util.Locale.ENGLISH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_kLdc0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int maxCodeLen = doubleMetaphone.getMaxCodeLen();
        assertEquals(0, maxCodeLen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt2_Aboy1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        char result = doubleMetaphone.charAt("world", 2);
        assertEquals('o', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt3_QPnr2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        char result = doubleMetaphone.charAt("java", 3);
        assertEquals('v', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_FaBe0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Hello";
        String expected = "H3L0";
        String actual = (String) doubleMetaphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_zskJ1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "World";
        String expected = "W0RL0";
        String actual = (String) doubleMetaphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_feiI2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        boolean alternate = false;
        String expected = "HLL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyInput_eolw1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates2_HxfV4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("AB", true);
        assertEquals("AB", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates3_tAdM5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ABC", true);
        assertEquals("ABC", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates4_iome6() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ABCD", true);
        assertEquals("ABCD", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates5_fIsU7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ABCDEF", true);
        assertEquals("ABCDEF", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates6_EaoC8() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ABCDEFG", true);
        assertEquals("ABCDEFG", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates7_IGgP9() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ABCDEFGH", true);
        assertEquals("ABCDEFGH", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates8_oPMS10() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ABCDEFGHI", true);
        assertEquals("ABCDEFGHI", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates9_cgYh11() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ABCDEFGHIJ", true);
        assertEquals("ABCDEFGHIJ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates10_xsIU12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ABCDEFGHIJK", true);
        assertEquals("ABCDEFGHIJK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates11_lIyJ13() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ABCDEFGHIJKL", true);
        assertEquals("ABCDEFGHIJKL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates12_ySDF14() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ABCDEFGHIJKLMN", true);
        assertEquals("ABCDEFGHIJKLMN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_MlrC1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String result = doubleMetaphone.doubleMetaphone(value, true);
        assertEquals("HLL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCleanInput_nsjK3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello World";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("HL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSlavoGermanicInput_MaOa4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Cvijet";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("KTS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStartInput_VmLh5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ANational";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("ANL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_PvBZ3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "value";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains2_DAMj1() {
        String[] criteria = {"abc", "def"};
        boolean result = DoubleMetaphone.contains("abcdef", 3, 3, criteria);
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains3_dRHR2() {
        String[] criteria = {"abc", "def"};
        boolean result = DoubleMetaphone.contains("abcdef", 0, 6, criteria);
        boolean expected = true;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDoubleMetaphone_xfQU0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        String expected = "H3L2";
        String actual = doubleMetaphone.doubleMetaphone(value);
        assertEquals(expected, actual);
    }
}