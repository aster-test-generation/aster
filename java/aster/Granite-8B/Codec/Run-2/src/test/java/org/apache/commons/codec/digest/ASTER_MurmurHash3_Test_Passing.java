/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Test_Passing {
    private static long fmix64(long hash) {
        hash ^= hash >>> 33;
        hash *= 0xff51afd7ed558ccdL;
        hash ^= hash >>> 33;
        hash *= 0xc4ceb9fe1a85ec53L;
        hash ^= hash >>> 33;
        return hash;
    }

    private static int fmix32(int hash)
    {
        hash ^= hash >>> 16;
        hash *= 0x85ebca6b;
        hash ^= hash >>> 13;
        hash *= 0xc2b2ae35;
        hash ^= hash >>> 16;
        return hash;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_VMge0_1() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_xVjj0_1() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyData_GeDP0() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        int seed = 0;
        long hash = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNegativeOffset_ovRE3() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = -1;
        int length = 5;
        try {
            MurmurHash3.hash64(data, offset, length);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithOffsetGreaterThanLength_xemo4() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 6;
        int length = 5;
        try {
            MurmurHash3.hash64(data, offset, length);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNegativeLength_ULoU5() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = -1;
        try {
            MurmurHash3.hash64(data, offset, length);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithOffsetPlusLengthGreaterThanDataLength_mJsq6() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = 6;
        try {
            MurmurHash3.hash64(data, offset, length);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_oKrz0_1() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_oKrz0_2() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_pkit0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = 5;
        int seed = 0;
        int expected = -1567508024;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_JtfC0_fid1() {
        long hash = MurmurHash3.hash64(1234567890L);
        assertEquals(-286461308899903857L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_SMKq0_1_fid1() {
        byte[] data = new byte[16];
        for (int i = 0; i < 16; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128(data, 0, 16, 0);
        assertEquals(4920504430128807728L, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_SMKq0_2_fid1() {
        byte[] data = new byte[16];
        for (int i = 0; i < 16; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128(data, 0, 16, 0);
        assertEquals(-6084252774064723899L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_fhYS0_fid1() {
        byte[] data = new byte[8];
        int offset = 0;
        int length = 8;
        int seed = 0;
        long hash = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(9135616379521106945L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithOffset_OtXg1_fid1() {
        byte[] data = new byte[16];
        int offset = 8;
        int length = 8;
        int seed = 0;
        long hash = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(9135616379521106945L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_TeEr0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = 5;
        long expected = 4922444149315819138L;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_Tsnl1_fid1() {
        byte[] data = new byte[4];
        int offset = 0;
        int length = 4;
        int seed = 1;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(2028806445, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_2_fid1() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(-1508236611, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_BMBD0_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 0;
        int hash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(hash, 539065883);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_MLUe0_fid1() {
        int hash = MurmurHash3.hash32(1234567890L, 9876543210L, 0);
        assertEquals(-1816695074, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_oKrz0() {
        byte[] data = new byte[10];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertNotNull(result);
        assertEquals(2, result.length);
    }
}