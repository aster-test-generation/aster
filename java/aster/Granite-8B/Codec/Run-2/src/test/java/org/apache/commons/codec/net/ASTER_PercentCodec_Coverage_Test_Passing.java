/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullObject_dSeC0() throws org.apache.commons.codec.DecoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object result = percentCodec.decode(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayObject_MBzp1() throws org.apache.commons.codec.DecoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[10];
        Object result = percentCodec.decode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithDecoderException_piBx3() throws org.apache.commons.codec.DecoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object input = new Object();
        try {
            percentCodec.decode(input);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullObject_BJGM0() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object encodedObject = percentCodec.encode(null);
        assert encodedObject == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArrayObject_mhkK1() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] inputByteArray = new byte[]{1, 2, 3};
        Object encodedObject = percentCodec.encode(inputByteArray);
        assert encodedObject != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonByteArrayObject_YXFN2() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object inputObject = new Object();
        try {
            percentCodec.encode(inputObject);
        } catch (EncoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonAsciiChar_smuZ0() throws EncoderException {
        byte[] bytes = {(byte) 0x80};
        byte[] expected = {(byte) 0x25, (byte) 0x38, (byte) 0x30};
        byte[] actual = new PercentCodec().encode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChar_UdCS1() throws EncoderException {
        byte[] bytes = {(byte) 0x2B};
        byte[] expected = {(byte) 0x25, (byte) 0x32, (byte) 0x42};
        byte[] actual = new PercentCodec(new byte[]{(byte) 0x2B}, true).encode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpaceChar_fAeq3() throws EncoderException {
        byte[] bytes = {(byte) 0x20};
        byte[] expected = {(byte) 0x2B};
        byte[] actual = new PercentCodec(null, true).encode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_hKyL0() throws org.apache.commons.codec.EncoderException {
        byte[] bytes = new byte[]{-128};
        PercentCodec percentCodec = new PercentCodec();
        byte[] encodedBytes = percentCodec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeChars_hTLi2() throws org.apache.commons.codec.EncoderException {
        byte[] bytes = new byte[]{65};
        PercentCodec percentCodec = new PercentCodec(new byte[]{65}, true);
        byte[] encodedBytes = percentCodec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_APWX3() throws org.apache.commons.codec.EncoderException {
        byte[] bytes = new byte[]{32};
        PercentCodec percentCodec = new PercentCodec();
        byte[] encodedBytes = percentCodec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithAlwaysEncodeCharsAndPlusForSpace_sscu4() throws org.apache.commons.codec.EncoderException {
        byte[] bytes = new byte[]{65, 32};
        PercentCodec percentCodec = new PercentCodec(new byte[]{65}, true);
        byte[] encodedBytes = percentCodec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_FPqa3() throws org.apache.commons.codec.EncoderException {
        byte[] bytes = {'a', 'b', ' '};
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(bytes);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_dlov4() throws org.apache.commons.codec.EncoderException {
        byte[] bytes = {'a', 'b', 'c'};
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(bytes);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_iiRD5() throws org.apache.commons.codec.EncoderException {
        byte[] bytes = {};
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(bytes);
        assert result != null;
    }
}