/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullInput_VCXt3() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        String str = null;
        String expected = "decoded text";
        String actual = qCodec.decode(str);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithSpace_fdsf0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{(byte) 32};
        byte[] data = qCodec.doEncoding(bytes);
        for (int i = 0; i < data.length; i++) {
            if (data[i] == 32) {
                data[i] = 95;
            }
        }
        assertArrayEquals(new byte[]{95}, data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_eVOl0() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        Object result = codec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedType_uOzH3() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        Object input = new Object();
        try {
            codec.decode(input);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_jaUX0() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        Object encoded = codec.encode(null);
        assertNull(encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_ZZCc1() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        String input = "Hello, World!";
        Object encoded = codec.encode(input);
        assertNotNull(encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonString_OfNN2() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        Object input = new Object();
        try {
            codec.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("Objects of type " + input.getClass().getName() + " cannot be encoded using Q codec"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoderException_TACy1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "sourceStr";
        String sourceCharset = "sourceCharset";
        try {
            qCodec.encode(sourceStr, sourceCharset);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesNull_snWv0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doDecoding(null);
        byte[] expected = null;
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesNoUnderscores_OKik1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] result = qCodec.doDecoding(bytes);
        byte[] expected = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesHasUnderscores_zEbS2() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = {'_', '_', '_', '_', '_', '_', '_', '_', '_', '_'};
        byte[] result = qCodec.doDecoding(bytes);
        byte[] expected = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesHasUnderscoresAndSpaces_aAhr3() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = {'_', ' ', '_', ' ', '_', ' ', '_', ' ', '_', ' '};
        byte[] result = qCodec.doDecoding(bytes);
        byte[] expected = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesHasSpacesAndNoUnderscores_jVWy5() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
        byte[] result = qCodec.doDecoding(bytes);
        byte[] expected = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesHasSpacesAndUnderscores_qcak6() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = {' ', '_', ' ', '_', ' ', '_', ' ', '_', ' ', '_'};
        byte[] result = qCodec.doDecoding(bytes);
        byte[] expected = {32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
        assertArrayEquals(expected, result);
    }
}