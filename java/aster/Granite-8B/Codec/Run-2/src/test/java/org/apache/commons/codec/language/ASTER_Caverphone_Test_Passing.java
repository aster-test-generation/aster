/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Caverphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_NnfV0() {
        Caverphone caverphone = new Caverphone();
        String str1 = "Hello";
        String str2 = "Helo";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual2_wPwM1() {
        Caverphone caverphone = new Caverphone();
        String str1 = "World";
        String str2 = "Werld";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual3_aMTl2() {
        Caverphone caverphone = new Caverphone();
        String str1 = "Java";
        String str2 = "Jova";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual6_pogB5() {
        Caverphone caverphone = new Caverphone();
        String str1 = "TestCase";
        String str2 = "TestCase";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual4_EmdU3_fid1() {
        Caverphone caverphone = new Caverphone();
        String str1 = "Programming";
        String str2 = "Progamming";
        boolean expected = false;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual5_gtdq4_fid1() {
        Caverphone caverphone = new Caverphone();
        String str1 = "Test";
        String str2 = "Set";
        boolean expected = false;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual7_kxzt6_fid1() {
        Caverphone caverphone = new Caverphone();
        String str1 = "TestCase";
        String str2 = "TestCase1";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual8_DwcY7_fid1() {
        Caverphone caverphone = new Caverphone();
        String str1 = "TestCase";
        String str2 = "TestCase2";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual9_CSQj8_fid1() {
        Caverphone caverphone = new Caverphone();
        String str1 = "TestCase";
        String str2 = "TestCase3";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual10_SGaA9_fid1() {
        Caverphone caverphone = new Caverphone();
        String str1 = "TestCase";
        String str2 = "TestCase4";
        boolean expected = true;
        boolean actual = caverphone.isCaverphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_lTrH0_fid1() {
        Caverphone caverphone = new Caverphone();
        String source = "Hello";
        String expected = "ALA1111111";
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_uXlp0_fid1() throws EncoderException {
        Caverphone caverphone = new Caverphone();
        String input = "Hello";
        String expectedOutput = "ALA1111111";
        assertEquals(expectedOutput, caverphone.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_cnpH1_fid1() throws EncoderException {
        Caverphone caverphone = new Caverphone();
        String input = "Hello, World!";
        String expectedOutput = "ALWT111111";
        assertEquals(expectedOutput, caverphone.encode(input));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_GPjA0_fid1() {
        Caverphone caverphone = new Caverphone();
        String input = "Hello";
        String expectedOutput = "ALA1111111";
        String actualOutput = caverphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }
}