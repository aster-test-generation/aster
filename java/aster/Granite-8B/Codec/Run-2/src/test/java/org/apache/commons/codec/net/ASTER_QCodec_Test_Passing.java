/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetEncoding_jZoq0() {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals("Q", qCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedType_Pqzl2() {
        QCodec qCodec = new QCodec();
        Object input = new Object();
        try {
            qCodec.decode(input);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Objects of type " + input.getClass().getName() + " cannot be decoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullBytes_ZcVZ0() {
        QCodec qCodec = new QCodec();
        byte[] bytes = null;
        byte[] result = qCodec.doEncoding(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEmptyBytes_fujq1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[0];
        byte[] result = qCodec.doEncoding(bytes);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonEmptyBytes_gOSO2_1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertNotSame(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEncodeBlanksTrue_IBvs3_1() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[]{32};
        byte[] result = qCodec.doEncoding(bytes);
        assertNotSame(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEncodeBlanksTrue_IBvs3_2() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[]{32};
        byte[] result = qCodec.doEncoding(bytes);
        assertArrayEquals(new byte[]{95}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEncodeBlanksFalse_xZDP4_1() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        byte[] bytes = new byte[]{32};
        byte[] result = qCodec.doEncoding(bytes);
        assertNotSame(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEncodeBlanksFalse_xZDP4_2() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        byte[] bytes = new byte[]{32};
        byte[] result = qCodec.doEncoding(bytes);
        assertArrayEquals(new byte[]{32}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithCharset_EQYl5_1() {
        QCodec qCodec = new QCodec("UTF-8");
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertNotSame(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedObject_piuu2() {
        QCodec qCodec = new QCodec();
        Object input = new Object();
        try {
            qCodec.encode(input);
            Assertions.fail("EncoderException expected");
        } catch (EncoderException e) {
            Assertions.assertEquals("Objects of type " + input.getClass().getName() + " cannot be encoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks2_LVkl1() {
        QCodec qCodec = new QCodec("ISO-8859-1");
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_CZgj0_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks3_GqlY2_fid1() {
        QCodec qCodec = new QCodec();
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_lHQE0_Ocyk0_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        String decodedString = null;
        try {
            decodedString = qCodec.decode("encodedString");
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertNull(decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_olze1_iMEs0_fid1() {
        QCodec qCodec = new QCodec();
        String input = "Hello, World!";
        String encoded = null;
        try {
            encoded = qCodec.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEncodeBlanksTrue_IBvs3() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[]{32};
        byte[] result = qCodec.doEncoding(bytes);
        assertNotSame(bytes, result);
        assertArrayEquals(new byte[]{95}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEncodeBlanksFalse_xZDP4() {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        byte[] bytes = new byte[]{32};
        byte[] result = qCodec.doEncoding(bytes);
        assertNotSame(bytes, result);
        assertArrayEquals(new byte[]{32}, result);
    }
}