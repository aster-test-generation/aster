/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeText_KVwV0() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "example";
        String expected = "decoded text";
        String actual = bCodec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithIllegalArgumentException_Yiwl2() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = null;
        try {
            bCodec.decode(value);
            fail("Expected IllegalArgumentException");
        } catch (DecoderException e) {
            assertTrue(e.getCause() instanceof IllegalArgumentException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_QlPL0() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "test";
        String expected = "test";
        String actual = bCodec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_SQOg2() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        Object input = new Object();
        Object encodedValue = bCodec.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithUnsupportedEncodingException_CNSx1_fid2() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "example";
        try {
            bCodec.decode(value);
            fail("Expected UnsupportedEncodingException");
        } catch (DecoderException e) {
            assertTrue(e.getCause() instanceof UnsupportedEncodingException);
        }
    }
}