/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_tMcW1() {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{1, 2, 3};
        Object encoded = urlCodec.encode(input);
        assertEquals("[37, 48, 49, 37, 48, 50, 37, 48, 51]", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_NonUrlSafeInput_Iibi3() {
        final byte[] input = new byte[]{'a', 'b', 'c', ' '};
        final byte[] expected = new byte[]{'%', '2', '0'};
        final byte[] actual = URLCodec.encodeUrl(null, input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetEncoding2_cOcF1_fid1() {
        URLCodec urlCodec = new URLCodec();
        assertEquals(null, urlCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_NoCharsetSet_vEqb1_fid1() {
        URLCodec urlCodec = new URLCodec();
        assertEquals(null, urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_tMcW1_fid1() {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{1, 2, 3};
        Object encoded = urlCodec.encode(input);
        assertEquals("AQID", encoded);
    }
}