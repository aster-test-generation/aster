/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ColognePhonetic_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_1() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("E"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_3() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("I"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_4() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("O"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_5() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("U"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_6() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("Y"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_7() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("1", colognePhonetic.colognePhonetic("B"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_8() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("1", colognePhonetic.colognePhonetic("P"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_9() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("2", colognePhonetic.colognePhonetic("D"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_10() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("2", colognePhonetic.colognePhonetic("T"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_11() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("3", colognePhonetic.colognePhonetic("F"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_13() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("3", colognePhonetic.colognePhonetic("V"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_14() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("3", colognePhonetic.colognePhonetic("W"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_15() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("4", colognePhonetic.colognePhonetic("G"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_16() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("4", colognePhonetic.colognePhonetic("K"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_17() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("4", colognePhonetic.colognePhonetic("Q"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_18() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("48", colognePhonetic.colognePhonetic("X"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_19() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("8", colognePhonetic.colognePhonetic("S"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_20() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("8", colognePhonetic.colognePhonetic("Z"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_21() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("8", colognePhonetic.colognePhonetic("C"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_23() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("7", colognePhonetic.colognePhonetic("R"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_24() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("5", colognePhonetic.colognePhonetic("L"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_25() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("6", colognePhonetic.colognePhonetic("M"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_26() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("6", colognePhonetic.colognePhonetic("N"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_27() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("", colognePhonetic.colognePhonetic("H"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsEncodeEqual_tBWj0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertTrue(colognePhonetic.isEncodeEqual("Hello", "Hillo"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_WaYN0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String input = "Hello";
        String expectedOutput = "05";
        String actualOutput = colognePhonetic.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_USFg1() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String input = "Hello, World!";
        String expectedOutput = "053752";
        String actualOutput = colognePhonetic.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_zxCZ0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "Hello";
        String expected = "05";
        String actual = colognePhonetic.encode(text);
        assertEquals(expected, actual);
    }
}