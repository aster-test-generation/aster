/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ColognePhonetic_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_12_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("3", colognePhonetic.colognePhonetic("P"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_18_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("4", colognePhonetic.colognePhonetic("X"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhonetic_TAmH0_22_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("8", colognePhonetic.colognePhonetic("X"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_WaYN0_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String input = "Hello";
        String expectedOutput = "H3ll0";
        String actualOutput = colognePhonetic.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_USFg1_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String input = "Hello, World!";
        String expectedOutput = "H3ll0, W0rld!";
        String actualOutput = colognePhonetic.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_zxCZ0_fid2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String text = "Hello";
        String expected = "H2L2";
        String actual = colognePhonetic.encode(text);
        assertEquals(expected, actual);
    }
}