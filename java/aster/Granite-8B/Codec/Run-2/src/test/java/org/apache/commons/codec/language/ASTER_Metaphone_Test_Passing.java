/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Metaphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone_krKE0() {
        Metaphone metaphone = new Metaphone();
        String txt = "Hello";
        String expected = "HL";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone2_Lxll1() {
        Metaphone metaphone = new Metaphone();
        String txt = "World";
        String expected = "WRLT";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone3_MiwA2() {
        Metaphone metaphone = new Metaphone();
        String txt = "Programming";
        String expected = "PRKR";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone4_CjIg3() {
        Metaphone metaphone = new Metaphone();
        String txt = "Java";
        String expected = "JF";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMetaphone5_QnVu4() {
        Metaphone metaphone = new Metaphone();
        String txt = "Python";
        String expected = "P0N";
        String actual = metaphone.metaphone(txt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_UBfk0() {
        Metaphone metaphone = new Metaphone();
        metaphone.setMaxCodeLen(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_rAFX0() {
        Metaphone metaphone = new Metaphone();
        int actualMaxCodeLen = metaphone.getMaxCodeLen();
        int expectedMaxCodeLen = 4; // Replace with the expected value
        assertEquals(expectedMaxCodeLen, actualMaxCodeLen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_LYQE0() {
        Metaphone metaphone = new Metaphone();
        String str1 = "Hello";
        String str2 = "Hillo";
        assertTrue(metaphone.isMetaphoneEqual(str1, str2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_tScR0() {
        Metaphone metaphone = new Metaphone();
        String input = "Hello";
        String expectedOutput = "HL";
        String actualOutput = metaphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacter_WLBi1() {
        Metaphone metaphone = new Metaphone();
        String input = "Hello!";
        String expectedOutput = "HL";
        String actualOutput = metaphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_uhdP0() {
        Metaphone metaphone = new Metaphone();
        String input = "hello";
        String expected = "HL";
        String actual = metaphone.encode(input);
        assertEquals(expected, actual);
    }
}