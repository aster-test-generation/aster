/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash2_Test_Failing {
    private static int getLittleEndianInt(final byte[] data, final int index) {
        return data[index] & 0xff | (data[index + 1] & 0xff) << 8 | (data[index + 2] & 0xff) << 16 | (data[index + 3] & 0xff) << 24;
    }

    private static long getLittleEndianLong(final byte[] data, final int index) {
        return (long) data[index] & 0xff | ((long) data[index + 1] & 0xff) << 8 | ((long) data[index + 2] & 0xff) << 16 | ((long) data[index + 3] & 0xff) << 24 | ((long) data[index + 4] & 0xff) << 32 | ((long) data[index + 5] & 0xff) << 40 | ((long) data[index + 6] & 0xff) << 48 | ((long) data[index + 7] & 0xff) << 56;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNegativeLength_Afto4() {
        byte[] data = new byte[10];
        long hash = MurmurHash2.hash64(data, -1, 0xe17a1465);
        assertEquals(hash, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithLengthGreaterThanDataLength_PMLI5() {
        byte[] data = new byte[10];
        long hash = MurmurHash2.hash64(data, 11, 0xe17a1465);
        assertEquals(hash, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_NNcQ0() {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        int length = 10;
        int seed = 0x9747b28c;
        int expected = 0x550e5a07;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_LaFt0_fid1() {
        byte[] data = new byte[10];
        long hash = MurmurHash2.hash64(data, 10, 0xe17a1465);
        assertEquals(hash, 1234567890L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyData_MhMB2() {
        byte[] data = new byte[0];
        long hash = MurmurHash2.hash64(data, 0, 0xe17a1465);
        assertEquals(hash, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_DlQD0_fid1() {
        assertEquals(123456789, MurmurHash2.hash32("hello", 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_uiTx0_fid1() {
        byte[] data = new byte[]{0, 1, 2, 3};
        int length = 4;
        int seed = 0;
        int expected = 16777619;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSeed_DoGG1_fid1() {
        byte[] data = new byte[]{0, 1, 2, 3};
        int length = 4;
        int seed = 123456789;
        int expected = -164053153;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_CUZe0_fid1() {
        String text = "Hello, World!";
        int from = 0;
        int length = text.length();
        long expected = 1422435424578576313L;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_sywK0_fid1() {
        String text = "Hello, World!";
        byte[] bytes = StringUtils.getBytesUtf8(text);
        long expected = 1504536323850132161L;
        long actual = MurmurHash2.hash64(bytes, bytes.length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xZSH0_fid1() {
        String text = "Hello, World!";
        int expected = 165909022;
        int actual = MurmurHash2.hash32(text);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithSeed_thfi1_fid1() {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7};
        int length = 8;
        int seed = 123456789;
        long expected = -805645689175571821L;
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }
}