/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Rule_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_mjIc0_1() {
        LanguageSet langSet = LanguageSet.from(new HashSet<>(Arrays.asList("en")));
        List<Rule> rules = Rule.getInstance(NameType.ASHKENAZI, RuleType.APPROX, langSet);
        assertNotNull(rules);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_mjIc0_2() {
        LanguageSet langSet = LanguageSet.from(new HashSet<>(Arrays.asList("en")));
        List<Rule> rules = Rule.getInstance(NameType.ASHKENAZI, RuleType.APPROX, langSet);
        assertTrue(rules.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNameTypeASHKENAZI_dRHa2() {
        NameType nameType = NameType.ASHKENAZI;
        assertEquals("ASHKENAZI", nameType.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNameTypeGENERIC_cPCV3() {
        NameType nameType = NameType.GENERIC;
        assertEquals("GENERIC", nameType.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNameTypeSEPHARDIC_vHdM4() {
        NameType nameType = NameType.SEPHARDIC;
        assertEquals("SEPHARDIC", nameType.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRuleTypeAPPROX_UoIY5() {
        RuleType ruleType = RuleType.APPROX;
        assertEquals("APPROX", ruleType.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRuleTypeEXACT_qhhY6() {
        RuleType ruleType = RuleType.EXACT;
        assertEquals("EXACT", ruleType.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRuleTypeRULES_WeUp7() {
        RuleType ruleType = RuleType.RULES;
        assertEquals("RULES", ruleType.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_mjIc0() {
        LanguageSet langSet = LanguageSet.from(new HashSet<>(Arrays.asList("en")));
        List<Rule> rules = Rule.getInstance(NameType.ASHKENAZI, RuleType.APPROX, langSet);
        assertNotNull(rules);
        assertTrue(rules.size() > 0);
    }
}