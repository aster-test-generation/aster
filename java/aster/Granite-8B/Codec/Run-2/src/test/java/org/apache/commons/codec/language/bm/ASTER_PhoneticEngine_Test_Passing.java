/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PhoneticEngine_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLang_nFaF0() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        Lang lang = phoneticEngine.getLang();
        assertNotNull(lang);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRuleType_with_NameType_ASHKENAZI_and_RuleType_APPROX_and_boolean_true_and_int_3_Sdwm0() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 3);
        RuleType actualRuleType = phoneticEngine.getRuleType();
        RuleType expectedRuleType = RuleType.APPROX;
        assertEquals(expectedRuleType, actualRuleType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRuleType_with_NameType_ASHKENAZI_and_RuleType_APPROX_and_boolean_true_MzNO1() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true);
        RuleType actualRuleType = phoneticEngine.getRuleType();
        RuleType expectedRuleType = RuleType.APPROX;
        assertEquals(expectedRuleType, actualRuleType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRuleType_with_NameType_ASHKENAZI_and_RuleType_EXACT_and_boolean_true_and_int_3_RzlN3() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 3);
        RuleType actualRuleType = phoneticEngine.getRuleType();
        RuleType expectedRuleType = RuleType.EXACT;
        assertEquals(expectedRuleType, actualRuleType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRuleType_with_NameType_ASHKENAZI_and_RuleType_EXACT_and_boolean_true_EuRo4() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true);
        RuleType actualRuleType = phoneticEngine.getRuleType();
        RuleType expectedRuleType = RuleType.EXACT;
        assertEquals(expectedRuleType, actualRuleType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes_MJqo0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes3_FTue2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, false, 10);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes5_FWPL4() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true, 10);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes7_pyXd6() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, false, 10);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(10, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_nzWs0() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 5);
        boolean result = engine.isConcat();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat2_QvwC1() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, false, 5);
        boolean result = engine.isConcat();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat3_kalB2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        boolean result = engine.isConcat();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat4_KgJu3() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, false, 10);
        boolean result = engine.isConcat();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameType_eQuc0() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 5);
        assertEquals(NameType.ASHKENAZI, phoneticEngine.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes2_rAbq1_fid2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(20, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes4_PEUF3_fid2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, false);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(20, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes6_weFU5_fid2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, true);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(20, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxPhonemes8_mBpk7_fid2() {
        PhoneticEngine engine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.EXACT, false);
        int maxPhonemes = engine.getMaxPhonemes();
        assertEquals(20, maxPhonemes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_OReD0_fid2() {
        PhoneticEngine phoneticEngine = new PhoneticEngine(NameType.ASHKENAZI, RuleType.APPROX, true, 10);
        String input = "John";
        String expectedOutput = "ion";
        String actualOutput = phoneticEngine.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }
}