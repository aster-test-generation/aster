/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_ayRx3_OESi0() {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = new byte[]{32};
        byte[] result = null;
        try {
            result = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assert result.length == 3;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncoding_NYkb2_sGyx0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25};
        byte[] result = null;
        try {
            result = percentCodec.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_dwsJ3_gPOu0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32}, true);
        byte[] bytes = new byte[]{32};
        byte[] expected = new byte[]{43};
        byte[] actual = null;
        try {
            actual = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_YCzI0_nXxQ0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0xFF};
        byte[] expected = new byte[]{(byte) 0xFF};
        try {
            assert Arrays.equals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode4_ngtM3_xSDk0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x20};
        byte[] expected = new byte[]{(byte) 0x25, (byte) 0x32, (byte) 0x30};
        try {
            assert Arrays.equals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode6_HvqS5_JAEO0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x80};
        byte[] expected = new byte[]{(byte) 0xC2, (byte) 0x80};
        try {
            assert Arrays.equals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBytes_bBCh0_XtTG0() {
        byte[] bytes = new byte[]{127, -1, 32};
        PercentCodec percentCodec = new PercentCodec();
        byte[] encodedBytes = null;
        try {
            encodedBytes = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        byte[] expectedBytes = new byte[]{127, -1, 32};
        assertArrayEquals(expectedBytes, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBytesWithAlwaysEncodeChars_OzgN1_nBMr0() {
        byte[] alwaysEncodeChars = new byte[]{33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126};
        byte[] bytes = new byte[]{33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126};
        PercentCodec percentCodec = new PercentCodec(alwaysEncodeChars, false);
        byte[] expectedBytes = new byte[]{33, 35, 36, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 62, 63, 64, 91, 92, 93, 94, 96, 123, 124, 125, 126};
        try {
            byte[] encodedBytes = percentCodec.encode(bytes);
            assertArrayEquals(expectedBytes, encodedBytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBytes_fLJN0_KqVJ0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] encodedBytes = null;
        try {
            encodedBytes = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(new byte[]{37, 33, 33, 37, 32, 32, 37, 33}, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBytesWithPlusForSpace_mkJu2_xrCz0_fid1() {
        byte[] bytes = new byte[]{' ', 32};
        PercentCodec percentCodec = new PercentCodec(null, true);
        byte[] encodedBytes = null;
        try {
            encodedBytes = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        byte[] expectedBytes = new byte[]{43, 32};
        assertArrayEquals(expectedBytes, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_VsNm0_DoVR0() {
        PercentCodec codec = new PercentCodec();
        byte[] result = null;
        try {
            result = codec.decode(null);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(new byte[0], result);
    }
}