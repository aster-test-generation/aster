/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_lotg0() {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64String);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLength_HfaA1() {
        String base64String = "SGVsbG8g\nV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64String);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineSeparator_SKbV2() {
        String base64String = "SGVsbG8g\r\nV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64String);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger5_AwtB4() {
        byte[] input = new byte[]{-128, 127, -1, 1};
        BigInteger expected = new BigInteger("86646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594257ffffffffffe6646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594256646241390972597621430003156899594251", 16);
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes1_tdmn0() {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] expected = {-85, -56, 106, -110, 114, -106, 118, -102};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes2_mfKL1() {
        BigInteger bigInt = new BigInteger("-12345678901234567890");
        byte[] expected = {84, 56, -106, 110, -114, 106, -118, 102};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes3_BYmH2() {
        BigInteger bigInt = new BigInteger("0");
        byte[] expected = {0};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes5_Nhmw4() {
        BigInteger bigInt = new BigInteger("-1");
        byte[] expected = {-1};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes9_BXTN8() {
        BigInteger bigInt = new BigInteger("-129");
        byte[] expected = {-1, -127};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes13_iyyV12() {
        BigInteger bigInt = new BigInteger("-32769");
        byte[] expected = {-1, -127, -1};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_LineLength100_NoLineSeparator_RaaB5() {
        Base64 base64 = new Base64(100);
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[0], lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_wGQd0() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = "AQIDBAUGBwgJCgsMDQ4PEA==".getBytes();
        byte[] actual = Base64.encodeBase64Chunked(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeBase64_sAPh0() {
        byte[] binaryData = {65, 66, 67};
        byte[] expectedResult = {65, 66, 67};
        byte[] actualResult = Base64.encodeBase64(binaryData);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_yFlc0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] expected = "AQID".getBytes();
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_uLGY0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = true;
        byte[] expected = new byte[]{65, 66, 67}; // Replace with actual encoded bytes
        byte[] actual = Base64.encodeBase64(binaryData, isChunked);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_tHfA0() {
        byte[] base64Data = "SGVsbG8gV29ybGQh".getBytes();
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64Data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLength_WSzX1() {
        byte[] base64Data = "SGVsbG8g\nV29ybGQh".getBytes();
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64Data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineSeparator_dugX2() {
        byte[] base64Data = "SGVsbG8g\r\nV29ybGQh".getBytes();
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64Data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithInvalidData_aNzQ5() {
        byte[] base64Data = "SGVsbG8g\r\nV29ybGQ!".getBytes();
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64Data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_0_atrP0() {
        Base64 base64 = new Base64(0, null, false, null);
        boolean result = base64.isInAlphabet((byte) 65);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_1_NRpo1() {
        Base64 base64 = new Base64(0, null, false, null);
        boolean result = base64.isInAlphabet((byte) 0);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_2_mqQZ2() {
        Base64 base64 = new Base64(0, null, false, null);
        boolean result = base64.isInAlphabet((byte) -1);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_3_DhxH3() {
        Base64 base64 = new Base64(0, null, false, null);
        boolean result = base64.isInAlphabet((byte) 127);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithNullInput_FCMP3() {
        byte[] arrayOctet = null;
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_EpNx0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] expectedResult = new byte[]{81, 66};
        byte[] actualResult = Base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeWithLineLength_ztgj1() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] expectedResult = new byte[]{81, 66};
        Base64 base64 = new Base64(10);
        byte[] actualResult = base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeWithLineSeparator_kULJ2() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] expectedResult = new byte[]{81, 66};
        Base64 base64 = new Base64(10, new byte[]{10});
        byte[] actualResult = base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeWithUrlSafe_dqTu3() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] expectedResult = new byte[]{81, 66};
        Base64 base64 = new Base64(true);
        byte[] actualResult = base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeWithAllParameters_oERx5() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] expectedResult = new byte[]{81, 66};
        Base64 base64 = new Base64(10, new byte[]{10}, true, CodecPolicy.LENIENT);
        byte[] actualResult = base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger3_sQKm2_iQHT79228162514264337593543950335() {
        byte[] input = new byte[]{(byte) 255, (byte) 254, (byte) 253, (byte) 252};
        BigInteger expected = new BigInteger("ffffffffffffffffffffffff", 16);
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes8_XJMI7_BZzF0() {
        BigInteger bigInt = new BigInteger("128");
        byte[] expected = {(byte) 0, (byte) 128};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes12_coQo11_CxVm0() {
        BigInteger bigInt = new BigInteger("32768");
        byte[] expected = {(byte) 0, (byte) 0, (byte) 128};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger2_BkNI1_fid2() {
        byte[] input = new byte[]{1, 2, 3, 4};
        BigInteger expected = new BigInteger("000000000000000000000000000001", 16);
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger4_ZIMN3() {
        byte[] input = new byte[]{127, -128, 0, 1};
        BigInteger expected = new BigInteger("7fff80000000000000000000000001", 16);
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger5_AwtB4_fid2() {
        byte[] input = new byte[]{-128, 127, -1, 1};
        BigInteger expected = new BigInteger("80007ffffffffffe00000000000001", 16);
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger6_hDYI5() {
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
        BigInteger expected = new BigInteger("000102030405060708090a0b0c0d10", 16);
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger7_tIrD6() {
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};
        BigInteger expected = new BigInteger("000102030405060708090a0b0c0d10", 16);
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInteger8_KwBT7() {
        byte[] input = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18};
        BigInteger expected = new BigInteger("000102030405060708090a0b0c0d10", 16);
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_WLdw0_fid2() {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        String expected = "AQIDBAUGBwgJCgsMDQ4PEA==";
        String actual = Base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes1_tdmn0_fid2() {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] expected = {52, -56, 106, -110, 114, -106, 118, -102};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes2_mfKL1_fid2() {
        BigInteger bigInt = new BigInteger("-12345678901234567890");
        byte[] expected = {-52, 56, -106, 110, -114, 106, -118, 102};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_StrictPolicy_NoLineSeparator_IVMW0() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.STRICT);
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[0], lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_LenientPolicy_NoLineSeparator_KIVX1() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.LENIENT);
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[0], lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_UrlSafe_NoLineSeparator_GwNs2() {
        Base64 base64 = new Base64(0, null, true);
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[0], lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_NoLineSeparator_zLvc3() {
        Base64 base64 = new Base64(0, null);
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[0], lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_LineLength0_NoLineSeparator_AfME4() {
        Base64 base64 = new Base64(0);
        byte[] lineSeparator = base64.getLineSeparator();
        assertArrayEquals(new byte[0], lineSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_1_NRpo1_fid2() {
        Base64 base64 = new Base64(0, null, false, null);
        boolean result = base64.isInAlphabet((byte) 0);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_2_mqQZ2_fid2() {
        Base64 base64 = new Base64(0, null, false, null);
        boolean result = base64.isInAlphabet((byte) -1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_FbFX0_fid2() {
        byte[] arrayOctet = new byte[10];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithEmptyInput_rmTA2_fid2() {
        byte[] arrayOctet = new byte[0];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64WithInvalidArray_qxyc2_fid2() {
        byte[] arrayOctet = "abcd1234=".getBytes();
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64WithInvalidArray3_xREy4_fid2() {
        byte[] arrayOctet = "abcd1234\n".getBytes();
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Oklr0_3_fid2() {
        byte octet1 = 65;
        boolean expected1 = true;
        boolean actual1 = Base64.isBase64(octet1);
        byte octet2 = 43;
        boolean expected2 = true;
        boolean actual2 = Base64.isBase64(octet2);
        byte octet3 = 127;
        boolean expected3 = true;
        boolean actual3 = Base64.isBase64(octet3);
        byte octet4 = -1;
        boolean expected4 = false;
        boolean actual4 = Base64.isBase64(octet4);
        byte octet5 = 100;
        boolean expected5 = false;
        boolean actual5 = Base64.isBase64(octet5);
        assertEquals(expected3, actual3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Oklr0_5_fid2() {
        byte octet1 = 65;
        boolean expected1 = true;
        boolean actual1 = Base64.isBase64(octet1);
        byte octet2 = 43;
        boolean expected2 = true;
        boolean actual2 = Base64.isBase64(octet2);
        byte octet3 = 127;
        boolean expected3 = true;
        boolean actual3 = Base64.isBase64(octet3);
        byte octet4 = -1;
        boolean expected4 = false;
        boolean actual4 = Base64.isBase64(octet4);
        byte octet5 = 100;
        boolean expected5 = false;
        boolean actual5 = Base64.isBase64(octet5);
        assertEquals(expected5, actual5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_Oklr0() {
        byte octet1 = 65;
        boolean expected1 = true;
        boolean actual1 = Base64.isBase64(octet1);
        assertEquals(expected1, actual1);
        byte octet2 = 43;
        boolean expected2 = true;
        boolean actual2 = Base64.isBase64(octet2);
        assertEquals(expected2, actual2);
        byte octet3 = 127;
        boolean expected3 = true;
        boolean actual3 = Base64.isBase64(octet3);
        assertEquals(expected3, actual3);
        byte octet4 = -1;
        boolean expected4 = false;
        boolean actual4 = Base64.isBase64(octet4);
        assertEquals(expected4, actual4);
        byte octet5 = 100;
        boolean expected5 = false;
        boolean actual5 = Base64.isBase64(octet5);
        assertEquals(expected5, actual5);
    }
}