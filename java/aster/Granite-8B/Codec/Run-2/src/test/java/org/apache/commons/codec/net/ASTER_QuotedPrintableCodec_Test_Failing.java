/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuotedPrintableCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NyNJ0_1() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[10];
        byte[] expected = new byte[10];
        printable.set(0, 10);
        expected = "abcd1234".getBytes();
        printable.clear();
        printable.set(0, 5);
        printable.set(7, 10);
        expected = "abcd=12".getBytes();
        printable.clear();
        printable.set(0, 5);
        printable.set(6, 10);
        expected = "abcd=12".getBytes();
        printable.clear();
        printable.set(0, 5);
        printable.set(5, 10);
        expected = "abcd=12".getBytes();
        printable.clear();
        printable.set(0, 5);
        printable.set(4, 10);
        expected = "abcd=12".getBytes();
        printable.clear();
        printable.set(0, 5);
        printable.set(3, 10);
        expected = "abcd=12".getBytes();
        printable.clear();
        printable.set(0, 5);
        printable.set(2, 10);
        expected = "abcd=12".getBytes();
        printable.clear();
        printable.set(0, 5);
        printable.set(1, 10);
        expected = "abcd=12".getBytes();
        printable.clear();
        printable.set(0, 10);
        expected = "abcd1234".getBytes();
        printable.clear();
        expected = "".getBytes();
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_mIgW1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{1, 2, 3};
        Object encoded = codec.encode(input);
        assertEquals("[61, 48, 49, 61, 48, 50, 61, 48, 51]", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull6_TeeT5() {
        final byte[] bytes = new byte[0];
        final BitSet printable = new BitSet();
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull9_DrsJ8() {
        final byte[] bytes = new byte[1];
        final BitSet printable = new BitSet();
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull10_zuMO9() {
        final byte[] bytes = new byte[10];
        final BitSet printable = null;
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull11_XwdM10() {
        final byte[] bytes = new byte[10];
        final BitSet printable = new BitSet();
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull12_hPKr11() {
        final byte[] bytes = new byte[10];
        final BitSet printable = new BitSet();
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_rvzC0_1() {
        byte[] input = new byte[]{123, 45, 67, 89};
        byte[] expectedOutput = new byte[]{123, 45, 67, 89};
        byte[] actualOutput = QuotedPrintableCodec.encodeQuotedPrintable(null, input, false);
        input = new byte[]{123, 45, 67, 89};
        expectedOutput = new byte[]{61, 36, 66, 61, 61, 13, 10};
        actualOutput = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableInvalidEscape_RURf4() {
        final byte[] bytes = "Hello, =X".getBytes(StandardCharsets.UTF_8);
        final DecoderException exception =
        assertThrows(DecoderException.class, () -> QuotedPrintableCodec.decodeQuotedPrintable(bytes));
        assert exception.getMessage().equals("Invalid quoted-printable encoding");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_mIgW1_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{1, 2, 3};
        Object encoded = codec.encode(input);
        assertEquals("AQID", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_sjws1_fid1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "Hello, !";
        String encodedStr = codec.encode(sourceStr);
        assertEquals("Hello, =?UTF-8?B?5Lit5a2X5piv5Y+v?=", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndStrict_NPCp3_fid1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "Hello, !";
        String encodedStr = codec.encode(sourceStr);
        assertEquals("Hello, =?UTF-8?B?5Lit5a2X5piv5Y+v?=", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceStr_xTnP4_Uwci0_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        String encodedStr = null;
        try {
            encodedStr = codec.encode(sourceStr);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NyNJ0() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[10];
        byte[] expected = new byte[10];
        printable.set(0, 10);
        expected = "abcd1234".getBytes();
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
        printable.clear();
        printable.set(0, 5);
        printable.set(7, 10);
        expected = "abcd=12".getBytes();
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
        printable.clear();
        printable.set(0, 5);
        printable.set(6, 10);
        expected = "abcd=12".getBytes();
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
        printable.clear();
        printable.set(0, 5);
        printable.set(5, 10);
        expected = "abcd=12".getBytes();
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
        printable.clear();
        printable.set(0, 5);
        printable.set(4, 10);
        expected = "abcd=12".getBytes();
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
        printable.clear();
        printable.set(0, 5);
        printable.set(3, 10);
        expected = "abcd=12".getBytes();
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
        printable.clear();
        printable.set(0, 5);
        printable.set(2, 10);
        expected = "abcd=12".getBytes();
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
        printable.clear();
        printable.set(0, 5);
        printable.set(1, 10);
        expected = "abcd=12".getBytes();
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
        printable.clear();
        printable.set(0, 10);
        expected = "abcd1234".getBytes();
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
        printable.clear();
        expected = "".getBytes();
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_rvzC0() {
        byte[] input = new byte[]{123, 45, 67, 89};
        byte[] expectedOutput = new byte[]{123, 45, 67, 89};
        byte[] actualOutput = QuotedPrintableCodec.encodeQuotedPrintable(null, input, false);
        assertEquals(expectedOutput, actualOutput);
        input = new byte[]{123, 45, 67, 89};
        expectedOutput = new byte[]{61, 36, 66, 61, 61, 13, 10};
        actualOutput = QuotedPrintableCodec.encodeQuotedPrintable(null, input, true);
        assertEquals(expectedOutput, actualOutput);
    }
}