/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.binary.Base64;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidCharset_qnBs2() {
        BCodec bCodec = new BCodec(Charset.forName("InvalidCharset"), CodecPolicy.STRICT);
        String value = "Hello, World!";
        try {
            bCodec.decode(value);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Invalid charset"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullCharset_JMoa3() {
        BCodec bCodec = new BCodec(null, CodecPolicy.STRICT);
        String value = "Hello, World!";
        try {
            bCodec.decode(value);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Charset"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingBytes_mkjP0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        byte[] input = "Hello, World!".getBytes(Charset.forName("UTF-8"));
        byte[] expectedOutput = Base64.encodeBase64(input);
        byte[] actualOutput = bCodec.doEncoding(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharset_Lkye2() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        try {
            bCodec.encode(strSource, Charset.forName("InvalidCharset"));
            fail("EncoderException expected");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceString_RajX4() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = null;
        try {
            bCodec.encode(strSource, Charset.forName("UTF-8"));
            fail("EncoderException expected");
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharset_aWZn3() {
        BCodec bCodec = new BCodec("InvalidCharset");
        try {
            bCodec.encode("Hello, World!", "InvalidCharset");
            fail("EncoderException expected");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("InvalidCharset"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceString_cdBr5() {
        BCodec bCodec = new BCodec("UTF-8");
        try {
            bCodec.encode(null, "UTF-8");
            fail("EncoderException expected");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("strSource"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_Fbre0_pGrX0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual;
        try {
            actual = bCodec.decode(value);
        } catch (DecoderException e) {
            throw new RuntimeException(e);
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithLenientPolicy_pzaa1_kPND0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual;
        try {
            actual = bCodec.decode(value);
        } catch (DecoderException e) {
            throw new RuntimeException(e);
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullPolicy_NcFS5_PKwA0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), null);
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = null;
        try {
            actual = bCodec.decode(value);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_Obty0_FJjH0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String value = "Hello, World!";
        Object decodedValue;
        try {
            decodedValue = bCodec.decode(value);
        } catch (DecoderException e) {
            throw new RuntimeException(e);
        }
        assertEquals("Hello, World!", decodedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ssNj0_azIe0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=";
        String encodedText = null;
        try {
            encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeLenient_tBqv1_lspK0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String strSource = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=";
        String encodedText;
        try {
            encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        } catch (EncoderException e) {
            throw new RuntimeException(e);
        }
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_YJzp0_ifbs0() {
        BCodec bCodec = new BCodec("UTF-8");
        String encodedString = "";
        try {
            encodedString = bCodec.encode("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", "UTF-8");
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_wwbH0_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String encodedString = bCodec.encode(strSource);
        assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullPolicy_NcFS5_PKwA0_fid2() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), null);
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = null;
        try {
            actual = bCodec.decode(value);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ssNj0_azIe0_fid2() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String encodedText = null;
        try {
            encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello, World!", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeLenient_tBqv1_lspK0_fid2() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String strSource = "Hello, World!";
        String encodedText;
        try {
            encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        } catch (EncoderException e) {
            throw new RuntimeException(e);
        }
        assertEquals("Hello, World!", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptySourceString_CeDk5_DGBj0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "";
        String encodedText = "";
        try {
            encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_YJzp0_ifbs0_fid2() {
        BCodec bCodec = new BCodec("UTF-8");
        String encodedString = "";
        try {
            encodedString = bCodec.encode("Hello, World!", "UTF-8");
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello, World!", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptySourceString_Xfqe6_HvET0() {
        BCodec bCodec = new BCodec("UTF-8");
        String encodedString = "";
        try {
            encodedString = bCodec.encode("", "UTF-8");
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("", encodedString);
    }
}