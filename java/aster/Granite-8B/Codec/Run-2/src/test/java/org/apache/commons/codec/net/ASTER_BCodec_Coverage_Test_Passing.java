/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithUnsupportedEncodingException_CNSx1() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "example";
        try {
            bCodec.decode(value);
            fail("Expected UnsupportedEncodingException");
        } catch (DecoderException e) {
            assertFalse(e.getCause() instanceof UnsupportedEncodingException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNonString_HbxL1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        Object value = new Object();
        try {
            bCodec.decode(value);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_YaGI0() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        Object encodedValue = bCodec.encode(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_AuAx1() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        String input = "inputString";
        Object encodedValue = bCodec.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_XiYk3() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        String input = "inputString";
        Object encodedValue = bCodec.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharsetException_iJZk0() throws UnsupportedCharsetException {
        BCodec bCodec = new BCodec();
        Charset charset = null;
        String strSource = null;
        try {
            bCodec.encode(strSource, charset);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoderException_noNn1() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        String strSource = null;
        String charsetName = null;
        try {
            bCodec.encode(strSource, charsetName);
        } catch (EncoderException e) {
        }
    }
}