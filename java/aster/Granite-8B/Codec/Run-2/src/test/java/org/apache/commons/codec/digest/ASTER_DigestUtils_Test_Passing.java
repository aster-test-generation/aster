/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Test_Passing {
    private static MessageDigest getDigest(String algorithm) {
        try {
            return MessageDigest.getInstance(algorithm);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Could not find MessageDigest with algorithm " + algorithm, e);
        }
    }

    private static MessageDigest getMessageDigest(final String algorithm) throws NoSuchAlgorithmException
    {
        return MessageDigest.getInstance(algorithm);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha384Digest_IQgC0() {
        MessageDigest digest = DigestUtils.getSha384Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_ekTy0() {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha1Digest_bzGW0() throws NoSuchAlgorithmException {
        MessageDigest expectedDigest = MessageDigest.getInstance("SHA-1");
        MessageDigest actualDigest = DigestUtils.getSha1Digest();
        assertEquals(expectedDigest.getAlgorithm(), actualDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDigest_nknI0() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getDigest("MD5");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetShaDigest_Kjku0() {
        MessageDigest digest = DigestUtils.getShaDigest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSha3_384Digest_UWvi0() {
        MessageDigest messageDigest = DigestUtils.getSha3_384Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_224Digest_EhzH0() {
        MessageDigest messageDigest = DigestUtils.getSha3_224Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSha512Digest_Tlib0() {
        MessageDigest md = DigestUtils.getSha512Digest();
        assertNotNull(md);
        assertEquals("SHA-512", md.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_rHzw0() throws NoSuchAlgorithmException {
        MessageDigest expectedDigest = MessageDigest.getInstance("SHA-512");
        byte[] expectedHash = expectedDigest.digest("test".getBytes());
        MessageDigest actualDigest = MessageDigest.getInstance("SHA-512");
        byte[] actualHash = DigestUtils.sha512("test".getBytes());
        assertArrayEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_cuum0() {
        assertTrue(DigestUtils.isAvailable("MD5"));
        assertFalse(DigestUtils.isAvailable("InvalidAlgorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithNullAlgorithm_DRUg1() {
        assertFalse(DigestUtils.isAvailable(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_224Digest_PTGo0() {
        MessageDigest messageDigest = DigestUtils.getSha512_224Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDigest2_uqYT1() throws NoSuchAlgorithmException {
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest result = DigestUtils.getDigest("MD5", defaultMessageDigest);
        assertNotEquals(defaultMessageDigest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_256Digest_ieyn0() {
        MessageDigest digest = DigestUtils.getSha3_256Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest_bgBL2() {
        MessageDigest digest = DigestUtils.getDigest("SHA-384");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest2_rsAJ3() {
        MessageDigest digest = DigestUtils.getDigest("SHA-512/224");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest3_InRg4() {
        MessageDigest digest = DigestUtils.getDigest("SHA-512/256");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSha256Digest_ulih0() throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        MessageDigest actual = DigestUtils.getSha256Digest();
        assertEquals(md.getAlgorithm(), actual.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd5Digest_wKUW0() {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertNotNull(md5Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512_256Digest_ASOn0() {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSha512Digest_Tlib0_1() {
        MessageDigest md = DigestUtils.getSha512Digest();
        assertNotNull(md);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSha512Digest_Tlib0_2() {
        MessageDigest md = DigestUtils.getSha512Digest();
        assertEquals("SHA-512", md.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_cuum0_1() {
        assertTrue(DigestUtils.isAvailable("MD5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_cuum0_2() {
        assertFalse(DigestUtils.isAvailable("InvalidAlgorithm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_LCgC0_NQOZ0() {
        MessageDigest messageDigest = DigestUtils.getSha256Digest();
        byte[] valueToDigest = new byte[]{1, 2, 3};
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertEquals(messageDigest, updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_EaFk0_fid2() {
        byte[] data = new byte[]{1, 2, 3};
        String expected = "039058c6f2c0cb492c533b0a4d14ef77cc0f78abccced5287d84a1a2011cfb81";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_DTks0_fid2() {
        byte[] data = new byte[]{1, 2, 3};
        String expected = "0c60ae04fbb17fe36f4e84631a5b8f3cd6d0cd46e80056bdfec97fd305f764daadef8ae1adc89b203043d7e2af1fb341df0ce5f66dfe3204ec3a9831532a8e4c";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_WONA0_fid2() {
        String data = "Hello, World!";
        String expected = "0a0a9f2a6772942557ab5355d76af442f8f65e01";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_RNJT0_fid2() {
        String data = "Hello, World!";
        String expected = "766745f058e8a0438f19de48ae56ea5f123fe738af39bca050a7547a";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_qgKw0_fid2() {
        byte[] data = new byte[10]; // Replace with actual data
        String expected = "97ac6ecab1ebede0d9c8a55d6f8e6c5e7555c6a595fc33c51febb500";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_xJeI0_fid2() {
        byte[] data = new byte[10];
        String expected = "9694c4ebd673a5e2fd26e4b2e64f92e914ebd95f";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_jPGU0_fid2() {
        String data = "Hello, World!";
        byte[] expected = {
        (byte) 0x20, (byte) 0x79, (byte) 0x46, (byte) 0x5c, (byte) 0x53, (byte) 0x60, (byte) 0x46, (byte) 0x35,
        (byte) 0x57, (byte) 0x66, (byte) 0x8b, (byte) 0x2d, (byte) 0x72, (byte) 0xe4, (byte) 0x79, (byte) 0x03,
        (byte) 0x4d, (byte) 0xb3, (byte) 0x5e, (byte) 0x89, (byte) 0x27, (byte) 0x6f, (byte) 0xc7, (byte) 0x61,
        (byte) 0xe4, (byte) 0xb5, (byte) 0x9c, (byte) 0xe2, (byte) 0xa5, (byte) 0x89, (byte) 0xd5, (byte) 0x4e,
        (byte) 0xaf, (byte) 0x17, (byte) 0x97, (byte) 0x02, (byte) 0xd6, (byte) 0x66, (byte) 0xcf, (byte) 0xdc
        };
        byte[] actual = DigestUtils.sha512_224(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_QsHC0_fid2() {
        String data = "Hello, World!";
        String expected = "dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_rNvL0_fid2() {
        String data = "Hello, World!";
        String expected = "aa9ad8a49f31d2ddcabbb7010a1566417cff803fef50eba239558826f872e468c5743e7f026b0a8e5b2d7a1cc465cdbe";
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_UzHC0_fid2() {
        byte[] data = new byte[10]; // Replace with appropriate data
        String expected = "f54cecb8c160015f87b9e51edd087e10479d60479a42ff7e907ddf129fd7cb2782eb5624c43b453a24cffd8cbe42d0ec"; // Replace with expected result
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_DliN0_fid2() {
        String data = "Hello, World!";
        String expected = "0a0a9f2a6772942557ab5355d76af442f8f65e01";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_gNtv0_fid2() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        String expected = "30bd026f5b88b4719b563bddb68917be";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_wGIr0_fid2() {
        String data = "Hello, World!";
        String expected = "1c8f1e6a94aaa7145210bf90bb52871a";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_Xaty0_fid2() {
        String data = "example data";
        String expected = "expected result";
        String actual = DigestUtils.sha512_256Hex(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_nSQm0_fid2() {
        String data = "Hello, World!";
        String expected = "5485cc9b3365b4305dfb4e8337e0a598a574f8242bf17289e0dd6c20a3cd44a089de16ab4ab308f63e44b1170eb5f515";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_EPDO0_fid2() {
        byte[] data = new byte[0];
        String expected = "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_NADp0_fid2() {
        byte[] data = new byte[10]; // Replace with appropriate data
        String expected = "0cd5285ba8524fe42ac8f0076de9135d056132a9996213ae1c0f1420c908418b"; // Replace with expected result
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_dhsU0_fid2() {
        byte[] data = new byte[]{1, 2, 3};
        String expected = "7037807198c22a7d2b0807371d763779a84fdfcf";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_HgLI0_fid2() {
        String data = "Hello, World!";
        String expected = "65a8e27d8879283831b664bd8b7f0ad4";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_lcsp0_fid2() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "65a8e27d8879283831b664bd8b7f0ad4";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_mfri0_fid2() {
        String data = "Hello, World!";
        String expected = "38e05c33d7b067127f217d8c856e554fcff09c9320b8a5979ce2ff5d95dd27ba35d1fba50c562dfd1d6cc48bc9c5baa4390894418cc942d968f97bcb659419ed";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_SCMj0_fid2() {
        String data = "Hello, World!";
        String expected = "374d794a95cdcfd8b35993185fef9ba368f160d8daf432d08ba9f1ed1e5abe6cc69291e0fa2fe0006a52570ef18c19def4e617c33ce52ef0a6e5fbe318cb0387";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_RogZ0_fid2() {
        byte[] data = new byte[10]; // Replace with appropriate data
        String expected = "8b93a37b687844991c4c1312e027841b256c2d7a3edd14a29acac23d2fe67464086d4e791b44b6be023c28115ac76243"; // Replace with expected hash value
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_ZiqF0_fid2() {
        byte[] data = new byte[0];
        String expected = "c672b8d1ef56ed28ab87c3622c5114069bdd3ad7b8f9737498d0c01ecef0967a";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_UqvI0_fid2() {
        String data = "Hello, World!";
        String expected = "1af17a664e3fa8e419b8ba05c2a173169df76162a5a286e0c405b460d478f7ef";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MJra0_fid2() {
        String data = "Hello, World!";
        String expected = "853048fb8b11462b6100385633c0cc8dcdc6e2b8e376c28102bc84f2";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MZto0_fid2() {
        byte[] data = new byte[10];
        String expected = "90910c1ac3595dac54cc272b8cf07cc8e28396906aaac5df45e02e27";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }
}