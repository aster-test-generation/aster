/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SoundexUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedWithNullStrings_YfHn0() {
        String es1 = null;
        String es2 = null;
        int diff = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(0, diff);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedWithEmptyStrings_xGtg1() {
        String es1 = "";
        String es2 = "";
        int diff = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(0, diff);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedWithIdenticalStrings_uGrW2() {
        String es1 = "abc";
        String es2 = "abc";
        int diff = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(3, diff);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedWithSimilarStrings_nKKb3() {
        String es1 = "abcd";
        String es2 = "abce";
        int diff = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(3, diff);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedWithDifferentStrings_ebWg4() {
        String es1 = "abcd";
        String es2 = "efgh";
        int diff = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(0, diff);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanWithNullString_ptry0() {
        String input = null;
        String expected = null;
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanWithEmptyString_UcUD1() {
        String input = "";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanWithAllAlphaString_irWW3() {
        String input = "ABCDEFG";
        String expected = "ABCDEFG";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNullString_rkck0() {
        CharSequence cs = null;
        boolean expected = true;
        boolean actual = SoundexUtils.isEmpty(cs);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithEmptyString_gssn1() {
        CharSequence cs = "";
        boolean expected = true;
        boolean actual = SoundexUtils.isEmpty(cs);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNonEmptyString_UtIL2() {
        CharSequence cs = "Hello";
        boolean expected = false;
        boolean actual = SoundexUtils.isEmpty(cs);
        assertEquals(expected, actual);
    }
}