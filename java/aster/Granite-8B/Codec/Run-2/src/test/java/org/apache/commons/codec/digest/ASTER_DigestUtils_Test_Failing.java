/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Hex;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Test_Failing {
    private static MessageDigest getDigest(String algorithm) {
        try {
            return MessageDigest.getInstance(algorithm);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("Could not find MessageDigest with algorithm " + algorithm, e);
        }
    }

    private static MessageDigest getMessageDigest(final String algorithm) throws NoSuchAlgorithmException
    {
        return MessageDigest.getInstance(algorithm);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_qYco0() throws IOException {
        InputStream data = null; // Initialize data with appropriate input
        String expected = "expected_hash_value"; // Replace with expected hash value
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_GCxR0() throws IOException {
        InputStream data = null; // Initialize data
        byte[] result = DigestUtils.sha(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_dtee0() {
        String data = "Hello, World!";
        byte[] expected = {-100, 86, 104, 101, -117, -103, -111, 116, 111, 32, -113, 114, 108, 100, 33};
        byte[] actual = DigestUtils.sha1(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_sRXw0() {
        String data = "Hello, World!";
        byte[] expected = {-8, 43, -103, 41, 101, -113, 115, 52};
        byte[] actual = DigestUtils.md5(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_EaFk0() {
        byte[] data = new byte[]{1, 2, 3};
        String expected = "ba7816bf8f01cfea414140de5dae222";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_XFEZ0() {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        String expectedHexDigest = "2fd4e1c67a2d28fced849ee1bb76e7391b93eb1251c672423e433ab09ee0dc";
        String actualHexDigest = digestUtils.digestAsHex(data);
        assertEquals(expectedHexDigest, actualHexDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_KvuE0() {
        MessageDigest expectedDigest = getDigest("MD2");
        MessageDigest actualDigest = DigestUtils.getMd2Digest();
        assertEquals(expectedDigest, actualDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_DTks0() {
        byte[] data = new byte[]{1, 2, 3};
        String expected = "a69f73cca23a51d359e9b4bd03b89b7b35cba8c0893173a48566b4b05b17f6786139140068e40571e2c64c6b46c03860";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_PEYC0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(data.getBytes());
        byte[] actual = DigestUtils.sha(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_Ozxl0() {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = { /* expected SHA-256 hash */ };
        byte[] actual = DigestUtils.sha256(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_WONA0() {
        String data = "Hello, World!";
        String expected = "2fd4e1c67a2d28fced849ee1bb76e7391b93eb1";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_SPcc0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        InputStream data = null; // Initialize data
        byte[] result = digestUtils.md2(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_RNJT0() {
        String data = "Hello, World!";
        String expected = "6b86b273ff34fce19d6b804eff5a3f5747ada628c340eb0645891f977c464a2";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_qgKw0() {
        byte[] data = new byte[10]; // Replace with actual data
        String expected = "a7e073f4d79392039f6ec2895b5e836016ae8a4e61975196467b10fe9170f47";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestByteBuffer_bKOQ0() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.allocate(10);
        byte[] expected = new byte[10];
        byte[] actual = digestUtils.digest(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_usgg0() {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_BaaR0() {
        String data = "Hello, World!";
        byte[] expected = {(byte) 0x6b, (byte) 0x04, (byte) 0x57, (byte) 0x01, (byte) 0x06, (byte) 0x78, (byte) 0x51, (byte) 0x86, (byte) 0x39, (byte) 0xf9, (byte) 0x57, (byte) 0xc4, (byte) 0xf9, (byte) 0xc6, (byte) 0x53, (byte) 0x8c, (byte) 0x80, (byte) 0xb2, (byte) 0x6c, (byte) 0x1c, (byte) 0xf2, (byte) 0xd1, (byte) 0x67, (byte) 0x50, (byte) 0x6e, (byte) 0x9a, (byte) 0x02, (byte) 0x41};
        byte[] actual = DigestUtils.sha3_224(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_fTdp0() {
        String data = "Hello, World!";
        byte[] expected = {(byte) 0x6a, (byte) 0x09, (byte) 0xe6, (byte) 0x67, (byte) 0x0f, (byte) 0xb6, (byte) 0x77, (byte) 0xa9, (byte) 0x14, (byte) 0x3e, (byte) 0x17, (byte) 0x26, (byte) 0xcc, (byte) 0x8f, (byte) 0xf9, (byte) 0xb5, (byte) 0x3f, (byte) 0x8c, (byte) 0x1a, (byte) 0x6f, (byte) 0x85, (byte) 0x90, (byte) 0x0a, (byte) 0x41, (byte) 0x95, (byte) 0x30, (byte) 0xd1, (byte) 0x8d, (byte) 0x85, (byte) 0x45, (byte) 0x4d};
        byte[] actual = DigestUtils.sha3_256(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_VfBi0() throws IOException, NoSuchAlgorithmException {
        InputStream data = null; // Initialize with valid input stream
        byte[] result = DigestUtils.sha384(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_IKUt0() throws IOException {
        InputStream data = null; // Initialize data
        String expected = "expected_hash_value"; // Replace with expected hash value
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_xJeI0() {
        byte[] data = new byte[10];
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_jPGU0() {
        String data = "Hello, World!";
        byte[] expected = {
        (byte) 0x20, (byte) 0x79, (byte) 0x46, (byte) 0x5c, (byte) 0x53, (byte) 0x60, (byte) 0x46, (byte) 0x35,
        (byte) 0x57, (byte) 0x66, (byte) 0x8b, (byte) 0x2d, (byte) 0x72, (byte) 0xe4, (byte) 0x79, (byte) 0x03,
        (byte) 0x4d, (byte) 0xb3, (byte) 0x5e, (byte) 0x89, (byte) 0x27, (byte) 0x6f, (byte) 0xc7, (byte) 0x61,
        (byte) 0xe4, (byte) 0xb5, (byte) 0x9c, (byte) 0xe2, (byte) 0xa5, (byte) 0x89, (byte) 0xd5, (byte) 0x4e,
        (byte) 0xaf, (byte) 0x17, (byte) 0x97, (byte) 0x02, (byte) 0xd6, (byte) 0x66, (byte) 0xcf, (byte) 0xdc
        };
        byte[] actual = DigestUtils.sha512_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_QsHC0() {
        String data = "Hello, World!";
        String expected = "2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b982";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_HIFW0() {
        String data = "Hello, World!";
        byte[] expected = { /* expected byte array */ };
        byte[] actual = DigestUtils.sha3_384(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_rNvL0() {
        String data = "Hello, World!";
        String expected = "2c231262a59544626334e8a2f7e64555803853eca54c639bf23bc22f4f6b23ae32174aa8f8f331552fcfff1d7de9db";
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_PdFt0() {
        byte[] data = new byte[10]; // Replace with actual data
        byte[] expected = new byte[64]; // Replace with expected result
        byte[] actual = DigestUtils.sha3_512(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_UzHC0() {
        byte[] data = new byte[10]; // Replace with appropriate data
        String expected = "0x0000000000000000000000000000000000000000000000000000000000000000"; // Replace with expected result
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_DliN0() {
        String data = "Hello, World!";
        String expected = "2fd4e1c67a2d28fced849ee1bb76e7391b93eb12";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_herN0() throws IOException, NoSuchAlgorithmException {
        InputStream data = null;
        byte[] result = DigestUtils.sha512_224(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_gNtv0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03};
        String expected = "010203";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_wGIr0() {
        String data = "Hello, World!";
        String expected = "5d41402abc4b2a76b9719d911017c592";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_Xaty0() {
        String data = "example data";
        String expected = "expected result";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_nSQm0() {
        String data = "Hello, World!";
        String expected = "5994660997e86839220418a962d96822b72722f0e086c28073f242959127389";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_EPDO0() {
        byte[] data = new byte[0];
        String expected = "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_JJoG0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = MessageDigest.getInstance("SHA-512/224").digest(data);
        byte[] actual = DigestUtils.sha512_224(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_bxoF0() throws IOException {
        InputStream data = null;
        byte[] result = DigestUtils.sha512(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_hAmH0() {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha3_384(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNullData_OsaW1() {
        byte[] data = null;
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha3_384(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384WithNonNullData_oSuR2() {
        byte[] data = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{4, 5, 6};
        byte[] actual = DigestUtils.sha3_384(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_DVjJ0() {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithEmptyInput_YmhH1() {
        byte[] data = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNullInput_WYzc2() {
        byte[] data = null;
        byte[] expected = null;
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_kuAF0() throws IOException {
        InputStream data = null;
        byte[] result = DigestUtils.md5(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_NADp0() {
        byte[] data = new byte[10]; // Replace with appropriate data
        String expected = "a1a2a3a4a5a6a7a8a9aaabacad"; // Replace with expected result
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_zLWQ0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = new byte[10]; // Replace with actual data
        byte[] expected = new byte[16]; // Replace with expected result
        byte[] actual = digestUtils.md2(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_dhsU0() {
        byte[] data = new byte[]{1, 2, 3};
        String expected = "0beec7b5ea3f0fdbc95d0dd47f3c8bc792b2e4";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_HgLI0() {
        String data = "Hello, World!";
        String expected = "5d41402abc4b2a76b9719d911017c592";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_XbZL0() {
        String data = "Hello, World!";
        byte[] expected = {(byte) 0x24, (byte) 0x8d, (byte) 0x6a, (byte) 0x61, (byte) 0xd2, (byte) 0x06, (byte) 0x38, (byte) 0xb8, (byte) 0xe5, (byte) 0xc0, (byte) 0x26, (byte) 0x93, (byte) 0x0c, (byte) 0x3e, (byte) 0x60, (byte) 0x39, (byte) 0xa3, (byte) 0x3c, (byte) 0xe4, (byte) 0x59, (byte) 0x64, (byte) 0xff, (byte) 0x21, (byte) 0x67, (byte) 0xf6, (byte) 0xec, (byte) 0xed, (byte) 0xd4, (byte) 0x19, (byte) 0xdb, (byte) 0x06};
        byte[] actual = DigestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_ivYF0() {
        String data = "Hello, World!";
        byte[] expected = {(byte) 0x20, (byte) 0x2b, (byte) 0xb7, (byte) 0x23, (byte) 0x8d, (byte) 0x03, (byte) 0xd6, (byte) 0x03, (byte) 0x73, (byte) 0xbe, (byte) 0xd1, (byte) 0x72, (byte) 0x7e, (byte) 0xa2, (byte) 0x7d, (byte) 0xde, (byte) 0x3c, (byte) 0xe4, (byte) 0xe5, (byte) 0xe4, (byte) 0x17, (byte) 0x38, (byte) 0xd1, (byte) 0x78};
        byte[] actual = DigestUtils.sha512_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_ZLYB0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        MessageDigest expectedDigest = MessageDigest.getInstance("SHA-512/256");
        expectedDigest.update(data);
        byte[] expected = expectedDigest.digest();
        MessageDigest actualDigest = MessageDigest.getInstance("SHA-512/256");
        actualDigest.update(data);
        byte[] actual = actualDigest.digest();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_lcsp0() {
        byte[] data = "Hello, World!".getBytes();
        String expected = "5d41402abc4b2a76b9719d911017c592";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_eFjW0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        Path data = null;
        OpenOption[] options = null;
        String expected = Hex.encodeHexString(digestUtils.digest(data, options));
        String actual = digestUtils.digestAsHex(data, options);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_mfri0() {
        String data = "Hello, World!";
        String expected = "a1a668753b91236243934f9e8b70e8f9693c2b6752a9ba38819471c61e946830935b94548b6fc76d2e01f5b573695b7a7741db0582c30b1c750a330859d3bb";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHexByteBuffer_blTf0() {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.allocate(10);
        data.putInt(0, 12345);
        String expected = "7b2264617461223a223132333435227d";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDigest_asFW0() throws NoSuchAlgorithmException {
        MessageDigest defaultMessageDigest = MessageDigest.getInstance("SHA-256");
        MessageDigest result = DigestUtils.getDigest("SHA-256", defaultMessageDigest);
        assertEquals(defaultMessageDigest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_tZDH0() throws IOException, NoSuchAlgorithmException {
        InputStream data = null; // initialize data
        MessageDigest digest = MessageDigest.getInstance("SHA-256"); // initialize digest
        byte[] result = DigestUtils.sha256(data); // call the method under test
        assertNotNull(result); // assert that the result is not null
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_imqh0() {
        String data = "Hello, World!";
        byte[] expected = {(byte) 0x9d, (byte) 0x0e, (byte) 0x89, (byte) 0xa0, (byte) 0x91, (byte) 0xcb, (byte) 0x0d, (byte) 0x3c, (byte) 0x5c, (byte) 0x95, (byte) 0xa6, (byte) 0x3b, (byte) 0x4b, (byte) 0xd5, (byte) 0x9f, (byte) 0x52, (byte) 0x95, (byte) 0x96, (byte) 0x3d, (byte) 0xa2, (byte) 0xc9, (byte) 0xe1, (byte) 0x4c, (byte) 0x81, (byte) 0x6e, (byte) 0xb4, (byte) 0x7b, (byte) 0x77, (byte) 0x5b, (byte) 0x43, (byte) 0x3c, (byte) 0x73, (byte) 0x6b, (byte) 0x13, (byte) 0x49, (byte) 0xb9, (byte) 0x4a, (byte) 0x49, (byte) 0xff, (byte) 0x2f, (byte) 0x57, (byte) 0x37, (byte) 0x56, (byte) 0x44, (byte) 0x56, (byte) 0x27, (byte) 0xff, (byte) 0x1d, (byte) 0x4b, (byte) 0x41, (byte) 0xe7, (byte) 0x5a, (byte) 0x2d, (byte) 0xc3, (byte) 0x74, (byte) 0x69, (byte) 0x17, (byte) 0x2d};
        byte[] actual = DigestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_SCMj0() {
        String data = "Hello, World!";
        String expected = "86fb269d190d2c85f6e046d162d541895f024977ba78050a06d9b3f153a9997";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_sLaz0() throws IOException {
        InputStream data = null; // Initialize InputStream data
        String expected = "expected_sha_hex_value"; // Replace with expected value
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_CmPS0() throws IOException, NoSuchAlgorithmException {
        InputStream data = null; // Initialize data stream
        byte[] result = DigestUtils.sha512_256(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_YriU0() {
        DigestUtils digestUtils = new DigestUtils();
        String data = "example data";
        byte[] expected = {0x13, 0x25, 0x47, 0x69}; // Replace with expected result
        byte[] actual = digestUtils.md2(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDigest_QkyY0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        Path data = null;
        OpenOption[] options = {};
        byte[] result = DigestUtils.digest(messageDigest, data, options);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDigest2_VsuY1() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        Path data = null;
        OpenOption[] options = {null};
        byte[] result = DigestUtils.digest(messageDigest, data, options);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDigest3_EpTg2() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        Path data = null;
        OpenOption[] options = {null, null};
        byte[] result = DigestUtils.digest(messageDigest, data, options);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDigest4_MASd3() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        Path data = null;
        OpenOption[] options = {null, null, null};
        byte[] result = DigestUtils.digest(messageDigest, data, options);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDigest5_bSaO4() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        Path data = null;
        OpenOption[] options = {null, null, null, null};
        byte[] result = DigestUtils.digest(messageDigest, data, options);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDigest6_mDOa5() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        Path data = null;
        OpenOption[] options = {null, null, null, null, null};
        byte[] result = DigestUtils.digest(messageDigest, data, options);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDigest7_Cgcr6() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        Path data = null;
        OpenOption[] options = {null, null, null, null, null, null};
        byte[] result = DigestUtils.digest(messageDigest, data, options);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDigest8_gYNt7() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        Path data = null;
        OpenOption[] options = {null, null, null, null, null, null, null};
        byte[] result = DigestUtils.digest(messageDigest, data, options);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDigest9_EePV8() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        Path data = null;
        OpenOption[] options = {null, null, null, null, null, null, null, null};
        byte[] result = DigestUtils.digest(messageDigest, data, options);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDigest10_zuzW9() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        Path data = null;
        OpenOption[] options = {null, null, null, null, null, null, null, null, null};
        byte[] result = DigestUtils.digest(messageDigest, data, options);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_syWb0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        Path data = null;
        OpenOption[] options = null;
        byte[] expected = null;
        byte[] actual = digestUtils.digest(data, options);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_VSeW0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = MessageDigest.getInstance("MD5").digest(data);
        byte[] actual = DigestUtils.md5(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_RogZ0() {
        byte[] data = new byte[10]; // Replace with appropriate data
        String expected = "expected_hash_value"; // Replace with expected hash value
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest4_kCZA5() {
        MessageDigest digest = DigestUtils.getDigest("SHA-3/224");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest5_afDc6() {
        MessageDigest digest = DigestUtils.getDigest("SHA-3/256");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest6_GEyC7() {
        MessageDigest digest = DigestUtils.getDigest("SHA-3/384");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest7_ACWQ8() {
        MessageDigest digest = DigestUtils.getDigest("SHA-3/512");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest8_Fdeg9() {
        MessageDigest digest = DigestUtils.getDigest("SHAKE128");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest9_hUGX10() {
        MessageDigest digest = DigestUtils.getDigest("SHAKE256");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDigest10_vvrX11() {
        MessageDigest digest = DigestUtils.getDigest("SM3");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_bhqh0() {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = new byte[]{1, 2, 3};
        String expected = "010203";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_ZiqF0() {
        byte[] data = new byte[0];
        String expected = "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_Ofap0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(data);
        byte[] actual = DigestUtils.sha1(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_UqvI0() {
        String data = "Hello, World!";
        String expected = "a1a66847560e0d01512f581b0080d843a7228373f245f779307506e815151d0";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_YEbM0() {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        byte[] expectedDigest = new byte[]{ /* expected digest bytes */ };
        byte[] actualDigest = digestUtils.digest(data);
        assertEquals(expectedDigest, actualDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_JHnF0() throws IOException {
        InputStream data = null; // Initialize InputStream data
        byte[] expected = null; // Initialize expected byte array
        byte[] actual = DigestUtils.sha1(data);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_CrOA0() throws IOException, NoSuchAlgorithmException {
        InputStream data = null; // Provide input stream
        byte[] result = DigestUtils.sha3_224(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MJra0() {
        String data = "Hello, World!";
        String expected = "31aa053e5367d6bcb47b049e9a00ff7f290377fe53cb8e6c206328ce0046b3";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_MZto0() {
        byte[] data = new byte[10];
        String expected = "a7ffc6f8bf1ed76651c14756a061d662f580ff4de432e5b20fa351170";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_ZAeX0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        File file = new File("example.txt");
        String expected = "expected_hash_value";
        String actual = digestUtils.digestAsHex(file);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_aiEf0_YbNu0() {
        MessageDigest messageDigest = DigestUtils.getSha256Digest();
        String valueToDigest = "Hello, World!";
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertEquals("64ec88ca00b268e5ba1a35678a1b5316d212f4f366b2477232534a8aeca37f", updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest1_PCaf0_uiNT0() throws IOException {
        MessageDigest messageDigest = DigestUtils.getSha512_256Digest();
        RandomAccessFile data = new RandomAccessFile("file.txt", "r");
        byte[] expected = messageDigest.digest();
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest2_ZYLw1_BwcT0() throws NoSuchAlgorithmException, IOException {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        RandomAccessFile data = new RandomAccessFile("file.txt", "r");
        byte[] expected = messageDigest.digest();
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest3_fzPs2_YQMB0() throws NoSuchAlgorithmException, IOException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
        RandomAccessFile data = new RandomAccessFile("file.txt", "r");
        byte[] expected = messageDigest.digest();
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest4_oUkA3_WOSD0() throws NoSuchAlgorithmException, IOException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-384");
        RandomAccessFile data = new RandomAccessFile("file.txt", "r");
        byte[] expected = messageDigest.digest();
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest5_OYdO4_UlKu0() throws NoSuchAlgorithmException, IOException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-512");
        RandomAccessFile data = new RandomAccessFile("file.txt", "r");
        byte[] expected = messageDigest.digest();
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest6_KayX5_fvsO0() throws NoSuchAlgorithmException, IOException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-224");
        RandomAccessFile data = new RandomAccessFile("file.txt", "r");
        byte[] expected = messageDigest.digest();
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest7_bqbX6_RbhK0() throws NoSuchAlgorithmException, IOException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA3-224");
        RandomAccessFile data = new RandomAccessFile("file.txt", "r");
        byte[] expected = messageDigest.digest();
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assert Arrays.equals(expected, actual);
        data.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest8_NEmP7_ZqVI0() throws IOException {
        MessageDigest messageDigest = DigestUtils.getSha3_256Digest();
        RandomAccessFile data = new RandomAccessFile("file.txt", "r");
        byte[] expected = messageDigest.digest();
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest9_iiPx8_xYzm0() throws NoSuchAlgorithmException, IOException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA3-384");
        RandomAccessFile data = new RandomAccessFile("file.txt", "r");
        byte[] expected = messageDigest.digest();
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest10_LMaj9_SWZE0() throws NoSuchAlgorithmException, IOException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA3-512");
        RandomAccessFile data = new RandomAccessFile("file.txt", "r");
        byte[] expected = messageDigest.digest();
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_DbxN0_iMTn0() {
        MessageDigest messageDigest = DigestUtils.getSha256Digest();
        byte[] data = "Hello, World!".getBytes();
        byte[] expectedDigest = new byte[]{-101, 111, 108, 108, -88, -101, 111, 108, 108, 111, -111, 111, 114, 108, 100, 33};
        byte[] actualDigest = DigestUtils.digest(messageDigest, data);
        assertEquals(expectedDigest, actualDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_fJiv0_mPaY0() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put("Hello, World!".getBytes());
        data.flip();
        byte[] expected = messageDigest.digest("Hello, World!".getBytes());
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_iSsZ0_ROrh0() {
        byte[] data = new byte[]{1, 2, 3};
        byte[] expected = null;
        byte[] actual = null;
        try {
            expected = MessageDigest.getInstance("SHA-1").digest(data);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        actual = DigestUtils.sha(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_FLHd0_aDoZ0() throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        ByteBuffer bb = ByteBuffer.wrap("Hello, World!".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(md, bb);
        assertEquals("64ec88ca00b268e5ba1a35678a1b5316d212f4f366b2477232534a8aeca37f", updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_RQHm0_cwvM0() throws NoSuchAlgorithmException {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = "Hello, World!".getBytes();
        MessageDigest expectedDigest = MessageDigest.getInstance("SHA-256");
        byte[] actualDigest = digestUtils.digest(data);
        assertEquals(expectedDigest.digest(data), actualDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithEmptyInput_YmhH1_fid2() {
        byte[] data = new byte[0];
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224WithNullInput_WYzc2_fid2() {
        byte[] data = null;
        byte[] expected = new byte[28];
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_aiEf0_YbNu0_fid2() {
        MessageDigest messageDigest = DigestUtils.getSha256Digest();
        String valueToDigest = "Hello, World!";
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertEquals("[-33, -3, 96, 33, -69, 43, -43, -80, -81, 103, 98, -112, -128, -98, -61, -91, 49, -111, -35, -127, -57, -9, 10, 75, 40, 104, -118, 54, 33, -126, -104, 111]", updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_FLHd0_aDoZ0_fid2() throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        ByteBuffer bb = ByteBuffer.wrap("Hello, World!".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(md, bb);
        assertEquals("[-33, -3, 96, 33, -69, 43, -43, -80, -81, 103, 98, -112, -128, -98, -61, -91, 49, -111, -35, -127, -57, -9, 10, 75, 40, 104, -118, 54, 33, -126, -104, 111]", updatedDigest.digest());
    }
}