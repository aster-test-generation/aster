/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Test_Passing {
    private String cleanInput(String input) {
        if (input == null) {
            return null;
        }
        input = input.trim();
        if (input.isEmpty()) {
            return null;
        }
        return input.toUpperCase(java.util.Locale.ENGLISH);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_XvKG0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        boolean result = doubleMetaphone.isDoubleMetaphoneEqual("test", "test");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_hQNN0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        boolean result = doubleMetaphone.isDoubleMetaphoneEqual("test", "test", false);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqualWithAlternates_zYjB1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        boolean result = doubleMetaphone.isDoubleMetaphoneEqual("test", "tset", true);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqualWithDifferentValues_mcHJ2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        boolean result = doubleMetaphone.isDoubleMetaphoneEqual("test", "diff", false);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqualWithNullValues_jZZf3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        boolean result = doubleMetaphone.isDoubleMetaphoneEqual(null, null, false);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqualWithEmptyValues_IdRc4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        boolean result = doubleMetaphone.isDoubleMetaphoneEqual("", "", false);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt1_ynax0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        char result = doubleMetaphone.charAt("hello", 1);
        assertEquals('e', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullInput_JdGe0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, false);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSingleLetterInput_FEkX2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("A", false);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates_KLSw3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("A", true);
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates13_nVnw15() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("ABCDEFGHIJKLMNOP", true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_PftP0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("HL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullInput_yyXQ2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = null;
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleL13_KWFg12() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_oKAY1_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("k", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_oKAY1_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("kk", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_oKAY1_3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("k", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_oKAY1_4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("kk", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains1_nPjX0() {
        String[] criteria = {"abc", "def"};
        boolean result = DoubleMetaphone.contains("abcdef", 0, 3, criteria);
        boolean expected = true;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains4_aqNU3() {
        String[] criteria = {"abc", "def"};
        boolean result = DoubleMetaphone.contains("abcdef", 6, 0, criteria);
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ALLi0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "example";
        String expected = doubleMetaphone.doubleMetaphone(value);
        String actual = doubleMetaphone.encode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_HQkN0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(10);
        assertEquals(10, doubleMetaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_kLdc4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int maxCodeLen = doubleMetaphone.getMaxCodeLen();
        assertEquals(4, maxCodeLen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt2_Aboy1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        char result = doubleMetaphone.charAt("world", 2);
        assertEquals('r', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt3_QPnr2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        char result = doubleMetaphone.charAt("java", 3);
        assertEquals('a', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_FaBe0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Hello";
        String expected = "HL";
        String actual = (String) doubleMetaphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_zskJ1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "World";
        String expected = "ARLT";
        String actual = (String) doubleMetaphone.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_feiI2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        boolean alternate = false;
        String expected = "HL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyInput_eolw1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates2_HxfV4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("AP", true);
        assertEquals("AP", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates3_tAdM5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("APK", true);
        assertEquals("APK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates4_iome6_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("APKT", true);
        assertEquals("APKT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_MlrC1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String result = doubleMetaphone.doubleMetaphone(value, true);
        assertEquals("HL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCleanInput_nsjK3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello World";
        String result = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSlavoGermanicInput_MaOa4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Cvijet";
        String result = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStartInput_VmLh5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ANational";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("ANXN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains2_DAMj1_fid1() {
        String[] criteria = {"abc", "def"};
        boolean result = DoubleMetaphone.contains("abcdef", 3, 3, criteria);
        boolean expected = true;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains3_dRHR2_fid1() {
        String[] criteria = {"abc", "def"};
        boolean result = DoubleMetaphone.contains("abcdef", 0, 6, criteria);
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDoubleMetaphone_xfQU0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "hello";
        String expected = "HL";
        String actual = doubleMetaphone.doubleMetaphone(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_oKAY1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("K", doubleMetaphone.doubleMetaphone("k", false));
        assertEquals("K", doubleMetaphone.doubleMetaphone("kk", false));
        assertEquals("K", doubleMetaphone.doubleMetaphone("k", true));
        assertEquals("K", doubleMetaphone.doubleMetaphone("kk", true));
    }
}