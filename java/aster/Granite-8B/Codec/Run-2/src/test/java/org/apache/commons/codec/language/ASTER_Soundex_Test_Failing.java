/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Soundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_vGRn0_1() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(SoundexUtils.difference(soundex1, "s1", "s2"), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_vGRn0_2() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(SoundexUtils.difference(soundex2, "s1", "s2"), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_vGRn0_3() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(SoundexUtils.difference(soundex3, "s1", "s2"), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_vGRn0_4() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(SoundexUtils.difference(soundex4, "s1", "s2"), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_ZpGn0() {
        Soundex soundex = new Soundex("mapping");
        String input = "input";
        String expected = "expected";
        String actual = soundex.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithChar_yZwy1() {
        Soundex soundex = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        String input = "input";
        String expected = "expected";
        String actual = soundex.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_EWSi0() {
        Soundex soundex = new Soundex();
        String str = "Hello";
        String expected = "H412";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithMapping_GqCK1() {
        Soundex soundex = new Soundex("mapping");
        String str = "Hello";
        String expected = "H412";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCaseHW_ikaH2() {
        Soundex soundex = new Soundex("mapping", true);
        String str = "Hello";
        String expected = "H412";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharMapping_SgEd3() {
        Soundex soundex = new Soundex(new char[]{'a', 'b', 'c'});
        String str = "Hello";
        String expected = "H412";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength2_ucHx7() {
        Soundex soundex = new Soundex();
        String str = "ab";
        String expected = "A120";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength3_GkAW8() {
        Soundex soundex = new Soundex();
        String str = "abc";
        String expected = "A123";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_vGRn0_2_fid1() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex0 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(SoundexUtils.difference(soundex2, "s1", "s2"), 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_vGRn0() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(SoundexUtils.difference(soundex1, "s1", "s2"), 0);
        assertEquals(SoundexUtils.difference(soundex2, "s1", "s2"), 0);
        assertEquals(SoundexUtils.difference(soundex3, "s1", "s2"), 0);
        assertEquals(SoundexUtils.difference(soundex4, "s1", "s2"), 0);
    }
}