/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_NlmZ2() {
        PercentCodec percentCodec = new PercentCodec();
        Object input = new Object();
        try {
            percentCodec.decode(input);
        } catch (DecoderException e) {
            assertEquals("Objects of type " + input.getClass().getName() + " cannot be Percent decoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInvalidObject_nqIC2() {
        PercentCodec percentCodec = new PercentCodec();
        Object obj = new Object();
        try {
            percentCodec.encode(obj);
            fail("EncoderException expected");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("Objects of type " + obj.getClass().getName() + " cannot be Percent encoded"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidEscape_bjoE5() {
        PercentCodec codec = new PercentCodec();
        byte[] input = "Hello%2GWorld".getBytes();
        try {
            codec.decode(input);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidEscape2_YwJA6() {
        PercentCodec codec = new PercentCodec();
        byte[] input = "Hello%2".getBytes();
        try {
            codec.decode(input);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidEscape3_tcFr7() {
        PercentCodec codec = new PercentCodec();
        byte[] input = "Hello%2G".getBytes();
        try {
            codec.decode(input);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_nElw0_nbtx0() {
        PercentCodec percentCodec = new PercentCodec();
        Object decoded = null;
        try {
            decoded = percentCodec.decode(null);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals(null, decoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_OSLy1_YDpe0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{1, 2, 3};
        try {
            Object encoded = percentCodec.encode(input);
            assertNotNull(encoded);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullBytes_ieit0_LTJt0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = null;
        try {
            byte[] result = percentCodec.encode(bytes);
            assert result == null;
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MkRt0_MSyb0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[10];
        try {
            byte[] result = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_QlAz1_tXkl0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = null;
        try {
            result = percentCodec.encode(new byte[0]);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullBytes_DGrS0_csHy0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = null;
        byte[] expected = null;
        byte[] actual = null;
        try {
            actual = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_amfI0_VWUX0() {
        final PercentCodec percentCodec = new PercentCodec();
        try {
            final byte[] encodedBytes = percentCodec.encode(null);
            Assertions.assertNull(encodedBytes);
        } catch (final EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_KEYK1_hzKE0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x00};
        byte[] expected = new byte[]{(byte) 0x00};
        try {
            assert Arrays.equals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_jNkm2_FaEx0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x01};
        byte[] expected = new byte[]{(byte) 0x01};
        try {
            assert Arrays.equals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode5_zpii4_pCvP0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{(byte) 0x7F};
        byte[] expected = new byte[]{(byte) 0x7F};
        try {
            assert Arrays.equals(expected, percentCodec.encode(bytes));
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBytesWithPlusForSpace_mkJu2_xrCz0() {
        byte[] bytes = new byte[]{' ', 43};
        PercentCodec percentCodec = new PercentCodec(null, true);
        byte[] encodedBytes = null;
        try {
            encodedBytes = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        byte[] expectedBytes = new byte[]{43, 43};
        assertArrayEquals(expectedBytes, encodedBytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEmpty_jIuc1_xisY0() {
        PercentCodec codec = new PercentCodec();
        byte[] result = null;
        try {
            result = codec.decode(new byte[0]);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNoEscape_xpOX2_QeVM0() {
        PercentCodec codec = new PercentCodec();
        byte[] input = "Hello World".getBytes();
        byte[] result = null;
        try {
            result = codec.decode(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeEscape_fMRS3_UhtR0() {
        PercentCodec codec = new PercentCodec();
        byte[] input = "Hello%20World".getBytes();
        byte[] expected = "Hello World".getBytes();
        try {
            byte[] result = codec.decode(input);
            assertArrayEquals(expected, result);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }
}