/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.apache.commons.codec.binary.Hex;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Test_Failing {
    private String macsToString(Mac mac) {
        byte[] bytes = mac.doFinal();
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_iMRa0() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertEquals(result.length, 16);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_Xyvb0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        byte[] expected = {0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61};
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_lnmV0() {
        Mac mac = null;
        String valueToDigest = null;
        Mac expectedMac = null;
        Mac actualMac = HmacUtils.updateHmac(mac, valueToDigest);
        assertEquals(expectedMac, actualMac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_qdYx0() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals("0928b614953b0873955286a3398a658", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac2_iAaZ1() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_1", "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals("fbdb1d1b18aa6c08324b7d64b71fb76370690e1d", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac3_yuIQ2() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_224", "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals("896fb1128abbdf196832107cd49ef8", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac4_Xizx3() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_256", "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals("b0344c61d8db38535ca8afceaf0bf12", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac5_SJfh4() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_384", "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals("af45d2e376484031617f78d2b58a6b113d05f78be072806af10b78921e9464e4", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac6_oFVC5() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_512", "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals("87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cabea2b68ef7a07617779871b3a9bb18d7661c9c5c99cb4520359ca3e695645165", new String(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_zwbZ0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = new byte[64]; // expected length of hmacSha512 output
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_NEJX0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        byte[] expected = new byte[64]; // Replace with expected result
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithFile_Etge0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        File file = new File("test.txt");
        String expected = "86fb269d190d2c85f6e046d162d5413";
        String actual = hmacUtils.hmacHex(file);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_tsrw0() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("86fb8a56a8f7da01266518c67aa5242", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_FLHd0() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        String expected = "86fb8a554d262078d79f1158e10b80c";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex2_KdwZ1() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_1", "key".getBytes());
        String expected = "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex3_Raau2() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_224", "key".getBytes());
        String expected = "7509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542ab5e3df163be08e6ca";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex4_Xrtx3() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_256", "key".getBytes());
        String expected = "b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex5_hAMr4() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_384", "key".getBytes());
        String expected = "af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736322445e8e2f027b47540106f0e4934ee323b0c";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex6_Uerh5() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_512", "key".getBytes());
        String expected = "87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cabfa821857539fb976297a467fc2474f1c7a2e4c34217e34344b4f59eb1b17c410";
        String actual = hmacUtils.hmacHex("valueToDigest");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_ejOf0() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac3_CBjf2() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key");
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_IqNo0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = "expected".getBytes();
        byte[] actual = HmacUtils.hmacSha384(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_hCHG0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = "expected".getBytes();
        byte[] actual = HmacUtils.hmacSha256(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_pcrs0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        byte[] expected = new byte[48]; // Replace with expected result
        byte[] actual = HmacUtils.hmacSha384(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_efKB0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = "expected".getBytes();
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_ICOM0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        byte[] expected = new byte[32]; // Replace with expected result
        byte[] actual = HmacUtils.hmacSha256(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_dXhO0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        byte[] expected = new byte[]{-12, 101, -107, 55, -108, -105, 115, 116, 105, 99, 115, 46, 99, 111, 109};
        byte[] actual = HmacUtils.hmacMd5(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullKey_HvKE0() {
        byte[] key = null;
        String algorithm = "HMAC_MD5";
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testValidKey_eNPE1() {
        byte[] key = new byte[16];
        String algorithm = "HMAC_MD5";
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_BsMM0() {
        byte[] key = new byte[]{1, 2, 3};
        byte[] valueToDigest = new byte[]{4, 5, 6};
        byte[] expected = new byte[]{-102, 10, -112, 100, -128, 112, 116, 11};
        byte[] actual = HmacUtils.hmacMd5(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_LDMv0() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        assertEquals("86fb8a554d262078d79f1158e1068c4", hmacUtils.hmacHex(ByteBuffer.wrap("value".getBytes())));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac8_aULo7_BPqE0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        byte[] result = hmacUtils.hmac(new File("value"));
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable3_EAKM2_fid1() {
        String name = "HMAC_MD5";
        boolean expected = true;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable4_Avot3_fid1() {
        String name = "HMAC_SHA_1";
        boolean expected = true;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable5_IWSS4_fid1() {
        String name = "HMAC_SHA_224";
        boolean expected = true;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable6_RXfe5_fid1() {
        String name = "HMAC_SHA_256";
        boolean expected = true;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable7_vSSJ6_fid1() {
        String name = "HMAC_SHA_384";
        boolean expected = true;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable8_Zfah7_fid1() {
        String name = "HMAC_SHA_512";
        boolean expected = true;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_NQWw0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        String valueToDigest = "value";
        byte[] digest = hmacUtils.hmac(valueToDigest);
        String expectedDigest = "86f7e437faa5a7fce15d1ddcb9ae";
        assertEquals(expectedDigest, new String(Hex.encodeHex(digest)));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_Qqgp0_fid1() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "9187e0a263850000000000000000000";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_wMmb0_fid1() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_CqvR0_fid1() {
        byte[] key = new byte[]{1, 2, 3};
        byte[] valueToDigest = new byte[]{4, 5, 6};
        String expected = "68081598222517502650507728316153977956";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_ExHa0_fid1() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "13b36c56822b9272145712373962121";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_sSQf0_fid1() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expectedResult = "65a8e27d8879283831b664bd8b7f0ad43d1a6a7";
        String actualResult = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_uEig0_fid1() {
        String key = "key";
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "0521081285310357";
        String actual = HmacUtils.hmacSha384Hex(key.getBytes(), valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_Fpoj0_fid1() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "556412366544173572059968211371979961168555054159305994568698";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_jvja0_fid1() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "651d06e5a62037446b615b9080684c70d0521071e5274686162617364616261";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_RQPU0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "expected";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_clfd0_fid1() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "020f0c716a32841553562926014159927074016";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }
}