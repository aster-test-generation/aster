/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_StringUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8_jhos0() {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_8);
        String expected = "Hello, World!";
        String actual = StringUtils.newStringUtf8(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16_Gwxl0() {
        String string = "Hello, World!";
        byte[] expected = string.getBytes(StandardCharsets.UTF_16);
        byte[] actual = StringUtils.getBytesUtf16(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_ZMTa0() {
        String string = "Hello, World!";
        byte[] expected = "Hello, World!".getBytes(StandardCharsets.ISO_8859_1);
        byte[] actual = StringUtils.getBytesIso8859_1(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_TXsB0() {
        String string = "Hello, World!";
        byte[] expected = {0x48, 0x00, 0x65, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x6f, 0x00, 0x2c, 0x00, 0x20, 0x00, 0x57, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x6c, 0x00, 0x64, 0x00, 0x21, 0x00};
        byte[] actual = StringUtils.getBytesUtf16Le(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Null_mSmM0() {
        CharSequence cs1 = null;
        CharSequence cs2 = null;
        boolean expected = true;
        boolean actual = StringUtils.equals(cs1, cs2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_SameInstance_ZsQn1() {
        CharSequence cs1 = "Hello";
        CharSequence cs2 = "Hello";
        boolean expected = true;
        boolean actual = StringUtils.equals(cs1, cs2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentLength_bCzD2() {
        CharSequence cs1 = "Hello";
        CharSequence cs2 = "Hello World";
        boolean expected = false;
        boolean actual = StringUtils.equals(cs1, cs2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentContent_afBD3() {
        CharSequence cs1 = "Hello";
        CharSequence cs2 = "World";
        boolean expected = false;
        boolean actual = StringUtils.equals(cs1, cs2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_DifferentContent_CaseSensitive_gJDT4() {
        CharSequence cs1 = "Hello";
        CharSequence cs2 = "world";
        boolean expected = false;
        boolean actual = StringUtils.equals(cs1, cs2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_Zgke0() {
        String string = "Hello, World!";
        ByteBuffer expected = ByteBuffer.wrap(string.getBytes(StandardCharsets.UTF_8));
        ByteBuffer actual = StringUtils.getByteBufferUtf8(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_eveT0() {
        byte[] bytes = new byte[]{65, 66, 67};
        String expected = "ABC";
        String actual = StringUtils.newStringIso8859_1(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAscii_HMhx0() {
        String string = "Hello, World!";
        byte[] expected = "Hello, World!".getBytes(StandardCharsets.US_ASCII);
        byte[] actual = StringUtils.getBytesUsAscii(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithNullBytes_gwvb0() {
        byte[] bytes = null;
        String charsetName = "UTF-8";
        String expected = null;
        String actual = StringUtils.newString(bytes, charsetName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithNonNullBytes_ukMk1() {
        byte[] bytes = new byte[]{97, 98, 99};
        String charsetName = "UTF-8";
        String expected = "abc";
        String actual = StringUtils.newString(bytes, charsetName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_NullString_GfxE0() {
        String string = null;
        String charsetName = "UTF-8";
        byte[] expected = null;
        byte[] actual = StringUtils.getBytesUnchecked(string, charsetName);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8_WDkm0() {
        String string = "Hello, World!";
        byte[] expected = string.getBytes(StandardCharsets.UTF_8);
        byte[] actual = StringUtils.getBytesUtf8(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAscii_namK0() {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.US_ASCII);
        String expected = "Hello, World!";
        String actual = StringUtils.newStringUsAscii(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAsciiWithNullBytes_gHTX2() {
        byte[] bytes = null;
        String expected = null;
        String actual = StringUtils.newStringUsAscii(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAsciiWithEmptyBytes_DGIx3() {
        byte[] bytes = new byte[0];
        String expected = "";
        String actual = StringUtils.newStringUsAscii(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_ValidString_zkSd1_KSGE0() {
        String string = "Hello, World!";
        String charsetName = "UTF-8";
        byte[] expected = string.getBytes(Charset.forName(charsetName));
        byte[] actual = StringUtils.getBytesUnchecked(string, charsetName);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_aKzV0_fid1() {
        byte[] bytes = new byte[]{65, 66, 67};
        String expected = "䅂�";
        String actual = StringUtils.newStringUtf16(bytes);
        assertEquals(expected, actual);
    }
}