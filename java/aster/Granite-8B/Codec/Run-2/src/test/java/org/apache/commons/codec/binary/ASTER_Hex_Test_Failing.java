/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_mYGC0() {
        byte[] data = new byte[]{1, 2, 3};
        char[] expected = {'1', '2', '3'};
        assertArrayEquals(expected, Hex.encodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_OvmJ0() {
        byte[] data = new byte[]{1, 2, 3};
        char[] expected = {'0', '0', '2', '0', '3', '0'};
        assertArrayEquals(expected, Hex.encodeHex(data, 0, 3, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_zDbq0() {
        char[] expected = {'1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'A', 'B', 'C', 'D', 'E', 'F'};
        char[] actual = Hex.encodeHex("1234567890ABCDEF".getBytes(), new char[16]);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_pFQJ0() {
        Hex hex = new Hex("UTF-8");
        ByteBuffer array = ByteBuffer.allocate(10);
        array.put("Hello, World!".getBytes());
        array.flip();
        byte[] expected = "48656C6C6F2C20576F726C6421".getBytes();
        byte[] actual = hex.encode(array);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeHex_wqTA0() {
        byte[] data = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        char[] expected = {'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'};
        char[] actual = Hex.encodeHex(data, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_LlTw0() {
        Hex hex = new Hex("UTF-8");
        byte[] input = "Hello, World!".getBytes();
        byte[] expected = "48656C6C6F2C20576F726C6421".getBytes();
        byte[] actual = hex.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteBufferBoolean_mQGq0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        char[] expected = "0000000000".toCharArray();
        char[] actual = Hex.encodeHex(data, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteBufferBoolean2_bonU1() {
        ByteBuffer data = ByteBuffer.allocate(10);
        char[] expected = "0000000000".toCharArray();
        char[] actual = Hex.encodeHex(data, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_DwRo0() {
        Hex hex = new Hex("UTF-8");
        assertEquals("org.apache.commons.codec.binary.Hex@746259dc[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_uBda1() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("org.apache.commons.codec.binary.Hex@2d992b37[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_DyrT2() {
        Hex hex = new Hex();
        assertEquals("org.apache.commons.codec.binary.Hex@528471d7[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_Fsmg0() throws DecoderException {
        String data = "0123456789ABCDEF";
        byte[] expected = {0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, (byte) 0x0A, (byte) 0x0B, (byte) 0x0C, (byte) 0x0D, (byte) 0x0E, (byte) 0x0F};
        byte[] actual = Hex.decodeHex(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteBufferChartoArray_uYeU0_1() {
        final ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        final char[] toDigits = new char[16];
        final char[] expected = new char[20];
        byteBuffer.put((byte) 0x00);
        expected[0] = '0';
        expected[1] = '0';
        byteBuffer.put((byte) 0xFF);
        expected[2] = 'F';
        expected[3] = 'F';
        byteBuffer.put((byte) 0x55);
        expected[4] = '5';
        expected[5] = '5';
        assertArrayEquals(expected, Hex.encodeHex(byteBuffer, toDigits));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex1_OYxK0_hLut0() {
        char[] data = {'1', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(8, result);
            for (int i = 0; i < 8; i++) {
                assertEquals(i, out[i]);
            }
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex2_Iisq1_EBZb0() {
        char[] data = {'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[4];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(4, result);
            for (int i = 0; i < 3; i++) {
                assertEquals(i + 10, out[i]);
            }
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex3_mySK2_YCyT0() {
        char[] data = {'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[4];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(4, result);
            for (int i = 0; i < 3; i++) {
                assertEquals(i + 10, out[i]);
            }
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex4_SPdz3_dFUr0() {
        char[] data = {'1', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(8, result);
            for (int i = 0; i < 8; i++) {
                assertEquals(i, out[i]);
            }
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_sTYR0_NusA0() {
        char[] data = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] expected = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        try {
            byte[] actual = Hex.decodeHex(data);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_VNxO0_aMYT0() throws DecoderException {
        Hex hex = new Hex("UTF-8");
        ByteBuffer buffer = ByteBuffer.wrap(new byte[]{(byte) 0x48, (byte) 0x65, (byte) 0x6C, (byte) 0x6C, (byte) 0x6F});
        byte[] expected = "Hello".getBytes(StandardCharsets.UTF_8);
        byte[] actual = hex.decode(buffer);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharArray_MOdE3_tlid0() {
        Hex hex = new Hex();
        char[] input = "48656C6C6F20576F726C64".toCharArray();
        char[] expected = "Hello World".toCharArray();
        try {
            char[] actual = (char[]) hex.decode(input);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_OvmJ0_fid1() {
        byte[] data = new byte[]{1, 2, 3};
        char[] expected = {'1', '0', '2', '0', '3', '0'};
        assertArrayEquals(expected, Hex.encodeHex(data, 0, 3, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_zJYq0_fid1() {
        ByteBuffer data = ByteBuffer.allocate(4);
        data.putInt(123456789);
        data.flip();
        String encodedString = Hex.encodeHexString(data, true);
        assertEquals("30333633343536373839", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_RvVY0_fid1() {
        ByteBuffer data = ByteBuffer.allocate(10);
        String expected = "0000000000";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_DwRo0_fid1() {
        Hex hex = new Hex("UTF-8");
        assertEquals("Hex[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_uBda1_fid1() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("Hex[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_DyrT2_fid1() {
        Hex hex = new Hex();
        assertEquals("Hex[charsetName=null]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_NGrW0_fid1() {
        byte[] data = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        char[] out = new char[data.length * 2];
        Hex.encodeHex(data, 0, data.length, false, out, 0);
        assertEquals("000102030405060708090a0b0c0d0e0f", new String(out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteBuffer_vKXa1_ZpZN0_fid1() {
        Hex hex = new Hex("UTF-8");
        ByteBuffer input = ByteBuffer.wrap("Hello, World!".getBytes());
        String expectedOutput = "48656C6C6F2C20576F726C6421";
        byte[] actualOutput = hex.encode(input);
        assertEquals(expectedOutput, new String(actualOutput, StandardCharsets.UTF_8));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex1_OYxK0_hLut0_fid1() {
        char[] data = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(8, result);
            for (int i = 0; i < 8; i++) {
                assertEquals(i, out[i]);
            }
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex2_Iisq1_EBZb0_fid1() {
        char[] data = {'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[4];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(4, result);
            for (int i = 0; i < 4; i++) {
                assertEquals(i + 10, out[i]);
            }
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex3_mySK2_YCyT0_fid1() {
        char[] data = {'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[4];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(4, result);
            for (int i = 0; i < 4; i++) {
                assertEquals(i + 10, out[i]);
            }
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex4_SPdz3_dFUr0_fid1() {
        char[] data = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(8, result);
            for (int i = 0; i < 8; i++) {
                assertEquals(i, out[i]);
            }
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteBufferChartoArray_uYeU0() {
        final ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        final char[] toDigits = new char[16];
        final char[] expected = new char[20];
        byteBuffer.put((byte) 0x00);
        expected[0] = '0';
        expected[1] = '0';
        assertArrayEquals(expected, Hex.encodeHex(byteBuffer, toDigits));
        byteBuffer.put((byte) 0xFF);
        expected[2] = 'F';
        expected[3] = 'F';
        assertArrayEquals(expected, Hex.encodeHex(byteBuffer, toDigits));
        byteBuffer.put((byte) 0x55);
        expected[4] = '5';
        expected[5] = '5';
        assertArrayEquals(expected, Hex.encodeHex(byteBuffer, toDigits));
    }
}