/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Test_Failing {
    private static long fmix64(long hash) {
        hash ^= hash >>> 33;
        hash *= 0xff51afd7ed558ccdL;
        hash ^= hash >>> 33;
        hash *= 0xc4ceb9fe1a85ec53L;
        hash ^= hash >>> 33;
        return hash;
    }

    private static int fmix32(int hash)
    {
        hash ^= hash >>> 16;
        hash *= 0x85ebca6b;
        hash ^= hash >>> 13;
        hash *= 0xc2b2ae35;
        hash ^= hash >>> 16;
        return hash;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_pkit0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int length = 5;
        int seed = 0;
        int expected = 10061784;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_Bjnu0() {
        byte[] data = new byte[10];
        int result = MurmurHash3.hash32x86(data, 0, data.length, 0);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_WNnx0() {
        String data = "Hello, World!";
        long[] expected = {341642435902502899L, 728011290103821497L};
        long[] actual = MurmurHash3.hash128(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_JtfC0() {
        long hash = MurmurHash3.hash64(1234567890L);
        assertEquals(3573547971136286041L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_VMge0_2() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 0);
        assertEquals(0x1b87359307337037L, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_VMge0_3() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 0);
        assertEquals(0xd4735e3a1e47369eL, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_xVjj0_2() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(0x538484ce9b3ad07L, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_xVjj0_3() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(0x2b992ddfa149ff2L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_SMKq0_1() {
        byte[] data = new byte[16];
        for (int i = 0; i < 16; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128(data, 0, 16, 0);
        assertEquals(3334445556667778L, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_SMKq0_2() {
        byte[] data = new byte[16];
        for (int i = 0; i < 16; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128(data, 0, 16, 0);
        assertEquals(1234567890123456L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_mkmN0_1() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128(data, 0, 16, 0);
        assertEquals(result[0], 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_mkmN0_2() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128(data, 0, 16, 0);
        assertEquals(result[1], 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithSingleByteData_VkKT1() {
        byte[] data = new byte[1];
        data[0] = 1;
        int offset = 0;
        int length = 1;
        int seed = 0;
        long hash = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(368934881, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_fhYS0() {
        byte[] data = new byte[8];
        int offset = 0;
        int length = 8;
        int seed = 0;
        long hash = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(3689348814741910323L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithOffset_OtXg1() {
        byte[] data = new byte[16];
        int offset = 8;
        int length = 8;
        int seed = 0;
        long hash = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(287019155015872000L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_TeEr0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = 5;
        long expected = 1454934812253201791L;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithEmptyData_EdNO1() {
        byte[] data = new byte[0];
        int offset = 0;
        int length = 0;
        long expected = 0L;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithNullData_fYWa2() {
        byte[] data = null;
        int offset = 0;
        int length = 0;
        long expected = 0L;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_oNpz0() {
        byte[] data = new byte[4];
        int offset = 0;
        int length = 4;
        int seed = 0;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_Tsnl1() {
        byte[] data = new byte[4];
        int offset = 0;
        int length = 4;
        int seed = 1;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(16777619, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_lSek0() {
        byte[] data = new byte[4];
        int offset = 0;
        int length = 4;
        int seed = 0;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(hash, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_vofS1() {
        byte[] data = new byte[8];
        int offset = 4;
        int length = 4;
        int seed = 0;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(hash, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bTIK0() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 0;
        int expectedHash = 0; // Replace with expected hash value
        int actualHash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_JkRF0() {
        long data = 1234567890L;
        int expected = 289738922;
        int actual = MurmurHash3.hash32(data, MurmurHash3.DEFAULT_SEED);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_1() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_2() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(16777619, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_3() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(33554435, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_4() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(50331647, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_5() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(67108863, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_6() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(83886079, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_7() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(100663295, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_8() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(117440511, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_9() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(134217727, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_10() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(150994943, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_11() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(167772159, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_12() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(184549375, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_13() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(201326591, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_14() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(218103807, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_15() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(234881023, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_16() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(251658239, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_17() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(268435455, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_18() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(285212671, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_19() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(301989887, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_20() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(318767103, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_21() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(335544319, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_22() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(352321535, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_23() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(369098751, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_24() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(385875967, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_25() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(402653183, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_26() {
        int hash = MurmurHash3.hash32(0L, 0);
        hash = MurmurHash3.hash32(1L, 0);
        hash = MurmurHash3.hash32(2L, 0);
        hash = MurmurHash3.hash32(3L, 0);
        hash = MurmurHash3.hash32(4L, 0);
        hash = MurmurHash3.hash32(5L, 0);
        hash = MurmurHash3.hash32(6L, 0);
        hash = MurmurHash3.hash32(7L, 0);
        hash = MurmurHash3.hash32(8L, 0);
        hash = MurmurHash3.hash32(9L, 0);
        hash = MurmurHash3.hash32(10L, 0);
        hash = MurmurHash3.hash32(11L, 0);
        hash = MurmurHash3.hash32(12L, 0);
        hash = MurmurHash3.hash32(13L, 0);
        hash = MurmurHash3.hash32(14L, 0);
        hash = MurmurHash3.hash32(15L, 0);
        hash = MurmurHash3.hash32(16L, 0);
        hash = MurmurHash3.hash32(17L, 0);
        hash = MurmurHash3.hash32(18L, 0);
        hash = MurmurHash3.hash32(19L, 0);
        hash = MurmurHash3.hash32(20L, 0);
        hash = MurmurHash3.hash32(21L, 0);
        hash = MurmurHash3.hash32(22L, 0);
        hash = MurmurHash3.hash32(23L, 0);
        hash = MurmurHash3.hash32(24L, 0);
        hash = MurmurHash3.hash32(25L, 0);
        hash = MurmurHash3.hash32(26L, 0);
        assertEquals(419430399, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_sSJx0() {
        int hash = MurmurHash3.hash32(0L, 0);
        assert hash == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_BMBD0() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 0;
        int hash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(hash, 16777619);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithOffset_zXDl1() {
        byte[] data = new byte[10];
        int offset = 2;
        int length = 10;
        int seed = 0;
        int hash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(hash, 16777619);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_vdGj0() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 16;
        int seed = 0;
        int expectedHash = 0; // Replace with expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_MLUe0() {
        int hash = MurmurHash3.hash32(1234567890L, 9876543210L, 0);
        assertEquals(1794895138, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_cEnG0() {
        int hash = MurmurHash3.hash32(1234567890L, 9876543210L, 0);
        assertEquals(137511573, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Adej0() {
        long data1 = 1234567890L;
        long data2 = 9876543210L;
        int expected = 123456789;
        int actual = MurmurHash3.hash32(data1, data2);
        assert actual == expected;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SSxA0() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0;
        int expected = 0; // Replace with expected value
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_mVOv0_uMeo0_2() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 0);
        assertEquals(0x6a09e667bb67ae9L, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_mVOv0_uMeo0_3() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 0);
        assertEquals(0xd37106558d3c2b2eL, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_GRCY0_paef0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        long[] expected = new long[]{1234567890123456789L, -7736904318226812929L};
        long[] actual = MurmurHash3.hash128(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_Bjnu0_fid1() {
        byte[] data = new byte[10];
        int result = MurmurHash3.hash32x86(data, 539065883, data.length, 539065883);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_WNnx0_fid1() {
        String data = "Hello, World!";
        long[] expected = {-9006594328718479516L, 728011290103821497L};
        long[] actual = MurmurHash3.hash128(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_oNpz0_fid1() {
        byte[] data = new byte[4];
        int offset = 593689054;
        int length = 4;
        int seed = 593689054;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_lSek0_fid1() {
        byte[] data = new byte[4];
        int offset = 593689054;
        int length = 4;
        int seed = 593689054;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(hash, 593689054);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_vofS1_fid1() {
        byte[] data = new byte[8];
        int offset = 4;
        int length = 4;
        int seed = 593689054;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(hash, 593689054);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bTIK0_fid1() {
        byte[] data = new byte[10];
        int offset = 539065883;
        int length = 10;
        int seed = 539065883;
        int expectedHash = 539065883; // Replace with expected hash value
        int actualHash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0_1_fid1() {
        int hash = MurmurHash3.hash32(0L, -1508236611);
        hash = MurmurHash3.hash32(1L, -1508236611);
        hash = MurmurHash3.hash32(2L, -1508236611);
        hash = MurmurHash3.hash32(3L, -1508236611);
        hash = MurmurHash3.hash32(4L, -1508236611);
        hash = MurmurHash3.hash32(5L, -1508236611);
        hash = MurmurHash3.hash32(6L, -1508236611);
        hash = MurmurHash3.hash32(7L, -1508236611);
        hash = MurmurHash3.hash32(8L, -1508236611);
        hash = MurmurHash3.hash32(9L, -1508236611);
        hash = MurmurHash3.hash32(10L, -1508236611);
        hash = MurmurHash3.hash32(11L, -1508236611);
        hash = MurmurHash3.hash32(12L, -1508236611);
        hash = MurmurHash3.hash32(13L, -1508236611);
        hash = MurmurHash3.hash32(14L, -1508236611);
        hash = MurmurHash3.hash32(15L, -1508236611);
        hash = MurmurHash3.hash32(16L, -1508236611);
        hash = MurmurHash3.hash32(17L, -1508236611);
        hash = MurmurHash3.hash32(18L, -1508236611);
        hash = MurmurHash3.hash32(19L, -1508236611);
        hash = MurmurHash3.hash32(20L, -1508236611);
        hash = MurmurHash3.hash32(21L, -1508236611);
        hash = MurmurHash3.hash32(22L, -1508236611);
        hash = MurmurHash3.hash32(23L, -1508236611);
        hash = MurmurHash3.hash32(24L, -1508236611);
        hash = MurmurHash3.hash32(25L, -1508236611);
        hash = MurmurHash3.hash32(26L, -1508236611);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_vdGj0_fid1() {
        byte[] data = new byte[16];
        int offset = -2127245832;
        int length = 16;
        int seed = -2127245832;
        int expectedHash = -2127245832; // Replace with expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SSxA0_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 539065883;
        int expected = 539065883; // Replace with expected value
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_GRCY0_paef0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        long[] expected = new long[]{1963771759308455557L, -7736904318226812929L};
        long[] actual = MurmurHash3.hash128(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_VMge0() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 0);
        assertEquals(2, result.length);
        assertEquals(0x1b87359307337037L, result[0]);
        assertEquals(0xd4735e3a1e47369eL, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_xVjj0() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(2, result.length);
        assertEquals(0x538484ce9b3ad07L, result[0]);
        assertEquals(0x2b992ddfa149ff2L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_SMKq0() {
        byte[] data = new byte[16];
        for (int i = 0; i < 16; i++) {
            data[i] = (byte) i;
        }
        long[] result = MurmurHash3.hash128(data, 0, 16, 0);
        assertEquals(3334445556667778L, result[0]);
        assertEquals(1234567890123456L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_mkmN0() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128(data, 0, 16, 0);
        assertEquals(result[0], 0);
        assertEquals(result[1], 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_SQyE0() {
        int hash = MurmurHash3.hash32(0L, 0);
        assertEquals(0, hash);
        hash = MurmurHash3.hash32(1L, 0);
        assertEquals(16777619, hash);
        hash = MurmurHash3.hash32(2L, 0);
        assertEquals(33554435, hash);
        hash = MurmurHash3.hash32(3L, 0);
        assertEquals(50331647, hash);
        hash = MurmurHash3.hash32(4L, 0);
        assertEquals(67108863, hash);
        hash = MurmurHash3.hash32(5L, 0);
        assertEquals(83886079, hash);
        hash = MurmurHash3.hash32(6L, 0);
        assertEquals(100663295, hash);
        hash = MurmurHash3.hash32(7L, 0);
        assertEquals(117440511, hash);
        hash = MurmurHash3.hash32(8L, 0);
        assertEquals(134217727, hash);
        hash = MurmurHash3.hash32(9L, 0);
        assertEquals(150994943, hash);
        hash = MurmurHash3.hash32(10L, 0);
        assertEquals(167772159, hash);
        hash = MurmurHash3.hash32(11L, 0);
        assertEquals(184549375, hash);
        hash = MurmurHash3.hash32(12L, 0);
        assertEquals(201326591, hash);
        hash = MurmurHash3.hash32(13L, 0);
        assertEquals(218103807, hash);
        hash = MurmurHash3.hash32(14L, 0);
        assertEquals(234881023, hash);
        hash = MurmurHash3.hash32(15L, 0);
        assertEquals(251658239, hash);
        hash = MurmurHash3.hash32(16L, 0);
        assertEquals(268435455, hash);
        hash = MurmurHash3.hash32(17L, 0);
        assertEquals(285212671, hash);
        hash = MurmurHash3.hash32(18L, 0);
        assertEquals(301989887, hash);
        hash = MurmurHash3.hash32(19L, 0);
        assertEquals(318767103, hash);
        hash = MurmurHash3.hash32(20L, 0);
        assertEquals(335544319, hash);
        hash = MurmurHash3.hash32(21L, 0);
        assertEquals(352321535, hash);
        hash = MurmurHash3.hash32(22L, 0);
        assertEquals(369098751, hash);
        hash = MurmurHash3.hash32(23L, 0);
        assertEquals(385875967, hash);
        hash = MurmurHash3.hash32(24L, 0);
        assertEquals(402653183, hash);
        hash = MurmurHash3.hash32(25L, 0);
        assertEquals(419430399, hash);
        hash = MurmurHash3.hash32(26L, 0);
    }
}