/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RefinedSoundex_Test_Passing {
    private RefinedSoundex refinedSoundex;
    private RefinedSoundex refinedSoundex1;
    private RefinedSoundex refinedSoundex2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithNull_qQVZ1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = null;
        String expected = null;
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithEmpty_SxNi2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "";
        String expected = "";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_OMdZ0() {
        refinedSoundex = new RefinedSoundex();
        refinedSoundex1 = new RefinedSoundex("mapping");
        refinedSoundex2 = new RefinedSoundex(new char[]{'a', 'b', 'c'});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_zpIH0_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "RefinedSoundex";
        String expected = "R9020806308605";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_UpcO0_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "RefinedSoundex";
        String expected = "R9020806308605";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_GmNq0_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char mappingCode = refinedSoundex.getMappingCode('A');
        assertEquals('m', mappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode2_mhpS1_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char mappingCode = refinedSoundex.getMappingCode('a');
        assertEquals('m', mappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode3_JkDJ2_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char mappingCode = refinedSoundex.getMappingCode('B');
        assertEquals('a', mappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode4_kpXH3_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char mappingCode = refinedSoundex.getMappingCode('b');
        assertEquals('a', mappingCode);
    }
}