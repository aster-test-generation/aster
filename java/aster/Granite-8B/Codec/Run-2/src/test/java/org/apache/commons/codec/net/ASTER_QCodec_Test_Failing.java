/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncoding_GMAt1() {
        QCodec qCodec = new QCodec("unsupportedEncoding");
        try {
            qCodec.decode("encodedString");
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Unsupported encoding"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonEmptyBytes_gOSO2_2() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithCharset_EQYl5_2() {
        QCodec qCodec = new QCodec("UTF-8");
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_YyFt0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String encodedStr = qCodec.encode(sourceStr, "UTF-8");
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_CZgj0() {
        QCodec qCodec = new QCodec("UTF-8");
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks3_GqlY2() {
        QCodec qCodec = new QCodec();
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_BdNO0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String encodedStr = qCodec.encode(sourceStr);
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_fauo1() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String sourceStr = "Hello, World!";
        String encodedStr = qCodec.encode(sourceStr);
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetObject_QUte2() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String sourceStr = "Hello, World!";
        String encodedStr = qCodec.encode(sourceStr, qCodec.getCharset());
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharset_ohPO3() {
        QCodec qCodec = new QCodec("InvalidCharset");
        String sourceStr = "Hello, World!";
        try {
            qCodec.encode(sourceStr);
            fail("EncoderException expected");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("InvalidCharset"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceStr_QXXi4() {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = null;
        try {
            qCodec.encode(sourceStr);
            fail("EncoderException expected");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("sourceStr"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_lHQE0_Ocyk0() {
        QCodec qCodec = new QCodec("UTF-8");
        String decodedString = null;
        try {
            decodedString = qCodec.decode("encodedString");
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("decodedString", decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_olze1_iMEs0() {
        QCodec qCodec = new QCodec();
        String input = "Hello, World!";
        String encoded = null;
        try {
            encoded = qCodec.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        Assertions.assertEquals("Hello, World!", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptySourceStr_WZON5_IbDR0() {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "";
        String encodedStr = "";
        try {
            encodedStr = qCodec.encode(sourceStr);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_YyFt0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "=?UTF-8?Q?Hello, World!?=";
        String encodedStr = qCodec.encode(sourceStr, "UTF-8");
        assertEquals("=?UTF-8?Q?Hello, World!?=", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_BdNO0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "=?UTF-8?Q?Hello, World!?=";
        String encodedStr = qCodec.encode(sourceStr);
        assertEquals("=?UTF-8?Q?Hello, World!?=", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_fauo1_fid1() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String sourceStr = "=?UTF-8?Q?Hello, World!?=";
        String encodedStr = qCodec.encode(sourceStr);
        assertEquals("=?UTF-8?Q?Hello, World!?=", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetObject_QUte2_fid1() throws EncoderException {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String sourceStr = "=?UTF-8?Q?Hello, World!?=";
        String encodedStr = qCodec.encode(sourceStr, qCodec.getCharset());
        assertEquals("=?UTF-8?Q?Hello, World!?=", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonEmptyBytes_gOSO2() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertNotSame(bytes, result);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithCharset_EQYl5() {
        QCodec qCodec = new QCodec("UTF-8");
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertNotSame(bytes, result);
        assertArrayEquals(new byte[]{1, 2, 3}, result);
    }
}