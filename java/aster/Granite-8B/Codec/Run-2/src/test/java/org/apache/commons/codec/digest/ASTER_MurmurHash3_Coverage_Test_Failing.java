/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Coverage_Test_Failing {
    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Xuua0() {
        byte[] data = new byte[10];
        int length = 10;
        int expected = 0; // Replace with expected result
        int actual = MurmurHash3.hash32(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64SwitchCase1_CaQr0() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 16;
        int seed = 0;
        long[] expected = new long[2];
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assert expected[0] == actual[0];
        assert expected[1] == actual[1];
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchCase_AmKc0() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 15;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators_OYEa1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 16;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators2_tRWo2() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 17;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators3_TYnM3() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 18;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators4_DBlJ4() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 19;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators5_qkPq5() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 20;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators6_arYC6() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 21;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators7_AwCA7() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 22;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators8_lYae8() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 23;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators2_tRWo2_1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 17;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators2_tRWo2_2() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 17;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators3_TYnM3_1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 18;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators3_TYnM3_2() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 18;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators4_DBlJ4_1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 19;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators4_DBlJ4_2() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 19;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators5_qkPq5_1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 20;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators5_qkPq5_2() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 20;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators6_arYC6_1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 21;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators6_arYC6_2() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 21;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators7_AwCA7_1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 22;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators7_AwCA7_2() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 22;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators8_lYae8_1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 23;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators8_lYae8_2() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 23;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchCase_AmKc0_1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 15;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchCase_AmKc0_2() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 15;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators_OYEa1_1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 16;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testK2BitwiseOperators_OYEa1_2() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 16;
        int index = offset + (length >> 4) << 4;
        long[] result = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(0, result[1]);
    }
}