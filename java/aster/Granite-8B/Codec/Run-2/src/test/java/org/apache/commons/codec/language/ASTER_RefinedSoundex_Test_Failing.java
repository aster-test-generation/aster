/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RefinedSoundex_Test_Failing {
    private RefinedSoundex refinedSoundex;
    private RefinedSoundex refinedSoundex1;
    private RefinedSoundex refinedSoundex2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_zpIH0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "RefinedSoundex";
        String expected = "R162";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFirstLetterOnly_sdfw4() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "RefinedSoundex";
        String expected = "R";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_xFFO1() throws EncoderException {
        int result = refinedSoundex.difference("string1", "string2");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceWithNull_AVnM2() throws EncoderException {
        int result = refinedSoundex.difference(null, "string2");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceWithEmpty_cbay3() throws EncoderException {
        int result = refinedSoundex.difference("", "string2");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceWithMapping_Luhh4() throws EncoderException {
        int result = refinedSoundex1.difference("string1", "string2");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceWithCustomMapping_FkaV5() throws EncoderException {
        int result = refinedSoundex2.difference("string1", "string2");
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_wqsg0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String input = "input";
        String expectedOutput = "expectedOutput";
        String actualOutput = refinedSoundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharArray_TTXX1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        String input = "input";
        String expectedOutput = "expectedOutput";
        String actualOutput = refinedSoundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_UpcO0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "RefinedSoundex";
        String expected = "R162";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode_GmNq0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char mappingCode = refinedSoundex.getMappingCode('A');
        assertEquals('0', mappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode2_mhpS1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char mappingCode = refinedSoundex.getMappingCode('a');
        assertEquals('0', mappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode3_JkDJ2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char mappingCode = refinedSoundex.getMappingCode('B');
        assertEquals('0', mappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCode4_kpXH3() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char mappingCode = refinedSoundex.getMappingCode('b');
        assertEquals('0', mappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFirstLetterAndMappingCode_dbjB5_fid2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "RefinedSoundex";
        String expected = "R1";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }
}