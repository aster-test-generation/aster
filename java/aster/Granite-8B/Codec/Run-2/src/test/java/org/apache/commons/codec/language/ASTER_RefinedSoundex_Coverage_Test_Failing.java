/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RefinedSoundex_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeWithValidIndex_jbMq2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char c = '0';
        char result = refinedSoundex.getMappingCode(c);
        assertEquals('0', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringObject_Xigb1_fid1() throws org.apache.commons.codec.EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String obj = "Hello";
        String result = refinedSoundex.encode(obj);
        assertEquals("H416", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullObject_MsnC2_fid1() throws org.apache.commons.codec.EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String obj = null;
        String result = refinedSoundex.encode(obj);
        assertEquals("000", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeWithInvalidIndex_PVzz1_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char c = 'A';
        char result = refinedSoundex.getMappingCode(c);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeWithValidIndex_jbMq2_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        char c = 'A';
        char result = refinedSoundex.getMappingCode(c);
        assertEquals('A', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_wfnw0_vxcy0_fid1() throws org.apache.commons.codec.EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String obj = new String();
        String result = refinedSoundex.encode(obj);
        assertEquals("000", result);
    }
}