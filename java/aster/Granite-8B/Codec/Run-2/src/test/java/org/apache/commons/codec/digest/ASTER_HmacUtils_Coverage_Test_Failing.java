/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_yZUC0() throws IOException {
        byte[] key = new byte[0];
        InputStream valueToDigest = null;
        byte[] expected = new byte[0];
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_LHST0() throws IOException {
        byte[] key = new byte[16];
        InputStream valueToDigest = null;
        byte[] expected = new byte[20]; // expected length of HMAC-SHA1 digest
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_eLNa0() throws IOException {
        byte[] key = new byte[0];
        InputStream valueToDigest = null;
        byte[] expected = new byte[0];
        byte[] actual = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }
}