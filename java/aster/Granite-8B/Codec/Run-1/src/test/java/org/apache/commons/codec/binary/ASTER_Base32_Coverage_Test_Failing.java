/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base32_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonNullArray_ATjX1() {
        Base32 base32 = new Base32();
        byte[] input = {1, 2, 3};
        byte[] expectedOutput = {};
        byte[] actualOutput = base32.encode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray2_SPuj1() throws DecoderException {
        Base32 base32 = new Base32();
        byte[] input = new byte[1];
        byte[] expected = new byte[1];
        byte[] actual = base32.decode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray3_sxlq2() throws DecoderException {
        Base32 base32 = new Base32();
        byte[] input = new byte[2];
        byte[] expected = new byte[2];
        byte[] actual = base32.decode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray4_WACP3() throws DecoderException {
        Base32 base32 = new Base32();
        byte[] input = new byte[3];
        byte[] expected = new byte[3];
        byte[] actual = base32.decode(input);
        assertArrayEquals(expected, actual);
    }
}