/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Md5Crypt_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_dQgt0() {
        byte[] keyBytes = new byte[16]; // Assuming keyBytes is initialized with appropriate values
        String expected = "$apr1$6Lop.H3n$/GiNVgh0OR4M7vm92FGyE0"; // Assuming the expected result is calculated correctly
        String actual = Md5Crypt.apr1Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_uNqE0() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = "salt";
        String prefix = "prefix";
        Random random = new Random();
        String expected = "prefixsalt$";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt2_INhb1() {
        byte[] keyBytes = new byte[]{4, 5, 6};
        String salt = "salt2";
        String prefix = "prefix2";
        Random random = new Random();
        String expected = "prefix2salt2$";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt3_ipcR2() {
        byte[] keyBytes = new byte[]{7, 8, 9};
        String salt = "salt3";
        String prefix = "prefix3";
        Random random = new Random();
        String expected = "prefix3salt3$";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt4_RhzZ3() {
        byte[] keyBytes = new byte[]{10, 11, 12};
        String salt = "salt4";
        String prefix = "prefix4";
        Random random = new Random();
        String expected = "prefix4salt4$";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt5_fNeP4() {
        byte[] keyBytes = new byte[]{13, 14, 15};
        String salt = "salt5";
        String prefix = "prefix5";
        Random random = new Random();
        String expected = "prefix5salt5$";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt6_cgPY5() {
        byte[] keyBytes = new byte[]{16, 17, 18};
        String salt = "salt6";
        String prefix = "prefix6";
        Random random = new Random();
        String expected = "prefix6salt6$";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt7_IGBz6() {
        byte[] keyBytes = new byte[]{19, 20, 21};
        String salt = "salt7";
        String prefix = "prefix7";
        Random random = new Random();
        String expected = "prefix7salt7$";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt8_xKsT7() {
        byte[] keyBytes = new byte[]{22, 23, 24};
        String salt = "salt8";
        String prefix = "prefix8";
        Random random = new Random();
        String expected = "prefix8salt8$";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt9_ZIUF8() {
        byte[] keyBytes = new byte[]{25, 26, 27};
        String salt = "salt9";
        String prefix = "prefix9";
        Random random = new Random();
        String expected = "prefix9salt9$";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt10_TDNh9() {
        byte[] keyBytes = new byte[]{28, 29, 30};
        String salt = "salt10";
        String prefix = "prefix10";
        Random random = new Random();
        String expected = "prefix10salt10$";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_hzdP0() {
        String keyBytes = "Hello, World!";
        String expected = "$apr1$8mwB.2CV$TXvrngBnSRPNnw/UvZq3q.";
        String actual = Md5Crypt.apr1Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_bIZq0() {
        byte[] keyBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        String salt = "1234567890";
        String expected = "5f4dcc3b449da2a502b42174b78c96a";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_czah0() {
        byte[] keyBytes = new byte[16];
        String salt = "salt";
        String prefix = "prefix";
        String expected = "prefix0123456789ab";
        assertEquals(expected, Md5Crypt.md5Crypt(keyBytes, salt, prefix));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullKeyBytes_Fset1() {
        byte[] keyBytes = null;
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, random);
        assertEquals("$1$ RandomSalt$RandomHash", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyKeyBytes_PyvI2() {
        byte[] keyBytes = new byte[0];
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, random);
        assertEquals("$1$KwsZAotq$hIMJdr0UGheCeu374Ux3t0", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithNullRandom_Thqj3() {
        byte[] keyBytes = new byte[10];
        Random random = null;
        String result = Md5Crypt.md5Crypt(keyBytes, random);
        assertEquals("$1$ RandomSalt$RandomHash", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_fERD0() {
        byte[] keyBytes = new byte[16];
        Random random = new Random();
        String expected = "$apr1$dEtNwrR3$7S2xBEBfgXRrACdVhEG5P1";
        String actual = Md5Crypt.apr1Crypt(keyBytes, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_dQgt0_fid1() {
        byte[] keyBytes = new byte[16]; // Assuming keyBytes is initialized with appropriate values
        String expected = "prefixRandomSalt"; // Assuming the expected result is calculated correctly
        String actual = Md5Crypt.apr1Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_hzdP0_fid1() {
        String keyBytes = "Hello, World!";
        String expected = "$1$d9fkez7$0c7Se8MM36dU1zX1f7Q1";
        String actual = Md5Crypt.apr1Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_czah0_fid1() {
        byte[] keyBytes = new byte[16];
        String salt = "salt";
        String prefix = "prefix";
        String expected = "0123456789abcdef";
        assertEquals(expected, Md5Crypt.md5Crypt(keyBytes, salt, prefix));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_jGbL0() {
        byte[] keyBytes = new byte[16];
        String expected = "md5Crypt";
        String actual = Md5Crypt.md5Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_apr1Crypt_1_GGUB0_fid1() {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = "abc";
        String expected = "$1$abc$356a192b7913b04c5457483a6f4f23997f2d0a";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_apr1Crypt_2_WHfD1_fid1() {
        byte[] keyBytes = new byte[]{4, 5, 6};
        String salt = "def";
        String expected = "$1$def$0123456789abcdef0123456789abcdef012345";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_apr1Crypt_3_PnLN2_fid1() {
        byte[] keyBytes = new byte[]{7, 8, 9};
        String salt = "ghi";
        String expected = "$1$ghi$5678901234567890123456789012345678901";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5CryptWithEmptyKeyBytes_PyvI2_fid1() {
        byte[] keyBytes = new byte[0];
        Random random = new Random();
        String result = Md5Crypt.md5Crypt(keyBytes, random);
        assertEquals("$1$ RandomSalt$RandomHash", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_fERD0_fid1() {
        byte[] keyBytes = new byte[16];
        Random random = new Random();
        String expected = "apr1$";
        String actual = Md5Crypt.apr1Crypt(keyBytes, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_iAtx0_fid1() {
        String keyBytes = "Hello, World!";
        String salt = "randomSalt";
        String expected = "66592a2062d1a318a8b1d0c41160b7e";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }
}