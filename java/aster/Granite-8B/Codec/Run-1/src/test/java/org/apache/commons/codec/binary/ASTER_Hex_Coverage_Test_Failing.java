/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_whenOutputArrayIsTooSmall_throwsDecoderException_wGiV0() {
        byte[] out = new byte[1];
        char[] data = new char[2];
        try {
            Hex.decodeHex(data, out, 0);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Output array is not large enough to accommodate decoded data.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_whenOutputArrayIsJustRightSize_returnsCorrectly_fdmK1_1() throws org.apache.commons.codec.DecoderException {
        byte[] out = new byte[2];
        char[] data = new char[4];
        int result = Hex.decodeHex(data, out, 0);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_whenOutputArrayIsJustRightSize_returnsCorrectly_fdmK1_2() throws org.apache.commons.codec.DecoderException {
        byte[] out = new byte[2];
        char[] data = new char[4];
        int result = Hex.decodeHex(data, out, 0);
        assertArrayEquals(new byte[]{0x0F}, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStringObject_GEVy0() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        hex.decode("test".toCharArray());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArrayObject_PkNU1() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        hex.decode(new byte[]{1, 2, 3});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBufferObject_qwkD2() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        hex.decode(ByteBuffer.allocate(10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharArrayObject_tjJZ3() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        hex.decodeHex(new char[]{1, 2, 3});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithObject_UROV5() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        hex.decode(new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteBuffer_xdMA1() throws org.apache.commons.codec.EncoderException {
        Hex hex = new Hex();
        ByteBuffer input = ByteBuffer.wrap(new byte[]{0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21});
        byte[] expected = {0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21};
        byte[] actual = hex.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_qCJy2() throws org.apache.commons.codec.EncoderException {
        Hex hex = new Hex();
        byte[] input = {0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21};
        byte[] expected = {0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21};
        byte[] actual = hex.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_ZfZK0_FvgY0() throws org.apache.commons.codec.EncoderException {
        Hex hex = new Hex();
        String input = "Hello, World!";
        byte[] expected = {0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21};
        byte[] actual = hex.encode(input.getBytes(hex.getCharset()));
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_FBBC3_xIYl0() throws org.apache.commons.codec.EncoderException {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        String input = "Hello, World!";
        byte[] expected = {0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21};
        byte[] actual = hex.encode(input.getBytes(Charset.forName("UTF-8")));
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetConstructor_oWoc4_zHbN0() throws org.apache.commons.codec.EncoderException {
        Hex hex = new Hex("UTF-8");
        String input = "Hello, World!";
        byte[] expected = {0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21};
        byte[] actual = hex.encode(input.getBytes(hex.getCharset()));
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_whenOutputArrayIsJustRightSize_returnsCorrectly_fdmK1() throws org.apache.commons.codec.DecoderException {
        byte[] out = new byte[2];
        char[] data = new char[4];
        int result = Hex.decodeHex(data, out, 0);
        assertEquals(1, result);
        assertArrayEquals(new byte[]{0x0F}, out);
    }
}