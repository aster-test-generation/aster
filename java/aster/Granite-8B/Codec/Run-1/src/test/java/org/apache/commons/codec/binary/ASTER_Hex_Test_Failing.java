/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex1_AiDc0() {
        char[] data = {'1', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(8, result);
            assertArrayEquals(new byte[]{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7}, out);
        } catch (DecoderException e) {
            fail("Unexpected DecoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex2_DJSh1() {
        char[] data = {'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] out = new byte[3];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(3, result);
            assertArrayEquals(new byte[]{0xA, 0xB, 0xC}, out);
        } catch (DecoderException e) {
            fail("Unexpected DecoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex3_UtdW2() {
        char[] data = {'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[3];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(3, result);
            assertArrayEquals(new byte[]{0xA, 0xB, 0xC}, out);
        } catch (DecoderException e) {
            fail("Unexpected DecoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex4_pvsQ3() {
        char[] data = {'1', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '1', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[16];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(16, result);
            assertArrayEquals(new byte[]{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF}, out);
        } catch (DecoderException e) {
            fail("Unexpected DecoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_asMW0() {
        Hex hex = new Hex("UTF-8");
        ByteBuffer array = ByteBuffer.allocate(10);
        array.put("Hello, World!".getBytes());
        array.flip();
        byte[] expected = "48656C6C6F2C20576F726C6421".getBytes();
        byte[] actual = hex.encode(array);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithNullData_mFAq3() {
        byte[] data = null;
        char[] expected = new char[0];
        char[] actual = Hex.encodeHex(data, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_MxXG0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put("Hello, World!".getBytes());
        data.flip();
        String encodedString = Hex.encodeHexString(data, true);
        assertEquals("48656c6c6f2c20576f726c6421", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_WsPj0() {
        ByteBuffer data = ByteBuffer.allocate(4);
        data.putInt(123456789);
        data.flip();
        char[] expected = {'3', '0', '3', '9'};
        char[] actual = Hex.encodeHex(data, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_uJKh0() {
        Hex hex = new Hex("UTF-8");
        assertEquals("org.apache.commons.codec.binary.Hex@1225d293[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_iyFx1() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("org.apache.commons.codec.binary.Hex@3a56d32e[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_ffHN2() {
        Hex hex = new Hex();
        assertEquals("org.apache.commons.codec.binary.Hex@43b513c9[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteBuffer_omrD1_nVcF0() {
        Hex hex = new Hex("UTF-8");
        ByteBuffer input = ByteBuffer.wrap("Hello, World!".getBytes());
        byte[] expected = {72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33};
        byte[] actual = hex.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_wcfH0_QLvA0() {
        char[] data = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
        byte[] expected = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        try {
            byte[] actual = Hex.decodeHex(data);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_XgaK0_gvYH0() {
        Hex hex = new Hex("UTF-8");
        ByteBuffer buffer = ByteBuffer.allocate(10);
        buffer.put("48656C6C6F20576F726C64".getBytes());
        buffer.flip();
        byte[] expected = "Hello World".getBytes(StandardCharsets.UTF_8);
        try {
            byte[] actual = hex.decode(buffer);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex1_AiDc0_fid1() {
        char[] data = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(8, result);
            assertArrayEquals(new byte[]{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7}, out);
        } catch (DecoderException e) {
            fail("Unexpected DecoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex4_pvsQ3_fid1() {
        char[] data = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[16];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(16, result);
            assertArrayEquals(new byte[]{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF}, out);
        } catch (DecoderException e) {
            fail("Unexpected DecoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_tpmg0() {
        byte[] data = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        char[] expected = "000102030405060708090a0b0c0d0e0f".toCharArray();
        char[] actual = Hex.encodeHex(data, 0, data.length, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithLowerCase_iDkd1() {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        char[] expected = "000102030405060708090a0b0c0d0e0f".toCharArray();
        char[] actual = Hex.encodeHex(data, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameWithInvalidCharset_cUXb2_fid1() {
        Hex hex = new Hex(Charset.forName("InvalidCharset"));
        assertEquals("InvalidCharset", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString4_DskJ3_fid1() {
        byte[] data = {0x0A, 0x0B, 0x0C};
        String expected = "0A0B0C";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString5_Awyr4_fid1() {
        byte[] data = {0x0D, 0x0E, 0x0F};
        String expected = "0D0E0F";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_ENhV0_fid1() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A});
        data.flip();
        String expected = "0102030405060708090A";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_uJKh0_fid1() {
        Hex hex = new Hex("UTF-8");
        assertEquals("Hex[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_iyFx1_fid1() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("Hex[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_ffHN2_fid1() {
        Hex hex = new Hex();
        assertEquals("Hex[charsetName=null]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteBufferChartoArray_azdX0_rxiJ0() {
        ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        char[] toDigits = new char[16];
        Arrays.fill(toDigits, '0');
        char[] expected = new char[20];
        char[] actual = Hex.encodeHex(byteBuffer, toDigits);
        assertArrayEquals(expected, actual);
    }
}