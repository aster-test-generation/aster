/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base32_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_eniN0() {
        Base32 base32 = new Base32();
        String input = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
        byte[] expectedOutput = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 50, 51, 52, 53, 54, 55, 56, 57};
        byte[] actualOutput = base32.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndLineSeparatorAndUseHexAndPadding_gHHX4() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) ' ', CodecPolicy.LENIENT);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithUseHexAndPadding_jygL6() {
        Base32 base32 = new Base32(true, (byte) ' ');
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet2_kMDU1() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 'K';
        arrayOctet[1] = 'L';
        arrayOctet[2] = 'M';
        arrayOctet[3] = 'N';
        arrayOctet[4] = 'O';
        arrayOctet[5] = 'P';
        arrayOctet[6] = 'Q';
        arrayOctet[7] = 'R';
        arrayOctet[8] = 'S';
        arrayOctet[9] = 'T';
        assert !base32.isInAlphabet(arrayOctet, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet3_prQG2() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 'U';
        arrayOctet[1] = 'V';
        arrayOctet[2] = 'W';
        arrayOctet[3] = 'X';
        arrayOctet[4] = 'Y';
        arrayOctet[5] = 'Z';
        arrayOctet[6] = '2';
        arrayOctet[7] = '3';
        arrayOctet[8] = '4';
        arrayOctet[9] = '5';
        assert !base32.isInAlphabet(arrayOctet, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet4_jCRI3() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = '6';
        arrayOctet[1] = '7';
        arrayOctet[2] = '8';
        arrayOctet[3] = '9';
        arrayOctet[4] = '0';
        arrayOctet[5] = '+';
        arrayOctet[6] = '/';
        arrayOctet[7] = ' ';
        arrayOctet[8] = '=';
        arrayOctet[9] = ' ';
        assert base32.isInAlphabet(arrayOctet, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet6_Zira5() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 'K';
        arrayOctet[1] = 'L';
        arrayOctet[2] = 'M';
        arrayOctet[3] = 'N';
        arrayOctet[4] = 'O';
        arrayOctet[5] = 'P';
        arrayOctet[6] = 'Q';
        arrayOctet[7] = 'R';
        arrayOctet[8] = 'S';
        arrayOctet[9] = 'T';
        assert !base32.isInAlphabet(arrayOctet, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_MIjp0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{};
        byte[] expectedOutput = new byte[]{};
        byte[] actualOutput = base32.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_fUth1_2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{0, 66, 67};
        byte[] result = base32.decode(pArray);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_BOPi2_2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{0, 66, 67, 68};
        byte[] result = base32.decode(pArray);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_BOPi2_3() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 68, 67, 68};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode4_CPtK3_2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{0, 66, 67, 68, 69};
        byte[] result = base32.decode(pArray);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode4_CPtK3_3() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 68, 67, 68, 69};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode4_CPtK3_4() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 50, 68, 69};
        byte[] result = base32.decode(pArray);
        assertEquals(67, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_PQFi4_2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{0, 66, 67, 68, 69, 70};
        byte[] result = base32.decode(pArray);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_PQFi4_3() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 68, 67, 68, 69, 70};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_PQFi4_4() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 50, 68, 69, 70};
        byte[] result = base32.decode(pArray);
        assertEquals(67, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_PQFi4_5() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70};
        byte[] result = base32.decode(pArray);
        assertEquals(68, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL4_1() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{64, 66, 67, 68, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(4, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL5_2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{0, 66, 67, 68, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL5_3() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 68, 67, 68, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL5_4() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 50, 68, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(67, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL5_5() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 20, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(68, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL5_6() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(69, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_1() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 56, 57, 58, 59, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(6, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{0, 66, 67, 68, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_3() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 68, 67, 68, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_4() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 50, 68, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(67, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_5() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 20, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(68, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_6() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, -57, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(69, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_7() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(70, result[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_1() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 60, 61, 62, 63};
        byte[] result = base32.decode(pArray);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{0, 66, 67, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_3() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 68, 67, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_4() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 50, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(67, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_5() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 20, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(68, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_6() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, -57, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(69, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_7() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 58, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(70, result[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_8() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(71, result[6]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_AQYy0_3_fid2() {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet((byte) '0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_AQYy0_4_fid2() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_AQYy0_5_fid2() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_Kiiv1_3_fid2() {
        Base32 base32 = new Base32(10);
        assertTrue(base32.isInAlphabet((byte) '0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_Kiiv1_4_fid2() {
        Base32 base32 = new Base32(10);
        assertFalse(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_Kiiv1_5_fid2() {
        Base32 base32 = new Base32(10);
        assertFalse(base32.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_UFCn2_3_fid2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertTrue(base32.isInAlphabet((byte) '0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_UFCn2_4_fid2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertFalse(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_UFCn2_5_fid2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertFalse(base32.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_eswp3_8_fid2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertFalse(base32.isInAlphabet((byte) '9'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_6_fid2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertTrue(base32.isInAlphabet((byte) '='));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_9_fid2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertFalse(base32.isInAlphabet((byte) '9'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_jVKt0_fid2() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3};
        String expected = "AQID";
        String actual = base32.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLength_JKle1_fid2() {
        Base32 base32 = new Base32(10);
        byte[] pArray = new byte[10];
        long len = base32.getEncodedLength(pArray);
        assertEquals(16, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLengthAndSeparator_IZEp2_fid2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        byte[] pArray = new byte[10];
        long len = base32.getEncodedLength(pArray);
        assertEquals(16, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLengthAndSeparatorAndHex_naot3_fid2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        byte[] pArray = new byte[10];
        long len = base32.getEncodedLength(pArray);
        assertEquals(16, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_gGlU0_fid2() {
        Base32 base32 = new Base32();
        byte[] input = new byte[10];
        String expected = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
        String actual = base32.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_yrcv0_fid2() throws DecoderException {
        Base32 base32 = new Base32();
        byte[] input = "abcd".getBytes();
        byte[] expectedOutput = "YWJjZA==".getBytes();
        byte[] actualOutput = base32.decode(input);
        assertEquals(new String(expectedOutput), new String(actualOutput));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_VsyG1_fid2() throws DecoderException {
        Base32 base32 = new Base32();
        String input = "abcd";
        String expectedOutput = "YWJjZA==";
        String actualOutput = new String(base32.decode(input));
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_fUth1_2_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67};
        byte[] result = base32.decode(pArray);
        assertEquals(65, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_BOPi2_2_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68};
        byte[] result = base32.decode(pArray);
        assertEquals(65, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_BOPi2_3_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode4_CPtK3_2_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69};
        byte[] result = base32.decode(pArray);
        assertEquals(65, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode4_CPtK3_3_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode4_CPtK3_4_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69};
        byte[] result = base32.decode(pArray);
        assertEquals(67, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_PQFi4_1() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70};
        byte[] result = base32.decode(pArray);
        assertEquals(4, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_PQFi4_2_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70};
        byte[] result = base32.decode(pArray);
        assertEquals(65, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_PQFi4_3_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_PQFi4_4_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70};
        byte[] result = base32.decode(pArray);
        assertEquals(67, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL5_1() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(5, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL5_2_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(65, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL5_3_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL5_4_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(67, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL5_5_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(68, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_1_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(6, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_2_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(65, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_3_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_4_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(67, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_5_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(68, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6_6_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(69, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_1_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(7, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_2_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(65, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_3_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_4_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(67, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_5_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(68, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_6_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(69, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7_7_fid2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(70, result[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator1_UFvM1_KEZi0() {
        Base32 base32 = new Base32(0, null, false, (byte) 0, CodecPolicy.STRICT);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = new byte[0];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_MNyu2_Cfbk0() {
        Base32 base32 = new Base32(0, new byte[0], false, (byte) 0, CodecPolicy.STRICT);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = new byte[0];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_vQXs3_PEbb0() {
        Base32 base32 = new Base32(0, new byte[0], false, (byte) 0, CodecPolicy.LENIENT);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = new byte[0];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_Brnr4_dkTc0() {
        Base32 base32 = new Base32(false);
        byte[] actual = base32.getLineSeparator();
        assertArrayEquals(new byte[0], actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator6_AzTs6_FNPS0() {
        Base32 base32 = new Base32((byte) 0);
        byte[] actual = base32.getLineSeparator();
        assertArrayEquals(new byte[0], actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator7_XMYN7_vQAA0() {
        Base32 base32 = new Base32(0, null, false);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = new byte[0];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator8_pCTk8_kdwJ0() {
        Base32 base32 = new Base32(0, new byte[0], false);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = new byte[0];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator9_bWhW9_RQRa0() {
        Base32 base32 = new Base32(0, new byte[0], true, (byte) 0, CodecPolicy.STRICT);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = new byte[0];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator10_RUom10_hEeQ0() {
        Base32 base32 = new Base32(0, new byte[0], true, (byte) 0, CodecPolicy.LENIENT);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = new byte[0];
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLength_JKle1_McKo0_fid2() {
        Base32 base32 = new Base32(10);
        byte[] pArray = new byte[10];
        long len = base32.getEncodedLength(pArray);
        assertEquals(16L, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLengthAndSeparatorAndHex_naot3_MplA0_fid2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        byte[] pArray = new byte[10];
        long len = base32.getEncodedLength(pArray);
        assertEquals(16L, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_fUth1() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67};
        byte[] result = base32.decode(pArray);
        assertEquals(1, result.length);
        assertEquals(65, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_BOPi2() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68};
        byte[] result = base32.decode(pArray);
        assertEquals(2, result.length);
        assertEquals(65, result[0]);
        assertEquals(66, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode4_CPtK3() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69};
        byte[] result = base32.decode(pArray);
        assertEquals(3, result.length);
        assertEquals(65, result[0]);
        assertEquals(66, result[1]);
        assertEquals(67, result[2]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_PQFi4() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70};
        byte[] result = base32.decode(pArray);
        assertEquals(4, result.length);
        assertEquals(65, result[0]);
        assertEquals(66, result[1]);
        assertEquals(67, result[2]);
        assertEquals(68, result[3]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode6_DAuL5() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71};
        byte[] result = base32.decode(pArray);
        assertEquals(5, result.length);
        assertEquals(65, result[0]);
        assertEquals(66, result[1]);
        assertEquals(67, result[2]);
        assertEquals(68, result[3]);
        assertEquals(69, result[4]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode7_PBxQ6() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72};
        byte[] result = base32.decode(pArray);
        assertEquals(6, result.length);
        assertEquals(65, result[0]);
        assertEquals(66, result[1]);
        assertEquals(67, result[2]);
        assertEquals(68, result[3]);
        assertEquals(69, result[4]);
        assertEquals(70, result[5]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode8_TAEa7() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73};
        byte[] result = base32.decode(pArray);
        assertEquals(7, result.length);
        assertEquals(65, result[0]);
        assertEquals(66, result[1]);
        assertEquals(67, result[2]);
        assertEquals(68, result[3]);
        assertEquals(69, result[4]);
        assertEquals(70, result[5]);
        assertEquals(71, result[6]);
    }
}