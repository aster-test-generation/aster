/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DoubleMetaphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_pFaE0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "Hello";
        String value2 = "Hillo";
        boolean expected = true;
        boolean actual = doubleMetaphone.isDoubleMetaphoneEqual(value1, value2);
        assertTrue(actual == expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_DaZf0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        boolean result = doubleMetaphone.isDoubleMetaphoneEqual("string1", "string2", true);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt1_YEgs0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        char actual = doubleMetaphone.charAt("hello", 1);
        char expected = 'e';
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt2_GZJo1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        char actual = doubleMetaphone.charAt("world", 0);
        char expected = 'w';
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt3_oJGh2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        char actual = doubleMetaphone.charAt("java", 3);
        char expected = 'a';
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullInput_tMie0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone(null, false);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSingleCharacterInput_TFdw2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("A", false);
        Assertions.assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternates_AZnW3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("A", true);
        Assertions.assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternatesAndCleanInputAndSlavoGermanic_ncWj5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("A\u00C7", true);
        Assertions.assertEquals("AS", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_PQPz0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("HL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithNullInput_AQdQ2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = null;
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_jUxj1_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        String expectedPrimary = "TST";
        String expectedAlternate = "TST";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, false);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, true);
        assertEquals(expectedPrimary, actualPrimary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_jUxj1_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        String expectedPrimary = "TST";
        String expectedAlternate = "TST";
        String actualPrimary = doubleMetaphone.doubleMetaphone(value, false);
        String actualAlternate = doubleMetaphone.doubleMetaphone(value, true);
        assertEquals(expectedAlternate, actualAlternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithNonEmptyCriteria_meza1() {
        String[] criteria = {"test"};
        boolean result = DoubleMetaphone.contains("test", 0, 4, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithNonMatchingCriteria_pDSo2() {
        String[] criteria = {"non-matching"};
        boolean result = DoubleMetaphone.contains("test", 0, 4, criteria);
        assertTrue(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithInvalidStart_wrjY3() {
        String[] criteria = {"test"};
        boolean result = DoubleMetaphone.contains("test", -1, 4, criteria);
        assertTrue(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithInvalidLength_xJPi4() {
        String[] criteria = {"test"};
        boolean result = DoubleMetaphone.contains("test", 0, 5, criteria);
        assertTrue(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_eZJe0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        doubleMetaphone.setMaxCodeLen(10);
        assertEquals(10, doubleMetaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_QidQ0_WSZo1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Hello";
        Object encoded = doubleMetaphone.encode(input);
        String expected = "HL";
        assertEquals(expected, encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_JVcs1_qStN0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = null;
        String expected = null;
        String encoded = doubleMetaphone.encode(input);
        assertEquals(expected, encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_pFaE0_jtkr0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "Hello";
        String value2 = "Hillo";
        boolean expected = true;
        boolean actual = doubleMetaphone.isDoubleMetaphoneEqual(value1, value2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_ueud4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int maxCodeLen = doubleMetaphone.getMaxCodeLen();
        assertEquals(4, maxCodeLen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_OJpd1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello World";
        String expected = "HLRL";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyInput_LRsl1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_UPEQ1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String result = doubleMetaphone.doubleMetaphone(value, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCleanInput_UPAX3_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello World";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("HLRL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSlavoGermanicInput_yPcS4_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Cvijet";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("KFJT", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStartInput_wlor5_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ANational";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("ANXN", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithInvalidInput_ibwt7_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Invalid";
        String result = doubleMetaphone.doubleMetaphone(value, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_MPfT5_1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello World";
        String primary = doubleMetaphone.doubleMetaphone(value, false);
        String alternate = doubleMetaphone.doubleMetaphone(value, true);
        assertEquals("HLRL", primary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_MPfT5_2_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello World";
        String primary = doubleMetaphone.doubleMetaphone(value, false);
        String alternate = doubleMetaphone.doubleMetaphone(value, true);
        assertEquals("HLRL", alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Wjcd1_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "AKSM";
        String expectedResult = "AKSM";
        String actualResult = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_exLd15_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("FL", doubleMetaphone.doubleMetaphone("value", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAlternate_scUE16_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("FL", doubleMetaphone.doubleMetaphone("value", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithEmptyCriteria_hKuK0_fid1() {
        String[] criteria = {};
        boolean result = DoubleMetaphone.contains("test", 0, 4, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_crxI0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String expected = "HL";
        String actual = doubleMetaphone.doubleMetaphone(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jHPy0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String expected = "HL";
        String actual = doubleMetaphone.encode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_UPEQ1_fFLl0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String result = doubleMetaphone.doubleMetaphone(value, true);
        assertEquals("HL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithInvalidInput_ibwt7_DUVj0_fid1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Invalid";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertNull(null);
    }
}