/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_taxJ0_1() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_LoaP0_1() {
        assertEquals(0, MurmurHash3.hash32(new byte[0], 0, 0, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_FMZG1_1() {
        assertEquals(0, MurmurHash3.hash32(new byte[4], 0, 0, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_NsSc0_1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        long[] hash = MurmurHash3.hash128(data);
        assertNotNull(hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_NsSc0_2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        long[] hash = MurmurHash3.hash128(data);
        assertEquals(2, hash.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_KWtu0_1() {
        byte[] data = new byte[10];
        long[] hash = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertNotNull(hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_KWtu0_2() {
        byte[] data = new byte[10];
        long[] hash = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertEquals(2, hash.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_tqYU0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long hash = MurmurHash3.hash64(data);
        assertEquals(hash, 4922444149315819138L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_gJvu0_fid1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 16;
        int seed = 0;
        long[] expected = new long[2];
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_FkgT0_fid1() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = 5;
        long expected = 4922444149315819138L;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_LoaP0_2_fid1() {
        assertEquals(593689054, MurmurHash3.hash32(new byte[4], 0, 4, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_FMZG1_2_fid1() {
        assertEquals(-2047822809, MurmurHash3.hash32(new byte[4], 1, 3, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSeed_Rdky3_2_fid1() {
        assertEquals(2028806445, MurmurHash3.hash32(new byte[4], 0, 4, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithAllParameters_BflY4_2_fid1() {
        assertEquals(-1032050413, MurmurHash3.hash32(new byte[4], 1, 3, 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xGoc0_2_fid1() {
        byte[] data = new byte[4];
        int offset = 0;
        int length = 4;
        int seed = 0;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 0;
        data[1] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[1] = 0;
        data[2] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[2] = 0;
        data[3] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(854115492, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_iFLX0_fid1() {
        int hash = MurmurHash3.hash32(1234567890L, 0);
        assertEquals(1740697516, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_oaRF0_fid1() {
        byte[] data = new byte[]{0x01, 0x02, 0x03, 0x04};
        int offset = 0;
        int length = 4;
        int seed = 0;
        int expectedHash = 0x61c88646;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_2_fid1() {
        assertEquals(356983278, MurmurHash3.hash32(1, 0, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_3_fid1() {
        assertEquals(-1591321661, MurmurHash3.hash32(0, 1, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_4_fid1() {
        assertEquals(129204665, MurmurHash3.hash32(1, 1, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_5_fid1() {
        assertEquals(-1878709480, MurmurHash3.hash32(0, 0, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_6_fid1() {
        assertEquals(2142324808, MurmurHash3.hash32(1, 0, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_7_fid1() {
        assertEquals(1946936011, MurmurHash3.hash32(0, 1, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_8_fid1() {
        assertEquals(416286124, MurmurHash3.hash32(1, 1, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_NsSc0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        long[] hash = MurmurHash3.hash128(data);
        assertNotNull(hash);
        assertEquals(2, hash.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_KWtu0() {
        byte[] data = new byte[10];
        long[] hash = MurmurHash3.hash128x64(data, 0, data.length, 0);
        assertNotNull(hash);
        assertEquals(2, hash.length);
    }
}