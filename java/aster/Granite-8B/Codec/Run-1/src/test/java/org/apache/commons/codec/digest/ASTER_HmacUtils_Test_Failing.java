/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_cQPo0() throws IOException {
        byte[] key = "key".getBytes();
        byte[] expected = "expected".getBytes();
        byte[] actual = HmacUtils.hmacSha384(key, "valueToDigest".getBytes());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_oNOY0() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithEmptyAlgorithm_ysJg2() {
        HmacUtils hmacUtils = new HmacUtils("", "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithInvalidAlgorithm_buyA3() {
        HmacUtils hmacUtils = new HmacUtils("invalid", "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithEmptyKey_HNIA5() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithEmptyValueToDigest_BRkn7() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        byte[] result = hmacUtils.hmac("".getBytes());
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_hctk0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        byte[] expected = new byte[20]; // Replace with expected result
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_KCOE0() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac4_YaGA3() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key");
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_UQMn0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = new byte[64]; // Replace with expected value
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexString_xZAl1() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        assertEquals("86fb8a56a8f71c179c433a016698a07", hmacUtils.hmacHex("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexBytes_Uubd2() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        assertEquals("86fb8a56a8f71c179c433a016698a07", hmacUtils.hmacHex("value".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_3_pyTC2() {
        byte[] expected = {(byte) 0x9d, (byte) 0x0e, (byte) 0x18, (byte) 0x09, (byte) 0x4e, (byte) 0xdc, (byte) 0x2d, (byte) 0x39};
        byte[] actual = HmacUtils.hmacSha512("key", "Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_4_vfTk3() {
        byte[] expected = {(byte) 0xe3, (byte) 0x7b, (byte) 0x6a, (byte) 0x77, (byte) 0x5d, (byte) 0xd0, (byte) 0xe1, (byte) 0xa0};
        byte[] actual = HmacUtils.hmacSha512("key", "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras mattis consectetur purus sit amet fermentum.");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_nqMu0() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("7343e6a28c22b8f0fc498ec9319829b", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacWithString_aUva1() {
        HmacUtils hmacUtils = new HmacUtils("HmacSHA256", "key".getBytes());
        String valueToDigest = "valueToDigest";
        byte[] expected = hmacUtils.hmac(valueToDigest.getBytes());
        byte[] actual = hmacUtils.hmac(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_wEuX0() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("5d41402abc4b2a76b9719d911017c592", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex7_sBxJ6() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key");
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("5d41402abc4b2a76b9719d911017c592", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_kjAF0() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        assertEquals(hmacUtils.hmac("value".getBytes()), "expectedValue".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac2_SWVE1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        assertEquals(hmacUtils.hmac("value".getBytes()), "expectedValue".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac3_dTbO2() {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key");
        assertEquals(hmacUtils.hmac("value".getBytes()), "expectedValue".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac4_cCCB3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        assertEquals(hmacUtils.hmac("value".getBytes()), "expectedValue".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_Hxlm0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = "expected".getBytes();
        byte[] actual = HmacUtils.hmacSha384(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_xLcE0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expectedResult = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmac(valueToDigest);
        byte[] actualResult = HmacUtils.hmacSha256(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_qQWo0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        byte[] expected = new byte[48]; // Replace with expected result
        byte[] actual = HmacUtils.hmacSha384(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_SzUu0() {
        Mac mac = null;
        byte[] valueToDigest = null;
        Mac expectedMac = null;
        Mac actualMac = HmacUtils.updateHmac(mac, valueToDigest);
        assertEquals(expectedMac, actualMac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_FfRW0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = "expected".getBytes();
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_diAL0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        byte[] expected = new byte[32]; // Replace with expected result
        byte[] actual = HmacUtils.hmacSha256(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_CtvX0() throws IOException {
        byte[] key = "key".getBytes();
        byte[] expected = "expected".getBytes();
        byte[] actual = HmacUtils.hmacSha1(key, "valueToDigest".getBytes());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_KQHg0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = new byte[]{-46, -117, 106, 111, -11, -113, 10, 112, -110, 119, -116, 105, -114, 102, -115, 101};
        byte[] actual = HmacUtils.hmacMd5(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithFile_fSzc0_DcmP0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        File file = new File("test.txt");
        String expected = "86fb8a554d232958db666e15b616b45";
        String actual = hmacUtils.hmacHex(file);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 119, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_ARpu0_FmNW0() {
        String key = "key";
        String valueToDigest = "value";
        byte[] expected = {(byte) 0x77, (byte) 0x3e, (byte) 0xa9, (byte) 0x1e, (byte) 0x36, (byte) 0x80, (byte) 0x0e, (byte) 0x46, (byte) 0x85, (byte) 0x9f, (byte) 0x9d, (byte) 0x52, (byte) 0x4a, (byte) 0x02, (byte) 0xd0, (byte) 0x27};
        byte[] actual = HmacUtils.hmacMd5(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac5_NJhr4_Hxdz0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        assertEquals(hmacUtils.hmacHex(new File("value")), "expectedValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac2_uwHb1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac3_qmDz2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexStringWithAlgorithm_rMVR4_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        assertEquals("86fb8a56a8f71c179c433a016698a07", hmacUtils.hmacHex("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexBytesWithAlgorithm_heEp5_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        assertEquals("86fb8a56a8f71c179c433a016698a07", hmacUtils.hmacHex("value".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex2_OkZV1_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("fbdb1d1b18aa6c08324b7d64b71fb76370690e1d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex3_yfbm2_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("2a99471e4e9b90fc9d599f4cdc7560a722ff801cee49e15fa7fbcc2b7e", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex4_BVjm3_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex5_usxb4_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736322445e8e250241067ac20", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex6_nvNf5_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cabfa82f83c1aa942ec975c7909552bd01f8327ac64f2434a12a09db0780196002", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex2_nWnU1_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("fbdb1d1b18aa6c08324b7d64b71fb76370690e1d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex3_jPHO2_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("7509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542ab5e3df163be08e6ca", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex4_KFMH3_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex5_UruG4_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736322445e8e2f027b47540106f0e4934ee323b0c", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex6_RNrJ5_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cabfa82f83c1aa945ebf40677339aa5c840c12a7c85aa66428a2e2bdccb679059e7", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex8_gVwZ7_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("fbdb1d1b18aa6c08324b7d64b71fb76370690e1d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_FkBo0_fid1() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "63b336456b0162a08a02f01a33e6347";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_WwYq0_fid1() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "6338102164977135264037056839383532201033087413163325528025373418599711525363";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_iqos0_fid1() {
        String expected = "900150983cd24fb0d6963f7d28e17f7";
        String actual = HmacUtils.hmacMd5Hex("key".getBytes(), "value".getBytes());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_ViHa0_fid1() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "749759a9f581c60a02a2177215e3855";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_LmaR0_fid1() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "4634270f707b6a546e3fb14f22dbaee1ae5c125177791362397b411f553b280";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_lsLN0_fid1() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expectedResult = "48842315795811514785550557383053253781538714586370601572338636988271472390033619361383030630273772256532687481597837007701901";
        String actualResult = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_pxQT0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expectedResult = "expectedResult";
        String actualResult = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_gHzq0_fid1() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithByteBuffer_WgDQ0_fid1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expected = "7102b4f5b5080766693a6e604302671";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex4_GbJD3_hVyO0_fid1() {
        String expected = "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String actual = hmacUtils.hmacHex(ByteBuffer.wrap("value".getBytes()));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex8_ODrP7_XdfN0_fid1() {
        String expected = "a448017aaf21d852e0361747d65e94235699b50";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String actual = hmacUtils.hmacHex(ByteBuffer.wrap("value".getBytes()));
        assertEquals(expected, actual);
    }
}