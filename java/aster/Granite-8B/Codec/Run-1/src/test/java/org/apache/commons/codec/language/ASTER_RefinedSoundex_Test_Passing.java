/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_RefinedSoundex_Test_Passing {
    private RefinedSoundex refinedSoundex;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithNull_uDIg1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = null;
        String expected = null;
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithEmpty_SKpC2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "";
        String expected = "";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullString_OYsx5() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("defaultMapping");
        String str = null;
        String expected = null;
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_Nvvt0() {
        refinedSoundex = new RefinedSoundex();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_yWMJ0_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "RefinedSoundex";
        String expected = "R9020806308605";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCustomMapping_whIp1_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex(new char[]{'a', 'b', 'c'});
        String str = "S";
        String expected = "S";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyMapping_GTGC2_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("");
        String str = "S";
        String expected = "S";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceWithNull_xtvv1_vApp1() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        int expectedResult = 0;
        int result = refinedSoundex.difference(null, "string2");
        assertEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceWithEmpty_OmJb2_vLEe1() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        int expectedResult = 0;
        int result = refinedSoundex.difference("", "string2");
        assertEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceWithMappingAndEmpty_Hwop9_cMbd0() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        int expectedResult = refinedSoundex.difference("", "string2");
        int result = refinedSoundex.difference("", "string2");
        assertEquals(expectedResult, result);
    }
}