/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_Ttpa1() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "value";
        try {
            bCodec.decode(value);
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNonString_RyYV1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        Object value = new Object();
        try {
            bCodec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_YOYc0() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        Object result = bCodec.encode(null);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_vNPw1() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        String input = "Hello, World!";
        Object result = bCodec.encode(input);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonString_BmFR2() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        Integer input = 123;
        try {
            bCodec.encode(input);
            Assertions.fail("Expected EncoderException not thrown");
        } catch (EncoderException e) {
            Assertions.assertEquals("Objects of type java.lang.Integer cannot be encoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedType_PjBJ3() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        try {
            bCodec.encode(new Object());
            Assertions.fail("Expected EncoderException not thrown");
        } catch (EncoderException e) {
            Assertions.assertEquals("Objects of type java.lang.Object cannot be encoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharsetException_Suki0() throws UnsupportedCharsetException {
        BCodec bCodec = new BCodec();
        Charset charset = null;
        String strSource = null;
        try {
            bCodec.encode(strSource, charset);
        } catch (EncoderException e) {
            assertEquals(true, e instanceof EncoderException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoderException_Dsdp1() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec();
        String strSource = null;
        String charsetName = null;
        try {
            bCodec.encode(strSource, charsetName);
        } catch (EncoderException e) {
            assertEquals(true, e instanceof EncoderException);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullText_CLml0() throws EncoderException {
        BCodec bCodec = new BCodec();
        String text = null;
        String charsetName = "UTF-8";
        String encodedText = bCodec.encodeText(text, charsetName);
        assertNull(encodedText);
    }
}