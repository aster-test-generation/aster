/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_sATv0() {
        Base64 base64 = new Base64(0, new byte[0], true);
        boolean result = base64.isUrlSafe();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe2_Xdld1() {
        Base64 base64 = new Base64(0, new byte[0], false);
        boolean result = base64.isUrlSafe();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe3_ZimZ2() {
        Base64 base64 = new Base64(0, new byte[0]);
        boolean result = base64.isUrlSafe();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe4_sPZb3() {
        Base64 base64 = new Base64();
        boolean result = base64.isUrlSafe();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe5_zUlF4() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.STRICT);
        boolean result = base64.isUrlSafe();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe6_JzcB5() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        boolean result = base64.isUrlSafe();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe7_MoyS6() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        boolean result = base64.isUrlSafe();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe8_JRde7() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        boolean result = base64.isUrlSafe();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_CmCu0() {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLength_BWsS1() {
        String base64String = "SGVsbG8g\nV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        Base64 base64 = new Base64(7);
        byte[] actual = base64.decodeBase64(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineSeparator_KBvP2() {
        String base64String = "SGVsbG8g\r\nV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        Base64 base64 = new Base64(0, "\r\n".getBytes());
        byte[] actual = base64.decodeBase64(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDecodeInteger_qXEj0() {
        byte[] input = {0x31, 0x32, 0x33}; // "55149" in ASCII
        BigInteger expected = new BigInteger("55149");
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_PxuV0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3};
        String expected = "AAECAw==";
        String actual = Base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes4_hyyz3() {
        BigInteger bigInt = new BigInteger("1");
        byte[] expected = new byte[]{1};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_aOQO0() {
        Base64 base64 = new Base64(1, new byte[]{'\r', '\n'});
        assertEquals("\r\n", new String(base64.getLineSeparator()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_GbUJ1() {
        Base64 base64 = new Base64(1, new byte[]{'\r', '\n'}, true);
        assertEquals("\r\n", new String(base64.getLineSeparator()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_uzkx2() {
        Base64 base64 = new Base64(true);
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_zCbf3() {
        Base64 base64 = new Base64(1);
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator5_NYUT4() {
        Base64 base64 = new Base64(1, new byte[]{'\r', '\n'}, true, CodecPolicy.STRICT);
        assertEquals("\r\n", new String(base64.getLineSeparator()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_waAF0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_ValidOctet_ReturnsTrue_ofWp0() {
        Base64 base64 = new Base64();
        boolean result = base64.isInAlphabet((byte) 65);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_InvalidOctet_ReturnsFalse_CcpL1() {
        Base64 base64 = new Base64();
        boolean result = base64.isInAlphabet((byte) -1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_NullOctet_ThrowsNullPointerException_UVYt2() {
        Base64 base64 = new Base64();
        Exception exception = null;
        try {
            base64.isInAlphabet(null);
        } catch (NullPointerException e) {
            exception = e;
        }
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_tGYN0() {
        byte[] arrayOctet = new byte[10];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithEmptyArray_TAEJ2() {
        byte[] arrayOctet = new byte[0];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithOneElementArray_Nudi3() {
        byte[] arrayOctet = new byte[1];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithTwoElementArray_UkPp4() {
        byte[] arrayOctet = new byte[2];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithThreeElementArray_VfmY5() {
        byte[] arrayOctet = new byte[3];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithFourElementArray_CsAu6() {
        byte[] arrayOctet = new byte[4];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithFiveElementArray_BfxT7() {
        byte[] arrayOctet = new byte[5];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithSixElementArray_WPgg8() {
        byte[] arrayOctet = new byte[6];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithSevenElementArray_VlbY9() {
        byte[] arrayOctet = new byte[7];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithEightElementArray_RpED10() {
        byte[] arrayOctet = new byte[8];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithNineElementArray_qPjS11() {
        byte[] arrayOctet = new byte[9];
        assertFalse(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_1_dkdq0() {
        byte[] binaryData = new byte[]{};
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] expected = new byte[]{};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidBase64String_ReturnsTrue_fxOw0() {
        byte[] arrayOctet = "abcd1234".getBytes();
        boolean result = Base64.isBase64(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidBase64String_ReturnsFalse_lvIs1() {
        byte[] arrayOctet = "abcd12345".getBytes();
        boolean result = Base64.isBase64(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_ValidOctet_ReturnsTrue_bAfX0() {
        byte octet = 65; // 'A' in ASCII
        boolean result = Base64.isBase64(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidOctet_ReturnsFalse_HoTZ1() {
        byte octet = -1;
        boolean result = Base64.isBase64(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_UrlSafeOctet_ReturnsTrue_RCWv2() {
        byte octet = 97; // 'a' in ASCII
        boolean result = Base64.isBase64(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_PadOctet_ReturnsTrue_tWIZ3() {
        byte octet = 61; // '=' in ASCII
        boolean result = Base64.isBase64(octet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidUrlSafeOctet_ReturnsFalse_pbPR4() {
        byte octet = 123;
        boolean result = Base64.isBase64(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidPadOctet_ReturnsFalse_PHuo5() {
        byte octet = 33; // '!' in ASCII
        boolean result = Base64.isBase64(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_sZDl0() {
        Base64 base64 = new Base64();
        byte[] input = "Hello, World!".getBytes();
        String expectedOutput = "SGVsbG8sIFdvcmxkIQ==";
        String actualOutput = base64.encodeAsString(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_TQsY0() {
        Base64 base64 = new Base64();
        String basen = "abcd";
        boolean result = base64.isInAlphabet(basen);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToLengthWithNullArray_WTGO0() {
        assertEquals(0, Base64.toLength(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToLengthWithNonNullArray_uiYT1() {
        byte[] array = new byte[10];
        assertEquals(10, Base64.toLength(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_withEmptyArray_HhGg1() {
        Base64 base64 = new Base64();
        byte[] emptyArray = new byte[0];
        long encodedLength = base64.getEncodedLength(emptyArray);
        assertEquals(0, encodedLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_withNonEmptyArray_sWqw2() {
        Base64 base64 = new Base64();
        byte[] nonEmptyArray = new byte[10];
        long encodedLength = base64.getEncodedLength(nonEmptyArray);
        assertEquals(16, encodedLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_withLineLength_zhdl3() {
        Base64 base64 = new Base64(76);
        byte[] array = new byte[100];
        long encodedLength = base64.getEncodedLength(array);
        assertEquals(140, encodedLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_withLineSeparator_nSOT4() {
        Base64 base64 = new Base64(0, new byte[]{'\r', '\n'});
        byte[] array = new byte[100];
        long encodedLength = base64.getEncodedLength(array);
        assertEquals(136, encodedLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_withUrlSafe_MRun5() {
        Base64 base64 = new Base64(false);
        byte[] array = new byte[100];
        long encodedLength = base64.getEncodedLength(array);
        assertEquals(140, encodedLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyArray_XuWg0() {
        Base64 base64 = new Base64();
        byte[] input = new byte[0];
        byte[] output = base64.encode(input);
        assertArrayEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonNullArray_ieiW1() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base64.encode(input);
        assertNotEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonNullArrayAndOffset_ArCr2() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, 1, 4);
        assertNotEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonNullArrayAndOffsetAndLength_JjSG3() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5};
        byte[] output = base64.encode(input, 1, 3);
        assertNotEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultBufferSizeTest_LIQo0() {
        Base64 base64 = new Base64();
        int expected = 8192;
        int actual = base64.getDefaultBufferSize();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithValidInput_TBgI0() {
        Base64 base64 = new Base64(10, new byte[]{10}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{65, 66, 67};
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithValidInputAndNoWSPad_gatu2() {
        Base64 base64 = new Base64(10, new byte[]{10}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{65, 66, 67};
        boolean result = base64.isInAlphabet(arrayOctet, false);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithValidInputAndNoUrlSafe_JcJK6() {
        Base64 base64 = new Base64(10, new byte[]{10}, false, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{65, 66, 67};
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithValidInputAndNoLineLength_nbJm8() {
        Base64 base64 = new Base64(0, new byte[]{10}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{65, 66, 67};
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithValidInputAndNoLineSeparator_xDHd10() {
        Base64 base64 = new Base64(10, null, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{65, 66, 67};
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_tqCF0() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3};
        String expected = "AQID";
        String actual = base64.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingWithStrictPolicy_ELqG0() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        boolean result = base64.isStrictDecoding();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingWithLenientPolicy_TxXp1() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.LENIENT);
        boolean result = base64.isStrictDecoding();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_GxrY0() throws DecoderException {
        Base64 base64 = new Base64();
        byte[] input = "SGVsbG8gV29ybGQ=".getBytes();
        byte[] expectedOutput = "Hello World".getBytes();
        byte[] actualOutput = base64.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_IDAK1() throws DecoderException {
        Base64 base64 = new Base64();
        String input = "SGVsbG8gV29ybGQ=";
        String expectedOutput = "Hello World";
        String actualOutput = new String(base64.decode(input));
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withEmptyArray_cknL0() {
        Base64 base64 = new Base64();
        byte[] input = new byte[0];
        byte[] output = base64.encode(input, 0, 0);
        assertArrayEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withNonNullArray_DPxK1_1() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base64.encode(input, 0, 3);
        assertNotEquals(input, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withNonNullArray_DPxK1_2() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base64.encode(input, 0, 3);
        assertEquals(4, output.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy_ECth0() {
        Base64 base64 = new Base64(0, new byte[0], false, CodecPolicy.STRICT);
        assertEquals(CodecPolicy.STRICT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy2_FdOu1() {
        Base64 base64 = new Base64(0, new byte[0], false);
        assertEquals(CodecPolicy.LENIENT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy3_hrDz2() {
        Base64 base64 = new Base64(0, new byte[0], true);
        assertEquals(CodecPolicy.LENIENT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy4_dbQf3() {
        Base64 base64 = new Base64(0);
        assertEquals(CodecPolicy.LENIENT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy5_lfRQ4() {
        Base64 base64 = new Base64(0, new byte[0], true, CodecPolicy.LENIENT);
        assertEquals(CodecPolicy.LENIENT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode1_XcrQ0() {
        Base64 base64 = new Base64();
        byte[] input = new byte[0];
        byte[] expectedOutput = new byte[0];
        byte[] actualOutput = base64.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPadWithNullArray_UazY0() {
        Base64 base64 = new Base64();
        assertFalse(base64.containsAlphabetOrPad(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPadWithEmptyArray_obtj1() {
        Base64 base64 = new Base64();
        assertFalse(base64.containsAlphabetOrPad(new byte[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPadWithArrayContainingAlphabet_viFc3() {
        Base64 base64 = new Base64();
        byte[] array = new byte[1];
        array[0] = 'A';
        assertTrue(base64.containsAlphabetOrPad(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPadWithArrayNotContainingPadOrAlphabet_ncAB5() {
        Base64 base64 = new Base64();
        byte[] array = new byte[1];
        array[0] = 'a';
        assertFalse(!base64.containsAlphabetOrPad(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithUrlSafe_UAaI3_EwWd0() {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        Base64 base64 = new Base64(0, new byte[0], true);
        byte[] actual = base64.decodeBase64(base64String);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_NullOctet_ReturnsFalse_pAnV6_WhAN0() {
        byte octet = 0;
        boolean result = Base64.isBase64(octet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithInvalidInput_jaNO1_zxnc0() {
        Base64 base64 = new Base64(10, new byte[]{10}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{(byte) 128};
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithInvalidInputAndNoWSPad_hFGt3_huBt0() {
        Base64 base64 = new Base64(10, new byte[]{10}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{(byte) 128};
        boolean result = base64.isInAlphabet(arrayOctet, false);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithInvalidInputAndNoUrlSafe_CDiL7_FORm0() {
        Base64 base64 = new Base64(10, new byte[]{10}, false, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{(byte) 128};
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithInvalidInputAndNoLineLength_bDYh9_iOkt0() {
        Base64 base64 = new Base64(0, new byte[]{10}, true, CodecPolicy.STRICT);
        byte[] arrayOctet = new byte[]{(byte) 128};
        boolean result = base64.isInAlphabet(arrayOctet, true);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_aupP0_GBZe0_1() {
        assertTrue(Base64.isWhiteSpace((byte) ' '));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_aupP0_GBZe0_2() {
        assertTrue(Base64.isWhiteSpace((byte) '\t'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_aupP0_GBZe0_3() {
        assertTrue(Base64.isWhiteSpace((byte) '\n'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_aupP0_GBZe0_4() {
        assertTrue(Base64.isWhiteSpace((byte) '\r'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_aupP0_GBZe0_5() {
        assertFalse(Base64.isWhiteSpace((byte) 'a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_aupP0_GBZe0_6() {
        assertFalse(Base64.isWhiteSpace((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_aupP0_GBZe0_7() {
        assertFalse(Base64.isWhiteSpace((byte) '0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_aupP0_GBZe0_8() {
        assertFalse(Base64.isWhiteSpace((byte) '-'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_aupP0_GBZe0_9() {
        assertFalse(Base64.isWhiteSpace((byte) '_'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_aupP0_GBZe0_10() {
        assertFalse(Base64.isWhiteSpace((byte) '.'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_aupP0_GBZe0_11() {
        assertFalse(Base64.isWhiteSpace((byte) ','));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_withNonNullArray_DPxK1() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base64.encode(input, 0, 3);
        assertNotEquals(input, output);
        assertEquals(4, output.length);
    }
}