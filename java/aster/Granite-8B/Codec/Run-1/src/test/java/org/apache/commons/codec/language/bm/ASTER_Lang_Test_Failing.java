/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Lang_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getInstance_withString_returnsNewInstance_kHla1() {
        Languages languages = Languages.getInstance("resource");
        assertEquals(Languages.class, languages.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLanguages_returnsLanguages_megv2() {
        Set<String> languages = Languages.getInstance("resource").getLanguages();
        assertEquals(Set.class, languages.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loadFromResource_withInvalidResource_throwsIllegalArgumentException_ZHAJ3_1() {
        Languages languages = Languages.getInstance("resource");
        IllegalArgumentException exception =
        assertThrows(IllegalArgumentException.class, () -> Lang.loadFromResource("invalid", languages));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loadFromResource_withValidResource_returnsNewLang_opWh4() {
        Languages languages = Languages.getInstance("resource");
        Lang lang = Lang.loadFromResource("valid", languages);
        assertEquals(Lang.class, lang.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void loadFromResource_withInvalidResource_throwsIllegalArgumentException_ZHAJ3() {
        Languages languages = Languages.getInstance("resource");
        IllegalArgumentException exception =
        assertThrows(IllegalArgumentException.class, () -> Lang.loadFromResource("invalid", languages));
        assertEquals("Malformed line '' in language resource 'invalid'", exception.getMessage());
    }
}