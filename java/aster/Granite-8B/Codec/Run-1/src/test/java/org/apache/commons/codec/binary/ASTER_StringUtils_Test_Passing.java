/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_StringUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8_XjWQ0() {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_8);
        String expected = "Hello, World!";
        String actual = StringUtils.newStringUtf8(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16_SDCP0() {
        String string = "Hello, World!";
        byte[] expected = string.getBytes(StandardCharsets.UTF_16);
        byte[] actual = StringUtils.getBytesUtf16(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_WiBd0() {
        String string = "Hello, World!";
        byte[] expected = {(byte) 0x48, (byte) 0x00, (byte) 0x65, (byte) 0x00, (byte) 0x6c, (byte) 0x00, (byte) 0x6c, (byte) 0x00, (byte) 0x6f, (byte) 0x00, (byte) 0x2c, (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x57, (byte) 0x00, (byte) 0x6f, (byte) 0x00, (byte) 0x72, (byte) 0x00, (byte) 0x6c, (byte) 0x00, (byte) 0x64, (byte) 0x00, (byte) 0x21, (byte) 0x00};
        byte[] actual = StringUtils.getBytesUtf16Le(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_zJdO0() {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.UTF_16);
        String expected = "Hello, World!";
        String actual = StringUtils.newStringUtf16(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_MGyA0() {
        assertEquals(false, StringUtils.equals(null, "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull2_hWhJ1() {
        assertEquals(false, StringUtils.equals("test", null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull3_WNjl2() {
        assertEquals(true, StringUtils.equals(null, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_rtda3() {
        String test = "test";
        assertEquals(true, StringUtils.equals(test, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentLength_xMmF4() {
        assertEquals(false, StringUtils.equals("test", "testing"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameContent_RTST6() {
        assertEquals(true, StringUtils.equals("test", "test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameContentDifferentCase_OjHH7() {
        assertEquals(false, StringUtils.equals("test", "TEST"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_ZlRM0() {
        String string = "Hello, World!";
        ByteBuffer expected = ByteBuffer.wrap("Hello, World!".getBytes(StandardCharsets.UTF_8));
        ByteBuffer actual = StringUtils.getByteBufferUtf8(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_LEIK0() {
        byte[] bytes = new byte[]{65, 66, 67};
        String expected = "ABC";
        String actual = StringUtils.newStringIso8859_1(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1WithNullBytes_YgAw1() {
        byte[] bytes = null;
        String expected = null;
        String actual = StringUtils.newStringIso8859_1(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1WithEmptyBytes_Rkoc2() {
        byte[] bytes = new byte[0];
        String expected = "";
        String actual = StringUtils.newStringIso8859_1(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAscii_wnFW0() {
        String string = "Hello, World!";
        byte[] expected = "Hello, World!".getBytes(StandardCharsets.US_ASCII);
        byte[] actual = StringUtils.getBytesUsAscii(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithNullBytes_GlEk0() {
        byte[] bytes = null;
        String charsetName = "UTF-8";
        String expected = null;
        String actual = StringUtils.newString(bytes, charsetName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithNonNullBytes_VDFj1() {
        byte[] bytes = new byte[]{97, 98, 99};
        String charsetName = "UTF-8";
        String expected = "abc";
        String actual = StringUtils.newString(bytes, charsetName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_NullString_dhIu0() {
        String string = null;
        String charsetName = "UTF-8";
        byte[] expected = null;
        byte[] actual = StringUtils.getBytesUnchecked(string, charsetName);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_ValidString_QtoX1() {
        String string = "Hello, World!";
        String charsetName = "UTF-8";
        byte[] expected = string.getBytes(StandardCharsets.UTF_8);
        byte[] actual = StringUtils.getBytesUnchecked(string, charsetName);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8_RvUB0() {
        String string = "Hello, World!";
        byte[] expected = string.getBytes(StandardCharsets.UTF_8);
        byte[] actual = StringUtils.getBytesUtf8(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAscii_jCYO0() {
        byte[] bytes = "Hello, World!".getBytes(StandardCharsets.US_ASCII);
        String expected = "Hello, World!";
        String actual = StringUtils.newStringUsAscii(bytes);
        assertEquals(expected, actual);
    }
}