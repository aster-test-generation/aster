/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_MDxn0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        String str = "example";
        String expected = "example";
        String actual = qCodec.decode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidCharset_VDzc1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec("invalid");
        String str = "example";
        try {
            qCodec.decode(str);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Unsupported encoding"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_Xuhp1() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        Object result = codec.decode("test");
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonString_LrlV2() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        Object result = codec.decode(123);
        assertEquals(123, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_ivMy1() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        String input = "=?UTF-8?Q?Hello, World!?=";
        Object result = codec.encode(input);
        assertEquals("=?UTF-8?Q?Hello, World!?=", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDoEncodingWithEmptyBytes_CcMf3() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        byte[] bytes = new byte[]{};
        byte[] expected = new byte[]{};
        assertEquals(expected, qCodec.doEncoding(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithInvalidCharset_rHDl3() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        String charsetName = "InvalidCharset";
        String text = "Hello, World!";
        try {
            qCodec.encodeText(text, charsetName);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidCharset_VDzc1_GPbs0() throws DecoderException {
        QCodec qCodec = new QCodec("invalid");
        byte[] str = "example".getBytes(StandardCharsets.US_ASCII);
        try {
            qCodec.decode(str);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Unsupported encoding"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullString_kIvJ2_OJJI0() throws DecoderException {
        QCodec qCodec = new QCodec();
        String str = null;
        try {
            qCodec.decode(str);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Input string is empty"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_ivMy1_jAaP0() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        String input = "=?UTF-8?Q?Hello, World!?=";
        String result = codec.encodeText(input, StandardCharsets.UTF_8);
        assertEquals("=?UTF-8?Q?Hello, World!?=", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidSourceStrAndCharset_rnOK0_Hcif0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "=?UTF-8?Q?Hello, World!?=";
        String sourceCharset = StandardCharsets.UTF_8.name();
        String encodedStr = qCodec.encodeText(sourceStr, sourceCharset);
        assertEquals("=?UTF-8?Q?Hello, World!?=", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidSourceCharset_jktb1_QGXi0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = "InvalidCharset";
        try {
            qCodec.encodeText(sourceStr, sourceCharset);
        } catch (EncoderException e) {
            assertEquals("Invalid charset name: InvalidCharset", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_ivMy1_fid3() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        String input = "Hello, World!";
        Object result = codec.encode(input);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithEmptyText_DYxh1() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        String encodedText = codec.encodeText("", "UTF-8");
        assertEquals("", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithCharset_VKTW0_OcNv0_fid3() throws EncoderException {
        QCodec qCodec = new QCodec();
        Charset charset = StandardCharsets.UTF_8;
        String text = "Hello, World!";
        String encodedText = qCodec.encodeText(text, charset);
        Assertions.assertEquals("Hello, World!", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_ivMy1_jAaP0_fid3() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        String input = "Hello, World!";
        String result = codec.encodeText(input, StandardCharsets.UTF_8);
        assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidSourceStrAndCharset_rnOK0_Hcif0_fid3() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = StandardCharsets.UTF_8.name();
        String encodedStr = qCodec.encodeText(sourceStr, sourceCharset);
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithEmptyText_DYxh1_RoSH0() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        String encodedText = codec.encodeText("", java.nio.charset.Charset.forName("UTF-8"));
        assertEquals("", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_HrOD0_fid3() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello, World!";
        String charset = "UTF-8";
        String expected = "QCodec[charset=UTF-8, encoding=US-ASCII, encodedText=SGVsbG8sIFdvcmxkIQ==]";
        String actual = qCodec.encodeText(text, charset);
        assertEquals(expected, actual);
    }
}