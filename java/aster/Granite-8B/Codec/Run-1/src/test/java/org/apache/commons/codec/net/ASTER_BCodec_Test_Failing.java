/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullCharset_TGYv3() {
        try {
            new BCodec(null, CodecPolicy.STRICT);
            fail("IllegalArgumentException expected");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("Charset must not be null"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNullPolicy_IrWG4() {
        try {
            new BCodec(Charset.forName("UTF-8"), null);
            fail("IllegalArgumentException expected");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("CodecPolicy must not be null"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithValidInput_SLHV6() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "ThisIsATest";
        String result = bCodec.decodeText(text);
        assertEquals("ThisIsATest", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharset_zrhz2_WKgH0() {
        BCodec bCodec = new BCodec(Charset.forName("InvalidCharset"), CodecPolicy.STRICT);
        try {
            bCodec.encode("Hello, World!", "InvalidCharset");
            fail("Expected UnsupportedCharsetException");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("InvalidCharset"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidCharset_osUB5_ylaj0() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "ThisIsATest";
        try {
            bCodec.decodeText(text);
        } catch (DecoderException e) {
            assertEquals("This codec cannot decode " + bCodec.getEncoding() + " encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_zRoh0_xlVT0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual;
        try {
            actual = bCodec.decode(value);
        } catch (DecoderException e) {
            throw new RuntimeException(e);
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_SrbB2_dXPw0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual;
        try {
            actual = bCodec.decode(value);
        } catch (DecoderException e) {
            throw new RuntimeException(e);
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullCharset_DBEr6_hSqa0() {
        BCodec bCodec = new BCodec(null, CodecPolicy.STRICT);
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = null;
        try {
            actual = bCodec.decode(value);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncoding_OFcw8_TJym0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-16"), CodecPolicy.STRICT);
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = null;
        try {
            actual = bCodec.decode(value);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_anwQ0_KPVR0() {
        BCodec bCodec = new BCodec("UTF-8");
        String value = "Hello, World!";
        Object decodedValue;
        try {
            decodedValue = bCodec.decode(value);
        } catch (DecoderException e) {
            throw new RuntimeException(e);
        }
        assertEquals(decodedValue, "Hello, World!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ASdu0_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLenientPolicy_zxEV1_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String strSource = "Hello, World!";
        String encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        assertEquals("SGVsbG8sIFdvcmxkIQ===", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_HdRK2_fid1() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String strSource = "Hello, World!";
        String encodedText = bCodec.encode(strSource, "UTF-8");
        assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset4_bVro3_fid1() {
        BCodec bCodec = new BCodec();
        assertEquals(null, bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNonNullText_uwCB1_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        String text = "Hello, World!";
        String encodedText = bCodec.encodeText(text, "UTF-8");
        assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidCharsetToken_kdBN3_fid1() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "ThisIsATest";
        try {
            bCodec.decodeText(text);
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: charset token not found", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidEncodingToken_oXaU4_fid1() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "ThisIsATest";
        try {
            bCodec.decodeText(text);
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: encoding token not found", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithStrictPolicy_tkRO0_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "Hello, World!";
        String expected = "PREFIXUTF-8SEPstrictSEPHello, World!";
        String actual = bCodec.encodeText(text, Charset.forName("UTF-8"));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithLenientPolicy_mVMI1_fid1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String text = "Hello, World!";
        String expected = "PREFIXUTF-8SEPlenientSEPHello, World!";
        String actual = bCodec.encodeText(text, Charset.forName("UTF-8"));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncoding_OFcw8_TJym0_fid2() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-16"), CodecPolicy.STRICT);
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = null;
        try {
            actual = bCodec.decode(value);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_GCXR0_HJUe0_fid2() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String encodedString = null;
        try {
            encodedString = bCodec.encode(strSource);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedString);
    }
}