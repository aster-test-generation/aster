/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BinaryCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_aSiM0() {
        byte[] raw = {65, 66, 67};
        String expected = "010000110100001001000001";
        String actual = BinaryCodec.toAsciiString(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiStringWithEmptyArray_QFsk2() {
        byte[] raw = {};
        String expected = "";
        String actual = BinaryCodec.toAsciiString(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiStringWithNullArray_DXTO3() {
        byte[] raw = null;
        String expected = "";
        String actual = BinaryCodec.toAsciiString(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiWithEmptyArray_Epdp0() {
        char[] ascii = new char[0];
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiWithMultipleBitSets_iIbN2() {
        char[] ascii = new char[]{'1', '1', '0', '0', '1', '1', '0', '0'};
        byte[] expected = new byte[]{42};
        byte[] actual = BinaryCodec.fromAscii(ascii);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiWithMultipleGroupsOfBits_PaSb3() {
        char[] ascii = new char[]{'1', '1', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0'};
        byte[] expected = new byte[]{42, 42};
        byte[] actual = BinaryCodec.fromAscii(ascii);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiWithAllBitsSet_eKvL5() {
        char[] ascii = new char[]{'1', '1', '1', '1', '1', '1', '1', '1'};
        byte[] expected = new byte[]{-1};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsEmptyArray_QgnC0() {
        byte[] raw = new byte[0];
        char[] expected = new char[0];
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsSingleBitSet_teiy1() {
        byte[] raw = new byte[]{(byte) 0x80};
        char[] expected = new char[]{'1', '0', '0', '0', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsAllBitsSet_Rxso4() {
        byte[] raw = new byte[]{(byte) 0xFF, (byte) 0xFF};
        char[] expected = new char[]{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToByteArrayWithNullInput_RThX0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] expected = new byte[0];
        byte[] actual = codec.toByteArray(null);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiEmptyArray_wlZk0() {
        byte[] ascii = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNullArray_EaUT0() {
        byte[] array = null;
        assertTrue(BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithEmptyArray_Qupe1() {
        byte[] array = new byte[0];
        assertTrue(BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNonEmptyArray_IZsd2() {
        byte[] array = new byte[1];
        assertFalse(BinaryCodec.isEmpty(array));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidInput_MFuU1() {
        BinaryCodec binaryCodec = new BinaryCodec();
        Object raw = new Object();
        try {
            binaryCodec.encode(raw);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertEquals("argument not a byte array", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiSingleBitSet_nXfJ1_HfFX0() {
        byte[] ascii = new byte[1];
        ascii[0] = '1';
        byte[] expected = new byte[1];
        expected[0] = (byte) 128;
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertFalse(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleBitSets_QxKT2_rTrY0() {
        byte[] ascii = new byte[4];
        ascii[0] = '1';
        ascii[1] = '0';
        ascii[2] = '1';
        ascii[3] = '0';
        byte[] expected = new byte[1];
        expected[0] = (byte) 144;
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertFalse(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleGroups_tpdP3_gtVd0() {
        byte[] ascii = new byte[8];
        ascii[0] = '1';
        ascii[1] = '0';
        ascii[2] = '1';
        ascii[3] = '0';
        ascii[4] = '1';
        ascii[5] = '0';
        ascii[6] = '1';
        ascii[7] = '0';
        byte[] expected = new byte[2];
        expected[0] = (byte) 144;
        expected[1] = (byte) 144;
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertFalse(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleGroupsWithPadding_syJq4_IGcO0() {
        byte[] ascii = new byte[9];
        ascii[0] = '1';
        ascii[1] = '0';
        ascii[2] = '1';
        ascii[3] = '0';
        ascii[4] = '1';
        ascii[5] = '0';
        ascii[6] = '1';
        ascii[7] = '0';
        ascii[8] = '0';
        byte[] expected = new byte[2];
        expected[0] = (byte) 144;
        expected[1] = (byte) 144;
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertFalse(Arrays.equals(expected, actual));
    }
}