/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_jYRH1() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            qCodec.decode("encodedString");
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Unsupported encoding"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidCharset_eUDr4() {
        QCodec qCodec = new QCodec("invalidCharset");
        try {
            qCodec.decode("encodedString");
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Unsupported encoding"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonEmptyBytes_ukRz2() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_dWYG0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String encodedStr = qCodec.encode(sourceStr, Charset.forName("UTF-8"));
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_wLQa0() {
        QCodec qCodec = new QCodec("UTF-8");
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks2_Gowp1() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_xekU0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String encodedStr = qCodec.encode(sourceStr);
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNonNullText_cEfw1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello, World!";
        String actual = qCodec.encodeText(text, "UTF-8");
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidCharset_XEYb2() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("Invalid_Charset");
        String text = "=?Invalid_Charset?Q?Hello_World!?=";
        try {
            codec.decodeText(text);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("This codec cannot decode Invalid_Charset encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidEncoding_CjCw3() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "=?UTF-8?B?Invalid_Encoding?=";
        try {
            codec.decodeText(text);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("This codec cannot decode Invalid_Encoding encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithMissingCharsetToken_MPFE4() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "=?UTF-8?Q?Hello_World!?=";
        try {
            codec.decodeText(text.replace("charset", "charset2"));
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: charset token not found", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithMissingEncodingToken_oAoP5() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "=?UTF-8?Q?Hello_World!?=";
        try {
            codec.decodeText(text.replace("encoding", "encoding2"));
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: encoding token not found", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithMissingSeparator_Letk6() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "=?UTF-8?Q?Hello_World!?=";
        try {
            codec.decodeText(text.replace("?", "?2"));
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: invalid encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidSeparator_FPcL7() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "=?UTF-8?Q?Hello_World!?=";
        try {
            codec.decodeText(text.replace("?", "2"));
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: invalid encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithMissingCharset_vgpY8() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "=?UTF-8?Q?Hello_World!?=";
        try {
            codec.decodeText(text.replace("charset", ""));
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: charset not specified", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_iyjK0_aeOJ0() {
        QCodec qCodec = new QCodec("UTF-8");
        String decodedString = null;
        try {
            decodedString = qCodec.decode("encodedString");
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("decodedString", decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Ypok0_PUfY0() {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual;
        try {
            actual = qCodec.encodeText(sourceStr, Charset.forName(sourceCharset));
        } catch (EncoderException e) {
            throw new RuntimeException(e);
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_dWYG0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "=?UTF-8?Q?Hello, World!?=";
        String encodedStr = qCodec.encode(sourceStr, Charset.forName("UTF-8"));
        assertEquals("=?UTF-8?Q?Hello, World!?=", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_xekU0_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "=?UTF-8?Q?Hello, World!?=";
        String encodedStr = qCodec.encode(sourceStr);
        assertEquals("=?UTF-8?Q?Hello, World!?=", encodedStr);
    }
}