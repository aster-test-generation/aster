/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_qTdG0() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "value";
        String decodedValue = bCodec.decode(value);
        assertEquals("decodedValue", decodedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_Lzol0() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        String value = "example";
        Object expected = "decodedValue";
        Object actual = bCodec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_Ttpa1_fid2() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "value";
        try {
            bCodec.decode(value);
        } catch (DecoderException e) {
            assertEquals("Unsupported encoding", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithIllegalArgumentException_HZLx2_fid2() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "value";
        try {
            bCodec.decode(value);
        } catch (DecoderException e) {
            assertEquals("Invalid value", e.getMessage());
        }
    }
}