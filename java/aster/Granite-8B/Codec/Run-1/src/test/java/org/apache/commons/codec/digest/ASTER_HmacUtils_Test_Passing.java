/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHmacSha256_dXrC0_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHmacSha256_dXrC0_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getHmacSha256(key);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_thfE0() {
        String name = "HmacSHA256";
        boolean expected = true;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable2_dxdb1() {
        String name = "MD5";
        boolean expected = false;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable3_oCZQ2() {
        String name = "HmacSHA512";
        boolean expected = true;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable4_huWL3() {
        String name = "HmacSHA384";
        boolean expected = true;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable5_RhaH4() {
        String name = "HmacSHA1";
        boolean expected = true;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable7_hPtN6() {
        String name = "HmacSHA224";
        boolean expected = true;
        boolean actual = HmacUtils.isAvailable(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexStringWithAlgorithm_rMVR4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        assertEquals("01433efd5f16327ea4b31144572c67f6", hmacUtils.hmacHex("value"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexBytesWithAlgorithm_heEp5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        assertEquals("01433efd5f16327ea4b31144572c67f6", hmacUtils.hmacHex("value".getBytes()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex2_OkZV1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("db0cf14221234108d75aa9a10ff7f459d934fb75", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex3_yfbm2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("613301f9a964155ca495f189cf6a51e8874144fdfeeac503a76ce2f4", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex4_BVjm3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex5_usxb4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("06033628cccfbb7ed0b91f0aeeee422e566eee5f653993d775f37ce31db7f08b67f9267948b4aa2d6c2ca9d367c8939d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex6_nvNf5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("1b7a0dffd88f80d8499ba4f014ed94ccdc185564eddd9fac6cdca3efeea9f2f8ebb77cfa95e6d43d7c7f56cd693e4ab58e3d1d99b02ef51d0bc4659de86c4380", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex2_nWnU1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("db0cf14221234108d75aa9a10ff7f459d934fb75", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex3_jPHO2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("613301f9a964155ca495f189cf6a51e8874144fdfeeac503a76ce2f4", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex4_KFMH3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex5_UruG4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("06033628cccfbb7ed0b91f0aeeee422e566eee5f653993d775f37ce31db7f08b67f9267948b4aa2d6c2ca9d367c8939d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex6_RNrJ5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("1b7a0dffd88f80d8499ba4f014ed94ccdc185564eddd9fac6cdca3efeea9f2f8ebb77cfa95e6d43d7c7f56cd693e4ab58e3d1d99b02ef51d0bc4659de86c4380", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex8_gVwZ7() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String result = hmacUtils.hmacHex("valueToDigest");
        assertEquals("db0cf14221234108d75aa9a10ff7f459d934fb75", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHmacSha384_ClDZ0() {
        byte[] key = new byte[32];
        Mac mac = HmacUtils.getHmacSha384(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_DdVa0_1() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_DdVa0_2() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_DdVa0_3() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_224));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_DdVa0_4() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_256));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_DdVa0_5() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_384));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_DdVa0_6() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_512));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_xGqo0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        byte[] result = hmacUtils.hmac("value");
        assertEquals(result.length, 16);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac2_deJF1() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] result = hmacUtils.hmac("value");
        assertEquals(result.length, 20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac3_ZpIW2() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] result = hmacUtils.hmac("value");
        assertEquals(result.length, 28);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac4_emqy3() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac("value");
        assertEquals(result.length, 32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac5_QGTM4() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] result = hmacUtils.hmac("value");
        assertEquals(result.length, 48);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac6_cfIt5() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] result = hmacUtils.hmac("value");
        assertEquals(result.length, 64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac7_fvWs6() {
        HmacUtils hmacUtils = new HmacUtils("HmacSHA512", "key".getBytes());
        byte[] result = hmacUtils.hmac("value");
        assertEquals(result.length, 64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac8_yMnO7() {
        HmacUtils hmacUtils = new HmacUtils("HmacSHA256", "key".getBytes());
        byte[] result = hmacUtils.hmac("value");
        assertEquals(result.length, 32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac9_TaHi8() {
        HmacUtils hmacUtils = new HmacUtils("HmacSHA1", "key".getBytes());
        byte[] result = hmacUtils.hmac("value");
        assertEquals(result.length, 20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac10_ZDIz9() {
        HmacUtils hmacUtils = new HmacUtils("HmacMD5", "key".getBytes());
        byte[] result = hmacUtils.hmac("value");
        assertEquals(result.length, 16);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_FkBo0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "05e7be9b69af4228bf184965ba4d9cca";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHmacSha1_RxRe0_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHmacSha1_RxRe0_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertEquals("HmacSHA1", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_WwYq0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "06033628cccfbb7ed0b91f0aeeee422e566eee5f653993d775f37ce31db7f08b67f9267948b4aa2d6c2ca9d367c8939d";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHmacSha512_IHKt0() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getHmacSha512(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_iqos0() {
        String expected = "01433efd5f16327ea4b31144572c67f6";
        String actual = HmacUtils.hmacMd5Hex("key".getBytes(), "value".getBytes());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_ViHa0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "db0cf14221234108d75aa9a10ff7f459d934fb75";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_LmaR0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "19fce7c225381ea446738019472fc2835a53dc59604fe6e39b70b8525dda997d";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac_FDCC0_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_MD5, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac_FDCC0_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_MD5, key);
        assertEquals("HmacMD5", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac2_fFBa1_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_1, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac2_fFBa1_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_1, key);
        assertEquals("HmacSHA1", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac3_wihq2_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_224, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac3_wihq2_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_224, key);
        assertEquals("HmacSHA224", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac4_Lsad3_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_256, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac4_Lsad3_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_256, key);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac5_HSur4_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_384, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac5_HSur4_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_384, key);
        assertEquals("HmacSHA384", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac6_zLfK5_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_512, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac6_zLfK5_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_512, key);
        assertEquals("HmacSHA512", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac7_xctw6_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacMD5", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac7_xctw6_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacMD5", key);
        assertEquals("HmacMD5", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac8_YyEE7_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA1", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac8_YyEE7_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA1", key);
        assertEquals("HmacSHA1", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac9_wDpM8_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA224", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac9_wDpM8_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA224", key);
        assertEquals("HmacSHA224", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac10_JuBn9_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac10_JuBn9_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac11_usPZ10_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA384", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac11_usPZ10_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA384", key);
        assertEquals("HmacSHA384", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac12_biFm11_1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA512", key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac12_biFm11_2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA512", key);
        assertEquals("HmacSHA512", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_lsLN0() {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expectedResult = "1b7a0dffd88f80d8499ba4f014ed94ccdc185564eddd9fac6cdca3efeea9f2f8ebb77cfa95e6d43d7c7f56cd693e4ab58e3d1d99b02ef51d0bc4659de86c4380";
        String actualResult = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_gHzq0() {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "1b7a0dffd88f80d8499ba4f014ed94ccdc185564eddd9fac6cdca3efeea9f2f8ebb77cfa95e6d43d7c7f56cd693e4ab58e3d1d99b02ef51d0bc4659de86c4380";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithByteBuffer_WgDQ0() {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expected = "01433efd5f16327ea4b31144572c67f6";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex4_GbJD3_hVyO0() {
        String expected = "57443a4c052350a44638835d64fd66822f813319";
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key");
        String actual = hmacUtils.hmacHex(ByteBuffer.wrap("value".getBytes()));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHmacSha256_dXrC0() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getHmacSha256(key);
        assertNotNull(mac);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_DdVa0() {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5));
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_1));
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_224));
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_256));
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_384));
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_512));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHmacSha1_RxRe0() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getHmacSha1(key);
        assertNotNull(mac);
        assertEquals("HmacSHA1", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac_FDCC0() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_MD5, key);
        assertNotNull(mac);
        assertEquals("HmacMD5", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac2_fFBa1() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_1, key);
        assertNotNull(mac);
        assertEquals("HmacSHA1", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac3_wihq2() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_224, key);
        assertNotNull(mac);
        assertEquals("HmacSHA224", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac4_Lsad3() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_256, key);
        assertNotNull(mac);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac5_HSur4() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_384, key);
        assertNotNull(mac);
        assertEquals("HmacSHA384", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac6_zLfK5() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_512, key);
        assertNotNull(mac);
        assertEquals("HmacSHA512", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac7_xctw6() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacMD5", key);
        assertNotNull(mac);
        assertEquals("HmacMD5", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac8_YyEE7() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA1", key);
        assertNotNull(mac);
        assertEquals("HmacSHA1", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac9_wDpM8() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA224", key);
        assertNotNull(mac);
        assertEquals("HmacSHA224", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac10_JuBn9() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", key);
        assertNotNull(mac);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac11_usPZ10() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA384", key);
        assertNotNull(mac);
        assertEquals("HmacSHA384", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac12_biFm11() {
        byte[] key = new byte[16];
        Mac mac = HmacUtils.getInitializedMac("HmacSHA512", key);
        assertNotNull(mac);
        assertEquals("HmacSHA512", mac.getAlgorithm());
    }
}