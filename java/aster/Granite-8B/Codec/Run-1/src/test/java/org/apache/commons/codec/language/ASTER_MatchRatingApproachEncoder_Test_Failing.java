/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MatchRatingApproachEncoder_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("a", "a"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aa", "aa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaa", "aaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaa", "aaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaa", "aaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaa", "aaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaa", "aaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaa", "aaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaa", "aaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaa", "aaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaa", "aaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaa", "aaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaa", "aaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaa", "aaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels_hyOv0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Apple";
        String expected = "ppl";
        String actual = encoder.removeVowels(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels2_zGOa1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Orange";
        String expected = "Orng";
        String actual = encoder.removeVowels(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals2_ckRN1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("a", "a");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals3_aUAm2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("aa", "aa");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals5_MHDU4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("aaab", "aaab");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals6_LMsS5() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("aaab", "aaac");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals7_wxtd6() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("aaab", "aaax");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals8_YMZZ7() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("aaab", "aaay");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEquals10_cEbu9() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("aaax", "aaay");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_AcOZ0() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Baker";
        String expected = "BAKR";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants2_DGgk1() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Miller";
        String expected = "MLR";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants3_pmZY2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Smith";
        String expected = "SMT";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants4_lnLo3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Johnson";
        String expected = "JNSN";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants5_wZgP4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Wilson";
        String expected = "WLSON";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants6_BSWn5() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Davis";
        String expected = "DVS";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants7_kXSX6() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Moore";
        String expected = "MR";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants8_mHTx7() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Taylor";
        String expected = "TLR";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants9_qIIH8() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Anderson";
        String expected = "ANDRNSN";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants10_iUoJ9() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Robinson";
        String expected = "RBSN";
        String actual = encoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents1_esKS0() {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String accentedWord = "Lon";
        String expected = "Leon";
        String actual = matchRatingApproachEncoder.removeAccents(accentedWord);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents2_PUsa1() {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String accentedWord = "Thtre";
        String expected = "Theatre";
        String actual = matchRatingApproachEncoder.removeAccents(accentedWord);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents3_aNRa2() {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String accentedWord = "Mxico";
        String expected = "Mexico";
        String actual = matchRatingApproachEncoder.removeAccents(accentedWord);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents4_KNWp3() {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String accentedWord = "Brsil";
        String expected = "Bresil";
        String actual = matchRatingApproachEncoder.removeAccents(accentedWord);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_gYOd0() {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String name = "John-Doe";
        String expected = "JOHND";
        String actual = matchRatingApproachEncoder.cleanName(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanNameWithAccents_uzWw1() {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String name = "Jos-Prez";
        String expected = "JOSEPEREZ";
        String actual = matchRatingApproachEncoder.cleanName(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_1_aosn0() {
        MatchRatingApproachEncoder classundertest = new MatchRatingApproachEncoder();
        int actual = classundertest.getMinRating(1);
        int expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_2_nKKQ1() {
        MatchRatingApproachEncoder classundertest = new MatchRatingApproachEncoder();
        int actual = classundertest.getMinRating(2);
        int expected = 2;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_3_YauQ2() {
        MatchRatingApproachEncoder classundertest = new MatchRatingApproachEncoder();
        int actual = classundertest.getMinRating(3);
        int expected = 3;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_4_SyfG3() {
        MatchRatingApproachEncoder classundertest = new MatchRatingApproachEncoder();
        int actual = classundertest.getMinRating(4);
        int expected = 4;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_5_aLGr4() {
        MatchRatingApproachEncoder classundertest = new MatchRatingApproachEncoder();
        int actual = classundertest.getMinRating(5);
        int expected = 5;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_10_QFNo9() {
        MatchRatingApproachEncoder classundertest = new MatchRatingApproachEncoder();
        int actual = classundertest.getMinRating(10);
        int expected = 2;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_11_Slan10() {
        MatchRatingApproachEncoder classundertest = new MatchRatingApproachEncoder();
        int actual = classundertest.getMinRating(11);
        int expected = 2;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_12_CnMK11() {
        MatchRatingApproachEncoder classundertest = new MatchRatingApproachEncoder();
        int actual = classundertest.getMinRating(12);
        int expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOneLetterName_SpMG3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "A";
        String expected = "A";
        String actual = encoder.encode(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCleanedName_hAeb4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John Smith";
        String expected = "JhnSmth";
        String actual = encoder.encode(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithRemovedVowelsName_pZCc5() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John Smith";
        String expected = "JhnSthm";
        String actual = encoder.encode(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithRemovedDoubleConsonantsName_NcrF6() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John Smith";
        String expected = "JhSmth";
        String actual = encoder.encode(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_1_fid3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("a", "a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_2() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aa", "aa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_3() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaa", "aaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_4() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaa", "aaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_5() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaa", "aaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_6() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaa", "aaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_7() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaa", "aaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_8() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaa", "aaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_9() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaa", "aaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_10() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaa", "aaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_11() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaa", "aaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_12() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaa", "aaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_13() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaa", "aaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_14() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaa", "aaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_15() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_16() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_17() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_18() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_19() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_20() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_21() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_22() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_23() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_24() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_25() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_26() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_27() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_28() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_29() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_30() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_31() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_32() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_33() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_34() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_35() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_36() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLeftToRightThenRightToLeftProcessing_Ixpn0_37() {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        assertEquals(0, encoder.leftToRightThenRightToLeftProcessing("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"));
    }
}