/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest_KTgU0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest2_HbDs1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("ISO-8859-1"));
        assertEquals("ISO-8859-1", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest3_MKzh2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-16");
        assertEquals("UTF-16", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest4_hnnW3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest5_ojkW4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest6_tvpY5() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("ISO-8859-1"), true);
        assertEquals("ISO-8859-1", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest8_IaqD7() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), false);
        assertEquals("UTF-8", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest9_jblQ8() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("ISO-8859-1"), false);
        assertEquals("ISO-8859-1", codec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_lLsV0() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -2};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 61, 61};
        byte[] actual = (byte[]) codec.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_fAqq1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "Hello, World!";
        String expected = "Hello, World!";
        String actual = (String) codec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_PLZL0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        assertEquals(Charset.forName("UTF-8"), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset2_PwaB1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        assertEquals(Charset.forName("UTF-8"), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset3_uqkk2() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        assertEquals(Charset.forName("UTF-8"), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset4_ZJkW3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        assertEquals(Charset.defaultCharset(), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset5_yout4() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), false);
        assertEquals(Charset.forName("UTF-8"), codec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintable_BitSetPrintable_BytesNull_ReturnsNull_KwiC0() {
        final BitSet printable = null;
        final byte[] bytes = null;
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintable_BitSetPrintable_BytesEmpty_ReturnsEmpty_enUE1() {
        final BitSet printable = new BitSet();
        final byte[] bytes = new byte[0];
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintable_BitSetPrintable_BytesStrict_ReturnsEncodedBytes_oeyN2() {
        final BitSet printable = new BitSet();
        final byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127};
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(399, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNull_KGtw0() {
        final BitSet printable = new BitSet();
        final byte[] bytes = null;
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintableNullStrict_bbbj1() {
        final BitSet printable = null;
        final byte[] bytes = new byte[0];
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSourceStr_zOPp5() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String encodedStr = codec.encode(sourceStr);
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSourceStrAndCharset_tPYn6() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "Hello, World!";
        String encodedStr = codec.encode(sourceStr);
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSourceStrAndCharsetAndStrict_VXgA7() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "Hello, World!";
        String encodedStr = codec.encode(sourceStr);
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSourceStrAndCharsetName_kZwb8() throws EncoderException, IllegalCharsetNameException, IllegalArgumentException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String encodedStr = codec.encode(sourceStr);
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_zCSp0_ZHFr0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello World!";
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World!", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_obWL1_Idga0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "Hello World!";
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World!", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetAndStrict_hrsH2_acVF0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "Hello World!";
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World!", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharsetName_KBOI3_zuXG0() throws IllegalCharsetNameException, UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String sourceStr = "Hello World!";
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World!", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSourceStrNull_jpKO4_iLCW0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertNull(decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSourceStrEmpty_NgOh5_mpjs0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "";
        String decodedStr = "";
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSourceStrContainsEncodedChar_vsCk6_eVoO0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello=20World!";
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World!", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSourceStrContainsEncodedCharAndCharset_XDGe7_Uyhs0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "Hello=20World!";
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World!", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSourceStrContainsEncodedCharAndCharsetAndStrict_tnCr8_KJdV0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "Hello=20World!";
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World!", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStringAndCharset_CsZo0_cqdD0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String sourceStr = "Hello World!";
        Charset sourceCharset = Charset.forName("UTF-8");
        String expected = "Hello World!";
        String actual = null;
        try {
            actual = codec.decode(sourceStr, sourceCharset);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithStringAndCharset2_nAOi1_btMc0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(false);
        String sourceStr = "Hello World!";
        Charset sourceCharset = Charset.forName("UTF-8");
        String expected = "Hello World!";
        String actual = null;
        try {
            actual = codec.decode(sourceStr, sourceCharset);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_dEro2_wfFR0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String input = "";
        String result = "";
        try {
            result = (String) codec.decode(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_AJjd2_CdHJ0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        Object input = null;
        Object expected = null;
        Object actual = null;
        try {
            actual = codec.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableNull_Ufmq0_Lede0() {
        byte[] input = null;
        byte[] expected = null;
        byte[] actual = null;
        try {
            actual = QuotedPrintableCodec.decodeQuotedPrintable(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableEscape_DqHi3_AuDF0() {
        byte[] input = "Hello=20World".getBytes();
        byte[] expected = "Hello World".getBytes();
        byte[] actual = null;
        try {
            actual = QuotedPrintableCodec.decodeQuotedPrintable(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeQuotedPrintableEscapeCr_bTqZ4_IBNu0() {
        byte[] input = "Hello=0D=0AWorld".getBytes();
        byte[] expected = "Hello\r\nWorld".getBytes();
        byte[] actual;
        try {
            actual = QuotedPrintableCodec.decodeQuotedPrintable(input);
        } catch (DecoderException e) {
            throw new RuntimeException(e);
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeStrict_oqMt1_rMuS0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] input = new byte[]{(byte) 0x3D, (byte) 0x3D};
        byte[] expected = new byte[]{(byte) 0x3D};
        try {
            byte[] actual = codec.decode(input);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_nDEU4_EgGP0() throws UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        byte[] input = new byte[]{(byte) 0x3D, (byte) 0x3D};
        byte[] expected = new byte[]{(byte) 0x3D};
        try {
            byte[] actual = codec.decode(input);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_CsIj0_bFHW0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = "Hello, World!";
        String encodedStr = null;
        try {
            encodedStr = codec.encode(sourceStr);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_nDYt1_Cwor0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String sourceStr = "Hello, World!";
        String encodedStr = null;
        try {
            encodedStr = codec.encode(sourceStr);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndStrict_CrCE2_wWvH0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String sourceStr = "Hello, World!";
        String encodedStr = null;
        try {
            encodedStr = codec.encode(sourceStr);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetName_aEkp3_LTVS0() throws UnsupportedCharsetException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String encodedStr = null;
        try {
            encodedStr = codec.encode(sourceStr);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictTrue_JZtZ0_bjnZ0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        String encodedString = null;
        try {
            encodedString = codec.encode("Hello World", "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_AoNz1_kjvk0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        String encodedString = null;
        try {
            encodedString = codec.encode("Hello World", "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetAndStrictTrue_Lzyy4_lHUr0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        String encodedString = null;
        try {
            encodedString = codec.encode("Hello World", "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        assertEquals("Hello World", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceStr_Vcii5_TzBJ0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String encodedString = null;
        try {
            encodedString = codec.encode(null, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        assertEquals(null, encodedString);
    }
}