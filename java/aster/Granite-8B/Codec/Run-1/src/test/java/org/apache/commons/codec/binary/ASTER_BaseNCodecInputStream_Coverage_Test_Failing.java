/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BaseNCodecInputStream_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithLargeLength_nbjF2() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(0, baseNCodecInputStream.skip(Long.MAX_VALUE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithSmallLength_jyIb3() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(1, baseNCodecInputStream.skip(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithMultipleSmallLengths_fdMQ4() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(3, baseNCodecInputStream.skip(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithMultipleLargeLengths_nNik5() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(Long.MAX_VALUE, baseNCodecInputStream.skip(Long.MAX_VALUE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithMultipleSmallAndLargeLengths_QoOm6() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(4, baseNCodecInputStream.skip(4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithEOFAndSmallLength_PDao8() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(1, baseNCodecInputStream.skip(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithEOFAndSmallAndLargeLengths_qnYd10() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(3, baseNCodecInputStream.skip(5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithOffsetGreaterThanArrayLength_thpX3() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        try {
            baseNCodecInputStream.read(new byte[1], 1, 0);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithNoData_KJrZ6() throws IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        byte[] array = new byte[1];
        assertEquals(-1, baseNCodecInputStream.read(array, 0, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithEncodeDecode_koeK7() throws IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, true);
        byte[] array = new byte[1];
        assertEquals(0, baseNCodecInputStream.read(array, 0, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithDecodeEncode_JgNz8() throws IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        byte[] array = new byte[1];
        assertEquals(0, baseNCodecInputStream.read(array, 0, 1));
    }
}