/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Caverphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCaverphoneEqual_XjSN0() {
        Caverphone caverphone = new Caverphone();
        boolean result = caverphone.isCaverphoneEqual("string1", "string2");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCaverphone_FIkH0_fid1() {
        Caverphone caverphone = new Caverphone();
        String source = "example";
        String expected = "AKMPA11111";
        String actual = caverphone.caverphone(source);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Tgzv0_fid1() {
        Caverphone caverphone = new Caverphone();
        String input = "Hello";
        String expectedOutput = "ALA1111111";
        String actualOutput = caverphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_zZzH1_fid1() {
        Caverphone caverphone = new Caverphone();
        String input = "Hello, World!";
        String expectedOutput = "ALWT111111";
        String actualOutput = caverphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }
}