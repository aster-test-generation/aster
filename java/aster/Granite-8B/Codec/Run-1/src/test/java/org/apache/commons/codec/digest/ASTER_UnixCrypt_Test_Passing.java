/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_UnixCrypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_aasf0() {
        String original = "password";
        String salt = "abJnggxhB/yWI";
        String expected = "abJnggxhB/yWI";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_HDDP0() {
        byte[] original = new byte[]{0, 1, 2, 3, 4, 5, 6, 7};
        String salt = "ab";
        String expected = "abQeX8x7ieVh2";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthGreaterThanKeyLength_sBrj3() {
        byte[] original = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        String salt = "ab";
        String expected = "abQeX8x7ieVh2";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthLessThanKeyLength_OrpJ4() {
        byte[] original = new byte[]{0, 1, 2, 3, 4, 5, 6};
        String salt = "ab";
        String expected = "abC47LFvUn7gw";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthZero_UbXi5() {
        byte[] original = new byte[0];
        String salt = "ab";
        String expected = "abmF1QH4PEr.E";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthOne_mHld6() {
        byte[] original = new byte[]{0};
        String salt = "ab";
        String expected = "abmF1QH4PEr.E";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthTwo_iank7() {
        byte[] original = new byte[]{0, 1};
        String salt = "ab";
        String expected = "ab5RPZElElvj2";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthThree_rPqh8() {
        byte[] original = new byte[]{0, 1, 2};
        String salt = "ab";
        String expected = "abDh/0zz0Pers";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthFour_daIK9() {
        byte[] original = new byte[]{0, 1, 2, 3};
        String salt = "ab";
        String expected = "abU3gzjlMjvd6";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthFive_RxZE10() {
        byte[] original = new byte[]{0, 1, 2, 3, 4};
        String salt = "ab";
        String expected = "abqne2y/FWEO2";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithOriginalLengthSix_ihsY11() {
        byte[] original = new byte[]{0, 1, 2, 3, 4, 5};
        String salt = "ab";
        String expected = "abdkSV9Lz8I7I";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_fJfI2() {
        String salt = "ab";
        String result = UnixCrypt.crypt(new byte[8], salt);
        assertEquals("abmF1QH4PEr.E", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordAndSalt_ipuK6() {
        byte[] password = new byte[8];
        Arrays.fill(password, (byte) 0x41);
        String salt = "ab";
        String result = UnixCrypt.crypt(password, salt);
        assertEquals("ab.tI7/u7YLyo", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithPasswordAndLongSalt_ZSdJ7() {
        byte[] password = new byte[8];
        Arrays.fill(password, (byte) 0x41);
        String salt = "abcdefgh";
        String result = UnixCrypt.crypt(password, salt);
        assertEquals("ab.tI7/u7YLyo", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithValidSalt_mLse2() {
        String salt = "ab";
        String result = UnixCrypt.crypt(new byte[0], salt);
        assertEquals("abmF1QH4PEr.E", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCryptWithSalt_ijhF1() {
        String salt = "ab";
        byte[] original = new byte[8];
        String expected = "abmF1QH4PEr.E";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCrypt_GcKD0() {
        byte[] original = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        String salt = "ab";
        String expected = "abQeX8x7ieVh2";
        String actual = UnixCrypt.crypt(original, salt);
        assertEquals(expected, actual);
    }
}