/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BinaryCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiWithOddNumberOfBits_JNfO4() {
        char[] ascii = new char[]{'1', '1', '0', '0', '1', '1', '0', '0', '1'};
        byte[] expected = new byte[]{42, 1};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsMultipleBitSets_uUpf2() {
        byte[] raw = new byte[]{(byte) 0xFF, (byte) 0x00};
        char[] expected = new char[]{'0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsRandomBits_xwLy3() {
        byte[] raw = new byte[]{(byte) 0x55, (byte) 0xAA};
        char[] expected = new char[]{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToByteArrayWithNonEmptyInput_lQmp1() {
        BinaryCodec codec = new BinaryCodec();
        String ascii = "Hello, World!";
        byte[] expected = new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33};
        byte[] actual = codec.toByteArray(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_MgYl0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] raw = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{49, 50, 51};
        byte[] actual = codec.encode(raw);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_RBbv0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] input = "Hello, World!".getBytes();
        byte[] expectedOutput = new byte[]{72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33};
        byte[] actualOutput = codec.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes_IXvD0() {
        byte[] raw = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes2_bjcL1() {
        byte[] raw = new byte[]{(byte) 0};
        byte[] expected = new byte[]{'0', '0', '0', '0', '0', '0', '0', '0'};
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes3_MWUh2() {
        byte[] raw = new byte[]{(byte) 1};
        byte[] expected = new byte[]{'0', '0', '0', '0', '0', '0', '0', '1'};
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes4_nogN3() {
        byte[] raw = new byte[]{(byte) 127};
        byte[] expected = new byte[]{'0', '1', '1', '1', '1', '1', '1', '1'};
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiBytes5_RiPZ4() {
        byte[] raw = new byte[]{(byte) 128};
        byte[] expected = new byte[]{'1', '0', '0', '0', '0', '0', '0', '0'};
        byte[] actual = BinaryCodec.toAsciiBytes(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_aSiM0_fid1() {
        byte[] raw = {65, 66, 67};
        String expected = "ABC";
        String actual = BinaryCodec.toAsciiString(raw);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiWithMultipleBitSets_iIbN2_fid1() {
        char[] ascii = new char[]{'1', '1', '0', '0', '1', '1', '0', '0'};
        byte[] expected = new byte[]{42};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiWithMultipleGroupsOfBits_PaSb3_fid1() {
        char[] ascii = new char[]{'1', '1', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0', '1', '1', '0', '0'};
        byte[] expected = new byte[]{42, 42};
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsMultipleBitSets_uUpf2_fid1() {
        byte[] raw = new byte[]{(byte) 0xFF, (byte) 0x00};
        char[] expected = new char[]{'1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiCharsRandomBits_xwLy3_fid1() {
        byte[] raw = new byte[]{(byte) 0x55, (byte) 0xAA};
        char[] expected = new char[]{'0', '1', '0', '1', '0', '1', '0', '1', '1', '0', '1', '0', '1', '0', '1', '0'};
        assertArrayEquals(expected, BinaryCodec.toAsciiChars(raw));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_NZfn0() {
        BinaryCodec codec = new BinaryCodec();
        byte[] ascii = new byte[]{65, 66, 67};
        byte[] expected = new byte[]{65, 66, 67};
        byte[] actual = codec.decode(ascii);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiSingleBitSet_nXfJ1_HfFX0_fid3() {
        byte[] ascii = new byte[1];
        ascii[0] = '1';
        byte[] expected = new byte[1];
        expected[0] = (byte) 128;
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleBitSets_QxKT2_rTrY0_fid3() {
        byte[] ascii = new byte[4];
        ascii[0] = '1';
        ascii[1] = '0';
        ascii[2] = '1';
        ascii[3] = '0';
        byte[] expected = new byte[1];
        expected[0] = (byte) 144;
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleGroups_tpdP3_gtVd0_fid3() {
        byte[] ascii = new byte[8];
        ascii[0] = '1';
        ascii[1] = '0';
        ascii[2] = '1';
        ascii[3] = '0';
        ascii[4] = '1';
        ascii[5] = '0';
        ascii[6] = '1';
        ascii[7] = '0';
        byte[] expected = new byte[2];
        expected[0] = (byte) 144;
        expected[1] = (byte) 144;
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertTrue(Arrays.equals(expected, actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromAsciiMultipleGroupsWithPadding_syJq4_IGcO0_fid3() {
        byte[] ascii = new byte[9];
        ascii[0] = '1';
        ascii[1] = '0';
        ascii[2] = '1';
        ascii[3] = '0';
        ascii[4] = '1';
        ascii[5] = '0';
        ascii[6] = '1';
        ascii[7] = '0';
        ascii[8] = '0';
        byte[] expected = new byte[2];
        expected[0] = (byte) 144;
        expected[1] = (byte) 144;
        byte[] actual = BinaryCodec.fromAscii(ascii);
        assertTrue(Arrays.equals(expected, actual));
    }
}