/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Metaphone_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_ypvM0() throws org.apache.commons.codec.EncoderException {
        Metaphone metaphone = new Metaphone();
        Object obj = new Object();
        try {
            metaphone.encode(obj);
            fail("Expected EncoderException to be thrown");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().equals("Parameter supplied to Metaphone encode is not of type java.lang.String"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringObject_GWiy1() throws org.apache.commons.codec.EncoderException {
        Metaphone metaphone = new Metaphone();
        String obj = "Hello";
        String result = metaphone.encode(obj);
        assertEquals("HL", result);
    }
}