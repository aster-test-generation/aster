/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Coverage_Test_Failing {
    private static final int DEFAULT_SEED = 0;

    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithNonNullData_LZDL1() {
        String data = "Hello, World!";
        long[] expected = {0x81f16f391f16f39L, 0x4913b5bbb5b13bL};
        long[] actual = MurmurHash3.hash128(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_Vdnq0() {
        String data = "";
        int expected = 0;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithRandomData_nIEv1() {
        String data = "random data";
        int expected = 1835791072;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_cvYO0() {
        final byte[] data = new byte[10];
        final int length = 10;
        final int expected = 0;
        final int actual = MurmurHash3.hash32(data, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStatement_ljYi0() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 16;
        int index = 12;
        long[] hash = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(hash[0], 0);
        assertEquals(hash[1], 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128WithEmptyData_CLZg0_hhRX0() {
        String data = "";
        long[] expected = {0xcbf29ce4842223L, 0x137a581a5c71c17L};
        long[] actual = MurmurHash3.hash128(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStatement_ljYi0_1() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 16;
        int index = 12;
        long[] hash = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(hash[0], 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchStatement_ljYi0_2() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 16;
        int index = 12;
        long[] hash = MurmurHash3.hash128x64(data, offset, length, 0);
        assertEquals(hash[1], 0);
    }
}