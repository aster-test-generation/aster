/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BeiderMorseEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setNameTypeTest_Epwp0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        NameType nameType = NameType.ASHKENAZI;
        beiderMorseEncoder.setNameType(nameType);
        assertEquals(nameType, beiderMorseEncoder.getNameType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuleType_dhZm0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        RuleType ruleType = beiderMorseEncoder.getRuleType();
        assertNotNull(ruleType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsConcat_xFxs0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        boolean result = beiderMorseEncoder.isConcat();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void getNameType_iRnr0() {
        BeiderMorseEncoder beiderMorseEncoder = new BeiderMorseEncoder();
        NameType nameType = beiderMorseEncoder.getNameType();
        assertEquals(NameType.class, nameType.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSource_FGdR0_dCnG0() {
        BeiderMorseEncoder encoder = new BeiderMorseEncoder();
        String encoded = null;
        try {
            encoded = encoder.encode(null);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(null, encoded);
    }
}