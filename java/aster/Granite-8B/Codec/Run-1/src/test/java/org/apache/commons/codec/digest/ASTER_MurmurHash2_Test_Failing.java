/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash2_Test_Failing {
    private static long getLittleEndianLong(final byte[] data, final int index) {
        return (long) data[index] & 0xff | ((long) data[index + 1] & 0xff) << 8 | ((long) data[index + 2] & 0xff) << 16 | ((long) data[index + 3] & 0xff) << 24 | ((long) data[index + 4] & 0xff) << 32 | ((long) data[index + 5] & 0xff) << 40 | ((long) data[index + 6] & 0xff) << 48 | ((long) data[index + 7] & 0xff) << 56;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_ppfz0() {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        int length = 10;
        int seed = 0x9747b28c;
        int expected = 0x165667b1;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_RPBz0() {
        byte[] data = new byte[10];
        long hash = MurmurHash2.hash64(data, 10, 0xe17a1465);
        assertEquals(hash, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_MrlJ0_fid2() {
        String text = "Hello, World!";
        int from = 0;
        int length = text.length();
        int expected = 123456789; // Replace with the expected hash value
        int actual = MurmurHash2.hash32(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_hsUM0_fid2() {
        String text = "Hello, World!";
        int from = 0;
        int length = text.length();
        long expected = 1543061316551816161L;
        long actual = MurmurHash2.hash64(text, from, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_RXHF0_fid2() {
        String text = "Hello, World!";
        byte[] bytes = StringUtils.getBytesUtf8(text);
        long expected = 1234567890123456L; // Replace with expected hash value
        long actual = MurmurHash2.hash64(bytes, bytes.length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_TrfJ0_fid2() {
        String text = "Hello, World!";
        int expectedHash = 1634948464;
        int actualHash = MurmurHash2.hash32(text);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_PqSv0_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int length = 8;
        int seed = 0;
        long expected = 1633837924964864129L;
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64WithDifferentSeed_chFj1_fid2() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
        int length = 8;
        int seed = 1;
        long expected = -288230376151711743L;
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }
}