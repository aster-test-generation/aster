/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BaseNCodecOutputStream_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithOffsetGreaterThanArrayLength_tamw3() throws java.io.IOException {
        BaseNCodecOutputStream baseNCodecOutputStream = new BaseNCodecOutputStream(null, null, false);
        try {
            baseNCodecOutputStream.write(new byte[10], 10, 0);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithEncode_JxVJ6() throws java.io.IOException {
        BaseNCodecOutputStream baseNCodecOutputStream = new BaseNCodecOutputStream(null, null, true);
        baseNCodecOutputStream.write(new byte[10], 0, 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithDecode_evaT7() throws java.io.IOException {
        BaseNCodecOutputStream baseNCodecOutputStream = new BaseNCodecOutputStream(null, null, false);
        baseNCodecOutputStream.write(new byte[10], 0, 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithFlush_uyXe8_BBpo0() throws java.io.IOException {
        BaseNCodecOutputStream baseNCodecOutputStream = new BaseNCodecOutputStream(null, null, false);
        baseNCodecOutputStream.write(new byte[10], 0, 10);
        baseNCodecOutputStream.flush();
    }
}