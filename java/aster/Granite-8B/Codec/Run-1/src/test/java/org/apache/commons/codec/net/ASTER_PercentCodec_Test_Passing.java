/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PercentCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInvalidType_caaD2() {
        PercentCodec percentCodec = new PercentCodec();
        Object obj = new Object();
        try {
            percentCodec.encode(obj);
            fail("EncoderException expected");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("Objects of type " + obj.getClass().getName() + " cannot be Percent encoded"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidEscapeChars_LVqW5() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = "Hello%2GWorld".getBytes();
        try {
            percentCodec.decode(input);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidEscapeChars2_kUCc6() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = "Hello%2".getBytes();
        try {
            percentCodec.decode(input);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidEscapeChars3_TqqQ7() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = "Hello%2G".getBytes();
        try {
            percentCodec.decode(input);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_Pxlp2_IliS0() {
        PercentCodec percentCodec = new PercentCodec();
        Object input = null;
        Object expectedOutput = null;
        Object actualOutput = null;
        try {
            actualOutput = percentCodec.decode(input);
        } catch (DecoderException e) {
        }
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyBytes_nGCj1_oFZi0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[0];
        byte[] result = null;
        try {
            result = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithWillEncodeTrue_ZkEm6_TXSW0() {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = new byte[]{32, 33};
        byte[] result = null;
        try {
            result = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertNotEquals(new byte[]{37, 32, 37, 21}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode1_yjSL0_sQqZ0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0}, false);
        byte[] bytes = new byte[]{(byte) 0};
        byte[] result = null;
        try {
            result = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_TSxZ1_GiWg0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0}, false);
        byte[] bytes = new byte[]{(byte) 1};
        byte[] result = null;
        try {
            result = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_qpJE2_VBEG0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0}, false);
        byte[] bytes = new byte[]{(byte) 127};
        try {
            byte[] result = percentCodec.encode(bytes);
            assert result != null;
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode4_xrIH3_cCsU0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0}, false);
        byte[] bytes = new byte[]{(byte) -1};
        byte[] result = null;
        try {
            result = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode5_VgEk4_RVVw0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0}, false);
        byte[] bytes = new byte[]{(byte) -128};
        byte[] result = null;
        try {
            result = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_zGtK0_jQDw0() {
        PercentCodec codec = new PercentCodec();
        byte[] result = null;
        try {
            result = codec.encode(null);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_xFJL1_bbTU0() {
        PercentCodec codec = new PercentCodec();
        byte[] result = null;
        try {
            result = codec.encode(new byte[0]);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncoding_jjuL2_gqkZ0() {
        PercentCodec codec = new PercentCodec();
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        try {
            byte[] result = codec.encode(input);
            assertArrayEquals(input, result);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncodingNeededAndPlusForSpaceAndContainsSpace_gLlX5_slQq0() {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32}, true);
        byte[] bytes = new byte[]{32, 32, 32, 32, 32, 32, 32, 32, 32, 32};
        byte[] expected = new byte[]{43, 32, 32, 32, 32, 32, 32, 32, 32, 32};
        byte[] result = null;
        try {
            result = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertNotEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_cLrS4_fBon0() {
        PercentCodec percentCodec = new PercentCodec(new byte[0], true);
        byte[] bytes = "Hello World".getBytes();
        byte[] result = null;
        try {
            result = percentCodec.encode(bytes);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assert Arrays.equals(result, "Hello+World".getBytes());
    }
}