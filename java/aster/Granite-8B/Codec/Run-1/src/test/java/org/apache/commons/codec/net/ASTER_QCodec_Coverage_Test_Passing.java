/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_aEtV0() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        Object result = codec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedType_kMRc3() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        try {
            codec.decode(new Object());
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesNull_WatN0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = null;
        byte[] result = qCodec.doDecoding(bytes);
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesNotNull_oboY1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doDecoding(bytes);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingHasUnderscoresTrue_XJqD2() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] result = qCodec.doDecoding(bytes);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_coZY0() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        Object result = codec.encode(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_joDs2() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        Object input = new Object();
        try {
            codec.encode(input);
            fail("Expected EncoderException");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("Objects of type"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDoEncodingWithNullBytes_SyxQ2() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        byte[] bytes = null;
        byte[] expected = null;
        assertEquals(expected, qCodec.doEncoding(bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullText_JQbJ0() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        String encodedText = codec.encodeText(null, "UTF-8");
        assertEquals(null, encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidSourceStrAndCharset_rnOK0() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String encodedStr = qCodec.encode(sourceStr, sourceCharset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidSourceCharset_jktb1() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        String sourceCharset = "InvalidCharset";
        try {
            qCodec.encode(sourceStr, sourceCharset);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceStrAndCharset_FbdO2() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = null;
        String sourceCharset = null;
        try {
            qCodec.encode(sourceStr, sourceCharset);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithCharset_VKTW0() throws EncoderException {
        QCodec qCodec = new QCodec();
        Charset charset = Charset.forName("UTF-8");
        String text = "Hello, World!";
        String encodedText = qCodec.encodeText(text, charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithCharsetByName_bGMl1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String charsetName = "UTF-8";
        String text = "Hello, World!";
        String encodedText = qCodec.encodeText(text, charsetName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithDefaultCharset_iypk2_SakU0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello, World!";
        Charset charset = Charset.forName("UTF-8");
        String encodedText = qCodec.encodeText(text, charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_aEtV0_DBFP0() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        String result = codec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithCharset_VKTW0_OcNv0() throws EncoderException {
        QCodec qCodec = new QCodec();
        Charset charset = StandardCharsets.UTF_8;
        String text = "Hello, World!";
        String encodedText = qCodec.encodeText(text, charset);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesNotNull_oboY1_usxr0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doDecoding(bytes);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesNull_WatN0_WAhm0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = null;
        byte[] result = qCodec.doDecoding(bytes);
        org.junit.jupiter.api.Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingHasUnderscoresTrue_XJqD2_rNwT0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] result = qCodec.doDecoding(bytes);
        org.junit.jupiter.api.Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceStrAndCharset_FbdO2_JdcY0() throws org.apache.commons.codec.EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = null;
        Charset sourceCharset = null;
        try {
            qCodec.encodeText(sourceStr, sourceCharset);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullText_JQbJ0_Qstu0() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        String encodedText = codec.encodeText(null, Charset.forName("UTF-8"));
        assertEquals(null, encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeText_HrOD0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello, World!";
        String charset = "UTF-8";
        String expected = "=?UTF-8?Q?Hello, World!?=";
        String actual = qCodec.encodeText(text, charset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEmptyBytes_CcMf3_bZxo0() {
        QCodec qCodec = new QCodec(Charset.defaultCharset());
        byte[] bytes = new byte[0];
        assertArrayEquals(new byte[0], qCodec.doEncoding(bytes));
    }
}