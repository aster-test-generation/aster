/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_URLCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullStr_wULF0() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String decodedStr = urlCodec.decode(null, "UTF-8");
        assertEquals(null, decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyStr_fCTT1() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String decodedStr = urlCodec.decode("", "UTF-8");
        assertEquals("", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPlus_WRGk0() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = {'+', 'a'};
        URLCodec.decodeUrl(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithSpace_cVTy1() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = {' ', 'a'};
        URLCodec.decodeUrl(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithInvalidUrlEncoding_AELo2() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = {'a', 'b'};
        try {
            URLCodec.decodeUrl(bytes);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithValidUrlEncoding_KJtm3() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = {0, 0, 0, 0};
        URLCodec.decodeUrl(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_ctIy0() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        Object obj = null;
        Object result = urlCodec.decode(obj);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_XLEN1() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[0];
        Object result = urlCodec.decode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_oaqW2() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String input = "";
        Object result = urlCodec.decode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUnsupportedType_ySHe3() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        Object obj = new Object();
        try {
            urlCodec.decode(obj);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNonEmptyCharset_BIbq6() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        Object obj = "";
        Object result = urlCodec.decode(obj);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullString_thOr0() throws java.io.UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String encodedString = urlCodec.encode(null, "UTF-8");
        assertEquals(null, encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_sVbw1() throws java.io.UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String encodedString = urlCodec.encode("", "UTF-8");
        assertEquals("", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBytes_PWdc1() throws org.apache.commons.codec.EncoderException {
        URLCodec codec = new URLCodec();
        byte[] input = new byte[]{1, 2, 3};
        Object encoded = codec.encode(input);
        assert encoded != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_GsuY2() throws org.apache.commons.codec.EncoderException {
        URLCodec codec = new URLCodec();
        String input = "Hello, World!";
        Object encoded = codec.encode(input);
        assert encoded != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedType_yOIW3() throws org.apache.commons.codec.EncoderException {
        URLCodec codec = new URLCodec();
        Object input = new Object();
        try {
            codec.encode(input);
        } catch (EncoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedTypeWithCustomCharset_Emku4() throws org.apache.commons.codec.EncoderException {
        URLCodec codec = new URLCodec("UTF-8");
        Object input = new Object();
        try {
            codec.encode(input);
        } catch (EncoderException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBytesWithCustomCharset_cmzF6() throws org.apache.commons.codec.EncoderException {
        URLCodec codec = new URLCodec("UTF-8");
        byte[] input = new byte[]{1, 2, 3};
        Object encoded = codec.encode(input);
        assert encoded != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeStringWithCustomCharset_DmvW7() throws org.apache.commons.codec.EncoderException {
        URLCodec codec = new URLCodec("UTF-8");
        String input = "Hello, World!";
        Object encoded = codec.encode(input);
        assert encoded != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_XKGK1() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        String encodedString = urlCodec.encode("");
        Assertions.assertEquals("", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidString_BlSF2_WWqD0() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String inputString = "Hello World!";
        String decodedString = urlCodec.decode(inputString);
        org.junit.jupiter.api.Assertions.assertEquals(inputString, decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidString_pXZC3_aeJQ0() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String inputString = "Hello%20World!";
        String decodedString = urlCodec.decode(inputString);
        org.junit.jupiter.api.Assertions.assertEquals("Hello World!", decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyString_aSlT1_rZYA0() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String decodedString = urlCodec.decode("");
        org.junit.jupiter.api.Assertions.assertEquals("", decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringThatCanBeEncoded_KGHz3_nYmv0() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "\u00ff";
        try {
            String encodedString = urlCodec.encode(str, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            Assertions.fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeStringString_YJrz0() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello World";
        String charsetName = "UTF-8";
        String encodedStr = urlCodec.encode(str, charsetName);
        assertEquals("Hello+World", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeStringStringWithNullStr_BhOr1() throws UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = null;
        String charsetName = "UTF-8";
        String encodedStr = urlCodec.encode(str, charsetName);
        assertEquals(null, encodedStr);
    }
}