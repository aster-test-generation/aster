/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QuotedPrintableCodec_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NEcy0_1() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[10];
        byte[] expected = new byte[10];
        printable.set(0, 10);
        Arrays.fill(bytes, (byte) 65);
        Arrays.fill(expected, (byte) 65);
        printable.clear();
        printable.set(0, 5);
        printable.set(7, 10);
        bytes[0] = 65;
        bytes[1] = 32;
        bytes[2] = 33;
        bytes[3] = 34;
        bytes[4] = 35;
        bytes[5] = 36;
        bytes[6] = 37;
        bytes[7] = 38;
        bytes[8] = 39;
        bytes[9] = 40;
        expected[0] = 65;
        expected[1] = 32;
        expected[2] = 0;
        expected[3] = 34;
        expected[4] = 33;
        expected[5] = 36;
        expected[6] = 37;
        expected[7] = 38;
        expected[8] = 39;
        expected[9] = 0;
        printable.clear();
        printable.set(0, 10);
        bytes[0] = 0;
        bytes[1] = 1;
        bytes[2] = 2;
        bytes[3] = 3;
        bytes[4] = 4;
        bytes[5] = 5;
        bytes[6] = 6;
        bytes[7] = 7;
        bytes[8] = 8;
        bytes[9] = 9;
        expected[0] = 0;
        expected[1] = 30;
        expected[2] = 31;
        expected[3] = 32;
        expected[4] = 33;
        expected[5] = 34;
        expected[6] = 35;
        expected[7] = 36;
        expected[8] = 37;
        expected[9] = 38;
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintable_NullPrintable_osnW1() {
        final byte[] bytes = new byte[]{65, 66, 67};
        final boolean strict = false;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, strict);
        assert result != null;
        assert result.length == 6;
        assert result[0] == 65;
        assert result[1] == 61;
        assert result[2] == 36;
        assert result[3] == 66;
        assert result[4] == 61;
        assert result[5] == 36;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintable_Strict_NullPrintable_LuMY3() {
        final byte[] bytes = new byte[]{65, 66, 67};
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(null, bytes, strict);
        assert result != null;
        assert result.length == 6;
        assert result[0] == 65;
        assert result[1] == 61;
        assert result[2] == 36;
        assert result[3] == 66;
        assert result[4] == 61;
        assert result[5] == 36;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintable_Strict_EmptyPrintable_wbEh5() {
        final byte[] bytes = new byte[]{65, 66, 67};
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(new BitSet(), bytes, strict);
        assert result != null;
        assert result.length == 6;
        assert result[0] == 65;
        assert result[1] == 61;
        assert result[2] == 36;
        assert result[3] == 66;
        assert result[4] == 61;
        assert result[5] == 36;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_YDPC0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(true);
        byte[] input = new byte[]{0x00, 0x01, 0x02};
        byte[] expected = new byte[]{0x3D, 0x30, 0x30, 0x3D, 0x30, 0x31, 0x3D, 0x30, 0x32};
        byte[] actual = codec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_Wpse1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        byte[] input = new byte[]{0x00, 0x01, 0x02};
        byte[] expected = new byte[]{0x3D, 0x30, 0x30, 0x3D, 0x30, 0x31, 0x3D, 0x30, 0x32};
        byte[] actual = codec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_bdim3() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec("UTF-8");
        byte[] input = new byte[]{0x00, 0x01, 0x02};
        byte[] expected = new byte[]{0x3D, 0x30, 0x30, 0x3D, 0x30, 0x31, 0x3D, 0x30, 0x32};
        byte[] actual = codec.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NEcy0_1_fid1() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[10];
        byte[] expected = new byte[10];
        printable.set(0, 10);
        Arrays.fill(bytes, (byte) 65);
        Arrays.fill(expected, (byte) 65);
        printable.clear();
        printable.set(0, 5);
        printable.set(7, 10);
        bytes[0] = 65;
        bytes[1] = 32;
        bytes[2] = 33;
        bytes[3] = 34;
        bytes[4] = 35;
        bytes[5] = 36;
        bytes[6] = 37;
        bytes[7] = 38;
        bytes[8] = 39;
        bytes[9] = 40;
        expected[0] = 65;
        expected[1] = 32;
        expected[2] = 61;
        expected[3] = 34;
        expected[4] = 33;
        expected[5] = 36;
        expected[6] = 37;
        expected[7] = 38;
        expected[8] = 39;
        expected[9] = 61;
        printable.clear();
        printable.set(0, 10);
        bytes[0] = 0;
        bytes[1] = 1;
        bytes[2] = 2;
        bytes[3] = 3;
        bytes[4] = 4;
        bytes[5] = 5;
        bytes[6] = 6;
        bytes[7] = 7;
        bytes[8] = 8;
        bytes[9] = 9;
        expected[0] = 61;
        expected[1] = 30;
        expected[2] = 31;
        expected[3] = 32;
        expected[4] = 33;
        expected[5] = 34;
        expected[6] = 35;
        expected[7] = 36;
        expected[8] = 37;
        expected[9] = 38;
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArray_lLsV0_fid1() throws EncoderException {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -2};
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 61, 61};
        byte[] actual = (byte[]) codec.encode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testEncodeQuotedPrintable_BitSetPrintable_BytesStrict_ReturnsEncodedBytes_oeyN2_fid1() {
        final BitSet printable = new BitSet();
        final byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127};
        final boolean strict = true;
        final byte[] result = QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes, strict);
        assertEquals(128, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithSourceStrNull_jpKO4_iLCW0_fid1() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        String sourceStr = null;
        String decodedStr = null;
        try {
            decodedStr = codec.decode(sourceStr);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals("", decodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_ZHZy0_kULB0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec();
        byte[] input = new byte[]{(byte) 0x3D, (byte) 0x3D};
        byte[] expected = new byte[]{(byte) 0x3D};
        byte[] actual = null;
        try {
            actual = codec.decode(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharset_RFlL2_HZSL0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"));
        byte[] input = new byte[]{(byte) 0x3D, (byte) 0x3D};
        byte[] expected = new byte[]{(byte) 0x3D};
        byte[] actual = null;
        try {
            actual = codec.decode(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharsetStrict_lHja3_DuMK0() {
        QuotedPrintableCodec codec = new QuotedPrintableCodec(Charset.forName("UTF-8"), true);
        byte[] input = new byte[]{(byte) 0x3D, (byte) 0x3D};
        byte[] expected = new byte[]{(byte) 0x3D};
        byte[] actual = null;
        try {
            actual = codec.decode(input);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeQuotedPrintable_NEcy0() {
        BitSet printable = new BitSet();
        byte[] bytes = new byte[10];
        byte[] expected = new byte[10];
        printable.set(0, 10);
        Arrays.fill(bytes, (byte) 65);
        Arrays.fill(expected, (byte) 65);
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
        printable.clear();
        printable.set(0, 5);
        printable.set(7, 10);
        bytes[0] = 65;
        bytes[1] = 32;
        bytes[2] = 33;
        bytes[3] = 34;
        bytes[4] = 35;
        bytes[5] = 36;
        bytes[6] = 37;
        bytes[7] = 38;
        bytes[8] = 39;
        bytes[9] = 40;
        expected[0] = 65;
        expected[1] = 32;
        expected[2] = 61;
        expected[3] = 34;
        expected[4] = 33;
        expected[5] = 36;
        expected[6] = 37;
        expected[7] = 38;
        expected[8] = 39;
        expected[9] = 61;
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
        printable.clear();
        printable.set(0, 10);
        bytes[0] = 0;
        bytes[1] = 1;
        bytes[2] = 2;
        bytes[3] = 3;
        bytes[4] = 4;
        bytes[5] = 5;
        bytes[6] = 6;
        bytes[7] = 7;
        bytes[8] = 8;
        bytes[9] = 9;
        expected[0] = 61;
        expected[1] = 30;
        expected[2] = 31;
        expected[3] = 32;
        expected[4] = 33;
        expected[5] = 34;
        expected[6] = 35;
        expected[7] = 36;
        expected[8] = 37;
        expected[9] = 38;
        assertArrayEquals(expected, QuotedPrintableCodec.encodeQuotedPrintable(printable, bytes));
    }
}