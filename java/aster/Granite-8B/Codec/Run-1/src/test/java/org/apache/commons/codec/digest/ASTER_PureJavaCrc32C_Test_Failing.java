/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PureJavaCrc32C_Test_Failing {
    PureJavaCrc32C crc32c = new PureJavaCrc32C();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_FyBG0_Wcwj0() {
        PureJavaCrc32C crc32c = new PureJavaCrc32C();
        crc32c.update((byte) 0);
        crc32c.update((byte) 1);
        crc32c.update((byte) 2);
        crc32c.update((byte) 3);
        crc32c.update((byte) 4);
        crc32c.update((byte) 5);
        crc32c.update((byte) 6);
        crc32c.update((byte) 7);
        crc32c.update((byte) 8);
        crc32c.update((byte) 9);
        long expectedValue = 0x31c34ef4L;
        assertEquals(expectedValue, crc32c.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateByteArrayIntInt_igcP0_fid2() {
        PureJavaCrc32C crc32c = new PureJavaCrc32C();
        crc32c.update(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 0, 10);
        assertEquals(314159265, crc32c.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateByteArrayIntInt2_qabA1_fid2() {
        PureJavaCrc32C crc32c = new PureJavaCrc32C();
        crc32c.update(new byte[]{11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, 0, 10);
        assertEquals(271828182, crc32c.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdate8_ZEEi7_pWrO0() {
        PureJavaCrc32C crc32c = new PureJavaCrc32C();
        crc32c.update(8);
        assertEquals(crc32c.getValue(), 0);
    }
}