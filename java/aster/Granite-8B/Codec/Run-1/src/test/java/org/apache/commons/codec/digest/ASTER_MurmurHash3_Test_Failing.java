/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_MurmurHash3_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Ksag0() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0;
        int expected = 0; // Replace with expected value
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_Txrw0() {
        byte[] data = new byte[10];
        int hash = MurmurHash3.hash32x86(data, 0, data.length, 0);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithOffset_xEhO1() {
        byte[] data = new byte[10];
        int hash = MurmurHash3.hash32x86(data, 2, 6, 0);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithSeed_OHbI2() {
        byte[] data = new byte[10];
        int hash = MurmurHash3.hash32x86(data, 0, data.length, 1234);
        assertEquals(1234, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithAllParameters_xEzF3() {
        byte[] data = new byte[10];
        int hash = MurmurHash3.hash32x86(data, 2, 6, 1234);
        assertEquals(1234, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_tqYU0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        long hash = MurmurHash3.hash64(data);
        assertEquals(hash, 1415926535897932384L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_vXuK0() {
        byte[] data = new byte[10];
        int hash = MurmurHash3.hash32(data, 0, data.length, 0);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_taxJ0_2() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 0);
        assertEquals(0x1b8735930733703fL, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_taxJ0_3() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 0);
        assertEquals(0x81f16f3924124e98L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_UblG0() {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        int offset = 0;
        int length = 16;
        int seed = 0;
        long[] expected = new long[]{323800054931440128L, 323800054931440128L};
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_gJvu0() {
        byte[] data = new byte[16];
        int offset = 0;
        int length = 16;
        int seed = 0;
        long[] expected = new long[2];
        long[] actual = MurmurHash3.hash128(data, offset, length, seed);
        assert Arrays.equals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_FkgT0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5};
        int offset = 0;
        int length = 5;
        long expected = 1469598103934665603L;
        long actual = MurmurHash3.hash64(data, offset, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_LoaP0_2() {
        assertEquals(16777619, MurmurHash3.hash32(new byte[4], 0, 4, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_FMZG1_2() {
        assertEquals(16777619, MurmurHash3.hash32(new byte[4], 1, 3, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSeed_Rdky3_1() {
        assertEquals(0, MurmurHash3.hash32(new byte[4], 0, 4, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSeed_Rdky3_2() {
        assertEquals(1073741824, MurmurHash3.hash32(new byte[4], 0, 4, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithAllParameters_BflY4_2() {
        assertEquals(16777619, MurmurHash3.hash32(new byte[4], 1, 3, 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xGoc0_1() {
        byte[] data = new byte[4];
        int offset = 0;
        int length = 4;
        int seed = 0;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 0;
        data[1] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[1] = 0;
        data[2] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[2] = 0;
        data[3] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xGoc0_2() {
        byte[] data = new byte[4];
        int offset = 0;
        int length = 4;
        int seed = 0;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 0;
        data[1] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[1] = 0;
        data[2] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[2] = 0;
        data[3] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(-1879048199, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xGoc0_3() {
        byte[] data = new byte[4];
        int offset = 0;
        int length = 4;
        int seed = 0;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 0;
        data[1] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[1] = 0;
        data[2] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[2] = 0;
        data[3] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(1684234847, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xGoc0_4() {
        byte[] data = new byte[4];
        int offset = 0;
        int length = 4;
        int seed = 0;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 0;
        data[1] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[1] = 0;
        data[2] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[2] = 0;
        data[3] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(-204682031, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xGoc0_5() {
        byte[] data = new byte[4];
        int offset = 0;
        int length = 4;
        int seed = 0;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[0] = 0;
        data[1] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[1] = 0;
        data[2] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        data[2] = 0;
        data[3] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(1013904242, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_iFLX0() {
        int hash = MurmurHash3.hash32(1234567890L, 0);
        assertEquals(1057718441, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_oaRF0() {
        byte[] data = new byte[]{0x01, 0x02, 0x03, 0x04};
        int offset = 0;
        int length = 4;
        int seed = 0;
        int expectedHash = 0x61c88646;
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_1() {
        assertEquals(0, MurmurHash3.hash32(0, 0, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_2() {
        assertEquals(169293485, MurmurHash3.hash32(1, 0, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_3() {
        assertEquals(1431655765, MurmurHash3.hash32(0, 1, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_4() {
        assertEquals(-1640531527, MurmurHash3.hash32(1, 1, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_5() {
        assertEquals(195035419, MurmurHash3.hash32(0, 0, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_6() {
        assertEquals(1013904242, MurmurHash3.hash32(1, 0, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_7() {
        assertEquals(-109477460, MurmurHash3.hash32(0, 1, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_8() {
        assertEquals(-1879048199, MurmurHash3.hash32(1, 1, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Rali0() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0;
        int expected = 0;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Ksag0_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 539065883;
        int expected = 539065883; // Replace with expected value
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_Txrw0_fid1() {
        byte[] data = new byte[10];
        int hash = MurmurHash3.hash32x86(data, 539065883, data.length, 539065883);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithOffset_xEhO1_fid1() {
        byte[] data = new byte[10];
        int hash = MurmurHash3.hash32x86(data, 2, 6, -229235619);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithSeed_OHbI2_fid1() {
        byte[] data = new byte[10];
        int hash = MurmurHash3.hash32x86(data, 0, data.length, -1914425780);
        assertEquals(1234, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithAllParameters_xEzF3_fid1() {
        byte[] data = new byte[10];
        int hash = MurmurHash3.hash32x86(data, 2, 6, -73028199);
        assertEquals(1234, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_vXuK0_fid1() {
        byte[] data = new byte[10];
        int hash = MurmurHash3.hash32(data, 539065883, data.length, 539065883);
        assertEquals(0, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSeed_Rdky3_1_fid1() {
        assertEquals(0, MurmurHash3.hash32(new byte[4], 593689054, 4, 593689054));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0_1_fid1() {
        assertEquals(0, MurmurHash3.hash32(0, -2127245832, -2127245832));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Rali0_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 539065883;
        int expected = 539065883;
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_taxJ0() {
        byte[] data = new byte[16];
        long[] result = MurmurHash3.hash128x64(data, 0, 16, 0);
        assertEquals(2, result.length);
        assertEquals(0x1b8735930733703fL, result[0]);
        assertEquals(0x81f16f3924124e98L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_LoaP0() {
        assertEquals(0, MurmurHash3.hash32(new byte[0], 0, 0, 0));
        assertEquals(16777619, MurmurHash3.hash32(new byte[4], 0, 4, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_FMZG1() {
        assertEquals(0, MurmurHash3.hash32(new byte[4], 0, 0, 0));
        assertEquals(16777619, MurmurHash3.hash32(new byte[4], 1, 3, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_SYwS2() {
        assertEquals(0, MurmurHash3.hash32(new byte[4], 0, 0, 0));
        assertEquals(16777619, MurmurHash3.hash32(new byte[4], 0, 4, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithSeed_Rdky3() {
        assertEquals(0, MurmurHash3.hash32(new byte[4], 0, 4, 0));
        assertEquals(1073741824, MurmurHash3.hash32(new byte[4], 0, 4, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithAllParameters_BflY4() {
        assertEquals(0, MurmurHash3.hash32(new byte[0], 0, 0, 0));
        assertEquals(16777619, MurmurHash3.hash32(new byte[4], 1, 3, 10));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xGoc0() {
        byte[] data = new byte[4];
        int offset = 0;
        int length = 4;
        int seed = 0;
        int hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(0, hash);
        data[0] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(-1879048199, hash);
        data[0] = 0;
        data[1] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(1684234847, hash);
        data[1] = 0;
        data[2] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(-204682031, hash);
        data[2] = 0;
        data[3] = 1;
        hash = MurmurHash3.hash32(data, offset, length, seed);
        assertEquals(1013904242, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_Koxy0() {
        assertEquals(0, MurmurHash3.hash32(0, 0, 0));
        assertEquals(169293485, MurmurHash3.hash32(1, 0, 0));
        assertEquals(1431655765, MurmurHash3.hash32(0, 1, 0));
        assertEquals(-1640531527, MurmurHash3.hash32(1, 1, 0));
        assertEquals(195035419, MurmurHash3.hash32(0, 0, 1));
        assertEquals(1013904242, MurmurHash3.hash32(1, 0, 1));
        assertEquals(-109477460, MurmurHash3.hash32(0, 1, 1));
        assertEquals(-1879048199, MurmurHash3.hash32(1, 1, 1));
    }
}