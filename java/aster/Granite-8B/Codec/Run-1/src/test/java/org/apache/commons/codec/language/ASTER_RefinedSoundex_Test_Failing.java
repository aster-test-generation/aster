/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_RefinedSoundex_Test_Failing {
    private RefinedSoundex refinedSoundex;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_yWMJ0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "RefinedSoundex";
        String expected = "R162";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_eoMe0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        String input = "input";
        String expected = "expected";
        String actual = refinedSoundex.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithChar_rymZ1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        String input = "input";
        String expected = "expected";
        String actual = refinedSoundex.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_KqwO0() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("defaultMapping");
        String str = "string";
        String expected = "string";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCustomMapping_whIp1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex(new char[]{'a', 'b', 'c'});
        String str = "string";
        String expected = "string";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyMapping_GTGC2() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("");
        String str = "string";
        String expected = "string";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidMapping_iwMR4() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("invalidMapping");
        String str = "string";
        String expected = "string";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeWithNonLetterCharacter_OyUd1() {
        char c = '0';
        char mappingCode = refinedSoundex.getMappingCode(c);
        assertEquals(0, mappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeWithValidLetterCharacter_yPCa2() {
        char c = 'A';
        char mappingCode = refinedSoundex.getMappingCode(c);
        assertEquals('A', mappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeWithInvalidIndex_MDiP3() {
        char c = 'Z';
        char mappingCode = refinedSoundex.getMappingCode(c);
        assertEquals(0, mappingCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_KqwO0_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("defaultMapping");
        String str = "Sagt";
        String expected = "Sagt";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidMapping_iwMR4_fid1() {
        RefinedSoundex refinedSoundex = new RefinedSoundex("invalidMapping");
        String str = "Sagd";
        String expected = "Sagd";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }
}