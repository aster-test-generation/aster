/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_rUNb0_1() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < arrayOctet.length; i++) {
            arrayOctet[i] = (byte) (Math.random() * 256);
            if (!Base64.isBase64(arrayOctet[i]) && !Character.isWhitespace(arrayOctet[i])) {
            }
        }
        Assertions.assertFalse(Base64.isBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_rUNb0_2() {
        byte[] arrayOctet = new byte[10];
        for (int i = 0; i < arrayOctet.length; i++) {
            arrayOctet[i] = (byte) (Math.random() * 256);
            if (!Base64.isBase64(arrayOctet[i]) && !Character.isWhitespace(arrayOctet[i])) {
            }
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_whenInputArrayTooBig_throwsIllegalArgumentException_qBAL0() {
        byte[] binaryData = new byte[1024 * 1024 * 10]; // 10 MB
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 1024 * 1024 * 5; // 5 MB
        try {
            Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        } catch (IllegalArgumentException e) {
            return;
        }
        fail("Expected IllegalArgumentException to be thrown");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingWithLenientDecodingPolicy_SnHn1() {
        Base64 base64 = new Base64(0, null, false, CodecPolicy.LENIENT);
        boolean result = base64.isStrictDecoding();
        assertFalse(result);
    }
}