/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_ColognePhonetic_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithCapitalA_IFnE0() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("A"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithCapitalU_dZDN1() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("U"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithCapitalO_zejl2() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("O"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithSmallA_jBOs3() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithSmallU_eQxj4() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("u"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testColognePhoneticWithSmallO_fNWT5() {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        assertEquals("0", colognePhonetic.colognePhonetic("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_kWAl0() throws org.apache.commons.codec.EncoderException {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        Object object = new Object();
        try {
            colognePhonetic.encode(object);
            fail("Expected EncoderException to be thrown");
        } catch (EncoderException e) {
            assertEquals("This method's parameter was expected to be of the type java.lang.String. But actually it was of the type java.lang.Object.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_NrFr2() throws org.apache.commons.codec.EncoderException {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String input = "";
        String expectedOutput = "";
        String actualOutput = colognePhonetic.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonEmptyString_RVIZ3_fid2() throws org.apache.commons.codec.EncoderException {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String input = "Hello";
        String expectedOutput = "05";
        String actualOutput = colognePhonetic.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonAlphaNumericString_UTTm4_fid2() throws org.apache.commons.codec.EncoderException {
        ColognePhonetic colognePhonetic = new ColognePhonetic();
        String input = "Hello!@#$%^&*()";
        String expectedOutput = "05";
        String actualOutput = colognePhonetic.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }
}