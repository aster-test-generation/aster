/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_SoundexUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedWithNull_oegP0() {
        String es1 = null;
        String es2 = null;
        int expected = 0;
        int actual = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedWithEmptyStrings_cjXS1() {
        String es1 = "";
        String es2 = "";
        int expected = 0;
        int actual = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedWithSameStrings_KiTo2() {
        String es1 = "abc";
        String es2 = "abc";
        int expected = 3;
        int actual = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanWithNullString_uqcp0() {
        String input = null;
        String expected = null;
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanWithEmptyString_MvgN1() {
        String input = "";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanWithNonAlphaString_xVUV2() {
        String input = "12345";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanWithOnlyAlphaString_dwvc3() {
        String input = "abcdef";
        String expected = "ABCDEF";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanWithNonAlphaStringWithSpaces_fXRv4() {
        String input = "123 456";
        String expected = "";
        String actual = SoundexUtils.clean(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNull_jtUy0() {
        CharSequence cs = null;
        boolean isEmpty = SoundexUtils.isEmpty(cs);
        assert isEmpty;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithEmptySequence_YIet1() {
        CharSequence cs = "";
        boolean isEmpty = SoundexUtils.isEmpty(cs);
        assert isEmpty;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNonEmptySequence_pqmI2() {
        CharSequence cs = "Hello";
        boolean isEmpty = SoundexUtils.isEmpty(cs);
        assert !isEmpty;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedWithDifferentStrings_WSoS3_fid1() {
        String es1 = "abcd";
        String es2 = "abce";
        int expected = 3;
        int actual = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifferenceEncodedWithLongerStrings_gyyw4_fid1() {
        String es1 = "abcdefghijklmnopqrstuvwxyz";
        String es2 = "abcdefghijklmnopqrstuvwx";
        int expected = 24;
        int actual = SoundexUtils.differenceEncoded(es1, es2);
        assertEquals(expected, actual);
    }
}