/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Blake3_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithNullKey_IXpj0_1() {
        final byte[] key = null;
        final IllegalArgumentException exception =
        assertThrows(IllegalArgumentException.class, () -> Blake3.initKeyedHash(key));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_initKeyedHash_withNullKey_shouldThrowException_IFhs0() {
        byte[] key = null;
        assertThrows(IllegalArgumentException.class, () -> Blake3.initKeyedHash(key));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithNullKey_IXpj0() {
        final byte[] key = null;
        final IllegalArgumentException exception =
        assertThrows(IllegalArgumentException.class, () -> Blake3.initKeyedHash(key));
        assertEquals("Blake3 keys must be 32 bytes", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testHash_raUi0() {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expectedHash = new byte[]{10, 11, 12, 13, 14, 15, 16, 17, 18, 19};
        byte[] actualHash = Blake3.hash(data);
        assertEquals(expectedHash, actualHash);
    }
}