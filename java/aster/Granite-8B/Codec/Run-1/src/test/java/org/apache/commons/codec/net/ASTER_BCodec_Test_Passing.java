/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.binary.Base64;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_BCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNullBytes_waAd0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        byte[] result = bCodec.doDecoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNonNullBytes_EKfn1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        byte[] input = "SGVsbG8gV29ybGQh".getBytes(Charset.forName("UTF-8"));
        byte[] expected = "Hello World!".getBytes(Charset.forName("UTF-8"));
        byte[] result = bCodec.doDecoding(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_aaVP0() {
        BCodec bCodec = new BCodec();
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingWithStrictPolicy_sivQ0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertTrue(bCodec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingWithLenientPolicy_FXgs1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        assertFalse(bCodec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidType_eAEd4() {
        BCodec bCodec = new BCodec();
        Object value = new Object();
        try {
            bCodec.decode(value);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Objects of type " + value.getClass().getName() + " cannot be decoded using BCodec"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingBytes_mJJd0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] expected = Base64.encodeBase64(bytes);
        byte[] actual = bCodec.doEncoding(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingBytesWithNull_hhwz1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        byte[] bytes = null;
        byte[] expected = null;
        byte[] actual = bCodec.doEncoding(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedType_elGI2() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        try {
            bCodec.encode(new Object());
            fail("EncoderException expected");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("Objects of type java.lang.Object cannot be encoded using BCodec"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ASdu0() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLenientPolicy_zxEV1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String strSource = "Hello, World!";
        String encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_HdRK2() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String strSource = "Hello, World!";
        String encodedText = bCodec.encode(strSource, "UTF-8");
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset_DQvY0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertEquals(Charset.forName("UTF-8"), bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset2_oQSn1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        assertEquals(Charset.forName("UTF-8"), bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset3_Ytvl2() {
        BCodec bCodec = new BCodec("UTF-8");
        assertEquals(Charset.forName("UTF-8"), bCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharset4_bVro3() {
        BCodec bCodec = new BCodec();
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullText_zYRw0() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        String encodedText = bCodec.encodeText(null, "UTF-8");
        assertEquals(null, encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNonNullText_uwCB1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        String text = "Hello, World!";
        String encodedText = bCodec.encodeText(text, "UTF-8");
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_bfCn0_1() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        BCodec bCodec2 = new BCodec(Charset.forName("ISO-8859-1"), CodecPolicy.LENIENT);
        BCodec bCodec3 = new BCodec("UTF-16");
        BCodec bCodec4 = new BCodec();
        assertEquals("UTF-8", bCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_bfCn0_2() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        BCodec bCodec2 = new BCodec(Charset.forName("ISO-8859-1"), CodecPolicy.LENIENT);
        BCodec bCodec3 = new BCodec("UTF-16");
        BCodec bCodec4 = new BCodec();
        assertEquals("ISO-8859-1", bCodec2.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_bfCn0_3() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        BCodec bCodec2 = new BCodec(Charset.forName("ISO-8859-1"), CodecPolicy.LENIENT);
        BCodec bCodec3 = new BCodec("UTF-16");
        BCodec bCodec4 = new BCodec();
        assertEquals("UTF-16", bCodec3.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_bfCn0_4() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        BCodec bCodec2 = new BCodec(Charset.forName("ISO-8859-1"), CodecPolicy.LENIENT);
        BCodec bCodec3 = new BCodec("UTF-16");
        BCodec bCodec4 = new BCodec();
        assertEquals(Charset.defaultCharset().name(), bCodec4.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithNullText_dQTE0() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String result = bCodec.decodeText(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidPrefix_bFsX1() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "InvalidPrefixThisIsATest";
        try {
            bCodec.decodeText(text);
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidPostfix_lhFJ2() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "ThisIsATestInvalidPostfix";
        try {
            bCodec.decodeText(text);
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidCharsetToken_kdBN3() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "ThisIsATest";
        try {
            bCodec.decodeText(text);
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithStrictPolicy_tkRO0() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String text = "Hello, World!";
        String expected = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=";
        String actual = bCodec.encodeText(text, Charset.forName("UTF-8"));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithLenientPolicy_mVMI1() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String text = "Hello, World!";
        String expected = "=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=";
        String actual = bCodec.encodeText(text, Charset.forName("UTF-8"));
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyValue_SWbu4_RkaP0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String value = "";
        String expected = "";
        String actual = "";
        try {
            actual = bCodec.decode(value);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_IEcX3_ulPx0() {
        BCodec bCodec = new BCodec();
        Object value = null;
        Object decodedValue = null;
        try {
            decodedValue = bCodec.decode(value);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals(decodedValue, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_fAai0_uTfi0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        Object result = null;
        try {
            result = bCodec.encode(null);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_GCXR0_HJUe0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String encodedString = null;
        try {
            encodedString = bCodec.encode(strSource);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals("=?UTF-8?B?SGVsbG8sIFdvcmxkIQ==?=", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_bfCn0() {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertEquals("UTF-8", bCodec.getDefaultCharset());
        BCodec bCodec2 = new BCodec(Charset.forName("ISO-8859-1"), CodecPolicy.LENIENT);
        assertEquals("ISO-8859-1", bCodec2.getDefaultCharset());
        BCodec bCodec3 = new BCodec("UTF-16");
        assertEquals("UTF-16", bCodec3.getDefaultCharset());
        BCodec bCodec4 = new BCodec();
        assertEquals(Charset.defaultCharset().name(), bCodec4.getDefaultCharset());
    }
}