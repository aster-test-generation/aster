/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base16_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetStrictPolicy_VYPy0_1() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        assertTrue(base16.isInAlphabet((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetStrictPolicy_VYPy0_2() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        assertTrue(base16.isInAlphabet((byte) 9));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetStrictPolicy_VYPy0_3() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        assertTrue(base16.isInAlphabet((byte) 15));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLenientPolicy_RHRo1_1() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        assertTrue(base16.isInAlphabet((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLenientPolicy_RHRo1_2() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        assertTrue(base16.isInAlphabet((byte) 9));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLenientPolicy_RHRo1_3() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        assertTrue(base16.isInAlphabet((byte) 15));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLenientPolicy_RHRo1_4() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        assertTrue(base16.isInAlphabet((byte) 16));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLenientPolicy_RHRo1_5() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        assertTrue(base16.isInAlphabet((byte) -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLowerCase_PVgr2_1() {
        Base16 base16 = new Base16(true);
        assertTrue(base16.isInAlphabet((byte) 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLowerCase_PVgr2_2() {
        Base16 base16 = new Base16(true);
        assertTrue(base16.isInAlphabet((byte) 9));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLowerCase_PVgr2_3() {
        Base16 base16 = new Base16(true);
        assertTrue(base16.isInAlphabet((byte) 15));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_fSqc0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        byte[] expected = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        byte[] actual = base16.decode("000000000000000000000000000000000000000000000000000000000000000");
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLowerCase_OdwP2() {
        Base16 base16 = new Base16(true);
        boolean result = base16.isInAlphabet("0123456789ABCDEF");
        boolean expected = true;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_XGrU0() {
        Base16 base16 = new Base16();
        byte[] inputArray = {0, 1, 2, 3};
        String expectedOutput = "000000000000000000000000000000";
        String actualOutput = base16.encodeToString(inputArray);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithLowerCase_XzGw1() {
        Base16 base16 = new Base16(true);
        byte[] inputArray = {0, 1, 2, 3};
        String expectedOutput = "000000000000000000000000000000";
        String actualOutput = base16.encodeToString(inputArray);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithDecodingPolicy_PgER2() {
        Base16 base16 = new Base16(false, CodecPolicy.LENIENT);
        byte[] inputArray = {0, 1, 2, 3};
        String expectedOutput = "000000000000000000000000000000";
        String actualOutput = base16.encodeToString(inputArray);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_crre0() throws DecoderException {
        Base16 base16 = new Base16();
        byte[] input = "abcd".getBytes();
        byte[] expectedOutput = new byte[]{0x61, 0x62, 0x63, 0x64};
        byte[] actualOutput = base16.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonNullArray_pnxb1() {
        Base16 base16 = new Base16();
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base16.encode(input, 0, 3);
        assertArrayEquals(new byte[]{49, 50, 51}, output);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy_wmzT0_1() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        base16 = new Base16(true, CodecPolicy.LENIENT);
        base16 = new Base16(false, CodecPolicy.STRICT);
        base16 = new Base16(false, CodecPolicy.LENIENT);
        assertEquals(CodecPolicy.STRICT, base16.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeFullArray_ozPs1_1() {
        Base16 base16 = new Base16();
        byte[] input = new byte[10];
        byte[] result = base16.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeFullArray_ozPs1_2() {
        Base16 base16 = new Base16();
        byte[] input = new byte[10];
        byte[] result = base16.decode(input);
        assertEquals(10, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPadWithArrayContainingLowercaseAlphabet_MPqq2() {
        Base16 base16 = new Base16();
        byte[] arrayOctet = {'a'};
        boolean result = base16.containsAlphabetOrPad(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetStrictPolicy_VYPy0() {
        Base16 base16 = new Base16(true, CodecPolicy.STRICT);
        assertTrue(base16.isInAlphabet((byte) 0));
        assertTrue(base16.isInAlphabet((byte) 9));
        assertTrue(base16.isInAlphabet((byte) 15));
        assertFalse(base16.isInAlphabet((byte) 16));
        assertFalse(base16.isInAlphabet((byte) -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLenientPolicy_RHRo1() {
        Base16 base16 = new Base16(true, CodecPolicy.LENIENT);
        assertTrue(base16.isInAlphabet((byte) 0));
        assertTrue(base16.isInAlphabet((byte) 9));
        assertTrue(base16.isInAlphabet((byte) 15));
        assertTrue(base16.isInAlphabet((byte) 16));
        assertTrue(base16.isInAlphabet((byte) -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetLowerCase_PVgr2() {
        Base16 base16 = new Base16(true);
        assertTrue(base16.isInAlphabet((byte) 0));
        assertTrue(base16.isInAlphabet((byte) 9));
        assertTrue(base16.isInAlphabet((byte) 15));
        assertFalse(base16.isInAlphabet((byte) 16));
        assertFalse(base16.isInAlphabet((byte) -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeFullArray_ozPs1() {
        Base16 base16 = new Base16();
        byte[] input = new byte[10];
        byte[] result = base16.decode(input);
        assertNotNull(result);
        assertEquals(10, result.length);
    }
}