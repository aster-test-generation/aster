/**
 * Generated by Aster
 */
package org.apache.commons.codec.language.bm;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.language.bm.Languages.LanguageSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Rule_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getInstanceMap_Test1_GfOE0() {
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        Languages.LanguageSet langs = Languages.LanguageSet.from(Collections.singleton("en"));
        Map<String, List<Rule>> expected = Rule.getInstanceMap(nameType, rt, "en");
        Map<String, List<Rule>> actual = Rule.getInstanceMap(nameType, rt, langs);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getInstanceMap_Test2_JtuR1() {
        NameType nameType = NameType.SEPHARDIC;
        RuleType rt = RuleType.EXACT;
        Languages.LanguageSet langs = Languages.LanguageSet.from(Collections.singleton("he"));
        Map<String, List<Rule>> expected = Rule.getInstanceMap(nameType, rt, "he");
        Map<String, List<Rule>> actual = Rule.getInstanceMap(nameType, rt, langs);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getInstanceTest1_nWRy0() {
        List<Rule> expected = new ArrayList<>();
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.APPROX;
        Languages.LanguageSet langs = Languages.LanguageSet.from(new HashSet<>(Arrays.asList("en", "fr")));
        List<Rule> actual = Rule.getInstance(nameType, rt, langs);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getInstanceTest2_DtzK1() {
        List<Rule> expected = new ArrayList<>();
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.EXACT;
        Languages.LanguageSet langs = Languages.LanguageSet.from(new HashSet<>(Arrays.asList("en", "fr")));
        List<Rule> actual = Rule.getInstance(nameType, rt, langs);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getInstanceTest3_dcTJ2() {
        List<Rule> expected = new ArrayList<>();
        NameType nameType = NameType.ASHKENAZI;
        RuleType rt = RuleType.RULES;
        Languages.LanguageSet langs = Languages.LanguageSet.from(new HashSet<>(Arrays.asList("en", "fr")));
        List<Rule> actual = Rule.getInstance(nameType, rt, langs);
        assertEquals(expected, actual);
    }
}