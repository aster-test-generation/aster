/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_QCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetEncoding_BPNu0() {
        QCodec qCodec = new QCodec();
        String encoding = qCodec.getEncoding();
        assertEquals("Q", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedObject_BZMM2() {
        QCodec qCodec = new QCodec();
        Object input = new Object();
        try {
            qCodec.decode(input);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Objects of type " + input.getClass().getName() + " cannot be decoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullBytes_ZeWO0() {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doEncoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEmptyBytes_CNSh1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[0];
        byte[] result = qCodec.doEncoding(bytes);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedType_wfSR2() {
        QCodec qCodec = new QCodec();
        Integer input = 123;
        try {
            qCodec.encode(input);
            Assertions.fail("EncoderException expected");
        } catch (EncoderException e) {
            Assertions.assertEquals("Objects of type java.lang.Integer cannot be encoded using Q codec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks3_TXgw2() {
        QCodec qCodec = new QCodec();
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCharset_KCHA0() {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals(Charset.forName("UTF-8"), qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCharset2_ALAR1() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        assertEquals(Charset.forName("UTF-8"), qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCharset3_kwkp2() {
        QCodec qCodec = new QCodec();
        assertNotNull(qCodec.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullText_pHzr0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String actual = qCodec.encodeText(null, "UTF-8");
        String expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest_hklr0() {
        QCodec qCodec = new QCodec("UTF-8");
        assertEquals("UTF-8", qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest2_iFkj1() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        assertEquals("UTF-8", qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultCharsetTest3_TeyJ2() {
        QCodec qCodec = new QCodec();
        assertEquals("UTF-8", qCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeText_vFXk0() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "=?UTF-8?Q?Hello_World!?=";
        String decodedText = codec.decodeText(text);
        assertEquals("Hello World!", decodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidText_Nwnc1() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "Invalid_Text";
        try {
            codec.decodeText(text);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNullText_oEyD0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = null;
        String expected = null;
        String actual = qCodec.encodeText(text, Charset.defaultCharset());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_jYRH1_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        try {
            qCodec.decode("encodedString");
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertFalse(e.getMessage().contains("Unsupported encoding"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonEmptyBytes_ukRz2_fid1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        assertEquals(9, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_wLQa0_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks2_Gowp1_fid1() {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeTextWithNonNullText_cEfw1_fid1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String text = "Hello, World!";
        String actual = qCodec.encodeText(text, "UTF-8");
        String expected = "=?UTF-8?Q?Hello, World!?=";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidEncoding_CjCw3_fid1() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "=?UTF-8?B?Invalid_Encoding?=";
        try {
            codec.decodeText(text);
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("This codec cannot decode B encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithMissingSeparator_Letk6_fid1() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "=?UTF-8?Q?Hello_World!?=";
        try {
            codec.decodeText(text.replace("?", "?2"));
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeTextWithInvalidSeparator_FPcL7_fid1() throws DecoderException, UnsupportedEncodingException {
        QCodec codec = new QCodec("UTF-8");
        String text = "=?UTF-8?Q?Hello_World!?=";
        try {
            codec.decodeText(text.replace("?", "2"));
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("RFC 1522 violation: malformed encoded content", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_iyjK0_aeOJ0_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        String decodedString = null;
        try {
            decodedString = qCodec.decode("encodedString");
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertNull(decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_Ypok0_PUfY0_fid1() {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String sourceCharset = "UTF-8";
        String expected = "=?UTF-8?Q?Hello, World!?=";
        String actual;
        try {
            actual = qCodec.encodeText(sourceStr, Charset.forName(sourceCharset));
        } catch (EncoderException e) {
            throw new RuntimeException(e);
        }
        assertEquals(expected, actual);
    }
}