/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Soundex_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_bzWI0() {
        Soundex soundex = new Soundex();
        String str = "Hello";
        String expected = "H412";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex2_ruLi1() {
        Soundex soundex = new Soundex();
        String str = "World";
        String expected = "W000";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex3_JlPh2() {
        Soundex soundex = new Soundex();
        String str = "John";
        String expected = "J000";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex4_jZld3() {
        Soundex soundex = new Soundex();
        String str = "Smith";
        String expected = "S520";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex5_Xrrn4() {
        Soundex soundex = new Soundex();
        String str = "Miller";
        String expected = "M510";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex6_rNHi5() {
        Soundex soundex = new Soundex();
        String str = "Baker";
        String expected = "B100";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex7_cWBY6() {
        Soundex soundex = new Soundex();
        String str = "Davis";
        String expected = "D200";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex8_EGNC7() {
        Soundex soundex = new Soundex();
        String str = "Garcia";
        String expected = "G200";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex9_OOyb8() {
        Soundex soundex = new Soundex();
        String str = "Wilson";
        String expected = "W250";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex10_rrKG9() {
        Soundex soundex = new Soundex();
        String str = "Taylor";
        String expected = "T520";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex11_LPwY10() {
        Soundex soundex = new Soundex();
        String str = "Lee";
        String expected = "L200";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_UEbK0_1() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(0, soundex1.difference("s1", "s2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_UEbK0_2() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(0, soundex2.difference("s1", "s2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_UEbK0_3() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(0, soundex3.difference("s1", "s2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_UEbK0_4() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(0, soundex4.difference("s1", "s2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_TrYb0() {
        Soundex soundex = new Soundex();
        String input = "Hello";
        String expected = "H412";
        String actual = soundex.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_kEjT0() {
        Soundex soundex = new Soundex();
        String str = "Hello";
        String expected = "H412";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithMapping_gdCL1() {
        Soundex soundex = new Soundex("mapping");
        String str = "Hello";
        String expected = "H412";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCaseHW_RotS2() {
        Soundex soundex = new Soundex("mapping", true);
        String str = "Hello";
        String expected = "H412";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharMapping_rtvb3() {
        Soundex soundex = new Soundex(new char[]{'a', 'b', 'c'});
        String str = "Hello";
        String expected = "H412";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength2_IAPo7() {
        Soundex soundex = new Soundex();
        String str = "ab";
        String expected = "A12";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength3_huGx8() {
        Soundex soundex = new Soundex();
        String str = "abc";
        String expected = "A12";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength4_Tjrk9() {
        Soundex soundex = new Soundex();
        String str = "abcd";
        String expected = "A12";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength5_rUXu10() {
        Soundex soundex = new Soundex();
        String str = "abcde";
        String expected = "A12";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength6_bZMH11() {
        Soundex soundex = new Soundex();
        String str = "abcdef";
        String expected = "A12";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength7_RntN12() {
        Soundex soundex = new Soundex();
        String str = "abcdefg";
        String expected = "A12";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength8_SzCh13() {
        Soundex soundex = new Soundex();
        String str = "abcdefgh";
        String expected = "A12";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength9_AqQl14() {
        Soundex soundex = new Soundex();
        String str = "abcdefghi";
        String expected = "A12";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithObject_UTKH1_zxQt0() {
        Soundex soundex = new Soundex();
        Object input = "World";
        Object expected = "W530";
        Object actual = null;
        try {
            actual = soundex.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_UEbK0() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(0, soundex1.difference("s1", "s2"));
        assertEquals(0, soundex2.difference("s1", "s2"));
        assertEquals(0, soundex3.difference("s1", "s2"));
        assertEquals(0, soundex4.difference("s1", "s2"));
    }
}