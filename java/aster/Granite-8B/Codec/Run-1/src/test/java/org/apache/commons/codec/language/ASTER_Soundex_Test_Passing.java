/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Soundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength_aTlf0() {
        Soundex soundex = new Soundex();
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMapping_TAZH1() {
        Soundex soundex = new Soundex("mapping");
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithSpecialCaseHW_Kslq2() {
        Soundex soundex = new Soundex("mapping", true);
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMappingArray_BbZk3() {
        Soundex soundex = new Soundex(new char[]{'a', 'b', 'c'});
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullStr_pAJR4() {
        Soundex soundex = new Soundex();
        String str = null;
        String expected = null;
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyStr_KbSJ5() {
        Soundex soundex = new Soundex();
        String str = "";
        String expected = "";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength1_JFuq6() {
        Soundex soundex = new Soundex();
        String str = "a";
        String expected = "A000";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength10_rBea15() {
        Soundex soundex = new Soundex();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_bzWI0_fid1() {
        Soundex soundex = new Soundex();
        String str = "Hello";
        String expected = "H400";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex2_ruLi1_fid1() {
        Soundex soundex = new Soundex();
        String str = "World";
        String expected = "W643";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex3_JlPh2_fid1() {
        Soundex soundex = new Soundex();
        String str = "John";
        String expected = "J500";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex4_jZld3_fid1() {
        Soundex soundex = new Soundex();
        String str = "Smith";
        String expected = "S530";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex5_Xrrn4_fid1() {
        Soundex soundex = new Soundex();
        String str = "Miller";
        String expected = "M460";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex6_rNHi5_fid1() {
        Soundex soundex = new Soundex();
        String str = "Baker";
        String expected = "B260";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex7_cWBY6_fid1() {
        Soundex soundex = new Soundex();
        String str = "Davis";
        String expected = "D120";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex8_EGNC7_fid1() {
        Soundex soundex = new Soundex();
        String str = "Garcia";
        String expected = "G620";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex9_OOyb8_fid1() {
        Soundex soundex = new Soundex();
        String str = "Wilson";
        String expected = "W425";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex10_rrKG9_fid1() {
        Soundex soundex = new Soundex();
        String str = "Taylor";
        String expected = "T460";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex11_LPwY10_fid1() {
        Soundex soundex = new Soundex();
        String str = "Lee";
        String expected = "L000";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_UEbK4_2() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        assertEquals(4, soundex2.difference("s1", "s2"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_TrYb0_fid1() {
        Soundex soundex = new Soundex();
        String input = "Hello";
        String expected = "H400";
        String actual = soundex.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_kEjT0_fid1() {
        Soundex soundex = new Soundex();
        String str = "Hello";
        String expected = "H400";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength2_IAPo7_fid1() {
        Soundex soundex = new Soundex();
        String str = "ab";
        String expected = "A100";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength3_huGx8_fid1() {
        Soundex soundex = new Soundex();
        String str = "abc";
        String expected = "A120";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength4_Tjrk9_fid1() {
        Soundex soundex = new Soundex();
        String str = "abcd";
        String expected = "A123";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength5_rUXu10_fid1() {
        Soundex soundex = new Soundex();
        String str = "abcde";
        String expected = "A123";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength6_bZMH11_fid1() {
        Soundex soundex = new Soundex();
        String str = "abcdef";
        String expected = "A123";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength7_RntN12_fid1() {
        Soundex soundex = new Soundex();
        String str = "abcdefg";
        String expected = "A123";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength8_SzCh13_fid1() {
        Soundex soundex = new Soundex();
        String str = "abcdefgh";
        String expected = "A123";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrLength9_AqQl14_fid1() {
        Soundex soundex = new Soundex();
        String str = "abcdefghi";
        String expected = "A123";
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithObject_UTKH1_zxQt0_fid1() {
        Soundex soundex = new Soundex();
        Object input = "World";
        Object expected = "W643";
        Object actual = null;
        try {
            actual = soundex.encode(input);
        } catch (EncoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }
}