/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base64_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes1_ljsN0() {
        BigInteger bigInt = new BigInteger("12345678901234567890");
        byte[] expected = new byte[]{52, 48, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes2_jdQJ1() {
        BigInteger bigInt = new BigInteger("-12345678901234567890");
        byte[] expected = new byte[]{-53, -50, -53, -52, -51, -50, -49, -48, -47, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes3_SNsk2() {
        BigInteger bigInt = new BigInteger("0");
        byte[] expected = new byte[]{48};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_EDOg0() {
        byte[] binaryData = new byte[]{0, 1, 2, 3};
        byte[] expectedResult = new byte[]{0, 1, 2, 3};
        byte[] actualResult = Base64.encodeBase64Chunked(binaryData);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_MeVK0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] expectedOutput = "AQID".getBytes();
        byte[] actualOutput = Base64.encodeBase64(binaryData);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_wOrM3() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] expectedOutput = "AQID".getBytes();
        byte[] actualOutput = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_DjCf0() {
        BigInteger bigInteger = new BigInteger("12345678901234567890");
        byte[] expected = "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkw".getBytes();
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_iIKz0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 10;
        byte[] expected = "AQID".getBytes();
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_WriW0() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{65, 66, 67}; // ASCII values of 'A', 'B', 'C'
        byte[] actual = Base64.encodeBase64(binaryData, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_wQRc1() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 10, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 10};
        byte[] actual = Base64.encodeBase64(binaryData, true);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64UrlSafe_yQKQ2() {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] expected = new byte[]{65, 66, 67}; // ASCII values of 'A', 'B', 'C'
        byte[] actual = Base64.encodeBase64(binaryData, false, true);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64UrlSafeChunked_onAW3() {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 10, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 10};
        byte[] actual = Base64.encodeBase64(binaryData, true, true);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDecodeBase64_McKu0() {
        byte[] base64Data = "SGVsbG8gV29ybGQh".getBytes();
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64Data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_OctetOutsideRange_ThrowsIllegalArgumentException_vHZW3() {
        Base64 base64 = new Base64();
        Exception exception = null;
        try {
            base64.isInAlphabet((byte) 256);
        } catch (IllegalArgumentException e) {
            exception = e;
        }
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithNull_prbM1() {
        byte[] arrayOctet = null;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_zcQz0() {
        byte[] binaryData = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        byte[] expected = "AQIDBAUGBwgJCgsMDQ4PEA==".getBytes();
        byte[] actual = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeWithLineLength_rPDT1() {
        byte[] binaryData = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        byte[] expected = "AQIDBAUGBwgJCgs=\nMDQ4PEA=".getBytes();
        Base64 base64 = new Base64(7);
        byte[] actual = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeWithLineLengthAndLineSeparator_MzDP2() {
        byte[] binaryData = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        byte[] expected = "AQIDBAUGBwgJCgs=\r\nMDQ4PEA=".getBytes();
        Base64 base64 = new Base64(7, "\r\n".getBytes());
        byte[] actual = Base64.encodeBase64URLSafe(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_pfES0() {
        Base64 base64 = new Base64();
        String input = "SGVsbG8gV29ybGQh";
        byte[] expectedOutput = "Hello World!".getBytes();
        byte[] actualOutput = base64.decode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStrictPolicy_mMXb0() throws EncoderException {
        Base64 base64 = new Base64(76, new byte[]{'\r', '\n'}, false, CodecPolicy.STRICT);
        byte[] input = "Hello, World!".getBytes();
        byte[] expectedOutput = "SGVsbG8sIFdvcmxkIQ==".getBytes();
        byte[] actualOutput = base64.encode(input);
        assertEquals(new String(expectedOutput), new String(actualOutput));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLenientPolicy_BThD1() throws EncoderException {
        Base64 base64 = new Base64(76, new byte[]{'\r', '\n'}, false, CodecPolicy.LENIENT);
        byte[] input = "Hello, World!".getBytes();
        byte[] expectedOutput = "SGVsbG8sIFdvcmxkIQ==".getBytes();
        byte[] actualOutput = base64.encode(input);
        assertEquals(new String(expectedOutput), new String(actualOutput));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_withNullArray_Sknn0() {
        Base64 base64 = new Base64();
        long encodedLength = base64.getEncodedLength(null);
        assertEquals(0, encodedLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithLineLength_RgCK1() {
        Base64 base64 = new Base64(76);
        byte[] input = new byte[]{1, 2, 3};
        String expected = "AQID";
        String actual = base64.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithLineSeparator_AQxL2() {
        Base64 base64 = new Base64(76, new byte[]{'\n'});
        byte[] input = new byte[]{1, 2, 3};
        String expected = "AQID";
        String actual = base64.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithUrlSafe_Jwoq3() {
        Base64 base64 = new Base64(true);
        byte[] input = new byte[]{1, 2, 3};
        String expected = "AQID";
        String actual = base64.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToStringWithDecodingPolicy_keoP4() {
        Base64 base64 = new Base64(76, new byte[]{'\n'}, true, CodecPolicy.LENIENT);
        byte[] input = new byte[]{1, 2, 3};
        String expected = "AQID";
        String actual = base64.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_Ldyx1() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{65, 66, 67, 68};
        byte[] expectedOutput = new byte[]{65, 66, 67, 68};
        byte[] actualOutput = base64.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_yWlW2() {
        Base64 base64 = new Base64();
        byte[] input = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47};
        byte[] expectedOutput = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
        byte[] actualOutput = base64.decode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDecodeInteger_qXEj0_fid2() {
        byte[] input = {0x31, 0x32, 0x33}; // "123" in ASCII
        BigInteger expected = new BigInteger("123");
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes4_hyyz3_fid2() {
        BigInteger bigInt = new BigInteger("1");
        byte[] expected = new byte[]{49};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_uzkx2_fid2() {
        Base64 base64 = new Base64(true);
        assertEquals(null, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_zCbf3_fid2() {
        Base64 base64 = new Base64(1);
        assertEquals(null, base64.getLineSeparator());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_tGYN0_fid2() {
        byte[] arrayOctet = new byte[10];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithOneElementArray_Nudi3_fid2() {
        byte[] arrayOctet = new byte[1];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithTwoElementArray_UkPp4_fid2() {
        byte[] arrayOctet = new byte[2];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithThreeElementArray_VfmY5_fid2() {
        byte[] arrayOctet = new byte[3];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithFourElementArray_CsAu6_fid2() {
        byte[] arrayOctet = new byte[4];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithFiveElementArray_BfxT7_fid2() {
        byte[] arrayOctet = new byte[5];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithSixElementArray_WPgg8_fid2() {
        byte[] arrayOctet = new byte[6];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithSevenElementArray_VlbY9_fid2() {
        byte[] arrayOctet = new byte[7];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithEightElementArray_RpED10_fid2() {
        byte[] arrayOctet = new byte[8];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithNineElementArray_qPjS11_fid2() {
        byte[] arrayOctet = new byte[9];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidBase64String_ReturnsFalse_lvIs1_fid2() {
        byte[] arrayOctet = "abcd12345".getBytes();
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_withNonEmptyArray_sWqw2_fid2() {
        Base64 base64 = new Base64();
        byte[] nonEmptyArray = new byte[10];
        long encodedLength = base64.getEncodedLength(nonEmptyArray);
        assertEquals(13, encodedLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_withLineLength_zhdl3_fid2() {
        Base64 base64 = new Base64(76);
        byte[] array = new byte[100];
        long encodedLength = base64.getEncodedLength(array);
        assertEquals(132, encodedLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_withLineSeparator_nSOT4_fid2() {
        Base64 base64 = new Base64(0, new byte[]{'\r', '\n'});
        byte[] array = new byte[100];
        long encodedLength = base64.getEncodedLength(array);
        assertEquals(133, encodedLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_withUrlSafe_MRun5_fid2() {
        Base64 base64 = new Base64(false);
        byte[] array = new byte[100];
        long encodedLength = base64.getEncodedLength(array);
        assertEquals(132, encodedLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy2_FdOu1_fid2() {
        Base64 base64 = new Base64(0, new byte[0], false);
        assertEquals(CodecPolicy.STRICT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy3_hrDz2_fid2() {
        Base64 base64 = new Base64(0, new byte[0], true);
        assertEquals(CodecPolicy.STRICT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy4_dbQf3_fid2() {
        Base64 base64 = new Base64(0);
        assertEquals(CodecPolicy.STRICT, base64.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPadWithNullArray_UazY0_fid2() {
        Base64 base64 = new Base64();
        assertTrue(base64.containsAlphabetOrPad(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPadWithEmptyArray_obtj1_fid2() {
        Base64 base64 = new Base64();
        assertTrue(base64.containsAlphabetOrPad(new byte[0]));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPadWithArrayNotContainingPadOrAlphabet_ncAB5_fid2() {
        Base64 base64 = new Base64();
        byte[] array = new byte[1];
        array[0] = 'a';
        assertTrue(!base64.containsAlphabetOrPad(array));
    }
}