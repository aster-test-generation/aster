/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DoubleMetaphone_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_ueud0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int maxCodeLen = doubleMetaphone.getMaxCodeLen();
        assertEquals(0, maxCodeLen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_OJpd1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello World";
        String expected = "HLLW ORLD";
        String actual = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithEmptyInput_LRsl1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String result = doubleMetaphone.doubleMetaphone("", false);
        Assertions.assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithAlternate_UPEQ1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String result = doubleMetaphone.doubleMetaphone(value, true);
        assertEquals("HLL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithCleanInput_UPAX3() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello World";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("HL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSlavoGermanicInput_yPcS4() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Cvijet";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("SK", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithSilentStartInput_wlor5() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "ANational";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("ANL", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneWithInvalidInput_ibwt7() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Invalid";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_MPfT5_1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello World";
        String primary = doubleMetaphone.doubleMetaphone(value, false);
        String alternate = doubleMetaphone.doubleMetaphone(value, true);
        assertEquals("HELLOWRLD", primary);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_MPfT5_2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello World";
        String primary = doubleMetaphone.doubleMetaphone(value, false);
        String alternate = doubleMetaphone.doubleMetaphone(value, true);
        assertEquals("HELLOWORLD", alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Wjcd1() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "example";
        String expectedResult = "example";
        String actualResult = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_exLd15() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("primary", doubleMetaphone.doubleMetaphone("value", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphoneAlternate_scUE16() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("alternate", doubleMetaphone.doubleMetaphone("value", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_JMRC2() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "value";
        String result = doubleMetaphone.doubleMetaphone(value, false);
        assertEquals("value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsWithEmptyCriteria_hKuK0() {
        String[] criteria = {};
        boolean result = DoubleMetaphone.contains("test", 0, 4, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_crxI0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String expected = "HLL";
        String actual = doubleMetaphone.doubleMetaphone(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_jHPy0() {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String expected = "H3L2";
        String actual = doubleMetaphone.encode(value);
        assertEquals(expected, actual);
    }
}