/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HmacUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithAvailableAlgorithm_IDTW0() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_MD5;
        boolean result = HmacUtils.isAvailable(algorithm);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullKey_ggec0() {
        try {
            HmacUtils.getInitializedMac("HmacSHA256", null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Null key", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithAvailableAlgorithm_IDTW0_PrOU0() {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_MD5;
        boolean result = HmacUtils.isAvailable(algorithm);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyKey_XrZn1_Mtpz0() {
        try {
            HmacUtils.getInitializedMac("HmacSHA256", new byte[0]);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Empty key", e.getMessage());
        }
    }
}