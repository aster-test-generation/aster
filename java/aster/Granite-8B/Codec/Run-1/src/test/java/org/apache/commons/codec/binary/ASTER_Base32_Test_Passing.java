/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Base32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_Llwi0() {
        Base32 base32 = new Base32();
        byte[] actual = base32.getLineSeparator();
        byte[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator1_UFvM1() {
        Base32 base32 = new Base32(0, null, false, (byte) 0, CodecPolicy.STRICT);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_MNyu2() {
        Base32 base32 = new Base32(0, new byte[0], false, (byte) 0, CodecPolicy.STRICT);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_vQXs3() {
        Base32 base32 = new Base32(0, new byte[0], false, (byte) 0, CodecPolicy.LENIENT);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_Brnr4() {
        Base32 base32 = new Base32(false);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator5_cVMV5() {
        Base32 base32 = new Base32(0);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator6_AzTs6() {
        Base32 base32 = new Base32((byte) 0);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator7_XMYN7() {
        Base32 base32 = new Base32(0, null, false);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator8_pCTk8() {
        Base32 base32 = new Base32(0, new byte[0], false);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator9_bWhW9() {
        Base32 base32 = new Base32(0, new byte[0], true, (byte) 0, CodecPolicy.STRICT);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator10_RUom10() {
        Base32 base32 = new Base32(0, new byte[0], true, (byte) 0, CodecPolicy.LENIENT);
        byte[] actual = base32.getLineSeparator();
        byte[] expected = null;
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_AQYy0_1() {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_AQYy0_2() {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet((byte) 'a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_AQYy0_3() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) '0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_AQYy0_4() {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_AQYy0_5() {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_AQYy0_6() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) '9'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_AQYy0_7() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) '+'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_AQYy0_8() {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) '/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_Kiiv1_1() {
        Base32 base32 = new Base32(10);
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_Kiiv1_2() {
        Base32 base32 = new Base32(10);
        assertTrue(base32.isInAlphabet((byte) 'a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_Kiiv1_3() {
        Base32 base32 = new Base32(10);
        assertFalse(base32.isInAlphabet((byte) '0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_Kiiv1_4() {
        Base32 base32 = new Base32(10);
        assertTrue(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_Kiiv1_5() {
        Base32 base32 = new Base32(10);
        assertTrue(base32.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_Kiiv1_6() {
        Base32 base32 = new Base32(10);
        assertFalse(base32.isInAlphabet((byte) '9'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_Kiiv1_7() {
        Base32 base32 = new Base32(10);
        assertFalse(base32.isInAlphabet((byte) '+'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_Kiiv1_8() {
        Base32 base32 = new Base32(10);
        assertFalse(base32.isInAlphabet((byte) '/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_UFCn2_1() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_UFCn2_2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertTrue(base32.isInAlphabet((byte) 'a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_UFCn2_3() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertFalse(base32.isInAlphabet((byte) '0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_UFCn2_4() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertTrue(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_UFCn2_5() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertTrue(base32.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_UFCn2_6() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertFalse(base32.isInAlphabet((byte) '9'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_UFCn2_7() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertFalse(base32.isInAlphabet((byte) '+'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_UFCn2_8() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertFalse(base32.isInAlphabet((byte) '/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_eswp3_1() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_eswp3_2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertTrue(base32.isInAlphabet((byte) 'a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_eswp3_3() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertTrue(base32.isInAlphabet((byte) '0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_eswp3_4() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertTrue(base32.isInAlphabet((byte) 'F'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_eswp3_5() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertTrue(base32.isInAlphabet((byte) 'f'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_eswp3_6() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertFalse(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_eswp3_7() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertFalse(base32.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_eswp3_8() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertTrue(base32.isInAlphabet((byte) '9'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_eswp3_9() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertFalse(base32.isInAlphabet((byte) '+'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_eswp3_10() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertFalse(base32.isInAlphabet((byte) '/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_1() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertTrue(base32.isInAlphabet((byte) 'a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_3() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertTrue(base32.isInAlphabet((byte) '0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_4() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertTrue(base32.isInAlphabet((byte) 'F'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_5() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertTrue(base32.isInAlphabet((byte) 'f'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_6() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertFalse(base32.isInAlphabet((byte) '='));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_7() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertFalse(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_8() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertFalse(base32.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_9() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertTrue(base32.isInAlphabet((byte) '9'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_10() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertFalse(base32.isInAlphabet((byte) '+'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithPadding_VuRz4_11() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        assertFalse(base32.isInAlphabet((byte) '/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeAsString_jVKt0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3};
        String expected = "AEBAG===";
        String actual = base32.encodeAsString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_oJVW0() {
        Base32 base32 = new Base32(0, new byte[0], false, (byte) 0, CodecPolicy.STRICT);
        String basen = "ABC";
        boolean result = base32.isInAlphabet(basen);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthWithNullArray_TiIs0() {
        byte[] array = null;
        int expectedLength = 0;
        int actualLength = Base32.toLength(array);
        assertEquals(expectedLength, actualLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLengthWithNonNullArray_umbn1() {
        byte[] array = new byte[10];
        int expectedLength = 10;
        int actualLength = Base32.toLength(array);
        assertEquals(expectedLength, actualLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLength_Tkzg0() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[10];
        long len = base32.getEncodedLength(pArray);
        assertEquals(16, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLength_JKle1() {
        Base32 base32 = new Base32(10);
        byte[] pArray = new byte[10];
        long len = base32.getEncodedLength(pArray);
        assertEquals(20, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLengthAndSeparator_IZEp2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        byte[] pArray = new byte[10];
        long len = base32.getEncodedLength(pArray);
        assertEquals(18, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLengthAndSeparatorAndHex_naot3() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        byte[] pArray = new byte[10];
        long len = base32.getEncodedLength(pArray);
        assertEquals(18, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_uKvD0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base32.encode(input);
        assertTrue(output.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLineLength_pYKW1() {
        Base32 base32 = new Base32(10);
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base32.encode(input);
        assertTrue(output.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLineLengthAndSeparator_pukv2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base32.encode(input);
        assertTrue(output.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLineLengthSeparatorAndHex_mFiL3() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '=', CodecPolicy.LENIENT);
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base32.encode(input);
        assertTrue(output.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithHex_TpGE5() {
        Base32 base32 = new Base32(true);
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base32.encode(input);
        assertTrue(output.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPadding_fZyz6() {
        Base32 base32 = new Base32((byte) '=');
        byte[] input = new byte[]{1, 2, 3};
        byte[] output = base32.encode(input);
        assertTrue(output.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSize_QTNZ0() {
        Base32 base32 = new Base32();
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLength_JCUl1() {
        Base32 base32 = new Base32(10);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndLineSeparator_GMFX2() {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithLineLengthAndLineSeparatorAndUseHex_glgB3() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultBufferSizeWithUseHex_Upst5() {
        Base32 base32 = new Base32(true);
        assertEquals(8192, base32.getDefaultBufferSize());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_wvxk0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 'A';
        arrayOctet[1] = 'B';
        arrayOctet[2] = 'C';
        arrayOctet[3] = 'D';
        arrayOctet[4] = 'E';
        arrayOctet[5] = 'F';
        arrayOctet[6] = 'G';
        arrayOctet[7] = 'H';
        arrayOctet[8] = 'I';
        arrayOctet[9] = 'J';
        assert base32.isInAlphabet(arrayOctet, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet5_PNpH4() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 'A';
        arrayOctet[1] = 'B';
        arrayOctet[2] = 'C';
        arrayOctet[3] = 'D';
        arrayOctet[4] = 'E';
        arrayOctet[5] = 'F';
        arrayOctet[6] = 'G';
        arrayOctet[7] = 'H';
        arrayOctet[8] = 'I';
        arrayOctet[9] = 'J';
        assert base32.isInAlphabet(arrayOctet, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet7_KMpf6() {
        Base32 base32 = new Base32();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeToString_gGlU0() {
        Base32 base32 = new Base32();
        byte[] input = new byte[10];
        String expected = "AAAAAAAAAAAAAAAA";
        String actual = base32.encodeToString(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_yrcv0() throws DecoderException {
        Base32 base32 = new Base32();
        byte[] input = "abcd".getBytes();
        byte[] expectedOutput = " D".getBytes();
        byte[] actualOutput = base32.decode(input);
        assertEquals(new String(expectedOutput), new String(actualOutput));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_VsyG1() throws DecoderException {
        Base32 base32 = new Base32();
        String input = "abcd";
        String expectedOutput = " D";
        String actualOutput = new String(base32.decode(input));
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodecPolicy_FCgo0() {
        Base32 base32 = new Base32(1, new byte[0], true, (byte) 0, CodecPolicy.STRICT);
        assertEquals(CodecPolicy.STRICT, base32.getCodecPolicy());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode1_EZmj0() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{};
        byte[] result = base32.decode(pArray);
        assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_fUth1_1() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67};
        byte[] result = base32.decode(pArray);
        assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_BOPi2_1() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68};
        byte[] result = base32.decode(pArray);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode4_CPtK3_1() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69};
        byte[] result = base32.decode(pArray);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_PQFi3_1() {
        Base32 base32 = new Base32();
        byte[] pArray = new byte[]{65, 66, 67, 68, 69, 70};
        byte[] result = base32.decode(pArray);
        assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContainsAlphabetOrPad1_xbfq0() {
        Base32 base32 = new Base32();
        byte[] arrayOctet = new byte[]{(byte) 0x41, (byte) 0x42, (byte) 0x43};
        boolean result = base32.containsAlphabetOrPad(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLength_JKle1_McKo0() {
        Base32 base32 = new Base32(10);
        byte[] pArray = new byte[10];
        long len = base32.getEncodedLength(pArray);
        assertEquals(20L, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncodedLengthWithLineLengthAndSeparatorAndHex_naot3_MplA0() {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true);
        byte[] pArray = new byte[10];
        long len = base32.getEncodedLength(pArray);
        assertEquals(18L, len);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_xNaR0_zYzS0_1() {
        assertTrue(Base32.isWhiteSpace((byte) ' '));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_xNaR0_zYzS0_2() {
        assertTrue(Base32.isWhiteSpace((byte) '\t'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_xNaR0_zYzS0_3() {
        assertTrue(Base32.isWhiteSpace((byte) '\n'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_xNaR0_zYzS0_4() {
        assertTrue(Base32.isWhiteSpace((byte) '\r'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_xNaR0_zYzS0_5() {
        assertFalse(Base32.isWhiteSpace((byte) 'a'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_xNaR0_zYzS0_6() {
        assertFalse(Base32.isWhiteSpace((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWhiteSpace_xNaR0_zYzS0_7() {
        assertFalse(Base32.isWhiteSpace((byte) '0'));
    }
}