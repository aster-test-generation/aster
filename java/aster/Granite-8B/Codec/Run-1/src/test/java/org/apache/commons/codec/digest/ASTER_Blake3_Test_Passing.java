/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Blake3_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitHash_kunU0() {
        Blake3 blake3 = Blake3.initHash();
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeyedHash_HZyT0_1() {
        byte[] key = new byte[32];
        byte[] data = new byte[64];
        byte[] result = Blake3.initKeyedHash(key).update(data).doFinalize(32);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeyedHash_HZyT0_2() {
        byte[] key = new byte[32];
        byte[] data = new byte[64];
        byte[] result = Blake3.initKeyedHash(key).update(data).doFinalize(32);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithInvalidKeyLength_QLex1_1() {
        final byte[] key = new byte[31];
        final IllegalArgumentException exception =
        assertThrows(IllegalArgumentException.class, () -> Blake3.initKeyedHash(key));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithValidKey_qJrX2() {
        final byte[] key = new byte[32];
        final Blake3 blake3 = Blake3.initKeyedHash(key);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithValidKeyAndNullData_gWHl3() {
        final byte[] key = new byte[32];
        final byte[] data = null;
        final Blake3 blake3 = Blake3.initKeyedHash(key);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_initKeyedHash_withInvalidKeyLength_shouldThrowException_WSSe1() {
        byte[] key = new byte[1];
        assertThrows(IllegalArgumentException.class, () -> Blake3.initKeyedHash(key));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyDerivationFunction_NywX0() {
        byte[] kdfContext = new byte[10];
        Blake3 blake3 = Blake3.initKeyDerivationFunction(kdfContext);
        assertNotNull(blake3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void inputData(final byte[] data, final int offset, final int length) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeyedHash_HZyT0() {
        byte[] key = new byte[32];
        byte[] data = new byte[64];
        byte[] result = Blake3.initKeyedHash(key).update(data).doFinalize(32);
        assertNotNull(result);
        assertEquals(32, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithInvalidKeyLength_QLex1() {
        final byte[] key = new byte[31];
        final IllegalArgumentException exception =
        assertThrows(IllegalArgumentException.class, () -> Blake3.initKeyedHash(key));
        assertEquals("Blake3 keys must be 32 bytes", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitKeyedHashWithValidKeyAndValidData_HChC4() {
        final byte[] key = new byte[32];
        final byte[] data = new byte[10];
        final Blake3 blake3 = Blake3.initKeyedHash(key);
        assertNotNull(blake3);
    }
}