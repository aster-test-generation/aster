/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Hex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_PIcv0() {
        byte[] data = new byte[]{1, 2, 3};
        char[] expected = "010203".toCharArray();
        char[] actual = Hex.encodeHex(data);
        assertEquals(String.valueOf(expected), String.valueOf(actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_ppWO0() {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        char[] expected = "000102030405060708090a0b0c0d0e0f".toCharArray();
        assertArrayEquals(expected, Hex.encodeHex(data, 0, data.length, true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_DQiU0() {
        char[] expected = "48656c6c6f20576f726c64".toCharArray();
        byte[] input = "Hello World".getBytes();
        char[] actual = Hex.encodeHex(input);
        assertEquals(String.valueOf(expected), String.valueOf(actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_xqPq0() {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        char[] expected = "000102030405060708090a0b0c0d0e0f".toCharArray();
        char[] actual = Hex.encodeHex(data, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithEmptyData_yzTt2() {
        byte[] data = new byte[0];
        char[] expected = new char[0];
        char[] actual = Hex.encodeHex(data, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_FaHf0() {
        Hex hex = new Hex("UTF-8");
        byte[] array = new byte[]{1, 2, 3};
        byte[] expected = "010203".getBytes(hex.getCharset());
        byte[] actual = hex.encode(array);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName_fwlq0_1() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        hex = new Hex("UTF-8");
        hex = new Hex();
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName_fwlq0_3() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        hex = new Hex("UTF-8");
        hex = new Hex();
        assertEquals(Charset.defaultCharset().name(), hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetNameWithInvalidCharset_cUXb2() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_GiTP0() {
        byte[] data = {0x01, 0x02, 0x03};
        String expected = "010203";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString2_lMiO1() {
        byte[] data = {0x04, 0x05, 0x06};
        String expected = "040506";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString3_YexE2() {
        byte[] data = {0x07, 0x08, 0x09};
        String expected = "070809";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString4_DskJ3() {
        byte[] data = {0x0A, 0x0B, 0x0C};
        String expected = "0a0b0c";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString5_Awyr4() {
        byte[] data = {0x0D, 0x0E, 0x0F};
        String expected = "0d0e0f";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_ENhV0() {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put(new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A});
        data.flip();
        String expected = "0102030405060708090a";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_rCrw0() {
        byte[] data = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        String expected = "000102030405060708090a0b0c0d0e0f";
        String actual = Hex.encodeHexString(data, true);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_AUjL0_kENL0() throws DecoderException {
        Hex hex = new Hex(StandardCharsets.UTF_8);
        byte[] input = "48656C6C6F20576F726C64".getBytes(StandardCharsets.ISO_8859_1);
        byte[] expected = "Hello World".getBytes(StandardCharsets.UTF_8);
        byte[] actual = hex.decode(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_uuLB0_eALe0() {
        Hex hex = new Hex();
        String input = "48656C6C6F20576F726C64";
        String expected = "Hello World";
        String actual = null;
        try {
            actual = new String((byte[]) hex.decode(input));
        } catch (DecoderException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_Qjxu1_AXoI0() {
        Hex hex = new Hex();
        byte[] input = {0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64};
        byte[] expected = {0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64};
        try {
            byte[] actual = hex.decode(input);
            assertArrayEquals(expected, actual);
        } catch (DecoderException e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName_fwlq0() {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("UTF-8", hex.getCharsetName());
        hex = new Hex("UTF-8");
        assertEquals("UTF-8", hex.getCharsetName());
        hex = new Hex();
        assertEquals(Charset.defaultCharset().name(), hex.getCharsetName());
    }
}