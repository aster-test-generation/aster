/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DoubleMetaphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_DqMk0() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int actualMaxCodeLen = doubleMetaphone.getMaxCodeLen();
        int expectedMaxCodeLen = 0; // Replace with the expected value
        assertEquals(expectedMaxCodeLen, actualMaxCodeLen);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_ynju0() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        boolean result = doubleMetaphone.isDoubleMetaphoneEqual("string1", "string2");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDoubleMetaphoneEqual_kEwf0() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value1 = "Hello";
        String value2 = "Hillo";
        boolean alternate = true;
        boolean result = doubleMetaphone.isDoubleMetaphoneEqual(value1, value2, alternate);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_HnvT0() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Hello";
        String expectedOutput = "H3L0";
        String actualOutput = (String) doubleMetaphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSpecialCharacters_ylQb1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String input = "Hello, World!";
        String expectedOutput = "H3L0, W0RLD!";
        String actualOutput = (String) doubleMetaphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt1_mxSq0() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        int index = 1;
        char expected = 'e';
        char actual = doubleMetaphone.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt2_wIBL1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "World";
        int index = 0;
        char expected = 'W';
        char actual = doubleMetaphone.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCharAt3_faVj2() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Stack Overflow";
        int index = 10;
        char expected = 'O';
        char actual = doubleMetaphone.charAt(value, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_jVwd1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "value";
        boolean alternate = true;
        String result = doubleMetaphone.doubleMetaphone(value, alternate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanInput_lspy0() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_Ltxe3() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = true;
        String expectedResult = "000";
        String actualResult = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_MwoV1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "example";
        boolean alternate = true;
        String expectedResult = "example";
        String actualResult = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_ZYSJ1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "value";
        boolean alternate = false;
        String expected = "primary";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_YKVE1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "test";
        boolean alternate = false;
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        String expected = "T000";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_pCRl1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        boolean alternate = false;
        String expected = "HLL";
        String actual = doubleMetaphone.doubleMetaphone(value, alternate);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("A", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_2() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("E", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_3() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("I", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_4() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("O", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_5() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("U", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_6() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("Y", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_7() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("B", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_8() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("C", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_9() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("D", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_10() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("F", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_11() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("G", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_12() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("H", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_13() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("J", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_14() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("K", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_15() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("L", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_16() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("M", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_17() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("N", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_18() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("P", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_19() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("Q", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_20() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("R", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_21() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("S", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_22() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("T", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_23() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("V", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_24() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("W", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_25() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("X", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_fKPb1_26() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("000", doubleMetaphone.doubleMetaphone("Z", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_zVJu0() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String expected = "HLL";
        String actual = doubleMetaphone.doubleMetaphone(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_skae0() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        String value = "Hello";
        String expected = "H3L2";
        String actual = doubleMetaphone.encode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_hhAj0() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        int maxCodeLen = 10; // Set the maximum code length
        doubleMetaphone.setMaxCodeLen(maxCodeLen);
        assertEquals(maxCodeLen, doubleMetaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_jyJH1_1() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("value", doubleMetaphone.doubleMetaphone("value", false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoubleMetaphone_jyJH1_2() throws Exception {
        DoubleMetaphone doubleMetaphone = new DoubleMetaphone();
        assertEquals("value", doubleMetaphone.doubleMetaphone("value", true));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains1_mdPc0() throws Exception {
        String[] criteria = {"abc"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains2_YpFC1() throws Exception {
        String[] criteria = {"def"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains3_MYwI2() throws Exception {
        String[] criteria = {"abc", "def"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains4_QtGG3() throws Exception {
        String[] criteria = {"def", "ghi"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains5_LPkW4() throws Exception {
        String[] criteria = {"abc", "def", "ghi"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains6_gIEy5() throws Exception {
        String[] criteria = {"ghi", "jkl"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains7_Noqp6() throws Exception {
        String[] criteria = {"abc", "ghi", "jkl"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains8_lOsq7() throws Exception {
        String[] criteria = {"jkl", "mno"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains9_qOGZ8() throws Exception {
        String[] criteria = {"abc", "jkl", "mno"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains10_wcsJ9() throws Exception {
        String[] criteria = {"mno", "pqr"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains11_gbYp10() throws Exception {
        String[] criteria = {"abc", "mno", "pqr"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains12_jlXZ11() throws Exception {
        String[] criteria = {"pqr", "stu"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains13_vcae12() throws Exception {
        String[] criteria = {"abc", "pqr", "stu"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains14_hTQF13() throws Exception {
        String[] criteria = {"stu", "vwx"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains15_TUdx14() throws Exception {
        String[] criteria = {"abc", "stu", "vwx"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains16_syNq15() throws Exception {
        String[] criteria = {"vwx", "yz1"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains17_FmRX16() throws Exception {
        String[] criteria = {"abc", "vwx", "yz1"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testContains18_bKZZ17() throws Exception {
        String[] criteria = {"yz1", "234"};
        boolean result = DoubleMetaphone.contains("abc", 0, 3, criteria);
        assertFalse(result);
    }
}