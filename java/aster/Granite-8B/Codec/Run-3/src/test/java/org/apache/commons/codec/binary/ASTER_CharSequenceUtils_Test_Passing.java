/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CharSequenceUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_jWGr0() throws Exception {
        assertTrue(CharSequenceUtils.regionMatches("hello", false, 0, "hello", 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_ignoreCase_DiXQ1() throws Exception {
        assertTrue(CharSequenceUtils.regionMatches("hello", true, 0, "HELLO", 0, 5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_start_wXcO2() throws Exception {
        assertTrue(CharSequenceUtils.regionMatches("hello", false, 1, "hello", 1, 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_length_gEcf3() throws Exception {
        assertTrue(CharSequenceUtils.regionMatches("hello", false, 0, "hello", 0, 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_ignoreCase_start_Wbjf4() throws Exception {
        assertTrue(CharSequenceUtils.regionMatches("hello", true, 1, "HELLO", 1, 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_ignoreCase_length_pzbe5() throws Exception {
        assertTrue(CharSequenceUtils.regionMatches("hello", true, 0, "HELLO", 0, 4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_start_length_HbTw6() throws Exception {
        assertTrue(CharSequenceUtils.regionMatches("hello", false, 1, "hello", 1, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches_String_String_ignoreCase_start_length_RrvJ7() throws Exception {
        assertTrue(CharSequenceUtils.regionMatches("hello", true, 1, "HELLO", 1, 3));
    }
}