/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CharSequenceUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches1_vQPa0() {
        CharSequence cs = "abcd";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "abcd";
        int start = 0;
        int length = 4;
        boolean expected = true;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches2_pSRh1() {
        CharSequence cs = "abcd";
        boolean ignoreCase = false;
        int thisStart = 0;
        CharSequence substring = "abcd";
        int start = 0;
        int length = 4;
        boolean expected = true;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches3_ucUF2() {
        CharSequence cs = "abcd";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "efgh";
        int start = 0;
        int length = 4;
        boolean expected = false;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches4_mIkf3() {
        CharSequence cs = "abcd";
        boolean ignoreCase = false;
        int thisStart = 0;
        CharSequence substring = "efgh";
        int start = 0;
        int length = 4;
        boolean expected = false;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches5_GOMs4() {
        CharSequence cs = "abcd";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "aBcD";
        int start = 0;
        int length = 4;
        boolean expected = true;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches8_czHe7() {
        CharSequence cs = "abcd";
        boolean ignoreCase = false;
        int thisStart = 0;
        CharSequence substring = "aBcDe";
        int start = 0;
        int length = 4;
        boolean expected = false;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches6_IdXk5_fid1() {
        CharSequence cs = "abcd";
        boolean ignoreCase = false;
        int thisStart = 0;
        CharSequence substring = "aBcD";
        int start = 0;
        int length = 4;
        boolean expected = false;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegionMatches7_yFPc6_fid1() {
        CharSequence cs = "abcd";
        boolean ignoreCase = true;
        int thisStart = 0;
        CharSequence substring = "aBcDe";
        int start = 0;
        int length = 4;
        boolean expected = true;
        boolean actual = CharSequenceUtils.regionMatches(cs, ignoreCase, thisStart, substring, start, length);
        assertEquals(expected, actual);
    }
}