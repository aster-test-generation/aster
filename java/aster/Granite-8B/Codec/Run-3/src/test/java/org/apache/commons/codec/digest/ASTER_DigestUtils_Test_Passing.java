/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.binary.StringUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DigestUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256HexInputStream_zERO0() throws IOException {
        InputStream data = null; // Initialize data
        String expected = "expected_hash"; // Replace with expected hash
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_cnsl0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = MessageDigest.getInstance("SHA-384").digest(data);
        byte[] actual = DigestUtils.sha384(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestWithNullDigest_xpdE0() throws IOException {
        InputStream inputStream = null;
        MessageDigest digest = null;
        MessageDigest result = DigestUtils.updateDigest(digest, inputStream);
        assertEquals(digest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_OYkK0() throws IOException, NoSuchAlgorithmException {
        InputStream data = null;
        byte[] result = DigestUtils.sha(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_Yflo0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        InputStream data = null; // Initialize data
        String expected = "expected_hash_value"; // Replace with expected hash value
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_xiaM0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        String valueToDigest = "Hello, World!";
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertEquals("64ec88ca00b268e5ba1a35678a1b5316d212f4f366b2477232534a8aeca37f", updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Digest_ILyU0() throws NoSuchAlgorithmException {
        MessageDigest digest = DigestUtils.getSha384Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_DhNZ0() throws Exception {
        byte[] data = new byte[10];
        String expected = "a94a8fe5ccb19ba61c4c0873d391e987982fbbd3";
        String actual = DigestUtils.sha256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_QdbM0() throws Exception {
        String data = "Hello, World!";
        byte[] expected = {-117, 82, -102, 90, -103, -111, 125, -11, 111, -112, 102, 111, 114, 108, 100, -33};
        byte[] actual = DigestUtils.sha1(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_GPkX0() throws Exception {
        String data = "Hello, World!";
        byte[] expected = {-101, 57, -111, 110, -12, 102, 112, 52};
        byte[] actual = DigestUtils.md5(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_mZpM0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        String expected = "5d41402abc4b2a76b9719d911017c592";
        String actual = digestUtils.digestAsHex(data);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_ksmS0() throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-1");
        String data = "Hello, World!";
        byte[] expected = md.digest(data.getBytes());
        byte[] actual = DigestUtils.sha(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_tQJw0() throws Exception {
        byte[] data = new byte[10];
        String expected = "a69f73cca23a51d359e9cc79fc86a75c2891761b6219b5cba2e987960971330";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMd2Digest_CRpi0() throws NoSuchAlgorithmException {
        MessageDigest md2Digest = DigestUtils.getMd2Digest();
        assertNotNull(md2Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_xRBL0() throws Exception {
        String data = "Hello, World!";
        String expected = "2fd4e1c67a2d28fced849ee1bb76e7391b93eb1";
        String actual = DigestUtils.sha1Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_Odln0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = { /* expected SHA-256 hash */ };
        byte[] actual = DigestUtils.sha256(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_512Digest_oLso0() throws Exception {
        MessageDigest digest = DigestUtils.getSha3_512Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_wfSg0() throws IOException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        File data = new File("data.txt");
        byte[] result = digestUtils.digest(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_WCDR0() throws Exception {
        byte[] data = new byte[0];
        String expected = "6ed0dd02806fa85f64ba4b796fe31768b186b11351336764b863ba0d0f6a742";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_OxyA0() throws NoSuchAlgorithmException {
        String data = "Hello, World!";
        String expected = "6b86b273ff34fce19d6b804eff5a3f5747ada628c349d1756196876a94fc41";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_bWLH0() throws IOException {
        InputStream data = null; // Initialize data
        String expected = "expected_hash_value"; // Replace with expected hash value
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_qdGz0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.allocate(10);
        byte[] result = digestUtils.digest(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetShaDigest_IpXX0() throws Exception {
        MessageDigest messageDigest = DigestUtils.getShaDigest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigest_suiS0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessageDigestWithString_nAyN2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        MessageDigest messageDigest = digestUtils.getMessageDigest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullAlgorithm_UZjE0() throws Exception {
        try {
            DigestUtils.getDigest(null);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyAlgorithm_cVOt1() throws Exception {
        try {
            DigestUtils.getDigest("");
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAlgorithm_GWmF3() throws Exception {
        final MessageDigest digest = DigestUtils.getDigest("SHA-256");
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha3_384Digest_powb0() throws NoSuchAlgorithmException {
        MessageDigest messageDigest = DigestUtils.getSha3_384Digest();
        assertNotNull(messageDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_igSy0() throws IOException, NoSuchAlgorithmException {
        InputStream data = null;
        byte[] expected = MessageDigest.getInstance("SHA-384").digest();
        byte[] actual = DigestUtils.sha384(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_acbC0() throws IOException {
        InputStream data = null; // Initialize data
        String expected = "expected_hash_value"; // Replace with expected hash value
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSha3_224Digest_qjhM0() throws NoSuchAlgorithmException {
        MessageDigest expected = MessageDigest.getInstance("SHA3-224");
        MessageDigest actual = DigestUtils.getSha3_224Digest();
        assertEquals(expected.getAlgorithm(), actual.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_swoh0() throws Exception {
        byte[] data = new byte[]{1, 2, 3};
        String expected = "a94a8fe5ccb19ba615441462bed4b52e2486d39";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_Nxkv0() throws Exception {
        String data = "Hello, World!";
        byte[] expected = {(byte) 0x6b, (byte) 0x04, (byte) 0x29, (byte) 0x52, (byte) 0x53, (byte) 0xa6, (byte) 0xc1, (byte) 0xe4, (byte) 0x0e, (byte) 0xf6, (byte) 0xb2, (byte) 0xa7, (byte) 0x39, (byte) 0xd6, (byte) 0xff, (byte) 0x44, (byte) 0x36, (byte) 0x02, (byte) 0xa4, (byte) 0x62, (byte) 0xcb, (byte) 0x1e, (byte) 0xe3, (byte) 0x48, (byte) 0x6e, (byte) 0x28, (byte) 0x0c, (byte) 0xb7, (byte) 0xc7, (byte) 0x9f};
        byte[] actual = DigestUtils.sha3_224(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_azth0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] data = "Hello, World!".getBytes();
        byte[] expectedDigest = new byte[]{-10, 103, -115, 111, -100, 11, 102, 111, 114, -116, -101, 108, -108, 111, -59, -111, 115, 32, 119, 111, 114, 108, 100, 33};
        byte[] actualDigest = DigestUtils.digest(messageDigest, data);
        Assertions.assertArrayEquals(expectedDigest, actualDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha_hwwL0() throws Exception {
        byte[] data = new byte[]{1, 2, 3};
        byte[] expected = MessageDigest.getInstance("SHA-1").digest(data);
        byte[] actual = DigestUtils.sha(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384_IfHS0() throws Exception {
        String data = "Hello, World!";
        byte[] expected = { /* expected bytes */ };
        byte[] actual = DigestUtils.sha3_384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_Oqun0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put("Hello, World!".getBytes());
        data.flip();
        byte[] expected = messageDigest.digest("Hello, World!".getBytes());
        byte[] actual = DigestUtils.digest(messageDigest, data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_uvLN0() throws Exception {
        String data = "Hello, World!";
        String expected = "b66684a07d91523f9e1f2a725c862d1269e11d25c80c9606e7b97728a5a0844";
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_384Hex_XGVF0() throws Exception {
        byte[] data = new byte[10]; // Replace with actual data
        String expected = "0x0000000000000000000000000000000000000000000000000000000000000000"; // Replace with expected result
        String actual = DigestUtils.sha3_384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_eypX0() throws Exception {
        String data = "Hello, World!";
        String expected = "2fd4e1c67a2d28fced849ee1bb76e7391b93eb12";
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_Adud0() throws Exception {
        String data = "Hello, World!";
        String expected = "5d41402abc4b2a76b9719d911017c592";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2Hex_HGgx0() throws Exception {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        String expected = "00112233445566778899";
        String actual = DigestUtils.md2Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224_sYQJ0() throws IOException, NoSuchAlgorithmException {
        InputStream data = null; // Initialize data
        MessageDigest expectedDigest = MessageDigest.getInstance("SHA-512/224");
        byte[] expectedHash = expectedDigest.digest(); // Calculate expected hash
        byte[] actualHash = DigestUtils.sha512_224(data); // Calculate actual hash
        assertEquals(expectedHash, actualHash); // Assert that actual hash matches expected hash
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_XMVY0() throws Exception {
        String data = "Hello, World!";
        byte[] expected = { /* expected bytes */ };
        byte[] actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256WithEmptyData_Byvf1() throws Exception {
        String data = "";
        byte[] expected = { /* expected bytes */ };
        byte[] actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256WithNullData_cMVz2() throws Exception {
        String data = null;
        byte[] expected = { /* expected bytes */ };
        byte[] actual = DigestUtils.sha3_256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_HxQG0() throws Exception {
        String data = "example data";
        String expected = "204a8fc6dda827f00a075c606745a920d668617a796661d867f9f757c83c509";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_mRDN0() throws Exception {
        String data = "Hello, World!";
        String expected = "202cb962ac59075b964b07152d234b70";
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512_fzfs0() throws Exception {
        String data = "Hello, World!";
        byte[] expected = DigestUtils.sha3_512(data);
        byte[] actual = DigestUtils.sha3_512(StringUtils.getBytesUtf8(data));
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestMessageDigestByteBuffer_jPki4_1() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] data = new byte[1024];
        MessageDigest result = DigestUtils.updateDigest(digest, ByteBuffer.wrap(data));
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestMessageDigestByteBuffer_jPki4_2() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] data = new byte[1024];
        MessageDigest result = DigestUtils.updateDigest(digest, ByteBuffer.wrap(data));
        assertNotSame(digest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestMessageDigestByteBuffer_jPki4_3() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] data = new byte[1024];
        MessageDigest result = DigestUtils.updateDigest(digest, ByteBuffer.wrap(data));
        assertEquals("SHA-256", result.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestMessageDigestString_Wjyu5_1() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String data = "Hello, World!";
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestMessageDigestString_Wjyu5_2() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String data = "Hello, World!";
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertNotSame(digest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigestMessageDigestString_Wjyu5_3() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        String data = "Hello, World!";
        MessageDigest result = DigestUtils.updateDigest(digest, data);
        assertEquals("SHA-256", result.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_VhQg0() throws Exception {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        String expected = "1623d48685a724253b866e62d63a6da0baacecf2132a80f444d253e5c9923f7";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_vmIu0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = MessageDigest.getInstance("SHA-512").digest(data);
        byte[] actual = DigestUtils.sha512(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSha512Digest_waTV0() throws Exception {
        MessageDigest digest = DigestUtils.getSha512Digest();
        assertNotNull(digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_NcYs0_1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertNotEquals(messageDigest, updatedDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_NcYs0_2() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        ByteBuffer valueToDigest = ByteBuffer.wrap("Hello, World!".getBytes());
        MessageDigest updatedDigest = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertEquals("2fd4e1c67a2d28fced849ee1bb76e7391b93eb12f182e5962da1c6051e6565b", updatedDigest.digest());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_224Hex_OxbE0() throws IOException {
        InputStream data = null; // Initialize data
        String expected = "a5d5a8853253018892119853151171";
        String actual = DigestUtils.sha512_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256_gecw0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{-107, -111, 10, 116, 101, 115, 116, 32, 109, 101, 115, 115, 97, 103, 101};
        byte[] actual = DigestUtils.sha3_256(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_obpy0() throws Exception {
        byte[] data = new byte[10]; // Replace with actual data
        String expected = "a1a2a3a4a5a6a7a8a9aaabacad"; // Replace with expected result
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224_gCMb0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = { /* expected bytes */ };
        byte[] actual = DigestUtils.sha3_224(data);
        Assertions.assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256Hex_vyFU0() throws IOException {
        InputStream data = null; // Initialize data
        String expected = "expected_hash_value"; // Replace with expected hash value
        String actual = DigestUtils.sha256Hex(data);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1Hex_YerA0() throws Exception {
        byte[] data = new byte[10];
        String expected = "da39a3ee5e6b4b0d3255bfef95601890afd80709";
        String actual = DigestUtils.sha1Hex(data);
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_mWSG0() throws Exception {
        String data = "Hello, World!";
        String expected = "5d41402abc4b2a76b9719d911017c592";
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_TFil0() throws IOException {
        InputStream data = null; // initialize data
        String expected = "a7ffc6f8b9d730aa8a52d8553199b7c8156aa828ba8d1dcf9a0539248";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Hex_NsxB0() throws Exception {
        byte[] data = new byte[10]; // Initialize data array with appropriate values
        String expected = "expected_md5_hex_value"; // Replace with expected md5 hex value
        String actual = DigestUtils.md5Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_ZVTN0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = new byte[]{(byte) 0x23, (byte) 0x44, (byte) 0x94, (byte) 0x24, (byte) 0x90, (byte) 0x6b, (byte) 0xc4, (byte) 0xf1};
        byte[] actual = DigestUtils.md2(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_tNwM0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        byte[] expected = {-116, 56, 109, 105, -105, -111, 114, 119, -11, 115, 101, 108, -116, 101, 115, 116};
        byte[] actual = digestUtils.sha256(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_mJme0() throws NoSuchAlgorithmException {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = MessageDigest.getInstance("SHA-512/256").digest(data);
        byte[] actual = DigestUtils.sha512_256(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_cSSN0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        Path data = null; // Replace with actual path
        OpenOption[] options = null; // Replace with actual options
        String expected = "expected_hash_value"; // Replace with expected hash value
        String actual = digestUtils.digestAsHex(data, options);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSha512_224Digest_rlNL0() throws NoSuchAlgorithmException {
        MessageDigest expected = MessageDigest.getInstance("SHA-512/224");
        MessageDigest actual = DigestUtils.getSha512_224Digest();
        assertEquals(expected.getAlgorithm(), actual.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_PEME0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        ByteBuffer data = ByteBuffer.allocate(10);
        data.putInt(0, 123456789);
        String expected = "7509e5bda0c762d2bac7f90d758b5b6";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384_SMut0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        byte[] expected = { /* expected byte values */ };
        byte[] actual = digestUtils.sha384(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha256_fVPe0() throws IOException, NoSuchAlgorithmException {
        InputStream data = null; // Initialize data stream
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] result = DigestUtils.sha256(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_CMTw0() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        byte[] valueToDigest = new byte[]{1, 2, 3};
        MessageDigest result = DigestUtils.updateDigest(messageDigest, valueToDigest);
        assertEquals(messageDigest, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_EsZm0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        InputStream inputStream = null;
        byte[] result = digestUtils.digest(inputStream);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigest_ljwt1() throws IOException {
        MessageDigest messageDigest = null;
        InputStream inputStream = null;
        byte[] result = DigestUtils.updateDigest(messageDigest, inputStream).digest();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithString_chbA2() throws Exception {
        String name = "";
        DigestUtils digestUtils = new DigestUtils(name);
        InputStream inputStream = null;
        byte[] result = digestUtils.digest(inputStream);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShaHex_YciZ0() throws IOException {
        InputStream data = null; // Initialize InputStream object
        String expected = "expected_sha_hex_value"; // Replace with expected value
        String actual = DigestUtils.shaHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_nssA0() throws Exception {
        String data = "Hello, World!";
        String expected = "86fb269d190d2c85f6e046d162d54b52e2f878d516b5c93ce6600415bfc6127ec48a18b65b05117066974b57304594d44011a8294641365b9b8f6198aa125";
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_512Hex_MzUN0() throws Exception {
        String data = "Hello, World!";
        String expected = "a1a668753b91236243943b0d3277a749365e7b90e0699c37d998e4986ca73b5967e9e0095ed7750060bbb6143bb58f6046c702c602c49495ec5cab41e45625";
        String actual = DigestUtils.sha3_512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd2_oeOG0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        byte[] expected = {(byte) 0x23, (byte) 0x44, (byte) 0x65, (byte) 0x87};
        byte[] actual = digestUtils.md2(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5_fRkM0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = MessageDigest.getInstance("MD5").digest(data);
        byte[] actual = DigestUtils.md5(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestPathArray_aAhz0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        Path data = null;
        byte[] result = digestUtils.digest(data, (OpenOption[]) null);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512Hex_uztq0() throws IOException {
        InputStream data = null; // Initialize data
        String expected = "expected_hash_value"; // Replace with expected hash value
        String actual = DigestUtils.sha512Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSha3_256Digest_LOKI0() throws NoSuchAlgorithmException {
        MessageDigest actualDigest = DigestUtils.getSha3_256Digest();
        MessageDigest expectedDigest = MessageDigest.getInstance("SHA-384");
        assertEquals(expectedDigest.getAlgorithm(), actualDigest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256_VRYv0() throws Exception {
        String data = "Hello, World!";
        byte[] expected = {(byte) 0x20, (byte) 0x2b, (byte) 0xb7, (byte) 0x23, (byte) 0x8d, (byte) 0x03, (byte) 0x49, (byte) 0x18, (byte) 0xd9, (byte) 0x8e, (byte) 0x27, (byte) 0xe9, (byte) 0x56, (byte) 0x08, (byte) 0xa1, (byte) 0x8a, (byte) 0xf3, (byte) 0xf1, (byte) 0x73, (byte) 0x44, (byte) 0x07, (byte) 0x9f, (byte) 0x2c, (byte) 0xf1, (byte) 0x1d, (byte) 0x10, (byte) 0x72, (byte) 0x05, (byte) 0x29, (byte) 0xf3};
        byte[] actual = DigestUtils.sha512_256(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha384Hex_TsQk0() throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance("SHA-384");
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = digest.digest(data);
        String actual = DigestUtils.sha384Hex(data);
        assertEquals(Hex.encodeHexString(expected), actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_lDqX0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = new byte[]{1, 2, 3};
        String expected = "010203";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSha256Digest_VGGj0_1() throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        MessageDigest md2 = DigestUtils.getSha256Digest();
        assertEquals(md.getAlgorithm(), md2.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSha256Digest_VGGj0_2() throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        MessageDigest md2 = DigestUtils.getSha256Digest();
        assertEquals(md.getDigestLength(), md2.getDigestLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSha256Digest_VGGj0_3() throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        MessageDigest md2 = DigestUtils.getSha256Digest();
        assertNotSame(md, md2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_256Hex_hCwd0() throws Exception {
        byte[] data = new byte[0];
        String expected = "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3";
        String actual = DigestUtils.sha512_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_gNtE0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        String data = "Hello, World!";
        byte[] expected = new byte[]{-8, 119, 111, 114, 108, 100, 33};
        byte[] actual = digestUtils.digest(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_oCvI0() throws IOException, NoSuchAlgorithmException {
        InputStream data = null; // Initialize InputStream data
        MessageDigest digest = MessageDigest.getInstance("SHA-1"); // Initialize MessageDigest digest
        byte[] result = DigestUtils.sha1(data); // Call the method under test
        assertNotNull(result); // Assert that the result is not null
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha1_TWQO0() throws Exception {
        byte[] data = "Hello, World!".getBytes();
        byte[] expected = {-106, 85, -111, 112, -105, 101, 115, 32, -112, 114, 105, 110, 99, 101, 33};
        byte[] actual = DigestUtils.sha1(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_256Hex_QaDS0() throws Exception {
        String data = "Hello, World!";
        String expected = "a1a668753b69fa883502fb04c70f39f5e820267d3cf45118315c95f867385b4";
        String actual = DigestUtils.sha3_256Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_OGqm0() throws Exception {
        String data = "Hello, World!";
        String expected = "4106869201587642995248508164643803703886476591051377";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMd5Digest_xybJ0_1() throws Exception {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertNotNull(md5Digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMd5Digest_xybJ0_2() throws Exception {
        MessageDigest md5Digest = DigestUtils.getMd5Digest();
        assertEquals("MD5", md5Digest.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha3_224Hex_xGiy0() throws Exception {
        byte[] data = new byte[]{1, 2, 3};
        String expected = "8131186248f78b330c61c12c99327153200c6821a3841146601337047";
        String actual = DigestUtils.sha3_224Hex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigest_SYRP0() throws Exception {
        DigestUtils digestUtils = new DigestUtils();
        byte[] data = new byte[10];
        byte[] expected = new byte[10];
        byte[] actual = digestUtils.digest(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithMessageDigest_lIbo1() throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        DigestUtils digestUtils = new DigestUtils(messageDigest);
        byte[] data = new byte[10];
        byte[] expected = new byte[10];
        byte[] actual = digestUtils.digest(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestWithString_XvLH2() throws Exception {
        DigestUtils digestUtils = new DigestUtils("SHA-256");
        byte[] data = new byte[10];
        byte[] expected = new byte[10];
        byte[] actual = digestUtils.digest(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDigestAsHex_KgAY0() throws IOException {
        DigestUtils digestUtils = new DigestUtils();
        File data = new File("path/to/file");
        String expected = "expected_hex_digest";
        String actual = digestUtils.digestAsHex(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest_mJJO0() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        Path path = null;
        OpenOption[] options = null;
        MessageDigest result = null;
        try {
            result = DigestUtils.updateDigest(digest, path, options);
        } catch (IOException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertTrue(result == digest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateDigest10_mmKV9() throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSha512_IdVt0() throws Exception {
        String data = "Hello, World!";
        byte[] expected = new byte[]{-88, 104, 111, -111, -111, 101, 114, -111, -111, 119, 111, 114, 108, 100, 33};
        byte[] actual = DigestUtils.sha512(data);
        assertEquals(expected, actual);
    }
}