/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Test_Passing {
    private final byte[] ALWAYS_ENCODE_BYTES = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -2};
    private final boolean PLUS_FOR_SPACE = true;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeNull_lHsy0() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        Object result = percentCodec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_KYcx1() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{0x41, 0x42, 0x43};
        byte[] expected = new byte[]{0x41, 0x42, 0x43};
        byte[] result = (byte[]) percentCodec.decode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInvalidType_JKji2() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        try {
            percentCodec.decode("invalid");
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertEquals("Objects of type java.lang.String cannot be Percent decoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_cPxz0() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        Object encodedObject = percentCodec.encode(null);
        Assertions.assertNull(encodedObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_jgLB1_1() throws Exception {
        byte[] inputByteArray = new byte[]{0, 1, 2, 3};
        PercentCodec percentCodec = new PercentCodec();
        Object encodedObject = percentCodec.encode(inputByteArray);
        Assertions.assertTrue(encodedObject instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByteArray_jgLB1_2() throws Exception {
        byte[] inputByteArray = new byte[]{0, 1, 2, 3};
        PercentCodec percentCodec = new PercentCodec();
        Object encodedObject = percentCodec.encode(inputByteArray);
        Assertions.assertEquals("%00%01%02%03", encodedObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedType_Onwg2() throws Exception {
        Object inputObject = new Object();
        PercentCodec percentCodec = new PercentCodec();
        try {
            percentCodec.encode(inputObject);
            Assertions.fail("EncoderException expected");
        } catch (EncoderException e) {
            Assertions.assertEquals("Objects of type " + inputObject.getClass().getName() + " cannot be Percent encoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_whOx0() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.encode(null);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoEncodingRequired_ugjC1() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = "Hello World".getBytes();
        byte[] result = percentCodec.encode(input);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_ZUyq2() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{' '}, true);
        byte[] input = "Hello World".getBytes();
        byte[] expected = "Hello%20World".getBytes();
        byte[] result = percentCodec.encode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoPlusForSpace_RjJS3() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{' '}, false);
        byte[] input = "Hello World".getBytes();
        byte[] expected = "Hello World".getBytes();
        byte[] result = percentCodec.encode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithContainsSpace_Vwls4() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = "Hello World".getBytes();
        byte[] expected = "Hello%20World".getBytes();
        byte[] result = percentCodec.encode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoContainsSpace_AmPn5() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = "HelloWorld".getBytes();
        byte[] expected = "HelloWorld".getBytes();
        byte[] result = percentCodec.encode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncoding_obCq1() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] result = percentCodec.encode(input);
        assertArrayEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoding_GTGV2() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] input = new byte[]{32, 33, 34, 35, 36, 37, 38, 39, 40, 41};
        byte[] expected = new byte[]{37, 32, 37, 21, 37, 22, 37, 23, 37, 24, 37, 25, 37, 26, 37, 27, 37, 28, 37, 29, 37, 30, 37, 31};
        byte[] result = percentCodec.encode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncodingAndPlusForSpace_YVOn3() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32}, true);
        byte[] input = new byte[]{32, 33, 34, 35, 36, 37, 38, 39, 40, 41};
        byte[] expected = new byte[]{43, 37, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41};
        byte[] result = percentCodec.encode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncodingAndPlusForSpaceAndContainsSpace_VaVk4() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{32}, true);
        byte[] input = new byte[]{32, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41};
        byte[] expected = new byte[]{43, 37, 32, 32, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41};
        byte[] result = percentCodec.encode(input);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_ADKO0() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.encode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncoding_yCkW1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] result = codec.encode(bytes);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncoding_tOUh2() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] bytes = new byte[]{-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expected = new byte[]{(byte) 0xff, (byte) 0xf0, (byte) 0xf1, (byte) 0xf2, (byte) 0xf3, (byte) 0xf4, (byte) 0xf5, (byte) 0xf6, (byte) 0xf7, (byte) 0xf8, (byte) 0xf9};
        byte[] result = codec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithPlusForSpace_pClb3() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{' '}, true);
        byte[] bytes = new byte[]{' ', 'a', 'b', 'c', ' '};
        byte[] expected = new byte[]{(byte) 0x2b, (byte) 0x61, (byte) 0x62, (byte) 0x63, (byte) 0x2b};
        byte[] result = codec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEncodingAndPlusForSpace_lzQj4() throws Exception {
        PercentCodec codec = new PercentCodec(new byte[]{' '}, true);
        byte[] bytes = new byte[]{-1, ' ', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ' '};
        byte[] expected = new byte[]{(byte) 0xff, (byte) 0x2b, (byte) 0xf0, (byte) 0xf1, (byte) 0xf2, (byte) 0xf3, (byte) 0xf4, (byte) 0xf5, (byte) 0xf6, (byte) 0xf7, (byte) 0xf8, (byte) 0xf9, (byte) 0x2b};
        byte[] result = codec.encode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullBytes_mgOt0() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.decode(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyBytes_YsFN1() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] result = percentCodec.decode(new byte[0]);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNoEscapeChars_pLpX2() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = "Hello World".getBytes();
        byte[] result = percentCodec.decode(bytes);
        assertArrayEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEscapeChars_jqlk3() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = "Hello%20World".getBytes();
        byte[] expected = "Hello World".getBytes();
        byte[] result = percentCodec.decode(bytes);
        assertArrayEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidEscapeChars_GPpu5() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = "Hello%2GWorld".getBytes();
        try {
            percentCodec.decode(bytes);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidEscapeChars2_qIkl6() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = "Hello%2".getBytes();
        try {
            percentCodec.decode(bytes);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidEscapeChars3_bxcg7() throws Exception {
        PercentCodec percentCodec = new PercentCodec();
        byte[] bytes = "Hello%2G".getBytes();
        try {
            percentCodec.decode(bytes);
            fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_SUxw0() throws Exception {
        final PercentCodec percentCodec = new PercentCodec(ALWAYS_ENCODE_BYTES, PLUS_FOR_SPACE);
        final byte[] result = percentCodec.encode(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncoding_UqEv1() throws Exception {
        final PercentCodec percentCodec = new PercentCodec(ALWAYS_ENCODE_BYTES, PLUS_FOR_SPACE);
        final byte[] bytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};
        final byte[] result = percentCodec.encode(bytes);
        assertEquals(bytes, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_vCIs0() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02}, true);
        byte[] bytes = new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02};
        byte[] result = percentCodec.encode(bytes);
        assert result != null;
        assert result.length == 6;
        assert result[0] == '0';
        assert result[1] == '0';
        assert result[2] == '%';
        assert result[3] == '3';
        assert result[4] == '0';
        assert result[5] == '%';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode2_YOog1() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02}, true);
        byte[] bytes = new byte[]{(byte) 0x03, (byte) 0x04, (byte) 0x05};
        byte[] result = percentCodec.encode(bytes);
        assert result != null;
        assert result.length == 9;
        assert result[0] == '%';
        assert result[1] == '0';
        assert result[2] == '3';
        assert result[3] == '%';
        assert result[4] == '0';
        assert result[5] == '4';
        assert result[6] == '%';
        assert result[7] == '0';
        assert result[8] == '5';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode3_awvx2() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02}, true);
        byte[] bytes = new byte[]{(byte) 0x03, (byte) 0x04, (byte) 0x20};
        byte[] result = percentCodec.encode(bytes);
        assert result != null;
        assert result.length == 6;
        assert result[0] == '%';
        assert result[1] == '0';
        assert result[2] == '3';
        assert result[3] == '%';
        assert result[4] == '0';
        assert result[5] == '4';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode4_MppD3() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02}, true);
        byte[] bytes = new byte[]{(byte) 0x03, (byte) 0x04, (byte) 0x21};
        byte[] result = percentCodec.encode(bytes);
        assert result != null;
        assert result.length == 3;
        assert result[0] == '%';
        assert result[1] == '0';
        assert result[2] == '3';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode5_SMCB4() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02}, true);
        byte[] bytes = new byte[]{(byte) 0x03, (byte) 0x04, (byte) 0x22};
        byte[] result = percentCodec.encode(bytes);
        assert result != null;
        assert result.length == 3;
        assert result[0] == '%';
        assert result[1] == '0';
        assert result[2] == '3';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode6_SDhA5() throws Exception {
        PercentCodec percentCodec = new PercentCodec(new byte[]{(byte) 0x00, (byte) 0x01, (byte) 0x02}, true);
        byte[] bytes = new byte[]{(byte) 0x03, (byte) 0x04, (byte) 0x23};
        byte[] result = percentCodec.encode(bytes);
        assert result != null;
        assert result.length == 3;
        assert result[0] == '%';
        assert result[1] == '0';
        assert result[2] == '3';
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_BwPO0() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.encode(null);
        assertArrayEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeEmpty_xCUV1() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.encode(new byte[0]);
        assertArrayEquals(new byte[0], result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNoEncoding_tyZP2() throws Exception {
        PercentCodec codec = new PercentCodec();
        byte[] result = codec.encode(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9});
        assertArrayEquals(new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, result);
    }
}