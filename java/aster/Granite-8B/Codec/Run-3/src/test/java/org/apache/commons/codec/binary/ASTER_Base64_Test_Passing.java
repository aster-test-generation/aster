/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDecodeInteger_sncB0() throws Exception {
        byte[] input = {0x31, 0x32, 0x33, 0x34}; // "1234"
        BigInteger expected = new BigInteger("1234");
        BigInteger actual = Base64.decodeInteger(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeInteger_cJqI0() throws Exception {
        BigInteger bigInteger = new BigInteger("12345678901234567890");
        byte[] expected = "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkw".getBytes();
        byte[] actual = Base64.encodeInteger(bigInteger);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64StrictPolicy_XciX0() throws Exception {
        String base64String = "SGVsbG8gV29ybGQh";
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64String);
        assertEquals(new String(expected), new String(actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64Chunked_SObq0() throws Exception {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] expectedResult = new byte[]{48, 49, 50, 51, 52, 53, 54, 55, 13, 10, 48, 49, 50, 51, 52, 53, 54, 55, 13, 10, 48, 49, 50, 51, 52, 53, 54, 55};
        byte[] actualResult = Base64.encodeBase64Chunked(binaryData);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafe_kbSU0() throws Exception {
        Base64 base64 = new Base64();
        boolean result = base64.isUrlSafe();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafeWithUrlSafeTrue_zxkL1() throws Exception {
        Base64 base64 = new Base64(true);
        boolean result = base64.isUrlSafe();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUrlSafeWithUrlSafeFalse_vafB2() throws Exception {
        Base64 base64 = new Base64(false);
        boolean result = base64.isUrlSafe();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_RgVp0() throws Exception {
        byte[] binaryData = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        boolean isChunked = true;
        byte[] expectedResult = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] actualResult = Base64.encodeBase64(binaryData, isChunked);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_koAw0() throws Exception {
        Base64 base64 = new Base64();
        byte[] result = base64.getLineSeparator();
        byte[] expected = System.getProperty("line.separator").getBytes();
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLength_SKwd1() throws Exception {
        Base64 base64 = new Base64(10);
        byte[] result = base64.getLineSeparator();
        byte[] expected = System.getProperty("line.separator").getBytes();
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLengthAndLineSeparator_pRqv2() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{'\n'});
        byte[] result = base64.getLineSeparator();
        byte[] expected = new byte[]{'\n'};
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLengthAndLineSeparatorAndUrlSafe_NQrp3() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{'\n'}, true);
        byte[] result = base64.getLineSeparator();
        byte[] expected = new byte[]{'\n'};
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithUrlSafe_oxdC4() throws Exception {
        Base64 base64 = new Base64(true);
        byte[] result = base64.getLineSeparator();
        byte[] expected = System.getProperty("line.separator").getBytes();
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparatorWithLineLengthAndLineSeparatorAndUrlSafeAndDecodingPolicy_McOS6() throws Exception {
        Base64 base64 = new Base64(10, new byte[]{'\n'}, true, CodecPolicy.STRICT);
        byte[] result = base64.getLineSeparator();
        byte[] expected = new byte[]{'\n'};
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_yYFw0_1() throws Exception {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_yYFw0_2() throws Exception {
        Base64 base64 = new Base64();
        assertFalse(base64.isInAlphabet((byte) 128));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_yYFw0_3() throws Exception {
        Base64 base64 = new Base64();
        assertTrue(base64.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_yYFw0_4() throws Exception {
        Base64 base64 = new Base64();
        assertFalse(base64.isInAlphabet((byte) '/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_zGDd1_1() throws Exception {
        Base64 base64 = new Base64(76);
        assertTrue(base64.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_zGDd1_2() throws Exception {
        Base64 base64 = new Base64(76);
        assertFalse(base64.isInAlphabet((byte) 128));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_zGDd1_3() throws Exception {
        Base64 base64 = new Base64(76);
        assertTrue(base64.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_zGDd1_4() throws Exception {
        Base64 base64 = new Base64(76);
        assertFalse(base64.isInAlphabet((byte) '/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_mSdg2_1() throws Exception {
        Base64 base64 = new Base64(0, new byte[]{'\r', '\n'});
        assertTrue(base64.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_mSdg2_2() throws Exception {
        Base64 base64 = new Base64(0, new byte[]{'\r', '\n'});
        assertFalse(base64.isInAlphabet((byte) 128));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_mSdg2_3() throws Exception {
        Base64 base64 = new Base64(0, new byte[]{'\r', '\n'});
        assertTrue(base64.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineSeparator_mSdg2_4() throws Exception {
        Base64 base64 = new Base64(0, new byte[]{'\r', '\n'});
        assertFalse(base64.isInAlphabet((byte) '/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUrlSafe_nRWm3_1() throws Exception {
        Base64 base64 = new Base64(false);
        assertTrue(base64.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUrlSafe_nRWm3_2() throws Exception {
        Base64 base64 = new Base64(false);
        assertFalse(base64.isInAlphabet((byte) 128));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUrlSafe_nRWm3_3() throws Exception {
        Base64 base64 = new Base64(false);
        assertTrue(base64.isInAlphabet((byte) 'z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUrlSafe_nRWm3_4() throws Exception {
        Base64 base64 = new Base64(false);
        assertFalse(base64.isInAlphabet((byte) '/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_WzaP0() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = false;
        boolean urlSafe = false;
        byte[] expected = new byte[]{65, 66, 67}; // Replace with actual expected value
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithChunking_ZYpn1() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        boolean isChunked = true;
        boolean urlSafe = false;
        byte[] expected = new byte[]{65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76}; // Replace with actual expected value
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64UrlSafe_hsML2() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        boolean isChunked = false;
        boolean urlSafe = true;
        byte[] expected = new byte[]{65, 66, 67}; // Replace with actual expected value
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_1_kihF0() throws Exception {
        byte[] binaryData = new byte[]{};
        boolean isChunked = true;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] expected = new byte[]{};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_2_VBWr1() throws Exception {
        byte[] binaryData = new byte[]{};
        boolean isChunked = false;
        boolean urlSafe = false;
        int maxResultSize = 100;
        byte[] expected = new byte[]{};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_3_Qdhu2() throws Exception {
        byte[] binaryData = new byte[]{};
        boolean isChunked = true;
        boolean urlSafe = false;
        int maxResultSize = 100;
        byte[] expected = new byte[]{};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_4_TIcC3() throws Exception {
        byte[] binaryData = new byte[]{};
        boolean isChunked = false;
        boolean urlSafe = true;
        int maxResultSize = 100;
        byte[] expected = new byte[]{};
        byte[] actual = Base64.encodeBase64(binaryData, isChunked, urlSafe, maxResultSize);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64_SaNo0() throws Exception {
        byte[] base64Data = "SGVsbG8gV29ybGQh".getBytes();
        byte[] expected = "Hello World!".getBytes();
        byte[] actual = Base64.decodeBase64(base64Data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineLength_xIqh1() throws Exception {
        byte[] base64Data = "SGVsbG8g\nV29ybGQh".getBytes();
        byte[] expected = "Hello World!".getBytes();
        Base64 base64 = new Base64(7);
        byte[] actual = base64.decodeBase64(base64Data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithLineSeparator_YKyG2() throws Exception {
        byte[] base64Data = "SGVsbG8g\r\nV29ybGQh".getBytes();
        byte[] expected = "Hello World!".getBytes();
        Base64 base64 = new Base64(0, "\r\n".getBytes());
        byte[] actual = base64.decodeBase64(base64Data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithUrlSafe_rbFO3() throws Exception {
        byte[] base64Data = "SGVsbG8g\r\nV29ybGQh".getBytes();
        byte[] expected = "Hello World!".getBytes();
        Base64 base64 = new Base64(0, "\r\n".getBytes(), true);
        byte[] actual = base64.decodeBase64(base64Data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithDecodingPolicy_lBEC4() throws Exception {
        byte[] base64Data = "SGVsbG8g\r\nV29ybGQh".getBytes();
        byte[] expected = "Hello World!".getBytes();
        Base64 base64 = new Base64(0, "\r\n".getBytes(), true, CodecPolicy.LENIENT);
        byte[] actual = base64.decodeBase64(base64Data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeBase64WithInvalidData_NRyN5() throws Exception {
        byte[] base64Data = "SGVsbG8g\r\nV29ybGQ".getBytes();
        byte[] expected = {};
        Base64 base64 = new Base64(0, "\r\n".getBytes(), true, CodecPolicy.LENIENT);
        byte[] actual = base64.decodeBase64(base64Data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64String_fIwC0() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        String expected = "AQID";
        String actual = Base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64StringWithLineLength_iEcx1() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        Base64 base64 = new Base64(7);
        String expected = "AQID\n";
        String actual = base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64StringWithLineSeparator_bNKi2() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        Base64 base64 = new Base64(7, "\r\n".getBytes());
        String expected = "AQID\r\n";
        String actual = base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64StringWithUrlSafe_geya3() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        Base64 base64 = new Base64(true);
        String expected = "AQID";
        String actual = base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64StringWithLineSeparatorAndUrlSafe_yYwe6() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        Base64 base64 = new Base64(7, "\r\n".getBytes(), true);
        String expected = "AQID\r\n";
        String actual = base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64StringWithLineSeparatorAndDecodingPolicy_ooNH8() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        Base64 base64 = new Base64(7, "\r\n".getBytes(), true, CodecPolicy.LENIENT);
        String expected = "AQID\r\n";
        String actual = base64.encodeBase64String(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafe_asib0() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] expected = "AQID".getBytes();
        byte[] actual = Base64.encodeBase64URLSafe(binaryData);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64_LgbS0() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        byte[] expectedResult = new byte[]{65, 66, 67}; // ASCII values of 'A', 'B', 'C'
        byte[] actualResult = Base64.encodeBase64(binaryData);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithLineLength_HWBJ1() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expectedResult = new byte[]{65, 66, 67, 68, 10, 69, 70, 71, 72, 73, 10, 74, 75, 76, 77, 78, 79, 80, 10, 81, 82, 83}; // ASCII values of 'A' to 'S'
        Base64 base64 = new Base64(5);
        byte[] actualResult = base64.encodeBase64(binaryData);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64WithLineSeparator_AFoy2() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expectedResult = new byte[]{65, 66, 67, 68, 10, 69, 70, 71, 72, 73, 10, 74, 75, 76, 77, 78, 79, 80, 10, 81, 82, 83}; // ASCII values of 'A' to 'S'
        Base64 base64 = new Base64(5, new byte[]{10});
        byte[] actualResult = base64.encodeBase64(binaryData);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes1_XmfT0() throws Exception {
        BigInteger bigInt = new BigInteger("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
        byte[] expected = new byte[]{123, 45, 67, 89, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes2_dccv1() throws Exception {
        BigInteger bigInt = new BigInteger("-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
        byte[] expected = new byte[]{-123, -45, -67, -89, -10, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46, -48, -50, -52, -54, -56, -58, -60, -62, -64, -66, -68, -70, -72, -74, -76, -78, -80, -82, -84, -86, -88, -90, -92, -94, -96, -98, -100, -102, -104, -106, -108, -110, -112, -114, -116, -118, -120, -122, -124, -126};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes3_zptd2() throws Exception {
        BigInteger bigInt = new BigInteger("0");
        byte[] expected = new byte[]{0};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToIntegerBytes4_Pvml3() throws Exception {
        BigInteger bigInt = new BigInteger("1");
        byte[] expected = new byte[]{1};
        byte[] actual = Base64.toIntegerBytes(bigInt);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString_Nsga0() throws Exception {
        byte[] binaryData = new byte[]{1, 2, 3};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString2_GOpY1() throws Exception {
        byte[] binaryData = new byte[]{4, 5, 6};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString3_pbPi2() throws Exception {
        byte[] binaryData = new byte[]{7, 8, 9};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString4_yjIX3() throws Exception {
        byte[] binaryData = new byte[]{10, 11, 12};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString5_ZpIV4() throws Exception {
        byte[] binaryData = new byte[]{13, 14, 15};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString6_zJQe5() throws Exception {
        byte[] binaryData = new byte[]{16, 17, 18};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString7_vPog6() throws Exception {
        byte[] binaryData = new byte[]{19, 20, 21};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString8_xoKy7() throws Exception {
        byte[] binaryData = new byte[]{22, 23, 24};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString9_tANR8() throws Exception {
        byte[] binaryData = new byte[]{25, 26, 27};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString10_bEaf9() throws Exception {
        byte[] binaryData = new byte[]{28, 29, 30};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString11_jGIg10() throws Exception {
        byte[] binaryData = new byte[]{31, 32, 33};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString12_VgUp11() throws Exception {
        byte[] binaryData = new byte[]{34, 35, 36};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeBase64URLSafeString13_tKQB12() throws Exception {
        byte[] binaryData = new byte[]{37, 38, 39};
        String expected = "AQID";
        String actual = Base64.encodeBase64URLSafeString(binaryData);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64_mLiU0() throws Exception {
        byte[] arrayOctet = new byte[10];
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput_oZMe1() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = -1;
        assertTrue(!Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput3_HnMk3() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 127;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput4_QfpY4() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 65;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput5_uGFc5() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 97;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput6_zsMb6() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 43;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput7_swPZ7() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 47;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput8_QXKV8() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 61;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput9_qlHv9() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 32;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput10_mPOV10() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 9;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput11_mYvm11() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 10;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput12_buCR12() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 13;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsArrayByteBase64WithInvalidInput13_sQMf13() throws Exception {
        byte[] arrayOctet = new byte[10];
        arrayOctet[0] = 0;
        assertTrue(Base64.isArrayByteBase64(arrayOctet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_StrictPolicy_JrMF0() throws Exception {
        byte[] arrayOctet = {65, 66, 67, 68};
        boolean result = Base64.isBase64(arrayOctet);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidInput_aDqy4() throws Exception {
        byte[] arrayOctet = {65, 66, 67, -1};
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidInput3_aRta6() throws Exception {
        byte[] arrayOctet = {65, 66, 67, 64};
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidInput4_IrCW7() throws Exception {
        byte[] arrayOctet = {65, 66, 67, 33};
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidInput5_tfxS8() throws Exception {
        byte[] arrayOctet = {65, 66, 67, 36};
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidInput6_AeEl9() throws Exception {
        byte[] arrayOctet = {65, 66, 67, 43};
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidInput7_Gxhn10() throws Exception {
        byte[] arrayOctet = {65, 66, 67, 47};
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidInput8_kzBt11() throws Exception {
        byte[] arrayOctet = {65, 66, 67, 58};
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidInput9_eLrK12() throws Exception {
        byte[] arrayOctet = {65, 66, 67, 61};
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidInput10_qOOG13() throws Exception {
        byte[] arrayOctet = {65, 66, 67, 90};
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBase64_InvalidInput11_HGcn14() throws Exception {
        byte[] arrayOctet = {65, 66, 67, 91};
        boolean result = Base64.isBase64(arrayOctet);
        assertFalse(result);
    }
}