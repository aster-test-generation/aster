/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DaitchMokotoffSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_rGau0() throws Exception {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String input = "Hello";
        String expectedOutput = "H412";
        String actualOutput = (String) dms.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithStringAndFolding_FxDD1() throws Exception {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex(true);
        String input = "Hello";
        String expectedOutput = "H412";
        String actualOutput = (String) dms.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSource_wRfE0() throws Exception {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String encoded = dms.encode(null);
        assertEquals(null, encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonNullSource_xcZj1() throws Exception {
        DaitchMokotoffSoundex dms = new DaitchMokotoffSoundex();
        String source = "Hello";
        String expected = "H412";
        String encoded = dms.encode(source);
        assertEquals(expected, encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_Zkmq0() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("Hello");
        assertEquals("H412", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithFolding_Iuxv1() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex(true);
        String result = soundex.soundex("Hello");
        assertEquals("H412", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithNullSource_PZXj2() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithEmptySource_HctR3() throws Exception {
        DaitchMokotoffSoundex soundex = new DaitchMokotoffSoundex();
        String result = soundex.soundex("");
        assertEquals(null, result);
    }
}