/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_PercentCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullObject_LAdK0() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object encodedObject = percentCodec.encode(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithByteArrayObject_OCnY1() throws org.apache.commons.codec.EncoderException {
        PercentCodec percentCodec = new PercentCodec();
        byte[] inputByteArray = new byte[10];
        Object encodedObject = percentCodec.encode(inputByteArray);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullObject_rwpC0() throws org.apache.commons.codec.DecoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object result = percentCodec.decode(null);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNonByteArrayObject_crbH2() throws org.apache.commons.codec.DecoderException {
        PercentCodec percentCodec = new PercentCodec();
        Object input = new Object();
        try {
            percentCodec.decode(input);
            Assertions.fail("DecoderException expected");
        } catch (DecoderException e) {
        }
    }
}