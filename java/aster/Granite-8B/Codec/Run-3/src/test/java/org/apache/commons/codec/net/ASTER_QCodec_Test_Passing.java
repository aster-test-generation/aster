/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_uzNx0() throws Exception {
        QCodec qCodec = new QCodec();
        String encoding = qCodec.getEncoding();
        assertEquals("Q", encoding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_UqXz0() throws Exception {
        QCodec qCodec = new QCodec("UTF-8");
        String decodedString = qCodec.decode("aGVsbG8gd29ybGQ=");
        assertEquals("hello world", decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncoding_TJLX1() throws Exception {
        QCodec qCodec = new QCodec("invalid-charset");
        try {
            qCodec.decode("aGVsbG8gd29ybGQ=");
            fail("DecoderException expected");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Unsupported encoding"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullString_iBSi2() throws Exception {
        QCodec qCodec = new QCodec("UTF-8");
        String decodedString = qCodec.decode(null);
        assertEquals("", decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyString_tIPL3() throws Exception {
        QCodec qCodec = new QCodec("UTF-8");
        String decodedString = qCodec.decode("");
        assertEquals("", decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_tHGW0() throws EncoderException {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello, World!";
        Charset sourceCharset = Charset.forName("UTF-8");
        String expected = "SGVsbG8sIFdvcmxkIQ==";
        String actual = qCodec.encode(sourceStr, sourceCharset);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeObject_UdDi0() throws EncoderException {
        QCodec qCodec = new QCodec();
        Object obj = new Object();
        Object result = qCodec.encode(obj);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_mTQF1() throws EncoderException {
        QCodec qCodec = new QCodec();
        String str = "Hello, World!";
        Object result = qCodec.encode(str);
        Assertions.assertEquals("Hello, World!", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNull_tCqR2() throws Exception {
        QCodec qCodec = new QCodec();
        Object result = qCodec.encode(null);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_uRSH0() throws Exception {
        QCodec qCodec = new QCodec("UTF-8");
        String input = "Hello, World!";
        String expectedOutput = "Hello, World!";
        String actualOutput = (String) qCodec.decode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_fizt1() throws Exception {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        String input = "Hello, World!";
        String expectedOutput = "Hello, World!";
        String actualOutput = (String) qCodec.decode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNull_uVFu2() throws Exception {
        QCodec qCodec = new QCodec();
        Object input = null;
        Object expectedOutput = null;
        Object actualOutput = qCodec.decode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks_oMcd0() throws Exception {
        QCodec qCodec = new QCodec("UTF-8");
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks2_ubSP1() throws Exception {
        QCodec qCodec = new QCodec();
        boolean result = qCodec.isEncodeBlanks();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeBlanks3_dabb2() throws Exception {
        QCodec qCodec = new QCodec(Charset.forName("UTF-8"));
        boolean result = qCodec.isEncodeBlanks();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_PjKt0() throws EncoderException {
        QCodec qCodec = new QCodec("UTF-8");
        String sourceStr = "Hello, World!";
        String encodedStr = qCodec.encode(sourceStr);
        assertEquals("Hello, World!", encodedStr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullBytes_LCVA0() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] result = qCodec.doEncoding(null);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEmptyBytes_XYaI1() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[0];
        byte[] result = qCodec.doEncoding(bytes);
        Assertions.assertEquals(0, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonEmptyBytes_QLQn2() throws Exception {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] result = qCodec.doEncoding(bytes);
        Assertions.assertEquals(3, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEncodeBlanksTrue_jRjB3_1() throws Exception {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(true);
        byte[] bytes = new byte[]{32};
        byte[] result = qCodec.doEncoding(bytes);
        Assertions.assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithEncodeBlanksFalse_Olrq4_1() throws Exception {
        QCodec qCodec = new QCodec();
        qCodec.setEncodeBlanks(false);
        byte[] bytes = new byte[]{32};
        byte[] result = qCodec.doEncoding(bytes);
        Assertions.assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytes_xqAl0() throws DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{65, 66, 67};
        byte[] result = qCodec.doDecoding(bytes);
        assertArrayEquals(new byte[]{65, 66, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesHasUnderscores_Gbvk1() throws DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{65, 95, 66, 95, 67};
        byte[] result = qCodec.doDecoding(bytes);
        assertArrayEquals(new byte[]{65, 32, 66, 32, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesNull_vAWK2() throws DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = null;
        byte[] result = qCodec.doDecoding(bytes);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingBytesWithUnderscores_wJan4() throws DecoderException {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[]{65, 95, 66, 67};
        byte[] result = qCodec.doDecoding(bytes);
        assertArrayEquals(new byte[]{65, 32, 66, 67}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceStrAndCharset_Dtru0() throws Exception {
        QCodec qCodec = new QCodec();
        String sourceStr = null;
        String sourceCharset = null;
        String encodedStr = qCodec.encode(sourceStr, sourceCharset);
        assert encodedStr == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptySourceStrAndCharset_bThM1() throws Exception {
        QCodec qCodec = new QCodec();
        String sourceStr = "";
        String sourceCharset = "";
        String encodedStr = qCodec.encode(sourceStr, sourceCharset);
        assert encodedStr.equals("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonEmptySourceStrAndCharset_Vjvf2() throws Exception {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello World";
        String sourceCharset = "UTF-8";
        String encodedStr = qCodec.encode(sourceStr, sourceCharset);
        assert encodedStr.equals("SGVsbG8gV29ybGQ=");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharset_FASm3() throws Exception {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello World";
        String sourceCharset = "InvalidCharset";
        try {
            qCodec.encode(sourceStr, sourceCharset);
        } catch (EncoderException e) {
            assert e.getMessage().equals("Unsupported charset: InvalidCharset");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullSourceStr_XDXO4() throws Exception {
        QCodec qCodec = new QCodec();
        String sourceStr = null;
        String sourceCharset = "UTF-8";
        String encodedStr = qCodec.encode(sourceStr, sourceCharset);
        assert encodedStr == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptySourceStr_iuah5() throws Exception {
        QCodec qCodec = new QCodec();
        String sourceStr = "";
        String sourceCharset = "UTF-8";
        String encodedStr = qCodec.encode(sourceStr, sourceCharset);
        assert encodedStr.equals("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullCharset_jien7() throws Exception {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello World";
        String sourceCharset = null;
        String encodedStr = qCodec.encode(sourceStr, sourceCharset);
        assert encodedStr == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyCharset_VqvG8() throws Exception {
        QCodec qCodec = new QCodec();
        String sourceStr = "Hello World";
        String sourceCharset = "";
        String encodedStr = qCodec.encode(sourceStr, sourceCharset);
        assert encodedStr.equals("");
    }
}