/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Hex;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_LNRM0() throws Exception {
        String key = "key";
        String valueToDigest = "valueToDigest";
        byte[] expected = new byte[]{/* expected bytes */};
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_TeTd0_1() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacMD5"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_TeTd0_2() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_TeTd0_3() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA224"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_TeTd0_4() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA256"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_TeTd0_5() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA384"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_TeTd0_6() throws Exception {
        assertTrue(HmacUtils.isAvailable("HmacSHA512"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_nTWu0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_qRNt0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = new byte[64]; // Replace with expected result
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithFile_WFBl0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_256", "key".getBytes());
        File file = new File("file.txt");
        String expected = "expected_hex_value";
        String actual = hmacUtils.hmacHex(file);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_alXE0() throws IOException {
        HmacUtils hmacUtils = new HmacUtils("HmacSHA256", "key".getBytes());
        byte[] result = hmacUtils.hmac(new File("input.txt"));
        String expected = "65a8e27d8879283831b664bd8b7f0ad43d5f6a9539639804f5jsb072542a1bad";
        String actual = new String(Hex.encodeHex(result));
        assert expected.equals(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_WjnF0() throws Exception {
        String key = "key";
        String valueToDigest = "valueToDigest";
        byte[] expected = new byte[48]; // Replace with expected result
        byte[] actual = HmacUtils.hmacSha384(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_JXCe0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expectedResult = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, key).hmac(valueToDigest);
        byte[] actualResult = HmacUtils.hmacSha256(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_mVBj0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expectedResult = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, key).hmac(valueToDigest);
        byte[] actualResult = HmacUtils.hmacSha384(key, valueToDigest);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_LdWO0_1() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_MD5));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_LdWO0_2() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_LdWO0_3() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_224));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_LdWO0_4() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_256));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_LdWO0_5() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_384));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailable_LdWO0_6() throws Exception {
        assertTrue(HmacUtils.isAvailable(HmacAlgorithms.HMAC_SHA_512));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_YFUc0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac("value");
        assertEquals("773ea91e36800e46854db8ebd09181a72959098b3ef8c122d96957251903b1", Hex.encodeHexString(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmac_hQlk0() throws Exception {
        Mac mac = null;
        try {
            mac = Mac.getInstance("HmacSHA256");
            mac.init(new SecretKeySpec(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, "HmacSHA256"));
        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            fail("Failed to initialize Mac instance");
        }
        mac = HmacUtils.updateHmac(mac, "Hello, World!");
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateHmacWithNullMac_tpXJ2() throws Exception {
        try {
            HmacUtils.updateHmac(null, "Hello, World!");
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_SrbT0() throws Exception {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "0x56B1E7089F759B7A7655740D7E84C4725A8947A0B6854583BA6A7E438DE742B";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_QUIr0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "60e431591ee0b67f0d8a26aacbf5b77f8e0bc62d888e8576050355a4951327e";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHmacSha512_PkYM0_1() throws Exception {
        byte[] key = "key".getBytes();
        Mac mac = HmacUtils.getHmacSha512(key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHmacSha512_PkYM0_2() throws Exception {
        byte[] key = "key".getBytes();
        Mac mac = HmacUtils.getHmacSha512(key);
        assertEquals("HmacSHA512", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_Azsc0() throws Exception {
        String expected = "8e54038263563029e5871e93a567c60";
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac_yMwN0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertEquals(result.length, 16);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac2_QzDA1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertEquals(result.length, 20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac3_BFey2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertEquals(result.length, 28);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac4_yuJB3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertEquals(result.length, 32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac5_lbdI4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertEquals(result.length, 48);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac6_PtEf5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] result = hmacUtils.hmac("value".getBytes());
        assertEquals(result.length, 64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac7_GqNj6() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals(result.length, 16);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac8_Pfdo7() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals(result.length, 20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac9_pAoq8() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals(result.length, 28);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac10_eHgF9() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals(result.length, 32);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac11_XlEG10() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals(result.length, 48);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmac12_gnHZ11() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        byte[] result = hmacUtils.hmac(ByteBuffer.wrap("value".getBytes()));
        assertEquals(result.length, 64);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_sOPa0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = new byte[]{-101, 104, 119, -109, 111, 100, 105, 110, 103, 32, 116, 104, 101, 32, 100, 97, 116, 97, 46};
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256Hex_GvYb0() throws Exception {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "expected";
        String actual = HmacUtils.hmacSha256Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_ckJx0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("HMAC_MD5", "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("6085586244c262222f62408e9d64809", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex2_pCAE1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_1, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("fbdb1d1b18aa6c08324b7d64b71fb76370690e1d", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex3_xacv2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_224, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("7509e5bda0c762d2bac7f90d758b5b2263fa01ccbc542ab5e3df163be08e6ca", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex4_KHpb3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex5_ZRSD4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_384, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("afd03944d84895626b0825f4ab46907f15f9dadbe4101e6c013b42223a9538291f12313e415046d75d1d5396091c1d13", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex6_nuhk5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_512, "key".getBytes());
        String result = hmacUtils.hmacHex("valueToDigest".getBytes());
        assertEquals("87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cab8a26283d17bb7842752b05392a081e3ae17781257c21189bb62aba0ae1479e", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacUtilsWithHmacAlgorithmsAndString_XjIV0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        byte[] result = hmacUtils.hmac("valueToDigest");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacUtilsWithHmacAlgorithmsAndByteArray_lhsF1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, new byte[]{});
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacUtilsWithStringAndString_JIQF2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("algorithm", "key");
        byte[] result = hmacUtils.hmac("valueToDigest");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacUtilsWithStringAndByteArray_RyBc3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("algorithm", new byte[]{});
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacUtilsWithHmacAlgorithmsAndString_eRZn4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacUtilsWithHmacAlgorithmsAndByteArray_OaKI5() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, new byte[]{});
        byte[] result = hmacUtils.hmac("valueToDigest");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacUtilsWithStringAndString_WkkA6() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("algorithm", "key");
        byte[] result = hmacUtils.hmac("valueToDigest".getBytes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacUtilsWithStringAndByteArray_wBGJ7() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("algorithm", new byte[]{});
        byte[] result = hmacUtils.hmac("valueToDigest");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_ykAt0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "96108049693837021905383702190538370219";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithNullKey_MDCS1() throws Exception {
        byte[] key = null;
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "96108049693837021905383702190538370219";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithEmptyKey_WDjD2() throws Exception {
        byte[] key = "".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "96108049693837021905383702190538370219";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithNullValueToDigest_MbPx3() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = null;
        String expected = "96108049693837021905383702190538370219";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithEmptyValueToDigest_yTLw4() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "".getBytes();
        String expected = "96108049693837021905383702190538370219";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512_vbMR0() throws Exception {
        String key = "This is a secret key";
        String valueToDigest = "Hello, World!";
        byte[] expected = {(byte) 0x87, (byte) 0x9e, (byte) 0x46, (byte) 0x95, (byte) 0x78, (byte) 0xa5, (byte) 0x93, (byte) 0x9e, (byte) 0x71, (byte) 0x35, (byte) 0x92, (byte) 0x76, (byte) 0x8e, (byte) 0x37, (byte) 0x94, (byte) 0x47, (byte) 0x69, (byte) 0x35, (byte) 0x25, (byte) 0xb2, (byte) 0x73, (byte) 0x3a, (byte) 0x02, (byte) 0xa2, (byte) 0xe1, (byte) 0xaf, (byte) 0xf7, (byte) 0x50, (byte) 0x01, (byte) 0x57};
        byte[] actual = HmacUtils.hmacSha512(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1_DCyq0() throws IOException {
        byte[] key = "key".getBytes();
        InputStream valueToDigest = null; // Replace with actual input stream
        byte[] expected = new byte[0]; // Replace with expected result
        byte[] actual = HmacUtils.hmacSha1(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5_udfy0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        byte[] expected = new byte[]{-92, 112, 108, 111, 116, 108, 101, 116, 101, 114};
        byte[] actual = HmacUtils.hmacMd5(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_HBel0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "571319d019138525251639477997542051627705271165235860929325084";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5Hex_cVJQ0() throws Exception {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "7165955b7615053c61907a60c7a4f8a";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5HexWithNullKey_UkLM1() throws Exception {
        String key = null;
        String valueToDigest = "valueToDigest";
        String expected = "7165955b7615053c61907a60c7a4f8a";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5HexWithEmptyKey_MnTW2() throws Exception {
        String key = "";
        String valueToDigest = "valueToDigest";
        String expected = "7165955b7615053c61907a60c7a4f8a";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5HexWithNullString_jZXu3() throws Exception {
        String key = "key";
        String valueToDigest = null;
        String expected = "7165955b7615053c61907a60c7a4f8a";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacMd5HexWithEmptyString_Zbud4() throws Exception {
        String key = "key";
        String valueToDigest = "";
        String expected = "7165955b7615053c61907a60c7a4f8a";
        String actual = HmacUtils.hmacMd5Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha256_EdqP0() throws Exception {
        String key = "my_secret_key";
        String valueToDigest = "Hello, World!";
        byte[] expectedResult = {(byte) 0x36, (byte) 0x23, (byte) 0x97, (byte) 0x76, (byte) 0x93, (byte) 0xd9, (byte) 0x6a, (byte) 0x5c, (byte) 0x8f, (byte) 0xe9, (byte) 0x36, (byte) 0x4e, (byte) 0x44, (byte) 0x3c, (byte) 0x29, (byte) 0x27, (byte) 0x4c, (byte) 0xf7, (byte) 0x51, (byte) 0x9e, (byte) 0xd7, (byte) 0x23, (byte) 0x8f, (byte) 0x16, (byte) 0x4c, (byte) 0x56, (byte) 0x95, (byte) 0x18, (byte) 0x28, (byte) 0x61};
        byte[] actualResult = HmacUtils.hmacSha256(key, valueToDigest);
        assertArrayEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex_hPIH0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_256", "key".getBytes());
        String result = hmacUtils.hmacHex("value");
        assertEquals("5d41402abc4b2a76b9719d911017c592", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex2_YWeD1() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key".getBytes());
        String result = hmacUtils.hmacHex("value");
        assertEquals("5d41402abc4b2a76b9719d911017c592", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex3_oMBI2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("HMAC_SHA_256", "key");
        String result = hmacUtils.hmacHex("value");
        assertEquals("5d41402abc4b2a76b9719d911017c592", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHex4_gSbE3() throws Exception {
        HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, "key");
        String result = hmacUtils.hmacHex("value");
        assertEquals("5d41402abc4b2a76b9719d911017c592", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1Hex_AtEk0() throws Exception {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "d5a87b095408a62d6fb7d78561be14b29ac646d";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithNullKey_YEXs1() throws Exception {
        String key = null;
        String valueToDigest = "valueToDigest";
        String expected = "360280f657e59b4b08209176909580206e1c6a9";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithEmptyKey_QIrS2() throws Exception {
        String key = "";
        String valueToDigest = "valueToDigest";
        String expected = "360280f657e59b4b08209176909580206e1c6a9";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithNullText_MLKg3() throws Exception {
        String key = "key";
        String valueToDigest = null;
        String expected = "0b007341aa75438b6ae00e46e16122d9c6e9142";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithEmptyText_QYIA4() throws Exception {
        String key = "key";
        String valueToDigest = "";
        String expected = "b613679a0814d9ec772f95d778c35fc5ff1697c";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithNullKeyAndText_Grcq5() throws Exception {
        String key = null;
        String valueToDigest = null;
        String expected = "fbdb1d1b18aa6c08324b7d64b71fb76370690e1";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha1HexWithEmptyKeyAndText_Pdvx6() throws Exception {
        String key = "";
        String valueToDigest = "";
        String expected = "fbdb1d1b18aa6c08324b7d64b71fb76370690e1";
        String actual = HmacUtils.hmacSha1Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac_MAgN0_1() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        byte[] key = "key".getBytes();
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac_MAgN0_2() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        byte[] key = "key".getBytes();
        Mac mac = HmacUtils.getInitializedMac(algorithm, key);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac2_dmQA1_1() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        String key = "key";
        Mac mac = HmacUtils.getInitializedMac(algorithm, key.getBytes());
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac2_dmQA1_2() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        String key = "key";
        Mac mac = HmacUtils.getInitializedMac(algorithm, key.getBytes());
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac3_vSrc2_1() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        Mac mac = HmacUtils.getInitializedMac(algorithm, null);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac3_vSrc2_2() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        Mac mac = HmacUtils.getInitializedMac(algorithm, null);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac4_LVoY3_1() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        Mac mac = HmacUtils.getInitializedMac(algorithm.getName(), "key".getBytes());
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac4_LVoY3_2() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        Mac mac = HmacUtils.getInitializedMac(algorithm.getName(), "key".getBytes());
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac6_QdPB5_1() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        Mac mac = HmacUtils.getInitializedMac(algorithm.getName(), null);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac6_QdPB5_2() throws Exception {
        HmacAlgorithms algorithm = HmacAlgorithms.HMAC_SHA_256;
        Mac mac = HmacUtils.getInitializedMac(algorithm.getName(), null);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac7_xZLO6_1() throws Exception {
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", "key".getBytes());
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac7_xZLO6_2() throws Exception {
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", "key".getBytes());
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac9_tDxp8_1() throws Exception {
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", null);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac9_tDxp8_2() throws Exception {
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", null);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac10_RgLh9_1() throws Exception {
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", new byte[0]);
        assertNotNull(mac);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInitializedMac10_RgLh9_2() throws Exception {
        Mac mac = HmacUtils.getInitializedMac("HmacSHA256", new byte[0]);
        assertEquals("HmacSHA256", mac.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_qGwO0() throws Exception {
        String key = "key";
        String valueToDigest = "valueToDigest";
        String expected = "6156641d62983997985735828219837";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithNullKey_aPfG1() throws Exception {
        String key = null;
        String valueToDigest = "valueToDigest";
        String expected = "6156641d62983997985735828219837";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithEmptyKey_cCvB2() throws Exception {
        String key = "";
        String valueToDigest = "valueToDigest";
        String expected = "6156641d62983997985735828219837";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithNullInput_agjo3() throws Exception {
        String key = "key";
        String valueToDigest = null;
        String expected = "6156641d62983997985735828219837";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithEmptyInput_tTYO4() throws Exception {
        String key = "key";
        String valueToDigest = "";
        String expected = "6156641d62983997985735828219837";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithNullKeyAndInput_oRma5() throws Exception {
        String key = null;
        String valueToDigest = null;
        String expected = "6156641d62983997985735828219837";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512HexWithEmptyKeyAndInput_hfsS6() throws Exception {
        String key = "";
        String valueToDigest = "";
        String expected = "6156641d62983997985735828219837";
        String actual = HmacUtils.hmacSha512Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_qTNL0() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "0x5318121150602500D7E671F6F34C2896D93774891B011E580A701994753730";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384HexWithNullKey_QEPr1() throws Exception {
        byte[] key = null;
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "0x5318121150602500D7E671F6F34C2896D93774891B011E580A701994753730";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384HexWithEmptyKey_khuS2() throws Exception {
        byte[] key = "".getBytes();
        byte[] valueToDigest = "valueToDigest".getBytes();
        String expected = "0x5318121150602500D7E671F6F34C2896D93774891B011E580A701994753730";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384HexWithNullMessage_juso3() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = null;
        String expected = "0x5318121150602500D7E671F6F34C2896D93774891B011E580A701994753730";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384HexWithEmptyMessage_cxga4() throws Exception {
        byte[] key = "key".getBytes();
        byte[] valueToDigest = "".getBytes();
        String expected = "0x5318121150602500D7E671F6F34C2896D93774891B011E580A701994753730";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384HexWithNullKeyAndMessage_FJBp5() throws Exception {
        byte[] key = null;
        byte[] valueToDigest = null;
        String expected = "0x5318121150602500D7E671F6F34C2896D93774891B011E580A701994753730";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384HexWithEmptyKeyAndMessage_VKZF6() throws Exception {
        byte[] key = "".getBytes();
        byte[] valueToDigest = "".getBytes();
        String expected = "0x5318121150602500D7E671F6F34C2896D93774891B011E580A701994753730";
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithByteBufferValueToDigest_UYIH0() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("HmacSHA256", "key".getBytes());
        ByteBuffer valueToDigest = ByteBuffer.wrap("value".getBytes());
        String expected = "94ee02950528018348700782813774a0f3a9111288869688328678922507438";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithByteArrayValueToDigest_Hkag2() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("HmacSHA256", "key".getBytes());
        byte[] valueToDigest = "value".getBytes();
        String expected = "94ee02950528018348700782813774a0f3a9111288869688328678922507438";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacHexWithStringAndKey_eFNC4() throws Exception {
        HmacUtils hmacUtils = new HmacUtils("HmacSHA256", "key");
        String valueToDigest = "value";
        String expected = "94ee02950528018348700782813774a0f3a9111288869688328678922507438";
        String actual = hmacUtils.hmacHex(valueToDigest);
        assertEquals(expected, actual);
    }
}