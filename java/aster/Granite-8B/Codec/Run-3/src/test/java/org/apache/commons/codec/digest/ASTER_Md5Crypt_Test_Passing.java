/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.security.SecureRandom;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Md5Crypt_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_RqZs0() throws Exception {
        byte[] keyBytes = new byte[16];
        String expected = "$apr1$0000000$00000000000000000000000000000000000000";
        String actual = Md5Crypt.apr1Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_uwXA0() throws Exception {
        String keyBytes = "Hello, World!";
        String expected = "$1$d9fkebab$u9Cfn9dNchlnM16.oQ601";
        String actual = Md5Crypt.apr1Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_XIUw0() throws Exception {
        byte[] keyBytes = new byte[16];
        String salt = "salt";
        String expected = "md5CryptResult";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_VIdx0() throws Exception {
        byte[] keyBytes = new byte[16];
        String expected = "000000000000000";
        String actual = Md5Crypt.md5Crypt(keyBytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_ktdZ0() throws Exception {
        byte[] keyBytes = new byte[16];
        String salt = "randomSalt";
        String prefix = "prefix";
        SecureRandom random = new SecureRandom();
        random.nextBytes(keyBytes);
        String expected = "f50595802485433492";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_hUhI0() throws Exception {
        byte[] keyBytes = new byte[16];
        new Random().nextBytes(keyBytes);
        String expected = "0000000000000000000000000000000";
        String actual = Md5Crypt.md5Crypt(keyBytes, new SecureRandom());
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApr1Crypt_HAdC0() throws Exception {
        byte[] keyBytes = new byte[16];
        Random random = new Random();
        String expected = Md5Crypt.apr1Crypt(keyBytes, random);
        String actual = Md5Crypt.apr1Crypt(keyBytes, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_apr1Crypt_1_LLrH0() throws Exception {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = "salt";
        String expected = "md5Crypt";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_apr1Crypt_2_FZSp1() throws Exception {
        byte[] keyBytes = new byte[]{4, 5, 6};
        String salt = "salt2";
        String expected = "md5Crypt2";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_apr1Crypt_3_UkTu2() throws Exception {
        byte[] keyBytes = new byte[]{7, 8, 9};
        String salt = "salt3";
        String expected = "md5Crypt3";
        String actual = Md5Crypt.apr1Crypt(keyBytes, salt);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt_AREr0() throws Exception {
        byte[] keyBytes = new byte[]{1, 2, 3};
        String salt = "randomSalt";
        String prefix = "$1$";
        Random random = new Random();
        String expected = "$1$randomSalt$56512c6708466318425216441635123";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt2_WaJL1() throws Exception {
        byte[] keyBytes = new byte[]{4, 5, 6};
        String salt = "randomSalt2";
        String prefix = "$1$";
        Random random = new Random();
        String expected = "$1$randomSalt2$084663184252164416351234567890";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt3_VpSh2() throws Exception {
        byte[] keyBytes = new byte[]{7, 8, 9};
        String salt = "randomSalt3";
        String prefix = "$1$";
        Random random = new Random();
        String expected = "$1$randomSalt3$56512c6708466318425216441635123";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt4_DimZ3() throws Exception {
        byte[] keyBytes = new byte[]{10, 11, 12};
        String salt = "randomSalt4";
        String prefix = "$1$";
        Random random = new Random();
        String expected = "$1$randomSalt4$084663184252164416351234567890";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt5_kixt4() throws Exception {
        byte[] keyBytes = new byte[]{13, 14, 15};
        String salt = "randomSalt5";
        String prefix = "$1$";
        Random random = new Random();
        String expected = "$1$randomSalt5$56512c6708466318425216441635123";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt6_Jbel5() throws Exception {
        byte[] keyBytes = new byte[]{16, 17, 18};
        String salt = "randomSalt6";
        String prefix = "$1$";
        Random random = new Random();
        String expected = "$1$randomSalt6$084663184252164416351234567890";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMd5Crypt7_XGNN6() throws Exception {
        byte[] keyBytes = new byte[]{19, 20, 21};
        String salt = "randomSalt7";
        String prefix = "$1$";
        Random random = new Random();
        String expected = "$1$randomSalt7$56512c6708466318425216441635123";
        String actual = Md5Crypt.md5Crypt(keyBytes, salt, prefix, random);
        assertEquals(expected, actual);
    }
}