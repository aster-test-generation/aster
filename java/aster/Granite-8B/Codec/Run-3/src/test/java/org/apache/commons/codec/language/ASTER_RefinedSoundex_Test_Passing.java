/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RefinedSoundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_QEHb0() throws EncoderException {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String s1 = "string1";
        String s2 = "string2";
        int expected = 0; // Replace with the expected result
        int actual = refinedSoundex.difference(s1, s2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_BaYL0() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String input = "Hello";
        String expectedOutput = "H412";
        String actualOutput = refinedSoundex.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithObject_yOFO1() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        Object input = "World";
        try {
            String actualOutput = (String) refinedSoundex.encode(input);
            fail("Expected EncoderException, but got " + actualOutput);
        } catch (EncoderException e) {
            assertEquals("Parameter supplied to RefinedSoundex encode is not of type java.lang.String", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeChar_ebso0() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char c = 'a';
        char result = refinedSoundex.getMappingCode(c);
        assertEquals('a', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeChar2_LvoZ1() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char c = 'A';
        char result = refinedSoundex.getMappingCode(c);
        assertEquals('a', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeChar3_Wzpk2() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char c = '0';
        char result = refinedSoundex.getMappingCode(c);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMappingCodeChar4_QpEn3() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex("mapping");
        char c = ' ';
        char result = refinedSoundex.getMappingCode(c);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_JCDP0() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "RefinedSoundex";
        String expected = "R152";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNull_mmYQ1() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = null;
        String expected = null;
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmpty_srvQ2() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "";
        String expected = "";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSingleCharacter_rJEm3() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "A";
        String expected = "A000";
        String actual = refinedSoundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_HzLS0() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "RefinedSoundex";
        String expected = "R163";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithNull_Qgbf1() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = null;
        String expected = null;
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithEmpty_tggV2() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex();
        String str = "";
        String expected = "";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithCleanedStringAndMapping_GwnY4() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex("0123456789");
        String str = "RefinedSoundex";
        String expected = "R163";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundexWithCleanedStringAndMappingArray_yZHg5() throws Exception {
        RefinedSoundex refinedSoundex = new RefinedSoundex(new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'});
        String str = "RefinedSoundex";
        String expected = "R163";
        String actual = refinedSoundex.soundex(str);
        assertEquals(expected, actual);
    }
}