/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_OutputArrayIsTooSmall_TFzy0() throws org.apache.commons.codec.DecoderException {
        byte[] out = new byte[1];
        int outOffset = 0;
        char[] data = new char[2];
        try {
            Hex.decodeHex(data, out, outOffset);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertEquals("Output array is not large enough to accommodate decoded data.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_OHnO0() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        hex.decode("Hello World");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_cmjz1() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        hex.decode(new byte[]{0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteBuffer_Rsdk2() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        hex.decode(ByteBuffer.wrap(new byte[]{0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x57, 0x6F, 0x72, 0x6C, 0x64}));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithObject_JXPh4() throws org.apache.commons.codec.DecoderException {
        Hex hex = new Hex();
        hex.decode(new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexToString_DRjI8() throws org.apache.commons.codec.EncoderException {
        byte[] inputByteArray = new byte[10];
        String expectedString = "0000000000";
        String actualString = Hex.encodeHexString(inputByteArray);
        assertEquals(expectedString, actualString);
    }

    @Test
    public void testDecodeHex_OutputArrayIsJustRightSize_ARPA1_ZTsf0_1() throws org.apache.commons.codec.DecoderException {
        byte[] out = new byte[2];
        int outOffset = 0;
        char[] data = new char[2];
        int result = Hex.decodeHex(data, out, outOffset);
        assertEquals(1, result);
    }

    @Test
    public void testDecodeHex_OutputArrayIsJustRightSize_ARPA1_ZTsf0_2() throws org.apache.commons.codec.DecoderException {
        byte[] out = new byte[2];
        int outOffset = 0;
        char[] data = new char[2];
        int result = Hex.decodeHex(data, out, outOffset);
        assertArrayEquals(new byte[]{0, 0}, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_AWif10_bHPA0() throws org.apache.commons.codec.DecoderException {
        String inputString = "0000000000";
        byte[] expectedByteArray = new byte[10];
        byte[] actualByteArray = Hex.decodeHex(inputString);
        assertArrayEquals(expectedByteArray, actualByteArray);
    }
}