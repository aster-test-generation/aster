/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_StringUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf8_GRlS0() throws Exception {
        byte[] bytes = new byte[]{65, 66, 67};
        String expected = "ABC";
        String actual = StringUtils.newStringUtf8(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16_lelD0() throws Exception {
        String string = "Hello, World!";
        byte[] expected = string.getBytes(StandardCharsets.UTF_16);
        byte[] actual = StringUtils.getBytesUtf16(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Le_gEuk0() throws Exception {
        String string = "Hello, world!";
        byte[] expected = {-2, -1, 0, 72, 0, 101, 0, 108, 0, 108, 0, 111, 0, 44, 0, 32, 0, 119, 0, 111, 0, 114, 0, 108, 0, 100, 0, 33};
        byte[] actual = StringUtils.getBytesUtf16Le(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesIso8859_1_kOSG0() throws Exception {
        String input = "Hello, World!";
        byte[] expected = "Hello, World!".getBytes(StandardCharsets.ISO_8859_1);
        byte[] actual = StringUtils.getBytesIso8859_1(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringIso8859_1_fgtL0() throws Exception {
        byte[] bytes = {65, 66, 67}; // Replace with actual byte array
        String expected = "ABC"; // Replace with expected result
        String actual = StringUtils.newStringIso8859_1(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Be_SxxL0() throws Exception {
        byte[] bytes = {65, 0, 66, 0};
        String expected = "AB";
        String actual = StringUtils.newStringUtf16Be(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithNullBytes_vgVc0() throws Exception {
        byte[] bytes = null;
        String charsetName = "UTF-8";
        String expected = null;
        String actual = StringUtils.newString(bytes, charsetName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringWithNonNullBytes_hITx1() throws Exception {
        byte[] bytes = new byte[]{97, 98, 99};
        String charsetName = "UTF-8";
        String expected = "abc";
        String actual = StringUtils.newString(bytes, charsetName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_NullString_fKRc0() throws Exception {
        String string = null;
        String charsetName = "UTF-8";
        byte[] expected = null;
        byte[] actual = StringUtils.getBytesUnchecked(string, charsetName);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUnchecked_ValidString_DKOw1() throws Exception {
        String string = "Hello, World!";
        String charsetName = "UTF-8";
        byte[] expected = string.getBytes(charsetName);
        byte[] actual = StringUtils.getBytesUnchecked(string, charsetName);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf16Be_MaUj0() throws Exception {
        String string = "Hello, World!";
        byte[] expected = {(byte) 0, (byte) 255, (byte) 0, (byte) 72, (byte) 0, (byte) 101, (byte) 0, (byte) 108, (byte) 0, (byte) 108, (byte) 0, (byte) 111, (byte) 0, (byte) 44, (byte) 0, (byte) 32, (byte) 0, (byte) 87, (byte) 0, (byte) 111, (byte) 0, (byte) 114, (byte) 0, (byte) 108, (byte) 0, (byte) 100, (byte) 0, (byte) 33};
        byte[] actual = StringUtils.getBytesUtf16Be(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16Le_cAmt0() throws Exception {
        byte[] bytes = new byte[]{0, 1, 2, 3};
        String expected = "\u0000\u0001\u0002\u0003";
        String actual = StringUtils.newStringUtf16Le(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16LeWithEmptyArray_IsIC1() throws Exception {
        byte[] bytes = new byte[0];
        String expected = "";
        String actual = StringUtils.newStringUtf16Le(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16LeWithNullArray_CnaX2() throws Exception {
        byte[] bytes = null;
        String expected = null;
        String actual = StringUtils.newStringUtf16Le(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16LeWithInvalidArray_AzvN3() throws Exception {
        byte[] bytes = new byte[]{-1, -2, -3, -4};
        String expected = null;
        String actual = StringUtils.newStringUtf16Le(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16LeWithInvalidArraySize_wngs4() throws Exception {
        byte[] bytes = new byte[]{0, 1, 2};
        String expected = null;
        String actual = StringUtils.newStringUtf16Le(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_JjBG0() throws Exception {
        String string = "Hello, World!";
        ByteBuffer expected = ByteBuffer.wrap(string.getBytes(StandardCharsets.UTF_8));
        ByteBuffer actual = StringUtils.getByteBufferUtf8(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_NullString_lwSR1() throws Exception {
        String string = null;
        ByteBuffer expected = null;
        ByteBuffer actual = StringUtils.getByteBufferUtf8(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteBufferUtf8_EmptyString_bDuP2() throws Exception {
        String string = "";
        ByteBuffer expected = ByteBuffer.wrap("".getBytes(StandardCharsets.UTF_8));
        ByteBuffer actual = StringUtils.getByteBufferUtf8(string);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUsAscii_IUwR0() throws Exception {
        String input = "Hello, World!";
        byte[] expected = "Hello, World!".getBytes(StandardCharsets.US_ASCII);
        byte[] actual = StringUtils.getBytesUsAscii(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesUtf8_nVpP0() throws Exception {
        String string = "Hello, World!";
        byte[] expected = "Hello, World!".getBytes(StandardCharsets.UTF_8);
        byte[] actual = StringUtils.getBytesUtf8(string);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUtf16_FtiP0() throws Exception {
        byte[] bytes = {0, 1, 2, 3};
        String expected = "\u0000\u0001\u0002\u0003";
        String actual = StringUtils.newStringUtf16(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewStringUsAscii_ZFqo0() throws Exception {
        byte[] bytes = new byte[]{65, 66, 67};
        String expected = "ABC";
        String actual = StringUtils.newStringUsAscii(bytes);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals1_TGBS0() throws Exception {
        final CharSequence cs1 = null;
        final CharSequence cs2 = null;
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals2_gHtR1() throws Exception {
        final CharSequence cs1 = "abc";
        final CharSequence cs2 = "abc";
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals3_PClN2() throws Exception {
        final CharSequence cs1 = "abc";
        final CharSequence cs2 = null;
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals4_KzYp3() throws Exception {
        final CharSequence cs1 = null;
        final CharSequence cs2 = "abc";
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals5_qvaD4() throws Exception {
        final CharSequence cs1 = "abc";
        final CharSequence cs2 = new StringBuilder("abc");
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals6_KmEm5() throws Exception {
        final CharSequence cs1 = new StringBuilder("abc");
        final CharSequence cs2 = "abc";
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals7_tVOF6() throws Exception {
        final CharSequence cs1 = new StringBuilder("abc");
        final CharSequence cs2 = new StringBuilder("abc");
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals8_bpOr7() throws Exception {
        final CharSequence cs1 = new StringBuilder("abcd");
        final CharSequence cs2 = new StringBuilder("abc");
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals9_umcz8() throws Exception {
        final CharSequence cs1 = new StringBuilder("abc");
        final CharSequence cs2 = new StringBuilder("abcd");
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals10_vvVJ9() throws Exception {
        final CharSequence cs1 = new StringBuilder("abcd");
        final CharSequence cs2 = new StringBuilder("abcd");
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals11_pnGo10() throws Exception {
        final CharSequence cs1 = "abcd";
        final CharSequence cs2 = new StringBuilder("abcd");
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals12_LzEo11() throws Exception {
        final CharSequence cs1 = new StringBuilder("abcd");
        final CharSequence cs2 = "abcd";
        boolean result = StringUtils.equals(cs1, cs2);
        Assertions.assertTrue(result);
    }
}