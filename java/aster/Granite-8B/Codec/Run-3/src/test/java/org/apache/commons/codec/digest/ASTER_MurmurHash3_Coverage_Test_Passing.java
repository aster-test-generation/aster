/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128_byKC0() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 0;
        long[] result = MurmurHash3.hash128(data, offset, length, seed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_YCBe0() {
        long hash = MurmurHash3.hash64(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_lxqW1() {
        long hash = MurmurHash3.hash64(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_3_mnBz2() {
        long hash = MurmurHash3.hash64(3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_hvPb0() {
        String data = "";
        int expected = -965378730;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNonNullData_ZdnP1() {
        String data = "Hello, World!";
        int expected = 1890549219;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_vAtf1() {
        long data = Long.MAX_VALUE;
        long hash = MurmurHash3.hash64(data);
        assertEquals(8510850762534098677L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_ILuz2() {
        long data = Long.MIN_VALUE;
        long hash = MurmurHash3.hash64(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_uVCg3() {
        long data = 1L;
        long hash = MurmurHash3.hash64(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_ORCu4() {
        long data = -1L;
        long hash = MurmurHash3.hash64(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_gTHp5() {
        long data = 1234567890123456789L;
        long hash = MurmurHash3.hash64(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_Hwqk6() {
        long data = -1234567890123456789L;
        long hash = MurmurHash3.hash64(data);
        assertEquals(-2928445201604521807L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_wdUK7() {
        long data = 9223372036854775807L;
        long hash = MurmurHash3.hash64(data);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_czNd8() {
        long data = -9223372036854775808L;
        long hash = MurmurHash3.hash64(data);
        assertEquals(5774917990927342291L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64UncoveredLine1_zYAu0() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_Zpqp0_1() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 0);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_2_nUjL1_1() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 1);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_3_XNIZ2_1() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 2147483647);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_6_XQHw5_1() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, -1);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_6_XQHw5_2() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, -1);
        assertEquals(-7687394173771388261L, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_6_XQHw5_3() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, -1);
        assertEquals(2743567553909719539L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_8_QThl7_1() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, -2147483647);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_jxoE1_1() {
        assertEquals(0, MurmurHash3.hash32(new byte[0], 0, 0, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_kKVX3_1() {
        assertEquals(0, MurmurHash3.hash32(new byte[10], 0, 0, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithOffsetLengthSeed_wneZ7() {
        byte[] data = new byte[10];
        int offset = 2;
        int length = 8;
        int seed = 12345;
        int expectedHash = 2074948481; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_fldp10_hLVm0() {
        long data = 9223372036854775807L;
        long hash = MurmurHash3.hash64(data);
        assertEquals(8510850762534098677L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_4_SrHJ3_bghP0_1() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, (int) 2147483648L);
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_7_qDEd6_XpCI0_1() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, (int) -2147483648L);
        assertEquals(2, result.length);
    }
}