/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_StringUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_WtEW0() {
        String string = null;
        String charsetName = "UTF-8";
        byte[] expected = null;
        byte[] actual = StringUtils.getBytesUnchecked(string, charsetName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_TFma1() {
        String string = "Hello, World!";
        String charsetName = "UTF-16";
        byte[] expected = string.getBytes(Charset.forName(charsetName));
        byte[] actual = StringUtils.getBytesUnchecked(string, charsetName);
        assertNotEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_CRAF0() {
        CharSequence cs1 = "hello";
        CharSequence cs2 = "hello";
        boolean expected = true;
        boolean actual = StringUtils.equals(cs1, cs2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentStrings_ZdvA2() {
        CharSequence cs1 = "hello";
        CharSequence cs2 = "world";
        boolean expected = false;
        boolean actual = StringUtils.equals(cs1, cs2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullStrings_tzoe3() {
        CharSequence cs1 = null;
        CharSequence cs2 = null;
        boolean expected = true;
        boolean actual = StringUtils.equals(cs1, cs2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithOneNullString_fNYr4() {
        CharSequence cs1 = "hello";
        CharSequence cs2 = null;
        boolean expected = false;
        boolean actual = StringUtils.equals(cs1, cs2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentLengths_FRdK5() {
        CharSequence cs1 = "hello";
        CharSequence cs2 = "hello world";
        boolean expected = false;
        boolean actual = StringUtils.equals(cs1, cs2);
        assertEquals(expected, actual);
    }
}