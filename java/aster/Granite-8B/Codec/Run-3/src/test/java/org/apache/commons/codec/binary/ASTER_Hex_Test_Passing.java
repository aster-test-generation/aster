/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Hex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_PicK0() throws Exception {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        char[] expected = "00010203040506070809".toCharArray();
        assertArrayEquals(expected, Hex.encodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_LEcc0() throws Exception {
        Hex hex = new Hex("UTF-8");
        ByteBuffer array = ByteBuffer.allocate(10);
        array.put("Hello, World!".getBytes());
        array.flip();
        byte[] expected = "48656C6C6F2C20576F726C6421".getBytes();
        byte[] actual = hex.encode(array);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_YQfU0() throws Exception {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        char[] toDigits = "0123456789ABCDEF".toCharArray();
        char[] expected = "000102030405060708090A0B0C0D0E0F".toCharArray();
        char[] actual = Hex.encodeHex(data, toDigits);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexStringByteBufferBoolean_gJhc0() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        boolean toLowerCase = true; // or false
        String expected = "expected encoded hex string"; // replace with expected result
        String actual = Hex.encodeHexString(data, toLowerCase);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_cijM0_1() throws Exception {
        assertEquals(0, Hex.toDigit('0', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigit_cijM0_2() throws Exception {
        assertEquals(15, Hex.toDigit('F', 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDigitInvalidChar_xyAU1() throws Exception {
        try {
            Hex.toDigit('G', 0);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Illegal hexadecimal character G"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_Efxz0() throws Exception {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        char[] expected = new char[]{'0', '0', '0', '1', '0', '2', '0', '3', '0', '4', '0', '5', '0', '6', '0', '7', '0', '8', '0', '9'};
        char[] actual = Hex.encodeHex(data, true);
        assertEquals(String.valueOf(expected), String.valueOf(actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_GNxV0() throws Exception {
        byte[] data = new byte[]{1, 2, 3};
        char[] expected = {'1', '0', '2', '0', '3', '0'};
        assertArrayEquals(expected, Hex.encodeHex(data));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithToLowercase_TJOH2() throws Exception {
        byte[] data = new byte[]{1, 2, 3};
        char[] expected = {'1', '0', '2', '0', '3', '0'};
        assertArrayEquals(expected, Hex.encodeHex(data, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithOffsetAndLengthAndToLowercase_gFxJ3() throws Exception {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        char[] expected = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
        assertArrayEquals(expected, Hex.encodeHex(data, 1, 9, false));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_Fxzz0() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        char[] result = Hex.encodeHex(data, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_ahaS0() throws Exception {
        byte[] data = new byte[]{1, 2, 3};
        char[] expected = {'1', '0', '2', '0', '3', '0'};
        char[] actual = Hex.encodeHex(data, 0, 3, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithOffsetAndLength_CPgf1() throws Exception {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        char[] expected = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
        char[] actual = Hex.encodeHex(data, 1, 9, false);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithEmptyData_BmPv2() throws Exception {
        byte[] data = new byte[0];
        char[] expected = new char[0];
        char[] actual = Hex.encodeHex(data, 0, 0, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexWithNullData_WGXR3() throws Exception {
        byte[] data = null;
        char[] expected = new char[0];
        char[] actual = Hex.encodeHex(data, 0, 0, true);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_qHLW0() throws Exception {
        char[] data = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] expected = {0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF};
        byte[] actual = Hex.decodeHex(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName_sIsp0_1() throws Exception {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        hex = new Hex("UTF-16");
        hex = new Hex();
        assertEquals("UTF-8", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName_sIsp0_2() throws Exception {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        hex = new Hex("UTF-16");
        hex = new Hex();
        assertEquals("UTF-16", hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCharsetName_sIsp0_3() throws Exception {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        hex = new Hex("UTF-16");
        hex = new Hex();
        assertNotNull(hex.getCharsetName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_jfrF0() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        data.put("Hello, World!".getBytes());
        data.flip();
        String expected = "48656c6c6f2c20576f726c6421";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_nlqL0() throws Exception {
        Hex hex = new Hex("UTF-8");
        ByteBuffer buffer = ByteBuffer.allocate(10);
        buffer.put("48656C6C6F20576F726C64".getBytes());
        buffer.flip();
        byte[] expected = "Hello World".getBytes();
        byte[] actual = hex.decode(buffer);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_UIvP0() throws Exception {
        Hex hex = new Hex("UTF-8");
        assertEquals("Hex[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithCharset_ETXX1() throws Exception {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals("Hex[charsetName=UTF-8]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoArguments_UwRS2() throws Exception {
        Hex hex = new Hex();
        assertEquals("Hex[charsetName=null]", hex.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_Hcqe0() throws Exception {
        byte[] data = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        boolean toLowerCase = true;
        String expected = "000102030405060708090a0b0c0d0e0f";
        String actual = Hex.encodeHexString(data, toLowerCase);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHex_mxjo0() throws Exception {
        byte[] data = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        char[] out = new char[32];
        Hex.encodeHex(data, 0, data.length, true, out, 0);
        assertEquals("00112233445566778899aabbccddeeff", new String(out));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCharset_charset_wshp0() throws Exception {
        Hex hex = new Hex(Charset.forName("UTF-8"));
        assertEquals(Charset.forName("UTF-8"), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCharset_charsetName_oEtr1() throws Exception {
        Hex hex = new Hex("UTF-8");
        assertEquals(Charset.forName("UTF-8"), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCharset_default_NNsb2() throws Exception {
        Hex hex = new Hex();
        assertEquals(Charset.defaultCharset(), hex.getCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_FNqv0() throws DecoderException {
        Hex hex = new Hex("UTF-8");
        byte[] expected = {0x00, 0x01, 0x02};
        byte[] actual = hex.decode("000102".getBytes());
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex_keiC0() throws Exception {
        String data = "0123456789ABCDEF";
        byte[] expected = {0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, (byte) 0x0A, (byte) 0x0B, (byte) 0x0C, (byte) 0x0D, (byte) 0x0E, (byte) 0x0F};
        byte[] actual = Hex.decodeHex(data);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_bewl0() throws Exception {
        Hex hex = new Hex("UTF-8");
        byte[] input = {0x48, 0x65, 0x6C, 0x6C, 0x6F};
        byte[] expectedOutput = {0x48, 0x65, 0x6C, 0x6C, 0x6F};
        byte[] actualOutput = hex.encode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullInput_yTHI1() throws Exception {
        Hex hex = new Hex("UTF-8");
        byte[] input = null;
        byte[] expectedOutput = null;
        byte[] actualOutput = hex.encode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyInput_NRdy2() throws Exception {
        Hex hex = new Hex("UTF-8");
        byte[] input = new byte[0];
        byte[] expectedOutput = new byte[0];
        byte[] actualOutput = hex.encode(input);
        assertArrayEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharset_rxmC3() throws Exception {
        Hex hex = new Hex("InvalidCharset");
        byte[] input = {0x48, 0x65, 0x6C, 0x6C, 0x6F};
        byte[] expectedOutput = null;
        byte[] actualOutput = hex.encode(input);
        assertNotEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteBufferCharArray_KGeq0_1() throws Exception {
        ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        char[] toDigits = new char[16];
        char[] expected = new char[20];
        byteBuffer.put((byte) 0x0F);
        char[] actual = Hex.encodeHex(byteBuffer, toDigits);
        byteBuffer.clear();
        byteBuffer.put((byte) 0xFF);
        actual = Hex.encodeHex(byteBuffer, toDigits);
        assertEquals("0F", new String(actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteBufferCharArray_KGeq0_2() throws Exception {
        ByteBuffer byteBuffer = ByteBuffer.allocate(10);
        char[] toDigits = new char[16];
        char[] expected = new char[20];
        byteBuffer.put((byte) 0x0F);
        char[] actual = Hex.encodeHex(byteBuffer, toDigits);
        byteBuffer.clear();
        byteBuffer.put((byte) 0xFF);
        actual = Hex.encodeHex(byteBuffer, toDigits);
        assertEquals("FF", new String(actual));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_TznC0() throws DecoderException {
        Hex hex = new Hex();
        String input = "48656C6C6F20576F726C64";
        String expected = "Hello World";
        String actual = (String) hex.decode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeByteArray_stlV1() throws DecoderException {
        Hex hex = new Hex();
        byte[] input = "48656C6C6F20576F726C64".getBytes();
        byte[] expected = "Hello World".getBytes();
        byte[] actual = (byte[]) hex.decode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeCharArray_QJeu3() throws DecoderException {
        Hex hex = new Hex();
        char[] input = "48656C6C6F20576F726C64".toCharArray();
        char[] expected = "Hello World".toCharArray();
        char[] actual = (char[]) hex.decode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_FEae0() throws Exception {
        byte[] data = {0x01, 0x02, 0x03};
        String expected = "010203";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_empty_rXgx1() throws Exception {
        byte[] data = {};
        String expected = "";
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexString_null_uJSh2() throws Exception {
        byte[] data = null;
        String expected = null;
        String actual = Hex.encodeHexString(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex1_BqBF0() throws Exception {
        char[] data = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(8, result);
            assertArrayEquals(new byte[]{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7}, out);
        } catch (DecoderException e) {
            fail("Unexpected DecoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex2_iesI1() throws Exception {
        char[] data = {'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(8, result);
            assertArrayEquals(new byte[]{0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1}, out);
        } catch (DecoderException e) {
            fail("Unexpected DecoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex3_cJTM2() throws Exception {
        char[] data = {'a', 'b', 'c', 'd', 'e', 'f', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(8, result);
            assertArrayEquals(new byte[]{0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1}, out);
        } catch (DecoderException e) {
            fail("Unexpected DecoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex4_MWNW3() throws Exception {
        char[] data = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '0'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(8, result);
            assertArrayEquals(new byte[]{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7}, out);
        } catch (DecoderException e) {
            fail("Unexpected DecoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeHex5_GkuY4() throws Exception {
        char[] data = {'A', 'B', 'C', 'D', 'E', 'F', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A'};
        byte[] out = new byte[8];
        int outOffset = 0;
        try {
            int result = Hex.decodeHex(data, out, outOffset);
            assertEquals(8, result);
            assertArrayEquals(new byte[]{0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x0, 0x1}, out);
        } catch (DecoderException e) {
            fail("Unexpected DecoderException");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteBuffer_vsIK0_1() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        char[] result = Hex.encodeHex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteBuffer_vsIK0_2() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        char[] result = Hex.encodeHex(data);
        assertEquals(20, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteBufferBoolean_VbOy1_1() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        char[] result = Hex.encodeHex(data, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteBufferBoolean_VbOy1_2() throws Exception {
        ByteBuffer data = ByteBuffer.allocate(10);
        char[] result = Hex.encodeHex(data, false);
        assertEquals(20, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteArray_jlCB2_1() throws Exception {
        byte[] data = new byte[10];
        char[] result = Hex.encodeHex(data);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteArray_jlCB2_2() throws Exception {
        byte[] data = new byte[10];
        char[] result = Hex.encodeHex(data);
        assertEquals(20, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteArrayBoolean_feVT3_1() throws Exception {
        byte[] data = new byte[10];
        char[] result = Hex.encodeHex(data, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeHexByteArrayBoolean_feVT3_2() throws Exception {
        byte[] data = new byte[10];
        char[] result = Hex.encodeHex(data, false);
        assertEquals(20, result.length);
    }
}