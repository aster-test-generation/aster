/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BaseNCodecInputStream_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithLargeLength_XqsY2() throws java.io.IOException {
        BaseNCodecInputStream in = new BaseNCodecInputStream(null, null, false);
        assertEquals(0, in.skip(Long.MAX_VALUE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithSmallLength_feNa3() throws java.io.IOException {
        BaseNCodecInputStream in = new BaseNCodecInputStream(null, null, false);
        assertEquals(1, in.skip(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithMultipleSmallLengths_NkOm4() throws java.io.IOException {
        BaseNCodecInputStream in = new BaseNCodecInputStream(null, null, false);
        assertEquals(3, in.skip(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithMultipleLargeLengths_ekga5() throws java.io.IOException {
        BaseNCodecInputStream in = new BaseNCodecInputStream(null, null, false);
        assertEquals(Long.MAX_VALUE, in.skip(Long.MAX_VALUE));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithMultipleSmallAndLargeLengths_DXRV6() throws java.io.IOException {
        BaseNCodecInputStream in = new BaseNCodecInputStream(null, null, false);
        assertEquals(4, in.skip(4));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithOffsetGreaterThanArrayLength_fSLm3() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        try {
            baseNCodecInputStream.read(new byte[1], 1, 0);
            fail("Expected IndexOutOfBoundsException to be thrown");
        } catch (IndexOutOfBoundsException expected) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithValidArguments_zoMs6() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(0, baseNCodecInputStream.read(new byte[1], 0, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithValidArgumentsAndMultipleReadsAndMultipleWritesAndFinalRead_sMTU9_4() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(-1, baseNCodecInputStream.read(new byte[1], 0, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithValidArgumentsAndMultipleReads_kpEd7() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(0, baseNCodecInputStream.read(new byte[1], 0, 1));
        assertEquals(0, baseNCodecInputStream.read(new byte[1], 0, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithValidArgumentsAndMultipleReadsAndMultipleWrites_wjjn8() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(0, baseNCodecInputStream.read(new byte[1], 0, 1));
        assertEquals(0, baseNCodecInputStream.read(new byte[1], 0, 1));
        assertEquals(0, baseNCodecInputStream.read(new byte[1], 0, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithValidArgumentsAndMultipleReadsAndMultipleWritesAndFinalRead_sMTU9() throws java.io.IOException {
        BaseNCodecInputStream baseNCodecInputStream = new BaseNCodecInputStream(null, null, false);
        assertEquals(0, baseNCodecInputStream.read(new byte[1], 0, 1));
        assertEquals(0, baseNCodecInputStream.read(new byte[1], 0, 1));
        assertEquals(0, baseNCodecInputStream.read(new byte[1], 0, 1));
        assertEquals(-1, baseNCodecInputStream.read(new byte[1], 0, 1));
    }
}