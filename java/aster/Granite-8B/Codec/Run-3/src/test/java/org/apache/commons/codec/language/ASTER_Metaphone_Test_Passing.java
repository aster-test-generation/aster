/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Metaphone_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMetaphoneEqual_JLmD0() throws Exception {
        Metaphone metaphone = new Metaphone();
        String str1 = "Hello";
        String str2 = "Hillo";
        boolean expected = true;
        boolean actual = metaphone.isMetaphoneEqual(str1, str2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxCodeLen_gLgs0() throws Exception {
        Metaphone metaphone = new Metaphone();
        int expected = 0; // Replace with the expected value
        int actual = metaphone.getMaxCodeLen();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxCodeLen_QRAH0() throws Exception {
        Metaphone metaphone = new Metaphone();
        metaphone.setMaxCodeLen(10);
        assertEquals(10, metaphone.getMaxCodeLen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_RBnY0() throws Exception {
        Metaphone metaphone = new Metaphone();
        String input = "Hello";
        String expectedOutput = "HL";
        String actualOutput = metaphone.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonStringObject_qbPB1() throws Exception {
        Metaphone metaphone = new Metaphone();
        Integer input = 123;
        try {
            metaphone.encode(input);
            fail("Expected EncoderException to be thrown");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("Parameter supplied to Metaphone encode is not of type java.lang.String"));
        }
    }
}