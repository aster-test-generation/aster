/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset_paoM0() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals("UTF-8", urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultCharset2_jaXJ1() throws Exception {
        URLCodec urlCodec = new URLCodec();
        assertEquals("UTF-8", urlCodec.getDefaultCharset());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getEncoding_KNTa0() throws Exception {
        URLCodec urlCodec = new URLCodec("UTF-8");
        assertEquals("UTF-8", urlCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getEncoding_defaultCharset_UFbw1() throws Exception {
        URLCodec urlCodec = new URLCodec();
        assertEquals(null, urlCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidString_ZgoW1() throws Exception {
        URLCodec codec = new URLCodec();
        String inputString = "Hello%20World";
        String expectedString = "Hello World";
        String decodedString = codec.decode(inputString);
        assertEquals(expectedString, decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode1_iDjz0() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello World";
        String charsetName = "UTF-8";
        String expected = "Hello World";
        String actual = urlCodec.decode(str, charsetName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_BzYf1() throws DecoderException, UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello%20World";
        String charsetName = "UTF-8";
        String expected = "Hello World";
        String actual = urlCodec.decode(str, charsetName);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_juST0() throws DecoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        byte[] bytes = new byte[]{0x25, 0x32, 0x30};
        byte[] expected = new byte[]{0x20};
        byte[] actual = urlCodec.decode(bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_ROgT0() throws Exception {
        URLCodec urlCodec = new URLCodec();
        byte[] bytes = new byte[]{1, 2, 3};
        byte[] encodedBytes = urlCodec.encode(bytes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithValidString_RDOu1() throws Exception {
        URLCodec codec = new URLCodec();
        String inputString = "Hello, World!";
        String expectedOutput = "Hello, World!";
        String encodedString = codec.encode(inputString);
        assertEquals(expectedOutput, encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByte_epMh1() throws Exception {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[]{1, 2, 3};
        Object encoded = urlCodec.encode(input);
        assertArrayEquals(new byte[]{1, 2, 3}, (byte[]) encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_GWFd2() throws Exception {
        URLCodec urlCodec = new URLCodec();
        String input = "Hello, World!";
        Object encoded = urlCodec.encode(input);
        assertEquals("Hello, World!", encoded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithNull_oMqW0() throws Exception {
        byte[] input = null;
        byte[] expected = null;
        byte[] actual = URLCodec.decodeUrl(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithEmptyArray_fTSH1() throws Exception {
        byte[] input = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = URLCodec.decodeUrl(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithPlusSign_NBOa2() throws Exception {
        byte[] input = "a+b".getBytes();
        byte[] expected = "ab".getBytes();
        byte[] actual = URLCodec.decodeUrl(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithEscapeChar_tsEO3() throws Exception {
        byte[] input = "a%20b".getBytes();
        byte[] expected = "a b".getBytes();
        byte[] actual = URLCodec.decodeUrl(input);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrlWithInvalidEscapeChar_CiIs4() throws Exception {
        byte[] input = "a%2z".getBytes();
        try {
            URLCodec.decodeUrl(input);
        } catch (DecoderException e) {
            return;
        }
        assert(false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithByteArray_FBek1() throws Exception {
        URLCodec codec = new URLCodec();
        byte[] input = "Hello World".getBytes();
        Object result = codec.decode(input);
        assertEquals("Hello World", new String((byte[]) result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_GmWj2() throws Exception {
        URLCodec codec = new URLCodec();
        String input = "Hello%20World";
        Object result = codec.decode(input);
        assertEquals("Hello World", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedObject_wPFQ3() throws Exception {
        URLCodec codec = new URLCodec();
        Object input = new Object();
        try {
            codec.decode(input);
        } catch (DecoderException e) {
            assertEquals("Objects of type " + input.getClass().getName() + " cannot be URL decoded", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullString_rfnQ0() throws Exception {
        URLCodec urlCodec = new URLCodec();
        String encodedString = urlCodec.encode(null, "UTF-8");
        assertEquals(null, encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_SIyw1() throws Exception {
        URLCodec urlCodec = new URLCodec();
        String encodedString = urlCodec.encode("", "UTF-8");
        assertEquals("", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNonEmptyString_UGsk2() throws Exception {
        URLCodec urlCodec = new URLCodec();
        String originalString = "Hello, World!";
        String encodedString = urlCodec.encode(originalString, "UTF-8");
        assertEquals("Hello, World!", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidCharset_JyKH3() throws Exception {
        URLCodec urlCodec = new URLCodec();
        String originalString = "Hello, World!";
        try {
            urlCodec.encode(originalString, "InvalidCharset");
            fail("Expected UnsupportedEncodingException");
        } catch (UnsupportedEncodingException e) {
            assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_NullBytes_xWLX0() throws Exception {
        byte[] bytes = null;
        byte[] expected = null;
        byte[] actual = URLCodec.encodeUrl(null, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_EmptyBytes_kyiv1() throws Exception {
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = URLCodec.encodeUrl(null, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_UrlSafeNullBytes_UrlSafeSet_hCsB4() throws Exception {
        byte[] bytes = null;
        byte[] expected = null;
        byte[] actual = URLCodec.encodeUrl(new BitSet(), bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_UrlSafeEmptyBytes_UrlSafeSet_aJiQ5() throws Exception {
        byte[] bytes = new byte[0];
        byte[] expected = new byte[0];
        byte[] actual = URLCodec.encodeUrl(new BitSet(), bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_UrlSafeBytes_kowR6() throws Exception {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = URLCodec.encodeUrl(null, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrl_UrlSafeBytes_UrlSafeSet_rWLv7() throws Exception {
        byte[] bytes = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        byte[] actual = URLCodec.encodeUrl(new BitSet(), bytes);
        assertArrayEquals(expected, actual);
    }
}