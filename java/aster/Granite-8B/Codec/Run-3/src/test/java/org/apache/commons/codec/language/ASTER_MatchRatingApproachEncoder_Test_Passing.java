/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MatchRatingApproachEncoder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels_DQOn0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John";
        String expected = "hnh";
        String actual = encoder.removeVowels(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveVowels2_FqsC1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Alice";
        String expected = "lcl";
        String actual = encoder.removeVowels(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanName_HjBM0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "John-Doe";
        String expected = "JOHND";
        String actual = encoder.cleanName(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCleanNameWithAccents_hvLs1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String name = "Jos-Prez";
        String expected = "JOSEPEREZ";
        String actual = encoder.cleanName(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants_uWPp0() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String name = "doubleconsonant";
        String expected = "doubleconsonant";
        String actual = matchRatingApproachEncoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants2_xBKW1() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String name = "doubleconsonantdoubleconsonant";
        String expected = "doubleconsonantdoubleconsonant";
        String actual = matchRatingApproachEncoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveDoubleConsonants3_yMqv2() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String name = "doubleconsonantdoubleconsonantdoubleconsonant";
        String expected = "doubleconsonantdoubleconsonantdoubleconsonant";
        String actual = matchRatingApproachEncoder.removeDoubleConsonants(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVowel_tnrR0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result1 = encoder.isVowel("E");
        boolean result2 = encoder.isVowel("A");
        boolean result3 = encoder.isVowel("O");
        boolean result4 = encoder.isVowel("I");
        boolean result5 = encoder.isVowel("U");
        boolean result6 = encoder.isVowel("e");
        assert result1 == true;
        assert result2 == true;
        assert result3 == true;
        assert result4 == true;
        assert result5 == true;
        assert result6 == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFirst3Last3_VfsB0() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String name = "JohnDoe";
        String expected = "JohDoe";
        String actual = matchRatingApproachEncoder.getFirst3Last3(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFirst3Last3_withLongName_xClz1() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String name = "JohnDoe1234567890";
        String expected = "JohDoe123";
        String actual = matchRatingApproachEncoder.getFirst3Last3(name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_RKJW0() throws EncoderException {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String input = "Hello";
        String expectedOutput = "Hll";
        String actualOutput = encoder.encode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithInvalidInput_LTSE1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        Object input = 123;
        try {
            encoder.encode(input);
            fail("Expected EncoderException to be thrown");
        } catch (EncoderException e) {
            assertTrue(e.getMessage().contains("Parameter supplied to Match Rating Approach encoder is not of type java.lang.String"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents_sjKK0() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String accentedWord = "Thtre";
        String expected = "Theatre";
        String actual = matchRatingApproachEncoder.removeAccents(accentedWord);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents2_HqlT1() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String accentedWord = "Mxico";
        String expected = "Mexico";
        String actual = matchRatingApproachEncoder.removeAccents(accentedWord);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAccents3_HyPp2() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        String accentedWord = "La";
        String expected = " lea";
        String actual = matchRatingApproachEncoder.removeAccents(accentedWord);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_1_MpXJ0() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        int sumLength = 0;
        int minRating = matchRatingApproachEncoder.getMinRating(sumLength);
        assertEquals(5, minRating);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_2_bJBh1() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        int sumLength = 5;
        int minRating = matchRatingApproachEncoder.getMinRating(sumLength);
        assertEquals(5, minRating);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_3_ursJ2() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        int sumLength = 8;
        int minRating = matchRatingApproachEncoder.getMinRating(sumLength);
        assertEquals(4, minRating);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_4_bbgA3() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        int sumLength = 12;
        int minRating = matchRatingApproachEncoder.getMinRating(sumLength);
        assertEquals(2, minRating);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinRating_5_eEuI4() throws Exception {
        MatchRatingApproachEncoder matchRatingApproachEncoder = new MatchRatingApproachEncoder();
        int sumLength = 13;
        int minRating = matchRatingApproachEncoder.getMinRating(sumLength);
        assertEquals(1, minRating);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeOneLetter_UYAv3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.encode("A");
        assertEquals("A", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeCleanName_nfwH4() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.encode("John Smith");
        assertEquals("JhnSmth", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeRemoveVowels_VWwa5() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        String result = encoder.encode("John Smith");
        assertEquals("JhSmth", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsWithNullName1_PhgI0() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals(null, "name2");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsWithEmptyName1_gqCj1() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("", "name2");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsWithNullName2_aDoL3() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("name1", null);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsWithEmptyName2_Duip4() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("name1", "");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsWithOneLetterName1_FvGo6() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("a", "name2");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsWithOneLetterName2_XfhO7() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("name1", "a");
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsWithSameName_eCEF8() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("name1", "name1");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsWithSimilarNames_FpPw9() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("name1", "name2");
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEncodeEqualsWithDifferentNames_GVAt10() throws Exception {
        MatchRatingApproachEncoder encoder = new MatchRatingApproachEncoder();
        boolean result = encoder.isEncodeEquals("name1", "name3");
        assertFalse(result);
    }
}