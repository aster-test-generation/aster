/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.BitSet;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyString_ytZz1() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String decodedString = urlCodec.decode("");
        assert decodedString == "";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithNegativeByte_ctYS0() {
        BitSet urlsafe = new BitSet(256);
        byte[] bytes = new byte[]{-1};
        byte[] expected = new byte[]{(byte) 255};
        byte[] actual = URLCodec.encodeUrl(urlsafe, bytes);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUrlWithPositiveByte_oLky1() {
        BitSet urlsafe = new BitSet(256);
        byte[] bytes = new byte[]{127};
        byte[] expected = new byte[]{127};
        byte[] actual = URLCodec.encodeUrl(urlsafe, bytes);
        assertArrayEquals(expected, actual);
    }
}