/**
 * Generated by Aster
 */
package org.apache.commons.codec.binary;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Base32_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator_eLZU0() throws Exception {
        Base32 base32 = new Base32();
        byte[] result = base32.getLineSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator1_Owno1() throws Exception {
        Base32 base32 = new Base32(1, new byte[]{});
        byte[] result = base32.getLineSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator2_zvcT2() throws Exception {
        Base32 base32 = new Base32(1, new byte[]{}, true);
        byte[] result = base32.getLineSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator3_jHGb3() throws Exception {
        Base32 base32 = new Base32(1, new byte[]{}, true, (byte) 0, CodecPolicy.STRICT);
        byte[] result = base32.getLineSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator4_iwOA4() throws Exception {
        Base32 base32 = new Base32(true);
        byte[] result = base32.getLineSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator5_CwbG5() throws Exception {
        Base32 base32 = new Base32(1);
        byte[] result = base32.getLineSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator6_IgcN6() throws Exception {
        Base32 base32 = new Base32((byte) 0);
        byte[] result = base32.getLineSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator7_NcLk7() throws Exception {
        Base32 base32 = new Base32(true, (byte) 0);
        byte[] result = base32.getLineSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLineSeparator9_FIWt9() throws Exception {
        Base32 base32 = new Base32(1, new byte[]{}, true, (byte) 0);
        byte[] result = base32.getLineSeparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_iFBi0_1() throws Exception {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_iFBi0_2() throws Exception {
        Base32 base32 = new Base32();
        assertTrue(base32.isInAlphabet((byte) '2'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_iFBi0_3() throws Exception {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabet_iFBi0_4() throws Exception {
        Base32 base32 = new Base32();
        assertFalse(base32.isInAlphabet((byte) '3'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_zUOT1_1() throws Exception {
        Base32 base32 = new Base32(10);
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_zUOT1_2() throws Exception {
        Base32 base32 = new Base32(10);
        assertTrue(base32.isInAlphabet((byte) '2'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_zUOT1_3() throws Exception {
        Base32 base32 = new Base32(10);
        assertFalse(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLength_zUOT1_4() throws Exception {
        Base32 base32 = new Base32(10);
        assertFalse(base32.isInAlphabet((byte) '3'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLengthAndSeparator_jvzS2_1() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLengthAndSeparator_jvzS2_2() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertTrue(base32.isInAlphabet((byte) '2'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLengthAndSeparator_jvzS2_3() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertFalse(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLengthAndSeparator_jvzS2_4() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{'\n'});
        assertFalse(base32.isInAlphabet((byte) '3'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLengthSeparatorAndHex_dkXD3_1() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '0', CodecPolicy.LENIENT);
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLengthSeparatorAndHex_dkXD3_2() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '0', CodecPolicy.LENIENT);
        assertTrue(base32.isInAlphabet((byte) '2'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLengthSeparatorAndHex_dkXD3_3() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '0', CodecPolicy.LENIENT);
        assertTrue(base32.isInAlphabet((byte) '0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLengthSeparatorAndHex_dkXD3_4() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '0', CodecPolicy.LENIENT);
        assertFalse(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithLineLengthSeparatorAndHex_dkXD3_5() throws Exception {
        Base32 base32 = new Base32(10, new byte[]{'\n'}, true, (byte) '0', CodecPolicy.LENIENT);
        assertFalse(base32.isInAlphabet((byte) '3'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_AmEJ4_1() throws Exception {
        Base32 base32 = new Base32(true);
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_AmEJ4_2() throws Exception {
        Base32 base32 = new Base32(true);
        assertTrue(base32.isInAlphabet((byte) '2'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_AmEJ4_3() throws Exception {
        Base32 base32 = new Base32(true);
        assertFalse(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHex_AmEJ4_4() throws Exception {
        Base32 base32 = new Base32(true);
        assertFalse(base32.isInAlphabet((byte) '3'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHexAndPadding_IBHM5_1() throws Exception {
        Base32 base32 = new Base32(true, (byte) '0');
        assertTrue(base32.isInAlphabet((byte) 'A'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHexAndPadding_IBHM5_2() throws Exception {
        Base32 base32 = new Base32(true, (byte) '0');
        assertTrue(base32.isInAlphabet((byte) '2'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHexAndPadding_IBHM5_3() throws Exception {
        Base32 base32 = new Base32(true, (byte) '0');
        assertTrue(base32.isInAlphabet((byte) '0'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHexAndPadding_IBHM5_4() throws Exception {
        Base32 base32 = new Base32(true, (byte) '0');
        assertFalse(base32.isInAlphabet((byte) 'Z'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsInAlphabetWithUseHexAndPadding_IBHM5_5() throws Exception {
        Base32 base32 = new Base32(true, (byte) '0');
        assertFalse(base32.isInAlphabet((byte) '3'));
    }
}