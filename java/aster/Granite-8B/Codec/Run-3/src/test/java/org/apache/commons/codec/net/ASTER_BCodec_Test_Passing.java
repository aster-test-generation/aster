/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.CodecPolicy;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_tnkC0() throws DecoderException, UnsupportedEncodingException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String value = "Hello, World!";
        String expected = "Hello, World!";
        String actual = bCodec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_IFAY0() throws Exception {
        BCodec bCodec = new BCodec("UTF-8");
        assertEquals("B", bCodec.getEncoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingWithStrictPolicy_CvFI0() throws Exception {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        assertTrue(bCodec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStrictDecodingWithLenientPolicy_SVvb1() throws Exception {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        assertFalse(bCodec.isStrictDecoding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNullBytes_qkwk0() throws Exception {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        byte[] result = bCodec.doDecoding(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDecodingWithNonNullBytes_Qwci1() throws Exception {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        byte[] inputBytes = "SGVsbG8gV29ybGQh".getBytes();
        byte[] expectedResult = "Hello World!".getBytes();
        byte[] result = bCodec.doDecoding(inputBytes);
        assertArrayEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_Jjqv0() throws Exception {
        BCodec bCodec = new BCodec("UTF-8");
        Object decodedValue = bCodec.decode("abc");
        assertEquals("abc", decodedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithCharset_JJIi1() throws Exception {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        Object decodedValue = bCodec.decode("abc");
        assertEquals("abc", decodedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_YYkD0() throws EncoderException {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String encodedString = bCodec.encode(strSource);
        assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNullBytes_hKoZ0() throws Exception {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        byte[] result = bCodec.doEncoding(null);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncodingWithNonNullBytes_bnLK1() throws Exception {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        byte[] input = "Hello, World!".getBytes(Charset.forName("UTF-8"));
        byte[] expected = "SGVsbG8sIFdvcmxkIQ==".getBytes(Charset.forName("UTF-8"));
        byte[] result = bCodec.doEncoding(input);
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedType_ccDd2() throws Exception {
        BCodec bCodec = new BCodec("UTF-8");
        Integer input = 123;
        try {
            bCodec.encode(input);
            fail("EncoderException expected");
        } catch (EncoderException e) {
            assertEquals("Objects of type java.lang.Integer cannot be encoded using BCodec", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_blHm0() throws Exception {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.STRICT);
        String strSource = "Hello, World!";
        String encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        assertEquals("Hello, World!", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithLenientPolicy_RWAz1() throws Exception {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"), CodecPolicy.LENIENT);
        String strSource = "Hello, World!";
        String encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        assertEquals("Hello, World!", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_bkeE2() throws Exception {
        BCodec bCodec = new BCodec(Charset.forName("UTF-8"));
        String strSource = "Hello, World!";
        String encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        assertEquals("Hello, World!", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetByName_iACi3() throws Exception {
        BCodec bCodec = new BCodec("UTF-8");
        String strSource = "Hello, World!";
        String encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        assertEquals("Hello, World!", encodedText);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNoArguments_FcWb4() throws Exception {
        BCodec bCodec = new BCodec();
        String strSource = "Hello, World!";
        String encodedText = bCodec.encode(strSource, Charset.forName("UTF-8"));
        assertEquals("Hello, World!", encodedText);
    }
}