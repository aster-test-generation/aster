/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash2_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_2_NAHk1_fid2() {
        byte[] data = new byte[1];
        int length = 1;
        int seed = 0;
        int expected = 16777619;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_3_sJOs2_fid2() {
        byte[] data = new byte[2];
        int length = 2;
        int seed = 0;
        int expected = 33554435;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_4_qTAA3_fid2() {
        byte[] data = new byte[3];
        int length = 3;
        int seed = 0;
        int expected = 50331649;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_5_wSDV4_fid2() {
        byte[] data = new byte[4];
        int length = 4;
        int seed = 0;
        int expected = 67108863;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_6_CVYW5_fid2() {
        byte[] data = new byte[5];
        int length = 5;
        int seed = 0;
        int expected = 83886079;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_7_Fhxy6_fid2() {
        byte[] data = new byte[6];
        int length = 6;
        int seed = 0;
        int expected = 100663295;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_8_KtbA7_fid2() {
        byte[] data = new byte[7];
        int length = 7;
        int seed = 0;
        int expected = 117440511;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_9_emzP8_fid2() {
        byte[] data = new byte[8];
        int length = 8;
        int seed = 0;
        int expected = 134217727;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_10_EMIN9_fid2() {
        byte[] data = new byte[9];
        int length = 9;
        int seed = 0;
        int expected = 150994943;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_11_ZirT10_fid2() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0;
        int expected = 167772159;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_12_kAty11_fid2() {
        byte[] data = new byte[11];
        int length = 11;
        int seed = 0;
        int expected = 184549375;
        int actual = MurmurHash2.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_kBma0() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0;
        long expected = 0;
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_nKSw1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 1;
        long expected = 0;
        long actual = MurmurHash2.hash64(data, length, seed);
        assertEquals(expected, actual);
    }
}