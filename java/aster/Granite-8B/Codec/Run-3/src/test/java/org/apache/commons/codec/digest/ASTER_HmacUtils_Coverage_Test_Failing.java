/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;
import javax.crypto.Mac;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HmacUtils_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacMd5HexTest_szmy0() throws IOException {
        final byte[] key = new byte[0];
        final InputStream valueToDigest = null;
        assertEquals("772e19155c1ff07aa533f3442259e74", HmacUtils.hmacMd5Hex(key, valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha512Hex_eEJz0() throws IOException {
        byte[] key = new byte[0];
        InputStream valueToDigest = null;
        String result = HmacUtils.hmacSha512Hex(key, valueToDigest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAvailableWithAvailableAlgorithm_qqPM0() {
        final String algorithm = "HMAC_MD5";
        final boolean result = HmacUtils.isAvailable(algorithm);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHmacSha384_Ozsd0_2() {
        byte[] key = new byte[10];
        Mac hmacSha384 = HmacUtils.getHmacSha384(key);
        Assertions.assertEquals("HMACSHA384", hmacSha384.getAlgorithm());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384Hex_TugH0_sSvP0() throws IOException {
        byte[] key = "key".getBytes();
        InputStream valueToDigest = null; // initialize valueToDigest
        String expected = "expected_value"; // replace with expected value
        String actual = HmacUtils.hmacSha384Hex(key, valueToDigest);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void hmacMd5HexTest_szmy0_mnFN0() throws IOException {
        final byte[] valueToDigest = null;
        final HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_MD5, "key");
        assertEquals("a94a8fe5ccb19ba61c4c0873d391e987982fbbd3", hmacUtils.hmacHex(valueToDigest));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHmacSha384_SXpk0_paRm0() throws IOException {
        byte[] key = new byte[0];
        InputStream valueToDigest = null;
        byte[] expected = new byte[0];
        byte[] actual = HmacUtils.hmacSha384(key, valueToDigest);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_hmacSha256_1_FAsR0_sKCh0() throws IOException {
        byte[] key = new byte[0];
        byte[] valueToDigest = null;
        byte[] expected = new byte[0];
        byte[] actual = HmacUtils.hmacSha256(key, valueToDigest);
        assertEquals(expected, actual);
    }
}