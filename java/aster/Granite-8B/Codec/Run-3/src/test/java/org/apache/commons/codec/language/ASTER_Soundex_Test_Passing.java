/**
 * Generated by Aster
 */
package org.apache.commons.codec.language;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Soundex_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_aPPj0() throws EncoderException {
        Soundex soundex = new Soundex();
        String input = "Hello";
        String expected = "H416";
        String actual = soundex.encode(input);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_TnmS0() throws Exception {
        Soundex soundex = new Soundex();
        String str = "Hello";
        String expected = soundex.soundex(str);
        String actual = soundex.encode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_YUly0_1() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        int result1 = soundex1.difference("s1", "s2");
        int result2 = soundex2.difference("s1", "s2");
        int result3 = soundex3.difference("s1", "s2");
        int result4 = soundex4.difference("s1", "s2");
        assertEquals(result1, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_YUly0_2() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        int result1 = soundex1.difference("s1", "s2");
        int result2 = soundex2.difference("s1", "s2");
        int result3 = soundex3.difference("s1", "s2");
        int result4 = soundex4.difference("s1", "s2");
        assertEquals(result1, result3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDifference_YUly0_3() throws EncoderException {
        Soundex soundex1 = new Soundex("mapping");
        Soundex soundex2 = new Soundex();
        Soundex soundex3 = new Soundex("mapping", true);
        Soundex soundex4 = new Soundex(new char[]{'m', 'a', 'p', 'p', 'i', 'n', 'g'});
        int result1 = soundex1.difference("s1", "s2");
        int result2 = soundex2.difference("s1", "s2");
        int result3 = soundex3.difference("s1", "s2");
        int result4 = soundex4.difference("s1", "s2");
        assertEquals(result1, result4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLength_Upws0() throws Exception {
        Soundex soundex = new Soundex();
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMapping_YHpm1() throws Exception {
        Soundex soundex = new Soundex("mapping");
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithSpecialCaseHW_tlbD2() throws Exception {
        Soundex soundex = new Soundex("mapping", true);
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithMappingArray_WmrI3() throws Exception {
        Soundex soundex = new Soundex(new char[]{'a', 'b', 'c'});
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithEmptyMapping_WuED5() throws Exception {
        Soundex soundex = new Soundex("");
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxLengthWithInvalidMapping_zJbK6() throws Exception {
        Soundex soundex = new Soundex("!");
        int maxLength = soundex.getMaxLength();
        assertEquals(4, maxLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex_UadK0() throws Exception {
        Soundex soundex = new Soundex();
        String str = "Hello";
        String expected = "H2L2";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex2_PBMr1() throws Exception {
        Soundex soundex = new Soundex();
        String str = "World";
        String expected = "W2R1";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex3_GmeE2() throws Exception {
        Soundex soundex = new Soundex();
        String str = "John";
        String expected = "J1N1";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex4_zOzM3() throws Exception {
        Soundex soundex = new Soundex();
        String str = "Smith";
        String expected = "S1M1";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex5_HjBI4() throws Exception {
        Soundex soundex = new Soundex();
        String str = "Apple";
        String expected = "A1P1";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex6_gwSY5() throws Exception {
        Soundex soundex = new Soundex();
        String str = "Banana";
        String expected = "B2N1";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex7_SuLE6() throws Exception {
        Soundex soundex = new Soundex();
        String str = "Orange";
        String expected = "O1R1";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex8_caaD7() throws Exception {
        Soundex soundex = new Soundex();
        String str = "Grape";
        String expected = "G2R1";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex9_gkQa8() throws Exception {
        Soundex soundex = new Soundex();
        String str = "Mango";
        String expected = "M2N1";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex10_gyva9() throws Exception {
        Soundex soundex = new Soundex();
        String str = "Pineapple";
        String expected = "P2N1";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSoundex11_LDAU10() throws Exception {
        Soundex soundex = new Soundex();
        String str = "Watermelon";
        String expected = "W2R1";
        String actual = soundex.soundex(str);
        assertEquals(expected, actual);
    }
}