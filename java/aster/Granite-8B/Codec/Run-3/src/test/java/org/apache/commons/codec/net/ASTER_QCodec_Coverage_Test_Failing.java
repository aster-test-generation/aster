/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_LcBd0() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        String str = "example";
        String expected = "example";
        String actual = qCodec.decode(str);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_xPaM1_1() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        String input = "Hello, World!";
        Object result = codec.decode(input);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_xPaM1_2() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        String input = "Hello, World!";
        Object result = codec.decode(input);
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeString_xPaM1_3() throws org.apache.commons.codec.DecoderException {
        QCodec codec = new QCodec();
        String input = "Hello, World!";
        Object result = codec.decode(input);
        assertEquals(input, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_gzto1() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        String input = "=?UTF-8?Q?Hello, World!?=";
        Object result = codec.encode(input);
        assertEquals("=?UTF-8?Q?Hello, World!?=", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeNonString_XSWI2() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        Integer input = 42;
        Object result = codec.encode(input);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeUnsupportedType_aQXU3() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        Object input = new Object();
        Object result = codec.encode(input);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_ATnK1_fid1() throws org.apache.commons.codec.DecoderException {
        QCodec qCodec = new QCodec();
        String str = "example";
        try {
            qCodec.decode(str);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Unsupported encoding"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoEncoding_UucP0_fid1() {
        QCodec qCodec = new QCodec();
        byte[] bytes = new byte[10];
        bytes[0] = 32;
        byte[] data = qCodec.doEncoding(bytes);
        assertEquals(data[0], 95);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_gzto1_fid1() throws org.apache.commons.codec.EncoderException {
        QCodec codec = new QCodec();
        String input = "Hello, World!";
        Object result = codec.encode(input);
        assertEquals("Hello, World!", result);
    }
}