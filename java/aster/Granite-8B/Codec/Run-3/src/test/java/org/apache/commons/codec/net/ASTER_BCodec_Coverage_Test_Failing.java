/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.nio.charset.UnsupportedCharsetException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BCodec_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_IYDD0() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "example";
        String expected = "decoded text";
        String actual = bCodec.decode(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithUnsupportedEncodingException_HbKw1() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = "example";
        try {
            bCodec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Unsupported encoding"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithIllegalArgumentException_vRZz2() throws DecoderException {
        BCodec bCodec = new BCodec();
        String value = null;
        try {
            bCodec.decode(value);
            fail("Expected DecoderException");
        } catch (DecoderException e) {
            assertTrue(e.getMessage().contains("Invalid value"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithString_SLnV1() throws org.apache.commons.codec.DecoderException {
        BCodec bCodec = new BCodec();
        String input = "example";
        Object result = bCodec.decode(input);
        assertEquals("decoded value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithSupportedCharset_iAYE0() throws EncoderException {
        BCodec bCodec = new BCodec("UTF-8");
        String encodedString = bCodec.encode("Hello, World!", "UTF-8");
        assertEquals("SGVsbG8sIFdvcmxkIQ==", encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedCharset_wTxU1() throws org.apache.commons.codec.EncoderException {
        BCodec bCodec = new BCodec("InvalidCharset");
        try {
            bCodec.encode("Hello, World!", "InvalidCharset");
            fail("Expected UnsupportedCharsetException");
        } catch (EncoderException e) {
            assertTrue(e.getCause() instanceof UnsupportedCharsetException);
        }
    }
}