/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.security.SecureRandom;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_B64_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSalt_JgIa0_1() throws Exception {
        SecureRandom secureRandom = new SecureRandom();
        String randomSalt = B64.getRandomSalt(10, secureRandom);
        assertNotNull(randomSalt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomSalt_JgIa0_2() throws Exception {
        SecureRandom secureRandom = new SecureRandom();
        String randomSalt = B64.getRandomSalt(10, secureRandom);
        assertEquals(16, randomSalt.length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testB64from24bit_GTOT0() throws Exception {
        StringBuilder buffer = new StringBuilder();
        B64.b64from24bit((byte) 0, (byte) 0, (byte) 0, 4, buffer);
        assertEquals("AAA=", buffer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testB64from24bit2_EFtl1() throws Exception {
        StringBuilder buffer = new StringBuilder();
        B64.b64from24bit((byte) 255, (byte) 255, (byte) 255, 4, buffer);
        assertEquals("/w==", buffer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt_FyqF0() throws Exception {
        Random random = new Random();
        assertEquals(10, B64.getRandomSalt(10, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt2_kcOq1() throws Exception {
        Random random = new Random();
        assertEquals(15, B64.getRandomSalt(15, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt3_jYHo2() throws Exception {
        Random random = new Random();
        assertEquals(20, B64.getRandomSalt(20, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt4_KhHa3() throws Exception {
        Random random = new Random();
        assertEquals(25, B64.getRandomSalt(25, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt5_TfNi4() throws Exception {
        Random random = new Random();
        assertEquals(30, B64.getRandomSalt(30, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt6_PfLz5() throws Exception {
        Random random = new Random();
        assertEquals(35, B64.getRandomSalt(35, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt7_AMgH6() throws Exception {
        Random random = new Random();
        assertEquals(40, B64.getRandomSalt(40, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt8_sYwM7() throws Exception {
        Random random = new Random();
        assertEquals(45, B64.getRandomSalt(45, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt9_zeRK8() throws Exception {
        Random random = new Random();
        assertEquals(50, B64.getRandomSalt(50, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt10_MfYA9() throws Exception {
        Random random = new Random();
        assertEquals(55, B64.getRandomSalt(55, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt11_eIsY10() throws Exception {
        Random random = new Random();
        assertEquals(60, B64.getRandomSalt(60, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt12_wGrC11() throws Exception {
        Random random = new Random();
        assertEquals(65, B64.getRandomSalt(65, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt13_LkuY12() throws Exception {
        Random random = new Random();
        assertEquals(70, B64.getRandomSalt(70, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt14_rAbs13() throws Exception {
        Random random = new Random();
        assertEquals(75, B64.getRandomSalt(75, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt15_iiFK14() throws Exception {
        Random random = new Random();
        assertEquals(80, B64.getRandomSalt(80, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt16_OZXw15() throws Exception {
        Random random = new Random();
        assertEquals(85, B64.getRandomSalt(85, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt17_yxgz16() throws Exception {
        Random random = new Random();
        assertEquals(90, B64.getRandomSalt(90, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt18_QVoX17() throws Exception {
        Random random = new Random();
        assertEquals(95, B64.getRandomSalt(95, random).length());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomSalt19_kyaY18() throws Exception {
        Random random = new Random();
        assertEquals(100, B64.getRandomSalt(100, random).length());
    }
}