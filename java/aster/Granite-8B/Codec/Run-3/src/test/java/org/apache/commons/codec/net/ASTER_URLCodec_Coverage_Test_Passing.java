/**
 * Generated by Aster
 */
package org.apache.commons.codec.net;

import java.io.UnsupportedEncodingException;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_URLCodec_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithNullString_OHwz0() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String decodedString = urlCodec.decode(null, "UTF-8");
        assertEquals(null, decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithEmptyString_rwIx1() throws org.apache.commons.codec.DecoderException, java.io.UnsupportedEncodingException {
        URLCodec urlCodec = new URLCodec();
        String decodedString = urlCodec.decode("", "UTF-8");
        assertEquals("", decodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithValidString_bKyd2() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello World!";
        String decodedString = urlCodec.decode(str);
        assert decodedString.equals(str);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeWithInvalidString_OBad3() throws org.apache.commons.codec.DecoderException {
        URLCodec urlCodec = new URLCodec();
        String str = "Hello%20World!";
        String decodedString = urlCodec.decode(str);
        assert decodedString.equals("Hello World!");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeByte_qZjc1() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        byte[] input = new byte[0];
        Object result = urlCodec.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeString_dtVE2() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        String input = "";
        Object result = urlCodec.encode(input);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeObject_cRiN3() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        Object input = new Object();
        try {
            Object result = urlCodec.encode(input);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharset_pMEG4() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-8");
        Object input = new Object();
        try {
            Object result = urlCodec.encode(input);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetNull_Zdgx5() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec(null);
        Object input = new Object();
        try {
            Object result = urlCodec.encode(input);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithCharsetEmpty_bDyp6() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec("");
        Object input = new Object();
        try {
            Object result = urlCodec.encode(input);
        } catch (EncoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrl_AtIndexBoundary_GGLS0_EnVI0() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[1];
        bytes[0] = (byte) '%';
        try {
            URLCodec.decodeUrl(bytes);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeUrl_AtIndexBoundary2_DXvn1_hfNH0() throws org.apache.commons.codec.DecoderException {
        byte[] bytes = new byte[2];
        bytes[0] = (byte) '%';
        bytes[1] = 'x';
        try {
            URLCodec.decodeUrl(bytes);
        } catch (DecoderException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithString_akBq2_keLM0() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        String inputString = "Hello, World!";
        String encodedString = urlCodec.encode(inputString);
        org.junit.jupiter.api.Assertions.assertNotEquals(inputString, encodedString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithUnsupportedEncoding_aKLD3_nwDc0() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec("UTF-16");
        String inputString = "Hello, World!";
        try {
            urlCodec.encode(inputString);
        } catch (EncoderException e) {
            org.junit.jupiter.api.Assertions.assertEquals("Unsupported encoding: UTF-16", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyString_xwID1_DoBw0() throws org.apache.commons.codec.EncoderException {
        URLCodec urlCodec = new URLCodec();
        String encodedString = urlCodec.encode("");
        org.junit.jupiter.api.Assertions.assertEquals("", encodedString);
    }
}