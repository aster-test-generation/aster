/**
 * Generated by Aster
 */
package org.apache.commons.codec.digest;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MurmurHash3_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xccK0() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 539065883;
        int expected = 539065883; // Replace with expected result
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_jxoE1_2() {
        assertEquals(1073741824, MurmurHash3.hash32(new byte[0], 0, 0, 1869769532));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_jxoE1_3() {
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[0], 0, 0, 1973778767));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_oISf2_1() {
        assertEquals(0, MurmurHash3.hash32(new byte[10], 539065883, 10, 539065883));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_oISf2_2() {
        assertEquals(1073741824, MurmurHash3.hash32(new byte[10], 0, 10, -2013722281));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_oISf2_3() {
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[10], 0, 10, -817722776));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bGCx1_2() {
        assertEquals(16777215, MurmurHash3.hash32(new byte[4], 0, 4, 210601180));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bGCx1_3() {
        assertEquals(-1, MurmurHash3.hash32(new byte[4], 0, 4, 800369651));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bGCx1_4() {
        assertEquals(2147483647, MurmurHash3.hash32(new byte[4], 0, 4, 696049097));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bGCx1_5() {
        assertEquals(-2147483648, MurmurHash3.hash32(new byte[4], 0, 4, 1290895550));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bGCx1_6() {
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[4], 0, 4, -357229588));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2_1() {
        assertEquals(0, MurmurHash3.hash32(new byte[10], 593689054, 4, 593689054));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2_2() {
        assertEquals(16777215, MurmurHash3.hash32(new byte[10], 6, 4, 210601180));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2_3() {
        assertEquals(-1, MurmurHash3.hash32(new byte[10], 2, 4, 800369651));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2_4() {
        assertEquals(2147483647, MurmurHash3.hash32(new byte[10], 4, 4, 696049097));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2_5() {
        assertEquals(-2147483648, MurmurHash3.hash32(new byte[10], 8, 4, -2147483648));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2_6() {
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[10], 0, 4, -357229588));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_EUQU3_2() {
        assertEquals(16777215, MurmurHash3.hash32(new byte[10], 0, 4, 210601180));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_EUQU3_3() {
        assertEquals(-1, MurmurHash3.hash32(new byte[10], 0, 4, 800369651));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_EUQU3_4() {
        assertEquals(2147483647, MurmurHash3.hash32(new byte[10], 0, 4, 696049097));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_EUQU3_5() {
        assertEquals(-2147483648, MurmurHash3.hash32(new byte[10], 0, 4, 1290895550));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_qoef0() {
        byte[] data = new byte[10];
        int offset = 539065883;
        int length = 10;
        int seed = 539065883;
        int expectedHash = 539065883; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithOffset_iAIV1() {
        byte[] data = new byte[10];
        int offset = 2;
        int length = 10;
        int seed = 0;
        int expectedHash = 0; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithLength_hRkl2() {
        byte[] data = new byte[10];
        int offset = 1669671676;
        int length = 8;
        int seed = 1669671676;
        int expectedHash = 1669671676; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithSeed_dobr3() {
        byte[] data = new byte[10];
        int offset = -990502881;
        int length = 10;
        int seed = 12345;
        int expectedHash = -990502881; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNegativeOffset_MHNd4() {
        byte[] data = new byte[10];
        int offset = -2;
        int length = 10;
        int seed = 0;
        int expectedHash = 0; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNegativeLength_HFoX5() {
        byte[] data = new byte[10];
        int offset = -112422903;
        int length = -8;
        int seed = -112422903;
        int expectedHash = -112422903; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNegativeSeed_YbFy6() {
        byte[] data = new byte[10];
        int offset = 846907282;
        int length = 10;
        int seed = -12345;
        int expectedHash = 846907282; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_nBPd0_UbPv0() {
        byte[] data = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
        int offset = 0;
        int length = 16;
        int seed = 0;
        long[] expected = new long[]{550444909374300928L, 550444909374300928L};
        long[] actual = MurmurHash3.hash128x64(data, offset, length, seed);
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_xccK0_fid1() {
        byte[] data = new byte[10];
        int length = 10;
        int seed = 0;
        int expected = 0; // Replace with expected result
        int actual = MurmurHash3.hash32(data, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_YCBe0_fid1() {
        long hash = MurmurHash3.hash64(1);
        assertEquals(hash, 3689348814741910323L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_lxqW1_fid1() {
        long hash = MurmurHash3.hash64(2);
        assertEquals(hash, 1224976729481910323L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_3_mnBz2_fid1() {
        long hash = MurmurHash3.hash64(3);
        assertEquals(hash, 851835238481910323L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithEmptyData_hvPb0_fid1() {
        String data = "";
        int expected = 0;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithNonNullData_ZdnP1_fid1() {
        String data = "Hello, World!";
        int expected = 1734445184;
        int actual = MurmurHash3.hash32(data);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_vAtf1_fid1() {
        long data = Long.MAX_VALUE;
        long hash = MurmurHash3.hash64(data);
        assertEquals(3774873592838992128L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_ILuz2_fid1() {
        long data = Long.MIN_VALUE;
        long hash = MurmurHash3.hash64(data);
        assertEquals(-3774873592838992129L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_uVCg3_fid1() {
        long data = 1L;
        long hash = MurmurHash3.hash64(data);
        assertEquals(-8589934592L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_ORCu4_fid1() {
        long data = -1L;
        long hash = MurmurHash3.hash64(data);
        assertEquals(8589934592L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_gTHp5_fid1() {
        long data = 1234567890123456789L;
        long hash = MurmurHash3.hash64(data);
        assertEquals(-820288450848240145L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_Hwqk6_fid1() {
        long data = -1234567890123456789L;
        long hash = MurmurHash3.hash64(data);
        assertEquals(820288450848240144L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_wdUK7_fid1() {
        long data = 9223372036854775807L;
        long hash = MurmurHash3.hash64(data);
        assertEquals(-1431655766033594209L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_czNd8_fid1() {
        long data = -9223372036854775808L;
        long hash = MurmurHash3.hash64(data);
        assertEquals(1431655766033594208L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_Zpqp0_2() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 0);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_Zpqp0_3() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 0);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_2_nUjL1_2() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 1);
        assertEquals(16777619, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_2_nUjL1_3() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 1);
        assertEquals(362436069, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_3_XNIZ2_2() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 2147483647);
        assertEquals(2147483647L, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_3_XNIZ2_3() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 2147483647);
        assertEquals(2147483647L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_6_XQHw5_2_fid1() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, -1);
        assertEquals(4294967295L, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_6_XQHw5_3_fid1() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, -1);
        assertEquals(4294967295L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_8_QThl7_2() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, -2147483647);
        assertEquals(16777619, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_8_QThl7_3() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, -2147483647);
        assertEquals(362436069, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_1_QQVN0() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 0;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_2_igJG1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 1;
        long expected = 0;
        long actual = MurmurHash3.hash64(data, offset, length, seed);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_jxoE1_2_fid1() {
        assertEquals(1073741824, MurmurHash3.hash32(new byte[0], 0, 0, 1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_jxoE1_3_fid1() {
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[0], 0, 0, -1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_oISf2_1_fid1() {
        assertEquals(0, MurmurHash3.hash32(new byte[10], 0, 10, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_oISf2_2_fid1() {
        assertEquals(1073741824, MurmurHash3.hash32(new byte[10], 0, 10, 1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_oISf2_3_fid1() {
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[10], 0, 10, -1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bGCx1_2_fid1() {
        assertEquals(16777215, MurmurHash3.hash32(new byte[4], 0, 4, 16777215));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bGCx1_3_fid1() {
        assertEquals(-1, MurmurHash3.hash32(new byte[4], 0, 4, -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bGCx1_4_fid1() {
        assertEquals(2147483647, MurmurHash3.hash32(new byte[4], 0, 4, 2147483647));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bGCx1_5_fid1() {
        assertEquals(-2147483648, MurmurHash3.hash32(new byte[4], 0, 4, -2147483648));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bGCx1_6_fid1() {
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[4], 0, 4, -1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2_1_fid1() {
        assertEquals(0, MurmurHash3.hash32(new byte[10], 0, 4, 0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2_2_fid1() {
        assertEquals(16777215, MurmurHash3.hash32(new byte[10], 6, 4, 16777215));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2_3_fid1() {
        assertEquals(-1, MurmurHash3.hash32(new byte[10], 2, 4, -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2_4_fid1() {
        assertEquals(2147483647, MurmurHash3.hash32(new byte[10], 4, 4, 2147483647));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2_6_fid1() {
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[10], 0, 4, -1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_EUQU3_2_fid1() {
        assertEquals(16777215, MurmurHash3.hash32(new byte[10], 0, 4, 16777215));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_EUQU3_3_fid1() {
        assertEquals(-1, MurmurHash3.hash32(new byte[10], 0, 4, -1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_EUQU3_4_fid1() {
        assertEquals(2147483647, MurmurHash3.hash32(new byte[10], 0, 4, 2147483647));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_EUQU3_5_fid1() {
        assertEquals(-2147483648, MurmurHash3.hash32(new byte[10], 0, 4, -2147483648));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86_qoef0_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 0;
        int expectedHash = 0; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithLength_hRkl2_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 8;
        int seed = 0;
        int expectedHash = 0; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithSeed_dobr3_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = 12345;
        int expectedHash = 0; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNegativeLength_HFoX5_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = -8;
        int seed = 0;
        int expectedHash = 0; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNegativeSeed_YbFy6_fid1() {
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        int seed = -12345;
        int expectedHash = 0; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithOffsetLengthSeed_wneZ7_fid1() {
        byte[] data = new byte[10];
        int offset = 2;
        int length = 8;
        int seed = 12345;
        int expectedHash = 0; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_SRIv9_RVpq0_fid1() {
        long data = 9223372036854775807L;
        long hash = MurmurHash3.hash64(data);
        assertEquals(3560142400933477295L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_fldp10_hLVm0_fid1() {
        long data = 9223372036854775807L;
        long hash = MurmurHash3.hash64(data);
        assertEquals(286331153206718840L, hash);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_4_SrHJ3_bghP0_2() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, (int) 2147483648L);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_4_SrHJ3_bghP0_3() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, (int) 2147483648L);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_7_qDEd6_XpCI0_2() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, (int) -2147483648L);
        assertEquals(0, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_7_qDEd6_XpCI0_3() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, (int) -2147483648L);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash64_4_HSKi3() {
        long hash = MurmurHash3.hash64(4);
        assertEquals(hash, 478693747481910323L);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_Zpqp0() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 0);
        assertEquals(2, result.length);
        assertEquals(0, result[0]);
        assertEquals(0, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_2_nUjL1() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 1);
        assertEquals(2, result.length);
        assertEquals(16777619, result[0]);
        assertEquals(362436069, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_3_XNIZ2() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, 2147483647);
        assertEquals(2, result.length);
        assertEquals(2147483647L, result[0]);
        assertEquals(2147483647L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_6_XQHw5() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, -1);
        assertEquals(2, result.length);
        assertEquals(4294967295L, result[0]);
        assertEquals(4294967295L, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash128x64_8_QThl7() {
        long[] result = MurmurHash3.hash128x64(new byte[10], 0, 10, -2147483647);
        assertEquals(2, result.length);
        assertEquals(16777619, result[0]);
        assertEquals(362436069, result[1]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_jxoE1() {
        assertEquals(0, MurmurHash3.hash32(new byte[0], 0, 0, 0));
        assertEquals(1073741824, MurmurHash3.hash32(new byte[0], 0, 0, 1073741824));
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[0], 0, 0, -1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_oISf2() {
        assertEquals(0, MurmurHash3.hash32(new byte[10], 0, 10, 0));
        assertEquals(1073741824, MurmurHash3.hash32(new byte[10], 0, 10, 1073741824));
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[10], 0, 10, -1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_kKVX3() {
        assertEquals(0, MurmurHash3.hash32(new byte[10], 0, 0, 0));
        assertEquals(1073741824, MurmurHash3.hash32(new byte[10], 0, 10, 1073741824));
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[10], 0, 10, -1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32_bGCx1() {
        assertEquals(0, MurmurHash3.hash32(new byte[0], 0, 0, 0));
        assertEquals(16777215, MurmurHash3.hash32(new byte[4], 0, 4, 16777215));
        assertEquals(-1, MurmurHash3.hash32(new byte[4], 0, 4, -1));
        assertEquals(2147483647, MurmurHash3.hash32(new byte[4], 0, 4, 2147483647));
        assertEquals(-2147483648, MurmurHash3.hash32(new byte[4], 0, 4, -2147483648));
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[4], 0, 4, -1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithOffset_ZLbr2() {
        assertEquals(0, MurmurHash3.hash32(new byte[10], 0, 4, 0));
        assertEquals(16777215, MurmurHash3.hash32(new byte[10], 6, 4, 16777215));
        assertEquals(-1, MurmurHash3.hash32(new byte[10], 2, 4, -1));
        assertEquals(2147483647, MurmurHash3.hash32(new byte[10], 4, 4, 2147483647));
        assertEquals(-2147483648, MurmurHash3.hash32(new byte[10], 8, 4, -2147483648));
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[10], 0, 4, -1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32WithLength_EUQU3() {
        assertEquals(0, MurmurHash3.hash32(new byte[10], 0, 0, 0));
        assertEquals(16777215, MurmurHash3.hash32(new byte[10], 0, 4, 16777215));
        assertEquals(-1, MurmurHash3.hash32(new byte[10], 0, 4, -1));
        assertEquals(2147483647, MurmurHash3.hash32(new byte[10], 0, 4, 2147483647));
        assertEquals(-2147483648, MurmurHash3.hash32(new byte[10], 0, 4, -2147483648));
        assertEquals(-1073741824, MurmurHash3.hash32(new byte[10], 0, 4, -1073741824));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHash32x86WithNegativeOffsetLengthSeed_uzNN8() {
        byte[] data = new byte[10];
        int offset = -2;
        int length = -8;
        int seed = -12345;
        int expectedHash = 0; // calculate expected hash value
        int actualHash = MurmurHash3.hash32x86(data, offset, length, seed);
        assertEquals(expectedHash, actualHash);
    }
}