/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2ServletRcv_Test_Failing {
    private static String initTime = null;
    PingServlet2ServletRcv pingServlet2ServletRcv;
    HttpServlet httpServlet;
    HttpServletRequest httpServletRequest;
    HttpServletResponse httpServletResponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        httpServlet = mock(HttpServlet.class);
        pingServlet2ServletRcv = new PingServlet2ServletRcv();
        // Mock the init method of HttpServlet
        doNothing().when(httpServlet).init(any());
        // Call the init method of PingServlet2ServletRcv
        pingServlet2ServletRcv.init(httpServlet);
        // Verify that the initTime variable is set
        verify(httpServlet).init(any());
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        httpServletRequest = mock(HttpServletRequest.class);
        httpServletResponse = mock(HttpServletResponse.class);
        httpServlet = mock(HttpServlet.class);
        pingServlet2ServletRcv = new PingServlet2ServletRcv();
        // Set up expectations
        when(httpServletRequest.getParameter("param")).thenReturn("value");
        // Call the method under test
        pingServlet2ServletRcv.doPost(httpServletRequest, httpServletResponse);
        // Verify that the expected method was called
        verify(httpServletRequest).getParameter("param");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_DGty0() throws ServletException, IOException {
        PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
        verify(request, times(1)).getParameter("input");
        verify(response, times(1)).getWriter();
    }
}