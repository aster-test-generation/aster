/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeScenarioServlet_Test_Failing {
    TradeScenarioServlet tradescenarioservlet;
    HttpServlet httpservlet;
    ServletConfig servletconfig;
    @Mock
    HttpServletResponse httpservletresponse;
    @Mock
    HttpServletRequest httpservletrequest;
    @Mock
    HttpSession httpsession;
    @Mock
    ServletContext servletcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        HttpServlet httpServlet = mock(HttpServlet.class);
        ServletConfig servletConfig = mock(ServletConfig.class);
        TradeScenarioServlet tradeScenarioServlet = new TradeScenarioServlet();
        tradeScenarioServlet.init(servletConfig);
        verify(servletConfig).getInitParameterNames();
        verify(servletConfig).getInitParameter("someParameter");
        verify(httpServlet).init(servletConfig);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_AezM0() {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        String result = servlet.getServletInfo();
        assertEquals("TradeScenarioServlet emulates a population of web users", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskLogin_OuSo0() throws ServletException, IOException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("l");
        when(req.getSession(true)).thenReturn(mock(HttpSession.class));
        when(req.getServletContext()).thenReturn(mock(ServletContext.class));
        servlet.performTask(req, resp);
        verify(resp, times(1)).setContentType("text/html");
        verify(resp, times(1)).getOutputStream();
        verify(resp, times(1)).sendError(500, "trade_client.TradeScenarioServlet.service(...): error creating and writing to PrintStream created from response.getOutputStream()");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPerformTaskLogout_vuRS1() throws ServletException, IOException {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("o");
        when(req.getSession(true)).thenReturn(mock(HttpSession.class));
        when(req.getServletContext()).thenReturn(mock(ServletContext.class));
        servlet.performTask(req, resp);
        verify(resp, times(1)).setContentType("text/html");
        verify(resp, times(1)).getOutputStream();
        verify(resp, times(1)).sendError(500, "trade_client.TradeScenarioServlet.service(...): error creating and writing to PrintStream created from response.getOutputStream()");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_fid2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        servletconfig = mock(ServletConfig.class);
        tradescenarioservlet = new TradeScenarioServlet();
        tradescenarioservlet.init(servletconfig);
        verify(servletconfig).getInitParameterNames();
        verify(servletconfig).getInitParameter("someParameter");
        verify(httpservlet).init(servletconfig);
    }
}