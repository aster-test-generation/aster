/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession3_Test_Failing {
    private static String initTime = null;
    private static int hitCount = 0;
    PingSession3 pingsession3;
    HttpServlet httpservlet;
    @Mock
    HttpServletResponse httpservletresponse;
    @Mock
    HttpServletRequest httpservletrequest;
    @Mock
    HttpSession httpsession;
    private static int NUM_OBJECTS = 2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingsession3 = new PingSession3();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingSession3
        pingsession3.init(httpservlet);
        // Verify that the init method of HttpServlet is called
        verify(httpservlet, times(1)).init(any());
        // Assert that the hitCount and initTime variables are initialized correctly
        assertEquals(0, hitCount);
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        pingsession3 = new PingSession3();
        when(httpservletrequest.getSession(any())).thenReturn(httpsession);
        pingsession3.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletrequest).getSession(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_SDEW0() {
        PingSession3 pingSession3 = new PingSession3();
        String actualServletInfo = pingSession3.getServletInfo();
        String expectedServletInfo = "HTTP Session Object: Tests management of a large custom session class";
        assertEquals(expectedServletInfo, actualServletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        pingsession3 = new PingSession3();
        when(httpservletrequest.getSession(any())).thenReturn(httpsession);
        pingsession3.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setContentType("text/html");
        verify(httpservletresponse).setHeader("SessionTrackingTest-largeSessionData", any());
        verify(httpservletresponse).getWriter();
        verify(httpservletresponse).sendError(anyInt(), anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingsession3 = new PingSession3();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingSession3
        pingsession3.init(httpservlet);
        // Verify that the init method of HttpServlet is called
        verify(httpservlet, times(1)).init(any());
        // Assert that the hitCount and initTime variables are initialized correctly
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingsession3 = new PingSession3();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingSession3
        pingsession3.init(httpservlet);
        // Verify that the init method of HttpServlet is called
        verify(httpservlet, times(1)).init(any());
        // Assert that the hitCount and initTime variables are initialized correctly
        assertNotNull(initTime);
    }
}