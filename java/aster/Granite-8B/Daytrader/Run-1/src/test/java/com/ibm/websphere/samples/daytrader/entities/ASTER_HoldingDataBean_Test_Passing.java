/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Passing {
    private HoldingDataBean holding;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity_jXqe0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertEquals(0.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuoteID1_AsHY0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        String quoteID = holdingDataBean.getQuoteID();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_bNzB0() {
        HoldingDataBean holding = new HoldingDataBean();
        BigDecimal purchasePrice = new BigDecimal(100.0);
        holding.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holding.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_QeFw0() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        HoldingDataBean holdingDataBean2 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        assertTrue(holdingDataBean1.equals(holdingDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_ZuRD1() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        assertFalse(holdingDataBean1.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_FHWN2() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        assertFalse(holdingDataBean1.equals("string"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentHoldingID_hwFl3() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        HoldingDataBean holdingDataBean2 = new HoldingDataBean(2.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentPurchasePrice_mXQJ4() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        HoldingDataBean holdingDataBean2 = new HoldingDataBean(1.0, new BigDecimal(2.0), new Date(), new AccountDataBean(), new QuoteDataBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentPurchaseDate_vAGW5() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        HoldingDataBean holdingDataBean2 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(System.currentTimeMillis() + 1000), new AccountDataBean(), new QuoteDataBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentAccount_FjyC6() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        HoldingDataBean holdingDataBean2 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1.0), new BigDecimal(1.0), "string"), new QuoteDataBean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchaseDate_TRww0() {
        HoldingDataBean holding = new HoldingDataBean();
        Date purchaseDate = holding.getPurchaseDate();
        assertNull(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_gHFJ0() {
        HoldingDataBean holding = new HoldingDataBean();
        AccountDataBean account = new AccountDataBean();
        holding.setAccount(account);
        assertEquals(account, holding.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_pVQf0() {
        HoldingDataBean holding = new HoldingDataBean();
        Date purchaseDate = new Date();
        holding.setPurchaseDate(purchaseDate);
        assertEquals(purchaseDate, holding.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDateNull_CzTR1() {
        HoldingDataBean holding = new HoldingDataBean();
        holding.setPurchaseDate(null);
        assertNull(holding.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteID_vPNU0() {
        HoldingDataBean holding = new HoldingDataBean();
        String quoteID = "12345";
        holding.setQuoteID(quoteID);
        assertEquals(quoteID, holding.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_ppGB0() {
        HoldingDataBean holding = new HoldingDataBean();
        holding.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_AVrj0_1() {
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        holding.setQuote(quote);
        QuoteDataBean returnedQuote = holding.getQuote();
        assertNotNull(returnedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_AVrj0_2() {
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        holding.setQuote(quote);
        QuoteDataBean returnedQuote = holding.getQuote();
        assertEquals(quote, returnedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingID_uXax0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = holdingDataBean.getHoldingID();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetQuantity_LcoS0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(100.0);
        assertEquals(100.0, holdingDataBean.getQuantity(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingID_sfXh0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = 1;
        holdingDataBean.setHoldingID(holdingID);
        assertEquals(holdingID, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetPurchasePrice_FYUO0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, new BigDecimal("100.00"), new Date(), new AccountDataBean(), new QuoteDataBean());
        BigDecimal expectedPurchasePrice = new BigDecimal("100.00");
        BigDecimal actualPurchasePrice = holdingDataBean.getPurchasePrice();
        assertEquals(expectedPurchasePrice, actualPurchasePrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void tearDown_AVON1() throws Exception {
        holding = null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_AVrj0() {
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        holding.setQuote(quote);
        QuoteDataBean returnedQuote = holding.getQuote();
        assertNotNull(returnedQuote);
        assertEquals(quote, returnedQuote);
    }
}