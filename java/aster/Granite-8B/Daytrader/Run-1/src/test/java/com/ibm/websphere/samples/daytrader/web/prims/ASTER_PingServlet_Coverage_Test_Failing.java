/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServlet_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetServletInfo_QDCe0()
	{
		PingServlet pingServlet = new PingServlet();
		String result = pingServlet.getServletInfo();
		assertEquals("Basic dynamic HTML generation through a servlet", result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit4_SQCV3_zhDn0() throws javax.servlet.ServletException {
        PingServlet pingServlet = new PingServlet();
        pingServlet.init(null);
        pingServlet.init(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStream_POEM1_fiun0() throws ServletException, IOException {
        PingServlet servlet = new PingServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        verify(response).getOutputStream();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testException_Gmjl4_CdFS0() throws ServletException, IOException {
        PingServlet servlet = new PingServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        try {
            servlet.doGet(request, response);
            fail("Expected ServletException");
        } catch (ServletException e) {
            assertEquals("PingServlet.doGet(...): general exception caught", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSendError_AKyk5_qSrV0() throws ServletException, IOException {
        PingServlet servlet = new PingServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        try {
            servlet.doGet(request, response);
            fail("Expected IOException");
        } catch (IOException e) {
            assertEquals(500, e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentType_kfcQ0_eAFJ0() throws ServletException, IOException {
        PingServlet servlet = new PingServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doGet(request, response);
        verify(request, times(1)).setAttribute(eq("javax.servlet.forward.servlet_path"), eq(""));
        verify(request, times(1)).setAttribute(eq("javax.servlet.include.servlet_path"), eq(""));
        verify(request, times(1)).setAttribute(eq("javax.servlet.forward.path_info"), eq(""));
        verify(request, times(1)).setAttribute(eq("javax.servlet.include.path_info"), eq(""));
        verify(request, times(1)).setAttribute(eq("javax.servlet.forward.context_path"), eq(""));
        verify(request, times(1)).setAttribute(eq("javax.servlet.include.context_path"), eq(""));
        verify(request, times(1)).setAttribute(eq("javax.servlet.forward.query_string"), eq(""));
        verify(request, times(1)).setAttribute(eq("javax.servlet.include.query_string"), eq(""));
        verify(request, times(1)).setAttribute(eq("javax.servlet.forward.mapping"), eq(""));
        verify(request, times(1)).setAttribute(eq("javax.servlet.include.mapping"), eq(""));
        verify(response, times(1)).setContentType("text/html");
    }
}