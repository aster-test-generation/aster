/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
    @Mock
    private AccountDataBean accountDataBeanMock;
    @Mock
    private QuoteDataBean quoteDataBeanMock;
    @Mock
    private HoldingDataBean holdingDataBeanMock;
    private OrderDataBean orderDataBean;
    private String symbol;
    private OrderDataBean orderdatabean;
    private Integer orderID;
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    private BigDecimal price;
    @Mock
    private Log log;
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;
    private double quantity;
    private BigDecimal orderFee;
    private String orderType;
    @Mock
    private QuoteDataBean mockQuote;
    private String newOrderStatus;
    private Date openDate;
    private Date completionDate;
    private AccountDataBean accountdatabean;
    private QuoteDataBean quotedbbean;
    private HoldingDataBean holdingdatabean;
    private String orderStatus;

    /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOrderStatus() {
           orderdatabean = new OrderDataBean();
           orderdatabean.setAccount(accountDataBean);
           orderdatabean.setQuote(quoteDataBean);
           orderdatabean.setHolding(holdingDataBean);
           // Mock the behavior of the AccountDataBean, QuoteDataBean, and HoldingDataBean objects
           when(accountDataBean.getLoginCount()).thenReturn(10);
           when(quoteDataBean.getSymbol()).thenReturn("TEST");
           when(holdingDataBean.getQuantity()).thenReturn(100.0);
           // Call the method under test
           String orderStatus = orderdatabean.getOrderStatus();
           // Assert that the method returns the expected value
           assertEquals("open", orderStatus);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void getOrderStatusTest_jRGG0() {
           OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.00"), new BigDecimal("10.00"), "symbol");
           String orderStatus = orderDataBean.getOrderStatus();
           assertEquals("OPEN", orderStatus);
       }
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus() throws Exception {
           orderdatabean = new OrderDataBean();
           newOrderStatus = "newOrderStatus";
           orderdatabean.setOrderStatus(newOrderStatus);
           assertEquals(newOrderStatus, orderdatabean.getOrderStatus());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus_moQY0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           orderDataBean.setOrderStatus("open");
           assertEquals("open", orderDataBean.getOrderStatus());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetSymbol() throws Exception {
           orderdatabean = new OrderDataBean();
           quote = new QuoteDataBean();
           symbol = "TEST_SYMBOL";
           when(mockQuote.getSymbol()).thenReturn(symbol);
           orderdatabean.setQuote(mockQuote);
           String actualSymbol = orderdatabean.getSymbol();
           assertEquals(symbol, actualSymbol);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testgetSymbol1_SZWt0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           orderDataBean.setQuote(new QuoteDataBean());
           orderDataBean.getQuote().setSymbol("symbol");
           assertEquals("symbol", orderDataBean.getSymbol());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testgetSymbol2_NZCH1() {
           OrderDataBean orderDataBean = new OrderDataBean();
           orderDataBean.setSymbol("symbol");
           assertEquals("symbol", orderDataBean.getSymbol());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetOrderID() throws Exception{
           orderdatabean = new OrderDataBean();
           orderdatabean.setOrderID(1);
           Integer expectedOrderID = 1;
           Integer actualOrderID = orderdatabean.getOrderID();
           assertEquals(expectedOrderID, actualOrderID);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void getOrderID_jayb0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Integer orderID = orderDataBean.getOrderID();
           assertEquals(null, orderID);
       }
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testisOpen() throws Exception{
           orderdatabean = new OrderDataBean();
           when(orderdatabean.getOrderStatus()).thenReturn("open");
           assertTrue(orderdatabean.isOpen());
           when(orderdatabean.getOrderStatus()).thenReturn("processing");
           assertTrue(orderdatabean.isOpen());
           when(orderdatabean.getOrderStatus()).thenReturn("closed");
           assertFalse(orderdatabean.isOpen());
           when(orderdatabean.getOrderStatus()).thenReturn("canceled");
           assertFalse(orderdatabean.isOpen());
           when(orderdatabean.getOrderStatus()).thenReturn("completed");
           assertFalse(orderdatabean.isOpen());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen1_eqVe0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("open");
       boolean actual = orderDataBean.isOpen();
       boolean expected = true;
       assertEquals(expected, actual);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen2_ixpz1() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("processing");
       boolean actual = orderDataBean.isOpen();
       boolean expected = true;
       assertEquals(expected, actual);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen3_ltRT2() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("closed");
       boolean actual = orderDataBean.isOpen();
       boolean expected = false;
       assertEquals(expected, actual);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToString() {
           orderDataBean = new OrderDataBean();
           when(orderDataBean.getAccount()).thenReturn(accountDataBean);
           when(orderDataBean.getQuote()).thenReturn(quoteDataBean);
           when(orderDataBean.getHolding()).thenReturn(holdingDataBean);
           when(accountDataBean.getProfileID()).thenReturn("profileID");
           when(quoteDataBean.getSymbol()).thenReturn("symbol");
           when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.valueOf(100.0));
           String toStringResult = orderDataBean.toString();
           String expectedResult = "Order null\n\t      orderType: null\n\t    orderStatus: null\n\t       openDate: null\n\t completionDate: null\n\t       quantity: 0.0\n\t          price: null\n\t       orderFee: null\n\t         symbol: symbol";
           assertEquals(expectedResult, toStringResult);
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testToString_eNmE0() {
       OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol");
       String toString = orderDataBean.toString();
       assertEquals("Order 1\n\t      orderType: type\n\t    orderStatus: status\n\t       openDate: " + new Date() + "\n\t completionDate: " + new Date() + "\n\t       quantity: 1.0\n\t          price: 1.0\n\t       orderFee: 1.0\n\t         symbol: symbol", toString);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testsetAccount() throws Exception{
           account = mock(AccountDataBean.class);
           orderdatabean = new OrderDataBean();
           orderdatabean.setAccount(account);
           verify(account, times(1)).setOrders(any());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetAccount_wONj0() {
           OrderDataBean order = new OrderDataBean();
           AccountDataBean account = new AccountDataBean();
           order.setAccount(account);
           assertEquals(account, order.getAccount());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderFee() throws Exception {
           orderdatabean = new OrderDataBean();
           BigDecimal newOrderFee = new BigDecimal(100.00);
           orderdatabean.setOrderFee(newOrderFee);
           assertEquals(newOrderFee, orderdatabean.getOrderFee());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOrderFee_EDDi0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = new BigDecimal(100.0);
       orderDataBean.setOrderFee(orderFee);
       assertEquals(orderFee, orderDataBean.getOrderFee());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOrderFeeWithNull_OvSO1() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderFee(null);
       assertEquals(null, orderDataBean.getOrderFee());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetOpenDate() throws Exception {
           openDate = new Date();
           when(orderdatabean.getOpenDate()).thenReturn(openDate);
           assertEquals(openDate, orderdatabean.getOpenDate());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOpenDate_uGyK0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           assertNotNull(orderDataBean.getOpenDate());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOpenDate_dOQE1() {
           OrderDataBean orderDataBean = new OrderDataBean();
           assertNotNull(orderDataBean.getOpenDate());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOpenDate_HFum2() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Date openDate = new Date();
           orderDataBean.setOpenDate(openDate);
           assertEquals(openDate, orderDataBean.getOpenDate());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderType_wYaP3() {
           OrderDataBean orderDataBean = new OrderDataBean();
           String orderType = "BUY";
           orderDataBean.setOrderType(orderType);
           assertEquals(orderType, orderDataBean.getOrderType());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus_LmmG4() {
           OrderDataBean orderDataBean = new OrderDataBean();
           String orderStatus = "OPEN";
           orderDataBean.setOrderStatus(orderStatus);
           assertEquals(orderStatus, orderDataBean.getOrderStatus());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetCompletionDate_esGo5() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Date completionDate = new Date();
           orderDataBean.setCompletionDate(completionDate);
           assertEquals(completionDate, orderDataBean.getCompletionDate());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetQuantity_aipa6() {
           OrderDataBean orderDataBean = new OrderDataBean();
           double quantity = 100.0;
           orderDataBean.setQuantity(quantity);
           assertEquals(quantity, orderDataBean.getQuantity(), 0.0);
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetPrice_ZGYI7() {
           OrderDataBean orderDataBean = new OrderDataBean();
           BigDecimal price = new BigDecimal(100.0);
           orderDataBean.setPrice(price);
           assertEquals(price, orderDataBean.getPrice());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderFee_AMtS8() {
           OrderDataBean orderDataBean = new OrderDataBean();
           BigDecimal orderFee = new BigDecimal(10.0);
           orderDataBean.setOrderFee(orderFee);
           assertEquals(orderFee, orderDataBean.getOrderFee());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetSymbol_OpiU9() {
           OrderDataBean orderDataBean = new OrderDataBean();
           String symbol = "AAPL";
           orderDataBean.setSymbol(symbol);
           assertEquals(symbol, orderDataBean.getSymbol());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testsetOpenDate() throws Exception{
           orderdatabean = new OrderDataBean();
           openDate = new Date();
           orderdatabean.setOpenDate(openDate);
           assertEquals(openDate, orderdatabean.getOpenDate());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOpenDate_coff0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       Date openDate = new Date();
       orderDataBean.setOpenDate(openDate);
       assertEquals(openDate, orderDataBean.getOpenDate());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetHolding() throws Exception {
           holding = mock(HoldingDataBean.class);
           orderdatabean = new OrderDataBean();
           orderdatabean.setHolding(holding);
           verify(orderdatabean, times(1)).setHolding(holding);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetHolding_Upds0() {
           OrderDataBean order = new OrderDataBean();
           HoldingDataBean holding = new HoldingDataBean();
           order.setHolding(holding);
           assertNotNull(order.getHolding());
           assertEquals(holding, order.getHolding());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetCompletionDate() throws Exception{
           orderdatabean = new OrderDataBean();
           completionDate = new Date();
           orderdatabean.setCompletionDate(completionDate);
           assertEquals(completionDate, orderdatabean.getCompletionDate());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void test_tbDO0() {
           OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
           assertEquals(new Date(), orderDataBean.getCompletionDate());
       }
       private String orderType; /* orderType (buy, sell, etc.) */
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest1_AYXD0() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_Ruht1_2() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_Ruht1_4() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_Ruht1_5() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_Ruht1_7() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetSymbol() throws Exception {
        orderdatabean = new OrderDataBean();
        // Mock the QuoteDataBean object
        QuoteDataBean quoteDataBean = mock(QuoteDataBean.class);
        // Set the symbol on the orderdatabean
        orderdatabean.setSymbol("TEST_SYMBOL");
        // Verify that the symbol was set correctly
        assertEquals("TEST_SYMBOL", orderdatabean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_GOkt0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setSymbol("symbol1");
        assertEquals("symbol1", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode_bXdH0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(1);
        assertEquals(1, orderDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode2_Biso1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(2);
        assertEquals(2, orderDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrice() throws Exception {
        orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        BigDecimal expected = new BigDecimal(1.0);
        BigDecimal actual = orderdatabean.getPrice();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_iEhT0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.00"), new BigDecimal("0.00"), "symbol");
        BigDecimal price = order.getPrice();
        assertEquals(new BigDecimal("100.00"), price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint() {
        orderDataBean = new OrderDataBean();
        orderDataBean.print();
        verify(log).log(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testPrint_NpRJ0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol");
        orderDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCancel_Wnnd0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.cancel();
        assertEquals("cancelled", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID() {
        orderID = 123;
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderID(orderID);
        orderdatabean.setOrderID(orderID);
        assertEquals(orderID, orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID_TBYE0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(1);
        assertEquals(1, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDNull_yqYX1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(null);
        assertEquals(null, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDNegative_csek2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(-1);
        assertEquals(-1, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDZero_HqDA3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(0);
        assertEquals(0, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDLarge_TIum5() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderIDSmall_dNjg6() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToHTML_FmoR0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol");
        String expected = "<BR>Order <B>1</B>" + "<LI>      orderType: type</LI>" + "<LI>    orderStatus: status</LI>" + "<LI>       openDate: " + orderDataBean.getOpenDate() + "</LI>" + "<LI> completionDate: " + orderDataBean.getCompletionDate() + "</LI>" + "<LI>       quantity: 1.0</LI>" + "<LI>          price: 1.0</LI>" + "<LI>       orderFee: 1.0</LI>" + "<LI>         symbol: symbol</LI>";
        assertEquals(expected, orderDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetQuantity_VqTx0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        double quantity = orderDataBean.getQuantity();
        assertEquals(0.0, quantity, "getQuantity() should return 0.0");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderFee() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderFee(new BigDecimal(100));
        assertEquals(new BigDecimal(100), orderdatabean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_yHzt1() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        BigDecimal orderFee = orderDataBean.getOrderFee();
        assertNotNull(orderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderType() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderType(orderType);
        String newOrderType = "newOrderType";
        orderdatabean.setOrderType(newOrderType);
        assertEquals(newOrderType, orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderType_lQvM0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("BUY");
        assertEquals("BUY", orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        when(mockQuote.getSymbol()).thenReturn("TEST");
        orderdatabean.setQuote(mockQuote);
        assertEquals("TEST", orderdatabean.getQuote().getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_OrTK0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        QuoteDataBean randomInstance = QuoteDataBean.getRandomInstance();
        orderDataBean.setQuote(randomInstance);
        QuoteDataBean quote = orderDataBean.getQuote();
        assertNotNull(quote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPrice_mTVd0() {
        OrderDataBean order = new OrderDataBean();
        BigDecimal price = new BigDecimal(100.0);
        order.setPrice(price);
        assertEquals(price, order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderID(1);
        OrderDataBean other = new OrderDataBean();
        other.setOrderID(1);
        assertTrue(orderdatabean.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_rdxS0() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        assertTrue(orderDataBean1.equals(orderDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_UnLR1() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        OrderDataBean orderDataBean2 = null;
        assertFalse(orderDataBean1.equals(orderDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOrderID_qfNV2() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(2, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        assertFalse(orderDataBean1.equals(orderDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOrderType_SGvg3() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type2", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        assertTrue(orderDataBean1.equals(orderDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOrderStatus_GEFU4() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status2", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        assertTrue(orderDataBean1.equals(orderDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOpenDate_dFwy5() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status1", new Date(System.currentTimeMillis() + 1000), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        assertTrue(orderDataBean1.equals(orderDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentCompletionDate_LkSG6() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(System.currentTimeMillis() + 1000), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        assertTrue(orderDataBean1.equals(orderDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSell1_znyQ0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("sell");
        boolean result = orderDataBean.isSell();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSell2_rQWZ1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("BUY");
        boolean result = orderDataBean.isSell();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderType() {
        orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("buy");
        assertEquals("buy", orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderTypeTest_zhRP0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String orderType = orderDataBean.getOrderType();
        assertNull(orderType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsCompleted1_nTMq0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("completed");
        assertTrue(orderDataBean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsCompleted2_rSNz1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("alertcompleted");
        assertTrue(orderDataBean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsCompleted3_KrFf2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("cancelled");
        assertTrue(orderDataBean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsCompleted4_iNxL3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("open");
        assertTrue(!orderDataBean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetQuote_MYIL0() {
        OrderDataBean order = new OrderDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        order.setQuote(quote);
        assertSame(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetQuoteNull_YNoc1() {
        OrderDataBean order = new OrderDataBean();
        order.setQuote(null);
        assertNull(order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_UPtU0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(100.0);
        assertEquals(100.0, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuy1_Pnfb0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("buy");
        boolean result = orderDataBean.isBuy();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBuy2_tBhd1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("sell");
        boolean result = orderDataBean.isBuy();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCompletionDate() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setCompletionDate(new Date());
        assertEquals(orderdatabean.getCompletionDate(), new Date());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDate_KdzA0() {
        OrderDataBean order = new OrderDataBean();
        Date completionDate = new Date();
        order.setCompletionDate(completionDate);
        assertEquals(completionDate, order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled1_ezky0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("cancelled");
        boolean result = orderDataBean.isCancelled();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled2_QUOM1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("open");
        boolean result = orderDataBean.isCancelled();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_XeAW0() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(accountDataBean);
        orderdatabean.setQuote(quoteDataBean);
        orderdatabean.setHolding(holdingDataBean);
        when(accountDataBean.getLoginCount()).thenReturn(10);
        when(quoteDataBean.getSymbol()).thenReturn("TEST");
        when(holdingDataBean.getQuantity()).thenReturn(100.0);
        String orderStatus = orderdatabean.getOrderStatus();
        assertNull(orderStatus);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus_yWIg0() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        String newOrderStatus = "newOrderStatus";
        orderdatabean.setOrderStatus(newOrderStatus);
        assertEquals(newOrderStatus, orderdatabean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_rnHQ0() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        String symbol = "TEST_SYMBOL";
        when(mockQuote.getSymbol()).thenReturn(symbol);
        orderdatabean.setQuote(mockQuote);
        String actualSymbol = orderdatabean.getSymbol();
        assertEquals(symbol, actualSymbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderID_ssiP0() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        orderdatabean.setOrderID(1);
        Integer expectedOrderID = 1;
        Integer actualOrderID = orderdatabean.getOrderID();
        assertEquals(expectedOrderID, actualOrderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_eNmE0_urNJ0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol");
        String toString = orderDataBean.toString();
        assertEquals("Order 1\n\t      orderType: type\n\t    orderStatus: status\n\t       openDate: " + new Date() + "\n\t completionDate: " + new Date() + "\n\t       quantity: 1.0\n\t          price: 1.0\n\t       orderFee: 1.0\n\t         symbol: symbol", toString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_wONj0_Wlow1() {
        OrderDataBean order = new OrderDataBean();
        AccountDataBean account = new AccountDataBean();
        order.setAccount(account);
        assertEquals(account, order.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_ayXF0() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        BigDecimal newOrderFee = new BigDecimal("100.00");
        orderdatabean.setOrderFee(newOrderFee);
        assertEquals(newOrderFee, orderdatabean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_EDDi0_ZhDw0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal orderFee = new BigDecimal(100.0);
        orderDataBean.setOrderFee(orderFee);
        assertEquals(orderFee, orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate_HFum2_TQVw0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Calendar calendar = Calendar.getInstance();
        calendar.set(2022, 1, 1);
        Date openDate = calendar.getTime();
        orderDataBean.setOpenDate(openDate);
        assertEquals(openDate, orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDate_esGo5_SJLp0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Date completionDate = new Date();
        orderDataBean.setCompletionDate(completionDate);
        assertEquals(completionDate, orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_AMtS8_Lxvi0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal orderFee = new BigDecimal(10.0);
        orderDataBean.setOrderFee(orderFee);
        assertEquals(orderFee, orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOpenDate_ijns0() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        java.util.Date openDate = new java.util.Date();
        orderdatabean.setOpenDate(openDate);
        assertEquals(openDate, orderdatabean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_Upds0_IaQZ0_1() {
        OrderDataBean order = new OrderDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        order.setHolding(holding);
        assertNotNull(order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_Upds0_IaQZ0_2() {
        OrderDataBean order = new OrderDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        order.setHolding(holding);
        assertEquals(holding, order.getHolding());
    }
}