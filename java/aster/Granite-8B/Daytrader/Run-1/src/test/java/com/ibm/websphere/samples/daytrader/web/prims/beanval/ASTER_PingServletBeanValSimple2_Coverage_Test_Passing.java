/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
public class Aster_PingServletBeanValSimple2_Coverage_Test_Passing {
    PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_Hqoc0() {
        assertEquals("Basic dynamic HTML generation through a servlet", pingServletBeanValSimple2.getServletInfo());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDoPost01_oXLI0() throws ServletException, IOException {
		PingServletBeanValSimple2 fixture = new PingServletBeanValSimple2();
		HttpServletRequest req = new MockHttpServletRequest();
		HttpServletResponse res = new MockHttpServletResponse();
		fixture.doPost(req, res);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInit_iVjj1() throws ServletException {
	PingServletBeanValSimple2 fixture = new PingServletBeanValSimple2();
	ServletConfig config = null;
	fixture.init(config);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingServletBeanValSimple2DoGet_SmXp0() throws ServletException, IOException {
	{
	    HttpServletRequest request = mock(HttpServletRequest.class);
	    HttpServletResponse response = mock(HttpServletResponse.class);
	    PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
	    pingServletBeanValSimple2.doGet(request, response);
	    verify(response, times(1)).setContentType(anyString());
	    verify(response, times(1)).getOutputStream();
	    verify(response, times(1)).sendError(anyInt(), anyString());
	    verify(request, times(1)).setAttribute(anyString(), any());
	}
}
}