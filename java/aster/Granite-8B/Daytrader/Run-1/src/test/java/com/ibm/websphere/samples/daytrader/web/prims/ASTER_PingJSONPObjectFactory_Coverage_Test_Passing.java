/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingJSONPObjectFactory_Coverage_Test_Passing {
    PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit1_NZJd0() throws javax.servlet.ServletException {
        pingJSONPObjectFactory.init(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost1_VFwZ0() throws ServletException, IOException {
        PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        pingJSONPObjectFactory.doPost(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetServletInfo_lCjW0() {
		PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
		String actual = pingJSONPObjectFactory.getServletInfo();
		String expected = "Basic JSON generation and parsing in a servlet";
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWith500Error_BsXG0() throws ServletException, IOException {
        PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        doThrow(new ServletException()).when(response).sendError(500, "Error message");
        pingJSONPObjectFactory.doGet(request, response);
        verify(response, times(1)).sendError(500, "Error message");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithContentTypeSet_ZzXP1() throws ServletException, IOException {
        PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        pingJSONPObjectFactory.doGet(request, response);
        verify(response, times(1)).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithOutputStreamCreated_dUDm2() throws ServletException, IOException {
        PingJSONPObjectFactory pingJSONPObjectFactory = new PingJSONPObjectFactory();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletOutputStream servletOutputStream = mock(ServletOutputStream.class);
        doReturn(servletOutputStream).when(response).getOutputStream();
        pingJSONPObjectFactory.doGet(request, response);
        verify(response, times(1)).getOutputStream();
}
}