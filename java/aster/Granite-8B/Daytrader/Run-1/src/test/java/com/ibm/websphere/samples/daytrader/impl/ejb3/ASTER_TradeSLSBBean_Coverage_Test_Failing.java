/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;
import java.math.BigDecimal;
import javax.jms.Queue;
import javax.persistence.EntityManager;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeSLSBBean_Coverage_Test_Failing {
	{
	}
public void testUpdateQuotePriceVolume1_yCaH0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = BigDecimal.ZERO;
    double sharesTraded = 0.0;
    QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
}
public void testUpdateQuotePriceVolume2_GHCt1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = BigDecimal.ZERO;
    double sharesTraded = 0.0;
    QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAllQuotes1_kdFg0() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	 tradeSLSBBean.getAllQuotes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn2_Lgnz1() throws java.lang.Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 500.0;
        double NetValue = 600.0;
        double expected = 0.4;
        double actual = tradeSLSBBean.investmentReturn(investment, NetValue);
        assertEquals(expected, actual, 0.01);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn3_VPzx2() throws java.lang.Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 1500.0;
        double NetValue = 1800.0;
        double expected = 0.333333333333333;
        double actual = tradeSLSBBean.investmentReturn(investment, NetValue);
        assertEquals(expected, actual, 0.01);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder1_kNTN0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_UPMK1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 2;
        boolean twoPhase = false;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_nfFc2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 3;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder1_FpRP0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 1.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder2_dhUR1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 1.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals("open", order.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder3_SPOb2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 1.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order.getOpenDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder4_yTBH3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 1.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quantity, order.getQuantity(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder5_bdpu4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 1.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order.getCompletionDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder6_JBxF5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 1.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder7_LqnD6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 1.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder8_EYLp7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 1.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(account, order.getAccount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderWithNullHolding_shtf2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    OrderDataBean order = OrderDataBean.getRandomInstance();
    order.setOrderType("sell");
    order.setHolding(null);
    tradeSLSBBean.completeOrder(order.getOrderID(), false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterWithExistingUserID_QnGQ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        when(entityManager.find(AccountProfileDataBean.class, "existingUserID")).thenReturn(profile);
        AccountDataBean account = tradeSLSBBean.register("existingUserID", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000.0));
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterWithNullUserID_itGy1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register(null, "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000.0));
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterWithEmptyUserID_UolT2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("", "password", "fullname", "address", "email", "creditcard", new BigDecimal(1000.0));
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterWithNullPassword_VuEM4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("userID", null, "fullname", "address", "email", "creditcard", new BigDecimal(1000.0));
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterWithEmptyPassword_KrYO5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("userID", "", "fullname", "address", "email", "creditcard", new BigDecimal(1000.0));
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterWithNullFullname_fSCC7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("userID", "password", null, "address", "email", "creditcard", new BigDecimal(1000.0));
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterWithEmptyFullname_lEUL8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("userID", "password", "", "address", "email", "creditcard", new BigDecimal(1000.0));
        assertNull(account);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterWithNullAddress_NTqw10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("userID", "password", "fullname", null, "email", "creditcard", new BigDecimal(1000.0));
        assertNull(account);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_eoPG0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "companyName", new BigDecimal(0));
        assertNotNull(quote);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullSymbol_GOsD1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote(null, "companyName", new BigDecimal(0));
        assertNull(quote);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithEmptySymbol_JUvl2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("", "companyName", new BigDecimal(0));
        assertNull(quote);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullCompanyName_uQpJ4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", null, new BigDecimal(0));
        assertNull(quote);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithEmptyCompanyName_Chhe5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "", new BigDecimal(0));
        assertNull(quote);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuoteWithNullPrice_CFyh7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "companyName", null);
        assertNull(quote);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_xbPB0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.logout("123");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout2_OIxK1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.logout("456");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout3_iLDk2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.logout("789");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout4_gQAE3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.logout("012");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout5_LzLw4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.logout("345");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetHolding_fakS0() {
		TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
		HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
		Assertions.assertNotNull(holdingDataBean);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_OPjx0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(profile.getUserID()).thenReturn("123");
        when(account.getProfileID()).thenReturn("123");
        AccountDataBean result = tradeSLSBBean.getAccountData("123");
        assertNotNull(result);
        assertEquals("123", result.getProfileID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_wSAS1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(profile.getUserID()).thenReturn("456");
        when(account.getProfileID()).thenReturn("456");
        AccountDataBean result = tradeSLSBBean.getAccountData("456");
        assertNotNull(result);
        assertEquals("456", result.getProfileID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_WoAT2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(profile.getUserID()).thenReturn("789");
        when(account.getProfileID()).thenReturn("789");
        AccountDataBean result = tradeSLSBBean.getAccountData("789");
        assertNotNull(result);
        assertEquals("789", result.getProfileID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_PrQt0() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID("123");
	profileData.setPassword("password");
	profileData.setFullName("John Doe");
	profileData.setAddress("123 Main St");
	profileData.setEmail("john.doe@example.com");
	profileData.setCreditCard("1234567890123456");
	AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
	assertEquals("123 Main St", updatedProfileData.getAddress());
	assertEquals("password", updatedProfileData.getPassword());
	assertEquals("John Doe", updatedProfileData.getFullName());
	assertEquals("1234567890123456", updatedProfileData.getCreditCard());
	assertEquals("john.doe@example.com", updatedProfileData.getEmail());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfileWithInvalidUserID_sICU1() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID("invalid");
	profileData.setPassword("password");
	profileData.setFullName("John Doe");
	profileData.setAddress("123 Main St");
	profileData.setEmail("john.doe@example.com");
	profileData.setCreditCard("1234567890123456");
	AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
	assertNull(updatedProfileData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfileWithNullUserID_jQsj2() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID(null);
	profileData.setPassword("password");
	profileData.setFullName("John Doe");
	profileData.setAddress("123 Main St");
	profileData.setEmail("john.doe@example.com");
	profileData.setCreditCard("1234567890123456");
	AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
	assertNull(updatedProfileData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfileWithEmptyUserID_qTvM3() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID("");
	profileData.setPassword("password");
	profileData.setFullName("John Doe");
	profileData.setAddress("123 Main St");
	profileData.setEmail("john.doe@example.com");
	profileData.setCreditCard("1234567890123456");
	AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
	assertNull(updatedProfileData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfileWithInvalidPassword_tbJl4() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID("123");
	profileData.setPassword("invalid");
	profileData.setFullName("John Doe");
	profileData.setAddress("123 Main St");
	profileData.setEmail("john.doe@example.com");
	profileData.setCreditCard("1234567890123456");
	AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
	assertNull(updatedProfileData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase1_fwOX0() throws java.lang.Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("Company1");
    quoteDataBean.setOpen(new BigDecimal(100));
    quoteDataBean.setPrice(new BigDecimal(100));
    quoteDataBean.setLow(new BigDecimal(100));
    quoteDataBean.setHigh(new BigDecimal(100));
    quoteDataBean.setSymbol("Symbol1");
    quoteDataBean.setVolume(100);
    try {
        QuoteDataBean actual = tradeSLSBBean.pingTwoPhase("Symbol1");
        assertEquals(quoteDataBean.getCompanyName(), actual.getCompanyName());
        assertEquals(quoteDataBean.getOpen(), actual.getOpen());
        assertEquals(quoteDataBean.getPrice(), actual.getPrice());
        assertEquals(quoteDataBean.getLow(), actual.getLow());
        assertEquals(quoteDataBean.getHigh(), actual.getHigh());
        assertEquals(quoteDataBean.getSymbol(), actual.getSymbol());
        assertEquals(quoteDataBean.getVolume(), actual.getVolume());
    } catch (Exception e) {
        fail(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase2_mUcS1() throws java.lang.Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("Company2");
    quoteDataBean.setOpen(new BigDecimal(200));
    quoteDataBean.setPrice(new BigDecimal(200));
    quoteDataBean.setLow(new BigDecimal(200));
    quoteDataBean.setHigh(new BigDecimal(200));
    quoteDataBean.setSymbol("Symbol2");
    quoteDataBean.setVolume(200);
    try {
        QuoteDataBean actual = tradeSLSBBean.pingTwoPhase("Symbol2");
        assertEquals(quoteDataBean.getCompanyName(), actual.getCompanyName());
        assertEquals(quoteDataBean.getOpen(), actual.getOpen());
        assertEquals(quoteDataBean.getPrice(), actual.getPrice());
        assertEquals(quoteDataBean.getLow(), actual.getLow());
        assertEquals(quoteDataBean.getHigh(), actual.getHigh());
        assertEquals(quoteDataBean.getSymbol(), actual.getSymbol());
        assertEquals(quoteDataBean.getVolume(), actual.getVolume());
    } catch (Exception e) {
        fail(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPingTwoPhase3_EsQv2() throws java.lang.Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("Company3");
    quoteDataBean.setOpen(new BigDecimal(300));
    quoteDataBean.setPrice(new BigDecimal(300));
    quoteDataBean.setLow(new BigDecimal(300));
    quoteDataBean.setHigh(new BigDecimal(300));
    quoteDataBean.setSymbol("Symbol3");
    quoteDataBean.setVolume(300);
    try {
        QuoteDataBean actual = tradeSLSBBean.pingTwoPhase("Symbol3");
        assertEquals(quoteDataBean.getCompanyName(), actual.getCompanyName());
        assertEquals(quoteDataBean.getOpen(), actual.getOpen());
        assertEquals(quoteDataBean.getPrice(), actual.getPrice());
        assertEquals(quoteDataBean.getLow(), actual.getLow());
        assertEquals(quoteDataBean.getHigh(), actual.getHigh());
        assertEquals(quoteDataBean.getSymbol(), actual.getSymbol());
        assertEquals(quoteDataBean.getVolume(), actual.getVolume());
    } catch (Exception e) {
        fail(e);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell1_Cjps0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = 1;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell2_vQrm1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user2";
    Integer holdingID = 2;
    int orderProcessingMode = 2;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell3_UHIO2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user3";
    Integer holdingID = 3;
    int orderProcessingMode = 3;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell4_utRA3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user4";
    Integer holdingID = 4;
    int orderProcessingMode = 4;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell5_tuwv4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user5";
    Integer holdingID = 5;
    int orderProcessingMode = 5;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell6_Usic5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user6";
    Integer holdingID = 6;
    int orderProcessingMode = 6;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell7_NAKU6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user7";
    Integer holdingID = 7;
    int orderProcessingMode = 7;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell8_lhKo7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user8";
    Integer holdingID = 8;
    int orderProcessingMode = 8;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell9_hAGR8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user9";
    Integer holdingID = 9;
    int orderProcessingMode = 9;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell10_TVwo9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user10";
    Integer holdingID = 10;
    int orderProcessingMode = 10;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell11_wGtI10() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user11";
    Integer holdingID = 11;
    int orderProcessingMode = 11;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell12_nskn11() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user12";
    Integer holdingID = 12;
    int orderProcessingMode = 12;
    OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChange_1_RiOP0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal oldPrice = new BigDecimal(0);
    BigDecimal changeFactor = new BigDecimal(0);
    double sharesTraded = 0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_OPjx0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(profile.getUserID()).thenReturn("123");
        when(account.getProfileID()).thenReturn("123");
        AccountDataBean result = tradeSLSBBean.getAccountData("123");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_OPjx0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(profile.getUserID()).thenReturn("123");
        when(account.getProfileID()).thenReturn("123");
        AccountDataBean result = tradeSLSBBean.getAccountData("123");
        assertEquals("123", result.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_wSAS1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(profile.getUserID()).thenReturn("456");
        when(account.getProfileID()).thenReturn("456");
        AccountDataBean result = tradeSLSBBean.getAccountData("456");
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_wSAS1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(profile.getUserID()).thenReturn("456");
        when(account.getProfileID()).thenReturn("456");
        AccountDataBean result = tradeSLSBBean.getAccountData("456");
        assertEquals("456", result.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_WoAT2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(profile.getUserID()).thenReturn("789");
        when(account.getProfileID()).thenReturn("789");
        AccountDataBean result = tradeSLSBBean.getAccountData("789");
        assertEquals("789", result.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_PrQt0_1() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID("123");
	profileData.setPassword("password");
	profileData.setFullName("John Doe");
	profileData.setAddress("123 Main St");
	profileData.setEmail("john.doe@example.com");
	profileData.setCreditCard("1234567890123456");
	AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
	assertEquals("123 Main St", updatedProfileData.getAddress());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_PrQt0_2() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID("123");
	profileData.setPassword("password");
	profileData.setFullName("John Doe");
	profileData.setAddress("123 Main St");
	profileData.setEmail("john.doe@example.com");
	profileData.setCreditCard("1234567890123456");
	AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
	assertEquals("password", updatedProfileData.getPassword());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_PrQt0_3() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID("123");
	profileData.setPassword("password");
	profileData.setFullName("John Doe");
	profileData.setAddress("123 Main St");
	profileData.setEmail("john.doe@example.com");
	profileData.setCreditCard("1234567890123456");
	AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
	assertEquals("John Doe", updatedProfileData.getFullName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_PrQt0_4() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID("123");
	profileData.setPassword("password");
	profileData.setFullName("John Doe");
	profileData.setAddress("123 Main St");
	profileData.setEmail("john.doe@example.com");
	profileData.setCreditCard("1234567890123456");
	AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
	assertEquals("1234567890123456", updatedProfileData.getCreditCard());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile_PrQt0_5() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID("123");
	profileData.setPassword("password");
	profileData.setFullName("John Doe");
	profileData.setAddress("123 Main St");
	profileData.setEmail("john.doe@example.com");
	profileData.setCreditCard("1234567890123456");
	AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
	assertEquals("john.doe@example.com", updatedProfileData.getEmail());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_UTWP0_DEYk1() throws Exception {
        javax.naming.InitialContext initialContext = new javax.naming.InitialContext();
        Queue tradeBrokerQueue = (Queue) initialContext.lookup("java:queue/TradeBrokerQueue");
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    }
}