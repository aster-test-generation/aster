/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingManagedExecutor_Coverage_Test_Failing {
    PingManagedExecutor pingManagedExecutor;
    private HttpServletResponse response;
    private ServletOutputStream servletOutputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetServletInfo_OCyr0() {
		PingManagedExecutor pingManagedExecutor = new PingManagedExecutor();
		String expected = "Tests a ManagedExecutor";
		String actual = pingManagedExecutor.getServletInfo();
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost1_tKbL0() throws ServletException, IOException {
        PingManagedExecutor pingManagedExecutor = new PingManagedExecutor();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        pingManagedExecutor.doPost(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithAsyncContext_NTLS2_rDFU0() throws ServletException, IOException {
        PingManagedExecutor pingManagedExecutor = new PingManagedExecutor();
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        HttpServletResponse mockResponse = mock(HttpServletResponse.class);
        pingManagedExecutor.doGet(mockRequest, mockResponse);
        verify(mockRequest, times(1)).startAsync();
    }
}