/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Failing {
    private TradeServices tServices;
    private String tUserID;
    private ServletContext ctx;
    @Mock
    private HttpServletResponse resp;
    @Mock
    private AccountDataBean accountData;
    @Mock
    private AccountProfileDataBean accountProfileData;
    @Mock
    private Collection<?> orderDataBeans;
    @Mock
    private HttpServletResponse httpservletresponse;
    TradeServletAction tradeServletAction;
    HttpServletRequest httpServletRequest;
    ServletContext servletContext;
    HttpServletResponse httpServletResponse;
    private AccountDataBean tAccountData;
    private AccountProfileDataBean tAccountProfileData;
    private Collection<?> tOrderDataBeans;
    private HttpServletRequest tHttpServletRequest;
    private HttpServletResponse tHttpServletResponse;
    private ServletContext tServletContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_eAsx0_1() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user1";
        String symbols = "symbol1,symbol2";
        when(req.getParameter("symbols")).thenReturn(symbols);
        when(req.getParameter("user")).thenReturn(userID);
        tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
        Collection<QuoteDataBean> quoteDataBeans = (Collection<QuoteDataBean>) req.getAttribute("quoteDataBeans");
        assertNotNull(quoteDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_eAsx0_2() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user1";
        String symbols = "symbol1,symbol2";
        when(req.getParameter("symbols")).thenReturn(symbols);
        when(req.getParameter("user")).thenReturn(userID);
        tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
        Collection<QuoteDataBean> quoteDataBeans = (Collection<QuoteDataBean>) req.getAttribute("quoteDataBeans");
        assertEquals(2, quoteDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDoLogoutWithValidUserID_jcax0() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        HttpSession session = mock(HttpSession.class);
        String userID = "validUserID";
        when(req.getSession()).thenReturn(session);
        tradeServletAction.doLogout(ctx, req, resp, userID);
        verify(session).invalidate();
        verify(req).logout();
        verify(req).getAttribute("TSS-RecreateSessionInLogout");
        verify(req).setAttribute("results", "Logout successful");
        verify(resp).sendRedirect("welcome.jsp");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDoLogoutWithInvalidUserID_gzmL1() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        HttpSession session = mock(HttpSession.class);
        String userID = "invalidUserID";
        when(req.getSession()).thenReturn(session);
        when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.TRUE);
        tradeServletAction.doLogout(ctx, req, resp, userID);
        verify(session).invalidate();
        verify(req).logout();
        verify(req).getAttribute("TSS-RecreateSessionInLogout");
        verify(req).setAttribute("results", "Logout successful");
        verify(resp).sendRedirect("welcome.jsp");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDoLogoutWithException_ejJd2() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        HttpSession session = mock(HttpSession.class);
        String userID = "exceptionUserID";
        when(req.getSession()).thenReturn(session);
        when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.TRUE);
        tradeServletAction.doLogout(ctx, req, resp, userID);
        verify(session).invalidate();
        verify(req).logout();
        verify(req).getAttribute("TSS-RecreateSessionInLogout");
        verify(req).setAttribute("results", "Logout successful");
        verify(resp).sendRedirect("welcome.jsp");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoMarketSummary_gGfS1() throws ServletException, IOException {
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "test";
        tradeServletAction.doMarketSummary(ctx, req, resp, userID);
        assertEquals("test", req.getAttribute("results"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLoginWithValidCredentials_yDgZ1_1() throws ServletException, IOException {
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "validUser";
        String passwd = "validPass";
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        HttpSession session = req.getSession(true);
        assertNotNull(session.getAttribute("uidBean"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLoginWithValidCredentials_yDgZ1_2() throws ServletException, IOException {
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "validUser";
        String passwd = "validPass";
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        HttpSession session = req.getSession(true);
        assertNotNull(session.getAttribute("sessionCreationDate"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLoginWithValidCredentials_yDgZ1_3() throws ServletException, IOException {
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "validUser";
        String passwd = "validPass";
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        HttpSession session = req.getSession(true);
        assertEquals("Ready to Trade", req.getAttribute("results"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLoginWithInvalidCredentials_gUbP2() throws ServletException, IOException {
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "invalidUser";
        String passwd = "invalidPass";
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        assertEquals("Could not find account for + invalidUser", req.getAttribute("results"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLoginWithIllegalArgumentException_ZDrv3() throws ServletException, IOException {
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "illegalArgumentUser";
        String passwd = "illegalArgumentPass";
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        assertEquals("illegal argument:illegalArgumentPass", req.getAttribute("results"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLoginWithException_wMXF4() throws ServletException, IOException {
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "exceptionUser";
        String passwd = "exceptionPass";
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        assertTrue(req.getAttribute("results").toString().startsWith("TradeServletAction.doLogin(...)" + "Exception logging in user exceptionUser with password exceptionPass"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoSell_uqXu0() throws Exception {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
        HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
        String userID = "user1";
        Integer holdingID = 1;
        tradeServletAction.doSell(ctx, httpServletRequest, httpServletResponse, userID, holdingID);
        verify(httpServletRequest, times(1)).setAttribute("orderData", any());
        verify(httpServletRequest, times(1)).setAttribute("results", any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoRegister_HZXJ0() throws Exception {
        TradeServletAction tradeServletAction = new TradeServletAction();
        HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
        String userID = "testUser";
        String passwd = "testPass";
        String cpasswd = "testPass";
        String fullname = "testUser";
        String ccn = "123456789";
        String openBalanceString = "1000.00";
        String email = "test@test.com";
        String address = "123 Main St.";
        when(httpServletRequest.getParameter("user")).thenReturn(userID);
        when(httpServletRequest.getParameter("passwd")).thenReturn(passwd);
        when(httpServletRequest.getParameter("confirmpassword")).thenReturn(cpasswd);
        when(httpServletRequest.getParameter("fullname")).thenReturn(fullname);
        when(httpServletRequest.getParameter("creditcard")).thenReturn(ccn);
        when(httpServletRequest.getParameter("openBalance")).thenReturn(openBalanceString);
        when(httpServletRequest.getParameter("email")).thenReturn(email);
        when(httpServletRequest.getParameter("address")).thenReturn(address);
        tradeServletAction.doRegister(null, httpServletRequest, null, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
        verify(httpServletRequest, times(1)).getParameter("user");
        verify(httpServletRequest, times(1)).getParameter("passwd");
        verify(httpServletRequest, times(1)).getParameter("confirmpassword");
        verify(httpServletRequest, times(1)).getParameter("fullname");
        verify(httpServletRequest, times(1)).getParameter("creditcard");
        verify(httpServletRequest, times(1)).getParameter("openBalance");
        verify(httpServletRequest, times(1)).getParameter("email");
        verify(httpServletRequest, times(1)).getParameter("address");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoQuotes_eAsx0() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user1";
        String symbols = "symbol1,symbol2";
        when(req.getParameter("symbols")).thenReturn(symbols);
        when(req.getParameter("user")).thenReturn(userID);
        tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
        Collection<QuoteDataBean> quoteDataBeans = (Collection<QuoteDataBean>) req.getAttribute("quoteDataBeans");
        assertNotNull(quoteDataBeans);
        assertEquals(2, quoteDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLoginWithValidCredentials_yDgZ1() throws ServletException, IOException {
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "validUser";
        String passwd = "validPass";
        tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
        HttpSession session = req.getSession(true);
        assertNotNull(session.getAttribute("uidBean"));
        assertNotNull(session.getAttribute("sessionCreationDate"));
        assertEquals("Ready to Trade", req.getAttribute("results"));
    }
}