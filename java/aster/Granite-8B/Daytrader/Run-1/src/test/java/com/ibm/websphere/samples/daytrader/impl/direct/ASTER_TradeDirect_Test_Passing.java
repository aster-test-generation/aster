/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.inject.Inject;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Passing {
    private static HoldingDataBean holdingData;
    private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";
    @Inject
    private static OrderDataBean orderData;
    private static final int HOLDING_ID = 1;
    TradeDirect tradedirect;
    DataSource datasource;
    Connection connection;
    private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
    private static Integer marketSummaryLock = new Integer(0);
    private static long nextMarketSummary = System.currentTimeMillis();
    PreparedStatement preparedstatement;
    ResultSet resultset;
    private static String getAllQuotesSQL = "select * from quoteejb q";
    private boolean inSession = false;
    OrderDataBean orderDataBean;
    private static final String USER_ID = "user1";
    private static final int RESULT_SET_SIZE = 5;
    @Mock
    private TradeDirect tradeDirect;
    @Mock
    private PreparedStatement preparedStatement;
    @Mock
    private ResultSet resultSet;
    @Mock
    private DataSource dataSource;
    private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
    QuoteDataBean quoteData;
    @Mock
    AccountDataBean accountData;
    private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
    private  UserTransaction txn;
    private ManagedExecutorService mes;
    private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
    private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
    private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
    private static BigDecimal ZERO = new BigDecimal(0.0);
    private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables_uUAR0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[2];
        sqlBuffer[0] = "CREATE TABLE table1 (id INT, name VARCHAR(255))";
        sqlBuffer[1] = "CREATE TABLE table2 (id INT, name VARCHAR(255))";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertFalse(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables1_itVy0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[1];
        sqlBuffer[0] = "CREATE TABLE users (id INT, name VARCHAR(255))";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables2_kAdG1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[1];
        sqlBuffer[0] = "DROP TABLE users";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables3_Giua2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[2];
        sqlBuffer[0] = "CREATE TABLE users (id INT, name VARCHAR(255))";
        sqlBuffer[1] = "CREATE TABLE users (id INT, name VARCHAR(255))";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary4_zlJY3_5() throws Exception {
        MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();
        TradeDirect tradeDirect0 = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean1 = tradeDirect0.getMarketSummary();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_qtbK0() {
        tradeDirect = new TradeDirect();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndTwoPhase_Ldee1() throws Exception {
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndNoTwoPhase_WJAd2() throws Exception {
        Integer orderID = 2;
        boolean twoPhase = false;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithNegativeOrderIDAndTwoPhase_LfNz3() throws Exception {
        Integer orderID = -1;
        boolean twoPhase = true;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public static void setup_HzDp0() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_vBzu0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.orderCompleted("123", 456);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_Scwu0() {
        TradeDirect tradeDirect = new TradeDirect();
        int result = tradeDirect.getImpl();
        assertEquals(TradeConfig.DIRECT, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy1_AsmD0() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        try {
            tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy2_BJxz1() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user2";
        String symbol = "symbol2";
        double quantity = 200.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        try {
            tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy3_cZdn2() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user3";
        String symbol = "symbol3";
        double quantity = 300.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        try {
            tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy4_VsPJ3() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user4";
        String symbol = "symbol4";
        double quantity = 400.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        try {
            tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy5_YKIE4() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user5";
        String symbol = "symbol5";
        double quantity = 500.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        try {
            tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy6_Cqnq5() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user6";
        String symbol = "symbol6";
        double quantity = 600.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        try {
            tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy7_RcwX6() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user7";
        String symbol = "symbol7";
        double quantity = 700.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        try {
            tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy8_TSsp7() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user8";
        String symbol = "symbol8";
        double quantity = 800.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        try {
            tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy9_JbeW8() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user9";
        String symbol = "symbol9";
        double quantity = 900.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        try {
            tradeDirect.buy(userID, symbol, quantity, orderProcessingMode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}