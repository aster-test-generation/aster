/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Failing {
    private OrderData[] closedOrders;
    private ExternalContext context;
    private TradeServices tradeAction;
    @Mock
    private AccountDataJSF accountdatajsf;
    @Mock
    private HttpSession httpsession;
    @Mock
    private ExternalContext externalcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetClosedOrders_GHTV0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        OrderData[] closedOrders = new OrderData[1];
        accountDataJSF.setClosedOrders(closedOrders);
        assertNotEquals(closedOrders, accountDataJSF.getClosedOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_oeRc0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gainPercent = new BigDecimal("1.0");
        accountDataJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, accountDataJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfOrders_fjYr0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setNumberOfOrders(10);
        assertEquals(10, accountDataJSF.getNumberOfOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfOrdersWithZero_Zsbg1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setNumberOfOrders(0);
        assertEquals(0, accountDataJSF.getNumberOfOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfOrdersWithNegativeNumber_bILU2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setNumberOfOrders(-10);
        assertEquals(-10, accountDataJSF.getNumberOfOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfOrdersWithNull_EBKm3() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setNumberOfOrders(null);
        assertEquals(null, accountDataJSF.getNumberOfOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetSessionCreationDate_yKis0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date sessionCreationDate = accountDataJSF.getSessionCreationDate();
        assertNotNull(sessionCreationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_MWCu0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gain = BigDecimal.ONE;
        accountDataJSF.setGain(gain);
        assertEquals(gain, accountDataJSF.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithZeroGain_rPMN1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gain = BigDecimal.ZERO;
        accountDataJSF.setGain(gain);
        assertEquals(gain, accountDataJSF.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithNegativeGain_YqRa2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gain = BigDecimal.valueOf(-100);
        accountDataJSF.setGain(gain);
        assertEquals(gain, accountDataJSF.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithNullGain_GZDB3() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gain = null;
        accountDataJSF.setGain(gain);
        assertEquals(gain, accountDataJSF.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLogoutCount_vTHN0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setLogoutCount(10);
        assertEquals(10, accountDataJSF.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastLogin_sCxx0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date lastLogin = new Date();
        accountDataJSF.setLastLogin(lastLogin);
        assertEquals(lastLogin, accountDataJSF.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumOfCashHoldings_rpow0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal sumOfCashHoldings = new BigDecimal(100);
        accountDataJSF.setSumOfCashHoldings(sumOfCashHoldings);
        assertEquals(sumOfCashHoldings, accountDataJSF.getSumOfCashHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumOfCashHoldingsWithZero_eVtr1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal sumOfCashHoldings = BigDecimal.ZERO;
        accountDataJSF.setSumOfCashHoldings(sumOfCashHoldings);
        assertEquals(sumOfCashHoldings, accountDataJSF.getSumOfCashHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfOrders_PNQo0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrders = accountDataJSF.getNumberOfOrders();
        assertNotNull(numberOfOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLoginCount_DlNg0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        int loginCount = accountDataJSF.getLoginCount();
        assertEquals(0, loginCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountID_YsuA0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer accountID = 123; // Assuming the value of accountID
        accountDataJSF.setAccountID(accountID);
        assertEquals(accountID, accountDataJSF.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalance_apzk0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal openBalance = new BigDecimal(100);
        accountDataJSF.setOpenBalance(openBalance);
        assertEquals(openBalance, accountDataJSF.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalanceWithZero_Cfvd1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal openBalance = BigDecimal.ZERO;
        accountDataJSF.setOpenBalance(openBalance);
        assertEquals(openBalance, accountDataJSF.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalanceWithNegativeValue_aRGj2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal openBalance = new BigDecimal(-100);
        accountDataJSF.setOpenBalance(openBalance);
        assertEquals(openBalance, accountDataJSF.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfileID_PkvT0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        String profileID = accountDataJSF.getProfileID();
        assertNotNull(profileID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_zWNC0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date creationDate = new Date();
        accountDataJSF.setCreationDate(creationDate);
        assertEquals(creationDate, accountDataJSF.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNumberOfOrderRows_juHZ0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer numberOfOrderRows = 10;
        accountDataJSF.setNumberOfOrderRows(numberOfOrderRows);
        assertEquals(numberOfOrderRows, accountDataJSF.getNumberOfOrderRows());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetSessionCreationDate() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date sessionCreationDate = new Date();
        accountDataJSF.setSessionCreationDate(sessionCreationDate);
        assertEquals(sessionCreationDate, accountDataJSF.getSessionCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalance_iUol0() {
        Instance<TradeServices> services = mock(Instance.class);
        AccountDataJSF accountDataJSF = new AccountDataJSF(services);
        BigDecimal expectedOpenBalance = BigDecimal.ZERO;
        BigDecimal actualOpenBalance = accountDataJSF.getOpenBalance();
        assertEquals(expectedOpenBalance, actualOpenBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalance_wDnf0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal balance = new BigDecimal(100);
        accountDataJSF.setBalance(balance);
        assertEquals(balance, accountDataJSF.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingsTotal_Sksi1_ithf0_1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(Mockito.mock(Instance.class));
        BigDecimal holdingsTotal = accountDataJSF.getHoldingsTotal();
        assertNotNull(holdingsTotal);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingsTotal_Sksi1_ithf0_2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(Mockito.mock(Instance.class));
        BigDecimal holdingsTotal = accountDataJSF.getHoldingsTotal();
        assertEquals(holdingsTotal, BigDecimal.ZERO);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingsTotal_Sksi1_ithf0_3() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(Mockito.mock(Instance.class));
        BigDecimal holdingsTotal = accountDataJSF.getHoldingsTotal();
        assertEquals(holdingsTotal, BigDecimal.ONE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetClosedOrders_GHTV0_fid1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        OrderData[] closedOrders = new OrderData[1];
        accountDataJSF.setClosedOrders(closedOrders);
        assertEquals(closedOrders, accountDataJSF.getClosedOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_LDQU0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(Mockito.mock(Instance.class));
        BigDecimal gainPercent = accountDataJSF.getGainPercent();
        Assertions.assertNotNull(gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenBalance_iUol0_fid1() {
        Instance<TradeServices> services = null;
        AccountDataJSF accountDataJSF = new AccountDataJSF(services);
        BigDecimal expectedOpenBalance = null;
        BigDecimal actualOpenBalance = accountDataJSF.getOpenBalance();
        assertEquals(expectedOpenBalance, actualOpenBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAllOrders_IjnQ0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        OrderData[] allOrders = new OrderData[1];
        accountDataJSF.setAllOrders(allOrders);
        assertEquals(allOrders, accountDataJSF.getAllOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLogoutCount_eyIA0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        int logoutCount = accountDataJSF.getLogoutCount();
        assertEquals(0, logoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingsTotal_luKZ0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal holdingsTotal = new BigDecimal(100);
        accountDataJSF.setHoldingsTotal(holdingsTotal);
        assertEquals(holdingsTotal, accountDataJSF.getHoldingsTotal());
    }
}