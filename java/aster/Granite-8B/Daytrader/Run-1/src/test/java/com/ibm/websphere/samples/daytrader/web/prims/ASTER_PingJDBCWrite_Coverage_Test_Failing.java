/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
public class Aster_PingJDBCWrite_Coverage_Test_Failing {
PingJDBCWrite pingJDBCWrite;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDoPost1_LleX0() throws ServletException, IOException {
		PingJDBCWrite pingjdbcwrite = new PingJDBCWrite();
		HttpServletRequest request = new MockHttpServletRequest();
		HttpServletResponse response = new MockHttpServletResponse();
		pingjdbcwrite.doPost(request, response);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_tAoi0() throws ServletException, IOException {
        PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getParameter("symbol")).thenReturn("symbol");
        when(request.getParameter("price")).thenReturn("100.0");
        when(request.getParameter("volume")).thenReturn("100");
        when(request.getParameter("user")).thenReturn("user");
        when(request.getParameter("action")).thenReturn("action");
        when(request.getParameter("runTimeMode")).thenReturn("runTimeMode");
        when(request.getParameter("orderType")).thenReturn("orderType");
        when(request.getParameter("quantity")).thenReturn("quantity");
        when(request.getParameter("max")).thenReturn("max");
        when(request.getParameter("direct")).thenReturn("direct");
        when(request.getParameter("priceChangeFactor")).thenReturn("priceChangeFactor");
        when(request.getParameter("openPrice")).thenReturn("openPrice");
        when(request.getParameter("closePrice")).thenReturn("closePrice");
        when(request.getParameter("lowPrice")).thenReturn("lowPrice");
        when(request.getParameter("highPrice")).thenReturn("highPrice");
        when(request.getParameter("companyName")).thenReturn("companyName");
        when(request.getParameter("companySymbol")).thenReturn("companySymbol");
        when(request.getParameter("industry")).thenReturn("industry");
        when(request.getParameter("priceVolume")).thenReturn("priceVolume");
        when(request.getParameter("orderID")).thenReturn("orderID");
        when(request.getParameter("sessionID")).thenReturn("sessionID");
        when(request.getParameter("output")).thenReturn("output");
        pingJDBCWrite.doGet(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void init_OlGF0() throws javax.servlet.ServletException {
        pingJDBCWrite = new PingJDBCWrite();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit1_MIEd1() throws javax.servlet.ServletException {
        pingJDBCWrite.init(null);
    }
}