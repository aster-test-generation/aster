/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletLargeContentLength_Test_Passing {
    @Mock
    ServletConfig config;
    @Mock
    HttpServlet httpServlet;
    PingServletLargeContentLength pingServletLargeContentLength;
    @Mock
    HttpServletRequest httpServletRequest;
    @Mock
    HttpServletResponse httpServletResponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        pingServletLargeContentLength = new PingServletLargeContentLength();
        pingServletLargeContentLength.init(config);
        verify(httpServlet).init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        // Set up the expected behavior of the mock objects
        when(httpServletRequest.getContentLengthLong()).thenReturn(1024L);
        // Call the method under test
        pingServletLargeContentLength.doPost(httpServletRequest, httpServletResponse);
        // Verify that the expected behavior was executed
        verify(httpServletRequest).getContentLengthLong();
        verify(httpServletResponse).getWriter();
        verify(httpServletResponse).setContentType("text/plain");
        verify(httpServletResponse).setCharacterEncoding("UTF-8");
        verify(httpServletResponse).getWriter().println("Length: 1024");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_iecL0() {
        PingServletLargeContentLength pingServletLargeContentLength = new PingServletLargeContentLength();
        String servletInfo = pingServletLargeContentLength.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.", servletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet() throws Exception {
        pingServletLargeContentLength = new PingServletLargeContentLength();
        pingServletLargeContentLength.doGet(httpServletRequest, null);
        verify(httpServletRequest).setAttribute("error", "Error: Content length is too large");
    }
}