/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletCDIEventAsync_Test_Failing {
    private static int hitCount2;
    private static String initTime;
    private static int hitCount1;
    PingServletCDIEventAsync pingservletcdieventasync;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    PingServletCDIEventAsync pingServletCDIEventAsync;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletcdieventasync = new PingServletCDIEventAsync();
        pingservletcdieventasync.init(null);
        verify(httpservlet, times(1)).init(null);
        assertEquals(0, hitCount1);
        assertEquals(0, hitCount2);
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_acFq0() {
        pingServletCDIEventAsync = new PingServletCDIEventAsync();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnAsyncEvent2_Ahby1() {
        pingServletCDIEventAsync.onAsyncEvent2("event");
        Assertions.assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_bTEb0() throws IOException {
        PingServletCDIEventAsync servlet = new PingServletCDIEventAsync();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doGet(request, response);
        PrintWriter pw = response.getWriter();
        verify(response).setContentType("text/html");
        verify(response).setCharacterEncoding("UTF-8");
        verify(response).getWriter();
        pw.write("<html><head><title>Ping Servlet CDI Event Async</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet CDI Event Async<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>");
        pw.write("<B>hitCount1: " + hitCount1 + "</B><BR><B>hitCount2: " + hitCount2 + "</B></body></html>");
        pw.flush();
        pw.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletcdieventasync = new PingServletCDIEventAsync();
        pingservletcdieventasync.init(null);
        verify(httpservlet, times(1)).init(null);
        assertEquals(0, hitCount1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletcdieventasync = new PingServletCDIEventAsync();
        pingservletcdieventasync.init(null);
        verify(httpservlet, times(1)).init(null);
        assertEquals(0, hitCount2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_3() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletcdieventasync = new PingServletCDIEventAsync();
        pingservletcdieventasync.init(null);
        verify(httpservlet, times(1)).init(null);
        assertNotNull(initTime);
    }
}