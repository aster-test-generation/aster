/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.InputStream;
import java.util.Properties;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.Properties;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeWebContextListener_Coverage_Test_Passing {
	TradeWebContextListener tradeWebContextListener = new TradeWebContextListener();
    private TradeWebContextListener listener = new TradeWebContextListener();    
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testContextDestroyed_FweL0() {
		tradeWebContextListener.contextDestroyed(null);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrimIterations_csjA0() {
        Properties prop = new Properties();
        InputStream stream = listener.getClass().getResourceAsStream("/properties/daytrader.properties");
        try {
            prop.load(stream);
            TradeConfig.setPrimIterations(Integer.parseInt(prop.getProperty("primIterations")));
        } catch (Exception e) {
            System.out.println("daytrader.properties not found");
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketSummaryInterval_Rlep1() {
        Properties prop = new Properties();
        InputStream stream = listener.getClass().getResourceAsStream("/properties/daytrader.properties");
        try {
            prop.load(stream);
            TradeConfig.setMarketSummaryInterval(Integer.parseInt(prop.getProperty("marketSummaryInterval")));
        } catch (Exception e) {
            System.out.println("daytrader.properties not found");
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongRun_GgIn2() {
        Properties prop = new Properties();
        InputStream stream = listener.getClass().getResourceAsStream("/properties/daytrader.properties");
        try {
            prop.load(stream);
            TradeConfig.setLongRun(Boolean.parseBoolean(prop.getProperty("longRun")));
        } catch (Exception e) {
            System.out.println("daytrader.properties not found");
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRunTimeMode_sjbC3() {
        Properties prop = new Properties();
        InputStream stream = listener.getClass().getResourceAsStream("/properties/daytrader.properties");
        try {
            prop.load(stream);
            TradeConfig.setRunTimeMode(Integer.parseInt(prop.getProperty("runtimeMode")));
        } catch (Exception e) {
            System.out.println("daytrader.properties not found");
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderProcessingMode_AFuc4() {
        Properties prop = new Properties();
        InputStream stream = listener.getClass().getResourceAsStream("/properties/daytrader.properties");
        try {
            prop.load(stream);
            TradeConfig.setOrderProcessingMode(Integer.parseInt(prop.getProperty("orderProcessingMode")));
        } catch (Exception e) {
            System.out.println("daytrader.properties not found");
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_USERS_XAji5() {
        Properties prop = new Properties();
        InputStream stream = listener.getClass().getResourceAsStream("/properties/daytrader.properties");
        try {
            prop.load(stream);
            TradeConfig.setMAX_USERS(Integer.parseInt(prop.getProperty("maxUsers")));
        } catch (Exception e) {
            System.out.println("daytrader.properties not found");
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_QUOTES_UoHU6() {
        Properties prop = new Properties();
        InputStream stream = listener.getClass().getResourceAsStream("/properties/daytrader.properties");
        try {
            prop.load(stream);
            TradeConfig.setMAX_QUOTES(Integer.parseInt(prop.getProperty("maxQuotes")));
        } catch (Exception e) {
            System.out.println("daytrader.properties not found");
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPublishQuotePriceChange_DTjC7() {
        Properties prop = new Properties();
        InputStream stream = listener.getClass().getResourceAsStream("/properties/daytrader.properties");
        try {
            prop.load(stream);
            TradeConfig.setPublishQuotePriceChange(Boolean.parseBoolean(prop.getProperty("publishQuotePriceChange")));
        } catch (Exception e) {
            System.out.println("daytrader.properties not found");
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDisplayOrderAlerts_FKMt8() {
        Properties prop = new Properties();
        InputStream stream = listener.getClass().getResourceAsStream("/properties/daytrader.properties");
        try {
            prop.load(stream);
            TradeConfig.setDisplayOrderAlerts(Boolean.parseBoolean(prop.getProperty("displayOrderAlerts")));
        } catch (Exception e) {
            System.out.println("daytrader.properties not found");
        }
    }
}