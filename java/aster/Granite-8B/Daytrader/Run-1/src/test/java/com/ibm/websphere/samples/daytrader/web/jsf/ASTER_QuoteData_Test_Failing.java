/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteData_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainHTML_qmCX0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        String result = quoteData.getGainHTML();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainHTML_with_open_price_cbXe1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ONE, "symbol");
        String result = quoteData.getGainHTML();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getChangeHTML_with_negative_change_tkxl0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), "AAPL");
        String htmlString = quoteData.getChangeHTML();
        assertEquals("<FONT color=\"#cc0000\">-10.00</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getChangeHTML_with_positive_change_tYsJ1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(90.0), BigDecimal.valueOf(100.0), "AAPL");
        String htmlString = quoteData.getChangeHTML();
        assertEquals("<FONT color=\"#009900\">10.00</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", htmlString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRange_hsRM0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        String range = quoteData.getRange();
        assertNotNull(range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithNullPrice_PsRZ1() {
        QuoteData quoteData = new QuoteData(null, BigDecimal.ZERO, "symbol");
        String range = quoteData.getRange();
        assertEquals("N/A", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithNullOpen_emgv2() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, null, "symbol");
        String range = quoteData.getRange();
        assertEquals("N/A", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithAllNull_upTF4() {
        QuoteData quoteData = new QuoteData(null, null, null);
        String range = quoteData.getRange();
        assertEquals("N/A", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithVolumeAndChange_TmFi6() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", null, null, "companyName", 100.0, 10.0);
        String range = quoteData.getRange();
        assertEquals("100.00 (10.00%)", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNullPrice_KRnT1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setPrice(null);
        assertNull(BigDecimal.ZERO);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGainPercentHTML_KKOt0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), "ABC", BigDecimal.valueOf(110.0), BigDecimal.valueOf(80.0), "ABC Company", 1000.0, 10.0);
        String expected = "<span class=\"gain\">(+10%)</span>";
        String actual = quoteData.getGainPercentHTML();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent6_fHbc5_bJmx0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        quoteData.setGainPercent(BigDecimal.TEN);
        assertEquals(BigDecimal.TEN, quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent7_hWfb6_MEQl0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setGainPercent(BigDecimal.ONE.negate());
        assertEquals(BigDecimal.ONE.negate(), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent8_ccEP7_msgS0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        quoteData.setGainPercent(BigDecimal.ONE.negate());
        assertEquals(BigDecimal.ONE.negate(), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent9_CjdI8_PwCe0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setGainPercent(BigDecimal.TEN.negate());
        assertEquals(BigDecimal.TEN.negate(), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent10_hfII9_fLLv0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        quoteData.setGainPercent(BigDecimal.TEN.negate());
        assertEquals(BigDecimal.TEN.negate(), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithNullSymbol_aPiF3_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, null);
        String range = quoteData.getRange();
        assertEquals("N/A", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithHighAndLow_TCxV5_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ONE, BigDecimal.ZERO, "companyName", 100.0, 10.0);
        String range = quoteData.getRange();
        assertEquals("0.00 - 1.00", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_XZqT0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), "ABC", BigDecimal.valueOf(110.0), BigDecimal.valueOf(80.0), "ABC Corp", 1000.0, 10.0);
        BigDecimal expectedPrice = BigDecimal.valueOf(100.0);
        BigDecimal actualPrice = quoteData.getPrice();
        assertEquals(expectedPrice, actualPrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGain_uPrG0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        BigDecimal gain = quoteData.getGain();
        Assertions.assertEquals(BigDecimal.ZERO, gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNullPrice_KRnT1_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setPrice(null);
        assertEquals(BigDecimal.ZERO, quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNegativePrice_tHrX2_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setPrice(BigDecimal.valueOf(-1));
        assertEquals(BigDecimal.ZERO, quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGainPercent_ujXU0_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100"), new BigDecimal("10"), "ABC");
        assertEquals(new BigDecimal("90"), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGainPercent2_XAXA1_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("10"), new BigDecimal("100"), "ABC", new BigDecimal("110"), new BigDecimal("90"), "XYZ", 1000.0, 10.0);
        assertEquals(new BigDecimal("90"), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent2_QNOd1_eBOk0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        quoteData.setGainPercent(BigDecimal.ZERO);
        assertEquals(BigDecimal.ZERO, quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent4_ILRh3_EaMq0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        quoteData.setGainPercent(BigDecimal.ONE);
        assertEquals(BigDecimal.ONE, quoteData.getGainPercent());
    }
}