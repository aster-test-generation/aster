/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.http2;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.PushBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletPush_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingServletPush pingservletpush;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletpush = new PingServletPush();
        pingservletpush.init(httpservlet);
        verify(httpservlet, times(1)).init(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullHttpServletRequest_SoOH0() throws ServletException, IOException {
        PingServletPush pingServletPush = new PingServletPush();
        HttpServletRequest req = null;
        HttpServletResponse resp = mock(HttpServletResponse.class);
        pingServletPush.doGet(req, resp);
        verify(resp, times(1)).sendError(HttpServletResponse.SC_BAD_REQUEST);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullHttpServletResponse_oeWb1() throws ServletException, IOException {
        PingServletPush pingServletPush = new PingServletPush();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = null;
        pingServletPush.doGet(req, resp);
        verify(resp, times(1)).sendError(HttpServletResponse.SC_BAD_REQUEST);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidHttpServletRequestAndHttpServletResponse_UTge2() throws ServletException, IOException {
        PingServletPush pingServletPush = new PingServletPush();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        PushBuilder pushBuilder = mock(PushBuilder.class);
        when(req.newPushBuilder()).thenReturn(pushBuilder);
        pingServletPush.doGet(req, resp);
        verify(pushBuilder, times(1)).path("images/graph.gif");
        verify(pushBuilder, times(1)).push();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidHttpServletRequestAndHttpServletResponseAndPushBuilderReturnNull_cnyL3() throws ServletException, IOException {
        PingServletPush pingServletPush = new PingServletPush();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        PushBuilder pushBuilder = null;
        when(req.newPushBuilder()).thenReturn(pushBuilder);
        pingServletPush.doGet(req, resp);
        verify(resp, times(1)).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_dXSX0() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        pingservletpush = new PingServletPush();
        PushBuilder pushBuilder = httpservletrequest.newPushBuilder();
        when(httpservletrequest.newPushBuilder()).thenReturn(pushBuilder);
        when(pushBuilder.path("images/graph.gif")).thenReturn(pushBuilder);
        doReturn(true).when(pushBuilder).push();
        pingservletpush.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).newPushBuilder();
        verify(pushBuilder, times(1)).path("images/graph.gif");
        verify(pushBuilder, times(1)).push();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullHttpServletResponse_oeWb1_fid1() throws ServletException, IOException {
        PingServletPush pingServletPush = new PingServletPush();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        pingServletPush.doGet(req, resp);
        verify(resp, times(1)).sendError(HttpServletResponse.SC_BAD_REQUEST);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidHttpServletRequestAndHttpServletResponseAndPushBuilderReturnNull_cnyL3_fid1() throws ServletException, IOException {
        PingServletPush pingServletPush = new PingServletPush();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        PushBuilder pushBuilder = mock(PushBuilder.class);
        when(req.newPushBuilder()).thenReturn(pushBuilder);
        pingServletPush.doGet(req, resp);
        verify(resp, times(1)).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
}