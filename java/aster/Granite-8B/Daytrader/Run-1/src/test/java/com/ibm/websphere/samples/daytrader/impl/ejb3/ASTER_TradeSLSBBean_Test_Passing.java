/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
    private static TradeSLSBBean tradeSLSBBean;
    private static BigDecimal oldPrice;
    private EntityManager entityManager;
    TradeSLSBBean tradeslsbbean;
    private AccountProfileDataBean profile;
    private AccountDataBean account;
    private QuoteDataBean quote;
    private HoldingDataBean holding;
    private OrderDataBean order;
    private static BigDecimal changeFactor;
    private static double sharesTraded;

    @BeforeAll
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_aTWc0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("user1", "password1", "fullname1", "address1", "email1", "creditcard1", new BigDecimal(1000.00));
        assertNotNull(account);
    }

    @BeforeAll
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_aTWc0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("user1", "password1", "fullname1", "address1", "email1", "creditcard1", new BigDecimal(1000.00));
        assertEquals("user1", account.getProfile().getUserID());
    }

    @BeforeAll
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_aTWc0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("user1", "password1", "fullname1", "address1", "email1", "creditcard1", new BigDecimal(1000.00));
        assertEquals(new BigDecimal(1000.00), account.getBalance());
    }

    @BeforeAll
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_aTWc0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("user1", "password1", "fullname1", "address1", "email1", "creditcard1", new BigDecimal(1000.00));
        assertEquals(new BigDecimal(1000.00), account.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_HSmz1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("user2", "password2", "fullname2", "address2", "email2", "creditcard2", new BigDecimal(2000.00));
        assertNotNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_HSmz1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("user2", "password2", "fullname2", "address2", "email2", "creditcard2", new BigDecimal(2000.00));
        assertEquals("user2", account.getProfile().getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_HSmz1_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("user2", "password2", "fullname2", "address2", "email2", "creditcard2", new BigDecimal(2000.00));
        assertEquals(new BigDecimal(2000.00), account.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_HSmz1_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("user2", "password2", "fullname2", "address2", "email2", "creditcard2", new BigDecimal(2000.00));
        assertEquals(new BigDecimal(2000.00), account.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_tisC0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        Assertions.assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_tisC0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        Assertions.assertTrue(holdings.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidPassword_dQAJ1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.login("user1", "invalidPassword");
        } catch (RollbackException e) {
            assertTrue(e.getMessage().contains("No such user: user1"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_NVTI0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(true);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_cLoH0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_cLoH0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_cLoH0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(quoteDataBean.getPrice().multiply(changeFactor).setScale(2, BigDecimal.ROUND_HALF_UP), result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_cLoH0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_cLoH0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(quoteDataBean.getLow(), result.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_cLoH0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_cLoH0_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_cLoH0_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(quoteDataBean.getVolume() + sharesTraded, result.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_qnti0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_FrFu0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user123";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_FrFu0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user123";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertFalse(orders.isEmpty());
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_oBFu0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean createdQuote = tradeSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
        assertNotNull(createdQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ygmY0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ygmY0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals("123 Main St", updatedProfileData.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ygmY0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals("password", updatedProfileData.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ygmY0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals("John Doe", updatedProfileData.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ygmY0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals("1234567890123456", updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ygmY0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals("johndoe@example.com", updatedProfileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndTwoPhase_cvuy0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 123;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndTwoPhaseFalse_aIpv1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 456;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithNegativeOrderIDAndTwoPhaseTrue_szYe2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = -123;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertEquals("user123", accountDataBean.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertTrue(accountDataBean.getBalance().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertTrue(accountDataBean.getOpenBalance().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertTrue(accountDataBean.getLogoutCount() >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertTrue(accountDataBean.getLoginCount() >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertTrue(accountDataBean.getHoldings().size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_11() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0_12() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertTrue(accountDataBean.getOrders().size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_nQJX0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUserID");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_nQJX0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUserID");
        assertEquals("randomUserID", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase1_QzLX0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        try {
            QuoteDataBean actual = tradeSLSBBean.pingTwoPhase(quoteDataBean.getSymbol());
            assertEquals(quoteDataBean, actual);
        } catch (Exception e) {
            fail(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testOrderCompleted_uizC1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Integer orderID = 123;
        tradeSLSBBean.orderCompleted(userID, orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_gLHc0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "sampleUserID"; // Replace with actual user ID
        tradeSLSBBean.logout(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImpl_LQLV0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int result = tradeSLSBBean.getImpl();
        assertEquals(TradeConfig.EJB3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testbuy() throws Exception {
        tradeslsbbean = new TradeSLSBBean();
        entityManager = mock(EntityManager.class);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        when(profile.getAccount()).thenReturn(account);
        when(entityManager.find(QuoteDataBean.class, "symbol123")).thenReturn(quote);
        when(entityManager.find(HoldingDataBean.class, 123)).thenReturn(holding);
        when(tradeslsbbean.createOrder(account, quote, holding, "buy", 100.0)).thenReturn(order);
        when(order.getOrderID()).thenReturn(123);
        when(account.getBalance()).thenReturn(new BigDecimal(1000.0));
        when(quote.getPrice()).thenReturn(new BigDecimal(10.0));
        when(order.getOrderFee()).thenReturn(new BigDecimal(1.0));
        BigDecimal total = new BigDecimal(100.0).multiply(new BigDecimal(10.0)).add(new BigDecimal(1.0));
        tradeslsbbean.buy("user123", "symbol123", 100.0, TradeConfig.SYNCH);
        verify(account, times(1)).setBalance(account.getBalance().subtract(total));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithNullUserID_SuAf1() {
        String userID = null;
        String symbol = "symbol";
        double quantity = 100.0;
        int orderProcessingMode = 1; // Assuming SYNCH mode
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
            fail("Expected IllegalArgumentException for null userID");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithEmptyUserID_gHrY2() {
        String userID = "";
        String symbol = "symbol";
        double quantity = 100.0;
        int orderProcessingMode = 1; // Assuming SYNCH mode
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
            fail("Expected IllegalArgumentException for empty userID");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithInvalidOrderProcessingMode_uErj3() {
        String userID = "user";
        String symbol = "symbol";
        double quantity = 100.0;
        int orderProcessingMode = 3; // Invalid mode
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
            fail("Expected IllegalArgumentException for invalid order processing mode");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithNullSymbol_ziVs4() {
        String userID = "user";
        String symbol = null;
        double quantity = 100.0;
        int orderProcessingMode = 1; // Assuming SYNCH mode
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
            fail("Expected IllegalArgumentException for null symbol");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithEmptySymbol_BENo5() {
        String userID = "user";
        String symbol = "";
        double quantity = 100.0;
        int orderProcessingMode = 1; // Assuming SYNCH mode
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
            fail("Expected IllegalArgumentException for empty symbol");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_YXQx0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_YXQx0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
        assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithNullUserID_zfFq1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell(null, 1, TradeConfig.SYNCH);
        } catch (EJBException e) {
            assertTrue(e.getCause().getMessage().contains("User ID cannot be null"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidHoldingID_HAtI2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell("user1", -1, TradeConfig.SYNCH);
        } catch (EJBException e) {
            assertTrue(e.getCause().getMessage().contains("Holding ID cannot be null"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidOrderProcessingMode_aMup3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell("user1", 1, -1);
        } catch (EJBException e) {
            assertTrue(e.getCause().getMessage().contains("Invalid order processing mode"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithHoldingNotFound_MrZh4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.sell("user1", 100, TradeConfig.SYNCH);
        } catch (EJBException e) {
            assertTrue(e.getCause().getMessage().contains("Holding not found"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_rlIL0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(1, true);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_NullOrderID_Csdh1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(null, true);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_ZeroOrderID_VThl2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(0, true);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_NegativeOrderID_KniR3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(-1, true);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_TwoPhaseFalse_RZdT4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Future<OrderDataBean> future = tradeSLSBBean.completeOrderAsync(1, false);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewTradeSLSBBeanOrderCompleted_BoKi0() {
        {
            throw new UnsupportedOperationException("TradeSLSBBean:orderCompleted method not supported");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_ZEAn0_Wyiz0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 1000.0;
        double netValue = 1200.0;
        double expected = 0.2;
        double actual = 0.0;
        try {
            actual = tradeSLSBBean.investmentReturn(investment, netValue);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual, 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_rjhR0_ijsf0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = null;
        try {
            account = tradeSLSBBean.login("user1", "password1");
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(account);
        assertEquals("user1", account.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChangeWithZeroSharesTraded_qaCi3() {
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChangeWithNegativeSharesTraded_vlCo4() {
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, -100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_aTWc0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("user1", "password1", "fullname1", "address1", "email1", "creditcard1", new BigDecimal(1000.00));
        assertNotNull(account);
        assertEquals("user1", account.getProfile().getUserID());
        assertEquals(new BigDecimal(1000.00), account.getBalance());
        assertEquals(new BigDecimal(1000.00), account.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_HSmz1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = tradeSLSBBean.register("user2", "password2", "fullname2", "address2", "email2", "creditcard2", new BigDecimal(2000.00));
        assertNotNull(account);
        assertEquals("user2", account.getProfile().getUserID());
        assertEquals(new BigDecimal(2000.00), account.getBalance());
        assertEquals(new BigDecimal(2000.00), account.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_tisC0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        Assertions.assertNotNull(holdings);
        Assertions.assertTrue(holdings.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_cLoH0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(result);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
        assertEquals(quoteDataBean.getPrice().multiply(changeFactor).setScale(2, BigDecimal.ROUND_HALF_UP), result.getPrice());
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
        assertEquals(quoteDataBean.getLow(), result.getLow());
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.01);
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
        assertEquals(quoteDataBean.getVolume() + sharesTraded, result.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_FrFu0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user123";
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertNotNull(orders);
        assertFalse(orders.isEmpty());
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetQuote_GhXR2() {
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        entityManager.persist(quoteDataBean);
        entityManager.flush();
        QuoteDataBean retrievedQuote = tradeSLSBBean.getQuote(quoteDataBean.getSymbol());
        assertNotNull(retrievedQuote);
        assertEquals(quoteDataBean.getCompanyName(), retrievedQuote.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), retrievedQuote.getPrice());
        assertEquals(quoteDataBean.getOpen(), retrievedQuote.getOpen());
        assertEquals(quoteDataBean.getLow(), retrievedQuote.getLow());
        assertEquals(quoteDataBean.getChange(), retrievedQuote.getChange());
        assertEquals(quoteDataBean.getHigh(), retrievedQuote.getHigh());
        assertEquals(quoteDataBean.getSymbol(), retrievedQuote.getSymbol());
        assertEquals(quoteDataBean.getVolume(), retrievedQuote.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ygmY0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
        assertEquals("123 Main St", updatedProfileData.getAddress());
        assertEquals("password", updatedProfileData.getPassword());
        assertEquals("John Doe", updatedProfileData.getFullName());
        assertEquals("1234567890123456", updatedProfileData.getCreditCard());
        assertEquals("johndoe@example.com", updatedProfileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_kGEZ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean);
        assertEquals("user123", accountDataBean.getProfileID());
        assertTrue(accountDataBean.getBalance().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(accountDataBean.getOpenBalance().compareTo(BigDecimal.ZERO) > 0);
        assertNotNull(accountDataBean.getCreationDate());
        assertNotNull(accountDataBean.getLastLogin());
        assertTrue(accountDataBean.getLogoutCount() >= 0);
        assertTrue(accountDataBean.getLoginCount() >= 0);
        assertNotNull(accountDataBean.getHoldings());
        assertTrue(accountDataBean.getHoldings().size() > 0);
        assertNotNull(accountDataBean.getOrders());
        assertTrue(accountDataBean.getOrders().size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_nQJX0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUserID");
        assertNotNull(accountProfileDataBean);
        assertEquals("randomUserID", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_YXQx0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean order = tradeSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
        assertNotNull(order);
        assertEquals("open", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_Vxtr2() {
        HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_qEgv0() {
        tradeSLSBBean = new TradeSLSBBean();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_gEfo1() {
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("user123");
        assertNotNull(closedOrders);
        assertEquals(3, closedOrders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersWithEmptyUser_sDaX2() {
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders("");
        assertNotNull(closedOrders);
        assertTrue(closedOrders.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrdersWithNullUser_cfqm3() {
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(null);
        assertNotNull(closedOrders);
        assertTrue(closedOrders.isEmpty());
    }
}