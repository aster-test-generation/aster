/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndFloat_Ftkc0() {
        float result = TradeConfig.rndFloat(10);
        assertTrue(result >= 0 && result < 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndFloat_izbr1() {
        float result = TradeConfig.rndFloat(0);
        assertTrue(result == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndFloat_xlXJ2() {
        float result = TradeConfig.rndFloat(1);
        assertFalse(result == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndFloat_nIsS3() {
        float result = TradeConfig.rndFloat(-1);
        assertFalse(result >= 0 && result < 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndFloat_SJJe4() {
        float result = TradeConfig.rndFloat(Integer.MAX_VALUE);
        assertTrue(result >= 0 && result < Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndFloat_CYpd5() {
        float result = TradeConfig.rndFloat(Integer.MIN_VALUE);
        assertFalse(result >= 0 && result < Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccessMode_BEsJ0() {
        int result = TradeConfig.getAccessMode();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccessMode_mcsP1() {
        int result = TradeConfig.getAccessMode();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarketSummaryInterval_tQkq0() {
        TradeConfig tradeConfig = new TradeConfig();
        int marketSummaryInterval = TradeConfig.getMarketSummaryInterval();
        assertEquals(20, marketSummaryInterval);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_tQbI0_1() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] runTimeModeNames = tradeConfig.getRunTimeModeNames();
        assertNotNull(runTimeModeNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_tQbI0_2() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] runTimeModeNames = tradeConfig.getRunTimeModeNames();
        assertNotEquals(0, runTimeModeNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrimIterations_aXOn0() {
        TradeConfig tradeConfig = new TradeConfig();
        int expected = 1; // Replace with the expected value
        int actual = tradeConfig.getPrimIterations();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_rAfz0_1() {
        String address = TradeConfig.rndAddress();
        assertNotNull(address);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_rAfz0_2() {
        String address = TradeConfig.rndAddress();
        assertFalse(address.matches("^[0-9]{4} Oak St.$"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetJDBCDriverNeedsGlobalTransation_wKQB0() {
        TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
        assertTrue(TradeConfig.JDBCDriverNeedsGlobalTransation);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_xSSj0() {
        String result = TradeConfig.rndFullName();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioMixes_BWXC0_1() {
        TradeConfig tradeConfig = new TradeConfig();
        int[][] scenarioMixes = tradeConfig.getScenarioMixes();
        for (int[] mix : scenarioMixes) {
        }
        assertNotNull(scenarioMixes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetScenarioMixes_BWXC0_2() {
        TradeConfig tradeConfig = new TradeConfig();
        int[][] scenarioMixes = tradeConfig.getScenarioMixes();
        for (int[] mix : scenarioMixes) {
        }
        assertTrue(scenarioMixes.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_QUOTES_LRIi0() {
        TradeConfig tradeConfig = new TradeConfig();
        int expected = 100;
        int actual = tradeConfig.getMAX_QUOTES();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndQuantity_YVBp0_1() {
        float result = TradeConfig.rndQuantity();
        assertTrue(result > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndQuantity_YVBp0_2() {
        float result = TradeConfig.rndQuantity();
        assertTrue(result <= 201);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongRun_CTcd0() {
        TradeConfig tradeConfig = new TradeConfig();
        boolean longRun = tradeConfig.getLongRun();
        assertTrue(longRun);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDisplayOrderAlerts_PFyR0() {
        TradeConfig tradeConfig = new TradeConfig();
        boolean displayOrderAlerts = tradeConfig.getDisplayOrderAlerts();
        assertTrue(displayOrderAlerts);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetJDBCDriverNeedsGlobalTransation_OjGJ0() {
        boolean expected = false;
        boolean actual = TradeConfig.getJDBCDriverNeedsGlobalTransation();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndNewUserID_AdJV0() {
        String result = TradeConfig.rndNewUserID();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_HOLDINGS_EHii0() {
        int expected = 10; // Assuming MAX_HOLDINGS is set to 10 in the TradeConfig class
        int actual = TradeConfig.getMAX_HOLDINGS();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_xsFu2() {
        int r = TradeConfig.rndInt(100);
        assertTrue(r >= 0 && r <= 100);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrimIterations_glwq0() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setPrimIterations(10);
        assertEquals(10, tradeConfig.getPrimIterations());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrimIterations_NdQx1() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setPrimIterations(0);
        assertEquals(0, tradeConfig.getPrimIterations());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrimIterations_YmWU2() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setPrimIterations(-10);
        assertEquals(-10, tradeConfig.getPrimIterations());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrimIterations_pHol3() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setPrimIterations(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, tradeConfig.getPrimIterations());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrimIterations_rAxf4() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setPrimIterations(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, tradeConfig.getPrimIterations());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPage_WJjT0() {
        TradeConfig tradeConfig = new TradeConfig();
        String page = tradeConfig.getPage(0);
        assertEquals("Expected page content", "Expected page content", page);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUpdateQuotePrices_YxZh0() {
        boolean result = TradeConfig.getUpdateQuotePrices();
        boolean expected = true;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBoolean_tQLC0() {
        boolean result = TradeConfig.rndBoolean();
        assertTrue(result == true || result == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPublishQuotePriceChange_Vzyn0() {
        boolean expected = true;
        boolean actual = TradeConfig.getPublishQuotePriceChange();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_parmNull_SeOB0() {
        TradeConfig.setConfigParam(null, "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_parmEmpty_sfbN1() {
        TradeConfig.setConfigParam("", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_valueNull_oSTd2() {
        TradeConfig.setConfigParam("parm", null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_valueEmpty_KMEC3() {
        TradeConfig.setConfigParam("parm", "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_orderProcessingMode_tqHc4() {
        TradeConfig.setConfigParam("orderProcessingMode", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_accessMode_mQhB5() {
        TradeConfig.setConfigParam("accessMode", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_WebInterface_rICG6() {
        TradeConfig.setConfigParam("WebInterface", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_maxUsers_SFuq7() {
        TradeConfig.setConfigParam("maxUsers", "100");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_maxQuotes_zbix8() {
        TradeConfig.setConfigParam("maxQuotes", "100");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_primIterations_lfkq9() {
        TradeConfig.setConfigParam("primIterations", "100");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWebInterface_gHDs0() {
        TradeConfig tradeConfig = new TradeConfig();
        int result = tradeConfig.getWebInterface();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_kTOx0() {
        assertTrue(TradeConfig.rndInt(10) >= 0 && TradeConfig.rndInt(10) <= 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandom_BJGO0() {
        double result = TradeConfig.random();
        assertTrue(result >= 0.0 && result < 1.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetOrderProcessingMode_dAKs0() {
        TradeConfig tradeConfig = new TradeConfig();
        int expectedOrderProcessingMode = 0; // Replace with the expected value
        int actualOrderProcessingMode = tradeConfig.getOrderProcessingMode();
        assertEquals(expectedOrderProcessingMode, actualOrderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbols1_gXmr0() {
        String symbols = TradeConfig.rndSymbols();
        assertTrue(symbols.contains("s:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbols2_PQGo1() {
        String symbols = TradeConfig.rndSymbols();
        assertTrue(symbols.split(",").length <= TradeConfig.QUOTES_PER_PAGE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor_DwdT0_1() {
        BigDecimal percentGainBD = TradeConfig.getRandomPriceChangeFactor();
        assertNotNull(percentGainBD);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor_DwdT0_2() {
        BigDecimal percentGainBD = TradeConfig.getRandomPriceChangeFactor();
        assertTrue(percentGainBD.compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserID_CXPU0() {
        String userID = TradeConfig.getUserID();
        assertNotNull(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbol_loqh0_1() {
        String result = TradeConfig.rndSymbol();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbol_loqh0_2() {
        String result = TradeConfig.rndSymbol();
        assertTrue(result.startsWith("s:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbol_loqh0_3() {
        String result = TradeConfig.rndSymbol();
        assertTrue(result.length() > 3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeMode_Hgni0() {
        TradeConfig tradeConfig = new TradeConfig();
        int expectedMode = 0; // Assuming default value of runTimeMode is 0
        int actualMode = tradeConfig.getRunTimeMode();
        assertEquals(expectedMode, actualMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void rndBalanceTest_yOIr0() {
        String expected = "1000000";
        String actual = TradeConfig.rndBalance();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_tQbI0() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] runTimeModeNames = tradeConfig.getRunTimeModeNames();
        assertNotNull(runTimeModeNames);
        assertNotEquals(0, runTimeModeNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndQuantity_YVBp0() {
        float result = TradeConfig.rndQuantity();
        assertTrue(result > 0);
        assertTrue(result <= 201);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomPriceChangeFactor_DwdT0() {
        BigDecimal percentGainBD = TradeConfig.getRandomPriceChangeFactor();
        assertNotNull(percentGainBD);
        assertTrue(percentGainBD.compareTo(BigDecimal.ZERO) > 0);
        assertTrue(percentGainBD.compareTo(BigDecimal.ONE) <= 0);
    }
}