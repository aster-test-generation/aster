/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCRead2JSP_Test_Passing {
    @Mock
    ServletConfig config;
    @Mock
    HttpServlet httpServlet;
    @InjectMocks
    PingJDBCRead2JSP pingjdbcread2jsp;
    @Mock
    HttpServlet httpservlet;
    @Mock
    ServletConfig servletconfig;
    @Mock
    HttpServletRequest httpservletrequest;
    @Mock
    ServletContext servletcontext;
    @Mock
    HttpServletResponse httpservletresponse;
    QuoteDataBean quoteData;
    String symbol;
    int iter;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        MockitoAnnotations.openMocks(this);
        pingjdbcread2jsp.init(config);
        verify(httpServlet).init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_WKgU0() {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        String servletInfo = pingJDBCRead2JSP.getServletInfo();
        assertTrue("Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class".equals(servletInfo));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_aUVo0_iUiR0() throws ServletException, IOException {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        String symbol = "TEST_SYMBOL";
        QuoteDataBean quoteData = new QuoteDataBean();
        ServletContext ctx = mock(ServletContext.class);
        req.setAttribute("quoteData", quoteData);
        ctx.getRequestDispatcher("/quoteDataPrimitive.jsp").include(req, res);
        verify(req).setAttribute("quoteData", quoteData);
    }
}