/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;
import java.math.BigDecimal;
import java.util.Collection;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DirectSLSBBean_Coverage_Test_Failing {
private DirectSLSBBean obj;
private static TradeDirect tradeDirect;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_FmFg0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = directSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCreateOrderWithInSessionTrue_anga0() throws Exception {
		DirectSLSBBean tradeDirect = new DirectSLSBBean();
		AccountDataBean account = new AccountDataBean();
		QuoteDataBean quote = new QuoteDataBean();
		HoldingDataBean holding = new HoldingDataBean();
		String orderType = "BUY";
		double quantity = 100.0;
		tradeDirect.setInSession(true);
		OrderDataBean orderDataBean = tradeDirect.createOrder(account, quote, holding, orderType, quantity);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCreateOrderWithInSessionFalse_nJWT1() throws Exception {
		DirectSLSBBean tradeDirect = new DirectSLSBBean();
		AccountDataBean account = new AccountDataBean();
		QuoteDataBean quote = new QuoteDataBean();
		HoldingDataBean holding = new HoldingDataBean();
		String orderType = "BUY";
		double quantity = 100.0;
		tradeDirect.setInSession(false);
		OrderDataBean orderDataBean = tradeDirect.createOrder(account, quote, holding, orderType, quantity);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_PpwR1_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        Collection<?> allQuotes = directSLSBBean.getAllQuotes();
        assertNotNull(allQuotes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_PpwR1_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        Collection<?> allQuotes = directSLSBBean.getAllQuotes();
        assertFalse(allQuotes.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithValidCredentials_dACW0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.login("validUserID", "validPassword");
        assertTrue(accountDataBean != null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidCredentials_BbqY1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = directSLSBBean.login("invalidUserID", "invalidPassword");
        assertTrue(accountDataBean == null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetHoldings_Kpow0() throws Exception {
		DirectSLSBBean directSLSBBean = new DirectSLSBBean();
		String userID = "testUser";
		Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetHoldingsWithInvalidUserID_kSjU1() throws Exception {
		DirectSLSBBean directSLSBBean = new DirectSLSBBean();
		String userID = "invalidUser";
		Collection<HoldingDataBean> holdings = directSLSBBean.getHoldings(userID);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_QrJT0() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        tradeDirect.cancelOrder(1, true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_WeKO1() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        tradeDirect.cancelOrder(2, true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_ILYF2() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        tradeDirect.cancelOrder(3, true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetQuote1_zDRh0() throws Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	tradeDirect.setInSession(true);
	QuoteDataBean quoteDataBean = tradeDirect.getQuote("symbol");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume1_TmgB0_1() throws java.lang.Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
	String symbol = quoteDataBean.getSymbol();
	BigDecimal newPrice = quoteDataBean.getPrice();
	double sharesTraded = 100;
	tradeDirect.setInSession(true);
	QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
	Assertions.assertEquals(quoteDataBean.getCompanyName(), updatedQuote.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume1_TmgB0_2() throws java.lang.Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
	String symbol = quoteDataBean.getSymbol();
	BigDecimal newPrice = quoteDataBean.getPrice();
	double sharesTraded = 100;
	tradeDirect.setInSession(true);
	QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
	Assertions.assertEquals(quoteDataBean.getOpen(), updatedQuote.getOpen());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume1_TmgB0_3() throws java.lang.Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
	String symbol = quoteDataBean.getSymbol();
	BigDecimal newPrice = quoteDataBean.getPrice();
	double sharesTraded = 100;
	tradeDirect.setInSession(true);
	QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
	Assertions.assertEquals(quoteDataBean.getLow(), updatedQuote.getLow());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume1_TmgB0_4() throws java.lang.Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
	String symbol = quoteDataBean.getSymbol();
	BigDecimal newPrice = quoteDataBean.getPrice();
	double sharesTraded = 100;
	tradeDirect.setInSession(true);
	QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
	Assertions.assertEquals(quoteDataBean.getPrice(), updatedQuote.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume1_TmgB0_5() throws java.lang.Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
	String symbol = quoteDataBean.getSymbol();
	BigDecimal newPrice = quoteDataBean.getPrice();
	double sharesTraded = 100;
	tradeDirect.setInSession(true);
	QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
	Assertions.assertEquals(quoteDataBean.getHigh(), updatedQuote.getHigh());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume1_TmgB0_6() throws java.lang.Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
	String symbol = quoteDataBean.getSymbol();
	BigDecimal newPrice = quoteDataBean.getPrice();
	double sharesTraded = 100;
	tradeDirect.setInSession(true);
	QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
	Assertions.assertEquals(quoteDataBean.getSymbol(), updatedQuote.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume1_TmgB0_7() throws java.lang.Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
	String symbol = quoteDataBean.getSymbol();
	BigDecimal newPrice = quoteDataBean.getPrice();
	double sharesTraded = 100;
	tradeDirect.setInSession(true);
	QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
	Assertions.assertEquals(quoteDataBean.getVolume(), updatedQuote.getVolume());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithSetInSessionTrue_zEun0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("TestCompany");
    quoteDataBean.setSymbol("TestSymbol");
    quoteDataBean.setPrice(new BigDecimal(100.0));
    QuoteDataBean actual = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertNotNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithSetInSessionFalse_VBtF1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("TestCompany");
    quoteDataBean.setSymbol("TestSymbol");
    quoteDataBean.setPrice(new BigDecimal(100.0));
    QuoteDataBean actual = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted1_IhdA0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.orderCompleted("1", 1);
        assertTrue(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted2_NtJu1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.orderCompleted("2", 2);
        assertTrue(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted3_vWcL2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.orderCompleted("3", 3);
        assertTrue(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderAsyncWithTwoPhaseTrue_BBXK0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.completeOrderAsync(1, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderAsyncWithTwoPhaseFalse_pPyk1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.completeOrderAsync(1, false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_RfDp0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setPurchasePrice(new BigDecimal(100));
        directSLSBBean.setInSession(true);
        HoldingDataBean actualHoldingDataBean = directSLSBBean.getHolding(holdingDataBean.getHoldingID());
        assertEquals(holdingDataBean.getPurchasePrice(), actualHoldingDataBean.getPurchasePrice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingWithException_YtPP1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setPurchasePrice(new BigDecimal(100));
        directSLSBBean.setInSession(false);
        try {
            directSLSBBean.getHolding(holdingDataBean.getHoldingID());
            fail("Exception expected");
        } catch (Exception e) {
            assertTrue(true);
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell1_tYSJ0() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    tradeSLSB.setInSession(true);
    Integer holdingID = null;
    int orderProcessingMode = 1;
    String userID = "";
    OrderDataBean orderdata = tradeSLSB.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderdata);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell2_AgtJ1() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    tradeSLSB.setInSession(true);
    Integer holdingID = 1;
    int orderProcessingMode = 1;
    String userID = "";
    OrderDataBean orderdata = tradeSLSB.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderdata);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell3_PwgJ2() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    tradeSLSB.setInSession(true);
    Integer holdingID = 1;
    int orderProcessingMode = 1;
    String userID = "1";
    OrderDataBean orderdata = tradeSLSB.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(orderdata);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_VAJK1_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "123";
        Collection<?> closedOrders = tradeDirect.getClosedOrders(userID);
        assertNotNull(closedOrders);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_VAJK1_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "123";
        Collection<?> closedOrders = tradeDirect.getClosedOrders(userID);
        assertTrue(!closedOrders.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy1_umaH0() throws Exception {
	DirectSLSBBean tradeSLSB = new DirectSLSBBean();
	String userID = "user1";
	String symbol = "symbol1";
	double quantity = 100.0;
	int orderProcessingMode = 1;
	tradeSLSB.setInSession(true);
	OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
	if (orderProcessingMode == TradeConfig.ASYNCH) {
		tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
	}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy2_svZO1() throws Exception {
	DirectSLSBBean tradeSLSB = new DirectSLSBBean();
	String userID = "user2";
	String symbol = "symbol2";
	double quantity = 200.0;
	int orderProcessingMode = 2;
	tradeSLSB.setInSession(true);
	OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
	if (orderProcessingMode == TradeConfig.ASYNCH) {
		tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
	}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy3_irDd2() throws Exception {
	DirectSLSBBean tradeSLSB = new DirectSLSBBean();
	String userID = "user3";
	String symbol = "symbol3";
	double quantity = 300.0;
	int orderProcessingMode = 3;
	tradeSLSB.setInSession(true);
	OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
	if (orderProcessingMode == TradeConfig.ASYNCH) {
		tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
	}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy4_ijqh3() throws Exception {
	DirectSLSBBean tradeSLSB = new DirectSLSBBean();
	String userID = "user4";
	String symbol = "symbol4";
	double quantity = 400.0;
	int orderProcessingMode = 4;
	tradeSLSB.setInSession(true);
	OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
	if (orderProcessingMode == TradeConfig.ASYNCH) {
		tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
	}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy5_iuxb4() throws Exception {
	DirectSLSBBean tradeSLSB = new DirectSLSBBean();
	String userID = "user5";
	String symbol = "symbol5";
	double quantity = 500.0;
	int orderProcessingMode = 5;
	tradeSLSB.setInSession(true);
	OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
	if (orderProcessingMode == TradeConfig.ASYNCH) {
		tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
	}
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_PpwR1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        Collection<?> allQuotes = directSLSBBean.getAllQuotes();
        assertNotNull(allQuotes);
        assertFalse(allQuotes.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_OvxE3() throws Exception {
        String userID = "123";
        Collection<?> orders = obj.getOrders(userID);
        assertNotNull(orders);
        assertTrue(orders.size() > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume1_TmgB0() throws java.lang.Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
	String symbol = quoteDataBean.getSymbol();
	BigDecimal newPrice = quoteDataBean.getPrice();
	double sharesTraded = 100;
	tradeDirect.setInSession(true);
	QuoteDataBean updatedQuote = tradeDirect.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
	Assertions.assertEquals(quoteDataBean.getCompanyName(), updatedQuote.getCompanyName());
	Assertions.assertEquals(quoteDataBean.getOpen(), updatedQuote.getOpen());
	Assertions.assertEquals(quoteDataBean.getLow(), updatedQuote.getLow());
	Assertions.assertEquals(quoteDataBean.getPrice(), updatedQuote.getPrice());
	Assertions.assertEquals(quoteDataBean.getHigh(), updatedQuote.getHigh());
	Assertions.assertEquals(quoteDataBean.getSymbol(), updatedQuote.getSymbol());
	Assertions.assertEquals(quoteDataBean.getVolume(), updatedQuote.getVolume());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile1_xZRR0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    profileData.setUserID("1");
    profileData.setPassword("1");
    profileData.setFullName("1");
    profileData.setAddress("1");
    profileData.setEmail("1");
    profileData.setCreditCard("1");
    tradeDirect.setInSession(true);
    directSLSBBean.updateAccountProfile(profileData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccountProfileData1_PgSg0() throws Exception {
	DirectSLSBBean tradeBean = new DirectSLSBBean();
	AccountProfileDataBean accountProfileData = tradeBean.getAccountProfileData("1");
	 tradeDirect.setInSession(true);
	Assertions.assertNotNull(accountProfileData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_VAJK1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "123";
        Collection<?> closedOrders = tradeDirect.getClosedOrders(userID);
        assertNotNull(closedOrders);
        assertTrue(!closedOrders.isEmpty());
    }
}