/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2EntityCollection_Test_Passing {
    private static String initTime;
    private static int hitCount;
    PingServlet2Session2EntityCollection pingservlet2session2entitycollection;
    HttpServlet httpservlet;
    @Mock
    HttpServletResponse httpServletResponse;
    @Mock
    HttpServlet httpServlet;
    PingServlet2Session2EntityCollection pingServlet2Session2EntityCollection;
    private TradeServices tradeSLSBLocal;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservlet2session2entitycollection = new PingServlet2Session2EntityCollection();
        pingservlet2session2entitycollection.init(httpservlet);
        verify(httpservlet, times(1)).init(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws ServletException, IOException {
        pingServlet2Session2EntityCollection = new PingServlet2Session2EntityCollection();
        HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
        HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
        pingServlet2Session2EntityCollection.doPost(httpServletRequest, httpServletResponse);
        verify(httpServletResponse, times(1)).setStatus(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_Jyjy0() throws ServletException, IOException {
        PingServlet2Session2EntityCollection servlet = new PingServlet2Session2EntityCollection();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        servlet.doPost(req, res);
        verify(res, times(1)).getWriter();
        verify(res, times(1)).setStatus(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_CBfp0() {
        PingServlet2Session2EntityCollection pingServlet2Session2EntityCollection = new PingServlet2Session2EntityCollection();
        String servletInfo = pingServlet2Session2EntityCollection.getServletInfo();
        assertEquals("web primitive, tests Servlet to Session to Entity returning a collection of Entity EJBs", servletInfo);
    }
}