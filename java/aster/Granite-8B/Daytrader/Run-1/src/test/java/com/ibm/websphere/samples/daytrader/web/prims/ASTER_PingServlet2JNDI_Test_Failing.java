/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2JNDI_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingServlet2JNDI pingServlet2JNDI;
    HttpServlet httpServlet;
    HttpServletRequest httpServletRequest;
    HttpServletResponse httpServletResponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        httpServlet = mock(HttpServlet.class);
        pingServlet2JNDI = new PingServlet2JNDI();
        // Mock the init method of HttpServlet
        doNothing().when(httpServlet).init(any());
        // Call the init method of PingServlet2JNDI
        pingServlet2JNDI.init(httpServlet);
        // Verify that the init method of HttpServlet is called
        verify(httpServlet, times(1)).init(any());
        // Assert that the hitCount and initTime variables are initialized correctly
        assertEquals(0, hitCount);
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        httpServletRequest = mock(HttpServletRequest.class);
        httpServletResponse = mock(HttpServletResponse.class);
        pingServlet2JNDI = new PingServlet2JNDI();
        pingServlet2JNDI.doPost(httpServletRequest, httpServletResponse);
        verify(httpServletResponse, times(1)).getWriter();
        verify(httpServletResponse, times(1)).setContentType("text/plain");
        verify(httpServletResponse, times(1)).setCharacterEncoding("UTF-8");
        verify(httpServletResponse, times(1)).setStatus(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_qSmR0() {
        PingServlet2JNDI pingServlet2JNDI = new PingServlet2JNDI();
        String servletInfo = pingServlet2JNDI.getServletInfo();
        assertEquals("Basic JNDI look up of a JDBC DataSource", servletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_1() throws Exception {
        httpServlet = mock(HttpServlet.class);
        pingServlet2JNDI = new PingServlet2JNDI();
        // Mock the init method of HttpServlet
        doNothing().when(httpServlet).init(any());
        // Call the init method of PingServlet2JNDI
        pingServlet2JNDI.init(httpServlet);
        // Verify that the init method of HttpServlet is called
        verify(httpServlet, times(1)).init(any());
        // Assert that the hitCount and initTime variables are initialized correctly
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_2() throws Exception {
        httpServlet = mock(HttpServlet.class);
        pingServlet2JNDI = new PingServlet2JNDI();
        // Mock the init method of HttpServlet
        doNothing().when(httpServlet).init(any());
        // Call the init method of PingServlet2JNDI
        pingServlet2JNDI.init(httpServlet);
        // Verify that the init method of HttpServlet is called
        verify(httpServlet, times(1)).init(any());
        // Assert that the hitCount and initTime variables are initialized correctly
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_fid1() throws Exception {
        httpServletRequest = mock(HttpServletRequest.class);
        httpServletResponse = mock(HttpServletResponse.class);
        PingServlet2JNDI pingServlet2JNDI = new PingServlet2JNDI();
        pingServlet2JNDI.doPost(httpServletRequest, httpServletResponse);
        verify(httpServletResponse, times(1)).getWriter();
        verify(httpServletResponse, times(1)).setContentType("text/plain");
        verify(httpServletResponse, times(1)).setCharacterEncoding("UTF-8");
        verify(httpServletResponse, times(1)).setStatus(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_VbfA0_Qhto0() throws ServletException, IOException {
        PingServlet2JNDI pingServlet2JNDI = new PingServlet2JNDI();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServlet2JNDI.doPost(req, res);
    }
}