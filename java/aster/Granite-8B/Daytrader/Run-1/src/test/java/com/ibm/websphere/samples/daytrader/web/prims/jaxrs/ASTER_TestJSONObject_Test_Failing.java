/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.jaxrs;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TestJSONObject_Test_Failing {
    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0001_mUlv0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0001();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0001_Null_QWFf1() {
        TestJSONObject testJSONObject = null;
        String actual = testJSONObject.getProp0001();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0005_KvCd0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0005();
        assertEquals("expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0003_vlqb0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0003();
        assertEquals("Expected value", "Actual value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0002_EIWL0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0002();
        assertEquals("Expected result", "expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0014_HQBh0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0014();
        assertEquals("Expected value", "expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0015_PhfB0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0015();
        assertEquals("Expected value", "Actual value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0016_nAUC0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0016();
        assertEquals("Expected result", "expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0010_fiOj0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0010();
        assertEquals("Expected value", "actual value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0011_BtZv0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0011();
        assertEquals("expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0012_iCVz0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0012();
        assertEquals("Expected result", "expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0009_CaRu0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0009();
        assertEquals("Expected result", "expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_XoLf0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0008();
        String expected = "";
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0007_aoBD0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0007();
        assertEquals("Expected result", "expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0006_GeIw0() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0006();
        assertEquals("Expected value", "expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0001_mUlv0_fid2() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String actual = testJSONObject.getProp0001();
        String expected = "";
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_XoLf0_fid2() {
        TestJSONObject testJSONObject = new TestJSONObject();
        String result = testJSONObject.getProp0008();
        String expected = "";
        assertNull(expected);
    }
}