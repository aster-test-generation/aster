/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCWrite_Test_Failing {
    private static int hitCount;
    private static String initTime;
    PingJDBCWrite pingjdbcwrite;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcwrite = new PingJDBCWrite();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingJDBCWrite
        pingjdbcwrite.init(httpservlet);
        // Assert that the initTime and hitCount variables are set correctly
        assertEquals(initTime, new java.util.Date().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcwrite = new PingJDBCWrite();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingJDBCWrite
        pingjdbcwrite.init(httpservlet);
        // Assert that the initTime and hitCount variables are set correctly
        assertEquals(hitCount, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_VepO0() {
        PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
        String expected = "Basic JDBC Write using a prepared statment makes use of TradeJDBC code.";
        String actual = pingJDBCWrite.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_cXqO1() throws ServletException, IOException {
        PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(res.getWriter()).thenThrow(new IOException("Simulated IOException"));
        try {
            pingJDBCWrite.doGet(req, res);
        } catch (ServletException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcwrite = new PingJDBCWrite();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingJDBCWrite
        pingjdbcwrite.init(httpservlet);
        // Assert that the initTime and hitCount variables are set correctly
        assertEquals(initTime, new java.util.Date().toString());
        assertEquals(hitCount, 0);
    }
}