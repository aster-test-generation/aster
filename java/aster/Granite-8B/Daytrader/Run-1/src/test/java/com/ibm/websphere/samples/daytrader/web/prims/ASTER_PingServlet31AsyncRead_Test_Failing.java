/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet31AsyncRead_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingServlet31AsyncRead pingServlet31AsyncRead;
    HttpServlet httpServlet;
    @Mock
    private HttpServletResponse httpServletResponse;
    @Mock
    private HttpServletRequest httpServletRequest;
    @Mock
    private ServletInputStream servletInputStream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        httpServlet = mock(HttpServlet.class);
        pingServlet31AsyncRead = new PingServlet31AsyncRead();
        ServletConfig servletConfig = mock(ServletConfig.class);
        pingServlet31AsyncRead.init(servletConfig);
        verify(servletConfig).getServletName();
        verify(servletConfig).getInitParameter("initTime");
        verify(servletConfig).getInitParameter("hitCount");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_xJvM0() {
        PingServlet31AsyncRead pingServlet31AsyncRead = new PingServlet31AsyncRead();
        String actualServletInfo = pingServlet31AsyncRead.getServletInfo();
        String expectedServletInfo = "Basic dynamic HTML generation through a servlet";
        assertEquals(expectedServletInfo, actualServletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet() throws Exception {
        pingServlet31AsyncRead = new PingServlet31AsyncRead();
        when(httpServletRequest.getInputStream()).thenReturn(servletInputStream);
        pingServlet31AsyncRead.doGet(httpServletRequest, httpServletResponse);
        verify(httpServletRequest).getInputStream();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_XRFP0() throws Exception {
        PingServlet31AsyncRead pingServlet31AsyncRead = new PingServlet31AsyncRead();
        ServletConfig servletConfig = mock(ServletConfig.class);
        when(servletConfig.getServletName()).thenReturn("PingServlet31AsyncRead");
        when(servletConfig.getInitParameter("initTime")).thenReturn("1000");
        when(servletConfig.getInitParameter("hitCount")).thenReturn("1000");
        pingServlet31AsyncRead.init(servletConfig);
        verify(servletConfig).getServletName();
        verify(servletConfig).getInitParameter("initTime");
        verify(servletConfig).getInitParameter("hitCount");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_fid2() throws Exception {
        pingServlet31AsyncRead = new PingServlet31AsyncRead();
        ServletConfig servletConfig = mock(ServletConfig.class);
        pingServlet31AsyncRead.init(servletConfig);
        verify(servletConfig).getServletName();
        verify(servletConfig).getInitParameter("initTime");
        verify(servletConfig).getInitParameter("hitCount");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_fid2() throws Exception {
        PingServlet31AsyncRead pingServlet31AsyncRead = new PingServlet31AsyncRead();
        when(httpServletRequest.getInputStream()).thenReturn(servletInputStream);
        pingServlet31AsyncRead.doGet(httpServletRequest, httpServletResponse);
        verify(httpServletRequest).getInputStream();
    }
}