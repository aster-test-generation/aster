/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLoginCount_QwiG0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setLoginCount(10);
        assertEquals(10, accountDataBean.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_RTeA0() {
        AccountDataBean account = AccountDataBean.getRandomInstance();
        assertNotNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLogoutCount_ycwP2() {
        AccountDataBean account = new AccountDataBean();
        int logoutCount = account.getLogoutCount();
        assertEquals(0, logoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_xmgP3() {
        AccountDataBean account = new AccountDataBean();
        Collection<HoldingDataBean> holdings = account.getHoldings();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLoginCount_zQsN4() {
        AccountDataBean account = new AccountDataBean();
        int loginCount = account.getLoginCount();
        assertEquals(0, loginCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID_Qtdt5() {
        AccountDataBean account = new AccountDataBean();
        Integer accountID = account.getAccountID();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfileID_bcih6() {
        AccountDataBean account = new AccountDataBean();
        String profileID = account.getProfileID();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_bMQF7() {
        AccountDataBean account = new AccountDataBean();
        Collection<OrderDataBean> orders = account.getOrders();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfile_cqCK10() {
        AccountDataBean account = new AccountDataBean();
        AccountProfileDataBean profile = account.getProfile();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetLogoutCount_HzqM0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setLogoutCount(1);
        assertEquals(1, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastLogin_MhbY0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date lastLogin = new Date();
        accountDataBean.setLastLogin(lastLogin);
        assertEquals(lastLogin, accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_zwOy0() {
        AccountDataBean accountDataBean1 = new AccountDataBean(1, 1, new Date(), new Date(), BigDecimal.valueOf(1), BigDecimal.valueOf(1), "1");
        AccountDataBean accountDataBean2 = new AccountDataBean(1, 1, new Date(), new Date(), BigDecimal.valueOf(1), BigDecimal.valueOf(1), "1");
        assertEquals(accountDataBean1.hashCode(), accountDataBean2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullField_LYOX1() {
        AccountDataBean accountDataBean1 = new AccountDataBean(null, 1, 1, new Date(), new Date(), BigDecimal.valueOf(1), BigDecimal.valueOf(1), "1");
        AccountDataBean accountDataBean2 = new AccountDataBean(null, 1, 1, new Date(), new Date(), BigDecimal.valueOf(1), BigDecimal.valueOf(1), "1");
        assertEquals(accountDataBean1.hashCode(), accountDataBean2.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_zwMB0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new java.util.Date(), new java.util.Date(), new java.math.BigDecimal(1), new java.math.BigDecimal(1), "1");
        accountDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationDate_jAAO0_1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Date creationDate = accountDataBean.getCreationDate();
        assertNotNull(creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationDate_jAAO0_2() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Date creationDate = accountDataBean.getCreationDate();
        assertEquals(new Date(), creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_KJbA0() {
        AccountDataBean accountDataBean = new AccountDataBean(123, 10, 5, new Date(), new Date(), new BigDecimal(100), new BigDecimal(50), "12345");
        String expected = "<BR>Account Data for account: <B>123</B>" + "<LI>   loginCount:10</LI>" + "<LI>  logoutCount:5</LI>" + "<LI>    lastLogin:" + accountDataBean.getLastLogin() + "</LI>" + "<LI> creationDate:" + accountDataBean.getCreationDate() + "</LI>" + "<LI>      balance:" + accountDataBean.getBalance() + "</LI>" + "<LI>  openBalance:" + accountDataBean.getOpenBalance() + "</LI>" + "<LI>    profileID:12345</LI>";
        String actual = accountDataBean.toHTML();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_Tpue0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setHoldings(new HashSet<HoldingDataBean>());
        Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccountID_OTKg0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Integer accountID = 123;
        accountDataBean.setAccountID(accountID);
        assertEquals(accountID, accountDataBean.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccountIDWithNull_kZOU1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setAccountID(null);
        assertEquals(null, accountDataBean.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccountIDWithZero_QEtS2() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Integer accountID = 0;
        accountDataBean.setAccountID(accountID);
        assertEquals(accountID, accountDataBean.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccountIDWithNegativeNumber_QIgU3() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Integer accountID = -123;
        accountDataBean.setAccountID(accountID);
        assertEquals(accountID, accountDataBean.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetLoginCount_bbNl0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        assertEquals(1, accountDataBean.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID_NullProfileID_goqD5() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), null);
        Integer expectedAccountID = null;
        Integer actualAccountID = accountDataBean.getAccountID();
        assertEquals(expectedAccountID, actualAccountID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID_EmptyProfileID_lhfR6() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "");
        Integer expectedAccountID = null;
        Integer actualAccountID = accountDataBean.getAccountID();
        assertEquals(expectedAccountID, actualAccountID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_RIXN0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        boolean result = accountDataBean.equals(null);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_jtiY1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        boolean result = accountDataBean.equals(accountDataBean);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_puxv2() {
        AccountDataBean accountDataBean = new AccountDataBean();
        boolean result = accountDataBean.equals(new Object());
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameValues_FCyu3() {
        AccountDataBean accountDataBean1 = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        AccountDataBean accountDataBean2 = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        boolean result = accountDataBean1.equals(accountDataBean2);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentValues_AwUc4() {
        AccountDataBean accountDataBean1 = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        AccountDataBean accountDataBean2 = new AccountDataBean(2, 2, new Date(), new Date(), new BigDecimal(2), new BigDecimal(2), "2");
        boolean result = accountDataBean1.equals(accountDataBean2);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_zpek0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        accountDataBean.logout();
        assertEquals(2, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalance_NzsV0() {
        AccountDataBean account = new AccountDataBean();
        account.setOpenBalance(new BigDecimal(100));
        assertEquals(new BigDecimal(100), account.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfileID_uCGg0() {
        AccountDataBean accountDataBean = new AccountDataBean(123, 10, 5, new Date(), new Date(), new BigDecimal(100.0), new BigDecimal(50.0), "123");
        assertEquals("123", accountDataBean.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCreationDate_XsBF0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date creationDate = new Date();
        accountDataBean.setCreationDate(creationDate);
        assertEquals(creationDate, accountDataBean.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCreationDateWithNull_OSYp1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setCreationDate(null);
        assertNull(accountDataBean.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCreationDateWithNegativeBalance_FwJb2() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date creationDate = new Date();
        accountDataBean.setCreationDate(creationDate);
        BigDecimal balance = new BigDecimal(-100);
        accountDataBean.setBalance(balance);
        assertTrue(accountDataBean.getBalance().compareTo(balance) == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProfileID_DLWH0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setProfileID("12345");
        assertEquals("12345", accountDataBean.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetProfile_FyZq0_1() {
        AccountDataBean account = new AccountDataBean();
        AccountProfileDataBean profile = new AccountProfileDataBean();
        account.setProfile(profile);
        assertNotNull(account.getProfile());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetProfile_FyZq0_2() {
        AccountDataBean account = new AccountDataBean();
        AccountProfileDataBean profile = new AccountProfileDataBean();
        account.setProfile(profile);
        assertEquals(account.getProfile(), profile);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrders_ehdY0_1() {
        AccountDataBean account = new AccountDataBean();
        Collection<OrderDataBean> orders = new ArrayList<>();
        OrderDataBean order1 = new OrderDataBean();
        order1.setOrderID(1);
        order1.setOrderType("BUY");
        order1.setQuantity(100);
        order1.setPrice(new BigDecimal(10.00));
        orders.add(order1);
        OrderDataBean order2 = new OrderDataBean();
        order2.setOrderID(2);
        order2.setOrderType("SELL");
        order2.setQuantity(50);
        order2.setPrice(new BigDecimal(20.00));
        orders.add(order2);
        account.setOrders(orders);
        assertNotNull(account.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrders_ehdY0_2() {
        AccountDataBean account = new AccountDataBean();
        Collection<OrderDataBean> orders = new ArrayList<>();
        OrderDataBean order1 = new OrderDataBean();
        order1.setOrderID(1);
        order1.setOrderType("BUY");
        order1.setQuantity(100);
        order1.setPrice(new BigDecimal(10.00));
        orders.add(order1);
        OrderDataBean order2 = new OrderDataBean();
        order2.setOrderID(2);
        order2.setOrderType("SELL");
        order2.setQuantity(50);
        order2.setPrice(new BigDecimal(20.00));
        orders.add(order2);
        account.setOrders(orders);
        assertEquals(2, account.getOrders().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrders_ehdY0_3() {
        AccountDataBean account = new AccountDataBean();
        Collection<OrderDataBean> orders = new ArrayList<>();
        OrderDataBean order1 = new OrderDataBean();
        order1.setOrderID(1);
        order1.setOrderType("BUY");
        order1.setQuantity(100);
        order1.setPrice(new BigDecimal(10.00));
        orders.add(order1);
        OrderDataBean order2 = new OrderDataBean();
        order2.setOrderID(2);
        order2.setOrderType("SELL");
        order2.setQuantity(50);
        order2.setPrice(new BigDecimal(20.00));
        orders.add(order2);
        account.setOrders(orders);
        assertTrue(account.getOrders().contains(order1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrders_ehdY0_4() {
        AccountDataBean account = new AccountDataBean();
        Collection<OrderDataBean> orders = new ArrayList<>();
        OrderDataBean order1 = new OrderDataBean();
        order1.setOrderID(1);
        order1.setOrderType("BUY");
        order1.setQuantity(100);
        order1.setPrice(new BigDecimal(10.00));
        orders.add(order1);
        OrderDataBean order2 = new OrderDataBean();
        order2.setOrderID(2);
        order2.setOrderType("SELL");
        order2.setQuantity(50);
        order2.setPrice(new BigDecimal(20.00));
        orders.add(order2);
        account.setOrders(orders);
        assertTrue(account.getOrders().contains(order2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders_xaaD0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Collection<OrderDataBean> orders = accountDataBean.getOrders();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastLogin_DIqy0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Date expected = accountDataBean.getLastLogin();
        Date actual = accountDataBean.getLastLogin();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBalanceWithPositiveBalance_hjwe1() throws Exception {
        AccountDataBean accountDataBean = new AccountDataBean(1000, 50, 30, new Date(), new Date(), new BigDecimal("1000.00"), new BigDecimal("1000.00"), "profile1");
        BigDecimal balance = accountDataBean.getBalance();
        assertEquals(new BigDecimal("1000.00"), balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBalanceWithZeroBalance_DRHx2() throws Exception {
        AccountDataBean accountDataBean = new AccountDataBean(0, 50, 30, new Date(), new Date(), new BigDecimal("0.00"), new BigDecimal("0.00"), "profile1");
        BigDecimal balance = accountDataBean.getBalance();
        assertEquals(new BigDecimal("0.00"), balance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenBalance_uObd0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "1");
        assertEquals(BigDecimal.ZERO, accountDataBean.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetBalance_wmWu0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setBalance(new BigDecimal(100));
        assertEquals(new BigDecimal(100), accountDataBean.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationDate_jAAO0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Date creationDate = accountDataBean.getCreationDate();
        assertNotNull(creationDate);
        assertEquals(new Date(), creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetProfile_FyZq0() {
        AccountDataBean account = new AccountDataBean();
        AccountProfileDataBean profile = new AccountProfileDataBean();
        account.setProfile(profile);
        assertNotNull(account.getProfile());
        assertEquals(account.getProfile(), profile);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrders_ehdY0() {
        AccountDataBean account = new AccountDataBean();
        Collection<OrderDataBean> orders = new ArrayList<>();
        OrderDataBean order1 = new OrderDataBean();
        order1.setOrderID(1);
        order1.setOrderType("BUY");
        order1.setQuantity(100);
        order1.setPrice(new BigDecimal(10.00));
        orders.add(order1);
        OrderDataBean order2 = new OrderDataBean();
        order2.setOrderID(2);
        order2.setOrderType("SELL");
        order2.setQuantity(50);
        order2.setPrice(new BigDecimal(20.00));
        orders.add(order2);
        account.setOrders(orders);
        assertNotNull(account.getOrders());
        assertEquals(2, account.getOrders().size());
        assertTrue(account.getOrders().contains(order1));
        assertTrue(account.getOrders().contains(order2));
    }
}