/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.concurrent.TimeUnit;
import javax.sql.DataSource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirectDBUtils_Test_Failing {
    @Mock
    private DataSource datasource;
    TradeDirectDBUtils tradedirectdbutils;
    Connection connection;
    PreparedStatement preparedstatement;
    ResultSet resultset;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_1() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertNotNull(runStatsData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_2() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getTradeUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_3() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_4() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_5() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getOpenOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_6() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_7() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_8() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_9() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_10() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getSumLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_11() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_12() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getHoldingCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0_13() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertEquals(0, runStatsData.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_1() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertNotNull(runStatsData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_2() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getTradeUserCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_3() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getBuyOrderCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_4() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getOrderCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_5() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getOpenOrderCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_6() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getNewUserCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_7() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getCancelledOrderCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_8() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getTradeStockCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_9() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getDeletedOrderCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_10() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getSumLogoutCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_11() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getSumLoginCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_12() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getHoldingCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1_13() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertTrue(runStatsData.getSellOrderCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcheckDBProductName() throws Exception {
        connection = mock(Connection.class);
        tradedirectdbutils = new TradeDirectDBUtils();
        Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
        field_datasource.setAccessible(true);
        field_datasource.set(tradedirectdbutils, datasource);
        when(datasource.getConnection()).thenReturn(connection);
        String dbProductName = tradedirectdbutils.checkDBProductName();
        assertEquals("Oracle", dbProductName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckDBProductName_TRbA0() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        String dbProductName = tradeDirectDBUtils.checkDBProductName();
        assertEquals("Oracle", dbProductName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithDeleteAll_oaZv0() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(true);
        assertNotNull(runStatsData);
        assertEquals(0, runStatsData.getTradeUserCount());
        assertEquals(0, runStatsData.getBuyOrderCount());
        assertEquals(0, runStatsData.getOrderCount());
        assertEquals(0, runStatsData.getOpenOrderCount());
        assertEquals(0, runStatsData.getNewUserCount());
        assertEquals(0, runStatsData.getCancelledOrderCount());
        assertEquals(0, runStatsData.getTradeStockCount());
        assertEquals(0, runStatsData.getDeletedOrderCount());
        assertEquals(0, runStatsData.getSumLogoutCount());
        assertEquals(0, runStatsData.getSumLoginCount());
        assertEquals(0, runStatsData.getHoldingCount());
        assertEquals(0, runStatsData.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTradeWithoutDeleteAll_nlba1() throws Exception {
        TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
        RunStatsDataBean runStatsData = tradeDirectDBUtils.resetTrade(false);
        assertNotNull(runStatsData);
        assertTrue(runStatsData.getTradeUserCount() > 0);
        assertTrue(runStatsData.getBuyOrderCount() > 0);
        assertTrue(runStatsData.getOrderCount() > 0);
        assertTrue(runStatsData.getOpenOrderCount() > 0);
        assertTrue(runStatsData.getNewUserCount() > 0);
        assertTrue(runStatsData.getCancelledOrderCount() > 0);
        assertTrue(runStatsData.getTradeStockCount() > 0);
        assertTrue(runStatsData.getDeletedOrderCount() > 0);
        assertTrue(runStatsData.getSumLogoutCount() > 0);
        assertTrue(runStatsData.getSumLoginCount() > 0);
        assertTrue(runStatsData.getHoldingCount() > 0);
        assertTrue(runStatsData.getSellOrderCount() > 0);
    }
}