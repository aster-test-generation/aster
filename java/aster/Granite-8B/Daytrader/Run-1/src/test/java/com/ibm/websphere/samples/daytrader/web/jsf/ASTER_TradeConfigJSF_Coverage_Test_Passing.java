/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirectDBUtils;
import com.ibm.websphere.samples.daytrader.util.Log;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeConfigJSF_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildDatabaseTables2_fuLr1() throws Exception {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String dbProductName = null;
    try {
        dbProductName = tradeConfigJSF.dbUtils.checkDBProductName();
    } catch (Exception e) {
        Log.error(e, "TradeBuildDB: Unable to check DB Product name");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildDatabaseTables3_iFtH2() throws Exception {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String dbProductName = null;
    try {
        dbProductName = tradeConfigJSF.dbUtils.checkDBProductName();
    } catch (Exception e) {
        Log.error(e, "TradeBuildDB: Unable to check DB Product name");
    }
    if (dbProductName == null) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildDatabaseTables4_Tyjj3() throws Exception {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String dbProductName = null;
    try {
        dbProductName = tradeConfigJSF.dbUtils.checkDBProductName();
    } catch (Exception e) {
        Log.error(e, "TradeBuildDB: Unable to check DB Product name");
    }
    if (dbProductName == null) {
    } else {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPopulateDatabase1_pwZQ0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.populateDatabase();
        assertFalse(result.contains("TradeBuildDB: **** DayTrader Database Built - 10 users created, 100 quotes created. ****<br/>"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPopulateDatabase2_SqzX1_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.populateDatabase();
        assertFalse(result.contains("TradeBuildDB: **** Check System.Out for any errors. ****<br/>"));
    }
}