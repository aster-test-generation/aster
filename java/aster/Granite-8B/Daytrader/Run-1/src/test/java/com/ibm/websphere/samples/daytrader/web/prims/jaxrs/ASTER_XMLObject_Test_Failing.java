/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.jaxrs;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_XMLObject_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0001_okYB0() {
        XMLObject xmlObject = new XMLObject();
        String expected = "expected_value"; // Replace with the expected value
        String actual = xmlObject.getProp0001();
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0005_CRGO0() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0005();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0005WithEmpty_yweW4() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0005();
        assertTrue(result.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0004WithNull_yyEj1() {
        XMLObject XMLObject = null;
        assertEquals(null, XMLObject.getProp0004());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0001_okYB0_fid1() {
        XMLObject xmlObject = new XMLObject();
        String expected = "expected_value"; // Replace with the expected value
        String actual = xmlObject.getProp0001();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0005_ejmI1_2() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0005();
        assertEquals("expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0004_oDcS0_fid1() {
        XMLObject XMLObject = new XMLObject();
        assertEquals("Expected value", XMLObject.getProp0004());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0004WithEmptyObject_HxZE2_fid1() {
        XMLObject XMLObject = new XMLObject();
        assertEquals("", XMLObject.getProp0004());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0012_GJJe1_1_fid1() {
        XMLObject xmlObject = new XMLObject();
        xmlObject.setProp0012(null);
        xmlObject.setProp0012("");
        xmlObject.setProp0012("test");
        assertEquals(null, xmlObject.getProp0012());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0012_GJJe1_2() {
        XMLObject xmlObject = new XMLObject();
        xmlObject.setProp0012(null);
        xmlObject.setProp0012("");
        xmlObject.setProp0012("test");
        assertEquals("", xmlObject.getProp0012());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0003_jcFU0() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0003();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0002_qpNR0() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0002();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetX_PSAW0() {
        XMLObject xmlObject = new XMLObject();
        String expected = "expected_value"; // Replace with the expected value
        String actual = xmlObject.getX();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0013_Vbqo0() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0013();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0014_Oqux0() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0014();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0015_RiOn0() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0015();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0016_kzQz0() {
        XMLObject xmlObject = new XMLObject();
        String expected = ""; // Replace with expected value
        String actual = xmlObject.getProp0016();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0010_EXbN0() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0010();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0011_tEjE0() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0011();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0012_geDF0() {
        XMLObject xmlObject = new XMLObject();
        String expected = "expected_value"; // Replace with the expected value
        String actual = xmlObject.getProp0012();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0001_iVyX1_1() {
        XMLObject xmlObject = new XMLObject();
        xmlObject.setProp0001(null);
        xmlObject.setProp0001("");
        xmlObject.setProp0001("test");
        assertEquals(null, xmlObject.getProp0001());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProp0001_iVyX1_2() {
        XMLObject xmlObject = new XMLObject();
        xmlObject.setProp0001(null);
        xmlObject.setProp0001("");
        xmlObject.setProp0001("test");
        assertEquals("", xmlObject.getProp0001());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0009_zGFd0() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0009();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_BtoP0() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0008();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_pJXb1_2() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0008();
        assertEquals("expectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_BWyC2_3() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0008();
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_PKzc5_6() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0008();
        assertNotEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_cMHb6_7() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0008();
        assertTrue(result.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0007_paDE0() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0007();
        assertEquals("Expected result", "expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0007_NullObject_OzEk1() {
        XMLObject xmlObject = null;
        String result = xmlObject.getProp0007();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0007_NonNullObject_SlDc2() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0007();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0005_ejmI1() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0005();
        assertNotNull(result);
        assertEquals("expected value", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_pJXb1() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0008();
        assertNotNull(result);
        assertEquals("expectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_BWyC2() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0008();
        assertNotNull(result);
        assertEquals("expectedValue", result);
        assertTrue(result instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_uNVA3() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0008();
        assertNotNull(result);
        assertEquals("expectedValue", result);
        assertTrue(result instanceof String);
        assertEquals("expectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_ZPuF4() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0008();
        assertNotNull(result);
        assertEquals("expectedValue", result);
        assertTrue(result instanceof String);
        assertEquals("expectedValue", result);
        assertNotEquals("unexpectedValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_PKzc5() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0008();
        assertNotNull(result);
        assertEquals("expectedValue", result);
        assertTrue(result instanceof String);
        assertEquals("expectedValue", result);
        assertNotEquals("unexpectedValue", result);
        assertNotEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProp0008_cMHb6() {
        XMLObject xmlObject = new XMLObject();
        String result = xmlObject.getProp0008();
        assertNotNull(result);
        assertEquals("expectedValue", result);
        assertTrue(result instanceof String);
        assertEquals("expectedValue", result);
        assertNotEquals("unexpectedValue", result);
        assertNotEquals(null, result);
        assertTrue(result.length() > 0);
    }
}