/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValSimple1_Test_Failing {
    private static LocalDateTime initTime;
    PingServletBeanValSimple1 pingservletbeanvalsimple1;
    HttpServlet httpservlet;
    PingServletBeanValSimple1 pingServletBeanValSimple1;
    HttpServlet httpServlet;
    HttpServletResponse httpServletResponse;
    ServletOutputStream servletOutputStream;
    private static int hitCount = 0;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletbeanvalsimple1 = new PingServletBeanValSimple1();
        pingservletbeanvalsimple1.init(httpservlet);
        verify(httpservlet, times(1)).init(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        httpServlet = mock(HttpServlet.class);
        httpServletResponse = mock(HttpServletResponse.class);
        servletOutputStream = mock(ServletOutputStream.class);
        pingServletBeanValSimple1 = new PingServletBeanValSimple1();
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        pingServletBeanValSimple1.doPost(null, httpServletResponse);
        verify(httpServletResponse).getOutputStream();
        verify(servletOutputStream).close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_xxlw0() {
        PingServletBeanValSimple1 pingServletBeanValSimple1 = new PingServletBeanValSimple1();
        String result = pingServletBeanValSimple1.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_dWzY0_zPCy0() throws ServletException, IOException {
        PingServletBeanValSimple1 pingServlet = new PingServletBeanValSimple1();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        pingServlet.doPost(request, response);
    }
}