/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentCompanyName_DfEi4_fid1() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean("symbol1", "companyName1", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        QuoteDataBean quoteDataBean2 = new QuoteDataBean("symbol1", "companyName2", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        assertFalse(quoteDataBean1.equals(quoteDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentVolume_QJVv5_fid1() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean("symbol1", "companyName1", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        QuoteDataBean quoteDataBean2 = new QuoteDataBean("symbol1", "companyName1", 200.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        assertFalse(quoteDataBean1.equals(quoteDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentPrice_sWKZ6_fid1() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean("symbol1", "companyName1", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        QuoteDataBean quoteDataBean2 = new QuoteDataBean("symbol1", "companyName1", 100.0, new BigDecimal(200.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        assertFalse(quoteDataBean1.equals(quoteDataBean2));
    }
}