/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Failing {
    private HoldingDataBean holding;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_rRjt0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        QuoteDataBean quoteDataBean = holdingDataBean.getQuote();
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_moQt0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(100.0, new BigDecimal("100.0"), new Date(), new AccountDataBean(), new QuoteDataBean());
        String expected = "<BR>Holding Data for holding: 1 </B>" + "<LI>      quantity:100.0 </LI>" + "<LI> purchasePrice:100.0 </LI>" + "<LI>  purchaseDate: sun.util.calendar.LocalGregorianCalendar@1 </LI>" + "<LI>       quoteID: null </LI>";
        assertEquals(expected, holdingDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_aBTs0() {
        HoldingDataBean holding = new HoldingDataBean();
        AccountDataBean account = holding.getAccount();
        assertNotNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuoteID1_AsHY0_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1.0, BigDecimal.valueOf(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        String quoteID = holdingDataBean.getQuoteID();
        assertNotNull(quoteID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentHoldingID_hwFl3_fid1() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        HoldingDataBean holdingDataBean2 = new HoldingDataBean(2.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        assertFalse(holdingDataBean1.equals(holdingDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentPurchasePrice_mXQJ4_fid1() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        HoldingDataBean holdingDataBean2 = new HoldingDataBean(1.0, new BigDecimal(2.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        assertFalse(holdingDataBean1.equals(holdingDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentPurchaseDate_vAGW5_fid1() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        HoldingDataBean holdingDataBean2 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(System.currentTimeMillis() + 1000), new AccountDataBean(), new QuoteDataBean());
        assertFalse(holdingDataBean1.equals(holdingDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentAccount_FjyC6_fid1() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        HoldingDataBean holdingDataBean2 = new HoldingDataBean(1.0, new BigDecimal(1.0), new Date(), new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1.0), new BigDecimal(1.0), "string"), new QuoteDataBean());
        assertFalse(holdingDataBean1.equals(holdingDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHoldingDataBeanGetQuoteID_WNYb3() {
        String quoteID = holding.getQuoteID();
        assertNotNull("HoldingDataBean:getQuoteID() returned null quoteID", quoteID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingID_uXax0_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = holdingDataBean.getHoldingID();
        assertNotNull(holdingID);
    }
}