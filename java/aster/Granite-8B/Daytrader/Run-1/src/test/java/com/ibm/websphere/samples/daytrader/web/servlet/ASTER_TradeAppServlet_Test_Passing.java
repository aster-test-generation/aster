/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppServlet_Test_Passing {
    TradeAppServlet tradeappservlet;
    HttpServlet httpservlet;
    ServletConfig servletconfig;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;
    @Mock
    HttpServletResponse httpServletResponse;
    @Mock
    HttpServletRequest httpServletRequest;
    @Mock
    ServletConfig servletConfig;
    @Mock
    HttpSession httpSession;
    @Mock
    HttpServlet httpServlet;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        servletconfig = mock(ServletConfig.class);
        tradeappservlet = mock(TradeAppServlet.class);
        httpsession = mock(HttpSession.class);
        httpservlet = mock(HttpServlet.class);
        when(tradeappservlet.getServletConfig()).thenReturn(servletconfig);
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        tradeappservlet.doGet(httpservletrequest, httpservletresponse);
        verify(tradeappservlet, times(1)).getServletConfig();
        verify(httpservletrequest, times(1)).getSession();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws ServletException, IOException {
        MockitoAnnotations.openMocks(this);
        tradeappservlet.doPost(httpServletRequest, httpServletResponse);
        verify(tradeappservlet).performTask(httpServletRequest, httpServletResponse);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_jBfF0() throws ServletException, IOException {
        TradeAppServlet servlet = new TradeAppServlet();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_dfwU0() {
        TradeAppServlet servlet = new TradeAppServlet();
        String expected = "TradeAppServlet provides the standard web interface to Trade";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }
}