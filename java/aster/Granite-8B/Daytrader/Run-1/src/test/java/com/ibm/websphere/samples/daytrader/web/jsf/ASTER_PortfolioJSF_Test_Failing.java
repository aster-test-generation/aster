/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PortfolioJSF_Test_Failing {
    private Integer numberHoldings;
    private TradeServices tradeAction;
    private BigDecimal totalValue = new BigDecimal(0.0);
    private ArrayList<HoldingData> holdingDatas;
    private ExternalContext context;
    private BigDecimal totalGain = new BigDecimal(0.0);
    private BigDecimal totalBasis = new BigDecimal(0.0);
    private PortfolioJSF portfolioJSF;
    private HttpSession httpSession;
    private ExternalContext externalContext;
    private HtmlDataTable dataTable;
    @Mock
    private TradeServices tradeActionMock;
    @Mock
    private ExternalContext externalContextMock;
    @Mock
    private HttpSession httpSessionMock;
    @Mock
    private HoldingData holdingDataMock;
    @Mock
    private OrderDataBean orderDataBeanMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGainPercent_ORgW0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalGainPercent = portfolioJSF.getTotalGainPercent();
        assertNotNull(totalGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGainPercent_rNUS1() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalGainPercent = portfolioJSF.getTotalGainPercent();
        assertEquals(BigDecimal.ZERO, totalGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGainPercent_Enjb2() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalGainPercent = portfolioJSF.getTotalGainPercent();
        assertTrue(totalGainPercent.compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGainPercent_sqXa3() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalGainPercent = portfolioJSF.getTotalGainPercent();
        assertTrue(totalGainPercent.compareTo(BigDecimal.ZERO) < 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGainPercent_yGJd4() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalGainPercent = portfolioJSF.getTotalGainPercent();
        assertTrue(totalGainPercent.compareTo(BigDecimal.ZERO) == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGainPercent_GXrz5() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalGainPercent = portfolioJSF.getTotalGainPercent();
        assertTrue(totalGainPercent.compareTo(BigDecimal.ZERO) != 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGainPercent_ldXe6() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalGainPercent = portfolioJSF.getTotalGainPercent();
        assertTrue(totalGainPercent.compareTo(BigDecimal.ZERO) >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalGainPercent_GCPA7() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalGainPercent = portfolioJSF.getTotalGainPercent();
        assertTrue(totalGainPercent.compareTo(BigDecimal.ZERO) <= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTable_fzLx0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        HtmlDataTable dataTable = new HtmlDataTable();
        portfolioJSF.setDataTable(dataTable);
        assertEquals(dataTable, portfolioJSF.getDataTable());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalValue_erLt0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalValue = new BigDecimal(100);
        portfolioJSF.setTotalValue(totalValue);
        assertEquals(totalValue, portfolioJSF.getTotalValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumOfCashHoldings_BnDE0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal sumOfCashHoldings = BigDecimal.ZERO;
        portfolioJSF.setSumOfCashHoldings(sumOfCashHoldings);
        assertEquals(sumOfCashHoldings, portfolioJSF.getSumOfCashHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLineNumberHoldings_LxJV0() {
        PortfolioJSF portfolio = new PortfolioJSF(null);
        Integer numberHoldings = portfolio.getNumberHoldings();
        assertNotNull(numberHoldings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalValue_tsZW0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(Mockito.mock(Instance.class));
        BigDecimal totalValue = portfolioJSF.getTotalValue();
        assertNotNull(totalValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotalGain_eZKP0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalGain = new BigDecimal(100);
        portfolioJSF.setTotalGain(totalGain);
        assertEquals(totalGain, portfolioJSF.getTotalGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalance_REDf0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal openBalance = new BigDecimal(1000.00);
        portfolioJSF.setOpenBalance(openBalance);
        assertEquals(openBalance, portfolioJSF.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalanceWithZero_EjQK2() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal openBalance = BigDecimal.ZERO;
        portfolioJSF.setOpenBalance(openBalance);
        assertEquals(openBalance, portfolioJSF.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalanceWithNegativeValue_wTzP3() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal openBalance = new BigDecimal(-1000.00);
        portfolioJSF.setOpenBalance(openBalance);
        assertEquals(openBalance, portfolioJSF.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalBasis_MYjk0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal totalBasis = portfolioJSF.getTotalBasis();
        assertNotNull(totalBasis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataTable_ZoZO0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        HtmlDataTable dataTable = portfolioJSF.getDataTable();
        assertNotNull(dataTable);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBalance_iZdl1() {
        BigDecimal expectedBalance = BigDecimal.valueOf(1000.00);
        BigDecimal actualBalance = portfolioJSF.getBalance();
        assertEquals(expectedBalance, actualBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingsTotal_SUjj0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal holdingsTotal = portfolioJSF.getHoldingsTotal();
        assertNotNull(holdingsTotal);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenBalance_lhKG0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal openBalance = portfolioJSF.getOpenBalance();
        Assertions.assertNotNull(openBalance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalance_mabl0() {
        PortfolioJSF portfolioJSF = new PortfolioJSF(null);
        BigDecimal balance = BigDecimal.ZERO;
        portfolioJSF.setBalance(balance);
        assertEquals(balance, portfolioJSF.getBalance());
    }
}