/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Failing {
    @Mock
    private AccountDataBean accountDataBeanMock;
    @Mock
    private QuoteDataBean quoteDataBeanMock;
    @Mock
    private HoldingDataBean holdingDataBeanMock;
    private OrderDataBean orderDataBean;
    private String symbol;
    private OrderDataBean orderdatabean;
    private Integer orderID;
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    private BigDecimal price;
    @Mock
    private Log log;
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;
    private double quantity;
    private BigDecimal orderFee;
    private String orderType;
    @Mock
    private QuoteDataBean mockQuote;
    private String newOrderStatus;
    private Date openDate;
    private Date completionDate;
    private AccountDataBean accountdatabean;
    private QuoteDataBean quotedbbean;
    private HoldingDataBean holdingdatabean;
    private String orderStatus;

    /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOrderStatus() {
           orderdatabean = new OrderDataBean();
           orderdatabean.setAccount(accountDataBean);
           orderdatabean.setQuote(quoteDataBean);
           orderdatabean.setHolding(holdingDataBean);
           // Mock the behavior of the AccountDataBean, QuoteDataBean, and HoldingDataBean objects
           when(accountDataBean.getLoginCount()).thenReturn(10);
           when(quoteDataBean.getSymbol()).thenReturn("TEST");
           when(holdingDataBean.getQuantity()).thenReturn(100.0);
           // Call the method under test
           String orderStatus = orderdatabean.getOrderStatus();
           // Assert that the method returns the expected value
           assertEquals("open", orderStatus);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void getOrderStatusTest_jRGG0() {
           OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.00"), new BigDecimal("10.00"), "symbol");
           String orderStatus = orderDataBean.getOrderStatus();
           assertEquals("OPEN", orderStatus);
       }
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus() throws Exception {
           orderdatabean = new OrderDataBean();
           newOrderStatus = "newOrderStatus";
           orderdatabean.setOrderStatus(newOrderStatus);
           assertEquals(newOrderStatus, orderdatabean.getOrderStatus());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus_moQY0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           orderDataBean.setOrderStatus("open");
           assertEquals("open", orderDataBean.getOrderStatus());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetSymbol() throws Exception {
           orderdatabean = new OrderDataBean();
           quote = new QuoteDataBean();
           symbol = "TEST_SYMBOL";
           when(mockQuote.getSymbol()).thenReturn(symbol);
           orderdatabean.setQuote(mockQuote);
           String actualSymbol = orderdatabean.getSymbol();
           assertEquals(symbol, actualSymbol);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testgetSymbol1_SZWt0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           orderDataBean.setQuote(new QuoteDataBean());
           orderDataBean.getQuote().setSymbol("symbol");
           assertEquals("symbol", orderDataBean.getSymbol());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testgetSymbol2_NZCH1() {
           OrderDataBean orderDataBean = new OrderDataBean();
           orderDataBean.setSymbol("symbol");
           assertEquals("symbol", orderDataBean.getSymbol());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetOrderID() throws Exception{
           orderdatabean = new OrderDataBean();
           orderdatabean.setOrderID(1);
           Integer expectedOrderID = 1;
           Integer actualOrderID = orderdatabean.getOrderID();
           assertEquals(expectedOrderID, actualOrderID);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void getOrderID_jayb0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Integer orderID = orderDataBean.getOrderID();
           assertEquals(null, orderID);
       }
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testisOpen() throws Exception{
           orderdatabean = new OrderDataBean();
           when(orderdatabean.getOrderStatus()).thenReturn("open");
           assertTrue(orderdatabean.isOpen());
           when(orderdatabean.getOrderStatus()).thenReturn("processing");
           assertTrue(orderdatabean.isOpen());
           when(orderdatabean.getOrderStatus()).thenReturn("closed");
           assertFalse(orderdatabean.isOpen());
           when(orderdatabean.getOrderStatus()).thenReturn("canceled");
           assertFalse(orderdatabean.isOpen());
           when(orderdatabean.getOrderStatus()).thenReturn("completed");
           assertFalse(orderdatabean.isOpen());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen1_eqVe0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("open");
       boolean actual = orderDataBean.isOpen();
       boolean expected = true;
       assertEquals(expected, actual);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen2_ixpz1() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("processing");
       boolean actual = orderDataBean.isOpen();
       boolean expected = true;
       assertEquals(expected, actual);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen3_ltRT2() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("closed");
       boolean actual = orderDataBean.isOpen();
       boolean expected = false;
       assertEquals(expected, actual);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToString() {
           orderDataBean = new OrderDataBean();
           when(orderDataBean.getAccount()).thenReturn(accountDataBean);
           when(orderDataBean.getQuote()).thenReturn(quoteDataBean);
           when(orderDataBean.getHolding()).thenReturn(holdingDataBean);
           when(accountDataBean.getProfileID()).thenReturn("profileID");
           when(quoteDataBean.getSymbol()).thenReturn("symbol");
           when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.valueOf(100.0));
           String toStringResult = orderDataBean.toString();
           String expectedResult = "Order null\n\t      orderType: null\n\t    orderStatus: null\n\t       openDate: null\n\t completionDate: null\n\t       quantity: 0.0\n\t          price: null\n\t       orderFee: null\n\t         symbol: symbol";
           assertEquals(expectedResult, toStringResult);
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testToString_eNmE0() {
       OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol");
       String toString = orderDataBean.toString();
       assertEquals("Order 1\n\t      orderType: type\n\t    orderStatus: status\n\t       openDate: " + new Date() + "\n\t completionDate: " + new Date() + "\n\t       quantity: 1.0\n\t          price: 1.0\n\t       orderFee: 1.0\n\t         symbol: symbol", toString);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testsetAccount() throws Exception{
           account = mock(AccountDataBean.class);
           orderdatabean = new OrderDataBean();
           orderdatabean.setAccount(account);
           verify(account, times(1)).setOrders(any());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetAccount_wONj0() {
           OrderDataBean order = new OrderDataBean();
           AccountDataBean account = new AccountDataBean();
           order.setAccount(account);
           assertEquals(account, order.getAccount());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderFee() throws Exception {
           orderdatabean = new OrderDataBean();
           BigDecimal newOrderFee = new BigDecimal(100.00);
           orderdatabean.setOrderFee(newOrderFee);
           assertEquals(newOrderFee, orderdatabean.getOrderFee());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOrderFee_EDDi0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = new BigDecimal(100.0);
       orderDataBean.setOrderFee(orderFee);
       assertEquals(orderFee, orderDataBean.getOrderFee());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOrderFeeWithNull_OvSO1() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderFee(null);
       assertEquals(null, orderDataBean.getOrderFee());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetOpenDate() throws Exception {
           openDate = new Date();
           when(orderdatabean.getOpenDate()).thenReturn(openDate);
           assertEquals(openDate, orderdatabean.getOpenDate());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOpenDate_uGyK0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           assertNotNull(orderDataBean.getOpenDate());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOpenDate_dOQE1() {
           OrderDataBean orderDataBean = new OrderDataBean();
           assertNotNull(orderDataBean.getOpenDate());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOpenDate_HFum2() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Date openDate = new Date();
           orderDataBean.setOpenDate(openDate);
           assertEquals(openDate, orderDataBean.getOpenDate());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderType_wYaP3() {
           OrderDataBean orderDataBean = new OrderDataBean();
           String orderType = "BUY";
           orderDataBean.setOrderType(orderType);
           assertEquals(orderType, orderDataBean.getOrderType());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus_LmmG4() {
           OrderDataBean orderDataBean = new OrderDataBean();
           String orderStatus = "OPEN";
           orderDataBean.setOrderStatus(orderStatus);
           assertEquals(orderStatus, orderDataBean.getOrderStatus());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetCompletionDate_esGo5() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Date completionDate = new Date();
           orderDataBean.setCompletionDate(completionDate);
           assertEquals(completionDate, orderDataBean.getCompletionDate());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetQuantity_aipa6() {
           OrderDataBean orderDataBean = new OrderDataBean();
           double quantity = 100.0;
           orderDataBean.setQuantity(quantity);
           assertEquals(quantity, orderDataBean.getQuantity(), 0.0);
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetPrice_ZGYI7() {
           OrderDataBean orderDataBean = new OrderDataBean();
           BigDecimal price = new BigDecimal(100.0);
           orderDataBean.setPrice(price);
           assertEquals(price, orderDataBean.getPrice());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderFee_AMtS8() {
           OrderDataBean orderDataBean = new OrderDataBean();
           BigDecimal orderFee = new BigDecimal(10.0);
           orderDataBean.setOrderFee(orderFee);
           assertEquals(orderFee, orderDataBean.getOrderFee());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetSymbol_OpiU9() {
           OrderDataBean orderDataBean = new OrderDataBean();
           String symbol = "AAPL";
           orderDataBean.setSymbol(symbol);
           assertEquals(symbol, orderDataBean.getSymbol());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testsetOpenDate() throws Exception{
           orderdatabean = new OrderDataBean();
           openDate = new Date();
           orderdatabean.setOpenDate(openDate);
           assertEquals(openDate, orderdatabean.getOpenDate());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOpenDate_coff0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       Date openDate = new Date();
       orderDataBean.setOpenDate(openDate);
       assertEquals(openDate, orderDataBean.getOpenDate());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetHolding() throws Exception {
           holding = mock(HoldingDataBean.class);
           orderdatabean = new OrderDataBean();
           orderdatabean.setHolding(holding);
           verify(orderdatabean, times(1)).setHolding(holding);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetHolding_Upds0() {
           OrderDataBean order = new OrderDataBean();
           HoldingDataBean holding = new HoldingDataBean();
           order.setHolding(holding);
           assertNotNull(order.getHolding());
           assertEquals(holding, order.getHolding());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetCompletionDate() throws Exception{
           orderdatabean = new OrderDataBean();
           completionDate = new Date();
           orderdatabean.setCompletionDate(completionDate);
           assertEquals(completionDate, orderdatabean.getCompletionDate());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void test_tbDO0() {
           OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
           assertEquals(new Date(), orderDataBean.getCompletionDate());
       }
       private String orderType; /* orderType (buy, sell, etc.) */
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_Ruht1_1() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_Ruht1_3() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_Ruht1_6() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        orderID = 123;
        orderdatabean = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.50"), " symbol");
        when(orderdatabean.getAccount()).thenReturn(account);
        when(orderdatabean.getQuote()).thenReturn(quote);
        when(orderdatabean.getHolding()).thenReturn(holding);
        int expectedHashCode = orderID.hashCode();
        int actualHashCode = orderdatabean.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_zsxU0_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_zsxU0_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertEquals(0.0, holdingDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_zsxU0_3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertEquals("", holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_zsxU0_4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_zsxU0_5() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancel() {
        orderDataBean = new OrderDataBean();
        orderDataBean.setAccount(accountDataBean);
        orderDataBean.setQuote(quoteDataBean);
        orderDataBean.setHolding(holdingDataBean);
        orderDataBean.cancel();
        verify(orderDataBean).setOrderStatus("cancelled");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML() {
        orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.10"), " symbol");
        when(orderDataBean.getAccount()).thenReturn(accountDataBean);
        when(orderDataBean.getQuote()).thenReturn(quoteDataBean);
        when(orderDataBean.getHolding()).thenReturn(holdingDataBean);
        String expectedHTML = "<BR>Order <B>1</B>" + "<LI>      orderType: BUY</LI>" + "<LI>    orderStatus: OPEN</LI>" + "<LI>       openDate: " + new Date() + "</LI>" + "<LI> completionDate: " + new Date() + "</LI>" + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 10.00</LI>" + "<LI>       orderFee: 0.10</LI>" + "<LI>         symbol:  symbol</LI>";
        String actualHTML = orderDataBean.toHTML();
        assertEquals(expectedHTML, actualHTML);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity() throws Exception {
        orderdatabean = new OrderDataBean();
        quantity = 100.0;
        when(orderdatabean.getQuantity()).thenReturn(quantity);
        assertEquals(quantity, orderdatabean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_jVdY0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal orderFee = orderDataBean.getOrderFee();
        assertNotNull(orderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice() throws Exception {
        orderdatabean = new OrderDataBean();
        // Mock the dependencies
        QuoteDataBean quote = mock(QuoteDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        HoldingDataBean holding = mock(HoldingDataBean.class);
        // Set up the expected behavior
        when(quote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(account.getProfileID()).thenReturn("123");
        when(holding.getPurchasePrice()).thenReturn(BigDecimal.valueOf(50.0));
        // Set the dependencies on the order data bean
        orderdatabean.setQuote(quote);
        orderdatabean.setAccount(account);
        orderdatabean.setHolding(holding);
        // Call the method under test
        orderdatabean.setPrice(BigDecimal.valueOf(150.0));
        // Verify the expected behavior
        assertEquals(BigDecimal.valueOf(150.0), orderdatabean.getPrice());
        verify(quote, times(1)).getPrice();
        verify(account, times(1)).getProfileID();
        verify(holding, times(1)).getPurchasePrice();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSellWhenOrderTypeIsSell() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(accountDataBean);
        orderdatabean.setQuote(quoteDataBean);
        orderdatabean.setHolding(holdingDataBean);
        when(orderdatabean.getOrderType()).thenReturn("sell");
        assertTrue(orderdatabean.isSell());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSellWhenOrderTypeIsNotSell() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(accountDataBean);
        orderdatabean.setQuote(quoteDataBean);
        orderdatabean.setHolding(holdingDataBean);
        when(orderdatabean.getOrderType()).thenReturn("buy");
        assertFalse(orderdatabean.isSell());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCompleted_1() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(accountDataBean);
        orderdatabean.setQuote(quoteDataBean);
        orderdatabean.setHolding(holdingDataBean);
        when(orderdatabean.getOrderStatus()).thenReturn("completed");
        when(orderdatabean.getOrderStatus()).thenReturn("alertcompleted");
        when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        assertTrue(orderdatabean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCompleted_4() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(accountDataBean);
        orderdatabean.setQuote(quoteDataBean);
        orderdatabean.setHolding(holdingDataBean);
        when(orderdatabean.getOrderStatus()).thenReturn("completed");
        when(orderdatabean.getOrderStatus()).thenReturn("alertcompleted");
        when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        assertFalse(orderdatabean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetQuote() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        orderdatabean.setQuote(quote);
        verify(orderdatabean, times(1)).setQuote(quote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisBuy() throws Exception {
        orderType = "buy";
        when(orderdatabean.getOrderType()).thenReturn(orderType);
        boolean isBuy = orderdatabean.isBuy();
        assertTrue(isBuy);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccount() throws Exception {
        account = mock(AccountDataBean.class);
        orderdatabean = new OrderDataBean();
        when(orderdatabean.getAccount()).thenReturn(account);
        assertEquals(account, orderdatabean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_eeIh0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = orderDataBean.getAccount();
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_egfs0_1() throws Exception {
        orderdatabean = new OrderDataBean();
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        when(orderdatabean.getOrderStatus()).thenReturn("processing");
        when(orderdatabean.getOrderStatus()).thenReturn("closed");
        when(orderdatabean.getOrderStatus()).thenReturn("canceled");
        when(orderdatabean.getOrderStatus()).thenReturn("completed");
        assertTrue(orderdatabean.isOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_egfs0_3() throws Exception {
        orderdatabean = new OrderDataBean();
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        when(orderdatabean.getOrderStatus()).thenReturn("processing");
        when(orderdatabean.getOrderStatus()).thenReturn("closed");
        when(orderdatabean.getOrderStatus()).thenReturn("canceled");
        when(orderdatabean.getOrderStatus()).thenReturn("completed");
        assertFalse(orderdatabean.isOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_cklZ0() {
        orderDataBean = new OrderDataBean();
        when(orderDataBean.getAccount()).thenReturn(accountDataBean);
        when(orderDataBean.getQuote()).thenReturn(quoteDataBean);
        when(orderDataBean.getHolding()).thenReturn(holdingDataBean);
        when(accountDataBean.getProfileID()).thenReturn("profileID");
        when(quoteDataBean.getSymbol()).thenReturn("symbol");
        when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.valueOf(100.0));
        String toStringResult = orderDataBean.toString();
        String expectedResult = "Order null\n\t      orderType: null\n\t    orderStatus: null\n\t       openDate: null\n\t completionDate: null\n\t       quantity: 0.0\n\t          price: null\n\t       orderFee: null\n\t         symbol: symbol";
        assertEquals(expectedResult, toStringResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_oFbo0() throws Exception {
        HoldingDataBean holding = mock(HoldingDataBean.class);
        OrderDataBean orderdatabean = new OrderDataBean();
        orderdatabean.setHolding(holding);
        verify(orderdatabean, times(1)).setHolding(holding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_Ruht1() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getAccount());
        assertNotNull(orderDataBean.getCompletionDate());
        assertNotNull(orderDataBean.getHolding());
        assertNotNull(orderDataBean.getOpenDate());
        assertNotNull(orderDataBean.getPrice());
        assertNotNull(orderDataBean.getQuote());
        assertNotNull(orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_zsxU0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean);
        assertEquals(0.0, holdingDataBean.getQuantity(), 0.0);
        assertEquals("", holdingDataBean.getQuoteID());
        assertNotNull(holdingDataBean.getQuote());
        assertNotNull(holdingDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOrderType_SGvg3_fid1() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type2", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        assertFalse(orderDataBean1.equals(orderDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOrderStatus_GEFU4_fid1() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status2", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        assertFalse(orderDataBean1.equals(orderDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOpenDate_dFwy5_fid1() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status1", new Date(System.currentTimeMillis() + 1000), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        assertFalse(orderDataBean1.equals(orderDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentCompletionDate_LkSG6_fid1() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(System.currentTimeMillis() + 1000), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol1");
        assertFalse(orderDataBean1.equals(orderDataBean2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderTypeTest_zhRP0_fid1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String orderType = orderDataBean.getOrderType();
        assertEquals("BUY", orderType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCompleted() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(accountDataBean);
        orderdatabean.setQuote(quoteDataBean);
        orderdatabean.setHolding(holdingDataBean);
        when(orderdatabean.getOrderStatus()).thenReturn("completed");
        assertTrue(orderdatabean.isCompleted());
        when(orderdatabean.getOrderStatus()).thenReturn("alertcompleted");
        assertTrue(orderdatabean.isCompleted());
        when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
        assertTrue(orderdatabean.isCompleted());
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        assertFalse(orderdatabean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_XeAW0_fid2() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(accountDataBean);
        orderdatabean.setQuote(quoteDataBean);
        orderdatabean.setHolding(holdingDataBean);
        when(accountDataBean.getLoginCount()).thenReturn(10);
        when(quoteDataBean.getSymbol()).thenReturn("TEST");
        when(holdingDataBean.getQuantity()).thenReturn(100.0);
        String orderStatus = orderdatabean.getOrderStatus();
        assertEquals("open", orderStatus);
    }
}