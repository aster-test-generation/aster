/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_FinancialUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeGainPercent_aexn0() {
        BigDecimal currentBalance = new BigDecimal(100.00000);
        BigDecimal openBalance = new BigDecimal(500);
        BigDecimal expectedGainPercent = new BigDecimal(100.0000);
        BigDecimal actualGainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
        assertEquals(expectedGainPercent, actualGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeGainPercent_aexn0_fid1() {
        BigDecimal currentBalance = new BigDecimal(1000);
        BigDecimal openBalance = new BigDecimal(500);
        BigDecimal expectedGainPercent = new BigDecimal(100);
        BigDecimal actualGainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
        assertEquals(expectedGainPercent, actualGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeGainPercentWithZeroOpenBalance_aMoa1() {
        BigDecimal currentBalance = new BigDecimal(1000);
        BigDecimal openBalance = BigDecimal.ZERO;
        BigDecimal expectedGainPercent = BigDecimal.ZERO;
        BigDecimal actualGainPercent = FinancialUtils.computeGainPercent(currentBalance, openBalance);
        assertEquals(expectedGainPercent, actualGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintGainPercentHTMLBigDecimalGain_YiZF0_fid1() {
        BigDecimal gain = BigDecimal.ZERO;
        String expected = "(<B><FONT color=\"#009900\">+0.00</FONT></B>)<IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
        String actual = FinancialUtils.printGainPercentHTML(gain);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintGainPercentHTMLBigDecimalGain2_OBuq1_fid1() {
        BigDecimal gain = BigDecimal.ONE;
        String expected = "(<B><FONT color=\"#009900\">+1.00</FONT></B>)<IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
        String actual = FinancialUtils.printGainPercentHTML(gain);
        assertEquals(expected, actual);
    }
}