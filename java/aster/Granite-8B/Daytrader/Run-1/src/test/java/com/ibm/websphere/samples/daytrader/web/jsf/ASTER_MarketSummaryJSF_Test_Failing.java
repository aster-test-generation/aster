/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryJSF_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_dQwV0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertNotNull(gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenTSIA_XbHK0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setOpenTSIA(new BigDecimal(100));
        assertEquals(new BigDecimal(100), marketSummaryJSF.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_NbHE0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = new BigDecimal("1.00");
        marketSummaryJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, marketSummaryJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSummaryDate_Lnko0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        Date summaryDate = marketSummaryJSF.getSummaryDate();
        assertNotNull(summaryDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTSIA_IFfN0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal tSIA = marketSummaryJSF.getTSIA();
        assertNotNull(tSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVolume_SYjy0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        double volume = marketSummaryJSF.getVolume();
        assertEquals(0.0, volume, 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopGainers_yILy0_1() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = marketSummaryJSF.getTopGainers();
        assertNotNull(topGainers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopGainers_yILy0_2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = marketSummaryJSF.getTopGainers();
        assertNotEquals(0, topGainers.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopLosers_CCLL0_1() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
        assertNotNull(topLosers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopLosers_CCLL0_2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
        assertEquals(10, topLosers.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_UnYz0_Kfqe0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setVolume(100.0);
        assertEquals(100.0, marketSummaryJSF.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSummaryDate_dWua0_naDL0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        Date summaryDate = new Date();
        marketSummaryJSF.setSummaryDate(summaryDate);
        assertEquals(summaryDate, marketSummaryJSF.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_oTlF4_gRJH0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        int volume = 100000;
        marketSummaryJSF.setVolume(volume);
        assertEquals(volume, marketSummaryJSF.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenTSIA_zOKg0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal openTSIA = marketSummaryJSF.getOpenTSIA();
        Assertions.assertNotNull(openTSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_100_percent_coverage_SmAN1() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertEquals(gainPercent, BigDecimal.ZERO);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getTSIA_with_null_services_Iqjk1_fid2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal tSIA = marketSummaryJSF.getTSIA();
        assertNull(tSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopGainers_yILy0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = marketSummaryJSF.getTopGainers();
        assertNotNull(topGainers);
        assertNotEquals(0, topGainers.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopLosers_CCLL0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topLosers = marketSummaryJSF.getTopLosers();
        assertNotNull(topLosers);
        assertEquals(10, topLosers.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarketSummaryJSF_aKoC1() {
        new MarketSummaryJSF(null);
    }
}