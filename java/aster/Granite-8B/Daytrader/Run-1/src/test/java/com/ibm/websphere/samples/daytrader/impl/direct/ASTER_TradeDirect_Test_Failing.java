/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.inject.Inject;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
    private static HoldingDataBean holdingData;
    private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";
    @Inject
    private static OrderDataBean orderData;
    private static final int HOLDING_ID = 1;
    TradeDirect tradedirect;
    DataSource datasource;
    Connection connection;
    private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
    private static Integer marketSummaryLock = new Integer(0);
    private static long nextMarketSummary = System.currentTimeMillis();
    PreparedStatement preparedstatement;
    ResultSet resultset;
    private static String getAllQuotesSQL = "select * from quoteejb q";
    private boolean inSession = false;
    OrderDataBean orderDataBean;
    private static final String USER_ID = "user1";
    private static final int RESULT_SET_SIZE = 5;
    @Mock
    private TradeDirect tradeDirect;
    @Mock
    private PreparedStatement preparedStatement;
    @Mock
    private ResultSet resultSet;
    @Mock
    private DataSource dataSource;
    private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
    QuoteDataBean quoteData;
    @Mock
    AccountDataBean accountData;
    private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
    private  UserTransaction txn;
    private ManagedExecutorService mes;
    private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
    private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
    private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
    private static BigDecimal ZERO = new BigDecimal(0.0);
    private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_FhjM0_1() throws Exception {
        MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();
        TradeDirect tradeDirect0 = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean1 = tradeDirect0.getMarketSummary();
        assertEquals(marketSummaryDataBean0.getOpenTSIA(), marketSummaryDataBean1.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_FhjM0_2() throws Exception {
        MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();
        TradeDirect tradeDirect0 = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean1 = tradeDirect0.getMarketSummary();
        assertEquals(marketSummaryDataBean0.getGainPercent(), marketSummaryDataBean1.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_FhjM0_3() throws Exception {
        MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();
        TradeDirect tradeDirect0 = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean1 = tradeDirect0.getMarketSummary();
        assertEquals(marketSummaryDataBean0.getSummaryDate(), marketSummaryDataBean1.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_FhjM0_4() throws Exception {
        MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();
        TradeDirect tradeDirect0 = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean1 = tradeDirect0.getMarketSummary();
        assertEquals(marketSummaryDataBean0.getTSIA(), marketSummaryDataBean1.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_FhjM0_5() throws Exception {
        MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();
        TradeDirect tradeDirect0 = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean1 = tradeDirect0.getMarketSummary();
        assertEquals(marketSummaryDataBean0.getVolume(), marketSummaryDataBean1.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_FhjM0_6() throws Exception {
        MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();
        TradeDirect tradeDirect0 = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean1 = tradeDirect0.getMarketSummary();
        assertEquals(marketSummaryDataBean0.getTopGainers(), marketSummaryDataBean1.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_FhjM0_7() throws Exception {
        MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();
        TradeDirect tradeDirect0 = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean1 = tradeDirect0.getMarketSummary();
        assertEquals(marketSummaryDataBean0.getTopLosers(), marketSummaryDataBean1.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables_uUAR0_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[2];
        sqlBuffer[0] = "CREATE TABLE table1 (id INT, name VARCHAR(255))";
        sqlBuffer[1] = "CREATE TABLE table2 (id INT, name VARCHAR(255))";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables1_itVy0_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[1];
        sqlBuffer[0] = "CREATE TABLE users (id INT, name VARCHAR(255))";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables3_Giua2_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[2];
        sqlBuffer[0] = "CREATE TABLE users (id INT, name VARCHAR(255))";
        sqlBuffer[1] = "CREATE TABLE users (id INT, name VARCHAR(255))";
        java.io.PrintWriter out = new java.io.PrintWriter(System.out);
        boolean result = tradeDirect.recreateDBTables(sqlBuffer, out);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_MsNW0() {
        TradeDirect tradeDirect = new TradeDirect();
        double rnd1 = 0.5;
        double rnd2 = 0.8;
        double expected = 0.4;
        double actual = tradeDirect.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_rQpB0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_rQpB0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
        assertTrue(!quotes.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders1_eyCG0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user1";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        Assertions.assertNotNull(orderDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders1_eyCG0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user1";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        Assertions.assertTrue(orderDataBeans.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders2_sHTL1_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user2";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        Assertions.assertNotNull(orderDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders2_sHTL1_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user2";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        Assertions.assertTrue(orderDataBeans.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders3_gmSe2_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user3";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        Assertions.assertNotNull(orderDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders3_gmSe2_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user3";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        Assertions.assertTrue(orderDataBeans.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_uXVv0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_uXVv0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_uXVv0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_uXVv0_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getPrice(), result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_uXVv0_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_uXVv0_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getLow(), result.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_uXVv0_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_uXVv0_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_uXVv0_9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_vRXD0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(123);
        assertNotNull(accountData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_hEjs0() {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = null;
        try {
            accountData = tradeDirect.getAccountData(1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(accountData);
        assertTrue(accountData.getBalance().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_fown0_1() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_fown0_2() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_fown0_3() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_fown0_4() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getPrice(), result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_fown0_5() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_fown0_6() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getLow(), result.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_fown0_7() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_fown0_8() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_fown0_9() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_mcSA0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user123";
        tradeDirect.logout(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetHolding_nuBl1_1() throws Exception {
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetHolding_nuBl1_2() throws Exception {
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertEquals(1, holdingData.getHoldingID().intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetHolding_nuBl1_3() throws Exception {
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetHolding_nuBl1_4() throws Exception {
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetHolding_nuBl1_5() throws Exception {
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetHolding_nuBl1_6() throws Exception {
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetHolding_nuBl1_7() throws Exception {
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetHolding_nuBl1_8() throws Exception {
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertTrue(holdingData.getQuantity() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_cvXJ1_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = new BigDecimal(1.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_cvXJ1_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = new BigDecimal(1.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteDataBean.getPrice(), changeFactor.multiply(quoteDataBean.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_cvXJ1_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = new BigDecimal(1.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(updatedQuoteDataBean.getVolume(), quoteDataBean.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_jeVx0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_jeVx0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_jeVx0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_jeVx0_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_jeVx0_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_jeVx0_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_jeVx0_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_jeVx0_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithPennyStockPrice_KZlv1_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.PENNY_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithPennyStockPrice_KZlv1_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.PENNY_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithPennyStockPrice_KZlv1_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.PENNY_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithPennyStockPrice_KZlv1_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.PENNY_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithPennyStockPrice_KZlv1_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.PENNY_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithPennyStockPrice_KZlv1_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.PENNY_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithPennyStockPrice_KZlv1_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.PENNY_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithPennyStockPrice_KZlv1_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.PENNY_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithMaximumStockPrice_HdUq2_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithMaximumStockPrice_HdUq2_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithMaximumStockPrice_HdUq2_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithMaximumStockPrice_HdUq2_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithMaximumStockPrice_HdUq2_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithMaximumStockPrice_HdUq2_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithMaximumStockPrice_HdUq2_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithMaximumStockPrice_HdUq2_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_oRUe0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_oRUe0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_oRUe0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_oRUe0_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getPrice(), result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_oRUe0_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_oRUe0_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getLow(), result.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_oRUe0_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_oRUe0_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_oRUe0_9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetConnPublic_XDNK1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = tradeDirect.getConnPublic();
        Assertions.assertNotNull(conn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetConnPublic2_dNRA2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = tradeDirect.getConnPublic();
        Assertions.assertNull(conn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderIDAndTwoPhase_OEWg0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeDirect.cancelOrder(orderID, twoPhase);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderIDAndTwoPhase2_RoNA1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 2;
        boolean twoPhase = true;
        tradeDirect.cancelOrder(orderID, twoPhase);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderIDAndTwoPhase3_DkjY2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 3;
        boolean twoPhase = true;
        tradeDirect.cancelOrder(orderID, twoPhase);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderIDAndTwoPhase4_daXX3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 4;
        boolean twoPhase = true;
        tradeDirect.cancelOrder(orderID, twoPhase);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderIDAndTwoPhase5_QhYd4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 5;
        boolean twoPhase = true;
        tradeDirect.cancelOrder(orderID, twoPhase);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderIDAndTwoPhase6_hauc5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 6;
        boolean twoPhase = true;
        tradeDirect.cancelOrder(orderID, twoPhase);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderIDAndTwoPhase7_BLbP6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 7;
        boolean twoPhase = true;
        tradeDirect.cancelOrder(orderID, twoPhase);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderIDAndTwoPhase8_uOob7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 8;
        boolean twoPhase = true;
        tradeDirect.cancelOrder(orderID, twoPhase);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderIDAndTwoPhase9_AsPR8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 9;
        boolean twoPhase = true;
        tradeDirect.cancelOrder(orderID, twoPhase);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_Fhtp0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        BigDecimal TSIA = marketSummaryData.getOpenTSIA();
        BigDecimal openTSIA = marketSummaryData.getGainPercent();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(marketSummaryData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_Fhtp0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        BigDecimal TSIA = marketSummaryData.getOpenTSIA();
        BigDecimal openTSIA = marketSummaryData.getGainPercent();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(TSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_Fhtp0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        BigDecimal TSIA = marketSummaryData.getOpenTSIA();
        BigDecimal openTSIA = marketSummaryData.getGainPercent();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(openTSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_Fhtp0_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        BigDecimal TSIA = marketSummaryData.getOpenTSIA();
        BigDecimal openTSIA = marketSummaryData.getGainPercent();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertTrue(volume >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_Fhtp0_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        BigDecimal TSIA = marketSummaryData.getOpenTSIA();
        BigDecimal openTSIA = marketSummaryData.getGainPercent();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(topGainersData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_Fhtp0_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        BigDecimal TSIA = marketSummaryData.getOpenTSIA();
        BigDecimal openTSIA = marketSummaryData.getGainPercent();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertTrue(topGainersData.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_Fhtp0_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        BigDecimal TSIA = marketSummaryData.getOpenTSIA();
        BigDecimal openTSIA = marketSummaryData.getGainPercent();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(topLosersData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_Fhtp0_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        BigDecimal TSIA = marketSummaryData.getOpenTSIA();
        BigDecimal openTSIA = marketSummaryData.getGainPercent();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertTrue(topLosersData.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderWithTwoPhaseCommit_ffOa2_mzyt0() throws Exception {
        OrderDataBean orderData = new OrderDataBean();
        orderData.setOrderID(1);
        orderData.setOrderType("buy");
        orderData.setQuantity(100.0);
        orderData.setPrice(new BigDecimal(100.0));
        orderData.setOpenDate(new java.util.Date());
        orderData.setCompletionDate(new java.util.Date());
        orderData.setOrderStatus("open");
        orderData.setOrderFee(new BigDecimal(10.0));
        orderData.setSymbol("symbol1");
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
        when(conn.createStatement()).thenReturn(mock(Statement.class));
        doThrow(new Exception()).when(conn).commit();
        try {
            tradeDirect.completeOrder(orderData.getOrderID(), true);
        } catch (Exception e) {
        }
        verify(conn, times(1)).prepareStatement(anyString());
        verify(conn, times(1)).commit();
        verify(conn, times(1)).rollback();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_tSEz0_KnTv0() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = new OrderDataBean();
        boolean twoPhase = true;
        OrderDataBean result = null;
        try {
            result = tradeDirect.completeOrder(orderDataBean.getOrderID(), twoPhase);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertTrue(result.getCompletionDate() != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderWithNullOrderID_UcTo1_fvcV0() {
        TradeDirect tradeDirect = new TradeDirect();
        boolean twoPhase = true;
        OrderDataBean result = null;
        try {
            result = tradeDirect.completeOrder(null, twoPhase);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertTrue(result.getCompletionDate() != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderWithInvalidOrderID_lIpA2_IJeW0() {
        TradeDirect tradeDirect = new TradeDirect();
        boolean twoPhase = true;
        OrderDataBean result = null;
        try {
            result = tradeDirect.completeOrder(-1, twoPhase);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(result);
        assertTrue(result.getCompletionDate() != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_CBTE0_iAvN0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            OrderDataBean orderData = tradeDirect.sell("user1", 1, 1);
            assertNotNull(orderData);
            assertEquals("sell", orderData.getOrderType());
            assertEquals("open", orderData.getOrderStatus());
        } catch (Exception e) {
            fail(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithNullUserID_IIbl1_Hbww0() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = null;
        try {
            orderData = tradeDirect.sell(null, 1, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(orderData);
        assertEquals("cancelled", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidHoldingID_HGsK2_sYKE0() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = null;
        try {
            orderData = tradeDirect.sell("user1", 0, 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(orderData);
        assertEquals("cancelled", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidOrderProcessingMode_zzVU3_UkZw0() {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = null;
        try {
            orderData = tradeDirect.sell("user1", 1, 3);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(orderData);
        assertEquals("cancelled", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_vZAG0_KBDJ0() {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        OrderDataBean orderData = null;
        try {
            orderData = tradeDirect.createOrder(accountData, quoteData, holdingData, orderType, quantity);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(orderData);
        assertEquals("BUY", orderData.getOrderType());
        assertEquals("open", orderData.getOrderStatus());
        assertEquals(quantity, orderData.getQuantity(), 0.0);
        assertEquals(quoteData.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), orderData.getPrice());
        assertEquals(TradeConfig.getOrderFee(orderType), orderData.getOrderFee());
        assertEquals(accountData.getAccountID().intValue(), orderData.getAccount().getAccountID().intValue());
        if (holdingData == null) {
            assertTrue(orderData.getHolding() == null);
        } else {
            assertEquals(holdingData.getHoldingID().intValue(), orderData.getHolding().getHoldingID().intValue());
        }
        assertEquals(quoteData.getSymbol(), orderData.getQuote().getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_DKPO0_nrTe0() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setPassword("newPassword");
        profileData.setFullName("newFullName");
        profileData.setAddress("newAddress");
        profileData.setEmail("newEmail");
        profileData.setCreditCard("newCreditCard");
        profileData.setUserID("newUserID");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = null;
        try {
            updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(updatedProfileData);
        assertEquals("newPassword", updatedProfileData.getPassword());
        assertEquals("newFullName", updatedProfileData.getFullName());
        assertEquals("newAddress", updatedProfileData.getAddress());
        assertEquals("newEmail", updatedProfileData.getEmail());
        assertEquals("newCreditCard", updatedProfileData.getCreditCard());
        assertEquals("newUserID", updatedProfileData.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_FhjM0() throws Exception {
        MarketSummaryDataBean marketSummaryDataBean0 = MarketSummaryDataBean.getRandomInstance();
        TradeDirect tradeDirect0 = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean1 = tradeDirect0.getMarketSummary();
        assertEquals(marketSummaryDataBean0.getOpenTSIA(), marketSummaryDataBean1.getOpenTSIA());
        assertEquals(marketSummaryDataBean0.getGainPercent(), marketSummaryDataBean1.getGainPercent());
        assertEquals(marketSummaryDataBean0.getSummaryDate(), marketSummaryDataBean1.getSummaryDate());
        assertEquals(marketSummaryDataBean0.getTSIA(), marketSummaryDataBean1.getTSIA());
        assertEquals(marketSummaryDataBean0.getVolume(), marketSummaryDataBean1.getVolume());
        assertEquals(marketSummaryDataBean0.getTopGainers(), marketSummaryDataBean1.getTopGainers());
        assertEquals(marketSummaryDataBean0.getTopLosers(), marketSummaryDataBean1.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_rQpB0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
        assertNotNull(quotes);
        assertTrue(!quotes.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders1_eyCG0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user1";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        Assertions.assertNotNull(orderDataBeans);
        Assertions.assertTrue(orderDataBeans.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders2_sHTL1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user2";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        Assertions.assertNotNull(orderDataBeans);
        Assertions.assertTrue(orderDataBeans.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders3_gmSe2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user3";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        Assertions.assertNotNull(orderDataBeans);
        Assertions.assertTrue(orderDataBeans.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_fown0() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertNotNull(result);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
        assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), result.getPrice());
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
        assertEquals(quoteDataBean.getLow(), result.getLow());
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.0);
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
        assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetHolding_nuBl1() throws Exception {
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData);
        assertEquals(1, holdingData.getHoldingID().intValue());
        assertNotNull(holdingData.getAccount());
        assertNotNull(holdingData.getQuote());
        assertNotNull(holdingData.getPurchaseDate());
        assertNotNull(holdingData.getPurchasePrice());
        assertNotNull(holdingData.getQuoteID());
        assertTrue(holdingData.getQuantity() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_cvXJ1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = new BigDecimal(1.0);
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
        assertEquals(updatedQuoteDataBean.getPrice(), changeFactor.multiply(quoteDataBean.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
        assertEquals(updatedQuoteDataBean.getVolume(), quoteDataBean.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_jeVx0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
        assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithPennyStockPrice_KZlv1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.PENNY_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
        assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithMaximumStockPrice_HdUq2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        quoteDataBean.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE);
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
        assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_oRUe0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(result);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
        assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), result.getPrice());
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
        assertEquals(quoteDataBean.getLow(), result.getLow());
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.0);
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
        assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithOrderIDAndTwoPhase10_OpvE9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 10;
        boolean twoPhase = true;
        tradeDirect.cancelOrder(orderID, twoPhase);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_mfgF0() {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user1";
        AccountDataBean accountData = null;
        try {
            accountData = tradeDirect.getAccountData(userID);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(accountData);
        assertTrue(accountData.getBalance().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_Fhtp0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryData = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        BigDecimal TSIA = marketSummaryData.getOpenTSIA();
        assertNotNull(TSIA);
        BigDecimal openTSIA = marketSummaryData.getGainPercent();
        assertNotNull(openTSIA);
        double volume = marketSummaryData.getVolume();
        assertTrue(volume >= 0);
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        assertNotNull(topGainersData);
        assertTrue(topGainersData.size() <= 5);
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(topLosersData);
        assertTrue(topLosersData.size() <= 5);
    }
}