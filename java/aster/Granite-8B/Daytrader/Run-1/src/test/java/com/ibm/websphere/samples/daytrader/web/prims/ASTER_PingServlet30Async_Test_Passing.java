/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet30Async_Test_Passing {
    private static String initTime;
    private static int hitCount;
    PingServlet30Async pingservlet30async;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    ServletInputStream servletinputstream;
    ServletOutputStream servletoutputstream;
    @Mock
    HttpServlet httpServlet;
    @Mock
    HttpServletResponse httpServletResponse;
    @Mock
    HttpServletRequest httpServletRequest;
    @Mock
    ServletInputStream servletInputStream;
    @Mock
    ServletOutputStream servletOutputStream;
    PingServlet30Async pingServlet30Async;
    private ServletConfig config;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservlet30async = new PingServlet30Async();
        pingservlet30async.init(httpservlet);
        verify(httpservlet, times(1)).init(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_QrZq0() {
        PingServlet30Async pingServlet30Async = new PingServlet30Async();
        String servletInfo = pingServlet30Async.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", servletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet() throws Exception {
        pingServlet30Async = new PingServlet30Async();
        when(httpServletRequest.getInputStream()).thenReturn(servletInputStream);
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        pingServlet30Async.doGet(httpServletRequest, httpServletResponse);
        verify(httpServletRequest).getInputStream();
        verify(httpServletResponse).getOutputStream();
    }
}