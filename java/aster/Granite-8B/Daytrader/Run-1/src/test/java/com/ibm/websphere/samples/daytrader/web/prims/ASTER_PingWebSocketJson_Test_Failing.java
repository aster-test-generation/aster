/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.web.websocket.JsonMessage;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedThreadFactory;
import javax.naming.InitialContext;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingWebSocketJson_Test_Failing {
    private Session currentSession = null;
    private Integer sentHitCount = null;
    private Integer receivedHitCount = null;
    @Mock
    private Session session;
    @Mock
    private ManagedThreadFactory mtf;
    @Mock
    private InitialContext context;
    @InjectMocks
    private PingWebSocketJson pingWebSocketJson;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPing_RHAc0_1() throws IOException {
        PingWebSocketJson pingWebSocketJson = new PingWebSocketJson();
        JsonMessage message = new JsonMessage();
        message.setValue("testValue");
        message.setKey("testKey");
        pingWebSocketJson.ping(message);
        assertEquals("testValue", message.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPing_RHAc0_2() throws IOException {
        PingWebSocketJson pingWebSocketJson = new PingWebSocketJson();
        JsonMessage message = new JsonMessage();
        message.setValue("testValue");
        message.setKey("testKey");
        pingWebSocketJson.ping(message);
        assertEquals("testKey", message.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPing_RHAc0() throws IOException {
        PingWebSocketJson pingWebSocketJson = new PingWebSocketJson();
        JsonMessage message = new JsonMessage();
        message.setValue("testValue");
        message.setKey("testKey");
        pingWebSocketJson.ping(message);
        assertEquals("testValue", message.getValue());
        assertEquals("testKey", message.getKey());
    }
}