/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTradeUserCount_rjJc0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int tradeUserCount = 10;
        runStatsDataBean.setTradeUserCount(tradeUserCount);
        int actualTradeUserCount = runStatsDataBean.getTradeUserCount();
        assertEquals(tradeUserCount, actualTradeUserCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCount_YhPl0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(10);
        assertEquals(10, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCount_EJVe2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(10);
        assertEquals(10, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingCount_KZxV3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(10);
        assertEquals(10, runStatsDataBean.getHoldingCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCount_tmEY0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(10);
        assertEquals(10, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCountWithZero_hBoA1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(0);
        assertEquals(0, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeUserCount_mWos0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingCount_iLUg5() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(15);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBuyOrderCount_SInW0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int buyOrderCount = runStatsDataBean.getBuyOrderCount();
        assertEquals(0, buyOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_KeDX0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int orderCount = runStatsDataBean.getOrderCount();
        assertEquals(0, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenOrderCount_IRYy0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int openOrderCount = runStatsDataBean.getOpenOrderCount();
        assertEquals(0, openOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewUserCount_fFez0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int newUserCount = runStatsDataBean.getNewUserCount();
        assertEquals(0, newUserCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOpenOrderCount_IHvg0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(1);
        assertEquals(1, runStatsDataBean.getOpenOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_QeYq0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(1);
        assertEquals(1, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLoginCount_GndY0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sumLoginCount = 10;
        runStatsDataBean.setSumLoginCount(sumLoginCount);
        assertEquals(sumLoginCount, runStatsDataBean.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingCount_iMYg0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(1);
        assertEquals(1, runStatsDataBean.getHoldingCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCancelledOrderCount_JJbZ0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int cancelledOrderCount = runStatsDataBean.getCancelledOrderCount();
        assertEquals(0, cancelledOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_avUB0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: 0\n\t\t        newUserCount: 0\n\t\t       sumLoginCount: 0\n\t\t      sumLogoutCount: 0\n\t\t        holdingCount: 0\n\t\t          orderCount: 0\n\t\t       buyOrderCount: 0\n\t\t      sellOrderCount: 0\n\t\t cancelledOrderCount: 0\n\t\t      openOrderCount: 0\n\t\t   deletedOrderCount: 0";
        assertEquals(expected, runStatsDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeStockCount_jAfS0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int tradeStockCount = runStatsDataBean.getTradeStockCount();
        assertEquals(0, tradeStockCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDeletedOrderCount_JTvQ0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int deletedOrderCount = 10;
        runStatsDataBean.setDeletedOrderCount(deletedOrderCount);
        assertEquals(deletedOrderCount, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLogoutCount_BeTn0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
        assertEquals(0, sumLogoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLogoutCountWithPositiveValue_sXuz2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(10);
        int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
        assertEquals(10, sumLogoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLogoutCountWithNegativeValue_Bjbn3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(-10);
        int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
        assertEquals(-10, sumLogoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewUserCount_VBLW0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setNewUserCount(10);
        assertEquals(10, runStatsDataBean.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewUserCountZero_eaCj2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setNewUserCount(0);
        assertEquals(0, runStatsDataBean.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewUserCountNegative_DOoA3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setNewUserCount(-10);
        assertEquals(-10, runStatsDataBean.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLoginCount_MGme0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sumLoginCount = runStatsDataBean.getSumLoginCount();
        assertEquals(0, sumLoginCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCancelledOrderCount_hXwn0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(10);
        assertEquals(10, runStatsDataBean.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCancelledOrderCountWithZero_cEOr2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(0);
        assertEquals(0, runStatsDataBean.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLogoutCount_VBDT0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sumLogoutCount = 10; // Replace with any value
        runStatsDataBean.setSumLogoutCount(sumLogoutCount);
        assertEquals(sumLogoutCount, runStatsDataBean.getSumLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingCount_DFxB0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(0, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCount_Vlmc0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sellOrderCount = runStatsDataBean.getSellOrderCount();
        assertEquals(0, sellOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCountWithPositiveValue_pjBC1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(10);
        int sellOrderCount = runStatsDataBean.getSellOrderCount();
        assertEquals(10, sellOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCountWithNegativeValue_imyY2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(-10);
        int sellOrderCount = runStatsDataBean.getSellOrderCount();
        assertEquals(-10, sellOrderCount);
    }
}