/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;
import java.math.BigDecimal;
import java.util.Collection;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DirectSLSBBean_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummary1_mEOx0() throws java.lang.Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	tradeDirect.setInSession(true);
	MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
	Assertions.assertNotNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummary2_TrBj1() throws java.lang.Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	tradeDirect.setInSession(false);
	MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
	Assertions.assertNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrderWithInSessionTrue_Mpdr0() throws Exception {
    DirectSLSBBean tradeDirect = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    tradeDirect.setInSession(true);
    OrderDataBean orderDataBean = tradeDirect.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(orderDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetInSession_LURU0() {
		DirectSLSBBean directSLSBBean = new DirectSLSBBean();
		directSLSBBean.setInSession(true);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderWithTwoPhaseTrue_vXsA0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = true;
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertTrue(result.getCompletionDate() != null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderWithTwoPhaseFalse_weTZ1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
    Integer orderID = orderDataBean.getOrderID();
    boolean twoPhase = false;
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertTrue(result.getCompletionDate() != null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume1_rwsS0() throws java.lang.Exception {
    DirectSLSBBean tradeDirect = new DirectSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    quote.setCompanyName("Company1");
    quote.setOpen(new BigDecimal(100.0));
    quote.setPrice(new BigDecimal(100.0));
    quote.setLow(new BigDecimal(100.0));
    quote.setHigh(new BigDecimal(100.0));
    quote.setChange(100.0);
    quote.setVolume(100.0);
    quote.setSymbol("s1");
    tradeDirect.updateQuotePriceVolume("s1", new BigDecimal(100.0), 100.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume2_HBxH1() throws java.lang.Exception {
    DirectSLSBBean tradeDirect = new DirectSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    quote.setCompanyName("Company2");
    quote.setOpen(new BigDecimal(100.0));
    quote.setPrice(new BigDecimal(100.0));
    quote.setLow(new BigDecimal(100.0));
    quote.setHigh(new BigDecimal(100.0));
    quote.setChange(100.0);
    quote.setVolume(100.0);
    quote.setSymbol("s2");
    tradeDirect.updateQuotePriceVolume("s2", new BigDecimal(100.0), 100.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccountData1_ShHO0() throws Exception {
	DirectSLSBBean bean = new DirectSLSBBean();
	bean.setInSession(true);
	bean.getAccountData("1");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccountData2_SWLI1() throws Exception {
	DirectSLSBBean bean = new DirectSLSBBean();
	bean.setInSession(true);
	bean.getAccountData("2");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile1_AIha0() throws Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID("1");
	profileData.setPassword("1");
	profileData.setFullName("1");
	profileData.setAddress("1");
	profileData.setEmail("1");
	profileData.setCreditCard("1");
	tradeDirect.setInSession(true);
	AccountProfileDataBean retValue = tradeDirect.updateAccountProfile(profileData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateAccountProfile2_ijCa1() throws Exception {
	DirectSLSBBean tradeDirect = new DirectSLSBBean();
	AccountProfileDataBean profileData = new AccountProfileDataBean();
	profileData.setUserID("1");
	profileData.setPassword("1");
	profileData.setFullName("1");
	profileData.setAddress("1");
	profileData.setEmail("1");
	profileData.setCreditCard("1");
	AccountProfileDataBean retValue = tradeDirect.updateAccountProfile(profileData);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithInSessionTrue_jFiy0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("symbol");
    quoteDataBean.setCompanyName("companyName");
    quoteDataBean.setPrice(new BigDecimal(100));
    QuoteDataBean actualQuoteDataBean = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertNotNull(actualQuoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithInSessionTrue_jFiy0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("symbol");
    quoteDataBean.setCompanyName("companyName");
    quoteDataBean.setPrice(new BigDecimal(100));
    QuoteDataBean actualQuoteDataBean = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertEquals(actualQuoteDataBean.getSymbol(), quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithInSessionTrue_jFiy0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("symbol");
    quoteDataBean.setCompanyName("companyName");
    quoteDataBean.setPrice(new BigDecimal(100));
    QuoteDataBean actualQuoteDataBean = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertEquals(actualQuoteDataBean.getCompanyName(), quoteDataBean.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithInSessionTrue_jFiy0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("symbol");
    quoteDataBean.setCompanyName("companyName");
    quoteDataBean.setPrice(new BigDecimal(100));
    QuoteDataBean actualQuoteDataBean = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertEquals(actualQuoteDataBean.getPrice(), quoteDataBean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithInSessionFalse_DEUL1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("symbol");
    quoteDataBean.setCompanyName("companyName");
    quoteDataBean.setPrice(new BigDecimal(100));
    QuoteDataBean actualQuoteDataBean = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertNotNull(actualQuoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithInSessionFalse_DEUL1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("symbol");
    quoteDataBean.setCompanyName("companyName");
    quoteDataBean.setPrice(new BigDecimal(100));
    QuoteDataBean actualQuoteDataBean = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertEquals(actualQuoteDataBean.getSymbol(), quoteDataBean.getSymbol());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithInSessionFalse_DEUL1_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("symbol");
    quoteDataBean.setCompanyName("companyName");
    quoteDataBean.setPrice(new BigDecimal(100));
    QuoteDataBean actualQuoteDataBean = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertEquals(actualQuoteDataBean.getCompanyName(), quoteDataBean.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithInSessionFalse_DEUL1_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("symbol");
    quoteDataBean.setCompanyName("companyName");
    quoteDataBean.setPrice(new BigDecimal(100));
    QuoteDataBean actualQuoteDataBean = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertEquals(actualQuoteDataBean.getPrice(), quoteDataBean.getPrice());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_VYQU0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(1);
        assertNotNull(holdingDataBean);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingWithInvalidHoldingID_XJxT1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(0);
        assertNotNull(holdingDataBean);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithTwoPhaseTrue_oUib0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        directSLSBBean.completeOrderAsync(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithTwoPhaseFalse_ppfj1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = false;
        directSLSBBean.completeOrderAsync(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell1_YOYP0() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    tradeSLSB.setInSession(true);
    OrderDataBean orderdata = tradeSLSB.sell("1", 1, 1);
    if (1 == TradeConfig.ASYNCH) {
        tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell2_hYHq1() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    tradeSLSB.setInSession(true);
    OrderDataBean orderdata = tradeSLSB.sell("2", 2, 2);
    if (2 == TradeConfig.ASYNCH) {
        tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell3_nHJP2() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    tradeSLSB.setInSession(true);
    OrderDataBean orderdata = tradeSLSB.sell("3", 3, 3);
    if (3 == TradeConfig.ASYNCH) {
        tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell4_vwMV3() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    tradeSLSB.setInSession(true);
    OrderDataBean orderdata = tradeSLSB.sell("4", 4, 4);
    if (4 == TradeConfig.ASYNCH) {
        tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell5_bAuH4() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    tradeSLSB.setInSession(true);
    OrderDataBean orderdata = tradeSLSB.sell("5", 5, 5);
    if (5 == TradeConfig.ASYNCH) {
        tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy1_PYVo0() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    String userID = "1";
    String symbol = "1";
    double quantity = 1;
    int orderProcessingMode = 1;
    tradeSLSB.setInSession(true);
    OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
    if (orderProcessingMode == TradeConfig.ASYNCH) {
        tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy2_cRcq1() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    String userID = "2";
    String symbol = "2";
    double quantity = 2;
    int orderProcessingMode = 2;
    tradeSLSB.setInSession(true);
    OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
    if (orderProcessingMode == TradeConfig.ASYNCH) {
        tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy3_mqMA2() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    String userID = "3";
    String symbol = "3";
    double quantity = 3;
    int orderProcessingMode = 3;
    tradeSLSB.setInSession(true);
    OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
    if (orderProcessingMode == TradeConfig.ASYNCH) {
        tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy4_ulFZ3() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    String userID = "4";
    String symbol = "4";
    double quantity = 4;
    int orderProcessingMode = 4;
    tradeSLSB.setInSession(true);
    OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
    if (orderProcessingMode == TradeConfig.ASYNCH) {
        tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy5_gEQh4() throws Exception {
    DirectSLSBBean tradeSLSB = new DirectSLSBBean();
    String userID = "5";
    String symbol = "5";
    double quantity = 5;
    int orderProcessingMode = 5;
    tradeSLSB.setInSession(true);
    OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
    if (orderProcessingMode == TradeConfig.ASYNCH) {
        tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithInvalidUserID_fBaR1_oNon0() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        tradeDirect.logout("invalidUserID");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_Afic0_KfYk0() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        tradeDirect.logout("user123");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_UayE1_pnfk1() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        tradeDirect.cancelOrder(2, true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_WlKX2_fanQ0_1() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        Collection<?> orders = tradeDirect.getOrders("1");
        assertNotNull(orders);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_WlKX2_fanQ0_2() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        Collection<?> orders = tradeDirect.getOrders("1");
        assertTrue(orders.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted2_hyad3_SVNZ0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.orderCompleted("2", 2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidUserID_QtQT3_rXII0_1() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        Collection<?> orders = tradeDirect.getOrders("invalid");
        assertNotNull(orders);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersWithInvalidUserID_QtQT3_rXII0_2() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        Collection<?> orders = tradeDirect.getOrders("invalid");
        assertTrue(orders.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrderWithInSessionFalse_JfGW1() throws Exception {
    DirectSLSBBean tradeDirect = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    tradeDirect.setInSession(false);
    OrderDataBean orderDataBean = tradeDirect.createOrder(account, quote, holding, orderType, quantity);
    assertNull(orderDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithInSessionTrue_jFiy0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(true);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("symbol");
    quoteDataBean.setCompanyName("companyName");
    quoteDataBean.setPrice(new BigDecimal(100));
    QuoteDataBean actualQuoteDataBean = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertNotNull(actualQuoteDataBean);
    assertEquals(actualQuoteDataBean.getSymbol(), quoteDataBean.getSymbol());
    assertEquals(actualQuoteDataBean.getCompanyName(), quoteDataBean.getCompanyName());
    assertEquals(actualQuoteDataBean.getPrice(), quoteDataBean.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithInSessionFalse_DEUL1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.setInSession(false);
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("symbol");
    quoteDataBean.setCompanyName("companyName");
    quoteDataBean.setPrice(new BigDecimal(100));
    QuoteDataBean actualQuoteDataBean = directSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
    assertNotNull(actualQuoteDataBean);
    assertEquals(actualQuoteDataBean.getSymbol(), quoteDataBean.getSymbol());
    assertEquals(actualQuoteDataBean.getCompanyName(), quoteDataBean.getCompanyName());
    assertEquals(actualQuoteDataBean.getPrice(), quoteDataBean.getPrice());
}
}