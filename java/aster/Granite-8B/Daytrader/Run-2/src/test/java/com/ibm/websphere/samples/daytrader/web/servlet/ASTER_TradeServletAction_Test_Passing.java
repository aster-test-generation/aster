/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Passing {
    private TradeServices tAction;
    @Mock
    private TradeServletAction tradeservletaction;
    @Mock
    private ServletContext servletcontext;
    @Mock
    private HttpServletRequest httpservletrequest;
    @Mock
    private ServletContext ctx;
    @Mock
    private HttpServletResponse resp;
    @Mock
    private QuoteDataBean quoteData;
    @Mock
    private Collection<QuoteDataBean> quoteDataBeans;
    @Mock
    private String userID;
    @Mock
    private String symbols;
    private TradeServletAction tradeServletAction;
    private HttpServletRequest httpServletRequest;
    private HttpServletResponse httpServletResponse;
    private HttpSession httpSession;
    private TradeServices tradeServices;
    @Mock
    private AccountDataBean accountData;
    @Mock
    private Collection holdingDataBeans;
    @Mock
    private OrderDataBean orderData;
    @Mock
    private TradeServices tradeAction;
    @Mock
    private HttpSession httpsession;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPortfolio1_DUok0() throws ServletException, IOException {
        TradeServletAction tAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user1";
        String results = "results1";
        when(req.getParameter("results")).thenReturn(results);
        when(req.getParameter("user")).thenReturn(userID);
        tAction.doPortfolio(ctx, req, resp, userID, results);
        assertEquals(results, req.getAttribute("results"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPortfolio2_MpCj1() throws ServletException, IOException {
        TradeServletAction tAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user2";
        String results = "results2";
        when(req.getParameter("results")).thenReturn(results);
        when(req.getParameter("user")).thenReturn(userID);
        tAction.doPortfolio(ctx, req, resp, userID, results);
        assertEquals(results, req.getAttribute("results"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPortfolio3_jnrT2() throws ServletException, IOException {
        TradeServletAction tAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user3";
        String results = "results3";
        when(req.getParameter("results")).thenReturn(results);
        when(req.getParameter("user")).thenReturn(userID);
        tAction.doPortfolio(ctx, req, resp, userID, results);
        assertEquals(results, req.getAttribute("results"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout1_Dklt0() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        tradeServletAction.doLogout(null, null, null, "user1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout2_MUTt1() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        tradeServletAction.doLogout(null, null, null, "user2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout3_ZkBn2() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        tradeServletAction.doLogout(null, null, null, "user3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout4_hTxy3() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        tradeServletAction.doLogout(null, null, null, "user4");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_TXoJ0() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoHome_VjXL1() throws Exception {
        String userID = "123";
        String results = "test results";
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        AccountDataBean accountData = new AccountDataBean();
        Collection<HoldingDataBean> holdingDataBeans = new ArrayList<>();
        when(tAction.getAccountData(userID)).thenReturn(accountData);
        when(tAction.getHoldings(userID)).thenReturn(holdingDataBeans);
        tradeServletAction.doHome(ctx, req, resp, userID, results);
        verify(req, times(1)).setAttribute("accountData", accountData);
        verify(req, times(1)).setAttribute("holdingDataBeans", holdingDataBeans);
        verify(req, times(1)).setAttribute("results", results);
        verify(resp, times(1)).sendRedirect("index.jsp");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoAccount() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        tradeservletaction = new TradeServletAction();
        when(httpservletrequest.getParameter("results")).thenReturn("test");
        when(httpservletrequest.getParameter("userID")).thenReturn("test");
        tradeservletaction.doAccount(null, httpservletrequest, null, "test", "test");
        verify(httpservletrequest).setAttribute("accountData", any());
        verify(httpservletrequest).setAttribute("accountProfileData", any());
        verify(httpservletrequest).setAttribute("orderDataBeans", any());
        verify(httpservletrequest).setAttribute("results", any());
        verify(httpservletrequest).getRequestDispatcher(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccountWithInvalidUserID_zAfP1() throws Exception {
        String userID = "invalidUserID";
        String results = "invalidResults";
        when(tradeServices.getAccountData(userID)).thenThrow(new IllegalArgumentException("User ID not found"));
        tradeServletAction.doAccount(null, null, null, userID, results);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoAccountUpdate() throws Exception {
        MockitoAnnotations.openMocks(this);
        // Set up mock objects and expected behavior
        String userID = "user1";
        String password = "password1";
        String cpassword = "password1";
        String fullName = "John Doe";
        String address = "123 Main St";
        String creditcard = "1234567890123456";
        String email = "johndoe@example.com";
        when(tradeAction.updateAccountProfile(any())).thenReturn(new AccountProfileDataBean(userID, password, fullName, address, email, creditcard));
        // Call the method under test
        tradeServletAction.doAccountUpdate(null, httpServletRequest, null, userID, password, cpassword, fullName, address, creditcard, email);
        // Verify that the expected behavior occurred
        verify(tradeAction).updateAccountProfile(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccountUpdate_FVNY0() throws ServletException, IOException {
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "1";
        String password = "password";
        String cpassword = "password";
        String fullName = "fullName";
        String address = "address";
        String creditcard = "creditcard";
        String email = "email";
        when(req.getParameter("userID")).thenReturn(userID);
        when(req.getParameter("password")).thenReturn(password);
        when(req.getParameter("cpassword")).thenReturn(cpassword);
        when(req.getParameter("fullName")).thenReturn(fullName);
        when(req.getParameter("address")).thenReturn(address);
        when(req.getParameter("creditcard")).thenReturn(creditcard);
        when(req.getParameter("email")).thenReturn(email);
        tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoSell() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        tradeservletaction = new TradeServletAction();
        String userID = "user1";
        Integer holdingID = 1;
        tradeservletaction.doSell(null, httpservletrequest, null, userID, holdingID);
        verify(httpservletrequest, times(1)).setAttribute("orderData", any());
        verify(httpservletrequest, times(1)).setAttribute("results", any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoSell_XQyy0_1() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user1";
        Integer holdingID = 1;
        when(req.getParameter("userID")).thenReturn(userID);
        when(req.getParameter("holdingID")).thenReturn(holdingID.toString());
        tradeServletAction.doSell(ctx, req, resp, userID, holdingID);
        assertEquals("user1", req.getAttribute("userID"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoSell_XQyy0_2() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user1";
        Integer holdingID = 1;
        when(req.getParameter("userID")).thenReturn(userID);
        when(req.getParameter("holdingID")).thenReturn(holdingID.toString());
        tradeServletAction.doSell(ctx, req, resp, userID, holdingID);
        assertEquals(1, req.getAttribute("holdingID"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoWelcome() throws Exception {
        httpservletrequest = mock(HttpServletRequest.class);
        tradeservletaction = new TradeServletAction();
        String status = "test status";
        tradeservletaction.doWelcome(null, httpservletrequest, null, status);
        verify(httpservletrequest).setAttribute("results", status);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoWelcome_SeWe0() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String status = "Welcome to the Trade Application";
        tradeServletAction.doWelcome(ctx, req, resp, status);
        assertEquals(status, req.getAttribute("results"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLoginWithInvalidCredentials_UAMc1() throws Exception {
        String userID = "invalidUser";
        String passwd = "invalidPass";
        Mockito.when(tAction.login(userID, passwd)).thenReturn(null);
        tradeServletAction.doLogin(null, null, null, userID, passwd);
        Mockito.verify(tAction, Mockito.times(1)).login(userID, passwd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLoginWithException_wiRw2() throws Exception {
        String userID = "exceptionUser";
        String passwd = "exceptionPass";
        Mockito.when(tAction.login(userID, passwd)).thenThrow(new Exception("Exception message"));
        tradeServletAction.doLogin(null, null, null, userID, passwd);
        Mockito.verify(tAction, Mockito.times(1)).login(userID, passwd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoMarketSummary() throws Exception {
        httpServletRequest = mock(HttpServletRequest.class);
        tradeServletAction = new TradeServletAction();
        tradeServletAction.doMarketSummary(null, httpServletRequest, null, null);
        verify(httpServletRequest, times(1)).setAttribute(anyString(), any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoSell_XQyy0() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user1";
        Integer holdingID = 1;
        when(req.getParameter("userID")).thenReturn(userID);
        when(req.getParameter("holdingID")).thenReturn(holdingID.toString());
        tradeServletAction.doSell(ctx, req, resp, userID, holdingID);
        assertEquals("user1", req.getAttribute("userID"));
        assertEquals(1, req.getAttribute("holdingID"));
    }
}