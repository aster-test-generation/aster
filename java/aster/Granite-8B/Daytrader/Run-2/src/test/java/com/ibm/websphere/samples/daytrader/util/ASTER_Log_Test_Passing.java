/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Log_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_MuIv0() {
        Log log = new Log();
        log.trace("Message", "Parameter");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_Gosl0() {
        Throwable e = new Throwable();
        String message = "Error message";
        Log.error(e, message);
        assertNull(e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testErrorWithNullMessage_IQfW1() {
        Throwable e = new Throwable();
        Log.error(e, null);
        assertNull(e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_IPyG0() {
        Log log = new Log();
        log.trace("Message", "parm1", "parm2", "parm3", "parm4", "parm5");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoTrace_FstV0() {
        Log log = new Log();
        boolean result = log.doTrace();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_uIBg0() {
        Log log = new Log();
        log.trace("Message", "parm1", "parm2", "parm3", "parm4");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTraceEnter_SVPa0() {
        Log log = new Log();
        log.traceEnter("testTraceEnter");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWarning_wXGG0() {
        Log log = new Log();
        log.warning("This is a warning message");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWarningNullMessage_DjCR1() {
        Log log = new Log();
        log.warning(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWarningEmptyMessage_mOFx2() {
        Log log = new Log();
        log.warning("");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTraceInterceptor_lAjk0() {
        Log log = new Log();
        String message = "This is a test message";
        Object parm1 = new Object();
        log.traceInterceptor(message, parm1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_lCFs0() {
        Log log = new Log();
        log.print("Test message");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_REXJ0() {
        String msg1 = "This is the first message";
        String msg2 = "This is the second message";
        Throwable e = new Throwable();
        Log.error(msg1, msg2, e);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLog_SURT0() {
        Log log = new Log();
        String message = "This is a test message";
        log.log(message);
        assertEquals("This is a test message", message);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_Rufy0() {
        Log log = new Log();
        log.trace("Message", "parm1", "parm2", "parm3", "parm4", "parm5", "parm6", "parm7");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_NkMr0() {
        Log log = new Log();
        log.trace("This is a test message", "parm1", "parm2", "parm3", "parm4", "parm5", "parm6");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_uyvA0() {
        Throwable e = new Throwable();
        String msg1 = "Error message 1";
        String msg2 = "Error message 2";
        Log.error(e, msg1, msg2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDebug_LXfz0() {
        boolean result = Log.doDebug();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_zCHH0() {
        Throwable e = new Throwable();
        String msg1 = "Error message 1";
        String msg2 = "Error message 2";
        String msg3 = "Error message 3";
        Log.error(e, msg1, msg2, msg3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_TLva0() {
        Throwable e = new Throwable();
        Log.error("msg1", "msg2", "msg3", e);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_RwHC0() {
        Log log = new Log();
        log.trace("Message", "Parameter1", "Parameter2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_IXZL0() {
        Throwable e = new Throwable();
        Log.error("Error message", e);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintCollection_dvtS0() {
        Collection<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        Log.printCollection("Collection:", collection);
    }
}