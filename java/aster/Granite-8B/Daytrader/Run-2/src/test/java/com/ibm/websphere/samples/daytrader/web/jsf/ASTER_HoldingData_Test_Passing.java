/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity_DHoI0() {
        HoldingData holdingData = new HoldingData();
        double quantity = holdingData.getQuantity();
        assertEquals(0.0, quantity, 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_ZCPv0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = new BigDecimal(100);
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePriceWithNull_UwvR1() {
        HoldingData holdingData = new HoldingData();
        holdingData.setPurchasePrice(null);
        assertNull(holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePriceWithZero_EUIB2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = BigDecimal.ZERO;
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePriceWithNegativeValue_QlPR3() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = new BigDecimal(-100);
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_MVtj0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = new BigDecimal("100.00");
        holdingData.setPrice(price);
        assertEquals(price, holdingData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBasis_ddzK0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal basis = new BigDecimal(100);
        holdingData.setBasis(basis);
        assertEquals(basis, holdingData.getBasis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_NGnC0() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date();
        holdingData.setPurchaseDate(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_ACUz0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = new BigDecimal("100.00");
        holdingData.setGain(gain);
        assertEquals(gain, holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithZero_wJgx2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = BigDecimal.ZERO;
        holdingData.setGain(gain);
        assertEquals(gain, holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithNull_mCOD3() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = null;
        holdingData.setGain(gain);
        assertEquals(gain, holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithNegativeValue_oXrZ4() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = new BigDecimal("-100.00");
        holdingData.setGain(gain);
        assertEquals(gain, holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteID_lQEG0() {
        HoldingData holdingData = new HoldingData();
        String quoteID = "123";
        holdingData.setQuoteID(quoteID);
        assertEquals("123", holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketValue_mtpI0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = BigDecimal.valueOf(1000.0);
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_mJEq0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setGain(BigDecimal.valueOf(100));
        BigDecimal gain = holdingData.getGain();
        assertEquals(BigDecimal.valueOf(100), gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetMarketValue_xbis0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = new BigDecimal("100.00");
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingID_Qwop0() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = 1;
        holdingData.setHoldingID(holdingID);
        assertEquals(holdingID, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDWithNull_yLoV1() {
        HoldingData holdingData = new HoldingData();
        holdingData.setHoldingID(null);
        assertEquals(null, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDWithZero_PDaR2() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = 0;
        holdingData.setHoldingID(holdingID);
        assertEquals(holdingID, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDWithNegativeNumber_xvHy3() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = -1;
        holdingData.setHoldingID(holdingID);
        assertEquals(holdingID, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchasePrice_betH0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = holdingData.getPurchasePrice();
    }
}