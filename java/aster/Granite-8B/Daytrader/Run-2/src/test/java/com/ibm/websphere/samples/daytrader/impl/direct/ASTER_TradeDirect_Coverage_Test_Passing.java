/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collection;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collection;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeDirect_Coverage_Test_Passing {
    private TradeDirect tradeDirect = new TradeDirect();
    private static final String getAccountProfileSQL = "SELECT * FROM accountprofiledata";
    private static final String loginSQL = "UPDATE accountdata SET lastlogin = ? WHERE accountid = ?";
    private static final String getHoldingsSQL = "SELECT * FROM holdingdata WHERE accountid = ?";
    private static final String getOrdersSQL = "SELECT * FROM orderdata WHERE accountid = ?";
    private PreparedStatement getStatement(Connection conn, String sql) throws Exception {
        PreparedStatement stmt = conn.prepareStatement(sql);
        return stmt;
    }
    private AccountDataBean getAccountDataFromResultSet(ResultSet rs) throws Exception {
        AccountDataBean accountData = new AccountDataBean();
        accountData.setAccountID(rs.getInt("accountid"));
        accountData.setCreationDate(rs.getDate("creationdate"));
        accountData.setOpenBalance(rs.getBigDecimal("openbalance"));
        accountData.setLoginCount(rs.getInt("logincount"));
        accountData.setLogoutCount(rs.getInt("logoutcount"));
        accountData.setLastLogin(rs.getTimestamp("lastlogin"));
        accountData.setBalance(rs.getBigDecimal("balance"));
        return accountData;
    }
    private Collection<HoldingDataBean> getHoldingDataFromResultSet(ResultSet rs) throws Exception {
        Collection<HoldingDataBean> holdings = new ArrayList<HoldingDataBean>();
        while (rs.next()) {
            HoldingDataBean holdingData = new HoldingDataBean();
            holdingData.setHoldingID(rs.getInt("holdingid"));
            holdingData.setPurchasePrice(rs.getBigDecimal("purchaseprice"));
            holdings.add(holdingData);
        }
        return holdings;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummary1_JuXe0_1() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
	Assertions.assertEquals(0, TradeConfig.getMarketSummaryInterval());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummary1_JuXe0_2() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
	Assertions.assertNotNull(marketSummaryDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummary2_QuBL1_1() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
	Assertions.assertTrue(TradeConfig.getMarketSummaryInterval() < 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder1_SHmf0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder2_Fgjc1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder3_Yfpo2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 3;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder4_ToMs3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 4;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder5_GrYw4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 5;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder6_JiRj5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 6;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder7_SBps6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 7;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder8_YJlk7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 8;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder9_VciX8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 9;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder10_lOPh9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 10;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testQueueOrder11_FwYc10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 11;
    boolean twoPhase = true;
    tradeDirect.queueOrder(orderID, twoPhase);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUpdateQuotePriceVolume_OGUE0() throws Exception {
		TradeDirect tradeDirect = new TradeDirect();
		QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
		BigDecimal changeFactor = BigDecimal.ZERO;
		double sharesTraded = 0.0;
		boolean publishQuotePriceChange = false;
		QuoteDataBean expected = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
		QuoteDataBean actual = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccountData1_fSgj0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountDataBean = tradeDirect.getAccountData("0");
    assertNotNull(accountDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccountData2_pZQH1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountDataBean = tradeDirect.getAccountData("1");
    assertNotNull(accountDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccountData3_sFmm2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountDataBean = tradeDirect.getAccountData("2");
    assertNotNull(accountDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccountData4_Cauf3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountDataBean = tradeDirect.getAccountData("3");
    assertNotNull(accountDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccountData5_PAtk4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountDataBean = tradeDirect.getAccountData("4");
    assertNotNull(accountDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void tearDown_dOxm1() throws Exception {
        tradeDirect = null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister1_BsUf0_1() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user1";
	String password = "password1";
	String fullname = "fullname1";
	String address = "address1";
	String email = "email1";
	String creditcard = "creditcard1";
	BigDecimal openBalance = new BigDecimal(1000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertNotNull(accountData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister1_BsUf0_2() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user1";
	String password = "password1";
	String fullname = "fullname1";
	String address = "address1";
	String email = "email1";
	String creditcard = "creditcard1";
	BigDecimal openBalance = new BigDecimal(1000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getLoginCount(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister1_BsUf0_3() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user1";
	String password = "password1";
	String fullname = "fullname1";
	String address = "address1";
	String email = "email1";
	String creditcard = "creditcard1";
	BigDecimal openBalance = new BigDecimal(1000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getLogoutCount(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister1_BsUf0_4() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user1";
	String password = "password1";
	String fullname = "fullname1";
	String address = "address1";
	String email = "email1";
	String creditcard = "creditcard1";
	BigDecimal openBalance = new BigDecimal(1000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getOpenBalance(), openBalance);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister1_BsUf0_5() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user1";
	String password = "password1";
	String fullname = "fullname1";
	String address = "address1";
	String email = "email1";
	String creditcard = "creditcard1";
	BigDecimal openBalance = new BigDecimal(1000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getBalance(), openBalance);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister2_vwDf1_1() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user2";
	String password = "password2";
	String fullname = "fullname2";
	String address = "address2";
	String email = "email2";
	String creditcard = "creditcard2";
	BigDecimal openBalance = new BigDecimal(2000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertNotNull(accountData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister2_vwDf1_2() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user2";
	String password = "password2";
	String fullname = "fullname2";
	String address = "address2";
	String email = "email2";
	String creditcard = "creditcard2";
	BigDecimal openBalance = new BigDecimal(2000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getLoginCount(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister2_vwDf1_3() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user2";
	String password = "password2";
	String fullname = "fullname2";
	String address = "address2";
	String email = "email2";
	String creditcard = "creditcard2";
	BigDecimal openBalance = new BigDecimal(2000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getLogoutCount(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister2_vwDf1_4() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user2";
	String password = "password2";
	String fullname = "fullname2";
	String address = "address2";
	String email = "email2";
	String creditcard = "creditcard2";
	BigDecimal openBalance = new BigDecimal(2000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getOpenBalance(), openBalance);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister2_vwDf1_5() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user2";
	String password = "password2";
	String fullname = "fullname2";
	String address = "address2";
	String email = "email2";
	String creditcard = "creditcard2";
	BigDecimal openBalance = new BigDecimal(2000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getBalance(), openBalance);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister3_RPDq2_1() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user3";
	String password = "password3";
	String fullname = "fullname3";
	String address = "address3";
	String email = "email3";
	String creditcard = "creditcard3";
	BigDecimal openBalance = new BigDecimal(3000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertNotNull(accountData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister3_RPDq2_2() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user3";
	String password = "password3";
	String fullname = "fullname3";
	String address = "address3";
	String email = "email3";
	String creditcard = "creditcard3";
	BigDecimal openBalance = new BigDecimal(3000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getLoginCount(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister3_RPDq2_3() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user3";
	String password = "password3";
	String fullname = "fullname3";
	String address = "address3";
	String email = "email3";
	String creditcard = "creditcard3";
	BigDecimal openBalance = new BigDecimal(3000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getLogoutCount(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister3_RPDq2_4() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user3";
	String password = "password3";
	String fullname = "fullname3";
	String address = "address3";
	String email = "email3";
	String creditcard = "creditcard3";
	BigDecimal openBalance = new BigDecimal(3000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getOpenBalance(), openBalance);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister3_RPDq2_5() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user3";
	String password = "password3";
	String fullname = "fullname3";
	String address = "address3";
	String email = "email3";
	String creditcard = "creditcard3";
	BigDecimal openBalance = new BigDecimal(3000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertEquals(accountData.getBalance(), openBalance);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSell1_jOBy0() throws Exception {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder1_xtmF0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountDataBean accountData = new AccountDataBean();
    QuoteDataBean quoteData = new QuoteDataBean();
    HoldingDataBean holdingData = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean orderData = tradeDirect.createOrder(accountData, quoteData, holdingData, orderType, quantity);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin1_StwB3() throws java.lang.Exception {
        try {
            TradeDirect tradeAction = new TradeDirect();
            AccountDataBean accountData = tradeAction.login("user1", "password1");
        } catch (Exception e) {
            fail(e.toString());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings1_DdGd0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user1");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings1_DdGd0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user1");
    assertEquals(1, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings2_CJTe1_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user2");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings2_CJTe1_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user2");
    assertEquals(2, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings3_dkgz2_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user3");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings3_dkgz2_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user3");
    assertEquals(3, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings4_QJSQ3_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user4");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings4_QJSQ3_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user4");
    assertEquals(4, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings5_dhvM4_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user5");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings5_dhvM4_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user5");
    assertEquals(5, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings6_NHTh5_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user6");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings6_NHTh5_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user6");
    assertEquals(6, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings7_SLmK6_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user7");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings7_SLmK6_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user7");
    assertEquals(7, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings8_NDGk7_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user8");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings8_NDGk7_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user8");
    assertEquals(8, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings9_wHEW8_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user9");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings9_wHEW8_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user9");
    assertEquals(9, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings10_TIye9_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user10");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings10_TIye9_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user10");
    assertEquals(10, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings11_NUcd10_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user11");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings11_NUcd10_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user11");
    assertEquals(11, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings12_Gjyt11_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user12");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings12_Gjyt11_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user12");
    assertEquals(12, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings13_GaeD12_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user13");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings13_GaeD12_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user13");
    assertEquals(13, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings14_wLXg13_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user14");
    assertNotNull(holdingDataBeans);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings14_wLXg13_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user14");
    assertEquals(14, holdingDataBeans.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy1_jULB0() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user1", "symbol1", 1.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy2_KVRY1() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user2", "symbol2", 2.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy3_vDfR2() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user3", "symbol3", 3.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy4_QQcv3() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user4", "symbol4", 4.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy5_IxHW4() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user5", "symbol5", 5.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy6_HNeg5() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user6", "symbol6", 6.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy7_aoqM6() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user7", "symbol7", 7.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy8_wqLm7() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user8", "symbol8", 8.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy9_EycN8() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user9", "symbol9", 9.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy10_qVkY9() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user10", "symbol10", 10.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy11_qqcl10() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user11", "symbol11", 11.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy12_mBbU11() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user12", "symbol12", 12.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy13_OQMA12() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user13", "symbol13", 13.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy14_iICR13() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user14", "symbol14", 14.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy15_Bnpc14() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user15", "symbol15", 15.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy16_adMU15() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user16", "symbol16", 16.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy17_qRfq16() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user17", "symbol17", 17.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy18_XAzH17() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user18", "symbol18", 18.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy19_XrYl18() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user19", "symbol19", 19.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy20_eoVJ19() throws Exception {
	TradeDirect trade = new TradeDirect();
	trade.buy("user20", "symbol20", 20.0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummary5_YDdy4_EfuG0_1() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
	Assertions.assertTrue(marketSummaryDataBean.getSummaryDate().getTime() < System.currentTimeMillis());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummary6_NgGV5_IwhL0_1() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
	Assertions.assertTrue(marketSummaryDataBean.getTopLosers().size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummary6_NgGV5_IwhL0_2() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
	Assertions.assertTrue(marketSummaryDataBean.getTopGainers().size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void tearDown_dOxm1_hGMD0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect = null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummary1_JuXe0() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
	Assertions.assertEquals(0, TradeConfig.getMarketSummaryInterval());
	Assertions.assertNotNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetMarketSummary2_QuBL1() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
	Assertions.assertTrue(TradeConfig.getMarketSummaryInterval() < 0);
	Assertions.assertNotNull(marketSummaryDataBean);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister1_BsUf0() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user1";
	String password = "password1";
	String fullname = "fullname1";
	String address = "address1";
	String email = "email1";
	String creditcard = "creditcard1";
	BigDecimal openBalance = new BigDecimal(1000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertNotNull(accountData);
	Assertions.assertEquals(accountData.getLoginCount(), 0);
	Assertions.assertEquals(accountData.getLogoutCount(), 0);
	Assertions.assertEquals(accountData.getOpenBalance(), openBalance);
	Assertions.assertEquals(accountData.getBalance(), openBalance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister2_vwDf1() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user2";
	String password = "password2";
	String fullname = "fullname2";
	String address = "address2";
	String email = "email2";
	String creditcard = "creditcard2";
	BigDecimal openBalance = new BigDecimal(2000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertNotNull(accountData);
	Assertions.assertEquals(accountData.getLoginCount(), 0);
	Assertions.assertEquals(accountData.getLogoutCount(), 0);
	Assertions.assertEquals(accountData.getOpenBalance(), openBalance);
	Assertions.assertEquals(accountData.getBalance(), openBalance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegister3_RPDq2() throws Exception {
	TradeDirect tradeDirect = new TradeDirect();
	String userID = "user3";
	String password = "password3";
	String fullname = "fullname3";
	String address = "address3";
	String email = "email3";
	String creditcard = "creditcard3";
	BigDecimal openBalance = new BigDecimal(3000.0);
	AccountDataBean accountData = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
	Assertions.assertNotNull(accountData);
	Assertions.assertEquals(accountData.getLoginCount(), 0);
	Assertions.assertEquals(accountData.getLogoutCount(), 0);
	Assertions.assertEquals(accountData.getOpenBalance(), openBalance);
	Assertions.assertEquals(accountData.getBalance(), openBalance);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings1_DdGd0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user1");
    assertNotNull(holdingDataBeans);
    assertEquals(1, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings2_CJTe1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user2");
    assertNotNull(holdingDataBeans);
    assertEquals(2, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings3_dkgz2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user3");
    assertNotNull(holdingDataBeans);
    assertEquals(3, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings4_QJSQ3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user4");
    assertNotNull(holdingDataBeans);
    assertEquals(4, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings5_dhvM4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user5");
    assertNotNull(holdingDataBeans);
    assertEquals(5, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings6_NHTh5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user6");
    assertNotNull(holdingDataBeans);
    assertEquals(6, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings7_SLmK6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user7");
    assertNotNull(holdingDataBeans);
    assertEquals(7, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings8_NDGk7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user8");
    assertNotNull(holdingDataBeans);
    assertEquals(8, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings9_wHEW8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user9");
    assertNotNull(holdingDataBeans);
    assertEquals(9, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings10_TIye9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user10");
    assertNotNull(holdingDataBeans);
    assertEquals(10, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings11_NUcd10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user11");
    assertNotNull(holdingDataBeans);
    assertEquals(11, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings12_Gjyt11() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user12");
    assertNotNull(holdingDataBeans);
    assertEquals(12, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings13_GaeD12() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user13");
    assertNotNull(holdingDataBeans);
    assertEquals(13, holdingDataBeans.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetHoldings14_wLXg13() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("user14");
    assertNotNull(holdingDataBeans);
    assertEquals(14, holdingDataBeans.size());
}
}