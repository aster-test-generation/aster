/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_MarketSummaryWebSocket_Test_Passing {
    private MarketSummaryWebSocket marketSummaryWebSocket;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnMarketSummarytUpdate_RYGB0() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        marketSummaryWebSocket.onMarketSummarytUpdate("event");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnStockChange_jFvd0() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        String event = "exampleEvent";
        marketSummaryWebSocket.onStockChange(event);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnStockChangeWithNullEvent_ciJz2() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        String event = null;
        marketSummaryWebSocket.onStockChange(event);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnMarketSummarytUpdateWithServices_jWBU1_ycnb0() {
        TradeServices services = mock(TradeServices.class);
        Instance<TradeServices> servicesInstance = mock(Instance.class);
        when(servicesInstance.get()).thenReturn(services);
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket(servicesInstance);
        marketSummaryWebSocket.onMarketSummarytUpdate("event");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnMarketSummarytUpdateWithNullEvent_ydix2() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        marketSummaryWebSocket.onMarketSummarytUpdate(null);
    }
}