/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;
import java.math.BigDecimal;
import java.util.Collection;
import javax.transaction.RollbackException;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Collection;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeSLSBBean_Coverage_Test_Passing {
	{
	}
	{
	}
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvestmentReturn1_texr0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double NetValue = 1100.0;
    double expected = 0.1;
    double actual = tradeSLSBBean.investmentReturn(investment, NetValue);
    assertEquals(expected, actual, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvestmentReturn2_EDEk1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 10000.0;
    double NetValue = 11000.0;
    double expected = 0.1;
    double actual = tradeSLSBBean.investmentReturn(investment, NetValue);
    assertEquals(expected, actual, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInvestmentReturn3_yYSW2() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 100000.0;
    double NetValue = 110000.0;
    double expected = 0.1;
    double actual = tradeSLSBBean.investmentReturn(investment, NetValue);
    assertEquals(expected, actual, 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder1_WOXc0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_dYqq1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 2;
        boolean twoPhase = false;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_Zxgk2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 3;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetOrders1_cZYb0() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	String userID = "user1";
	Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
	Assertions.assertNotNull(orders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetOrders2_OcVj1() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	String userID = "user2";
	Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
	Assertions.assertNotNull(orders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetOrders3_gRmc2() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	String userID = "user3";
	Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
	Assertions.assertNotNull(orders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccountProfileData_SRxT0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("1");
    assertNotNull(accountProfileDataBean);
    assertEquals("1", accountProfileDataBean.getUserID());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPublishQuotePriceChange1_APZY0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    BigDecimal oldPrice = new BigDecimal(0);
    BigDecimal changeFactor = new BigDecimal(0);
    double sharesTraded = 0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithValidUserIDAndPassword_RstC0() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "validUserID";
        String password = "validPassword";
        AccountDataBean account = tradeSLSBBean.login(userID, password);
        assertNotNull(account);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidUserID_aAcm1() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "invalidUserID";
        String password = "validPassword";
        try {
            tradeSLSBBean.login(userID, password);
            fail("Expected RollbackException");
        } catch (RollbackException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithValidUserIDButInvalidPassword_WZCg2() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "validUserID";
        String password = "invalidPassword";
        try {
            tradeSLSBBean.login(userID, password);
            fail("Expected RollbackException");
        } catch (RollbackException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNullUserID_aXvP3() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = null;
        String password = "validPassword";
        try {
            tradeSLSBBean.login(userID, password);
            fail("Expected RollbackException");
        } catch (RollbackException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNullPassword_hsXF4() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "validUserID";
        String password = null;
        try {
            tradeSLSBBean.login(userID, password);
            fail("Expected RollbackException");
        } catch (RollbackException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithEmptyUserID_hjkg5() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "";
        String password = "validPassword";
        try {
            tradeSLSBBean.login(userID, password);
            fail("Expected RollbackException");
        } catch (RollbackException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithEmptyPassword_HqQp6() throws javax.transaction.RollbackException {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "validUserID";
        String password = "";
        try {
            tradeSLSBBean.login(userID, password);
            fail("Expected RollbackException");
        } catch (RollbackException e) {
        }
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetMarketSummary_EQhf4() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	MarketSummaryDataBean marketSummary = tradeSLSBBean.getMarketSummary();
	assertNotNull(marketSummary);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder1_ghjS0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 100.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder2_pfdA1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 100.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals("open", order.getOrderStatus());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder3_WgIN2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 100.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order.getOpenDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder4_NQgB3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 100.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(order.getCompletionDate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder5_ofkc4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 100.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quantity, order.getQuantity(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder6_hHWM5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 100.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), order.getPrice());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder7_IMBx6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 100.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(TradeConfig.getOrderFee(orderType), order.getOrderFee());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateOrder8_mbSt7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "open";
    double quantity = 100.0;
    OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(account, order.getAccount());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister1_ATVd0() {
        AccountDataBean account = tradeSLSBBean.register("1", "2", "3", "4", "5", "6", new BigDecimal(1));
        assertNotNull(account);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_asbt1() {
        AccountDataBean account = tradeSLSBBean.register("1", "2", "3", "4", "5", "6", new BigDecimal(1));
        assertEquals(0, account.getLoginCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister3_adBg2() {
        AccountDataBean account = tradeSLSBBean.register("1", "2", "3", "4", "5", "6", new BigDecimal(1));
        assertEquals(0, account.getLogoutCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreateQuoteWithReturn_GjGD2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean();
    quote.setSymbol("symbol");
    quote.setCompanyName("companyName");
    quote.setPrice(BigDecimal.ZERO);
    quote.setOpen(BigDecimal.ZERO);
    quote.setLow(BigDecimal.ZERO);
    quote.setChange(0);
    quote.setHigh(BigDecimal.ZERO);
    quote.setVolume(0);
    QuoteDataBean returnedQuote = tradeSLSBBean.createQuote(quote.getSymbol(), quote.getCompanyName(), quote.getPrice());
    assertEquals(quote, returnedQuote);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderAsync1_Zvhp0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.completeOrderAsync(1, true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_jfhY0() {
        tradeSLSBBean = new TradeSLSBBean();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_Drgw1() {
        AccountDataBean account = tradeSLSBBean.getAccountData("123-4");
        assertNotNull(account);
        assertEquals("123-4", account.getProfileID());
        assertTrue(account.getBalance().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(account.getOpenBalance().compareTo(BigDecimal.ZERO) > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithInvalidUserID_kMln2() {
        AccountDataBean account = tradeSLSBBean.getAccountData("invalid-user-id");
        assertNotNull(account);
        assertEquals("invalid-user-id", account.getProfileID());
        assertTrue(account.getBalance().compareTo(BigDecimal.ZERO) == 0);
        assertTrue(account.getOpenBalance().compareTo(BigDecimal.ZERO) == 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithNullUserID_XKXK3() {
        AccountDataBean account = tradeSLSBBean.getAccountData(null);
        assertNotNull(account);
        assertEquals("", account.getProfileID());
        assertTrue(account.getBalance().compareTo(BigDecimal.ZERO) == 0);
        assertTrue(account.getOpenBalance().compareTo(BigDecimal.ZERO) == 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithUserIDThatDoesNotExist_qHlG4() {
        AccountDataBean account = tradeSLSBBean.getAccountData("user-id-that-does-not-exist");
        assertNotNull(account);
        assertEquals("user-id-that-does-not-exist", account.getProfileID());
        assertTrue(account.getBalance().compareTo(BigDecimal.ZERO) == 0);
        assertTrue(account.getOpenBalance().compareTo(BigDecimal.ZERO) == 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void teardown_WXUV1() throws java.lang.Exception {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy1_GllE0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user1";
    String symbol = "symbol1";
    double quantity = 100.0;
    int orderProcessingMode = 0;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy2_RcSW1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user2";
    String symbol = "symbol2";
    double quantity = 200.0;
    int orderProcessingMode = 1;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy3_Hofn2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user3";
    String symbol = "symbol3";
    double quantity = 300.0;
    int orderProcessingMode = 2;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuy23_gPDH3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "user23";
    String symbol = "symbol23";
    double quantity = 2300.0;
    int orderProcessingMode = 22;
    OrderDataBean order = tradeSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell1_oFGm0() {
        String userID = "user1";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell2_iuVn1() {
        String userID = "user2";
        Integer holdingID = 2;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell27_sxUR2() {
        String userID = "user27";
        Integer holdingID = 27;
        int orderProcessingMode = 3;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateQuotePriceVolume1_fDge0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = BigDecimal.ZERO;
    double sharesTraded = 0.0;
    QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_jOtQ2() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
        assertEquals("123", updatedProfileData.getUserID());
        assertEquals("password", updatedProfileData.getPassword());
        assertEquals("John Doe", updatedProfileData.getFullName());
        assertEquals("123 Main St", updatedProfileData.getAddress());
        assertEquals("john@example.com", updatedProfileData.getEmail());
        assertEquals("1234567890123456", updatedProfileData.getCreditCard());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithInvalidUserID_bmVE3() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("invalid");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john@example.com");
        profileData.setCreditCard("1234567890123456");
        try {
            tradeSLSBBean.updateAccountProfile(profileData);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("No Entity found for userID: invalid"));
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithNullUserID_MWQZ4() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID(null);
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john@example.com");
        profileData.setCreditCard("1234567890123456");
        try {
            tradeSLSBBean.updateAccountProfile(profileData);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("User ID cannot be null"));
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithEmptyUserID_coLC5() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john@example.com");
        profileData.setCreditCard("1234567890123456");
        try {
            tradeSLSBBean.updateAccountProfile(profileData);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("User ID cannot be empty"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCompleteOrderAsync2_bwSV1() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    tradeSLSBBean.completeOrderAsync(1, false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_Drgw1_1() {
        AccountDataBean account = tradeSLSBBean.getAccountData("123-4");
        assertNotNull(account);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_Drgw1_2() {
        AccountDataBean account = tradeSLSBBean.getAccountData("123-4");
        assertEquals("123-4", account.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_Drgw1_3() {
        AccountDataBean account = tradeSLSBBean.getAccountData("123-4");
        assertTrue(account.getBalance().compareTo(BigDecimal.ZERO) > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_Drgw1_4() {
        AccountDataBean account = tradeSLSBBean.getAccountData("123-4");
        assertTrue(account.getOpenBalance().compareTo(BigDecimal.ZERO) > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithInvalidUserID_kMln2_1() {
        AccountDataBean account = tradeSLSBBean.getAccountData("invalid-user-id");
        assertNotNull(account);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithInvalidUserID_kMln2_2() {
        AccountDataBean account = tradeSLSBBean.getAccountData("invalid-user-id");
        assertEquals("invalid-user-id", account.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithInvalidUserID_kMln2_3() {
        AccountDataBean account = tradeSLSBBean.getAccountData("invalid-user-id");
        assertTrue(account.getBalance().compareTo(BigDecimal.ZERO) == 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithInvalidUserID_kMln2_4() {
        AccountDataBean account = tradeSLSBBean.getAccountData("invalid-user-id");
        assertTrue(account.getOpenBalance().compareTo(BigDecimal.ZERO) == 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithNullUserID_XKXK3_1() {
        AccountDataBean account = tradeSLSBBean.getAccountData(null);
        assertNotNull(account);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithNullUserID_XKXK3_2() {
        AccountDataBean account = tradeSLSBBean.getAccountData(null);
        assertEquals("", account.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithNullUserID_XKXK3_3() {
        AccountDataBean account = tradeSLSBBean.getAccountData(null);
        assertTrue(account.getBalance().compareTo(BigDecimal.ZERO) == 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithNullUserID_XKXK3_4() {
        AccountDataBean account = tradeSLSBBean.getAccountData(null);
        assertTrue(account.getOpenBalance().compareTo(BigDecimal.ZERO) == 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithUserIDThatDoesNotExist_qHlG4_1() {
        AccountDataBean account = tradeSLSBBean.getAccountData("user-id-that-does-not-exist");
        assertNotNull(account);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithUserIDThatDoesNotExist_qHlG4_2() {
        AccountDataBean account = tradeSLSBBean.getAccountData("user-id-that-does-not-exist");
        assertEquals("user-id-that-does-not-exist", account.getProfileID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithUserIDThatDoesNotExist_qHlG4_3() {
        AccountDataBean account = tradeSLSBBean.getAccountData("user-id-that-does-not-exist");
        assertTrue(account.getBalance().compareTo(BigDecimal.ZERO) == 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountDataWithUserIDThatDoesNotExist_qHlG4_4() {
        AccountDataBean account = tradeSLSBBean.getAccountData("user-id-that-does-not-exist");
        assertTrue(account.getOpenBalance().compareTo(BigDecimal.ZERO) == 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_jOtQ2_1() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_jOtQ2_2() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals("123", updatedProfileData.getUserID());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_jOtQ2_3() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals("password", updatedProfileData.getPassword());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_jOtQ2_4() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals("John Doe", updatedProfileData.getFullName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_jOtQ2_5() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals("123 Main St", updatedProfileData.getAddress());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_jOtQ2_6() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals("john@example.com", updatedProfileData.getEmail());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_jOtQ2_7() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals("1234567890123456", updatedProfileData.getCreditCard());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetQuote_yJLk0_qdUH0_1() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
	Assertions.assertNotNull(quoteDataBean);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetQuote_yJLk0_qdUH0_2() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
	Assertions.assertEquals("companyName", quoteDataBean.getCompanyName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetQuote_yJLk0_qdUH0_3() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
	Assertions.assertEquals(0, quoteDataBean.getChange(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetQuote_yJLk0_qdUH0_4() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
	Assertions.assertEquals(0, quoteDataBean.getHigh().compareTo(BigDecimal.ZERO));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetQuote_yJLk0_qdUH0_5() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
	Assertions.assertEquals(0, quoteDataBean.getLow().compareTo(BigDecimal.ZERO));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetQuote_yJLk0_qdUH0_6() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
	Assertions.assertEquals(0, quoteDataBean.getOpen().compareTo(BigDecimal.ZERO));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetQuote_yJLk0_qdUH0_7() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
	Assertions.assertEquals(0, quoteDataBean.getPrice().compareTo(BigDecimal.ZERO));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetQuote_yJLk0_qdUH0_8() {
	TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
	QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
	Assertions.assertEquals(0, quoteDataBean.getVolume(), 0);}
}