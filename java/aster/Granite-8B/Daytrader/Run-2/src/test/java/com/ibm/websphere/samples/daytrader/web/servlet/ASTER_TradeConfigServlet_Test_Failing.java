/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Failing {
    TradeConfigServlet tradeConfigServlet;
    HttpServlet httpServlet;
    private RunStatsDataBean runStatsData;
    private TradeConfig currentConfig;
    private String results;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        httpServlet = mock(HttpServlet.class);
        tradeConfigServlet = new TradeConfigServlet();
        tradeConfigServlet.init(null);
        verify(httpServlet).init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_uAdn1() throws ServletException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        ServletConfig config = Mockito.mock(ServletConfig.class);
        servlet.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServiceWithActionNull_FwJq0() throws ServletException, IOException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn(null);
        servlet.service(req, resp);
        verify(resp, times(1)).setContentType("text/html");
        verify(resp, times(1)).getWriter();
        verify(resp, times(1)).getWriter().println("<b><br>Current DayTrader Configuration:</br></b>");
        verify(resp, times(1)).getWriter().flush();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoResetTrade_glTs0() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "some results";
        servlet.doResetTrade(req, resp, results);
        verify(req, times(1)).setAttribute("runStatsData", any());
        verify(req, times(1)).setAttribute("tradeConfig", any());
        verify(req, times(1)).setAttribute("status", eq("some resultsTrade Reset completed successfully"));
        verify(resp, times(1)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigDisplay_wUvD0_1() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "success";
        servlet.doConfigDisplay(req, resp, results);
        assertNotNull(req.getAttribute("tradeConfig"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigDisplay_wUvD0_2() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "success";
        servlet.doConfigDisplay(req, resp, results);
        assertNotNull(req.getAttribute("status"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_QzHI0_SmZA0() throws ServletException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        ServletConfig config = mock(ServletConfig.class);
        when(config.getInitParameter("OrderProcessingMode")).thenReturn("0");
        when(config.getInitParameter("WebInterface")).thenReturn("0");
        when(config.getInitParameter("MaxUsers")).thenReturn("100");
        when(config.getInitParameter("MaxQuotes")).thenReturn("1000");
        when(config.getInitParameter("marketSummaryInterval")).thenReturn("30");
        when(config.getInitParameter("primIterations")).thenReturn("1");
        when(config.getInitParameter("EnablePublishQuotePriceChange")).thenReturn("true");
        when(config.getInitParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
        when(config.getInitParameter("EnableLongRun")).thenReturn("true");
        when(config.getInitParameter("DisplayOrderAlerts")).thenReturn("true");
        servlet.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_fid1() throws Exception {
        tradeConfigServlet = new TradeConfigServlet();
        tradeConfigServlet.init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigDisplay_wUvD0() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "success";
        servlet.doConfigDisplay(req, resp, results);
        assertNotNull(req.getAttribute("tradeConfig"));
        assertNotNull(req.getAttribute("status"));
    }
}