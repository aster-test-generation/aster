/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AsyncOrder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRun_lEHI0() {
        AsyncOrder asyncOrder = new AsyncOrder();
        asyncOrder.run();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperties_pUKt0_1() {
        AsyncOrder asyncOrder = new AsyncOrder();
        asyncOrder.setProperties(123, true);
        assertEquals(123, asyncOrder.orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperties_pUKt0_2() {
        AsyncOrder asyncOrder = new AsyncOrder();
        asyncOrder.setProperties(123, true);
        assertTrue(asyncOrder.twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertiesWithNullOrderID_EnSS1_1() {
        AsyncOrder asyncOrder = new AsyncOrder();
        asyncOrder.setProperties(null, true);
        assertEquals(null, asyncOrder.orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertiesWithNullOrderID_EnSS1_2() {
        AsyncOrder asyncOrder = new AsyncOrder();
        asyncOrder.setProperties(null, true);
        assertTrue(asyncOrder.twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertiesWithZeroOrderID_pgHW2_1() {
        AsyncOrder asyncOrder = new AsyncOrder();
        asyncOrder.setProperties(0, true);
        assertEquals(0, asyncOrder.orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertiesWithZeroOrderID_pgHW2_2() {
        AsyncOrder asyncOrder = new AsyncOrder();
        asyncOrder.setProperties(0, true);
        assertTrue(asyncOrder.twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertiesWithNegativeOrderID_aBZd3_1() {
        AsyncOrder asyncOrder = new AsyncOrder();
        asyncOrder.setProperties(-123, true);
        assertEquals(-123, asyncOrder.orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertiesWithNegativeOrderID_aBZd3_2() {
        AsyncOrder asyncOrder = new AsyncOrder();
        asyncOrder.setProperties(-123, true);
        assertTrue(asyncOrder.twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertiesWithTwoPhaseFalse_sRZH4_1() {
        AsyncOrder asyncOrder = new AsyncOrder();
        asyncOrder.setProperties(123, false);
        assertEquals(123, asyncOrder.orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertiesWithTwoPhaseFalse_sRZH4_2() {
        AsyncOrder asyncOrder = new AsyncOrder();
        asyncOrder.setProperties(123, false);
        assertFalse(asyncOrder.twoPhase);
    }
}