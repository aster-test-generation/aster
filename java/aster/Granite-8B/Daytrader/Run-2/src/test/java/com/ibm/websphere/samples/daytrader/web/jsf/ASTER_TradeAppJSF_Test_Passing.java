/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppJSF_Test_Passing {
    @Mock
    private TradeServices tradeServices;
    @InjectMocks
    private TradeAppJSF tradeAppJSF;
    private TradeServices tradeAction;
    private String userID = "uid:0";
    @Mock
    TradeAppJSF tradeappjsf;
    @Mock
    HttpSession httpsession;
    @Mock
    ExternalContext externalcontext;
    @Mock
    HttpServletRequest httpservletrequest;
    private String password = "xxx";
    private String email;
    private String money;
    private String fullname;
    private String address;
    private String ccn;
    private String cpassword;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_Jify0() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(mock(Instance.class));
        tradeAppJSF.logout();
        verify(tradeAppJSF, times(1)).logout();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithException_CjeN1() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(mock(Instance.class));
        doThrow(new IllegalArgumentException()).when(tradeAppJSF).logout();
        try {
            tradeAppJSF.logout();
        } catch (IllegalArgumentException e) {
        }
        verify(tradeAppJSF, times(1)).logout();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpassword_TdKI0() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
        String cpassword = tradeAppJSF.getCpassword();
        assertNotNull(cpassword);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCcn_WlWD0() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
        String ccn = tradeAppJSF.getCcn();
        assertNotNull(ccn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEmail_DmSz0() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
        String email = tradeAppJSF.getEmail();
        assertNotNull(email);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin() throws Exception {
        httpsession = mock(HttpSession.class);
        externalcontext = mock(ExternalContext.class);
        tradeappjsf = new TradeAppJSF(mock(Instance.class));
        when(externalcontext.getSession(any())).thenReturn(httpsession);
        when(httpsession.getAttribute("uidBean")).thenReturn(userID);
        when(httpsession.getAttribute("sessionCreationDate")).thenReturn(new java.util.Date());
        String result = tradeappjsf.login();
        verify(httpsession, times(1)).setAttribute("uidBean", userID);
        verify(httpsession, times(1)).setAttribute("sessionCreationDate", new java.util.Date());
        assertEquals("Ready to Trade", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithException() throws Exception {
        httpsession = mock(HttpSession.class);
        externalcontext = mock(ExternalContext.class);
        tradeappjsf = new TradeAppJSF(mock(Instance.class));
        when(externalcontext.getSession(any())).thenReturn(httpsession);
        when(httpsession.getAttribute("uidBean")).thenReturn(null);
        when(httpsession.getAttribute("sessionCreationDate")).thenReturn(null);
        String result = tradeappjsf.login();
        verify(httpsession, times(0)).setAttribute("uidBean", userID);
        verify(httpsession, times(0)).setAttribute("sessionCreationDate", new java.util.Date());
        assertEquals("welcome", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAddress_QKEs0() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
        String address = tradeAppJSF.getAddress();
        assertEquals("address", address);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPassword_KJhR0() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
        String password = tradeAppJSF.getPassword();
        assertNotNull(password);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMoney_ILaK0() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
        String money = tradeAppJSF.getMoney();
        assertNotNull(money);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFullname_hbiT0() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
        String fullname = tradeAppJSF.getFullname();
        assertNotNull(fullname);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCcn_HvEt0_AnPI0() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
        tradeAppJSF.setCcn("1234567890");
        assertEquals("1234567890", tradeAppJSF.getCcn());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setAddress(String address)
    {
        this.address = address;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMoney_AISj0_tTAG0() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(Mockito.mock(Instance.class));
        tradeAppJSF.setMoney("100");
        assertEquals("100", tradeAppJSF.getMoney());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEmail_DmSz0_fid1() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
        String email = tradeAppJSF.getEmail();
        assertEquals("Your email is: ", email);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPassword_KJhR0_fid1() {
        TradeAppJSF tradeAppJSF = new TradeAppJSF(null);
        String password = tradeAppJSF.getPassword();
        assertEquals("", password);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_ZUXM0() {
        tradeAppJSF = new TradeAppJSF(mock(Instance.class));
    }
}