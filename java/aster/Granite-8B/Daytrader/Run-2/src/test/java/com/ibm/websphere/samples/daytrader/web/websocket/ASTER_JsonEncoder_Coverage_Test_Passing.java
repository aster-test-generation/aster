/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;
import javax.websocket.EncodeException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JsonEncoder_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyKey_CPLe0() throws javax.websocket.EncodeException {
        JsonEncoder encoder = new JsonEncoder();
        JsonMessage message = new JsonMessage();
        message.setKey("");
        message.setValue("value");
        String expected = "{\"key\":\"\",\"value\":\"value\"}";
        String actual = encoder.encode(message);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithEmptyValue_PoHG1() throws javax.websocket.EncodeException {
        JsonEncoder encoder = new JsonEncoder();
        JsonMessage message = new JsonMessage();
        message.setKey("key");
        message.setValue("");
        String expected = "{\"key\":\"key\",\"value\":\"\"}";
        String actual = encoder.encode(message);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullKey_ZJVx2() throws javax.websocket.EncodeException {
        JsonEncoder encoder = new JsonEncoder();
        JsonMessage message = new JsonMessage();
        message.setKey(null);
        message.setValue("value");
        String expected = "{\"key\":null,\"value\":\"value\"}";
        String actual = encoder.encode(message);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithNullValue_puew3() throws javax.websocket.EncodeException {
        JsonEncoder encoder = new JsonEncoder();
        JsonMessage message = new JsonMessage();
        message.setKey("key");
        message.setValue(null);
        String expected = "{\"key\":\"key\",\"value\":null}";
        String actual = encoder.encode(message);
        assertEquals(expected, actual);
    }
}