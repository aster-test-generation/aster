/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHigh_sNpg0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        BigDecimal high = BigDecimal.ONE;
        quoteData.setHigh(high);
        assertEquals(high, quoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeHTMLWithNegativeChange_Auei0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), "AAPL");
        String expectedHTML = "<FONT color=\"#cc0000\">-10.00</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
        String actualHTML = quoteData.getChangeHTML();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompanyName_snNP0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        assertEquals("companyName", quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_Jkmt0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setGain(BigDecimal.ZERO);
        assertEquals(BigDecimal.ZERO, quoteData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_XQip0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setVolume(100.0);
        assertEquals(100.0, quoteData.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolumeWithNegativeVolume_haGh2() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setVolume(-100.0);
        assertEquals(-100.0, quoteData.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolumeWithZeroVolume_ihlx3() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setVolume(0.0);
        assertEquals(0.0, quoteData.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolumeWithLargeVolume_ciIn5() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setVolume(1000000000.0);
        assertEquals(1000000000.0, quoteData.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolumeWithSmallVolume_OxJT6() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setVolume(0.000000001);
        assertEquals(0.000000001, quoteData.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithNullSymbol_vLCV4() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ZERO, null);
        String range = quoteData.getRange();
        assertNull(range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithZeroChange_sdpx5() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ONE, "symbol");
        String range = quoteData.getRange();
        assertNull(range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithPositiveChange_Ztsl6() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ZERO, "symbol");
        String range = quoteData.getRange();
        assertNull(range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithNegativeChange_yelY7() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ONE, "symbol");
        String range = quoteData.getRange();
        assertNull(range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_jgOx0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(90.0), BigDecimal.valueOf(90.0), "ABC", BigDecimal.valueOf(110.0), BigDecimal.valueOf(80.0), "ABC Corp", 1000.0, 10.0);
        BigDecimal expectedPrice = BigDecimal.valueOf(90.0);
        BigDecimal actualPrice = quoteData.getPrice();
        assertEquals(expectedPrice, actualPrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpen_YhCx0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setOpen(BigDecimal.ONE);
        assertEquals(BigDecimal.ONE, quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenWithNull_LpzU1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setOpen(null);
        assertEquals(null, quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenWithNegativeValue_fWtr2() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setOpen(BigDecimal.valueOf(-10));
        assertEquals(BigDecimal.valueOf(-10), quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenWithZeroValue_srDn3() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setOpen(BigDecimal.ZERO);
        assertEquals(BigDecimal.ZERO, quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenWithPositiveValue_QXjn4() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setOpen(BigDecimal.valueOf(10));
        assertEquals(BigDecimal.valueOf(10), quoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getLow_LWIJ0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        BigDecimal expectedLow = BigDecimal.ZERO;
        BigDecimal actualLow = quoteData.getLow();
        assertEquals(expectedLow, actualLow);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChange_CXvG0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        double change = quoteData.getChange();
        assertEquals(0.0, change, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithNullSymbol_PwZX3() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, null);
        double change = quoteData.getChange();
        assertEquals(0.0, change, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithZeroChange_TkFi4() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        double change = quoteData.getChange();
        assertEquals(0.0, change, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithNegativeChange_Enrn5() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ONE, "symbol");
        double change = quoteData.getChange();
        assertEquals(-1.0, change, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithPositiveChange_wIiu6() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ZERO, "symbol");
        double change = quoteData.getChange();
        assertEquals(1.0, change, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHigh_LxIS0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        BigDecimal high = quoteData.getHigh();
        assertNotNull(high);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_MFHs0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setPrice(BigDecimal.ONE);
        assertEquals(BigDecimal.ONE, quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNegativePrice_RnCJ2() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setPrice(BigDecimal.valueOf(0));
        assertEquals(BigDecimal.ZERO, quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithZeroPrice_UBko3() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setPrice(BigDecimal.ZERO);
        assertEquals(BigDecimal.ZERO, quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_tUzb0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "TEST_SYMBOL");
        assertEquals("TEST_SYMBOL", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithPartialParameters_dmAO2() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "TEST_SYMBOL", BigDecimal.ZERO, BigDecimal.ZERO, "TEST_COMPANY", 0.0, 0.0);
        assertEquals("TEST_SYMBOL", quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithInvalidParameters_dEGf4() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, null);
        assertEquals(null, quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLow_sNTl0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setLow(BigDecimal.ONE);
        assertEquals(BigDecimal.ONE, quoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyName_aZSX0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setCompanyName("newCompanyName");
        assertEquals("newCompanyName", quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyNameWithNull_znsk1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setCompanyName(null);
        assertEquals(null, quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyNameWithEmpty_WJQC2() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setCompanyName("");
        assertEquals("", quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyNameWithLengthExceedLimit_reGi4() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setCompanyName("This is a very long company name that exceeds the limit");
        assertEquals("This is a very long company name that exceeds the limit", quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyNameWithInvalidCharacters_ifrE5() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setCompanyName("Invalid!@#$%^&*()_+");
        assertEquals("Invalid!@#$%^&*()_+", quoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVolume_kwIz0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 10.0, 10.0);
        assertEquals(10.0, quoteData.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithAllParameters_XnTN1_IeKW0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol", BigDecimal.ZERO, BigDecimal.ZERO, "companyName", 0.0, 0.0);
        quoteData.setSymbol("newSymbol");
        assertEquals("newSymbol", quoteData.getSymbol());
    }
}