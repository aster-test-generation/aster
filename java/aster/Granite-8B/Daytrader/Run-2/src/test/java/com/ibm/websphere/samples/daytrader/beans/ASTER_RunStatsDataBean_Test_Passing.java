/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeUserCount_Lipt0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int tradeUserCount = runStatsDataBean.getTradeUserCount();
        assertEquals(0, tradeUserCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCount_Gglj0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int buyOrderCount = 10;
        runStatsDataBean.setBuyOrderCount(buyOrderCount);
        assertEquals(10, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCount_LPxP0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(10);
        assertEquals(10, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeUserCount_FXqM0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(10);
        assertEquals(10, runStatsDataBean.getTradeUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getBuyOrderCount_fWfN0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int buyOrderCount = runStatsDataBean.getBuyOrderCount();
        assertEquals(0, buyOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getBuyOrderCount_positive_WfmF2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(5);
        int buyOrderCount = runStatsDataBean.getBuyOrderCount();
        assertEquals(5, buyOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getBuyOrderCount_negative_fNEd3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(-5);
        int buyOrderCount = runStatsDataBean.getBuyOrderCount();
        assertEquals(-5, buyOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderCount_DrAC0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int orderCount = runStatsDataBean.getOrderCount();
        assertEquals(0, orderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenOrderCount_dCsS0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int openOrderCount = runStatsDataBean.getOpenOrderCount();
        assertEquals(0, openOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddNewUserCount_ciMQ0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int newUserCount = 10; // Assuming newUserCount is initialized elsewhere
        runStatsDataBean.setNewUserCount(newUserCount);
        assertEquals(newUserCount, runStatsDataBean.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenOrderCount_lmAZ0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int openOrderCount = 10;
        runStatsDataBean.setOpenOrderCount(openOrderCount);
        assertEquals(openOrderCount, runStatsDataBean.getOpenOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_WmsQ0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(10);
        assertEquals(10, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCountWithZero_owpe1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(0);
        assertEquals(0, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCountWithNegativeNumber_cIhF2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(-10);
        assertEquals(-10, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCountWithMaximumValue_zbEq3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCountWithMinimumValue_rqpR4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLoginCount_Zrgg0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sumLoginCount = 10; // Replace with any value
        runStatsDataBean.setSumLoginCount(sumLoginCount);
        assertEquals(sumLoginCount, runStatsDataBean.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingCount_SfKc0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(10);
        assertEquals(10, runStatsDataBean.getHoldingCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCancelledOrderCount_aQWo0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int cancelledOrderCount = runStatsDataBean.getCancelledOrderCount();
        assertEquals(0, cancelledOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCancelledOrderCountWithCancelledOrders_dYrO2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(10);
        int cancelledOrderCount = runStatsDataBean.getCancelledOrderCount();
        assertEquals(10, cancelledOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCount_FFTz0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(10);
        assertEquals(10, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCount_fGMy1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(0);
        assertEquals(0, runStatsDataBean.getSellOrderCount());
        runStatsDataBean.setSellOrderCount(1);
        assertEquals(1, runStatsDataBean.getSellOrderCount());
        runStatsDataBean.setSellOrderCount(-1);
        assertEquals(-1, runStatsDataBean.getSellOrderCount());
        runStatsDataBean.setSellOrderCount(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, runStatsDataBean.getSellOrderCount());
        runStatsDataBean.setSellOrderCount(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_AEhq0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(10);
        runStatsDataBean.setNewUserCount(5);
        runStatsDataBean.setSumLoginCount(20);
        runStatsDataBean.setSumLogoutCount(15);
        runStatsDataBean.setHoldingCount(8);
        runStatsDataBean.setOrderCount(12);
        runStatsDataBean.setBuyOrderCount(6);
        runStatsDataBean.setSellOrderCount(3);
        runStatsDataBean.setCancelledOrderCount(2);
        runStatsDataBean.setOpenOrderCount(4);
        runStatsDataBean.setDeletedOrderCount(1);
        String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: 10\n\t\t        newUserCount: 5\n\t\t       sumLoginCount: 20\n\t\t      sumLogoutCount: 15\n\t\t        holdingCount: 8\n\t\t          orderCount: 12\n\t\t       buyOrderCount: 6\n\t\t      sellOrderCount: 3\n\t\t cancelledOrderCount: 2\n\t\t      openOrderCount: 4\n\t\t   deletedOrderCount: 1";
        assertEquals(expected, runStatsDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeStockCount_MkUD0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int tradeStockCount = runStatsDataBean.getTradeStockCount();
        assertEquals(0, tradeStockCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeStockCountWithPositiveValue_iRvB2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(10);
        int tradeStockCount = runStatsDataBean.getTradeStockCount();
        assertEquals(10, tradeStockCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTradeStockCountWithNegativeValue_oMZA3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(-10);
        int tradeStockCount = runStatsDataBean.getTradeStockCount();
        assertEquals(-10, tradeStockCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeletedOrderCount_ISpg0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int deletedOrderCount = runStatsDataBean.getDeletedOrderCount();
        assertEquals(0, deletedOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeletedOrderCountWithPositiveValue_JMXu1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(10);
        int deletedOrderCount = runStatsDataBean.getDeletedOrderCount();
        assertEquals(10, deletedOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeletedOrderCountWithNegativeValue_Irqf2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(-10);
        int deletedOrderCount = runStatsDataBean.getDeletedOrderCount();
        assertEquals(-10, deletedOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeletedOrderCountWithZeroValue_UGjO3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(0);
        int deletedOrderCount = runStatsDataBean.getDeletedOrderCount();
        assertEquals(0, deletedOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLogoutCount_WwTk0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
        assertEquals(0, sumLogoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLogoutCountWithPositiveValue_PIQW1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(10);
        int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
        assertEquals(10, sumLogoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLogoutCountWithNegativeValue_zlsP2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(-10);
        int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
        assertEquals(-10, sumLogoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLogoutCountWithZeroValue_GhdS3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(0);
        int sumLogoutCount = runStatsDataBean.getSumLogoutCount();
        assertEquals(0, sumLogoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewUserCount_aDyg0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setNewUserCount(10);
        assertEquals(10, runStatsDataBean.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLoginCount_TtLC0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(10);
        assertEquals(10, runStatsDataBean.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCancelledOrderCount_OIAa0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(1);
        assertEquals(1, runStatsDataBean.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCancelledOrderCount_Mdxq1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(0);
        assertEquals(0, runStatsDataBean.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCancelledOrderCount_NEdY2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(-1);
        assertEquals(-1, runStatsDataBean.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLogoutCount_nZGN0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(10);
        assertEquals(10, runStatsDataBean.getSumLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingCount_DEGg0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(0, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingCountWithPositiveValue_vxCo1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(10);
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(10, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingCountWithNegativeValue_NgLp2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(-5);
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(-5, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingCountWithZeroValue_tcrs3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(0);
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(0, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCancelledOrderCountWithNegativeCancelledOrders_ndjD3_fid1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(-10);
        int cancelledOrderCount = runStatsDataBean.getCancelledOrderCount();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCount_fGMy1_1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(-2147483648);
        runStatsDataBean.setSellOrderCount(1);
        runStatsDataBean.setSellOrderCount(-1);
        runStatsDataBean.setSellOrderCount(Integer.MAX_VALUE);
        runStatsDataBean.setSellOrderCount(Integer.MIN_VALUE);
        assertEquals(-2147483648, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = -2147483648, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCount_fGMy1_2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(0);
        runStatsDataBean.setSellOrderCount(1);
        runStatsDataBean.setSellOrderCount(-1);
        runStatsDataBean.setSellOrderCount(Integer.MAX_VALUE);
        runStatsDataBean.setSellOrderCount(Integer.MIN_VALUE);
        assertEquals(1, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCount_fGMy1_3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(0);
        runStatsDataBean.setSellOrderCount(1);
        runStatsDataBean.setSellOrderCount(-2147483648);
        runStatsDataBean.setSellOrderCount(Integer.MAX_VALUE);
        runStatsDataBean.setSellOrderCount(Integer.MIN_VALUE);
        assertEquals(-2147483648, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCount_fGMy1_5() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(0);
        runStatsDataBean.setSellOrderCount(1);
        runStatsDataBean.setSellOrderCount(-1);
        runStatsDataBean.setSellOrderCount(Integer.MAX_VALUE);
        runStatsDataBean.setSellOrderCount(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, runStatsDataBean.getSellOrderCount());
    }
}