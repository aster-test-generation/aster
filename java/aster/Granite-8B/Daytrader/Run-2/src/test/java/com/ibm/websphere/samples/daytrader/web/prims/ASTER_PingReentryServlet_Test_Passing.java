/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingReentryServlet_Test_Passing {
    @Mock
    ServletConfig servletConfig;
    @Mock
    HttpServlet httpServlet;
    PingReentryServlet pingReentryServlet;
    @Mock
    HttpServletRequest httpServletRequest;
    @Mock
    HttpServletResponse httpServletResponse;
    @Mock
    ServletOutputStream servletOutputStream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        pingReentryServlet = new PingReentryServlet();
        pingReentryServlet.init(servletConfig);
        verify(httpServlet).init(servletConfig);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws ServletException, IOException {
        MockitoAnnotations.openMocks(this);
        pingReentryServlet.doPost(httpServletRequest, httpServletResponse);
        verify(httpServletResponse).getOutputStream();
        verify(httpServletResponse).setContentType("text/html");
        verify(servletOutputStream).println("Hello World");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_oWge0() throws ServletException, IOException {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
        verify(request, times(1)).getParameter("param1");
        verify(request, times(1)).getParameter("param2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_hyPI0() {
        PingReentryServlet servlet = new PingReentryServlet();
        String actual = servlet.getServletInfo();
        String expected = "Basic dynamic HTML generation through a servlet";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(httpServletRequest.getParameter("numReentries")).thenReturn("1");
        when(httpServletRequest.getParameter("sleep")).thenReturn("1000");
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        pingReentryServlet.doGet(httpServletRequest, httpServletResponse);
        verify(httpServletResponse, times(1)).setContentType("text/html");
        verify(httpServletResponse, times(1)).getOutputStream();
        verify(servletOutputStream, times(1)).println(anyInt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNumReentriesParameter_UQgN0() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn("5");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithSleepParameter_RRkP1() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("sleep")).thenReturn("1000");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNoParameters_nvjo2() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithInvalidNumReentriesParameter_lwPH3() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn("abc");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithInvalidSleepParameter_oera4() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("sleep")).thenReturn("abc");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNegativeNumReentriesParameter_QboR5() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn("-5");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNegativeSleepParameter_qSsx6() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("sleep")).thenReturn("-1000");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithZeroNumReentriesParameter_lxsI7() throws Exception {
        PingReentryServlet servlet = new PingReentryServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn("0");
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getOutputStream();
        verify(res).sendError(500, anyString());
    }
}