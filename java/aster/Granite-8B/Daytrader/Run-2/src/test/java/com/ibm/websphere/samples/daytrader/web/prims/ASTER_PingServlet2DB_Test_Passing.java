/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import java.io.IOException;
import java.sql.Connection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2DB_Test_Passing {
    private static int hitCount;
    private static String initTime;
    PingServlet2DB pingServlet2DB;
    HttpServlet httpServlet;
    @Mock
    HttpServletRequest req;
    @Mock
    HttpServletResponse res;
    @Mock
    HttpServletResponse httpServletResponse;
    @Mock
    Connection connection;
    @Mock
    TradeDirect tradeDirect;
    @Mock
    HttpServlet httpservlet;
    @Mock
    HttpServletResponse httpservletresponse;
    @Mock
    TradeDirect tradedirect;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_1() throws Exception {
        httpServlet = mock(HttpServlet.class);
        pingServlet2DB = new PingServlet2DB();
        // Mock the init method of HttpServlet
        doNothing().when(httpServlet).init(any());
        // Call the init method of PingServlet2DB
        pingServlet2DB.init(httpServlet);
        // Verify that the hitCount and initTime variables are initialized to 0 and a valid date, respectively
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_2() throws Exception {
        httpServlet = mock(HttpServlet.class);
        pingServlet2DB = new PingServlet2DB();
        // Mock the init method of HttpServlet
        doNothing().when(httpServlet).init(any());
        // Call the init method of PingServlet2DB
        pingServlet2DB.init(httpServlet);
        // Verify that the hitCount and initTime variables are initialized to 0 and a valid date, respectively
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        MockitoAnnotations.openMocks(this);
        pingServlet2DB = new PingServlet2DB();
        when(tradeDirect.getConnPublic()).thenReturn(connection);
        pingServlet2DB.doPost(req, res);
        verify(tradeDirect).getConnPublic();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_Yuvi0() {
        PingServlet2DB servlet = new PingServlet2DB();
        String expected = "Basic JDBC Read using a prepared statment, makes use of TradeJDBC class";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_ydEB0_GvQI0() throws ServletException, IOException {
        PingServlet2DB pingServlet2DB = new PingServlet2DB();
        when(req.getParameter("symbol")).thenReturn("IBM");
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServlet2DB.doPost(req, res);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        httpServlet = mock(HttpServlet.class);
        pingServlet2DB = new PingServlet2DB();
        // Mock the init method of HttpServlet
        doNothing().when(httpServlet).init(any());
        // Call the init method of PingServlet2DB
        pingServlet2DB.init(httpServlet);
        // Verify that the hitCount and initTime variables are initialized to 0 and a valid date, respectively
        assertEquals(0, hitCount);
        assertNotNull(initTime);
    }
}