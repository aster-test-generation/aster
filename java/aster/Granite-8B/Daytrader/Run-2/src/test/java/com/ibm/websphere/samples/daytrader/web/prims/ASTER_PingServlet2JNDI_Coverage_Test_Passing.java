/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
public class Aster_PingServlet2JNDI_Coverage_Test_Passing {
    PingServlet2JNDI servlet;
	PingServlet2JNDI pingServlet2JNDI = new PingServlet2JNDI();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_dsNM0() throws javax.servlet.ServletException {
        servlet = new PingServlet2JNDI();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDoPost1_WNJg0() throws ServletException, IOException {
		HttpServletRequest request = new MockHttpServletRequest();
		HttpServletResponse response = new MockHttpServletResponse();
		servlet.doPost(request, response);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetServletInfo_eGKp0() {
		String result = pingServlet2JNDI.getServletInfo();
		assertEquals("Basic JNDI look up of a JDBC DataSource", result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentType_Zljr0() throws javax.servlet.ServletException, java.io.IOException {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_UIFu4_gwJS0() throws javax.servlet.ServletException {
        ServletConfig config = mock(ServletConfig.class);
        when(config.getServletName()).thenReturn("PingServlet2JNDI");
        when(config.getInitParameter("name")).thenReturn("jdbc/test");
        when(config.getInitParameter("type")).thenReturn("javax.sql.DataSource");
        when(config.getInitParameter("factory")).thenReturn("org.apache.commons.dbcp.BasicDataSourceFactory");
        when(config.getInitParameter("maxActive")).thenReturn("10");
        when(config.getInitParameter("maxIdle")).thenReturn("5");
        when(config.getInitParameter("minIdle")).thenReturn("2");
        when(config.getInitParameter("maxWait")).thenReturn("1000");
        when(config.getInitParameter("username")).thenReturn("root");
        when(config.getInitParameter("password")).thenReturn("password");
        when(config.getInitParameter("validationQuery")).thenReturn("SELECT 1");
        when(config.getInitParameter("testOnBorrow")).thenReturn("true");
        when(config.getInitParameter("testOnReturn")).thenReturn("true");
        when(config.getInitParameter("timeBetweenEvictionRunsMillis")).thenReturn("10000");
        when(config.getInitParameter("minEvictableIdleTimeMillis")).thenReturn("25000");
        when(config.getInitParameter("numTestsPerEvictionRun")).thenReturn("3");
        when(config.getInitParameter("accessToUnderlyingConnectionAllowed")).thenReturn("true");
        when(config.getInitParameter("removeAbandoned")).thenReturn("true");
        when(config.getInitParameter("removeAbandonedTimeout")).thenReturn("1800");
        when(config.getInitParameter("logAbandoned")).thenReturn("true");
        when(config.getInitParameter("url")).thenReturn("jdbc:mysql://localhost:3306/test");
        when(config.getInitParameter("driverClassName")).thenReturn("com.mysql.jdbc.Driver");
        when(config.getInitParameter("connectionProperties")).thenReturn("useSSL=false");
        when(config.getInitParameter("initSQL")).thenReturn("SET NAMES utf8");
        servlet.init(config);
    }
}