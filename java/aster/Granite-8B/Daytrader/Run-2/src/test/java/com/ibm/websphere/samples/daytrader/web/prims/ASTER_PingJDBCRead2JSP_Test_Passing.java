/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCRead2JSP_Test_Passing {
    @Mock
    ServletConfig config;
    @Mock
    HttpServlet servlet;
    PingJDBCRead2JSP pingjdbcread2jsp;
    HttpServlet httpservlet;
    ServletConfig servletconfig;
    HttpServletRequest httpservletrequest;
    ServletContext servletcontext;
    HttpServletResponse httpservletresponse;
    TradeConfig tradeConfig;
    QuoteDataBean quoteDataBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        pingjdbcread2jsp = new PingJDBCRead2JSP();
        pingjdbcread2jsp.init(config);
        verify(servlet, times(1)).init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_fdSj0() {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        String result = pingJDBCRead2JSP.getServletInfo();
        assertEquals("Basic JDBC Read using a prepared statment forwarded to a JSP, makes use of TradeJDBC class", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidSymbol_mXqZ0_xHtd0() throws ServletException, IOException {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletContext context = mock(ServletContext.class);
        String symbol = "validSymbol";
        when(request.getParameter("symbol")).thenReturn(symbol);
        when(request.getServletContext()).thenReturn(context);
        pingJDBCRead2JSP.doGet(request, response);
        assertNotNull(request.getAttribute("quoteData"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithInvalidSymbol_brot1_pIpA0() throws ServletException, IOException {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        ServletContext context = mock(ServletContext.class);
        String symbol = "invalidSymbol";
        when(request.getParameter("symbol")).thenReturn(symbol);
        when(request.getServletContext()).thenReturn(context);
        pingJDBCRead2JSP.doGet(request, response);
        assertEquals(500, response.getStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithNullServletConfig_vuIZ2_ZGnf0() {
        PingJDBCRead2JSP pingJDBCRead2JSP = new PingJDBCRead2JSP();
        ServletConfig servletConfig = null;
        try {
            pingJDBCRead2JSP.init(servletConfig);
        } catch (ServletException e) {
        }
    }
}