/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValSimple2_Test_Passing {
    private static LocalDateTime initTime;
    PingServletBeanValSimple2 pingservletbeanvalsimple2;
    HttpServlet httpservlet;
    @Mock
    HttpServlet httpServlet;
    @Mock
    HttpServletRequest httpServletRequest;
    @Mock
    HttpServletResponse httpServletResponse;
    @Mock
    ServletOutputStream servletOutputStream;
    PingServletBeanValSimple2 pingServletBeanValSimple2;
    private static int hitCount = 0;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletbeanvalsimple2 = new PingServletBeanValSimple2();
        pingservletbeanvalsimple2.init(httpservlet);
        verify(httpservlet, times(1)).init(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        pingServletBeanValSimple2.doPost(httpServletRequest, httpServletResponse);
        verify(httpServletResponse).getOutputStream();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_dppE0() {
        PingServletBeanValSimple2 pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        String servletInfo = pingServletBeanValSimple2.getServletInfo();
        assertEquals("Basic dynamic HTML generation through a servlet", servletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_cpvL0() throws Exception {
        httpServlet = mock(HttpServlet.class);
        httpServletRequest = mock(HttpServletRequest.class);
        httpServletResponse = mock(HttpServletResponse.class);
        servletOutputStream = mock(ServletOutputStream.class);
        pingServletBeanValSimple2 = new PingServletBeanValSimple2();
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        pingServletBeanValSimple2.doGet(httpServletRequest, httpServletResponse);
        verify(httpServletResponse).setContentType("text/html");
        verify(httpServletResponse).getOutputStream();
        verify(servletOutputStream).println("<html><head><title>Ping Servlet Bean Validation Simple</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet Bean Validation Simple<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>  <B>Hit Count: " + hitCount + "</B></body></html>");
    }
}