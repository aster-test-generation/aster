/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCRead_Test_Passing {
    private static String initTime;
    private static int hitCount;
    PingJDBCRead pingjdbcread;
    HttpServlet httpservlet;
    @Mock
    HttpServletResponse httpServletResponse;
    @Mock
    HttpServlet httpServlet;
    PingJDBCRead pingJDBCRead;
    HttpServletResponse httpservletresponse;

    private static String getHitCount() {
        return "100";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcread = new PingJDBCRead();
        // Call the init method
        pingjdbcread.init(httpservlet);
        // Assert that hitCount is 0
        // Assert that initTime is not null
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcread = new PingJDBCRead();
        // Call the init method
        pingjdbcread.init(httpservlet);
        // Assert that hitCount is 0
        // Assert that initTime is not null
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws ServletException, IOException {
        pingJDBCRead = new PingJDBCRead();
        HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
        pingJDBCRead.doPost(httpServletRequest, httpServletResponse);
        verify(httpServletResponse, times(1)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        PingJDBCRead pingJDBCRead = new PingJDBCRead();
        HttpServletRequest mockReq = mock(HttpServletRequest.class);
        HttpServletResponse mockRes = mock(HttpServletResponse.class);
        pingJDBCRead.doPost(mockReq, mockRes);
        verify(pingJDBCRead).doGet(mockReq, mockRes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_zHrx0() {
        PingJDBCRead pingJDBCRead = new PingJDBCRead();
        String servletInfo = pingJDBCRead.getServletInfo();
        assertTrue("Basic JDBC Read using a prepared statment, makes use of TradeJDBC class".equals(servletInfo));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservlet = mock(HttpServlet.class);
        pingjdbcread = new PingJDBCRead();
        // Mock the QuoteDataBean object
        QuoteDataBean quoteData = mock(QuoteDataBean.class);
        // Mock the TradeConfig object
        TradeConfig tradeConfig = mock(TradeConfig.class);
        when(tradeConfig.getPrimIterations()).thenReturn(1); // Set the number of iterations to 1 for testing
        // Mock the TradeServices object
        TradeServices tradeServices = mock(TradeServices.class);
        when(tradeServices.getQuote(anyString())).thenReturn(quoteData); // Mock the getQuote method to return the QuoteDataBean object
        // Set the TradeConfig and TradeServices objects in the PingJDBCRead object
        Field tradeConfigField = PingJDBCRead.class.getDeclaredField("tradeConfig");
        tradeConfigField.setAccessible(true);
        tradeConfigField.set(pingjdbcread, tradeConfig);
        Field tradeServicesField = PingJDBCRead.class.getDeclaredField("tradeServices");
        tradeServicesField.setAccessible(true);
        tradeServicesField.set(pingjdbcread, tradeServices);
        // Call the doGet method and verify the expected behavior
        pingjdbcread.doGet(null, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType("text/html");
        verify(httpservletresponse, times(1)).getWriter();
        verify(quoteData, times(1)).toHTML();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void _jspDestroy_Sqiu1() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcread = new PingJDBCRead();
        // Call the init method
        pingjdbcread.init(httpservlet);
        // Assert that hitCount is 0
        assertEquals(0, hitCount);
        // Assert that initTime is not null
        assertNotNull(initTime);
    }

}