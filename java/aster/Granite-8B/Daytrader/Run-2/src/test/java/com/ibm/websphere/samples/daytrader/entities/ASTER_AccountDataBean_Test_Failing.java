/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_jUDr0_8() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getProfile());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_jUDr0_9() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_jUDr0_10() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithCorrectPassword_HJNS0() {
        AccountDataBean account = new AccountDataBean(123, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "123");
        account.login("123");
        assertEquals(1, account.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_EWjO0_1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "1");
        Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_EWjO0_2() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "1");
        Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
        assertTrue(holdings.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithNull_AFsH2() {
        AccountDataBean accountDataBean = null;
        accountDataBean.logout();
        // Add the expected behavior here
        // For example:
        // accountDataBean = new AccountDataBean();
        // accountDataBean.setPassword("password");
        // accountDataBean.setLoginID("loginID");
        // accountDataBean.setEmail("email");
        // accountDataBean.setOpenBalance(100.0);
        // accountDataBean.setAddress("address");
        // accountDataBean.setCreditCard("creditCard");
        // accountDataBean.setOpenBalance(100.0);
        // accountDataBean.setLoginCount(1);
        // accountDataBean.setLogoutCount(1);
        // accountDataBean.setCreationDate(new java.util.Date());
        // accountDataBean.setLastLogin(new java.util.Date());
        // accountDataBean.setLocale("locale");
        // accountDataBean.setPreference("preference");
}

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_IoDc0() {
        AccountDataBean accountDataBean = new AccountDataBean(123, 10, 5, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "12345");
        String expected = "\n\tAccount Data for account: 123 \n\t\t   loginCount:10 \n\t\t  logoutCount:5 \n\t\t    lastLogin: sun.util.calendar.LocalGregorianCalendar@70a64b0 \n\t\t creationDate: sun.util.calendar.LocalGregorianCalendar@2788331 \n\t\t      balance: 100.00 \n\t\t  openBalance: 50.00 \n\t\t    profileID: 12345";
        assertEquals(expected, accountDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetProfileIDEmpty_zVqc2() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setProfileID("");
        assertNull(accountDataBean.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders_tAGp0_1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Collection<OrderDataBean> orders = accountDataBean.getOrders();
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders_tAGp0_2() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Collection<OrderDataBean> orders = accountDataBean.getOrders();
        assertEquals(0, orders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_EWjO0_nMKq0_2() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "1");
        Collection<HoldingDataBean> holdings = accountDataBean.getHoldings();
        assertTrue(!holdings.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID_EyJf0_RNXS0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Integer expectedAccountID = 1;
        Integer actualAccountID = accountDataBean.getAccountID();
        assertNull(expectedAccountID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetLastLoginInvalid_NIuR2_2_fid1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date date = new Date(0);
        accountDataBean.setLastLogin(date);
        assertTrue(accountDataBean.getLastLogin().before(date));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithNull_AFsH2_fid1() {
        AccountDataBean accountDataBean = null;
        accountDataBean.logout();
        assertNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateInvalid_HSJN2_fid1() {
        AccountDataBean account = new AccountDataBean();
        Date creationDate = new Date(-1);
        account.setCreationDate(creationDate);
        assertTrue(account.getCreationDate().before(creationDate));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldings_BznG0_ndKO0_2() {
        AccountDataBean account = new AccountDataBean();
        Collection<HoldingDataBean> holdings = new HashSet<>();
        HoldingDataBean holding1 = new HoldingDataBean();
        HoldingDataBean holding2 = new HoldingDataBean();
        holdings.add(holding1);
        holdings.add(holding2);
        account.setHoldings(holdings);
        assertEquals(2, account.getHoldings().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID_EyJf0_RNXS0_fid1() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Integer expectedAccountID = 1;
        Integer actualAccountID = accountDataBean.getAccountID();
        assertEquals(expectedAccountID, actualAccountID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders_tAGp0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Collection<OrderDataBean> orders = accountDataBean.getOrders();
        assertNotNull(orders);
        assertEquals(0, orders.size());
    }
}