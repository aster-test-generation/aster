/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuoteID1_CRBd0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String quoteID = holdingDataBean.getQuoteID();
        assertNotNull(quoteID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_HNDb0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        QuoteDataBean quoteDataBean = holdingDataBean.getQuote();
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchaseDate_oHcK0() {
        HoldingDataBean holding = new HoldingDataBean();
        Date purchaseDate = holding.getPurchaseDate();
        assertNotNull(purchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_LtIR8() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        String expected = "someString"; // Replace with the expected value
        assertEquals(expected, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchasePrice_jntB0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        BigDecimal expectedPurchasePrice = BigDecimal.ZERO;
        BigDecimal actualPurchasePrice = holdingDataBean.getPurchasePrice();
        assertNull(expectedPurchasePrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToHTML_tzYq0() {
        AccountDataBean account = new AccountDataBean(1, 1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        QuoteDataBean quote = new QuoteDataBean("1", "1", 1, new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), 1);
        HoldingDataBean holding = new HoldingDataBean(1, new BigDecimal(1), new Date(), account, quote);
        String expected = "<BR>Holding Data for holding: 1 </B>" + "<LI>      quantity:1 </LI>" + "<LI> purchasePrice:1 </LI>" + "<LI>  purchaseDate: sun Jan 01 01:00:00 EST 1970 </LI>" + "<LI>       quoteID:1 </LI>";
        String actual = holding.toHTML();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_ykgb0() {
        HoldingDataBean holding = new HoldingDataBean();
        AccountDataBean account = holding.getAccount();
        assertNotNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals1_Uhlc0_fid1() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean();
        HoldingDataBean holdingDataBean2 = new HoldingDataBean();
        boolean result = holdingDataBean1.equals(holdingDataBean2);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_IWLF1_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_JsMI2_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDate_zXTM4() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_LtIR8_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchasePrice_aSGr9() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_BVio10() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchasePrice_jntB0_fid1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        BigDecimal expectedPurchasePrice = BigDecimal.ZERO;
        BigDecimal actualPurchasePrice = holdingDataBean.getPurchasePrice();
        assertEquals(expectedPurchasePrice, actualPurchasePrice);
    }
}