/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Failing {
    private TradeConfigJSF tradeConfigJSF;
    private String result = "";
    private ExternalContext context;
    TradeConfigJSF tradeconfigjsf;
    HttpSession httpsession;
    ExternalContext externalcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRuntimeModeList_voaE0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] runtimeModeList = tradeConfigJSF.getRuntimeModeList();
        String[] expectedRuntimeModeList = {"mode1", "mode2"};
        assertEquals(expectedRuntimeModeList, runtimeModeList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInterval_FwYM0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int result = tradeConfigJSF.getMarketSummaryInterval();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetPrimIterations_MgCF0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int expected = 0;
        int actual = tradeConfigJSF.getPrimIterations();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getMaxUsersTest_fANh0_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int maxUsers = tradeConfigJSF.getMaxUsers();
        assertEquals(100, maxUsers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLongRunDefault_dBuq2_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        boolean result = tradeConfigJSF.isLongRun();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeList_iyLq0_1_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
        assertEquals(1, orderProcessingModeList.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeList_iyLq0_2() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
        assertEquals("NewOrderProcessing", orderProcessingModeList[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxQuotes_EZBS0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int maxQuotes = tradeConfigJSF.getMaxQuotes();
        assertEquals(0, maxQuotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMaxUsersWithNegativeNumber_SUPm2() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.setMaxUsers(-10);
        assertEquals(0, tradeConfigJSF.getMaxUsers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWebInterface_Npou0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String webInterface = tradeConfigJSF.getWebInterface();
        assertEquals("TradeConfigJSF.webInterface", webInterface);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingMode_HBco2() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String orderProcessingMode = tradeConfigJSF.getOrderProcessingMode();
        assertEquals("TradeConfigJSF.orderProcessingMode", orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMaxUsers_IpVl3() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int maxUsers = tradeConfigJSF.getMaxUsers();
        assertEquals(0, maxUsers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResetTrade_fuJv0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.resetTrade();
        assertEquals("Trade Reset completed successfully", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequency_RWhE0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        int actualListQuotePriceChangeFrequency = tradeConfigJSF.getListQuotePriceChangeFrequency();
        int expectedListQuotePriceChangeFrequency = 0;
        assertEquals(expectedListQuotePriceChangeFrequency, actualListQuotePriceChangeFrequency);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeList_iyLq0() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String[] orderProcessingModeList = tradeConfigJSF.getOrderProcessingModeList();
        assertEquals(1, orderProcessingModeList.length);
        assertEquals("NewOrderProcessing", orderProcessingModeList[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildDatabaseTables_LvVG1() {
        String result = tradeConfigJSF.buildDatabaseTables();
        assertEquals("database", result);
    }
}