/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet30Async_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingServlet30Async pingservlet30async;
    HttpServlet httpservlet;
    PingServlet30Async pingServlet30Async;
    HttpServlet httpServlet;
    HttpServletResponse httpServletResponse;
    HttpServletRequest httpServletRequest;
    ServletInputStream servletInputStream;
    ServletOutputStream servletOutputStream;
    private ServletConfig config;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservlet30async = new PingServlet30Async();
        pingservlet30async.init(httpservlet);
        verify(httpservlet, times(1)).init(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_ogFl0() {
        PingServlet30Async servlet = new PingServlet30Async();
        String actual = servlet.getServletInfo();
        String expected = "Basic dynamic HTML generation through a servlet";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        when(httpServletRequest.getInputStream()).thenReturn(servletInputStream);
        pingServlet30Async.doGet(httpServletRequest, httpServletResponse);
        verify(httpServletResponse, times(1)).getOutputStream();
        verify(httpServletRequest, times(1)).getInputStream();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_BVJk0() throws Exception {
        httpServlet = mock(HttpServlet.class);
        httpServletResponse = mock(HttpServletResponse.class);
        httpServletRequest = mock(HttpServletRequest.class);
        servletInputStream = mock(ServletInputStream.class);
        servletOutputStream = mock(ServletOutputStream.class);
        pingServlet30Async = new PingServlet30Async();
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        when(httpServletRequest.getInputStream()).thenReturn(servletInputStream);
        pingServlet30Async.doPost(httpServletRequest, httpServletResponse);
        verify(httpServletResponse, times(1)).setContentType("text/html");
        verify(httpServletRequest, times(1)).startAsync();
        verify(httpServletRequest, times(1)).getInputStream();
        verify(httpServletResponse, times(1)).getOutputStream();
        verify(httpServletResponse, times(1)).getWriter();
        verify(httpServletResponse, times(1)).getWriter().println(anyString());
        verify(httpServletResponse, times(1)).getWriter().close();
        verify(httpServletRequest.startAsync(), times(1)).complete();
    }
}