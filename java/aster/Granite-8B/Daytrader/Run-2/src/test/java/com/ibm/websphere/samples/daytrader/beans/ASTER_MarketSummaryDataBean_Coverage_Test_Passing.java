/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MarketSummaryDataBean_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_hvCX0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(new BigDecimal(0));
    marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
    marketSummaryDataBean.setVolume(0);
    marketSummaryDataBean.setTopGainers(new HashSet<>());
    marketSummaryDataBean.setTopLosers(new HashSet<>());
    String ret = marketSummaryDataBean.toString();
    assertNotNull(ret);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_eMYZ1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(new BigDecimal(0));
    marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
    marketSummaryDataBean.setVolume(0);
    marketSummaryDataBean.setTopGainers(new HashSet<>());
    marketSummaryDataBean.setTopLosers(new HashSet<>());
    String ret = marketSummaryDataBean.toString();
    assertTrue(ret.contains("TSIA:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString3_UFpB2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(new BigDecimal(0));
    marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
    marketSummaryDataBean.setVolume(0);
    marketSummaryDataBean.setTopGainers(new HashSet<>());
    marketSummaryDataBean.setTopLosers(new HashSet<>());
    String ret = marketSummaryDataBean.toString();
    assertTrue(ret.contains("openTSIA:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString4_Jbwp3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(new BigDecimal(0));
    marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
    marketSummaryDataBean.setVolume(0);
    marketSummaryDataBean.setTopGainers(new HashSet<>());
    marketSummaryDataBean.setTopLosers(new HashSet<>());
    String ret = marketSummaryDataBean.toString();
    assertTrue(ret.contains("gain:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString5_PfWC4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(new BigDecimal(0));
    marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
    marketSummaryDataBean.setVolume(0);
    marketSummaryDataBean.setTopGainers(new HashSet<>());
    marketSummaryDataBean.setTopLosers(new HashSet<>());
    String ret = marketSummaryDataBean.toString();
    assertTrue(ret.contains("volume:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString6_eIoa5() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(new BigDecimal(0));
    marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
    marketSummaryDataBean.setVolume(0);
    marketSummaryDataBean.setTopGainers(new HashSet<>());
    marketSummaryDataBean.setTopLosers(new HashSet<>());
    String ret = marketSummaryDataBean.toString();
    assertTrue(ret.contains("Current Top Gainers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString7_ZvJi6() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(new BigDecimal(0));
    marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
    marketSummaryDataBean.setVolume(0);
    marketSummaryDataBean.setTopGainers(new HashSet<>());
    marketSummaryDataBean.setTopLosers(new HashSet<>());
    String ret = marketSummaryDataBean.toString();
    assertTrue(ret.contains("Current Top Losers:"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString8_GMxp7() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTSIA(new BigDecimal(0));
    marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
    marketSummaryDataBean.setVolume(0);
    marketSummaryDataBean.setTopGainers(new HashSet<>());
    marketSummaryDataBean.setTopLosers(new HashSet<>());
    String ret = marketSummaryDataBean.toString();
    assertTrue(ret.contains("iterator"));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTMLWithNullTopLosers_RxAy0() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopLosers(null);
    String actual = marketSummaryDataBean.toHTML();
    String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTMLWithNullTopGainers_ihwQ1() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(null);
    String actual = marketSummaryDataBean.toHTML();
    String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTMLWithEmptyTopLosers_pZeU2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopLosers(new ArrayList<>());
    String actual = marketSummaryDataBean.toHTML();
    String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTMLWithEmptyTopGainers_mIkL3() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    marketSummaryDataBean.setTopGainers(new ArrayList<>());
    String actual = marketSummaryDataBean.toHTML();
    String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToHTMLWithTopLosers_sANC4() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    marketSummaryDataBean.setTopLosers(Collections.singletonList(quoteDataBean));
    String actual = marketSummaryDataBean.toHTML();
    String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>" + "<BR>   Current Top Losers:" + "<LI>" + quoteDataBean.toString() + "</LI>";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToJSON1_Ugtm0() throws Exception {
	MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
	marketSummaryDataBean.setTSIA(new BigDecimal(0));
	marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
	marketSummaryDataBean.setVolume(0);
	marketSummaryDataBean.setTopGainers(new HashSet<QuoteDataBean>());
	marketSummaryDataBean.setTopLosers(new HashSet<QuoteDataBean>());
	marketSummaryDataBean.setSummaryDate(new Date());
	marketSummaryDataBean.toJSON();
}
}