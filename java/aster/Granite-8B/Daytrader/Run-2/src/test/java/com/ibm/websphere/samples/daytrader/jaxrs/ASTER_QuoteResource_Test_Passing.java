/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.jaxrs;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteResource_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost_IbpY0_1() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "symbol1,symbol2";
        List<QuoteDataBean> quotes = quoteResource.quotesPost(symbols);
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPost_IbpY0_2() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "symbol1,symbol2";
        List<QuoteDataBean> quotes = quoteResource.quotesPost(symbols);
        assertTrue(quotes.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPostWithEmptySymbols_MTdc2_1() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "";
        List<QuoteDataBean> quotes = quoteResource.quotesPost(symbols);
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPostWithEmptySymbols_MTdc2_2() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "";
        List<QuoteDataBean> quotes = quoteResource.quotesPost(symbols);
        assertTrue(quotes.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPostWithNullSymbols_JuYy3_1() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = null;
        List<QuoteDataBean> quotes = quoteResource.quotesPost(symbols);
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPostWithNullSymbols_JuYy3_2() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = null;
        List<QuoteDataBean> quotes = quoteResource.quotesPost(symbols);
        assertTrue(quotes.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPostWithEmptySymbols_MTdc2() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "";
        List<QuoteDataBean> quotes = quoteResource.quotesPost(symbols);
        assertNotNull(quotes);
        assertTrue(quotes.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesPostWithNullSymbols_JuYy3() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = null;
        List<QuoteDataBean> quotes = quoteResource.quotesPost(symbols);
        assertNotNull(quotes);
        assertTrue(quotes.isEmpty());
    }
}