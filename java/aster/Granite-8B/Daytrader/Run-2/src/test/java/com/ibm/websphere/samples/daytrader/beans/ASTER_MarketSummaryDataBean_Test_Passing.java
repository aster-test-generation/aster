/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenTSIA_xpTu0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("1234.56"), new BigDecimal("1234.56"), 123.45, null, null);
        BigDecimal openTSIA = marketSummaryDataBean.getOpenTSIA();
        assertEquals(new BigDecimal("1234.56"), openTSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_OvdZ7() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenTSIA_bmYk0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal openTSIA = new BigDecimal(100);
        marketSummaryDataBean.setOpenTSIA(openTSIA);
        assertEquals(openTSIA, marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenTSIAWithNull_OoXS1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setOpenTSIA(null);
        assertNull(marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenTSIAWithZero_kjXH2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal openTSIA = new BigDecimal(0);
        marketSummaryDataBean.setOpenTSIA(openTSIA);
        assertEquals(openTSIA, marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenTSIAWithNegativeValue_rrrR3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal openTSIA = new BigDecimal(-100);
        marketSummaryDataBean.setOpenTSIA(openTSIA);
        assertEquals(openTSIA, marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTSIA_AIow0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal tSIA = new BigDecimal(100);
        marketSummaryDataBean.setTSIA(tSIA);
        assertEquals(tSIA, marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_cwaW0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setVolume(100.0);
        assertEquals(100.0, marketSummaryDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopLosers_IXIr0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Collection<QuoteDataBean> topLosers = new ArrayList<>();
        marketSummaryDataBean.setTopLosers(topLosers);
        assertEquals(topLosers, marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSummaryDate_ADYs0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setSummaryDate(new Date());
        Date summaryDate = marketSummaryDataBean.getSummaryDate();
        assertNotNull(summaryDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSummaryDate_SXOR0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Date summaryDate = new Date();
        marketSummaryDataBean.setSummaryDate(summaryDate);
        assertEquals(summaryDate, marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_iiSf0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("1234567890.12"), new BigDecimal("9876543210.98"), 1234567890.12, null, null);
        marketSummaryDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIA_DKxw0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("90.00"), 1000.0, new ArrayList<>(), new ArrayList<>());
        BigDecimal tSIA = marketSummaryDataBean.getTSIA();
        assertNotNull(tSIA);
        assertEquals(new BigDecimal("100.00"), tSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVolume_Bsep0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1), new BigDecimal(2), 3, null, null);
        double volume = marketSummaryDataBean.getVolume();
        assertEquals(3, volume, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopGainers_ATMh0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Collection<QuoteDataBean> topGainers = new ArrayList<>();
        marketSummaryDataBean.setTopGainers(topGainers);
        assertEquals(topGainers, marketSummaryDataBean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_CEfX0_1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal("100"));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal("50"));
        BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
        assertNotNull(gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent2_PfUd1_1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal("0"));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal("0"));
        BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
        assertNotNull(gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIA_DKxw0_1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("90.00"), 1000.0, new ArrayList<>(), new ArrayList<>());
        BigDecimal tSIA = marketSummaryDataBean.getTSIA();
        assertNotNull(tSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIA_DKxw0_2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("90.00"), 1000.0, new ArrayList<>(), new ArrayList<>());
        BigDecimal tSIA = marketSummaryDataBean.getTSIA();
        assertEquals(new BigDecimal("100.00"), tSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_CEfX0_2_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal("100"));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal("50"));
        BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(gainPercent, new BigDecimal("100.0000"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent2_PfUd1_2_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal("0.00"));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal("0.00"));
        BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(gainPercent, new BigDecimal("0.00"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenTSIA_mCUT0_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal openTSIA = marketSummaryDataBean.getOpenTSIA();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_XuDG3_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        double volume = marketSummaryDataBean.getVolume();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSummaryDate_NLAW6_fid2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Date summaryDate = marketSummaryDataBean.getSummaryDate();
    }
}