/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.math.BigDecimal;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PortfolioJSF_Coverage_Test_Passing {
    private PortfolioJSF portfolioJSF;
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void teardown_BejT1() {
        portfolioJSF = null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHoldingData_SAjE2() {
        HoldingData h = new HoldingData();
        assertNotNull(h);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingID_SHJu3() {
        HoldingData h = new HoldingData();
        h.setHoldingID(1);
        assertEquals(1, h.getHoldingID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_anPX6() {
        HoldingData h = new HoldingData();
        h.setQuantity(100);
        assertEquals(100, h.getQuantity());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_TYId7() {
        HoldingData h = new HoldingData();
        h.setPurchasePrice(new BigDecimal(100.00));
        assertEquals(new BigDecimal(100.00), h.getPurchasePrice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBasis_zHww8() {
        HoldingData h = new HoldingData();
        h.setBasis(new BigDecimal(100.00));
        assertEquals(new BigDecimal(100.00), h.getBasis());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_bgeg9() {
        HoldingData h = new HoldingData();
        h.setGain(new BigDecimal(100.00));
        assertEquals(new BigDecimal(100.00), h.getGain());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValue_OXGf10() {
        HoldingData h = new HoldingData();
        h.setMarketValue(new BigDecimal(100.00));
        assertEquals(new BigDecimal(100.00), h.getMarketValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_iieI11() {
        HoldingData h = new HoldingData();
        h.setPrice(new BigDecimal(100.00));
        assertEquals(new BigDecimal(100.00), h.getPrice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPortfolio_EaqO13() {
        portfolioJSF.getPortfolio();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_Lxms4_vzvb0() {
        HoldingData h = new HoldingData();
        try {
            h.setPurchaseDate(new java.text.SimpleDateFormat("yyyy-MM-dd").parse("2022-01-01"));
        } catch (java.text.ParseException e) {
            e.printStackTrace();
        }
        assertEquals("2022-01-01", h.getPurchaseDate());
    }
}