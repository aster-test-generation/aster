/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Failing {
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;
    private OrderDataBean orderDataBean;
    private String symbol;
    private OrderDataBean orderdatabean;
    private Integer orderID;
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    private BigDecimal price;
    @Mock
    private Log mockLog;
    @Mock
    private HoldingDataBean mockHolding;
    private double quantity;
    private BigDecimal orderFee;
    private String orderType;
    @Mock
    private QuoteDataBean mockQuote;
    private BigDecimal newPrice;
    @Mock
    private OrderDataBean mockOrderDataBean;
    private Date openDate;
    private Date completionDate;
    private String orderStatus;

    /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOrderStatus_0() {
           accountDataBean = mock(AccountDataBean.class);
           quoteDataBean = mock(QuoteDataBean.class);
           holdingDataBean = mock(HoldingDataBean.class);
           orderdatabean = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "TEST");
           when(orderdatabean.getAccount()).thenReturn(accountDataBean);
           when(orderdatabean.getQuote()).thenReturn(quoteDataBean);
           when(orderdatabean.getHolding()).thenReturn(holdingDataBean);
           String orderStatus = orderdatabean.getOrderStatus();
           assertEquals("BUY", orderdatabean.getOrderType());
           assertEquals("OPEN", orderdatabean.getOrderStatus());
           assertNotNull(orderdatabean.getOpenDate());
           assertNotNull(orderdatabean.getCompletionDate());
           assertEquals(100.0, orderdatabean.getQuantity(), 0.0);
           assertEquals(new BigDecimal(100.0), orderdatabean.getPrice());
           assertEquals(new BigDecimal(10.0), orderdatabean.getOrderFee());
           assertEquals("TEST", orderdatabean.getSymbol());
       }
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus() {
           accountDataBean = mock(AccountDataBean.class);
           quoteDataBean = mock(QuoteDataBean.class);
           holdingDataBean = mock(HoldingDataBean.class);
           orderdatabean = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(1.0), "symbol");
           orderdatabean.setOrderStatus("closed");
           assertEquals("closed", orderdatabean.getOrderStatus());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOrderStatus_FIAL0() {
       OrderDataBean order = new OrderDataBean();
       order.setOrderStatus("open");
       assertEquals("open", order.getOrderStatus());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetSymbol() throws Exception {
           orderdatabean = new OrderDataBean();
           quote = mock(QuoteDataBean.class);
           symbol = "TEST_SYMBOL";
           when(quote.getSymbol()).thenReturn(symbol);
           orderdatabean.setQuote(quote);
           assertEquals(symbol, orderdatabean.getSymbol());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol1_cOli0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", null, result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol2_wMTF1() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", null, result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol3_qrvN2() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol1 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol1 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol4_ApPS3() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol2 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol2 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol5_gjIp4() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol3 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol3 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol6_OoWl5() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol4 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol4 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol7_QsJP6() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol5 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol5 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol8_bZrz7() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol6 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol6 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol9_HhAZ8() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol7 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol7 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol10_GJEE9() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol8 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol8 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol11_rYYw10() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol9 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol9 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol12_QRBT11() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol10 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol10 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol13_Gtlb12() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol11 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol11 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetOrderID() {
           orderID = 123;
           when(orderdatabean.getOrderID()).thenReturn(orderID);
           assertEquals(orderID, orderdatabean.getOrderID());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testGetOrderID_OsiZ0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Integer orderID = orderDataBean.getOrderID();
           assertNotNull(orderID);
       }
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testisOpen() {
           accountDataBean = new AccountDataBean();
           quoteDataBean = new QuoteDataBean();
           holdingDataBean = new HoldingDataBean();
           orderdatabean = new OrderDataBean("open", "open", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), "symbol", accountDataBean, quoteDataBean, holdingDataBean);
           assertTrue(orderdatabean.isOpen());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen1_TXnH0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("open");
       boolean result = orderDataBean.isOpen();
       assertTrue(result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen2_KwAO1() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("processing");
       boolean result = orderDataBean.isOpen();
       assertTrue(result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen3_uGBu2() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("closed");
       boolean result = orderDataBean.isOpen();
       assertFalse(result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToString() {
           accountDataBean = mock(AccountDataBean.class);
           quoteDataBean = mock(QuoteDataBean.class);
           holdingDataBean = mock(HoldingDataBean.class);
           orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "symbol");
           String toStringResult = orderDataBean.toString();
           assertEquals("Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + new Date() + "\n\t completionDate: " + new Date() + "\n\t       quantity: 100.0\n\t          price: 10.00\n\t       orderFee: 1.00\n\t         symbol: symbol", toStringResult);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToString_fyzZ0() {
           OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "symbol");
           String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.00\n\t       orderFee: 1.00\n\t         symbol: symbol";
           assertEquals(expected, order.toString());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetAccount() throws Exception {
           account = mock(AccountDataBean.class);
           orderdatabean = new OrderDataBean();
           orderdatabean.setAccount(account);
           verify(account, times(1)).setOrders(any(Collection.class));
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetAccount_bYfG0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       AccountDataBean accountDataBean = new AccountDataBean();
       orderDataBean.setAccount(accountDataBean);
       assertNotNull(orderDataBean.getAccount());
       assertEquals(accountDataBean, orderDataBean.getAccount());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderFee() throws Exception {
           orderdatabean = new OrderDataBean();
           orderdatabean.setOrderFee(orderFee);
           // Mock the AccountDataBean, QuoteDataBean, and HoldingDataBean objects
           when(account.getProfileID()).thenReturn("profileID");
           when(quote.getSymbol()).thenReturn("symbol");
           when(holding.getQuantity()).thenReturn(100.0);
           // Set the account, quote, and holding objects on the orderdatabean
           orderdatabean.setAccount(account);
           orderdatabean.setQuote(quote);
           orderdatabean.setHolding(holding);
           // Set the orderFee to a new value
           BigDecimal newOrderFee = new BigDecimal(100.0);
           orderdatabean.setOrderFee(newOrderFee);
           // Assert that the orderFee has been updated
           assertEquals(newOrderFee, orderdatabean.getOrderFee());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOrderFee_BSic0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = new BigDecimal(100.0);
       orderDataBean.setOrderFee(orderFee);
       assertEquals(orderFee, orderDataBean.getOrderFee());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetOpenDate() {
           openDate = new Date();
           when(orderdatabean.getOpenDate()).thenReturn(openDate);
           assertEquals(openDate, orderdatabean.getOpenDate());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testgetOpenDate_VxKC0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Date openDate = orderDataBean.getOpenDate();
           assertNotNull(openDate);
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOpenDate() throws Exception {
           orderdatabean = new OrderDataBean();
           openDate = new Date();
           orderdatabean.setOpenDate(openDate);
           assertEquals(openDate, orderdatabean.getOpenDate());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOpenDate_zAPY0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       Date openDate = new Date();
       orderDataBean.setOpenDate(openDate);
       assertEquals(openDate, orderDataBean.getOpenDate());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetHolding() throws Exception {
           holding = mock(HoldingDataBean.class);
           orderdatabean = new OrderDataBean();
           orderdatabean.setHolding(holding);
           verify(holding, times(1)).setOrder(any());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetHolding_nTcR0() {
           OrderDataBean order = new OrderDataBean();
           HoldingDataBean holding = new HoldingDataBean();
           order.setHolding(holding);
           assertNotNull(order.getHolding());
           assertEquals(holding, order.getHolding());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetCompletionDate() throws Exception{
           orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
           assertEquals(orderdatabean.getCompletionDate(), new Date());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void test_WJOL0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Date completionDate = orderDataBean.getCompletionDate();
           assertNull(completionDate);
       }
       private String orderType; /* orderType (buy, sell, etc.) */
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getPrice()).thenReturn(new BigDecimal("10.00"));
        assertEquals(new BigDecimal("10.00"), orderDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getHolding()).thenReturn(holdingDataBean);
        assertEquals(holdingDataBean, orderDataBean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getQuantity()).thenReturn(100.0);
        assertEquals(100.0, orderDataBean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getOrderFee()).thenReturn(new BigDecimal("1.00"));
        assertEquals(new BigDecimal("1.00"), orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getQuote()).thenReturn(quoteDataBean);
        assertEquals(quoteDataBean, orderDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getOrderStatus()).thenReturn("open");
        assertEquals("open", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getSymbol()).thenReturn("ABC");
        assertEquals("ABC", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getOrderID()).thenReturn(123);
        assertEquals(123, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDate() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getOpenDate()).thenReturn(new Date());
        assertEquals(new Date(), orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompletionDate() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getCompletionDate()).thenReturn(new Date());
        assertEquals(new Date(), orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderType() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getOrderType()).thenReturn("buy");
        assertEquals("buy", orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(orderDataBean.getAccount()).thenReturn(accountDataBean);
        assertEquals(accountDataBean, orderDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_1() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(accountDataBean.getAccountID()).thenReturn(123);
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(holdingDataBean.getPurchasePrice()).thenReturn(new BigDecimal("10.00"));
        when(holdingDataBean.getQuantity()).thenReturn(100.0);
        when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
        when(holdingDataBean.getAccount()).thenReturn(accountDataBean);
        when(holdingDataBean.getQuote()).thenReturn(quoteDataBean);
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertEquals(123, randomInstance.getAccount().getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_2() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(accountDataBean.getAccountID()).thenReturn(123);
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(holdingDataBean.getPurchasePrice()).thenReturn(new BigDecimal("10.00"));
        when(holdingDataBean.getQuantity()).thenReturn(100.0);
        when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
        when(holdingDataBean.getAccount()).thenReturn(accountDataBean);
        when(holdingDataBean.getQuote()).thenReturn(quoteDataBean);
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertEquals("ABC", randomInstance.getQuote().getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_3() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(accountDataBean.getAccountID()).thenReturn(123);
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(holdingDataBean.getPurchasePrice()).thenReturn(new BigDecimal("10.00"));
        when(holdingDataBean.getQuantity()).thenReturn(100.0);
        when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
        when(holdingDataBean.getAccount()).thenReturn(accountDataBean);
        when(holdingDataBean.getQuote()).thenReturn(quoteDataBean);
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertEquals(new BigDecimal("10.00"), randomInstance.getHolding().getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_4() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(accountDataBean.getAccountID()).thenReturn(123);
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(holdingDataBean.getPurchasePrice()).thenReturn(new BigDecimal("10.00"));
        when(holdingDataBean.getQuantity()).thenReturn(100.0);
        when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
        when(holdingDataBean.getAccount()).thenReturn(accountDataBean);
        when(holdingDataBean.getQuote()).thenReturn(quoteDataBean);
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertEquals(100.0, randomInstance.getHolding().getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_5() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(accountDataBean.getAccountID()).thenReturn(123);
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(holdingDataBean.getPurchasePrice()).thenReturn(new BigDecimal("10.00"));
        when(holdingDataBean.getQuantity()).thenReturn(100.0);
        when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
        when(holdingDataBean.getAccount()).thenReturn(accountDataBean);
        when(holdingDataBean.getQuote()).thenReturn(quoteDataBean);
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertEquals(new Date(), randomInstance.getHolding().getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_6() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(accountDataBean.getAccountID()).thenReturn(123);
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(holdingDataBean.getPurchasePrice()).thenReturn(new BigDecimal("10.00"));
        when(holdingDataBean.getQuantity()).thenReturn(100.0);
        when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
        when(holdingDataBean.getAccount()).thenReturn(accountDataBean);
        when(holdingDataBean.getQuote()).thenReturn(quoteDataBean);
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertEquals(accountDataBean, randomInstance.getHolding().getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_7() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(accountDataBean.getAccountID()).thenReturn(123);
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(holdingDataBean.getPurchasePrice()).thenReturn(new BigDecimal("10.00"));
        when(holdingDataBean.getQuantity()).thenReturn(100.0);
        when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
        when(holdingDataBean.getAccount()).thenReturn(accountDataBean);
        when(holdingDataBean.getQuote()).thenReturn(quoteDataBean);
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertEquals(quoteDataBean, randomInstance.getHolding().getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPriceTest_bDxb1_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal price = orderDataBean.getPrice();
        assertNotNull(price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPriceTest_bDxb1_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal price = orderDataBean.getPrice();
        assertTrue(price.compareTo(BigDecimal.ZERO) >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getHoldingTest_xouC2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderFeeTest_sRjp4_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal orderFee = orderDataBean.getOrderFee();
        assertNotNull(orderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderFeeTest_sRjp4_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal orderFee = orderDataBean.getOrderFee();
        assertTrue(orderFee.compareTo(BigDecimal.ZERO) >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuoteTest_kpjD5() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = orderDataBean.getQuote();
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderStatusTest_afAP6() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String orderStatus = orderDataBean.getOrderStatus();
        assertNotNull(orderStatus);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getSymbolTest_HHYc7() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String symbol = orderDataBean.getSymbol();
        assertNotNull(symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderIDTest_UTnD8() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer orderID = orderDataBean.getOrderID();
        assertNotNull(orderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOpenDateTest_pXre9() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Date openDate = orderDataBean.getOpenDate();
        assertNotNull(openDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCompletionDateTest_RaAj10() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Date completionDate = orderDataBean.getCompletionDate();
        assertNotNull(completionDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderTypeTest_NdNk11() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String orderType = orderDataBean.getOrderType();
        assertNotNull(orderType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAccountTest_ajZY12() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = orderDataBean.getAccount();
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        orderdatabean = new OrderDataBean(orderID, "orderType", "orderStatus", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "symbol");
        orderdatabean.setAccount(account);
        orderdatabean.setQuote(quote);
        orderdatabean.setHolding(holding);
        int expectedHashCode = 17;
        expectedHashCode = 31 * expectedHashCode + (orderID != null ? orderID.hashCode() : 527);
        assertEquals(expectedHashCode, orderdatabean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint() {
        MockitoAnnotations.openMocks(this);
        orderDataBean.print();
        verify(mockLog).log(anyString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding() throws Exception {
        orderdatabean = new OrderDataBean();
        holding = new HoldingDataBean();
        when(orderdatabean.getHolding()).thenReturn(mockHolding);
        assertEquals(mockHolding, orderdatabean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_Uzys0() {
        OrderDataBean order = new OrderDataBean();
        HoldingDataBean holding = order.getHolding();
        assertNotNull(holding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity() {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.01"), "symbol");
        when(orderdatabean.getQuantity()).thenReturn(100.0);
        assertEquals(100.0, orderdatabean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote() {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        orderdatabean.setQuote(quote);
        verify(orderdatabean, times(1)).setQuote(quote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity() {
        orderdatabean = new OrderDataBean();
        // Set up the expected behavior of the setQuantity method
        doNothing().when(orderdatabean).setQuantity(anyDouble());
        // Call the method being tested
        orderdatabean.setQuantity(10.0);
        // Verify that the method was called with the expected arguments
        verify(orderdatabean, times(1)).setQuantity(10.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderID_NtGP0() {
        orderID = 123;
        when(orderdatabean.getOrderID()).thenReturn(orderID);
        assertEquals((Integer) orderID, orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenDate_IhNL0() {
        openDate = new Date();
        when(orderdatabean.getOpenDate()).thenReturn(openDate);
        assertEquals(openDate, orderdatabean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee_CdCI0() {
        orderDataBean = new OrderDataBean();
        orderFee = BigDecimal.valueOf(10.0);
        when(orderDataBean.getHolding()).thenReturn(holdingDataBean);
        when(holdingDataBean.getPurchasePrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(orderDataBean.getQuantity()).thenReturn(10.0);
        when(orderDataBean.getAccount()).thenReturn(accountDataBean);
        when(accountDataBean.getProfileID()).thenReturn("123");
        when(orderDataBean.getQuote()).thenReturn(quoteDataBean);
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        BigDecimal expectedOrderFee = BigDecimal.valueOf(10.0).multiply(BigDecimal.valueOf(100.0)).divide(BigDecimal.valueOf(100.0));
        BigDecimal actualOrderFee = orderDataBean.getOrderFee();
        assertEquals(expectedOrderFee, actualOrderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_BwgB0() {
        orderdatabean = new OrderDataBean();
        doNothing().when(orderdatabean).setQuantity(anyDouble());
        orderdatabean.setQuantity(10.0);
        verify(orderdatabean, times(1)).setQuantity(anyDouble());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance() {
        orderDataBean = new OrderDataBean(123, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "ABC");
        when(accountDataBean.getAccountID()).thenReturn(123);
        when(quoteDataBean.getSymbol()).thenReturn("ABC");
        when(holdingDataBean.getPurchasePrice()).thenReturn(new BigDecimal("10.00"));
        when(holdingDataBean.getQuantity()).thenReturn(100.0);
        when(holdingDataBean.getPurchaseDate()).thenReturn(new Date());
        when(holdingDataBean.getAccount()).thenReturn(accountDataBean);
        when(holdingDataBean.getQuote()).thenReturn(quoteDataBean);
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertEquals(123, randomInstance.getAccount().getAccountID());
        assertEquals("ABC", randomInstance.getQuote().getSymbol());
        assertEquals(new BigDecimal("10.00"), randomInstance.getHolding().getPurchasePrice());
        assertEquals(100.0, randomInstance.getHolding().getQuantity());
        assertEquals(new Date(), randomInstance.getHolding().getPurchaseDate());
        assertEquals(accountDataBean, randomInstance.getHolding().getAccount());
        assertEquals(quoteDataBean, randomInstance.getHolding().getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPriceTest_bDxb1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal price = orderDataBean.getPrice();
        assertNotNull(price);
        assertTrue(price.compareTo(BigDecimal.ZERO) >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_gCwM3_fid1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        double quantity = orderDataBean.getQuantity();
        assertTrue(quantity > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOrderFeeTest_sRjp4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal orderFee = orderDataBean.getOrderFee();
        assertNotNull(orderFee);
        assertTrue(orderFee.compareTo(BigDecimal.ZERO) >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_fid1() {
        orderdatabean = new OrderDataBean(orderID, "orderType", "orderStatus", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "symbol");
        orderdatabean.setAccount(account);
        orderdatabean.setQuote(quote);
        orderdatabean.setHolding(holding);
        int expectedHashCode = 17;
        expectedHashCode = 31 * expectedHashCode + (orderID != null ? orderID.hashCode() : 0);
        assertEquals(expectedHashCode, orderdatabean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOrderType_BtNf3_fid1() {
        OrderDataBean order1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        OrderDataBean order2 = new OrderDataBean(1, "type2", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        assertFalse(order1.equals(order2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOrderStatus_cRuN4_fid1() {
        OrderDataBean order1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        OrderDataBean order2 = new OrderDataBean(1, "type1", "status2", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        assertFalse(order1.equals(order2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOpenDate_ZtjD5_fid1() {
        OrderDataBean order1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        OrderDataBean order2 = new OrderDataBean(1, "type1", "status1", new Date(System.currentTimeMillis() + 1000), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        assertFalse(order1.equals(order2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentCompletionDate_xBxa6_fid1() {
        OrderDataBean order1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        OrderDataBean order2 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(System.currentTimeMillis() + 1000), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        assertFalse(order1.equals(order2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_1_fid2() throws Exception {
        orderdatabean = new OrderDataBean();
        price = BigDecimal.valueOf(100.0);
        newPrice = BigDecimal.valueOf(200.0);
        orderdatabean.setPrice(price);
        orderdatabean.setPrice(newPrice);
        assertEquals(price, orderdatabean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol1_cOli0_MWdA0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol2_wMTF1_vpRw0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol3_qrvN2_zITl0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol1 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", " symbol1 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol4_ApPS3_hxxm0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol2 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", " symbol2 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol5_gjIp4_xvsl0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol3 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", " symbol3 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol6_OoWl5_AgsK0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol4 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", " symbol4 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol7_QsJP6_XEdR0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol5 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", " symbol5 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol8_bZrz7_jCzh0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol6 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", " symbol6 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol9_HhAZ8_wRzf0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol7 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", " symbol7 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol10_GJEE9_eHaI0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol8 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", " symbol8 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol11_rYYw10_dwsQ0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol9 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", " symbol9 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol12_QRBT11_pAxY0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol10 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", " symbol10 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol13_Gtlb12_wzum0_fid2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol11 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals("getSymbol failed", " symbol11 ", result);
    }
}