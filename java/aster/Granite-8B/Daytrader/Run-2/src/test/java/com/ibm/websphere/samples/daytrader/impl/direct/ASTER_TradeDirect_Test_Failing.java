/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
    TradeDirect tradedirect;
    Connection connection;
    DataSource datasource;
    Statement stmt;
    private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
    private static Integer marketSummaryLock = new Integer(0);
    private static long nextMarketSummary = System.currentTimeMillis();
    PreparedStatement preparedstatement;
    ResultSet resultset;
    private static String getAllQuotesSQL = "select * from quoteejb q";
    private boolean inSession = false;
    @Mock
    OrderDataBean orderData;
    private static final String USER_ID = "user123";
    private static final int MAX_ORDERS = 5;
    @Mock
    private TradeDirect tradeDirect;
    @Mock
    private PreparedStatement preparedStatement;
    @Mock
    private ResultSet resultSet;
    @Mock
    private DataSource dataSource;
    private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    AccountDataBean accountDataBean;
    @Mock
    AccountProfileDataBean accountProfileDataBean;
    private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
    private  UserTransaction txn;
    @Mock
    private QuoteDataBean quoteData;
    Statement statement;
    private static final String GET_CLOSED_ORDERS_SQL = "(select a.accountid from accountejb a where a.profile_userid = ?)";
    private ManagedExecutorService mes;
    private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
    private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
    private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
    private static BigDecimal ZERO = new BigDecimal(0.0);
    private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
    private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testrecreateDBTables() throws Exception {
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        stmt = mock(Statement.class);
        tradedirect = new TradeDirect();
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.createStatement()).thenReturn(stmt);
        Object[] sqlBuffer = new Object[1];
        sqlBuffer[0] = "CREATE TABLE ..."; // Replace with actual SQL command
        java.io.PrintWriter out = mock(java.io.PrintWriter.class);
        boolean success = tradedirect.recreateDBTables(sqlBuffer, out);
        verify(stmt, times(1)).executeUpdate((String) sqlBuffer[0]);
        verify(connection, times(1)).commit();
        assertTrue(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_okxK0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_aOqT1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummaryInternal();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_ZZQi0() {
        TradeDirect tradeDirect = new TradeDirect();
        double rnd1 = 0.5;
        double rnd2 = 0.7;
        double expectedReturn = rnd1 * rnd2;
        double actualReturn = tradeDirect.investmentReturn(rnd1, rnd2);
        assertEquals(expectedReturn, actualReturn, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAllQuotesTest1_NWdi0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAllQuotesTest1_NWdi0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
        assertTrue(quotes.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_QoOR0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        OrderDataBean result = tradeDirect.completeOrder(orderID, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_QoOR0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        OrderDataBean result = tradeDirect.completeOrder(orderID, false);
        assertEquals(orderID, result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_OIoq0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_OIoq0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_OIoq0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_OIoq0_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getPrice(), result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_OIoq0_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_OIoq0_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getLow(), result.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_OIoq0_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_OIoq0_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_OIoq0_9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder1_HUEt0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_VcsH1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 2;
        boolean twoPhase = false;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_QqzP2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = 3;
        boolean twoPhase = true;
        tradeDirect.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_ktbO0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertNotNull(accountData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_Jfxh0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertEquals(1, accountData.getAccountID().intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_Jfxh0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertEquals(0, accountData.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_Jfxh0_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertEquals(0, accountData.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_Jfxh0_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertNotNull(accountData.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_Jfxh0_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertNotNull(accountData.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_Jfxh0_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertEquals(new BigDecimal(0), accountData.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_Jfxh0_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertEquals(new BigDecimal(0), accountData.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_Jfxh0_9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertNotNull(accountData.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_jrTe0() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_iLJG0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user123";
        tradeDirect.logout(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsync_wwsp0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Future<OrderDataBean> future = tradeDirect.completeOrderAsync(123, true);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithTwoPhaseFalse_guNe1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Future<OrderDataBean> future = tradeDirect.completeOrderAsync(456, false);
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder_bWtR0() {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = 100.0;
        try {
            OrderDataBean orderData = tradeDirect.createOrder(accountData, quoteData, holdingData, orderType, quantity);
            assertNotNull(orderData);
            assertEquals(orderType, orderData.getOrderType());
            assertEquals(quantity, orderData.getQuantity(), 0.0001);
            assertEquals("open", orderData.getOrderStatus());
        } catch (Exception e) {
            fail("Exception occurred while creating order: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithNullHolding_sAiz1() {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = null;
        String orderType = "BUY";
        double quantity = 100.0;
        try {
            OrderDataBean orderData = tradeDirect.createOrder(accountData, quoteData, holdingData, orderType, quantity);
            assertNotNull(orderData);
            assertEquals(orderType, orderData.getOrderType());
            assertEquals(quantity, orderData.getQuantity(), 0.0001);
            assertEquals("open", orderData.getOrderStatus());
        } catch (Exception e) {
            fail("Exception occurred while creating order: " + e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithInvalidQuantity_WMaG2() {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = -100.0;
        try {
            tradeDirect.createOrder(accountData, quoteData, holdingData, orderType, quantity);
            fail("Exception expected for invalid quantity");
        } catch (Exception e) {
            assertEquals("Quantity must be greater than zero", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_BUWd0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_BUWd0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_DhWU0_1() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_DhWU0_2() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getSymbol(), updatedQuoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_DhWU0_3() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getCompanyName(), updatedQuoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_DhWU0_4() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getPrice(), updatedQuoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_DhWU0_5() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getOpen(), updatedQuoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_DhWU0_6() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getLow(), updatedQuoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_DhWU0_7() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getHigh(), updatedQuoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_DhWU0_8() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getVolume() + sharesTraded, updatedQuoteData.getVolume(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_DhWU0_9() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getChange(), updatedQuoteData.getChange(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_DPLM1_1() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_DPLM1_2() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getSymbol(), updatedQuoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_DPLM1_3() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getCompanyName(), updatedQuoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_DPLM1_4() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getPrice(), updatedQuoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_DPLM1_5() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getOpen(), updatedQuoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_DPLM1_6() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getLow(), updatedQuoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_DPLM1_7() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getHigh(), updatedQuoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_DPLM1_8() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getVolume(), updatedQuoteData.getVolume(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_DPLM1_9() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getChange(), updatedQuoteData.getChange(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeSharesTraded_tNgT2_1() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeSharesTraded_tNgT2_2() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getSymbol(), updatedQuoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeSharesTraded_tNgT2_3() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getCompanyName(), updatedQuoteData.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeSharesTraded_tNgT2_4() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getPrice(), updatedQuoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeSharesTraded_tNgT2_5() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getOpen(), updatedQuoteData.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeSharesTraded_tNgT2_6() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getLow(), updatedQuoteData.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeSharesTraded_tNgT2_7() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getHigh(), updatedQuoteData.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeSharesTraded_tNgT2_8() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getVolume(), updatedQuoteData.getVolume(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeSharesTraded_tNgT2_9() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteData.getChange(), updatedQuoteData.getChange(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_ZFfs0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() < 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_KUHD0() {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        String password = accountDataBean.getProfileID();
        try {
            AccountDataBean returnedAccountDataBean = tradeDirect.login(userID, password);
            assertNotNull(returnedAccountDataBean);
            assertEquals(accountDataBean.getProfileID(), returnedAccountDataBean.getProfileID());
            assertEquals(accountDataBean.getCreationDate(), returnedAccountDataBean.getCreationDate());
            assertEquals(accountDataBean.getLastLogin(), returnedAccountDataBean.getLastLogin());
            assertEquals(accountDataBean.getLoginCount(), returnedAccountDataBean.getLoginCount());
            assertEquals(accountDataBean.getLogoutCount(), returnedAccountDataBean.getLogoutCount());
            assertEquals(accountDataBean.getOpenBalance(), returnedAccountDataBean.getOpenBalance());
            assertEquals(accountDataBean.getBalance(), returnedAccountDataBean.getBalance());
        } catch (Exception e) {
            fail(e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidPassword_VbZL2() {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        String password = "invalidPassword";
        try {
            tradeDirect.login(userID, password);
            fail("Expected Exception for invalid password");
        } catch (Exception e) {
            assertTrue(e instanceof Exception);
            assertEquals("TradeDirect:Login failure for user: invalidUserID\n\tIncorrect password-->invalidUserID:invalidPassword", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_imCr0_1() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_imCr0_2() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_imCr0_3() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_imCr0_4() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_imCr0_5() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_imCr0_6() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_ISLT0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileDataBean = tradeDirect.getAccountProfileData("user1");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_YGFY0_1() throws Exception {
        MarketSummaryDataBean marketSummaryData = new TradeDirect().getMarketSummaryInternal();
        BigDecimal openTSIA = marketSummaryData.getOpenTSIA();
        BigDecimal TSIA = marketSummaryData.getTSIA();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(marketSummaryData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_YGFY0_2() throws Exception {
        MarketSummaryDataBean marketSummaryData = new TradeDirect().getMarketSummaryInternal();
        BigDecimal openTSIA = marketSummaryData.getOpenTSIA();
        BigDecimal TSIA = marketSummaryData.getTSIA();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(openTSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_YGFY0_3() throws Exception {
        MarketSummaryDataBean marketSummaryData = new TradeDirect().getMarketSummaryInternal();
        BigDecimal openTSIA = marketSummaryData.getOpenTSIA();
        BigDecimal TSIA = marketSummaryData.getTSIA();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(TSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_YGFY0_4() throws Exception {
        MarketSummaryDataBean marketSummaryData = new TradeDirect().getMarketSummaryInternal();
        BigDecimal openTSIA = marketSummaryData.getOpenTSIA();
        BigDecimal TSIA = marketSummaryData.getTSIA();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertTrue(volume >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_YGFY0_5() throws Exception {
        MarketSummaryDataBean marketSummaryData = new TradeDirect().getMarketSummaryInternal();
        BigDecimal openTSIA = marketSummaryData.getOpenTSIA();
        BigDecimal TSIA = marketSummaryData.getTSIA();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(topGainersData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_YGFY0_6() throws Exception {
        MarketSummaryDataBean marketSummaryData = new TradeDirect().getMarketSummaryInternal();
        BigDecimal openTSIA = marketSummaryData.getOpenTSIA();
        BigDecimal TSIA = marketSummaryData.getTSIA();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertTrue(topGainersData.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_YGFY0_7() throws Exception {
        MarketSummaryDataBean marketSummaryData = new TradeDirect().getMarketSummaryInternal();
        BigDecimal openTSIA = marketSummaryData.getOpenTSIA();
        BigDecimal TSIA = marketSummaryData.getTSIA();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(topLosersData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_YGFY0_8() throws Exception {
        MarketSummaryDataBean marketSummaryData = new TradeDirect().getMarketSummaryInternal();
        BigDecimal openTSIA = marketSummaryData.getOpenTSIA();
        BigDecimal TSIA = marketSummaryData.getTSIA();
        double volume = marketSummaryData.getVolume();
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertTrue(topLosersData.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_LoNP0_eJwR0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_LoNP0_eJwR0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertTrue(holdingData.getQuantity() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_LoNP0_eJwR0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertTrue(holdingData.getPurchasePrice().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_RNCR0_nhah0() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = null;
        try {
            quoteDataBean = tradeDirect.getQuote("symbol");
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_vUHf0_KwoQ0() {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        QuoteDataBean updatedQuote = null;
        try {
            updatedQuote = tradeDirect.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(updatedQuote);
        assertEquals(quoteDataBean.getCompanyName(), updatedQuote.getCompanyName());
        assertEquals(quoteDataBean.getPrice().multiply(changeFactor), updatedQuote.getPrice());
        assertTrue(updatedQuote.getOpen().compareTo(quoteDataBean.getPrice().multiply(changeFactor)) == 0);
        assertTrue(updatedQuote.getLow().compareTo(quoteDataBean.getPrice().multiply(changeFactor)) == 0);
        assertTrue(updatedQuote.getHigh().compareTo(quoteDataBean.getPrice().multiply(changeFactor)) == 0);
        assertEquals(quoteDataBean.getSymbol(), updatedQuote.getSymbol());
        assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuote.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_lIKJ0_blCc0() {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("123");
        profileData.setPassword("password");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = null;
        try {
            updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(updatedProfileData);
        assertEquals("123", updatedProfileData.getUserID());
        assertEquals("password", updatedProfileData.getPassword());
        assertEquals("John Doe", updatedProfileData.getFullName());
        assertEquals("123 Main St", updatedProfileData.getAddress());
        assertEquals("johndoe@example.com", updatedProfileData.getEmail());
        assertEquals("1234567890123456", updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1GetClosedOrders_kbGe0_vDmw0() {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user1";
        Collection<OrderDataBean> orderDataBeans = null;
        try {
            orderDataBeans = tradeDirect.getClosedOrders(userID);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(orderDataBeans);
        assertTrue(orderDataBeans.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables_bXjJ0_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Object[] sqlBuffer = new Object[10]; // Replace with actual SQL buffer
        java.io.PrintWriter out = new java.io.PrintWriter(System.out); // Replace with actual PrintWriter
        boolean success = tradeDirect.recreateDBTables(sqlBuffer, out);
        assertTrue(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderWithNullOrderID_IKgv1_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = null;
        Exception exception = null;
        try {
            tradeDirect.completeOrder(orderID, false);
        } catch (Exception e) {
            exception = e;
        }
        assertNotNull(exception);
        assertTrue(exception instanceof IllegalArgumentException);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderWithNegativeOrderID_zGvE2_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Integer orderID = -1;
        Exception exception = null;
        try {
            tradeDirect.completeOrder(orderID, false);
        } catch (Exception e) {
            exception = e;
        }
        assertNotNull(exception);
        assertTrue(exception instanceof IllegalArgumentException);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithInvalidQuantity_WMaG2_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = new AccountDataBean();
        QuoteDataBean quoteData = new QuoteDataBean();
        HoldingDataBean holdingData = new HoldingDataBean();
        String orderType = "BUY";
        double quantity = -100.0;
        try {
            tradeDirect.createOrder(accountData, quoteData, holdingData, orderType, quantity);
            fail("Exception expected for invalid quantity");
        } catch (Exception e) {
            assertTrue(e instanceof IllegalArgumentException);
            assertEquals("Quantity must be greater than zero", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt2_YLRY1_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() < 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt3_whTU2_fid1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() < 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getPrice(), result.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt4_KlEt3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() < 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidUserID_kuwc1() {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "invalidUserID";
        String password = "password";
        try {
            tradeDirect.login(userID, password);
            fail("Expected Exception for invalid userID");
        } catch (Exception e) {
            assertTrue(e instanceof Exception);
            assertEquals("Cannot find account for invalidUserID", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNullUserID_AXGO3_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = null;
        String password = "password";
        try {
            tradeDirect.login(userID, password);
            fail("Expected Exception for null userID");
        } catch (Exception e) {
            assertTrue(e instanceof Exception);
            assertEquals("TradeDirect:Login failure for user: null\n\tIncorrect password-->null:password", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNullPassword_qGcK4_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "userID";
        String password = null;
        try {
            tradeDirect.login(userID, password);
            fail("Expected Exception for null password");
        } catch (Exception e) {
            assertTrue(e instanceof Exception);
            assertEquals("TradeDirect:Login failure for user: userID\n\tIncorrect password-->userID:null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetConnPublic_NelN0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = tradeDirect.getConnPublic();
        assertNotNull(conn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_yncE0_fid1() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.cancelOrder(1, true);
        } catch (Exception e) {
            assertTrue(false);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getAllQuotesTest1_NWdi0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<QuoteDataBean> quotes = tradeDirect.getAllQuotes();
        assertNotNull(quotes);
        assertTrue(quotes.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder_QoOR0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        Integer orderID = orderDataBean.getOrderID();
        OrderDataBean result = tradeDirect.completeOrder(orderID, false);
        assertNotNull(result);
        assertEquals(orderID, result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_OIoq0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal price = quoteDataBean.getPrice();
        QuoteDataBean result = tradeDirect.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), price);
        assertNotNull(result);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
        assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), result.getPrice());
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
        assertEquals(quoteDataBean.getLow(), result.getLow());
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.0001);
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
        assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_Jfxh0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertNotNull(accountData);
        assertEquals(1, accountData.getAccountID().intValue());
        assertEquals(0, accountData.getLoginCount());
        assertEquals(0, accountData.getLogoutCount());
        assertNotNull(accountData.getCreationDate());
        assertNotNull(accountData.getLastLogin());
        assertEquals(new BigDecimal(0), accountData.getBalance());
        assertEquals(new BigDecimal(0), accountData.getOpenBalance());
        assertNotNull(accountData.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_BUWd0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ONE;
        double sharesTraded = 100.0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(result);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_DhWU0() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
        assertEquals(quoteData.getSymbol(), updatedQuoteData.getSymbol());
        assertEquals(quoteData.getCompanyName(), updatedQuoteData.getCompanyName());
        assertEquals(quoteData.getPrice(), updatedQuoteData.getPrice());
        assertEquals(quoteData.getOpen(), updatedQuoteData.getOpen());
        assertEquals(quoteData.getLow(), updatedQuoteData.getLow());
        assertEquals(quoteData.getHigh(), updatedQuoteData.getHigh());
        assertEquals(quoteData.getVolume() + sharesTraded, updatedQuoteData.getVolume(), 0.0001);
        assertEquals(quoteData.getChange(), updatedQuoteData.getChange(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_DPLM1() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
        assertEquals(quoteData.getSymbol(), updatedQuoteData.getSymbol());
        assertEquals(quoteData.getCompanyName(), updatedQuoteData.getCompanyName());
        assertEquals(quoteData.getPrice(), updatedQuoteData.getPrice());
        assertEquals(quoteData.getOpen(), updatedQuoteData.getOpen());
        assertEquals(quoteData.getLow(), updatedQuoteData.getLow());
        assertEquals(quoteData.getHigh(), updatedQuoteData.getHigh());
        assertEquals(quoteData.getVolume(), updatedQuoteData.getVolume(), 0.0001);
        assertEquals(quoteData.getChange(), updatedQuoteData.getChange(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeSharesTraded_tNgT2() throws Exception {
        TradeDirect tradeAction = new TradeDirect();
        QuoteDataBean quoteData = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteData = tradeAction.updateQuotePriceVolumeInt(quoteData.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteData);
        assertEquals(quoteData.getSymbol(), updatedQuoteData.getSymbol());
        assertEquals(quoteData.getCompanyName(), updatedQuoteData.getCompanyName());
        assertEquals(quoteData.getPrice(), updatedQuoteData.getPrice());
        assertEquals(quoteData.getOpen(), updatedQuoteData.getOpen());
        assertEquals(quoteData.getLow(), updatedQuoteData.getLow());
        assertEquals(quoteData.getHigh(), updatedQuoteData.getHigh());
        assertEquals(quoteData.getVolume(), updatedQuoteData.getVolume(), 0.0001);
        assertEquals(quoteData.getChange(), updatedQuoteData.getChange(), 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt5_dodA4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() < 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getLow(), result.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_imCr0() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
        assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
        assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
        assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
        assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
        assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_ZNxE0() {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = null;
        try {
            accountData = tradeDirect.getAccountData("user123");
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(accountData);
        assertTrue(accountData.getBalance().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInternal_YGFY0() throws Exception {
        MarketSummaryDataBean marketSummaryData = new TradeDirect().getMarketSummaryInternal();
        assertNotNull(marketSummaryData);
        BigDecimal openTSIA = marketSummaryData.getOpenTSIA();
        assertNotNull(openTSIA);
        BigDecimal TSIA = marketSummaryData.getTSIA();
        assertNotNull(TSIA);
        double volume = marketSummaryData.getVolume();
        assertTrue(volume >= 0);
        Collection<QuoteDataBean> topGainersData = marketSummaryData.getTopGainers();
        assertNotNull(topGainersData);
        assertTrue(topGainersData.size() <= 5);
        Collection<QuoteDataBean> topLosersData = marketSummaryData.getTopLosers();
        assertNotNull(topLosersData);
        assertTrue(topLosersData.size() <= 5);
    }
}