/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchaseDate_pAlU0() {
        HoldingData holdingData = new HoldingData();
        Date expectedPurchaseDate = new Date(); // Assuming purchaseDate is of type Date
        Date actualPurchaseDate = holdingData.getPurchaseDate();
        assertNull(expectedPurchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainHTML_QPTd0() {
        HoldingData holdingData = new HoldingData();
        String expectedGainHTML = FinancialUtils.printGainHTML(holdingData.getGain());
        String actualGainHTML = holdingData.getGainHTML();
        assertEquals(expectedGainHTML, actualGainHTML);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingID_zLIF0() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = holdingData.getHoldingID();
        assertNotNull(holdingID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchaseDate_pAlU0_fid1() {
        HoldingData holdingData = new HoldingData();
        Date expectedPurchaseDate = new Date(); // Assuming purchaseDate is of type Date
        Date actualPurchaseDate = holdingData.getPurchaseDate();
        assertEquals(expectedPurchaseDate, actualPurchaseDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchasePrice_betH0_fid1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = holdingData.getPurchasePrice();
        Assertions.assertNotNull(purchasePrice);
    }
}