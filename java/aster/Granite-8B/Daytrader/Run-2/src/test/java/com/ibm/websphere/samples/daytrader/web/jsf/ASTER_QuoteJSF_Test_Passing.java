/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_QuoteJSF_Test_Passing {
    @Mock
    QuoteJSF quotejsf;
    private String symbols = null;
    @Mock
    private TradeServices tradeServices;
    private HtmlDataTable dataTable;
    @Mock
    private HttpSession httpSession;
    @Mock
    HttpSession httpsession;
    @Mock
    ExternalContext externalcontext;
    @Mock
    private ExternalContext externalContext;
    @InjectMocks
    private QuoteJSF quoteJSF;
    private Integer quantity = 100;
    private TradeServices tradeAction;
    private ExternalContext context;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbols_Bgjh2() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        String symbols = "ABC,XYZ";
        quoteJSF.setSymbols(symbols);
        assertEquals("ABC,XYZ", quoteJSF.getSymbols());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_gvuP0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        Integer quantity = quoteJSF.getQuantity();
        assertEquals(0, (int) quantity);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuotes_zglv0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        QuoteData[] quotes = quoteJSF.getQuotes();
        assertNotNull(quotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbols_cMGG0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        String symbols = quoteJSF.getSymbols();
        assertNotNull(symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_ItTT0() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        quoteJSF.getAllQuotes();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTable_fNyL1() {
        HtmlDataTable dataTable = mock(HtmlDataTable.class);
        quoteJSF.setDataTable(dataTable);
        assertEquals(dataTable, quoteJSF.getDataTable());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDataTableNull_twGr2() {
        quoteJSF.setDataTable(null);
        assertNull(quoteJSF.getDataTable());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setQuantity(Integer quantity)
    {
        this.quantity = quantity;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuotes_DZaX0_daqJ0_1() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        QuoteData[] quotes = new QuoteData[10]; // Assuming QuoteData is a class
        quoteJSF.setQuotes(quotes);
        assertNotNull(quoteJSF.getQuotes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuotes_DZaX0_daqJ0_2() {
        QuoteJSF quoteJSF = new QuoteJSF(null);
        QuoteData[] quotes = new QuoteData[10]; // Assuming QuoteData is a class
        quoteJSF.setQuotes(quotes);
        assertEquals(10, quoteJSF.getQuotes().length);
    }
}