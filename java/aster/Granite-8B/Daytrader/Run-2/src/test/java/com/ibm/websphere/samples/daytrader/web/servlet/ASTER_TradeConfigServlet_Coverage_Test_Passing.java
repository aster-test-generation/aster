/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeConfigServlet_Coverage_Test_Passing {
    private TradeConfigServlet servlet;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_LQpF0() throws javax.servlet.ServletException, java.io.IOException {
        servlet = new TradeConfigServlet();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServiceWithNullAction_ifEj1() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn(null);
        servlet.service(req, resp);
        verify(resp).setContentType("text/html");
        verify(resp).getWriter();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServiceWithUpdateConfigAction_lvBf2() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("updateConfig");
        servlet.service(req, resp);
        verify(resp).setContentType("text/html");
        verify(resp).getWriter();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServiceWithResetTradeAction_sfit3() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("resetTrade");
        servlet.service(req, resp);
        verify(resp).setContentType("text/html");
        verify(resp).getWriter();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServiceWithBuildDBAction_bpTp4() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("buildDB");
        servlet.service(req, resp);
        verify(resp).setContentType("text/html");
        verify(resp).getWriter();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServiceWithBuildDBTablesAction_Tzgz5() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("buildDBTables");
        servlet.service(req, resp);
        verify(resp).setContentType("text/html");
        verify(resp).getWriter();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServiceWithOtherAction_xoId6() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("otherAction");
        servlet.service(req, resp);
        verify(resp).sendError(500, "TradeConfigServlet.service(...)" + "Exception trying to perform action=otherAction" + "\nException details: Action not supported");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoConfigUpdate4_vFVr3() throws Exception {
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("RuntimeMode")).thenReturn("3");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit1_yfQt0() throws javax.servlet.ServletException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        servlet.init(null);
        assertTrue(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setUp_yBFb1() throws Exception {
}
}