/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession1_Test_Passing {
    private static String initTime;
    private static int hitCount;
    private static int count;
    PingSession1 pingsession1;
    HttpServlet httpservlet;
    @Mock
    HttpServlet httpServlet;
    @Mock
    HttpServletRequest httpServletRequest;
    @Mock
    HttpServletResponse httpServletResponse;
    @Mock
    HttpSession httpSession;
    PingSession1 pingSession1;
    @Mock
    HttpServletRequest httpservletrequest;
    @Mock
    HttpSession httpsession;
    @Mock
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingsession1 = new PingSession1();
        pingsession1.init(httpservlet);
        verify(httpservlet, times(1)).init(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws ServletException, IOException {
        pingSession1 = new PingSession1();
        when(httpServletRequest.getSession(anyBoolean())).thenReturn(httpSession);
        pingSession1.doPost(httpServletRequest, httpServletResponse);
        verify(httpServletRequest).getSession(anyBoolean());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_yDPh0() throws ServletException, IOException {
        PingSession1 pingSession1 = new PingSession1();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingSession1.doPost(req, res);
        verify(req, times(1)).getParameter("username");
        verify(req, times(1)).getParameter("password");
        verify(res, times(1)).setContentType("text/html");
        verify(res, times(1)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_NmJZ0() {
        PingSession1 pingSession1 = new PingSession1();
        String servletInfo = pingSession1.getServletInfo();
        assertEquals("HTTP Session Key: Tests management of a read only unique id", servletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        initTime = "2022-01-01";
        hitCount = 0;
        count = 0;
        when(httpservletrequest.getSession(anyBoolean())).thenReturn(httpsession);
        when(httpsession.getAttribute(anyString())).thenReturn(new Integer(count++));
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        pingsession1.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse, times(1)).setContentType("text/html");
        verify(httpservletresponse, times(1)).setHeader("SessionKeyTest-SessionID", "SessionID:0");
        verify(httpservletresponse, times(1)).getWriter();
        verify(httpservletresponse, times(1)).getWriter().println("<html><head><title>HTTP Session Key Test</title></head><body><HR><BR><FONT size=\"+2\" color=\"#000066\">HTTP Session Test 1: Session Key<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time: 2022-01-01</FONT><BR><BR>");
        verify(httpservletresponse, times(1)).getWriter().println("<B>Hit Count: 1<BR>Your HTTP Session key is SessionID:0</B></body></html>");
    }
}