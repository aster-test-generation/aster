/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetQuantity_zrOh0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(10.0, BigDecimal.valueOf(100.0), new Date(), new AccountDataBean(), new QuoteDataBean());
        assertEquals(10.0, holdingDataBean.getQuantity(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_uyzy0() {
        HoldingDataBean holding = new HoldingDataBean();
        BigDecimal purchasePrice = new BigDecimal(100.0);
        holding.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holding.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals1_Uhlc0() {
        HoldingDataBean holdingDataBean1 = new HoldingDataBean();
        HoldingDataBean holdingDataBean2 = new HoldingDataBean();
        boolean result = holdingDataBean1.equals(holdingDataBean2);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_WncS0() {
        HoldingDataBean holding = new HoldingDataBean();
        AccountDataBean account = new AccountDataBean();
        holding.setAccount(account);
        assertEquals(account, holding.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_aCnK0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_XPzc3() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        BigDecimal purchasePrice = new BigDecimal(1000.0);
        holdingDataBean.setPurchasePrice(purchasePrice);
        assertNotNull(holdingDataBean.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_Szld5() {
        HoldingDataBean holdingDataBean = HoldingDataBean.getRandomInstance();
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_Dnjd6() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Date purchaseDate = new Date();
        holdingDataBean.setPurchaseDate(purchaseDate);
        assertNotNull(holdingDataBean.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_bXzp7() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        assertNotNull(holdingDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_naVA0() {
        HoldingDataBean holding = new HoldingDataBean();
        Date purchaseDate = new Date();
        holding.setPurchaseDate(purchaseDate);
        assertEquals(purchaseDate, holding.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteID_ZywE0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        holdingDataBean.setQuoteID(quoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getSymbol(), holdingDataBean.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public static void main(String[] args) {
        HoldingDataBean holding = new HoldingDataBean();
        holding.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuote_KoqE0() {
        HoldingDataBean holding = new HoldingDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        holding.setQuote(quote);
        QuoteDataBean retrievedQuote = holding.getQuote();
        assertEquals(quote, retrievedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingID_yAwE0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean(1, 100.0, new BigDecimal("1000.0"), new Date(), "quoteID");
        assertEquals(1, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetQuantity_WpsR0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setQuantity(10.0);
        assertEquals(10.0, holdingDataBean.getQuantity(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingID_Ubtv0() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = 1;
        holdingDataBean.setHoldingID(holdingID);
        assertEquals(holdingID, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDNull_ZzwH1() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = null;
        holdingDataBean.setHoldingID(holdingID);
        assertEquals(holdingID, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDNegative_RCFs2() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = -1;
        holdingDataBean.setHoldingID(holdingID);
        assertEquals(holdingID, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDZero_kGWE3() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = 0;
        holdingDataBean.setHoldingID(holdingID);
        assertEquals(holdingID, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDPositive_jpbL4() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = 100;
        holdingDataBean.setHoldingID(holdingID);
        assertEquals(holdingID, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDLarge_PDtX5() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = 1000000;
        holdingDataBean.setHoldingID(holdingID);
        assertEquals(holdingID, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDSmall_bzIf6() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = -1000000;
        holdingDataBean.setHoldingID(holdingID);
        assertEquals(holdingID, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDBoundary_QwJE7() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = Integer.MAX_VALUE;
        holdingDataBean.setHoldingID(holdingID);
        assertEquals(holdingID, holdingDataBean.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingIDBoundaryNegative_WpfH8() {
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        Integer holdingID = Integer.MIN_VALUE;
        holdingDataBean.setHoldingID(holdingID);
        assertEquals(holdingID, holdingDataBean.getHoldingID());
    }
}