/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.Log;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private QuoteDataBean quoteDataBean;
    @Mock
    private HoldingDataBean holdingDataBean;
    private OrderDataBean orderDataBean;
    private String symbol;
    private OrderDataBean orderdatabean;
    private Integer orderID;
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    private BigDecimal price;
    @Mock
    private Log mockLog;
    @Mock
    private HoldingDataBean mockHolding;
    private double quantity;
    private BigDecimal orderFee;
    private String orderType;
    @Mock
    private QuoteDataBean mockQuote;
    private BigDecimal newPrice;
    @Mock
    private OrderDataBean mockOrderDataBean;
    private Date openDate;
    private Date completionDate;
    private String orderStatus;

    /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOrderStatus_0() {
           accountDataBean = mock(AccountDataBean.class);
           quoteDataBean = mock(QuoteDataBean.class);
           holdingDataBean = mock(HoldingDataBean.class);
           orderdatabean = new OrderDataBean("BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "TEST");
           when(orderdatabean.getAccount()).thenReturn(accountDataBean);
           when(orderdatabean.getQuote()).thenReturn(quoteDataBean);
           when(orderdatabean.getHolding()).thenReturn(holdingDataBean);
           String orderStatus = orderdatabean.getOrderStatus();
           assertEquals("BUY", orderdatabean.getOrderType());
           assertEquals("OPEN", orderdatabean.getOrderStatus());
           assertNotNull(orderdatabean.getOpenDate());
           assertNotNull(orderdatabean.getCompletionDate());
           assertEquals(100.0, orderdatabean.getQuantity(), 0.0);
           assertEquals(new BigDecimal(100.0), orderdatabean.getPrice());
           assertEquals(new BigDecimal(10.0), orderdatabean.getOrderFee());
           assertEquals("TEST", orderdatabean.getSymbol());
       }
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus() {
           accountDataBean = mock(AccountDataBean.class);
           quoteDataBean = mock(QuoteDataBean.class);
           holdingDataBean = mock(HoldingDataBean.class);
           orderdatabean = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(1.0), "symbol");
           orderdatabean.setOrderStatus("closed");
           assertEquals("closed", orderdatabean.getOrderStatus());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOrderStatus_FIAL0() {
       OrderDataBean order = new OrderDataBean();
       order.setOrderStatus("open");
       assertEquals("open", order.getOrderStatus());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetSymbol() throws Exception {
           orderdatabean = new OrderDataBean();
           quote = mock(QuoteDataBean.class);
           symbol = "TEST_SYMBOL";
           when(quote.getSymbol()).thenReturn(symbol);
           orderdatabean.setQuote(quote);
           assertEquals(symbol, orderdatabean.getSymbol());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol1_cOli0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", null, result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol2_wMTF1() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", null, result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol3_qrvN2() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol1 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol1 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol4_ApPS3() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol2 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol2 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol5_gjIp4() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol3 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol3 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol6_OoWl5() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol4 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol4 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol7_QsJP6() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol5 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol5 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol8_bZrz7() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol6 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol6 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol9_HhAZ8() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol7 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol7 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol10_GJEE9() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol8 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol8 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol11_rYYw10() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol9 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol9 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol12_QRBT11() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol10 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol10 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testgetSymbol13_Gtlb12() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setQuote(new QuoteDataBean());
       orderDataBean.getQuote().setSymbol(" symbol11 ");
       String result = orderDataBean.getSymbol();
       assertEquals("getSymbol failed", " symbol11 ", result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetOrderID() {
           orderID = 123;
           when(orderdatabean.getOrderID()).thenReturn(orderID);
           assertEquals(orderID, orderdatabean.getOrderID());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testGetOrderID_OsiZ0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Integer orderID = orderDataBean.getOrderID();
           assertNotNull(orderID);
       }
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testisOpen() {
           accountDataBean = new AccountDataBean();
           quoteDataBean = new QuoteDataBean();
           holdingDataBean = new HoldingDataBean();
           orderdatabean = new OrderDataBean("open", "open", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), "symbol", accountDataBean, quoteDataBean, holdingDataBean);
           assertTrue(orderdatabean.isOpen());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen1_TXnH0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("open");
       boolean result = orderDataBean.isOpen();
       assertTrue(result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen2_KwAO1() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("processing");
       boolean result = orderDataBean.isOpen();
       assertTrue(result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testIsOpen3_uGBu2() {
       OrderDataBean orderDataBean = new OrderDataBean();
       orderDataBean.setOrderStatus("closed");
       boolean result = orderDataBean.isOpen();
       assertFalse(result);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToString() {
           accountDataBean = mock(AccountDataBean.class);
           quoteDataBean = mock(QuoteDataBean.class);
           holdingDataBean = mock(HoldingDataBean.class);
           orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "symbol");
           String toStringResult = orderDataBean.toString();
           assertEquals("Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + new Date() + "\n\t completionDate: " + new Date() + "\n\t       quantity: 100.0\n\t          price: 10.00\n\t       orderFee: 1.00\n\t         symbol: symbol", toStringResult);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToString_fyzZ0() {
           OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "symbol");
           String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.00\n\t       orderFee: 1.00\n\t         symbol: symbol";
           assertEquals(expected, order.toString());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetAccount() throws Exception {
           account = mock(AccountDataBean.class);
           orderdatabean = new OrderDataBean();
           orderdatabean.setAccount(account);
           verify(account, times(1)).setOrders(any(Collection.class));
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetAccount_bYfG0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       AccountDataBean accountDataBean = new AccountDataBean();
       orderDataBean.setAccount(accountDataBean);
       assertNotNull(orderDataBean.getAccount());
       assertEquals(accountDataBean, orderDataBean.getAccount());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderFee() throws Exception {
           orderdatabean = new OrderDataBean();
           orderdatabean.setOrderFee(orderFee);
           // Mock the AccountDataBean, QuoteDataBean, and HoldingDataBean objects
           when(account.getProfileID()).thenReturn("profileID");
           when(quote.getSymbol()).thenReturn("symbol");
           when(holding.getQuantity()).thenReturn(100.0);
           // Set the account, quote, and holding objects on the orderdatabean
           orderdatabean.setAccount(account);
           orderdatabean.setQuote(quote);
           orderdatabean.setHolding(holding);
           // Set the orderFee to a new value
           BigDecimal newOrderFee = new BigDecimal(100.0);
           orderdatabean.setOrderFee(newOrderFee);
           // Assert that the orderFee has been updated
           assertEquals(newOrderFee, orderdatabean.getOrderFee());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOrderFee_BSic0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = new BigDecimal(100.0);
       orderDataBean.setOrderFee(orderFee);
       assertEquals(orderFee, orderDataBean.getOrderFee());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetOpenDate() {
           openDate = new Date();
           when(orderdatabean.getOpenDate()).thenReturn(openDate);
           assertEquals(openDate, orderdatabean.getOpenDate());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testgetOpenDate_VxKC0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Date openDate = orderDataBean.getOpenDate();
           assertNotNull(openDate);
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOpenDate() throws Exception {
           orderdatabean = new OrderDataBean();
           openDate = new Date();
           orderdatabean.setOpenDate(openDate);
           assertEquals(openDate, orderdatabean.getOpenDate());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOpenDate_zAPY0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       Date openDate = new Date();
       orderDataBean.setOpenDate(openDate);
       assertEquals(openDate, orderDataBean.getOpenDate());
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetHolding() throws Exception {
           holding = mock(HoldingDataBean.class);
           orderdatabean = new OrderDataBean();
           orderdatabean.setHolding(holding);
           verify(holding, times(1)).setOrder(any());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetHolding_nTcR0() {
           OrderDataBean order = new OrderDataBean();
           HoldingDataBean holding = new HoldingDataBean();
           order.setHolding(holding);
           assertNotNull(order.getHolding());
           assertEquals(holding, order.getHolding());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetCompletionDate() throws Exception{
           orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
           assertEquals(orderdatabean.getCompletionDate(), new Date());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void test_WJOL0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Date completionDate = orderDataBean.getCompletionDate();
           assertNull(completionDate);
       }
       private String orderType; /* orderType (buy, sell, etc.) */
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest_sAUJ0_1() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest_sAUJ0_2() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertTrue(orderDataBean.getQuantity() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest_sAUJ0_3() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertTrue(orderDataBean.getPrice().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest_sAUJ0_4() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertTrue(orderDataBean.getOrderFee().compareTo(BigDecimal.ZERO) >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getQuantityTest_gCwM3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        double quantity = orderDataBean.getQuantity();
        assertFalse(quantity > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol() throws Exception {
        orderdatabean = new OrderDataBean();
        // Set up mock objects
        QuoteDataBean quote = mock(QuoteDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        HoldingDataBean holding = mock(HoldingDataBean.class);
        // Set up expectations
        when(quote.getSymbol()).thenReturn("TEST");
        when(account.getProfileID()).thenReturn("TEST");
        when(holding.getQuote()).thenReturn(quote);
        when(holding.getAccount()).thenReturn(account);
        // Set symbol
        orderdatabean.setSymbol("TEST");
        // Verify that the symbol was set correctly
        assertEquals("TEST", orderdatabean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_krZF0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setSymbol("symbol1");
        assertEquals("symbol1", orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode1_KYEh0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        int result = orderDataBean.hashCode();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode2_nSHw1() {
        OrderDataBean orderDataBean = new OrderDataBean(null, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        int result = orderDataBean.hashCode();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrice_lnZA0_1() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        BigDecimal price = orderDataBean.getPrice();
        assertNotNull(price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrice_lnZA0_2() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        BigDecimal price = orderDataBean.getPrice();
        assertEquals(new BigDecimal(1.0), price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_vvdM0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingWithNullHolding_NHEc1() {
        OrderDataBean order = new OrderDataBean();
        order.setHolding(null);
        HoldingDataBean holding = order.getHolding();
        assertNull(holding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldingWithNonNullHolding_qYqB2() {
        OrderDataBean order = new OrderDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        order.setHolding(holding);
        HoldingDataBean returnedHolding = order.getHolding();
        assertEquals(holding, returnedHolding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcancel() throws Exception {
        orderdatabean = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "symbol");
        orderdatabean.setAccount(account);
        orderdatabean.setQuote(quote);
        orderdatabean.setHolding(holding);
        orderdatabean.cancel();
        assertEquals("cancelled", orderdatabean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCancel_yYLn0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol");
        order.cancel();
        assertEquals("cancelled", order.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID() {
        orderdatabean = new OrderDataBean();
        orderID = 123;
        orderdatabean.setOrderID(orderID);
        assertEquals(orderID, orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID_rEnI0() {
        OrderDataBean order = new OrderDataBean();
        Integer orderID = 1;
        order.setOrderID(orderID);
        assertEquals(orderID, order.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML() {
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.00"), "symbol");
        String expectedHTML = "<BR>Order <B>1</B>" + "<LI>      orderType: BUY</LI>" + "<LI>    orderStatus: OPEN</LI>" + "<LI>       openDate: " + new Date() + "</LI>" + "<LI> completionDate: " + new Date() + "</LI>" + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 10.00</LI>" + "<LI>       orderFee: 0.00</LI>" + "<LI>         symbol: symbol</LI>";
        String actualHTML = orderDataBean.toHTML();
        assertEquals(expectedHTML, actualHTML);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToHTML_xZNZ0_1() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.00"), new BigDecimal("1.00"), "symbol");
        String html = order.toHTML();
        assertNotNull(html);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToHTML_xZNZ0_2() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.00"), new BigDecimal("1.00"), "symbol");
        String html = order.toHTML();
        assertEquals("<BR>Order <B>1</B>" + "<LI>      orderType: BUY</LI>" + "<LI>    orderStatus: OPEN</LI>" + "<LI>       openDate: " + order.getOpenDate() + "</LI>" + "<LI> completionDate: " + order.getCompletionDate() + "</LI>" + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 100.00</LI>" + "<LI>       orderFee: 1.00</LI>" + "<LI>         symbol: symbol</LI>", html);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity_Unmm0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        double quantity = orderDataBean.getQuantity();
        assertEquals(0.0, quantity, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_VOXr0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal orderFee = orderDataBean.getOrderFee();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderType() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderType("buy");
        assertEquals("buy", orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetOrderType_gWRe0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("BUY");
        assertEquals("BUY", orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_1() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        when(mockQuote.getCompanyName()).thenReturn("Mock Company");
        when(mockQuote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockQuote.getOpen()).thenReturn(BigDecimal.valueOf(90.0));
        when(mockQuote.getLow()).thenReturn(BigDecimal.valueOf(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(BigDecimal.valueOf(110.0));
        when(mockQuote.getSymbol()).thenReturn("Mock Symbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        QuoteDataBean quote = orderdatabean.getQuote();
        assertEquals("Mock Company", quote.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_2() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        when(mockQuote.getCompanyName()).thenReturn("Mock Company");
        when(mockQuote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockQuote.getOpen()).thenReturn(BigDecimal.valueOf(90.0));
        when(mockQuote.getLow()).thenReturn(BigDecimal.valueOf(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(BigDecimal.valueOf(110.0));
        when(mockQuote.getSymbol()).thenReturn("Mock Symbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        QuoteDataBean quote = orderdatabean.getQuote();
        assertEquals(BigDecimal.valueOf(100.0), quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_3() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        when(mockQuote.getCompanyName()).thenReturn("Mock Company");
        when(mockQuote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockQuote.getOpen()).thenReturn(BigDecimal.valueOf(90.0));
        when(mockQuote.getLow()).thenReturn(BigDecimal.valueOf(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(BigDecimal.valueOf(110.0));
        when(mockQuote.getSymbol()).thenReturn("Mock Symbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        QuoteDataBean quote = orderdatabean.getQuote();
        assertEquals(BigDecimal.valueOf(90.0), quote.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_4() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        when(mockQuote.getCompanyName()).thenReturn("Mock Company");
        when(mockQuote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockQuote.getOpen()).thenReturn(BigDecimal.valueOf(90.0));
        when(mockQuote.getLow()).thenReturn(BigDecimal.valueOf(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(BigDecimal.valueOf(110.0));
        when(mockQuote.getSymbol()).thenReturn("Mock Symbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        QuoteDataBean quote = orderdatabean.getQuote();
        assertEquals(BigDecimal.valueOf(80.0), quote.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_5() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        when(mockQuote.getCompanyName()).thenReturn("Mock Company");
        when(mockQuote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockQuote.getOpen()).thenReturn(BigDecimal.valueOf(90.0));
        when(mockQuote.getLow()).thenReturn(BigDecimal.valueOf(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(BigDecimal.valueOf(110.0));
        when(mockQuote.getSymbol()).thenReturn("Mock Symbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        QuoteDataBean quote = orderdatabean.getQuote();
        assertEquals(10.0, quote.getChange(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_6() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        when(mockQuote.getCompanyName()).thenReturn("Mock Company");
        when(mockQuote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockQuote.getOpen()).thenReturn(BigDecimal.valueOf(90.0));
        when(mockQuote.getLow()).thenReturn(BigDecimal.valueOf(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(BigDecimal.valueOf(110.0));
        when(mockQuote.getSymbol()).thenReturn("Mock Symbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        QuoteDataBean quote = orderdatabean.getQuote();
        assertEquals(BigDecimal.valueOf(110.0), quote.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_7() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        when(mockQuote.getCompanyName()).thenReturn("Mock Company");
        when(mockQuote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockQuote.getOpen()).thenReturn(BigDecimal.valueOf(90.0));
        when(mockQuote.getLow()).thenReturn(BigDecimal.valueOf(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(BigDecimal.valueOf(110.0));
        when(mockQuote.getSymbol()).thenReturn("Mock Symbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        QuoteDataBean quote = orderdatabean.getQuote();
        assertEquals("Mock Symbol", quote.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_8() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        when(mockQuote.getCompanyName()).thenReturn("Mock Company");
        when(mockQuote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockQuote.getOpen()).thenReturn(BigDecimal.valueOf(90.0));
        when(mockQuote.getLow()).thenReturn(BigDecimal.valueOf(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(BigDecimal.valueOf(110.0));
        when(mockQuote.getSymbol()).thenReturn("Mock Symbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        QuoteDataBean quote = orderdatabean.getQuote();
        assertEquals(1000.0, quote.getVolume(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_BkRj0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        orderDataBean.setQuote(quoteDataBean);
        assertNotNull(orderDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_1() throws Exception {
        orderdatabean = new OrderDataBean();
        price = BigDecimal.valueOf(200.0);
        newPrice = BigDecimal.valueOf(200.0);
        orderdatabean.setPrice(price);
        orderdatabean.setPrice(newPrice);
        assertEquals(price, orderdatabean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_2() throws Exception {
        orderdatabean = new OrderDataBean();
        price = BigDecimal.valueOf(100.0);
        newPrice = BigDecimal.valueOf(200.0);
        orderdatabean.setPrice(price);
        orderdatabean.setPrice(newPrice);
        assertEquals(newPrice, orderdatabean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_amZC0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal price = new BigDecimal(100.00);
        orderDataBean.setPrice(price);
        assertEquals(price, orderDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FetS0() {
        OrderDataBean order1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        OrderDataBean order2 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        assertTrue(order1.equals(order2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_XlIb1() {
        OrderDataBean order1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        OrderDataBean order2 = null;
        assertFalse(order1.equals(order2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOrderID_QAQo2() {
        OrderDataBean order1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        OrderDataBean order2 = new OrderDataBean(2, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        assertFalse(order1.equals(order2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOrderType_BtNf3() {
        OrderDataBean order1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        OrderDataBean order2 = new OrderDataBean(1, "type2", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        assertTrue(order1.equals(order2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOrderStatus_cRuN4() {
        OrderDataBean order1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        OrderDataBean order2 = new OrderDataBean(1, "type1", "status2", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        assertTrue(order1.equals(order2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentOpenDate_ZtjD5() {
        OrderDataBean order1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        OrderDataBean order2 = new OrderDataBean(1, "type1", "status1", new Date(System.currentTimeMillis() + 1000), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentCompletionDate_xBxa6() {
        OrderDataBean order1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
        OrderDataBean order2 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(System.currentTimeMillis() + 1000), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSell1_VUFI0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("buy");
        boolean result = orderDataBean.isSell();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSell2_MpDQ1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("sell");
        boolean result = orderDataBean.isSell();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted1_zzLL0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("completed");
        boolean result = orderDataBean.isCompleted();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted2_rdvN1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("alertcompleted");
        boolean result = orderDataBean.isCompleted();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted3_WIkb2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("cancelled");
        boolean result = orderDataBean.isCompleted();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompleted4_ykAb3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("open");
        boolean result = orderDataBean.isCompleted();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetQuote_AWAX0() {
        OrderDataBean order = new OrderDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        order.setQuote(quote);
        assertEquals(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_efFL0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(100.0);
        assertEquals(100.0, orderDataBean.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCompletionDate() throws Exception {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "symbol");
        Date newCompletionDate = new Date();
        orderdatabean.setCompletionDate(newCompletionDate);
        assertEquals(newCompletionDate, orderdatabean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCompletionDate_VOmG0() {
        OrderDataBean order = new OrderDataBean();
        Date completionDate = new Date();
        order.setCompletionDate(completionDate);
        assertEquals(completionDate, order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetCompletionDateNull_sqfl1() {
        OrderDataBean order = new OrderDataBean();
        order.setCompletionDate(null);
        assertNull(order.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled1_qiLK0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("cancelled");
        boolean result = orderDataBean.isCancelled();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled2_ZFTW1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("open");
        boolean result = orderDataBean.isCancelled();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus_NxbL0() {
        AccountDataBean accountDataBean = mock(AccountDataBean.class);
        QuoteDataBean quoteDataBean = mock(QuoteDataBean.class);
        HoldingDataBean holdingDataBean = mock(HoldingDataBean.class);
        OrderDataBean orderdatabean = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(1.0), "symbol");
        orderdatabean.setOrderStatus("closed");
        assertEquals("closed", orderdatabean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_SPZL0() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = mock(QuoteDataBean.class);
        when(quote.getSymbol()).thenReturn("TEST_SYMBOL");
        orderdatabean.setQuote(quote);
        assertEquals("TEST_SYMBOL", orderdatabean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol1_cOli0_MWdA0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String result = orderDataBean.getSymbol();
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol2_wMTF1_vpRw0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertNull(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol3_qrvN2_zITl0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol1 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals(" symbol1 ", " symbol1 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol4_ApPS3_hxxm0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol2 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
        assertEquals(" symbol2 ", " symbol2 ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol5_gjIp4_xvsl0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol3 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol6_OoWl5_AgsK0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol4 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol7_QsJP6_XEdR0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol5 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol8_bZrz7_jCzh0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol6 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol9_HhAZ8_wRzf0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol7 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol10_GJEE9_eHaI0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol8 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol11_rYYw10_dwsQ0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol9 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol12_QRBT11_pAxY0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol10 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol13_Gtlb12_wzum0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(" symbol11 ");
        orderDataBean.setQuote(quoteDataBean);
        String result = orderDataBean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsOpen1_TXnH0_dhcs1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("open");
        boolean result = orderDataBean.isOpen();
        assertTrue(result == true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsOpen3_uGBu2_ASyN0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("closed");
        boolean result = orderDataBean.isOpen();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_lTrl0() {
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "symbol");
        String toStringResult = orderDataBean.toString();
        assertEquals("Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + new Date() + "\n\t completionDate: " + new Date() + "\n\t       quantity: 100.0\n\t          price: 10.00\n\t       orderFee: 1.00\n\t         symbol: symbol", toStringResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_fyzZ0_LHfT0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("1.00"), "symbol");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.00\n\t       orderFee: 1.00\n\t         symbol: symbol";
        assertEquals(expected, order.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_bYfG0_YQZr0_1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        orderDataBean.setAccount(accountDataBean);
        assertNotNull(orderDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount_bYfG0_YQZr0_2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        orderDataBean.setAccount(accountDataBean);
        assertEquals(accountDataBean, orderDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_LvWS0() throws Exception {
        orderdatabean = new OrderDataBean();
        orderdatabean.setOrderFee(orderFee);
        when(account.getProfileID()).thenReturn("profileID");
        when(quote.getSymbol()).thenReturn("symbol");
        when(holding.getQuantity()).thenReturn(100.0);
        orderdatabean.setAccount(account);
        orderdatabean.setQuote(quote);
        orderdatabean.setHolding(holding);
        BigDecimal newOrderFee = BigDecimal.valueOf(100.0);
        orderdatabean.setOrderFee(newOrderFee);
        assertEquals(newOrderFee, orderdatabean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_BSic0_JaZR0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal orderFee = new BigDecimal("100.0");
        orderDataBean.setOrderFee(orderFee);
        assertEquals(orderFee, orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate_zAPY0_TFhH0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Calendar calendar = Calendar.getInstance();
        Date openDate = calendar.getTime();
        orderDataBean.setOpenDate(openDate);
        assertEquals(openDate, orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_nTcR0_CBnQ0_1() {
        OrderDataBean order = new OrderDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        order.setHolding(holding);
        assertNotNull(order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_nTcR0_CBnQ0_2() {
        OrderDataBean order = new OrderDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        order.setHolding(holding);
        assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompletionDate_LlRi0() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        assertEquals(orderdatabean.getCompletionDate(), new Date());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest_sAUJ0() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean);
        assertTrue(orderDataBean.getQuantity() > 0);
        assertTrue(orderDataBean.getPrice().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(orderDataBean.getOrderFee().compareTo(BigDecimal.ZERO) >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrice_lnZA0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        BigDecimal price = orderDataBean.getPrice();
        assertNotNull(price);
        assertEquals(new BigDecimal(1.0), price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToHTML_xZNZ0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.00"), new BigDecimal("1.00"), "symbol");
        String html = order.toHTML();
        assertNotNull(html);
        assertEquals("<BR>Order <B>1</B>" + "<LI>      orderType: BUY</LI>" + "<LI>    orderStatus: OPEN</LI>" + "<LI>       openDate: " + order.getOpenDate() + "</LI>" + "<LI> completionDate: " + order.getCompletionDate() + "</LI>" + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 100.00</LI>" + "<LI>       orderFee: 1.00</LI>" + "<LI>         symbol: symbol</LI>", html);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = new QuoteDataBean();
        when(mockQuote.getCompanyName()).thenReturn("Mock Company");
        when(mockQuote.getPrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockQuote.getOpen()).thenReturn(BigDecimal.valueOf(90.0));
        when(mockQuote.getLow()).thenReturn(BigDecimal.valueOf(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(BigDecimal.valueOf(110.0));
        when(mockQuote.getSymbol()).thenReturn("Mock Symbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        QuoteDataBean quote = orderdatabean.getQuote();
        assertEquals("Mock Company", quote.getCompanyName());
        assertEquals(BigDecimal.valueOf(100.0), quote.getPrice());
        assertEquals(BigDecimal.valueOf(90.0), quote.getOpen());
        assertEquals(BigDecimal.valueOf(80.0), quote.getLow());
        assertEquals(10.0, quote.getChange(), 0.001);
        assertEquals(BigDecimal.valueOf(110.0), quote.getHigh());
        assertEquals("Mock Symbol", quote.getSymbol());
        assertEquals(1000.0, quote.getVolume(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice() throws Exception {
        orderdatabean = new OrderDataBean();
        price = BigDecimal.valueOf(100.0);
        newPrice = BigDecimal.valueOf(200.0);
        orderdatabean.setPrice(price);
        assertEquals(price, orderdatabean.getPrice());
        orderdatabean.setPrice(newPrice);
        assertEquals(newPrice, orderdatabean.getPrice());
    }
}