/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLoginCount_MlAv0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setLoginCount(1);
        assertEquals(1, accountDataBean.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_jUDr0_1() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_jUDr0_2() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_jUDr0_3() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_jUDr0_4() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_jUDr0_5() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_jUDr0_6() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRandomInstance_jUDr0_7() {
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        assertNotNull(accountDataBean.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetLogoutCount_wWfL0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setLogoutCount(1);
        assertEquals(1, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetLastLogin_EOnH0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date date = new Date();
        accountDataBean.setLastLogin(date);
        assertEquals(date, accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetLastLoginNull_Bgnk1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setLastLogin(null);
        assertNull(accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetLastLoginInvalid_NIuR2_1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date date = new Date(0);
        accountDataBean.setLastLogin(date);
        assertNotNull(accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetLastLoginInvalid_NIuR2_2() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Date date = new Date(0);
        accountDataBean.setLastLogin(date);
        assertFalse(accountDataBean.getLastLogin().before(date));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithIncorrectPassword_UzJA1() {
        AccountDataBean account = new AccountDataBean(123, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "123");
        try {
            account.login("456");
            fail("Expected EJBException");
        } catch (EJBException e) {
            assertTrue(e.getMessage().startsWith("AccountBean:Login failure for account: 123"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNullProfile_qtDO2() {
        AccountDataBean account = new AccountDataBean(123, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), null);
        try {
            account.login("123");
            fail("Expected EJBException");
        } catch (EJBException e) {
            assertTrue(e.getMessage().startsWith("AccountBean:Login failure for account: 123"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithIncorrectPasswordAndNullProfile_AhpT3() {
        AccountDataBean account = new AccountDataBean(123, 0, 0, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), null);
        try {
            account.login("456");
            fail("Expected EJBException");
        } catch (EJBException e) {
            assertTrue(e.getMessage().startsWith("AccountBean:Login failure for account: 123"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_WNNb0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal(1), new BigDecimal(2), "1");
        accountDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldings_BznG0_1() {
        AccountDataBean account = new AccountDataBean();
        Collection<HoldingDataBean> holdings = new ArrayList<>();
        HoldingDataBean holding1 = new HoldingDataBean();
        HoldingDataBean holding2 = new HoldingDataBean();
        holdings.add(holding1);
        holdings.add(holding2);
        account.setHoldings(holdings);
        assertNotNull(account.getHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldings_BznG0_2() {
        AccountDataBean account = new AccountDataBean();
        Collection<HoldingDataBean> holdings = new ArrayList<>();
        HoldingDataBean holding1 = new HoldingDataBean();
        HoldingDataBean holding2 = new HoldingDataBean();
        holdings.add(holding1);
        holdings.add(holding2);
        account.setHoldings(holdings);
        assertEquals(2, account.getHoldings().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldings_BznG0_3() {
        AccountDataBean account = new AccountDataBean();
        Collection<HoldingDataBean> holdings = new ArrayList<>();
        HoldingDataBean holding1 = new HoldingDataBean();
        HoldingDataBean holding2 = new HoldingDataBean();
        holdings.add(holding1);
        holdings.add(holding2);
        account.setHoldings(holdings);
        assertTrue(account.getHoldings().contains(holding1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldings_BznG0_4() {
        AccountDataBean account = new AccountDataBean();
        Collection<HoldingDataBean> holdings = new ArrayList<>();
        HoldingDataBean holding1 = new HoldingDataBean();
        HoldingDataBean holding2 = new HoldingDataBean();
        holdings.add(holding1);
        holdings.add(holding2);
        account.setHoldings(holdings);
        assertTrue(account.getHoldings().contains(holding2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationDate_vvpi0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        Date creationDate = accountDataBean.getCreationDate();
        assertEquals(new Date(), creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLogoutCount_ymvm0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        assertEquals(1, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_yoZp0() {
        AccountDataBean account = new AccountDataBean(123, 10, 5, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "12345");
        String expected = "<BR>Account Data for account: <B>123</B>" + "<LI>   loginCount:10</LI>" + "<LI>  logoutCount:5</LI>" + "<LI>    lastLogin:" + account.getLastLogin() + "</LI>" + "<LI> creationDate:" + account.getCreationDate() + "</LI>" + "<LI>      balance:" + account.getBalance() + "</LI>" + "<LI>  openBalance:" + account.getOpenBalance() + "</LI>" + "<LI>    profileID:12345</LI>";
        String actual = account.toHTML();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccountIDNull_KvCT1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setAccountID(null);
        assertEquals(null, accountDataBean.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccountIDNegative_mPga2() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setAccountID(-123);
        assertEquals(-123, accountDataBean.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLoginCount_KtUd0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "1");
        assertEquals(1, accountDataBean.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_NWcS0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.logout();
        assertEquals(1, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithNegativeCount_MWgZ3() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setLogoutCount(-1);
        accountDataBean.logout();
        assertEquals(0, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithZeroCount_LUsO4() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setLogoutCount(0);
        accountDataBean.logout();
        assertEquals(1, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithPositiveCount_ylGf5() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setLogoutCount(10);
        accountDataBean.logout();
        assertEquals(11, accountDataBean.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenBalance_CTXV0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        BigDecimal openBalance = new BigDecimal(100.00);
        accountDataBean.setOpenBalance(openBalance);
        assertEquals(openBalance, accountDataBean.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetProfileID_CTBa0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(1), new BigDecimal(1), "profileID");
        String profileID = accountDataBean.getProfileID();
        assertEquals("profileID", profileID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_rsGr0() {
        AccountDataBean account = new AccountDataBean();
        Date creationDate = new Date();
        account.setCreationDate(creationDate);
        assertEquals(creationDate, account.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateNull_CxtF1() {
        AccountDataBean account = new AccountDataBean();
        account.setCreationDate(null);
        assertNull(account.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateInvalid_HSJN2() {
        AccountDataBean account = new AccountDataBean();
        Date creationDate = new Date(-1);
        account.setCreationDate(creationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetProfileID_CSAI0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setProfileID("profileID");
        assertEquals("profileID", accountDataBean.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetProfileIDNull_Nkin1() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setProfileID(null);
        assertNull(accountDataBean.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProfile_gzOx0_1() {
        AccountDataBean account = new AccountDataBean();
        AccountProfileDataBean profile = new AccountProfileDataBean();
        account.setProfile(profile);
        assertNotNull(account.getProfile());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProfile_gzOx0_2() {
        AccountDataBean account = new AccountDataBean();
        AccountProfileDataBean profile = new AccountProfileDataBean();
        account.setProfile(profile);
        assertEquals(profile, account.getProfile());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrders_lbqo0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        Collection<OrderDataBean> orders = new ArrayList<>();
        OrderDataBean orderDataBean = new OrderDataBean();
        orders.add(orderDataBean);
        accountDataBean.setOrders(orders);
        assertEquals(orders, accountDataBean.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastLogin_WLmv0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "1");
        assertEquals(new Date(), accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBalance_BfIt0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setBalance(new BigDecimal(100));
        assertEquals(new BigDecimal(100), accountDataBean.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProfile_YODw0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setProfile(new AccountProfileDataBean());
        AccountProfileDataBean profile = accountDataBean.getProfile();
        assertNotNull(profile);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenBalance_NSCc0() {
        AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal(100), new BigDecimal(100), "1");
        assertEquals(new BigDecimal(100), accountDataBean.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBalance_kLiQ0() {
        AccountDataBean accountDataBean = new AccountDataBean();
        BigDecimal balance = new BigDecimal(100.00);
        accountDataBean.setBalance(balance);
        assertEquals(balance, accountDataBean.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldings_BznG0_ndKO0_1() {
        AccountDataBean account = new AccountDataBean();
        Collection<HoldingDataBean> holdings = new HashSet<>();
        HoldingDataBean holding1 = new HoldingDataBean();
        HoldingDataBean holding2 = new HoldingDataBean();
        holdings.add(holding1);
        holdings.add(holding2);
        account.setHoldings(holdings);
        assertNotNull(account.getHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldings_BznG0_ndKO0_3() {
        AccountDataBean account = new AccountDataBean();
        Collection<HoldingDataBean> holdings = new HashSet<>();
        HoldingDataBean holding1 = new HoldingDataBean();
        HoldingDataBean holding2 = new HoldingDataBean();
        holdings.add(holding1);
        holdings.add(holding2);
        account.setHoldings(holdings);
        assertTrue(account.getHoldings().contains(holding1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldings_BznG0_ndKO0_4() {
        AccountDataBean account = new AccountDataBean();
        Collection<HoldingDataBean> holdings = new HashSet<>();
        HoldingDataBean holding1 = new HoldingDataBean();
        HoldingDataBean holding2 = new HoldingDataBean();
        holdings.add(holding1);
        holdings.add(holding2);
        account.setHoldings(holdings);
        assertTrue(account.getHoldings().contains(holding2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProfile_gzOx0() {
        AccountDataBean account = new AccountDataBean();
        AccountProfileDataBean profile = new AccountProfileDataBean();
        account.setProfile(profile);
        assertNotNull(account.getProfile());
        assertEquals(profile, account.getProfile());
    }
}