/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.jms.Queue;
import javax.jms.TextMessage;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
    private EntityManager entityManager;
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    @Mock
    private OrderDataBean order;
    @InjectMocks
    private TradeSLSBBean tradeslsbbean;
    private OrderDataBean orderDataBean;
    private AccountDataBean accountDataBean;
    private QuoteDataBean quoteDataBean;
    private HoldingDataBean holdingDataBean;
    @Mock
    private AccountProfileDataBean accountProfileDataBean;
    private TextMessage message;
    private Queue queue;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange_pkrj0() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal oldPrice = quote.getPrice();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange2_jplM1() {
        QuoteDataBean quote = new QuoteDataBean();
        BigDecimal oldPrice = BigDecimal.valueOf(Math.random());
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange3_GcLL2() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal oldPrice = BigDecimal.valueOf(Math.random());
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void tearDown_znKw1() {
        entityManager.close();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_roRd0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = AccountDataBean.getRandomInstance();
        String userID = account.getProfile().getUserID();
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(1000.0);
        AccountDataBean registeredAccount = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNotNull(registeredAccount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_roRd0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = AccountDataBean.getRandomInstance();
        String userID = account.getProfile().getUserID();
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(1000.0);
        AccountDataBean registeredAccount = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertEquals(userID, registeredAccount.getProfile().getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_roRd0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = AccountDataBean.getRandomInstance();
        String userID = account.getProfile().getUserID();
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(1000.0);
        AccountDataBean registeredAccount = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertEquals(openBalance, registeredAccount.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_pZLH0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        for (HoldingDataBean holding : holdings) {
        }
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_pZLH0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        for (HoldingDataBean holding : holdings) {
        }
        assertTrue(!holdings.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_pZLH0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        for (HoldingDataBean holding : holdings) {
        }
        assertNotNull(holding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_pZLH0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        for (HoldingDataBean holding : holdings) {
        }
        assertNotNull(holding.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_pZLH0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        for (HoldingDataBean holding : holdings) {
        }
        assertNotNull(holding.getAccount().getProfile());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_pZLH0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        for (HoldingDataBean holding : holdings) {
        }
        assertEquals(holding.getAccount().getProfile().getUserID(), userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_hhJt0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(true);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void teardown_rHUM1() {
        entityManager.clear();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_FwRP2_1() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_FwRP2_2() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertEquals(updatedQuote.getSymbol(), quote.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_FwRP2_3() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertTrue(updatedQuote.getPrice().compareTo(quote.getPrice()) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_FwRP2_4() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertTrue(updatedQuote.getChange() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_FwRP2_5() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertTrue(updatedQuote.getVolume() > quote.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_OFsD3_1() {
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(null, changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_OFsD3_2() {
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(null, changeFactor, sharesTraded);
        assertTrue(updatedQuote.getPrice().compareTo(TradeConfig.PENNY_STOCK_PRICE) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_OFsD3_3() {
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(null, changeFactor, sharesTraded);
        assertTrue(updatedQuote.getChange() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_OFsD3_4() {
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(null, changeFactor, sharesTraded);
        assertTrue(updatedQuote.getVolume() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_EJBh4_1() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), BigDecimal.ZERO, sharesTraded);
        assertNotNull(updatedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_EJBh4_2() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), BigDecimal.ZERO, sharesTraded);
        assertEquals(updatedQuote.getSymbol(), quote.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_EJBh4_3() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), BigDecimal.ZERO, sharesTraded);
        assertTrue(updatedQuote.getPrice().compareTo(quote.getPrice()) == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_EJBh4_4() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), BigDecimal.ZERO, sharesTraded);
        assertTrue(updatedQuote.getChange() == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_EJBh4_5() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), BigDecimal.ZERO, sharesTraded);
        assertTrue(updatedQuote.getVolume() > quote.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroSharesTraded_KDry5_1() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, 0);
        assertNotNull(updatedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroSharesTraded_KDry5_2() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, 0);
        assertEquals(updatedQuote.getSymbol(), quote.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroSharesTraded_KDry5_3() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, 0);
        assertTrue(updatedQuote.getPrice().compareTo(quote.getPrice()) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroSharesTraded_KDry5_4() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, 0);
        assertTrue(updatedQuote.getChange() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroSharesTraded_KDry5_5() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, 0);
        assertTrue(updatedQuote.getVolume() == quote.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_ZLtr6_1() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_ZLtr6_2() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertEquals(updatedQuote.getSymbol(), quote.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_ZLtr6_3() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertTrue(updatedQuote.getPrice().compareTo(quote.getPrice()) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_ZLtr6_4() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertTrue(updatedQuote.getChange() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_ZLtr6_5() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertTrue(updatedQuote.getVolume() > quote.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_ELFN0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = new Integer(1);
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_AKzZ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = new AccountProfileDataBean();
        profile.setUserID("123");
        AccountDataBean account = new AccountDataBean();
        account.setOrders(new ArrayList<OrderDataBean>());
        profile.setAccount(account);
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("123");
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_mqiU0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        String symbol = quoteDataBean.getSymbol();
        QuoteDataBean result = tradeSLSBBean.getQuote(symbol);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_BqvQ0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean createdQuote = tradeSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
        assertNotNull(createdQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_wupN0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_wupN0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_wupN0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_wupN0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_wupN0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_wupN0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_wupN0_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndTwoPhase_dxQg0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int orderID = 123;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndNoTwoPhase_UgTM1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int orderID = 456;
        boolean twoPhase = false;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithNoOrderIDAndTwoPhase_ZHZw2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int orderID = 0;
        boolean twoPhase = true;
        tradeSLSBBean.queueOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertEquals("123", accountDataBean.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertTrue(accountDataBean.getBalance().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertTrue(accountDataBean.getOpenBalance().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertNotNull(accountDataBean.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertNotNull(accountDataBean.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertTrue(accountDataBean.getOrders().size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0_8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertNotNull(accountDataBean.getHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0_9() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertTrue(accountDataBean.getHoldings().size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0_10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertTrue(accountDataBean.getLoginCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0_11() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertTrue(accountDataBean.getLogoutCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountProfileData_Sbuf0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUserID");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountProfileData_Sbuf0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUserID");
        assertEquals("randomUserID", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountProfileData_Sbuf0_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUserID");
        assertTrue(accountProfileDataBean.hashCode() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testAnotherMethod_qTLG2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetImpl_SBAB0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int expected = TradeConfig.EJB3;
        int actual = tradeSLSBBean.getImpl();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell1_wtUe0_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 0;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user1", 1, orderProcessingMode);
        assertNotNull(actualOrderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell1_wtUe0_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 0;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user1", 1, orderProcessingMode);
        assertEquals("open", actualOrderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell2_nMNk1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 1;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user2", 2, orderProcessingMode);
        assertNotNull(actualOrderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell2_nMNk1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 1;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user2", 2, orderProcessingMode);
        assertEquals("open", actualOrderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell3_BFjN2_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 2;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user3", 3, orderProcessingMode);
        assertNotNull(actualOrderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell3_BFjN2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 2;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user3", 3, orderProcessingMode);
        assertEquals("open", actualOrderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell4_VYHq3_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 3;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user4", 4, orderProcessingMode);
        assertNotNull(actualOrderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell4_VYHq3_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 3;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user4", 4, orderProcessingMode);
        assertEquals("open", actualOrderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell5_HPzo4_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 4;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user5", 5, orderProcessingMode);
        assertNotNull(actualOrderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell5_HPzo4_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 4;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user5", 5, orderProcessingMode);
        assertEquals("open", actualOrderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister_roRd0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = AccountDataBean.getRandomInstance();
        String userID = account.getProfile().getUserID();
        String password = "password";
        String fullname = "fullname";
        String address = "address";
        String email = "email";
        String creditcard = "creditcard";
        BigDecimal openBalance = new BigDecimal(1000.0);
        AccountDataBean registeredAccount = tradeSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
        assertNotNull(registeredAccount);
        assertEquals(userID, registeredAccount.getProfile().getUserID());
        assertEquals(openBalance, registeredAccount.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_pZLH0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
        assertTrue(!holdings.isEmpty());
        for (HoldingDataBean holding : holdings) {
            assertNotNull(holding);
            assertNotNull(holding.getAccount());
            assertNotNull(holding.getAccount().getProfile());
            assertEquals(holding.getAccount().getProfile().getUserID(), userID);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_FwRP2() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
        assertEquals(updatedQuote.getSymbol(), quote.getSymbol());
        assertTrue(updatedQuote.getPrice().compareTo(quote.getPrice()) > 0);
        assertTrue(updatedQuote.getChange() > 0);
        assertTrue(updatedQuote.getVolume() > quote.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_OFsD3() {
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(null, changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
        assertTrue(updatedQuote.getPrice().compareTo(TradeConfig.PENNY_STOCK_PRICE) > 0);
        assertTrue(updatedQuote.getChange() > 0);
        assertTrue(updatedQuote.getVolume() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_EJBh4() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        double sharesTraded = Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), BigDecimal.ZERO, sharesTraded);
        assertNotNull(updatedQuote);
        assertEquals(updatedQuote.getSymbol(), quote.getSymbol());
        assertTrue(updatedQuote.getPrice().compareTo(quote.getPrice()) == 0);
        assertTrue(updatedQuote.getChange() == 0);
        assertTrue(updatedQuote.getVolume() > quote.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroSharesTraded_KDry5() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, 0);
        assertNotNull(updatedQuote);
        assertEquals(updatedQuote.getSymbol(), quote.getSymbol());
        assertTrue(updatedQuote.getPrice().compareTo(quote.getPrice()) > 0);
        assertTrue(updatedQuote.getChange() > 0);
        assertTrue(updatedQuote.getVolume() == quote.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_ZLtr6() {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random() * 1000;
        QuoteDataBean updatedQuote = new TradeSLSBBean().updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(updatedQuote);
        assertEquals(updatedQuote.getSymbol(), quote.getSymbol());
        assertTrue(updatedQuote.getPrice().compareTo(quote.getPrice()) > 0);
        assertTrue(updatedQuote.getChange() > 0);
        assertTrue(updatedQuote.getVolume() > quote.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_wupN0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("123", "password", "John Doe", "123 Main St", "johndoe@example.com", "1234567890123456");
        AccountProfileDataBean updatedProfileData = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
        assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
        assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
        assertEquals(profileData.getPassword(), updatedProfileData.getPassword());
        assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
        assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
        assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetAccountData_OMsE0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("123");
        assertNotNull(accountDataBean);
        assertEquals("123", accountDataBean.getProfileID());
        assertTrue(accountDataBean.getBalance().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(accountDataBean.getOpenBalance().compareTo(BigDecimal.ZERO) > 0);
        assertNotNull(accountDataBean.getCreationDate());
        assertNotNull(accountDataBean.getOrders());
        assertTrue(accountDataBean.getOrders().size() > 0);
        assertNotNull(accountDataBean.getHoldings());
        assertTrue(accountDataBean.getHoldings().size() > 0);
        assertTrue(accountDataBean.getLoginCount() > 0);
        assertTrue(accountDataBean.getLogoutCount() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountProfileData_Sbuf0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUserID");
        assertNotNull(accountProfileDataBean);
        assertEquals("randomUserID", accountProfileDataBean.getUserID());
        assertTrue(accountProfileDataBean.hashCode() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell1_wtUe0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 0;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user1", 1, orderProcessingMode);
        assertNotNull(actualOrderDataBean);
        assertEquals("open", actualOrderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell2_nMNk1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 1;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user2", 2, orderProcessingMode);
        assertNotNull(actualOrderDataBean);
        assertEquals("open", actualOrderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell3_BFjN2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 2;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user3", 3, orderProcessingMode);
        assertNotNull(actualOrderDataBean);
        assertEquals("open", actualOrderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell4_VYHq3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 3;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user4", 4, orderProcessingMode);
        assertNotNull(actualOrderDataBean);
        assertEquals("open", actualOrderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell5_HPzo4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        int orderProcessingMode = 4;
        OrderDataBean actualOrderDataBean = tradeSLSBBean.sell("user5", 5, orderProcessingMode);
        assertNotNull(actualOrderDataBean);
        assertEquals("open", actualOrderDataBean.getOrderStatus());
    }
}