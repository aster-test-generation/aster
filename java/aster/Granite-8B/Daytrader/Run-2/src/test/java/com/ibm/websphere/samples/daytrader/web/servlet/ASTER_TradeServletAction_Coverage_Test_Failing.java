/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeServletAction_Coverage_Test_Failing {
    private TradeServletAction tradeServletAction;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoWelcome1_Bobh0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    tradeServletAction.doWelcome(null, null, null, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoHome2_yYKz1() throws Exception {
	TradeServletAction tAction = new TradeServletAction();
	ServletContext ctx = mock(ServletContext.class);
	HttpServletRequest req = mock(HttpServletRequest.class);
	HttpServletResponse resp = mock(HttpServletResponse.class);
	String userID = "user2";
	String results = "results2";
	tAction.doHome(ctx, req, resp, userID, results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoHome3_HcDm2() throws Exception {
	TradeServletAction tAction = new TradeServletAction();
	ServletContext ctx = mock(ServletContext.class);
	HttpServletRequest req = mock(HttpServletRequest.class);
	HttpServletResponse resp = mock(HttpServletResponse.class);
	String userID = "user3";
	String results = "results3";
	tAction.doHome(ctx, req, resp, userID, results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoHome4_Fmga3() throws Exception {
	TradeServletAction tAction = new TradeServletAction();
	ServletContext ctx = mock(ServletContext.class);
	HttpServletRequest req = mock(HttpServletRequest.class);
	HttpServletResponse resp = mock(HttpServletResponse.class);
	String userID = "user4";
	String results = "results4";
	tAction.doHome(ctx, req, resp, userID, results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoHome5_Bheb4() throws Exception {
	TradeServletAction tAction = new TradeServletAction();
	ServletContext ctx = mock(ServletContext.class);
	HttpServletRequest req = mock(HttpServletRequest.class);
	HttpServletResponse resp = mock(HttpServletResponse.class);
	String userID = "user5";
	String results = "results5";
	tAction.doHome(ctx, req, resp, userID, results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoHome6_jSke5() throws Exception {
	TradeServletAction tAction = new TradeServletAction();
	ServletContext ctx = mock(ServletContext.class);
	HttpServletRequest req = mock(HttpServletRequest.class);
	HttpServletResponse resp = mock(HttpServletResponse.class);
	String userID = "user6";
	String results = "results6";
	tAction.doHome(ctx, req, resp, userID, results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoHome7_jMRW6() throws Exception {
	TradeServletAction tAction = new TradeServletAction();
	ServletContext ctx = mock(ServletContext.class);
	HttpServletRequest req = mock(HttpServletRequest.class);
	HttpServletResponse resp = mock(HttpServletResponse.class);
	String userID = "user7";
	String results = "results7";
	tAction.doHome(ctx, req, resp, userID, results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoHome8_oQgO7() throws Exception {
	TradeServletAction tAction = new TradeServletAction();
	ServletContext ctx = mock(ServletContext.class);
	HttpServletRequest req = mock(HttpServletRequest.class);
	HttpServletResponse resp = mock(HttpServletResponse.class);
	String userID = "user8";
	String results = "results8";
	tAction.doHome(ctx, req, resp, userID, results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoHome9_RVZe8() throws Exception {
	TradeServletAction tAction = new TradeServletAction();
	ServletContext ctx = mock(ServletContext.class);
	HttpServletRequest req = mock(HttpServletRequest.class);
	HttpServletResponse resp = mock(HttpServletResponse.class);
	String userID = "user9";
	String results = "results9";
	tAction.doHome(ctx, req, resp, userID, results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoHome10_MdWq9() throws Exception {
	TradeServletAction tAction = new TradeServletAction();
	ServletContext ctx = mock(ServletContext.class);
	HttpServletRequest req = mock(HttpServletRequest.class);
	HttpServletResponse resp = mock(HttpServletResponse.class);
	String userID = "user10";
	String results = "results10";
	tAction.doHome(ctx, req, resp, userID, results);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoAccountUpdate1_IgiD0() throws Exception {
	TradeServletAction tradeServletAction = new TradeServletAction();
	ServletContext ctx = null;
	HttpServletRequest req = null;
	HttpServletResponse resp = null;
	String userID = "";
	String password = "";
	String cpassword = "";
	String fullName = "";
	String address = "";
	String creditcard = "";
	String email = "";
	tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoRegister1_UPuG0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String passwd = "passwd1";
    String cpasswd = "passwd1";
    String fullname = "fullname1";
    String ccn = "ccn1";
    String openBalanceString = "100.0";
    String email = "email1";
    String address = "address1";
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(ctx).log("TradeAction:doRegister -- user=" + userID + " was created");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoRegister2_QIom1() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user2";
    String passwd = "passwd2";
    String cpasswd = "passwd2";
    String fullname = "fullname2";
    String ccn = "ccn2";
    String openBalanceString = "200.0";
    String email = "email2";
    String address = "address2";
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(ctx).log("TradeAction:doRegister -- user=" + userID + " was created");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoRegister3_TWQQ2() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user3";
    String passwd = "passwd3";
    String cpasswd = "passwd3";
    String fullname = "fullname3";
    String ccn = "ccn3";
    String openBalanceString = "300.0";
    String email = "email3";
    String address = "address3";
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(ctx).log("TradeAction:doRegister -- user=" + userID + " was created");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoRegister5_FVWM4() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user5";
    String passwd = "passwd5";
    String cpasswd = "passwd5";
    String fullname = "fullname5";
    String ccn = "ccn5";
    String openBalanceString = "500.0";
    String email = "email5";
    String address = "address5";
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(ctx).log("TradeAction:doRegister -- user=" + userID + " was created");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin1_LXxI0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String passwd = "passwd1";
    tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
    verify(ctx).log("TradeServletAction.doLogin(...): Logging in " + userID);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoLogin9_jYwA8() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String passwd = "passwd1";
    tradeServletAction.doLogin(ctx, req, resp, userID, passwd);
}
}