/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryJSF_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenTSIA_DJJI0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal openTSIA = marketSummaryJSF.getOpenTSIA();
        assertNotNull(openTSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_ZuID0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertNotNull(gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_xCNh1() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertEquals(new BigDecimal("0"), gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_IvKV2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_hfRR3() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertFalse(gainPercent.compareTo(new BigDecimal("0")) == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_oHsZ4() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_MPbs6() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_qKkt8() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) == 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_gNYP13() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) == -10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenTSIA_VHdr0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal openTSIA = new BigDecimal(100);
        marketSummaryJSF.setOpenTSIA(openTSIA);
        assertEquals(openTSIA, marketSummaryJSF.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopGainers_dOrD0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = new QuoteData[10];
        marketSummaryJSF.setTopGainers(topGainers);
        assertNotEquals(topGainers, marketSummaryJSF.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_QXvq0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = new BigDecimal(0.01);
        marketSummaryJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, marketSummaryJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithZeroGainPercent_cVvO1() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = BigDecimal.ZERO;
        marketSummaryJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, marketSummaryJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithNegativeGainPercent_dyXH2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = new BigDecimal(-0.01);
        marketSummaryJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, marketSummaryJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithNullGainPercent_mRWD3() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = null;
        marketSummaryJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, marketSummaryJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_GXyk0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setVolume(10.0);
        assertEquals(10.0, marketSummaryJSF.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTSIA_ulaa0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal tSIA = marketSummaryJSF.getTSIA();
        assertNotNull(tSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVolume_RGIA0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        double volume = marketSummaryJSF.getVolume();
        assertEquals(0.0, volume, 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_vgWC5_fid2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) < 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_PdwG7_fid2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) <= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_jkbU9_fid2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) != 1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_mnMX10_fid2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) == -1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_dxwi11_fid2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) != -1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_dELc12_fid2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) == 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_gNYP13_fid2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0")) != 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopGainers_dOrD0_fid2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = new QuoteData[10];
        marketSummaryJSF.setTopGainers(topGainers);
        assertEquals(topGainers, marketSummaryJSF.getTopGainers());
    }
}