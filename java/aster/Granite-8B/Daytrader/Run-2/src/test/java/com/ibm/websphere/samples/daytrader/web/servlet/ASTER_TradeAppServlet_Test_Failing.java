/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppServlet_Test_Failing {
    TradeAppServlet tradeappservlet;
    HttpServlet httpservlet;
    ServletConfig servletconfig;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet() throws Exception {
        httpservlet = mock(HttpServlet.class);
        servletconfig = mock(ServletConfig.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        tradeappservlet = mock(TradeAppServlet.class);
        httpsession = mock(HttpSession.class);
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        when(tradeappservlet.getServletConfig()).thenReturn(servletconfig);
        tradeappservlet.doGet(httpservletrequest, httpservletresponse);
        verify(tradeappservlet).getServletConfig();
        verify(httpservletrequest).getSession();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_JXvN0() throws ServletException, IOException {
        TradeAppServlet servlet = new TradeAppServlet();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        when(httpservletrequest.getParameter("symbol")).thenReturn("TEST");
        when(httpservletrequest.getParameter("quantity")).thenReturn("100");
        when(httpservletrequest.getParameter("type")).thenReturn("BUY");
        tradeappservlet.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setContentType("text/html");
        verify(httpservletresponse).getWriter();
        verify(httpservletresponse.getWriter()).println("Trade was successful");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_NvVt0() throws ServletException, IOException {
        TradeAppServlet servlet = new TradeAppServlet();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetServletInfo_zgbX0() {
        TradeAppServlet tradeAppServlet = new TradeAppServlet();
        String expected = "TradeAppServlet provides the standard web interface to Trade";
        String actual = tradeAppServlet.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_emBT0() throws Exception {
        httpservlet = mock(HttpServlet.class);
        servletconfig = mock(ServletConfig.class);
        tradeappservlet = new TradeAppServlet();
        tradeappservlet.init(servletconfig);
        verify(servletconfig).getInitParameterNames();
        verify(servletconfig).getInitParameter("parm");
        TradeConfig.setConfigParam("parm", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_fid2() throws Exception {
        TradeAppServlet tradeappservlet = new TradeAppServlet();
        HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
        HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
        ServletConfig servletconfig = mock(ServletConfig.class);
        HttpSession httpsession = mock(HttpSession.class);
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        when(tradeappservlet.getServletConfig()).thenReturn(servletconfig);
        tradeappservlet.doGet(httpservletrequest, httpservletresponse);
        verify(tradeappservlet).getServletConfig();
        verify(httpservletrequest).getSession();
    }
}