/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession3_Test_Failing {
    private static String initTime = null;
    private static int hitCount = 0;
    PingSession3 pingsession3;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;
    private static int NUM_OBJECTS = 2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoPost() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        pingsession3 = new PingSession3();
        when(httpservletrequest.getSession(any())).thenReturn(httpsession);
        pingsession3.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletrequest, times(1)).getSession(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_pwHE0() {
        PingSession3 pingSession3 = new PingSession3();
        String servletInfo = pingSession3.getServletInfo();
        assertEquals("HTTP Session Object: Tests management of a large custom session class", servletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_EsAu1_ocbx0() throws ServletException, IOException {
        PingSession3 pingSession3 = new PingSession3();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingSession3.doPost(req, res);
        verify(req, times(1)).getParameter("num_objects");
        verify(res, times(1)).setContentType("text/html");
        verify(res, times(1)).getWriter();
        verify(res, times(1)).setHeader("SessionTrackingTest-largeSessionData", anyString());
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_vXjh0() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpsession = mock(HttpSession.class);
        pingsession3 = new PingSession3();
        when(httpservletrequest.getSession(anyBoolean())).thenReturn(httpsession);
        when(httpservletrequest.getParameter("num_objects")).thenReturn("2");
        pingsession3.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setContentType("text/html");
        verify(httpservletresponse).setHeader("SessionTrackingTest-largeSessionData", "16bytes");
        verify(httpservletresponse).getWriter();
        verify(httpservletresponse, times(1)).getWriter();
    }
}