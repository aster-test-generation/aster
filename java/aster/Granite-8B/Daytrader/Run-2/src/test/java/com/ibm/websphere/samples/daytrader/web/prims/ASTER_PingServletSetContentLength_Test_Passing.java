/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletSetContentLength_Test_Passing {
    @Mock
    HttpServlet httpServlet;
    @InjectMocks
    PingServletSetContentLength pingServletSetContentLength;
    @Mock
    HttpServletResponse httpServletResponse;
    @Mock
    HttpServletRequest httpServletRequest;
    @Mock
    ServletOutputStream servletOutputStream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        MockitoAnnotations.openMocks(this);
        pingServletSetContentLength.init(null);
        verify(httpServlet).init(any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        pingServletSetContentLength = new PingServletSetContentLength();
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        pingServletSetContentLength.doPost(httpServletRequest, httpServletResponse);
        verify(httpServletResponse).setContentType("text/plain");
        verify(httpServletResponse).setContentLength(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_gwGO0() {
        PingServletSetContentLength servlet = new PingServletSetContentLength();
        String actual = servlet.getServletInfo();
        String expected = "Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet() throws ServletException, IOException {
        pingServletSetContentLength = new PingServletSetContentLength();
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        pingServletSetContentLength.doGet(httpServletRequest, httpServletResponse);
        verify(httpServletResponse).setContentType("text/html");
        verify(httpServletResponse).getOutputStream();
        verify(servletOutputStream).println("<html><head><title>Ping Servlet</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet<BR></FONT><FONT size=\"+1\" color=\"#000066\">" + "</B></body></html>");
    }
}