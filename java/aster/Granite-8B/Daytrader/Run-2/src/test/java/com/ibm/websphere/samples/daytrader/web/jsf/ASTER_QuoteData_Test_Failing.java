/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteData_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainHTML_oVkY0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100), BigDecimal.valueOf(90), "ABC", BigDecimal.valueOf(110), BigDecimal.valueOf(80), "ABC Inc.", 1000.0, 10.0);
        String expected = FinancialUtils.printGainHTML(BigDecimal.valueOf(10));
        String actual = quoteData.getGainHTML();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRange_mLMo0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ONE, "symbol");
        String range = quoteData.getRange();
        assertNotNull(range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithNullPrice_VfNO2() {
        QuoteData quoteData = new QuoteData(null, BigDecimal.ONE, "symbol");
        String range = quoteData.getRange();
        assertEquals("", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithNullOpen_qZHH3() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE, null, "symbol");
        String range = quoteData.getRange();
        assertEquals("", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGain_fpzV0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        BigDecimal gain = quoteData.getGain();
        assertNotNull(gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainWithNullPrice_GZUW1() {
        QuoteData quoteData = new QuoteData(null, BigDecimal.ZERO, "symbol");
        BigDecimal gain = quoteData.getGain();
        assertEquals(BigDecimal.ZERO, gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainWithZeroGain_XqeE2() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        BigDecimal gain = quoteData.getGain();
        assertNull(BigDecimal.ZERO);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainWithPositiveGain_AJhu3() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ZERO, "symbol");
        BigDecimal gain = quoteData.getGain();
        assertNull(BigDecimal.ONE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpen_NyXO0() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100"), new BigDecimal("50"), "ABC", new BigDecimal("150"), new BigDecimal("0"), "XYZ", 1000.0, 100.0);
        BigDecimal expected = new BigDecimal("50");
        BigDecimal actual = quoteData.getOpen();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithNullPrice_KZkc1() {
        QuoteData quoteData = new QuoteData(null, BigDecimal.ZERO, "symbol");
        double change = quoteData.getChange();
        assertEquals(0.0, change, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeWithNullOpen_dIaS2() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, null, "symbol");
        double change = quoteData.getChange();
        assertEquals(0.0, change, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNullPrice_OdpB1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setPrice(null);
        assertNull(BigDecimal.ZERO);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithNullParameters_ngJx3() {
        QuoteData quoteData = new QuoteData(null, null, null);
        assertEquals(null, quoteData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_wJAD0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ONE, "symbol");
        BigDecimal gainPercent = quoteData.getGainPercent();
        assertNull(BigDecimal.ZERO);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGainPercentHTML_EKSB0() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100.0), BigDecimal.valueOf(105.0), "ABC", BigDecimal.valueOf(110.0), BigDecimal.valueOf(95.0), "ABC Corp", 10000.0, 5.0);
        String expected = "<span class=\"green\">(+5.0%)</span>";
        String actual = quoteData.getGainPercentHTML();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithNegativeValue_hOdu2_mHOO0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setGainPercent(BigDecimal.valueOf(-1.00));
        assertEquals(BigDecimal.valueOf(-1.00), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithLargeValue_yJOZ3_CrLk0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setGainPercent(BigDecimal.valueOf(1000.00));
        assertEquals(BigDecimal.valueOf(1000.00), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithSmallValue_SpZA4_nxhE0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setGainPercent(BigDecimal.valueOf(0.0001));
        assertEquals(BigDecimal.ZERO, quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithThreeDecimalPlaces_MHko6_Cspu0() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setGainPercent(BigDecimal.valueOf(0.1234567));
        assertEquals(BigDecimal.valueOf(0.123), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChangeHTMLWithNegativeChange_Auei0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), "AAPL");
        String expectedHTML = "<FONT color=\"#cc0000\">-10.00</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>";
        String actualHTML = quoteData.getChangeHTML();
        assertEquals(expectedHTML, actualHTML);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithNullSymbol_vLCV4_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ZERO, null);
        String range = quoteData.getRange();
        assertEquals("", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithZeroChange_sdpx5_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ONE, "symbol");
        String range = quoteData.getRange();
        assertEquals("", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithPositiveChange_Ztsl6_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ZERO, "symbol");
        String range = quoteData.getRange();
        assertEquals("1.00", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRangeWithNegativeChange_yelY7_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ONE, "symbol");
        String range = quoteData.getRange();
        assertEquals("-1.00", range);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_jgOx0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.valueOf(100.0), BigDecimal.valueOf(90.0), "ABC", BigDecimal.valueOf(110.0), BigDecimal.valueOf(80.0), "ABC Corp", 1000.0, 10.0);
        BigDecimal expectedPrice = BigDecimal.valueOf(100.0);
        BigDecimal actualPrice = quoteData.getPrice();
        assertEquals(expectedPrice, actualPrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainWithNullPrice_GZUW1_fid1() {
        QuoteData quoteData = new QuoteData(null, BigDecimal.ZERO, "symbol");
        BigDecimal gain = quoteData.getGain();
        assertNull(gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainWithZeroGain_XqeE2_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        BigDecimal gain = quoteData.getGain();
        assertEquals(BigDecimal.ZERO, gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainWithPositiveGain_AJhu3_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ONE, BigDecimal.ZERO, "symbol");
        BigDecimal gain = quoteData.getGain();
        assertEquals(BigDecimal.ONE, gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpen_NyXO0_fid1() {
        QuoteData quoteData = new QuoteData(new BigDecimal("100"), new BigDecimal("50"), "ABC", new BigDecimal("150"), new BigDecimal("0"), "XYZ", 1000.0, 50.0);
        BigDecimal expected = new BigDecimal("50");
        BigDecimal actual = quoteData.getOpen();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNullPrice_OdpB1_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setPrice(null);
        assertEquals(BigDecimal.ZERO, quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNegativePrice_RnCJ2_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setPrice(BigDecimal.valueOf(-1));
        assertEquals(BigDecimal.ZERO, quoteData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_wJAD0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ONE, "symbol");
        BigDecimal gainPercent = quoteData.getGainPercent();
        assertEquals(BigDecimal.ZERO, gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercentWithAllParameters_qazt1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ONE, "symbol", BigDecimal.TEN, BigDecimal.ONE, "companyName", 100.0, 10.0);
        BigDecimal gainPercent = quoteData.getGainPercent();
        assertEquals(BigDecimal.ZERO, gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithNegativeValue_hOdu2_mHOO0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setGainPercent(BigDecimal.valueOf(-1));
        assertEquals(BigDecimal.valueOf(-1), quoteData.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithLargeValue_yJOZ3_CrLk0_fid1() {
        QuoteData quoteData = new QuoteData(BigDecimal.ZERO, BigDecimal.ZERO, "symbol");
        quoteData.setGainPercent(BigDecimal.valueOf(1000));
        assertEquals(BigDecimal.valueOf(1000), quoteData.getGainPercent());
    }
}