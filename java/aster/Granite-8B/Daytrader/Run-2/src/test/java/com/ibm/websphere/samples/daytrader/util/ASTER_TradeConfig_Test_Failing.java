/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndQuantity_QTfi1() {
        float rndQuantity = TradeConfig.rndQuantity();
        assertEquals(140.0f, rndQuantity, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndQuantity2_YSaq2() {
        float rndQuantity = TradeConfig.rndQuantity();
        assertEquals(164.0f, rndQuantity, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioAction_newUser_false_HLRZ0() {
        boolean newUser = false;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('p', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserID_RND_USER_True_okhz0() {
        boolean RND_USER = true;
        String expectedUserID = "randomID";
        String userID = TradeConfig.getUserID();
        assertEquals(expectedUserID, userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserID_RND_USER_False_ZHdM1() {
        boolean RND_USER = false;
        String expectedUserID = "nextID";
        String userID = TradeConfig.getUserID();
        assertEquals(expectedUserID, userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioCount_XVPd0() {
        TradeConfig tradeConfig = new TradeConfig();
        int result = tradeConfig.getScenarioCount();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void rndCreditCardTest_cHKF0_2() {
        String result = TradeConfig.rndCreditCard();
        assertTrue(result.matches("\\d{4}-\\d{4}-\\d{4}-\\d{4}"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBigDecimal_hzQx0() {
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMAX_HOLDINGSWithNegativeNumber_wsHP3_hNgH0() {
        TradeConfig tradeConfig = new TradeConfig();
        tradeConfig.setMAX_HOLDINGS(-100);
        assertEquals(1000000, tradeConfig.getMAX_HOLDINGS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndEmail_Ahfi0_EZOF0() {
        String userID = "user123";
        String expected = userID.replace(":", "") + "@" + TradeConfig.rndInt(100) + ".com";
        String actual = TradeConfig.rndEmail(userID);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummaryInterval_yUUu0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        int expected = 10; // Replace with the expected value
        int actual = tradeConfig.getMarketSummaryInterval();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrimIterations_qIav0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        int result = tradeConfig.getPrimIterations();
        assertEquals(100, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_USERS_ieQZ0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        int expected = 10; // Replace with the expected value
        int actual = tradeConfig.getMAX_USERS();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_QUOTES_ImvT0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        int expected = 100;
        int actual = tradeConfig.getMAX_QUOTES();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndQuantity_QTfi1_fid1() {
        float rndQuantity = TradeConfig.rndQuantity();
        assertEquals(1.0f, rndQuantity, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndQuantity2_YSaq2_fid1() {
        float rndQuantity = TradeConfig.rndQuantity();
        assertEquals(201.0f, rndQuantity, 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequency_gsSR0_fid1() {
        int result = TradeConfig.getListQuotePriceChangeFrequency();
        assertEquals(10, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_HOLDINGS_GqGv0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        int expectedMAX_HOLDINGS = 100;
        int actualMAX_HOLDINGS = tradeConfig.getMAX_HOLDINGS();
        assertEquals(expectedMAX_HOLDINGS, actualMAX_HOLDINGS);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderFee_BUY_htNT0_fid1() {
        BigDecimal expected = BigDecimal.valueOf(100);
        BigDecimal actual = TradeConfig.getOrderFee("BUY");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderFee_SELL_xGUp1_fid1() {
        BigDecimal expected = BigDecimal.valueOf(100);
        BigDecimal actual = TradeConfig.getOrderFee("SELL");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderFee_other_ZGtJ2_fid1() {
        BigDecimal expected = BigDecimal.valueOf(50);
        BigDecimal actual = TradeConfig.getOrderFee("other");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioAction_newUser_false_HLRZ0_fid1() {
        boolean newUser = false;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('s', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getScenarioAction_newUser_true_wyNA1_fid1() {
        boolean newUser = true;
        char result = TradeConfig.getScenarioAction(newUser);
        assertTrue(result == 'b' || result == 's');
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetPage_aCtj0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        String page = tradeConfig.getPage(0);
        assertEquals("webUI[webInterface][0]", page);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUpdateQuotePrices_TGnh0_fid1() {
        boolean result = TradeConfig.getUpdateQuotePrices();
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeNames_UYNz0() {
        String[] expected = {"mode1", "mode2", "mode3"};
        String[] actual = TradeConfig.getOrderProcessingModeNames();
        assertEquals(expected.length, actual.length);
        for (int i = 0; i < expected.length; i++) {
            assertEquals(expected[i], actual[i]);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void rndCreditCardTest_cHKF0() {
        String result = TradeConfig.rndCreditCard();
        assertNotNull(result);
        assertTrue(result.matches("\\d{4}-\\d{4}-\\d{4}-\\d{4}"));
    }
}