/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.jms.ConnectionFactory;
import javax.jms.JMSContext;
import javax.jms.TextMessage;
import javax.jms.Topic;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBTopic_Test_Failing {
    @Mock
    private Topic mockTradeStreamerTopic;
    private Topic tradeStreamerTopic;
    @Mock
    private ConnectionFactory mockTopicConnectionFactory;
    private ConnectionFactory topicConnectionFactory;
    @Mock
    private JMSContext mockJMSContext;
    @Mock
    private HttpServletResponse httpServletResponse;
    @Mock
    private TextMessage mockTextMessage;
    private static String initTime;
    private static int hitCount;
    PingServlet2MDBTopic pingServlet2MDBTopic;
    HttpServlet httpServlet;
    PingServlet2MDBTopic pingservlet2mdbtopic;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_Uqei0() {
        PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
        String expected = "web primitive, configured with trade runtime configs, tests Servlet to Session EJB path";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithException_KTEc1() throws Exception {
        PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getContentType()).thenReturn("text/html");
        when(res.getWriter()).thenThrow(new IOException());
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
        verify(res).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_pliZ1_BFAO0() throws ServletException, IOException {
        PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
        MockHttpServletRequest req = new MockHttpServletRequest();
        MockHttpServletResponse res = new MockHttpServletResponse();
        servlet.doPost(req, res);
        assertTrue(true);
    }
}