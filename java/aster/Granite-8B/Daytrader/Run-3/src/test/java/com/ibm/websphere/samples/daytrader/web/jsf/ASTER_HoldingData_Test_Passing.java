/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_Alyq0() {
        HoldingData holdingData = new HoldingData();
        double quantity = holdingData.getQuantity();
        assertTrue(quantity >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_llXM0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = new BigDecimal("100.00");
        holdingData.setPrice(price);
        assertEquals(price, holdingData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPurchaseDate_PJtC0() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = holdingData.getPurchaseDate();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainHTML_hnlF0() {
        HoldingData holdingData = new HoldingData();
        String expectedGainHTML = FinancialUtils.printGainHTML(holdingData.getGain());
        String actualGainHTML = holdingData.getGainHTML();
        assertEquals(expectedGainHTML, actualGainHTML);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBasis_PMqi0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal basis = new BigDecimal("100");
        holdingData.setBasis(basis);
        assertEquals(basis, holdingData.getBasis());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteID_rkac0() {
        HoldingData holdingData = new HoldingData();
        String quoteID = holdingData.getQuoteID();
        assertNotNull(quoteID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithNullQuoteID_Rjsz1() {
        HoldingData holdingData = new HoldingData();
        String quoteID = holdingData.getQuoteID();
        assertNull(quoteID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithEmptyQuoteID_SVpI2_1() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuoteID("");
        String quoteID = holdingData.getQuoteID();
        assertNotNull(quoteID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithEmptyQuoteID_SVpI2_2() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuoteID("");
        String quoteID = holdingData.getQuoteID();
        assertTrue(quoteID.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithWhitespaceQuoteID_YWUG3_2() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuoteID("   ");
        String quoteID = holdingData.getQuoteID();
        assertTrue(quoteID.trim().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithNonWhitespaceQuoteID_vZHb4_1() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuoteID("non-empty");
        String quoteID = holdingData.getQuoteID();
        assertNotNull(quoteID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithNonWhitespaceQuoteID_vZHb4_2() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuoteID("non-empty");
        String quoteID = holdingData.getQuoteID();
        assertFalse(quoteID.trim().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_zZcT0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = new BigDecimal(100);
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_oTzg1_1() {
        HoldingData holdingData = new HoldingData();
        holdingData.setPurchasePrice(null);
        BigDecimal purchasePrice = new BigDecimal(100);
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(null, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_oTzg1_2() {
        HoldingData holdingData = new HoldingData();
        holdingData.setPurchasePrice(null);
        BigDecimal purchasePrice = new BigDecimal(100);
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_aVyD0_1() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date();
        holdingData.setPurchaseDate(purchaseDate);
        assertNotNull(holdingData.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_aVyD0_2() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date();
        holdingData.setPurchaseDate(purchaseDate);
        assertEquals(purchaseDate, holdingData.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuoteID_FKVr0() {
        HoldingData holdingData = new HoldingData();
        String quoteID = "12345";
        holdingData.setQuoteID(quoteID);
        assertEquals(quoteID, holdingData.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_bnNG0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = holdingData.getPrice();
        assertNotNull(price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGain_jeHC0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = holdingData.getGain();
        assertNotNull(gain);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_TPRF0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = BigDecimal.valueOf(100.0);
        holdingData.setGain(gain);
        assertEquals(gain, holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithNullGain_yRVD1() {
        HoldingData holdingData = new HoldingData();
        holdingData.setGain(null);
        assertNull(holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithZeroGain_Ggiq2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = BigDecimal.ZERO;
        holdingData.setGain(gain);
        assertEquals(gain, holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithNegativeGain_ugER3() {
        HoldingData holdingData = new HoldingData();
        BigDecimal gain = BigDecimal.valueOf(-100.0);
        holdingData.setGain(gain);
        assertEquals(gain, holdingData.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingID_XfDM0() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = holdingData.getHoldingID();
        assertNotNull(holdingID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMarketValue_RLzu0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = new BigDecimal(100);
        holdingData.setMarketValue(marketValue);
        assertEquals(marketValue, holdingData.getMarketValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBasis_FgkV0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expectedBasis = BigDecimal.ZERO; // Replace with the expected value
        BigDecimal actualBasis = holdingData.getBasis();
        assertEquals(expectedBasis, actualBasis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullGetBasis_oMKA1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal actualBasis = holdingData.getBasis();
        assertNull(actualBasis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGetBasis_qxdE2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal expectedBasis = BigDecimal.ONE; // Replace with the expected value
        holdingData.setBasis(expectedBasis);
        BigDecimal actualBasis = holdingData.getBasis();
        assertEquals(expectedBasis, actualBasis);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingID_Kuth0() {
        HoldingData holdingData = new HoldingData();
        Integer holdingID = 1;
        holdingData.setHoldingID(holdingID);
        assertEquals(holdingID, holdingData.getHoldingID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetMarketValue_AIHz4() {
        HoldingData holdingData = new HoldingData();
        BigDecimal marketValue = new BigDecimal(100);
        holdingData.setMarketValue(marketValue);
        BigDecimal result = holdingData.getMarketValue();
        assertEquals(marketValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPrice_nPFK5() {
        HoldingData holdingData = new HoldingData();
        BigDecimal price = new BigDecimal(100);
        holdingData.setPrice(price);
        BigDecimal result = holdingData.getPrice();
        assertEquals(price, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchasePrice_SJwe0() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = new BigDecimal(100);
        BigDecimal result = holdingData.getPurchasePrice();
        assertEquals(purchasePrice, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchasePriceWithNullPurchasePrice_iDUE1() {
        HoldingData holdingData = new HoldingData();
        BigDecimal result = holdingData.getPurchasePrice();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchasePriceWithZeroPurchasePrice_Izhj2() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = BigDecimal.ZERO;
        holdingData.setPurchasePrice(purchasePrice);
        BigDecimal result = holdingData.getPurchasePrice();
        assertEquals(purchasePrice, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityLargeNumber_qqBQ3_mHBY0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuantity(1000000000.5);
        assertEquals(1000000000.5, holdingData.getQuantity(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantitySmallNumber_IgGl4_NzHP0() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuantity(0.000000001);
        assertEquals(0.000000001, holdingData.getQuantity(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithEmptyQuoteID_SVpI2() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuoteID("");
        String quoteID = holdingData.getQuoteID();
        assertNotNull(quoteID);
        assertTrue(quoteID.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithWhitespaceQuoteID_YWUG3() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuoteID("   ");
        String quoteID = holdingData.getQuoteID();
        assertNotNull(quoteID);
        assertTrue(quoteID.trim().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuoteIDWithNonWhitespaceQuoteID_vZHb4() {
        HoldingData holdingData = new HoldingData();
        holdingData.setQuoteID("non-empty");
        String quoteID = holdingData.getQuoteID();
        assertNotNull(quoteID);
        assertFalse(quoteID.trim().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchasePrice_oTzg1() {
        HoldingData holdingData = new HoldingData();
        holdingData.setPurchasePrice(null);
        assertEquals(null, holdingData.getPurchasePrice());
        BigDecimal purchasePrice = new BigDecimal(100);
        holdingData.setPurchasePrice(purchasePrice);
        assertEquals(purchasePrice, holdingData.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPurchaseDate_aVyD0() {
        HoldingData holdingData = new HoldingData();
        Date purchaseDate = new Date();
        holdingData.setPurchaseDate(purchaseDate);
        assertNotNull(holdingData.getPurchaseDate());
        assertEquals(purchaseDate, holdingData.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPurchasePriceWithNegativePurchasePrice_StTO3() {
        HoldingData holdingData = new HoldingData();
        BigDecimal purchasePrice = BigDecimal.valueOf(-100);
        holdingData.setPurchasePrice(purchasePrice);
        BigDecimal result = holdingData.getPurchasePrice();
        assertEquals(purchasePrice, result);
    }
}