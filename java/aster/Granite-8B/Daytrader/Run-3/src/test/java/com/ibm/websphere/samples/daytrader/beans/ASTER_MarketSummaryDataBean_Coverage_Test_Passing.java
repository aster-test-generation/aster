/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import javax.json.Json;
import javax.json.JsonObject;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Coverage_Test_Passing {
    public void testJSON1_lGKL0() throws Exception {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        marketSummaryDataBean.setVolume(0);
        marketSummaryDataBean.setTopGainers(new HashSet<>());
        marketSummaryDataBean.setTopLosers(new HashSet<>());
        marketSummaryDataBean.setSummaryDate(new Date());
        JsonObject expected = Json.createObjectBuilder()
        .add("tsia", new BigDecimal(0))
        .add("volume", 0)
        .add("date", new Date().toString())
        .build();
        JsonObject actual = marketSummaryDataBean.toJSON();
    }

    public void testJSON2_BFKI1() throws Exception {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        marketSummaryDataBean.setVolume(0);
        marketSummaryDataBean.setTopGainers(new HashSet<>());
        marketSummaryDataBean.setTopLosers(new HashSet<>());
        marketSummaryDataBean.setSummaryDate(new Date());
        JsonObject expected = Json.createObjectBuilder()
        .add("tsia", new BigDecimal(0))
        .add("volume", 0)
        .add("date", new Date().toString())
        .build();
        JsonObject actual = marketSummaryDataBean.toJSON();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_CTBz0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        marketSummaryDataBean.setVolume(0);
        marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
        marketSummaryDataBean.setTopLosers(new ArrayList<QuoteDataBean>());
        String ret = marketSummaryDataBean.toString();
        assertNotNull(ret);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_xorl1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        marketSummaryDataBean.setVolume(0);
        marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
        marketSummaryDataBean.setTopLosers(new ArrayList<QuoteDataBean>());
        String ret = marketSummaryDataBean.toString();
        assertTrue(ret.contains("TSIA:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_ElyI2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        marketSummaryDataBean.setVolume(0);
        marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
        marketSummaryDataBean.setTopLosers(new ArrayList<QuoteDataBean>());
        String ret = marketSummaryDataBean.toString();
        assertTrue(ret.contains("openTSIA:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_VTnb3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        marketSummaryDataBean.setVolume(0);
        marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
        marketSummaryDataBean.setTopLosers(new ArrayList<QuoteDataBean>());
        String ret = marketSummaryDataBean.toString();
        assertTrue(ret.contains("gain:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString5_kcuV4() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        marketSummaryDataBean.setVolume(0);
        marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
        marketSummaryDataBean.setTopLosers(new ArrayList<QuoteDataBean>());
        String ret = marketSummaryDataBean.toString();
        assertTrue(ret.contains("volume:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString6_BjBI5() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        marketSummaryDataBean.setVolume(0);
        marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
        marketSummaryDataBean.setTopLosers(new ArrayList<QuoteDataBean>());
        String ret = marketSummaryDataBean.toString();
        assertTrue(ret.contains("Current Top Gainers:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString7_QyPG6() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        marketSummaryDataBean.setVolume(0);
        marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
        marketSummaryDataBean.setTopLosers(new ArrayList<QuoteDataBean>());
        String ret = marketSummaryDataBean.toString();
        assertTrue(ret.contains("Current Top Losers:"));
    }
}