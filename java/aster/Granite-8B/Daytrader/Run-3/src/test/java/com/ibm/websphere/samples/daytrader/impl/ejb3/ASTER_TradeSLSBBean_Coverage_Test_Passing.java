/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_TradeSLSBBean_Coverage_Test_Passing {
    private TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    private AccountDataBean accountDataBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn1_WJGY0() throws java.lang.Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 1000.0;
        double NetValue = 1200.0;
        double expected = 0.2;
        double actual = tradeSLSBBean.investmentReturn(investment, NetValue);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn2_tzuW1() throws java.lang.Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 500.0;
        double NetValue = 600.0;
        double expected = 0.4;
        double actual = tradeSLSBBean.investmentReturn(investment, NetValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn3_vXOM2() throws java.lang.Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 1500.0;
        double NetValue = 1800.0;
        double expected = 0.1333333333333333;
        double actual = tradeSLSBBean.investmentReturn(investment, NetValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister1_xRIa4() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithValidUserIDAndPassword_SCyS2() throws javax.transaction.RollbackException {
        String userID = "validUserID";
        String password = "validPassword";
        AccountProfileDataBean profile = new AccountProfileDataBean();
        AccountDataBean account = new AccountDataBean();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidUserID_hEbw3() throws javax.transaction.RollbackException {
        String userID = "invalidUserID";
        String password = "validPassword";
        AccountProfileDataBean profile = new AccountProfileDataBean();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidPassword_TkoB4() throws javax.transaction.RollbackException {
        String userID = "validUserID";
        String password = "invalidPassword";
        AccountProfileDataBean profile = new AccountProfileDataBean();
        AccountDataBean account = new AccountDataBean();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNullUserID_qEQz5() throws javax.transaction.RollbackException {
        String userID = null;
        String password = "validPassword";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNullPassword_sOgx6() throws javax.transaction.RollbackException {
        String userID = "validUserID";
        String password = null;
        AccountProfileDataBean profile = new AccountProfileDataBean();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithEmptyUserID_oJyo7() throws javax.transaction.RollbackException {
        String userID = "";
        String password = "validPassword";
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithEmptyPassword_vzTV8() throws javax.transaction.RollbackException {
        String userID = "validUserID";
        String password = "";
        AccountProfileDataBean profile = new AccountProfileDataBean();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImpl_hwdG0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        int impl = tradeSLSBBean.getImpl();
        assertEquals(TradeConfig.EJB3, impl);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase1_GCXz0() throws java.lang.Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setCompanyName("companyName");
        quoteDataBean.setHigh(new BigDecimal(100));
        quoteDataBean.setLow(new BigDecimal(100));
        quoteDataBean.setOpen(new BigDecimal(100));
        quoteDataBean.setPrice(new BigDecimal(100));
        quoteDataBean.setSymbol("symbol");
        quoteDataBean.setVolume(100);
        try {
            QuoteDataBean actualQuoteDataBean = tradeSLSBBean.pingTwoPhase("symbol");
            assertEquals(quoteDataBean.getCompanyName(), actualQuoteDataBean.getCompanyName());
            assertEquals(quoteDataBean.getHigh(), actualQuoteDataBean.getHigh());
            assertEquals(quoteDataBean.getLow(), actualQuoteDataBean.getLow());
            assertEquals(quoteDataBean.getOpen(), actualQuoteDataBean.getOpen());
            assertEquals(quoteDataBean.getPrice(), actualQuoteDataBean.getPrice());
            assertEquals(quoteDataBean.getSymbol(), actualQuoteDataBean.getSymbol());
            assertEquals(quoteDataBean.getVolume(), actualQuoteDataBean.getVolume());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_JPzd0() {
        tradeSLSBBean = new TradeSLSBBean();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithNullUserID_KPfs7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = mock(AccountProfileDataBean.class);
        when(profileData.getUserID()).thenReturn(null);
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(temp);
        assertTrue(temp.getUserID().isEmpty());
    }
}