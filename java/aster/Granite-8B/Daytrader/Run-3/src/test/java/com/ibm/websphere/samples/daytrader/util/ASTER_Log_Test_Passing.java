/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;

public class Aster_Log_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintObject_eprx0() {
        Log log = new Log();
        Object o = new Object();
        log.printObject(o);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStat_mgVZ0() {
        Log log = new Log();
        log.stat("Test message");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_IMaZ0() {
        Throwable e = new Throwable();
        String message = "Error message";
        Log.error(e, message);
        assertEquals(message + "\n\t", e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_ZOOi0() {
        Log log = new Log();
        log.trace("Message", "Param1", "Param2", "Param3", "Param4", "Param5");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoTrace_SKAU0() {
        Log log = new Log();
        boolean result = log.doTrace();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_qYxb0() {
        Log log = new Log();
        log.trace("Message", "parm1", "parm2", "parm3", "parm4");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTraceExit_SYQW0() {
        Log log = new Log();
        log.traceExit("Test message");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWarning_YwZs0() {
        Log log = new Log();
        log.warning("This is a warning message");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTraceInterceptor_QomK0() {
        Log log = new Log();
        String message = "This is a test message";
        Object parm1 = new Object();
        log.traceInterceptor(message, parm1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_iJxO0() {
        Log log = new Log();
        log.trace("Message", "parm1", "parm2", "parm3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_RbMf0() {
        Log log = new Log();
        String message = "This is a test message";
        log.print(message);
        assertEquals("This is a test message", message);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_fwUS0() {
        String msg1 = "This is the first message";
        String msg2 = "This is the second message";
        Throwable e = new Exception("This is the exception message");
        Log.error(msg1, msg2, e);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLog_yqPF0() {
        Log log = new Log();
        String message = "This is a test message";
        log.log(message);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDebug_hQBi0() {
        Log log = new Log();
        String message = "This is a debug message";
        log.debug(message);
        assertEquals("This is a debug message", message);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_AWZS0() {
        Log log = new Log();
        log.trace("Message", "parm1", "parm2", "parm3", "parm4", "parm5", "parm6", "parm7");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_Kjsj0() {
        Log log = new Log();
        log.trace("Message", "parm1", "parm2", "parm3", "parm4", "parm5", "parm6");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_uQtY0() {
        Throwable e = new Throwable();
        String msg1 = "Error message 1";
        String msg2 = "Error message 2";
        Log.error(e, msg1, msg2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_exel0() {
        Log log = new Log();
        String message = "This is a test message";
        log.trace(message);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoDebug_nIJC0() {
        boolean result = Log.doDebug();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrace_jriM0() {
        Log log = new Log();
        log.trace("Message", "Parameter1", "Parameter2");
        verify(log).trace("Message(Parameter1, Parameter2)");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_FDbI0() {
        Throwable e = new Throwable();
        String msg1 = "This is the first message";
        String msg2 = "This is the second message";
        String msg3 = "This is the third message";
        Log.error(e, msg1, msg2, msg3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintCollection_ttep0() {
        Log log = new Log();
        Collection<String> collection = new ArrayList<>();
        collection.add("Hello");
        collection.add("World");
        log.printCollection("Collection:", collection);
        verify(log).log("Collection:");
        verify(log).printCollection(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_EAuW0() {
        Throwable e = new Throwable();
        Log.error("Test message", e);
        verify(e).printStackTrace(System.out);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testError_lCzm0() {
        Throwable e = new Throwable();
        Log.error("msg1", "msg2", "msg3", e);
    }
}