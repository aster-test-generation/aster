/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Failing {
    @Test
    @Timeout(value = 3, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_vuBW0_1() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] runTimeModeNames = tradeConfig.getRunTimeModeNames();
        assertEquals(1, runTimeModeNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioAction1_ouOf0() {
        boolean newUser = true;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('h', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioAction2_cTXn1() {
        boolean newUser = false;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('h', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioAction3_Pmsk2() {
        boolean newUser = true;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('p', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioAction4_vLTR3() {
        boolean newUser = false;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('q', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomPriceChangeFactor2_tvbE1() {
        BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
        assertTrue(result.compareTo(BigDecimal.ONE) >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomPriceChangeFactor3_TSQD2() {
        BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
        assertTrue(result.compareTo(new BigDecimal(0.1)) <= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioCount_tEzx0() {
        TradeConfig tradeConfig = new TradeConfig();
        int result = tradeConfig.getScenarioCount();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndCreditCard_xbJV0_2() {
        String creditCard = TradeConfig.rndCreditCard();
        assertTrue(creditCard.matches("\\d{4}-\\d{4}-\\d{4}-\\d{4}"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBigDecimal_xdxd0_1() {
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_vuBW0_2_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] runTimeModeNames = tradeConfig.getRunTimeModeNames();
        assertEquals("LIVE", runTimeModeNames[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarketSummaryInterval_hwxt0() {
        TradeConfig tradeConfig = new TradeConfig();
        int result = tradeConfig.getMarketSummaryInterval();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_kfNY0_fid1() {
        assertTrue(TradeConfig.rndAddress().matches("\\d{4} \\w+ St."));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrimIterations_MHFO0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        int expectedIterations = 10; // Replace with the expected value
        int actualIterations = tradeConfig.getPrimIterations();
        assertEquals(expectedIterations, actualIterations);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_USERS_DwcM0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        int expected = 10; // Assuming MAX_USERS is set to 10
        int actual = tradeConfig.getMAX_USERS();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_QUOTES_IMUT0_fid1() {
        TradeConfig tradeConfig = new TradeConfig();
        int expected = 10; // Replace with the expected value
        int actual = tradeConfig.getMAX_QUOTES();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequency_hjNN0_fid1() {
        int expectedListQuotePriceChangeFrequency = 0; // Replace with the expected value
        int actualListQuotePriceChangeFrequency = TradeConfig.getListQuotePriceChangeFrequency();
        assertEquals(expectedListQuotePriceChangeFrequency, actualListQuotePriceChangeFrequency);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetJDBCDriverNeedsGlobalTransation_XNPf0_fid1() {
        boolean expected = true;
        boolean actual = TradeConfig.getJDBCDriverNeedsGlobalTransation();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderFee_BUY_Lcek0_fid1() {
        BigDecimal expected = new BigDecimal("10.00");
        BigDecimal actual = TradeConfig.getOrderFee("BUY");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderFee_SELL_rYvq1_fid1() {
        BigDecimal expected = new BigDecimal("15.00");
        BigDecimal actual = TradeConfig.getOrderFee("SELL");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderFee_invalidType_dzBw2_fid1() {
        BigDecimal expected = new BigDecimal("5.00");
        BigDecimal actual = TradeConfig.getOrderFee("invalidType");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioAction1_ouOf0_fid1() {
        boolean newUser = true;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('s', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioAction2_cTXn1_fid1() {
        boolean newUser = false;
        char result = TradeConfig.getScenarioAction(newUser);
        assertEquals('b', result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_vuBW0() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] runTimeModeNames = tradeConfig.getRunTimeModeNames();
        assertEquals(1, runTimeModeNames.length);
        assertEquals("LIVE", runTimeModeNames[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeNames_GFvx0() {
        String[] expected = {"mode1", "mode2", "mode3"};
        String[] actual = TradeConfig.getOrderProcessingModeNames();
        assertEquals(expected.length, actual.length);
        for (int i = 0; i < expected.length; i++) {
            assertEquals(expected[i], actual[i]);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndCreditCard_xbJV0() {
        String creditCard = TradeConfig.rndCreditCard();
        assertNotNull(creditCard);
        assertTrue(creditCard.matches("\\d{4}-\\d{4}-\\d{4}-\\d{4}"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBigDecimal_xdxd0() {
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
        assertEquals(new BigDecimal("0.0"), TradeConfig.rndBigDecimal(0.0f));
        assertTrue(true);
    }
}