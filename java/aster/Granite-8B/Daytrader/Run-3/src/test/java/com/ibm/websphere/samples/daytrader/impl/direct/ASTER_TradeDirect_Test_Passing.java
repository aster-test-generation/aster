/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.*;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Passing {
    TradeDirect tradedirect;
    Connection connection;
    DataSource datasource;
    Statement stmt;
    private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
    private static Integer marketSummaryLock = new Integer(0);
    private static long nextMarketSummary = System.currentTimeMillis();
    ResultSet resultset;
    PreparedStatement preparedstatement;
    private static String getAllQuotesSQL = "select * from quoteejb q";
    private boolean inSession = false;
    @Mock
    OrderDataBean orderDataBean;
    private static final String USER_ID = "user1";
    private static final int MAX_ORDERS = 5;
    @Mock
    private TradeDirect tradeDirect;
    @Mock
    private PreparedStatement preparedStatement;
    @Mock
    private ResultSet resultSet;
    @Mock
    private DataSource dataSource;
    private static String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
    @Mock
    private QuoteDataBean quoteDataBean;
    private static String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
    private  UserTransaction txn;
    @Mock
    private static final int HOLDING_COUNT = 5;
    @Mock
    private AccountDataBean accountDataBean;
    @Mock
    private AccountProfileDataBean accountProfileDataBean;
    AccountDataBean accountData;
    private ManagedExecutorService mes;
    private static String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
    private static String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
    private static String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
    private static BigDecimal ZERO = new BigDecimal(0.0);
    private static String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
    private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRecreateDBTables() throws Exception {
        connection = mock(Connection.class);
        datasource = mock(DataSource.class);
        stmt = mock(Statement.class);
        tradedirect = new TradeDirect();
        when(datasource.getConnection()).thenReturn(connection);
        when(connection.createStatement()).thenReturn(stmt);
        Object[] sqlBuffer = new Object[2];
        sqlBuffer[0] = "CREATE TABLE table1 (id INT)";
        sqlBuffer[1] = "CREATE TABLE table2 (id INT)";
        boolean success = tradedirect.recreateDBTables(sqlBuffer, null);
        verify(stmt, times(2)).executeUpdate((String) sqlBuffer[0]);
        verify(stmt, times(2)).executeUpdate((String) sqlBuffer[1]);
        assertTrue(success);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_lInm0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        double rnd1 = 0.5;
        double rnd2 = 0.7;
        double expected = rnd1 / rnd2;
        double actual = tradeDirect.investmentReturn(rnd1, rnd2);
        assertEquals(expected, actual, 0.0001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(tradeDirect.getOrders(USER_ID)).thenReturn(Collections.emptyList());
        when(dataSource.getConnection()).thenReturn(connection);
        when(connection.prepareStatement(anyString())).thenReturn(preparedStatement);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        Collection<OrderDataBean> orders = tradeDirect.getOrders(USER_ID);
        assertEquals(0, orders.size());
        verify(tradeDirect).getOrders(USER_ID);
        verify(dataSource).getConnection();
        verify(connection).prepareStatement(anyString());
        verify(preparedStatement).executeQuery();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders_BuBZ0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user1";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        assertNotNull(orderDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders_BuBZ0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user1";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        assertTrue(orderDataBeans.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrdersWithNullUserID_qXYy1_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = null;
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        assertNotNull(orderDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrdersWithNullUserID_qXYy1_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = null;
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        assertTrue(orderDataBeans.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrdersWithEmptyUserID_BXbE2_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        assertNotNull(orderDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrdersWithEmptyUserID_BXbE2_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        assertTrue(orderDataBeans.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_BFFF0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.queueOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_SnOp1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.queueOrder(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_roKe2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.queueOrder(3, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_TSDC0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = tradeDirect.pingTwoPhase(quoteDataBean.getSymbol());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_GFyV0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.logout("user123");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_SGPP0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.getAccountData(1);
        assertNotNull(accountData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_ZqYA0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_ZqYA0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
        assertEquals("closed", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithNullUserID_ERgL1_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Exception e = Assertions.assertThrows(Exception.class, () -> tradeDirect.sell(null, 1, TradeConfig.SYNCH));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidHoldingID_bNwZ2_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Exception e = Assertions.assertThrows(Exception.class, () -> tradeDirect.sell("user1", 0, TradeConfig.SYNCH));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidOrderProcessingMode_SzIW3_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Exception e = Assertions.assertThrows(Exception.class, () -> tradeDirect.sell("user1", 1, 3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_HxMu0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
        assertEquals("open", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidHoldingID_yUQl1_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1000, TradeConfig.SYNCH);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidHoldingID_yUQl1_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1000, TradeConfig.SYNCH);
        assertEquals("cancelled", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidUserID_vDJh2_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("invalidUser", 1, TradeConfig.SYNCH);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidUserID_vDJh2_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("invalidUser", 1, TradeConfig.SYNCH);
        assertEquals("cancelled", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithAsyncProcessing_OSqE3_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithAsyncProcessing_OSqE3_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH);
        assertEquals("open", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithAsync2PhaseProcessing_zeXE4_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH_2PHASE);
        assertNotNull(orderData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithAsync2PhaseProcessing_zeXE4_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH_2PHASE);
        assertEquals("open", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_AnWW0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_AnWW0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertTrue(holdingData.getQuantity() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_AnWW0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertTrue(holdingData.getPurchasePrice().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_AnWW0_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertTrue(holdingData.getPurchaseDate() != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_eMyI0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("0");
        assertNotNull(holdingDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_eMyI0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("0");
        assertEquals(10, holdingDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings2_lZGB1_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("1");
        assertNotNull(holdingDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings2_lZGB1_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("1");
        assertEquals(10, holdingDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder1_yqHP0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.cancelOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_pddg1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.cancelOrder(2, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_QoXL2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.cancelOrder(3, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithInvalidPassword_HasA1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.login("user1", "invalidPassword");
        } catch (Exception e) {
            assertTrue(e instanceof Exception);
            assertTrue(e.getMessage().equals("TradeDirect:login failure for user: user1\n\tIncorrect password-->user1:invalidPassword"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_aFZQ0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        AccountDataBean result = tradeDirect.getAccountData(userID);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_aFZQ0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        AccountDataBean result = tradeDirect.getAccountData(userID);
        assertEquals(accountDataBean.getProfileID(), result.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_aFZQ0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        AccountDataBean result = tradeDirect.getAccountData(userID);
        assertEquals(accountDataBean.getCreationDate(), result.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_aFZQ0_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        AccountDataBean result = tradeDirect.getAccountData(userID);
        assertEquals(accountDataBean.getLastLogin(), result.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_aFZQ0_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        AccountDataBean result = tradeDirect.getAccountData(userID);
        assertEquals(accountDataBean.getLoginCount(), result.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_aFZQ0_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        AccountDataBean result = tradeDirect.getAccountData(userID);
        assertEquals(accountDataBean.getLogoutCount(), result.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_aFZQ0_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        AccountDataBean result = tradeDirect.getAccountData(userID);
        assertEquals(accountDataBean.getBalance(), result.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_aFZQ0_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        AccountDataBean result = tradeDirect.getAccountData(userID);
        assertEquals(accountDataBean.getOpenBalance(), result.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_aFZQ0_9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        AccountDataBean result = tradeDirect.getAccountData(userID);
        assertEquals(accountDataBean.getOrders(), result.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_aFZQ0_10() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        AccountDataBean result = tradeDirect.getAccountData(userID);
        assertEquals(accountDataBean.getHoldings(), result.getHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountProfileData_ZCxZ0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = null;
        try {
            accountProfileData = tradeDirect.getAccountProfileData("user1");
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(accountProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_kNNk0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_kNNk0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_kNNk0_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_kNNk0_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_kNNk0_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_kNNk0_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_kNNk0_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_kNNk0_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_kNNk0_9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getChange(), updatedQuoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_Cjov1_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_Cjov1_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_Cjov1_3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_Cjov1_4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_Cjov1_5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_Cjov1_6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_Cjov1_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_Cjov1_8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_Cjov1_9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getChange(), updatedQuoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_tIqp0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.orderCompleted("user1", 123);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_Hvlp0_7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_Hvlp0_9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_lqKw0_1() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user1");
        profileData.setPassword("password1");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_lqKw0_2() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user1");
        profileData.setPassword("password1");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_lqKw0_3() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user1");
        profileData.setPassword("password1");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_lqKw0_4() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user1");
        profileData.setPassword("password1");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_lqKw0_5() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user1");
        profileData.setPassword("password1");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_lqKw0_6() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user1");
        profileData.setPassword("password1");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImpl_QbUz0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        int result = tradeDirect.getImpl();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetClosedOrders_CJls0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user123";
        Collection<OrderDataBean> orderDataBeans = null;
        try {
            orderDataBeans = tradeDirect.getClosedOrders(userID);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(orderDataBeans);
        assertTrue(orderDataBeans.size() > 0);
        for (OrderDataBean orderDataBean : orderDataBeans) {
            assertEquals("completed", orderDataBean.getOrderStatus());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderWithPrivateMethodsAndTwoPhase_LJmI2_pPop0() throws Exception {
        OrderDataBean orderData = new OrderDataBean();
        orderData.setOrderID(1);
        orderData.setOrderType("buy");
        orderData.setQuantity(100.0);
        orderData.setPrice(new BigDecimal(100.0));
        orderData.setOpenDate(new java.sql.Date(System.currentTimeMillis()));
        orderData.setCompletionDate(new java.sql.Date(System.currentTimeMillis()));
        orderData.setOrderStatus("open");
        orderData.setAccount(new AccountDataBean());
        orderData.setHolding(new HoldingDataBean());
        orderData.setQuote(new QuoteDataBean());
        TradeDirect tradeDirect = new TradeDirect();
        tradeDirect.completeOrder(orderData.getOrderID(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderTwoPhase_xNPD1_BKAk0() throws Exception {
        OrderDataBean orderData = new OrderDataBean();
        orderData.setOrderID(1);
        orderData.setOrderType("buy");
        orderData.setQuantity(100.0);
        orderData.setPrice(new BigDecimal(100.0));
        orderData.setOpenDate(new java.sql.Date(System.currentTimeMillis()));
        orderData.setCompletionDate(new java.sql.Timestamp(System.currentTimeMillis()));
        orderData.setOrderStatus("open");
        orderData.setAccount(new AccountDataBean());
        orderData.getAccount().setAccountID(1);
        orderData.setHolding(new HoldingDataBean());
        orderData.getHolding().setHoldingID(1);
        orderData.setQuote(new QuoteDataBean());
        orderData.getQuote().setSymbol("symbol");
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = mock(Connection.class);
        when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
        when(conn.createStatement()).thenReturn(mock(Statement.class));
        OrderDataBean result = tradeDirect.completeOrder(1, true);
        verify(conn, times(1)).prepareStatement(anyString());
        verify(conn, times(1)).createStatement();
        assertEquals(orderData, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders_BuBZ0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "user1";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        assertNotNull(orderDataBeans);
        assertTrue(orderDataBeans.size() <= 5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrdersWithNullUserID_qXYy1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = null;
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        assertNotNull(orderDataBeans);
        assertTrue(orderDataBeans.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrdersWithEmptyUserID_BXbE2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        String userID = "";
        Collection<OrderDataBean> orderDataBeans = tradeDirect.getOrders(userID);
        assertNotNull(orderDataBeans);
        assertTrue(orderDataBeans.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_ZqYA0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
        assertNotNull(orderData);
        assertEquals("closed", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithNullUserID_ERgL1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Exception e = Assertions.assertThrows(Exception.class, () -> tradeDirect.sell(null, 1, TradeConfig.SYNCH));
        assertEquals("TradeDirect:sell -- error selling stock -- unable to find:  \n\taccount=null\n\tholding=null\n\tquote=null\nfor user: null and holdingID: 1", e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidHoldingID_bNwZ2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Exception e = Assertions.assertThrows(Exception.class, () -> tradeDirect.sell("user1", 0, TradeConfig.SYNCH));
        assertEquals("TradeDirect:sell -- error selling stock -- unable to find:  \n\taccount=null\n\tholding=null\n\tquote=null\nfor user: user1 and holdingID: 0", e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidOrderProcessingMode_SzIW3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Exception e = Assertions.assertThrows(Exception.class, () -> tradeDirect.sell("user1", 1, 3));
        assertEquals("TradeDirect:sell -- error selling stock -- unable to find:  \n\taccount=null\n\tholding=null\n\tquote=null\nfor user: user1 and holdingID: 1", e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_HxMu0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
        assertNotNull(orderData);
        assertEquals("open", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidHoldingID_yUQl1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1000, TradeConfig.SYNCH);
        assertNotNull(orderData);
        assertEquals("cancelled", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithInvalidUserID_vDJh2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("invalidUser", 1, TradeConfig.SYNCH);
        assertNotNull(orderData);
        assertEquals("cancelled", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithAsyncProcessing_OSqE3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH);
        assertNotNull(orderData);
        assertEquals("open", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSellWithAsync2PhaseProcessing_zeXE4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH_2PHASE);
        assertNotNull(orderData);
        assertEquals("open", orderData.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHolding_AnWW0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        HoldingDataBean holdingData = tradeDirect.getHolding(1);
        assertNotNull(holdingData);
        assertTrue(holdingData.getQuantity() > 0);
        assertTrue(holdingData.getPurchasePrice().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(holdingData.getPurchaseDate() != null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_eMyI0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("0");
        assertNotNull(holdingDataBeans);
        assertEquals(10, holdingDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings2_lZGB1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Collection<HoldingDataBean> holdingDataBeans = tradeDirect.getHoldings("1");
        assertNotNull(holdingDataBeans);
        assertEquals(10, holdingDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetConnPublic_Fzsr0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        Connection conn = tradeDirect.getConnPublic();
        assertNotNull(conn);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginWithNonExistentUser_miXs2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.login("nonExistentUser", "password");
        } catch (Exception e) {
            assertTrue(e instanceof Exception);
            assertTrue(e.getMessage().equals("Cannot find account fornonExistentUser"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_aFZQ0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountDataBean = AccountDataBean.getRandomInstance();
        String userID = accountDataBean.getProfileID();
        AccountDataBean result = tradeDirect.getAccountData(userID);
        assertNotNull(result);
        assertEquals(accountDataBean.getProfileID(), result.getProfileID());
        assertEquals(accountDataBean.getCreationDate(), result.getCreationDate());
        assertEquals(accountDataBean.getLastLogin(), result.getLastLogin());
        assertEquals(accountDataBean.getLoginCount(), result.getLoginCount());
        assertEquals(accountDataBean.getLogoutCount(), result.getLogoutCount());
        assertEquals(accountDataBean.getBalance(), result.getBalance());
        assertEquals(accountDataBean.getOpenBalance(), result.getOpenBalance());
        assertEquals(accountDataBean.getOrders(), result.getOrders());
        assertEquals(accountDataBean.getHoldings(), result.getHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt_kNNk0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
        assertEquals(quoteDataBean.getVolume() + sharesTraded, updatedQuoteDataBean.getVolume(), 0.01);
        assertEquals(quoteDataBean.getChange(), updatedQuoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithZeroSharesTraded_Cjov1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0;
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume(), 0.01);
        assertEquals(quoteDataBean.getChange(), updatedQuoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeIntWithNegativeSharesTraded_qPMK2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random();
        boolean publishQuotePriceChange = true;
        QuoteDataBean updatedQuoteDataBean = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(updatedQuoteDataBean);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume(), 0.01);
        assertEquals(quoteDataBean.getChange(), updatedQuoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeInt1_Hvlp0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        boolean publishQuotePriceChange = Math.random() > 0.5;
        QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(quoteDataBean.getSymbol(), changeFactor, sharesTraded, publishQuotePriceChange);
        assertNotNull(result);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
        assertEquals(quoteDataBean.getCompanyName(), result.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), result.getPrice());
        assertEquals(quoteDataBean.getOpen(), result.getOpen());
        assertEquals(quoteDataBean.getLow(), result.getLow());
        assertEquals(quoteDataBean.getChange(), result.getChange(), 0.0);
        assertEquals(quoteDataBean.getHigh(), result.getHigh());
        assertEquals(quoteDataBean.getVolume(), result.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_lqKw0() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user1");
        profileData.setPassword("password1");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("john.doe@example.com");
        profileData.setCreditCard("1234567890123456");
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
        assertEquals(profileData.getUserID(), updatedProfileData.getUserID());
        assertEquals(profileData.getFullName(), updatedProfileData.getFullName());
        assertEquals(profileData.getAddress(), updatedProfileData.getAddress());
        assertEquals(profileData.getEmail(), updatedProfileData.getEmail());
        assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    }
}