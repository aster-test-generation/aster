/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessMode_crwO0() {
        TradeConfig tradeConfig = new TradeConfig();
        int accessMode = tradeConfig.getAccessMode();
        assertEquals(0, accessMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFloat_bwde1() {
        float result = TradeConfig.rndFloat(10);
        assertTrue(result >= 0 && result < 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeModeNames_vuBW0_2() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] runTimeModeNames = tradeConfig.getRunTimeModeNames();
        assertEquals("Full EJB3", runTimeModeNames[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarketSummaryInterval_hwxt20() {
        TradeConfig tradeConfig = new TradeConfig();
        int result = tradeConfig.getMarketSummaryInterval();
        assertEquals(20, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndAddress_kfNY0() {
        assertFalse(TradeConfig.rndAddress().matches("\\d{4} \\w+ St."));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrimIterations_MHFO0() {
        TradeConfig tradeConfig = new TradeConfig();
        int expectedIterations = 1; // Replace with the expected value
        int actualIterations = tradeConfig.getPrimIterations();
        assertEquals(expectedIterations, actualIterations);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetJDBCDriverNeedsGlobalTransation_XGPf0() {
        TradeConfig.setJDBCDriverNeedsGlobalTransation(true);
        assertEquals(true, TradeConfig.JDBCDriverNeedsGlobalTransation);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_utfJ0_1() {
        String result = TradeConfig.rndFullName();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_utfJ0_2() {
        String result = TradeConfig.rndFullName();
        assertTrue(result.contains("first:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_utfJ0_3() {
        String result = TradeConfig.rndFullName();
        assertTrue(result.contains(" last:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_utfJ0_4() {
        String result = TradeConfig.rndFullName();
        assertTrue(result.contains("first:") && result.contains(" last:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetScenarioMixes_YrQS0() {
        int[][] expected = TradeConfig.getScenarioMixes();
        int[][] actual = TradeConfig.getScenarioMixes();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_USERS_DwcM0() {
        TradeConfig tradeConfig = new TradeConfig();
        int expected = 15000; // Assuming MAX_USERS is set to15000
        int actual = tradeConfig.getMAX_USERS();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMAX_QUOTES_IMUT0() {
        TradeConfig tradeConfig = new TradeConfig();
        int expected = 10000; // Replace with the expected value
        int actual = tradeConfig.getMAX_QUOTES();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndQuantity_AEuS0() {
        float result = TradeConfig.rndQuantity();
        assertTrue(result >= 1.0f && result <= 201.0f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongRun_COZt0() {
        TradeConfig tradeConfig = new TradeConfig();
        boolean longRun = tradeConfig.getLongRun();
        assertTrue(longRun);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetListQuotePriceChangeFrequency_hjNN0() {
        int expectedListQuotePriceChangeFrequency = 100; // Replace with the expected value
        int actualListQuotePriceChangeFrequency = TradeConfig.getListQuotePriceChangeFrequency();
        assertEquals(expectedListQuotePriceChangeFrequency, actualListQuotePriceChangeFrequency);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDisplayOrderAlerts_CcgQ0() {
        boolean displayOrderAlerts = TradeConfig.getDisplayOrderAlerts();
        assertTrue(displayOrderAlerts);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetJDBCDriverNeedsGlobalTransation_XNPf0() {
        boolean expected = false;
        boolean actual = TradeConfig.getJDBCDriverNeedsGlobalTransation();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndPrice_wMim0() {
        float result = TradeConfig.rndPrice();
        assertTrue(result >= 1.0f && result <= 201.0f);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderFee_BUY_Lcek0() {
        BigDecimal expected = new BigDecimal("24.95");
        BigDecimal actual = TradeConfig.getOrderFee("BUY");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderFee_SELL_rYvq1() {
        BigDecimal expected = new BigDecimal("24.95");
        BigDecimal actual = TradeConfig.getOrderFee("SELL");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderFee_invalidType_dzBw2() {
        BigDecimal expected = new BigDecimal("0.0");
        BigDecimal actual = TradeConfig.getOrderFee("invalidType");
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetMAX_HOLDINGS_gGaw0() {
        assertEquals(10, TradeConfig.getMAX_HOLDINGS());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWebInterfaceNames_ifhz0_1() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] webInterfaceNames = tradeConfig.getWebInterfaceNames();
        assertNotNull(webInterfaceNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWebInterfaceNames_ifhz0_2() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] webInterfaceNames = tradeConfig.getWebInterfaceNames();
        assertNotEquals(0, webInterfaceNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserID_DUlu0_1() {
        String userID = TradeConfig.nextUserID();
        assertNotNull(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserID_DUlu0_2() {
        String userID = TradeConfig.nextUserID();
        assertTrue(userID.startsWith("uid:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserIDBranchCoverage_pNoa1() {
        String userID = TradeConfig.nextUserID();
        assertEquals("uid:1", userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserIDBranchCoverage_nKzH3() {
        String userID = TradeConfig.nextUserID();
        assertEquals("uid:0", userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBoolean_sSyA0() {
        boolean result = TradeConfig.rndBoolean();
        assertTrue(result == true || result == false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testUpdateQuotePrices_fdJx0() {
        boolean updateQuotePrices = TradeConfig.getUpdateQuotePrices();
        assertTrue(updateQuotePrices);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPublishQuotePriceChange_XZMi0() {
        boolean result = TradeConfig.getPublishQuotePriceChange();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingModeNames_GFvx0_1() {
        String[] expected = {"mode1", "mode2", "mode3"};
        String[] actual = TradeConfig.getOrderProcessingModeNames();
        for (int i = 0; i < expected.length; i++) {
        }
        assertEquals(expected.length, actual.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWebInterface_DSim0() {
        TradeConfig tradeConfig = new TradeConfig();
        int result = tradeConfig.getWebInterface();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndInt_oLjN0() {
        int result = TradeConfig.rndInt(10);
        assertTrue(result >= 0 && result < 10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderProcessingMode_hwIm0() {
        TradeConfig tradeConfig = new TradeConfig();
        int expectedOrderProcessingMode = 0;
        int actualOrderProcessingMode = tradeConfig.getOrderProcessingMode();
        assertEquals(expectedOrderProcessingMode, actualOrderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_NullParameter_YeXr0() {
        TradeConfig.setConfigParam(null, "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_EmptyParameter_WoDy1() {
        TradeConfig.setConfigParam("", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_NullParameterValue_WQpB2() {
        TradeConfig.setConfigParam("parameter", null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_EmptyParameterValue_VIDJ3() {
        TradeConfig.setConfigParam("parameter", "");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_OrderProcessingMode_RPCL4() {
        TradeConfig.setConfigParam("orderProcessingMode", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_AccessMode_JSHi5() {
        TradeConfig.setConfigParam("accessMode", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_WebInterface_pGWZ6() {
        TradeConfig.setConfigParam("webInterface", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_MaxUsers_bqPO7() {
        TradeConfig.setConfigParam("maxUsers", "100");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_MaxQuotes_jRUU8() {
        TradeConfig.setConfigParam("maxQuotes", "100");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_PrimIterations_bcUM9() {
        TradeConfig.setConfigParam("primIterations", "100");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetConfigParam_InvalidParameter_QOPG10() {
        TradeConfig.setConfigParam("invalidParameter", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandom_ccXS0() {
        double randomValue = TradeConfig.random();
        assertTrue(randomValue >= 0.0 && randomValue < 1.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbols1_PXSZ0() {
        String symbols = TradeConfig.rndSymbols();
        assertNotNull(symbols);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbols2_zfYC1() {
        String symbols = TradeConfig.rndSymbols();
        assertTrue(symbols.length() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbols3_GlOS2() {
        String symbols = TradeConfig.rndSymbols();
        String[] symbolArray = symbols.split(",");
        int numSymbols = symbolArray.length;
        assertTrue(numSymbols <= TradeConfig.QUOTES_PER_PAGE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRandomPriceChangeFactor_BKWw0() {
        BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
        assertTrue(result.compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserID_RND_USER_True_GLxV0() {
        TradeConfig tradeConfig = new TradeConfig();
        String userID = tradeConfig.getUserID();
        assertNotNull(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbol_dZFb0_1() {
        String result = TradeConfig.rndSymbol();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbol_dZFb0_2() {
        String result = TradeConfig.rndSymbol();
        assertTrue(result.startsWith("s:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbol_dZFb2_3() {
        String result = TradeConfig.rndSymbol();
        assertTrue(result.length() > 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndCreditCard_xbJV0_1() {
        String creditCard = TradeConfig.rndCreditCard();
        assertNotNull(creditCard);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRunTimeMode_Ogin0() {
        TradeConfig tradeConfig = new TradeConfig();
        int actual = tradeConfig.getRunTimeMode();
        int expected = 0; // Assuming the default value of runTimeMode is 0
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndBalance_JxOn0() {
        String expected = "1000000";
        String actual = TradeConfig.rndBalance();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRndBigDecimal_xdxd0_11() {
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndFullName_utfJ0() {
        String result = TradeConfig.rndFullName();
        assertNotNull(result);
        assertTrue(result.contains("first:"));
        assertTrue(result.contains(" last:"));
        assertTrue(result.contains("first:") && result.contains(" last:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWebInterfaceNames_ifhz0() {
        TradeConfig tradeConfig = new TradeConfig();
        String[] webInterfaceNames = tradeConfig.getWebInterfaceNames();
        assertNotNull(webInterfaceNames);
        assertNotEquals(0, webInterfaceNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextUserID_DUlu0() {
        String userID = TradeConfig.nextUserID();
        assertNotNull(userID);
        assertTrue(userID.startsWith("uid:"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRndSymbol_dZFb0() {
        String result = TradeConfig.rndSymbol();
        assertNotNull(result);
        assertTrue(result.startsWith("s:"));
        assertTrue(result.length() > 2);
    }
}