/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2TwoPhase_Test_Passing {
    private static int hitCount;
    private static String initTime;
    PingServlet2TwoPhase pingservlet2twophase;
    HttpServlet httpservlet;
    @Mock
    HttpServletRequest req;
    @Mock
    HttpServletResponse res;
    @InjectMocks
    PingServlet2TwoPhase pingServlet;
    private TradeServices tradeSLSBLocal;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservlet2twophase = new PingServlet2TwoPhase();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingServlet2TwoPhase
        pingservlet2twophase.init(httpservlet);
        // Verify that the hitCount and initTime variables are initialized to 0 and a valid date, respectively
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservlet2twophase = new PingServlet2TwoPhase();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingServlet2TwoPhase
        pingservlet2twophase.init(httpservlet);
        // Verify that the hitCount and initTime variables are initialized to 0 and a valid date, respectively
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws ServletException, IOException {
        pingServlet.doPost(req, res);
        verify(req, times(1)).getAttribute("name");
        verify(res, times(1)).getWriter();
        verify(res, times(1)).setContentType("text/html");
        verify(res, times(1)).setStatus(HttpServletResponse.SC_OK);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_CEHS0() {
        PingServlet2TwoPhase pingServlet2TwoPhase = new PingServlet2TwoPhase();
        String servletInfo = pingServlet2TwoPhase.getServletInfo();
        assertEquals("web primitive, tests Servlet to Session to Entity EJB and JMS -- 2-phase commit path", servletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservlet2twophase = new PingServlet2TwoPhase();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingServlet2TwoPhase
        pingservlet2twophase.init(httpservlet);
        // Verify that the hitCount and initTime variables are initialized to 0 and a valid date, respectively
        assertEquals(0, hitCount);
        assertNotNull(initTime);
    }
}