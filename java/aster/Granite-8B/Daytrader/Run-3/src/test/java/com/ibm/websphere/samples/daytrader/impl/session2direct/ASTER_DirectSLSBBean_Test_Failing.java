/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
    @Mock
    private AccountDataBean account;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    @InjectMocks
    private DirectSLSBBean directSLSBBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0)).thenReturn(new OrderDataBean());
        OrderDataBean order = directSLSBBean.createOrder(account, quote, holding, "BUY", 100.0);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_ZOVc0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Collection<?> allQuotes = directSLSBBean.getAllQuotes();
        assertNotNull(allQuotes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_ZOVc0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Collection<?> allQuotes = directSLSBBean.getAllQuotes();
        assertTrue(allQuotes.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_YFqB0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_OGne0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 123;
        boolean twoPhase = true;
        directSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_YnIB1() throws Exception {
        String userID = "user1";
        Collection<?> orders = directSLSBBean.getOrders(userID);
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_QMDB0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 100.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
        assertNotNull(updatedQuoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_QMDB0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 100.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_QMDB0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 100.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_QMDB0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 100.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_QMDB0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 100.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_QMDB0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 100.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
        assertEquals(quoteDataBean.getChange(), updatedQuoteDataBean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_QMDB0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 100.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_QMDB0_8() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 100.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_QMDB0_9() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 100.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_SchS0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setCompanyName("Company A");
        quoteDataBean.setPrice(new BigDecimal(100.00));
        quoteDataBean.setOpen(new BigDecimal(90.00));
        quoteDataBean.setLow(new BigDecimal(80.00));
        quoteDataBean.setChange(10.00);
        quoteDataBean.setHigh(new BigDecimal(110.00));
        quoteDataBean.setSymbol("A");
        quoteDataBean.setVolume(1000.00);
        QuoteDataBean result = directSLSBBean.getQuote("A");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_nTLu0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = directSLSBBean.getAccountProfileData("randomUserID");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ULnT0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ULnT0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("user123", updatedProfileData.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ULnT0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("password123", updatedProfileData.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ULnT0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("John Doe", updatedProfileData.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ULnT0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("123 Main St", updatedProfileData.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ULnT0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("johndoe@example.com", updatedProfileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ULnT0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertEquals("1234567890123456", updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testPingTwoPhase_FUrv0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(quoteDataBean.getSymbol());
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testPingTwoPhase_FUrv0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(quoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testPingTwoPhase_FUrv0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(quoteDataBean.getSymbol());
        assertTrue(result.getPrice().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testPingTwoPhase_FUrv0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(quoteDataBean.getSymbol());
        assertTrue(result.getOpen().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testPingTwoPhase_FUrv0_5() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(quoteDataBean.getSymbol());
        assertTrue(result.getLow().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testPingTwoPhase_FUrv0_6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(quoteDataBean.getSymbol());
        assertTrue(result.getHigh().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testPingTwoPhase_FUrv0_7() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(quoteDataBean.getSymbol());
        assertTrue(result.getVolume() > 0);
    }

    @Test
    @Timeout(value = 2, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImpl_FTKu0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        int result = directSLSBBean.getImpl();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithAsyncProcessing_vgef0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithAsyncProcessing_vgef0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertEquals(orderDataBean.getOrderID(), result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithSyncProcessing_juNZ1_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithSyncProcessing_juNZ1_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertEquals(orderDataBean.getOrderID(), result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_bxTP0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        String userID = "user123";
        Collection<?> closedOrders = directSLSBBean.getClosedOrders(userID);
        assertNotNull(closedOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCompleteOrderAsync_xzcv0_1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 123;
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        OrderDataBean orderDataBean = future.get();
        assertNotNull(future);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCompleteOrderAsync_xzcv0_2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 123;
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        OrderDataBean orderDataBean = future.get();
        assertTrue(future.isDone());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCompleteOrderAsync_xzcv0_3() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 123;
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        OrderDataBean orderDataBean = future.get();
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCompleteOrderAsync_xzcv0_4() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 123;
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        OrderDataBean orderDataBean = future.get();
        assertEquals(orderID, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_MSDJ0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.logout("user123");
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_XwYR2() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.login("user123", "password123");
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_lFln6() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.getQuote("stock123");
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_jUmC5_UWKm0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.createQuote("stock123", "company123", new BigDecimal(100.0));
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData_BukH0_kgCH0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean accountDataBean = null;
        try {
            accountDataBean = directSLSBBean.getAccountData("123");
        } catch (Exception e) {
            e.printStackTrace();
        }
        assertNotNull(accountDataBean);
        assertTrue(accountDataBean.getBalance().compareTo(BigDecimal.ZERO) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_ZOVc0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Collection<?> allQuotes = directSLSBBean.getAllQuotes();
        assertNotNull(allQuotes);
        assertTrue(allQuotes.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_QMDB0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal newPrice = quoteDataBean.getPrice();
        double sharesTraded = 100.0;
        QuoteDataBean updatedQuoteDataBean = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
        assertNotNull(updatedQuoteDataBean);
        assertEquals(quoteDataBean.getCompanyName(), updatedQuoteDataBean.getCompanyName());
        assertEquals(quoteDataBean.getPrice(), updatedQuoteDataBean.getPrice());
        assertEquals(quoteDataBean.getOpen(), updatedQuoteDataBean.getOpen());
        assertEquals(quoteDataBean.getLow(), updatedQuoteDataBean.getLow());
        assertEquals(quoteDataBean.getChange(), updatedQuoteDataBean.getChange(), 0.0);
        assertEquals(quoteDataBean.getHigh(), updatedQuoteDataBean.getHigh());
        assertEquals(quoteDataBean.getSymbol(), updatedQuoteDataBean.getSymbol());
        assertEquals(quoteDataBean.getVolume(), updatedQuoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_ULnT0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("user123");
        profileData.setPassword("password123");
        profileData.setFullName("John Doe");
        profileData.setAddress("123 Main St");
        profileData.setEmail("johndoe@example.com");
        profileData.setCreditCard("1234567890123456");
        AccountProfileDataBean updatedProfileData = directSLSBBean.updateAccountProfile(profileData);
        assertNotNull(updatedProfileData);
        assertEquals("user123", updatedProfileData.getUserID());
        assertEquals("password123", updatedProfileData.getPassword());
        assertEquals("John Doe", updatedProfileData.getFullName());
        assertEquals("123 Main St", updatedProfileData.getAddress());
        assertEquals("johndoe@example.com", updatedProfileData.getEmail());
        assertEquals("1234567890123456", updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testPingTwoPhase_FUrv0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean result = directSLSBBean.pingTwoPhase(quoteDataBean.getSymbol());
        assertNotNull(result);
        assertEquals(quoteDataBean.getSymbol(), result.getSymbol());
        assertTrue(result.getPrice().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(result.getOpen().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(result.getLow().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(result.getHigh().compareTo(BigDecimal.ZERO) > 0);
        assertTrue(result.getVolume() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithAsyncProcessing_vgef0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.ASYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(result);
        assertEquals(orderDataBean.getOrderID(), result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuyWithSyncProcessing_juNZ1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        String userID = "user1";
        String symbol = "symbol1";
        double quantity = 100.0;
        int orderProcessingMode = TradeConfig.SYNCH;
        OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
        assertNotNull(result);
        assertEquals(orderDataBean.getOrderID(), result.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCompleteOrderAsync_xzcv0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 123;
        boolean twoPhase = true;
        Future<OrderDataBean> future = directSLSBBean.completeOrderAsync(orderID, twoPhase);
        assertNotNull(future);
        assertTrue(future.isDone());
        OrderDataBean orderDataBean = future.get();
        assertNotNull(orderDataBean);
        assertEquals(orderID, orderDataBean.getOrderID());
    }
}