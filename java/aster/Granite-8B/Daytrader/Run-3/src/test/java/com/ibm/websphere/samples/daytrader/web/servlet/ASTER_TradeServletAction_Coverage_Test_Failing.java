/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

public class Aster_TradeServletAction_Coverage_Test_Failing {
    private TradeServletAction tradeServletAction;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoMarketSummary1_feWG0() throws ServletException, IOException {
        TradeServletAction tradeServletAction = new TradeServletAction();
        tradeServletAction.doMarketSummary(null, null, null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoLogout1_WrXr0() throws Exception {
        TradeServletAction tAction = new TradeServletAction();
        String userID = "";
        tAction.doLogout(null, null, null, userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccountUpdate3_zTyf2() throws Exception {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user1";
        String password = "password1";
        String cpassword = "password1";
        String fullName = "fullName1";
        String address = "address1";
        String creditcard = "creditcard1";
        String email = "email1";
        tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
        verify(req).setAttribute("results", "Account profile update successful");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoAccountUpdate4_UaFA3() throws Exception {
        TradeServletAction tradeServletAction = new TradeServletAction();
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user1";
        String password = "password1";
        String cpassword = "password1";
        String fullName = "fullName1";
        String address = "address1";
        String creditcard = "creditcard1";
        String email = "email1";
        tradeServletAction.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
        verify(req).setAttribute("results", "Update profile error: invalid argument, check userID is correct, and the database is populateduser1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoRegister2_DAYr1_TIXg0() throws Exception {
        ServletContext ctx = mock(ServletContext.class);
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String userID = "user2";
        String passwd = "passwd2";
        String cpasswd = "passwd2";
        String fullname = "fullname2";
        String ccn = "ccn2";
        String openBalanceString = "1000.00";
        String email = "email2";
        String address = "address2";
        tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
        assertEquals("Registration operation failed, your passwords did not match", req.getAttribute("results"));
    }
}