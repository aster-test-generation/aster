/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTradeUserCount_JWfV0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int tradeUserCount = runStatsDataBean.getTradeUserCount();
        assertEquals(0, tradeUserCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCount_YYcg0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int expectedOrderCount = 0; // Replace with the expected value
        int actualOrderCount = runStatsDataBean.getOrderCount();
        assertEquals(expectedOrderCount, actualOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getBuyOrderCount_YaYU0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int buyOrderCount = runStatsDataBean.getBuyOrderCount();
        assertEquals(0, buyOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewUserCount_IVlp0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int newUserCount = 10; // Replace with the actual value
        runStatsDataBean.setNewUserCount(newUserCount);
        assertEquals(newUserCount, runStatsDataBean.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeUserCount_eLKv0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeUserCountWithZero_sJfE1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeUserCountWithNegativeNumber_sjri2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeUserCountWithMaximumValue_GEmq3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(Integer.MAX_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeUserCountWithMinimumValue_xxdN4() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeUserCount(Integer.MIN_VALUE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCount_yyZS0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(1);
        assertEquals(1, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCountWithZero_fVBk2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(0);
        assertEquals(0, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCountWithNegativeValue_JXib3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(-1);
        assertEquals(-1, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTradeStockCount_kMwq0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setTradeStockCount(10);
        assertEquals(10, runStatsDataBean.getTradeStockCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenOrderCount_JtdI0() {
        RunStatsDataBean statsData = new RunStatsDataBean();
        int openOrderCount = statsData.getOpenOrderCount();
        assertEquals(0, openOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCancelledOrderCount_stqq0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int cancelledOrderCount = runStatsDataBean.getCancelledOrderCount();
        assertEquals(0, cancelledOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingCount_qofv0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int holdingCount = 10;
        runStatsDataBean.setHoldingCount(holdingCount);
        assertEquals(holdingCount, runStatsDataBean.getHoldingCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeletedOrderCount_aVta0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setDeletedOrderCount(1);
        assertEquals(1, runStatsDataBean.getDeletedOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenOrderCount_XIND0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(10);
        assertEquals(10, runStatsDataBean.getOpenOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenOrderCountWithZero_pujp2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(0);
        assertEquals(0, runStatsDataBean.getOpenOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenOrderCountWithNegativeNumber_SJUD3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOpenOrderCount(-10);
        assertEquals(-10, runStatsDataBean.getOpenOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLoginCount_hELE0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sumLoginCount = 10;
        runStatsDataBean.setSumLoginCount(sumLoginCount);
        assertEquals(sumLoginCount, runStatsDataBean.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLoginCountZero_MwdH2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sumLoginCount = 0;
        runStatsDataBean.setSumLoginCount(sumLoginCount);
        assertEquals(sumLoginCount, runStatsDataBean.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLoginCountNegative_UdhK3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sumLoginCount = -10;
        runStatsDataBean.setSumLoginCount(sumLoginCount);
        assertEquals(sumLoginCount, runStatsDataBean.getSumLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTradeStockCount_MVKR0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int tradeStockCount = runStatsDataBean.getTradeStockCount();
        assertEquals(0, tradeStockCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLogoutCount_ceZh0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int actualSumLogoutCount = runStatsDataBean.getSumLogoutCount();
        int expectedSumLogoutCount = 0;
        assertEquals(expectedSumLogoutCount, actualSumLogoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ioQK0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        String expected = "\n\tRunStatsData for reset at " + new java.util.Date() + "\n\t\t      tradeUserCount: 0\n\t\t        newUserCount: 0\n\t\t       sumLoginCount: 0\n\t\t      sumLogoutCount: 0\n\t\t        holdingCount: 0\n\t\t          orderCount: 0\n\t\t       buyOrderCount: 0\n\t\t      sellOrderCount: 0\n\t\t cancelledOrderCount: 0\n\t\t      openOrderCount: 0\n\t\t   deletedOrderCount: 0";
        String actual = runStatsDataBean.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDeletedOrderCount_nvAE0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int result = runStatsDataBean.getDeletedOrderCount();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderCount_ETpo0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setOrderCount(10);
        assertEquals(10, runStatsDataBean.getOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewUserCount_QUlC0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setNewUserCount(10);
        assertEquals(10, runStatsDataBean.getNewUserCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSellOrderCount_NhkJ0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(10);
        assertEquals(10, runStatsDataBean.getSellOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBuyOrderCount_TiWF1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setBuyOrderCount(10);
        assertEquals(10, runStatsDataBean.getBuyOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingCount_jaKn3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(10);
        assertEquals(10, runStatsDataBean.getHoldingCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumLogoutCount_FTMo0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLogoutCount(10);
        assertEquals(10, runStatsDataBean.getSumLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLoginCount_CHYt0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sumLoginCount = runStatsDataBean.getSumLoginCount();
        assertEquals(0, sumLoginCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLoginCountWithPositiveValue_OaCS1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(10);
        int sumLoginCount = runStatsDataBean.getSumLoginCount();
        assertEquals(10, sumLoginCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLoginCountWithNegativeValue_HrtC2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(-10);
        int sumLoginCount = runStatsDataBean.getSumLoginCount();
        assertEquals(-10, sumLoginCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSumLoginCountWithZeroValue_wraY3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSumLoginCount(0);
        int sumLoginCount = runStatsDataBean.getSumLoginCount();
        assertEquals(0, sumLoginCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCancelledOrderCount_jBoY0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(1);
        assertEquals(1, runStatsDataBean.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCancelledOrderCountWithZero_IzWt2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(0);
        assertEquals(0, runStatsDataBean.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCancelledOrderCountWithNegativeNumber_GouD3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setCancelledOrderCount(-1);
        assertEquals(-1, runStatsDataBean.getCancelledOrderCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCount_rtsl0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int sellOrderCount = runStatsDataBean.getSellOrderCount();
        assertEquals(0, sellOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCountWithPositiveValue_FstL1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(10);
        int sellOrderCount = runStatsDataBean.getSellOrderCount();
        assertEquals(10, sellOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCountWithNegativeValue_OGar2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(-10);
        int sellOrderCount = runStatsDataBean.getSellOrderCount();
        assertEquals(-10, sellOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSellOrderCountWithZeroValue_rnHJ3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setSellOrderCount(0);
        int sellOrderCount = runStatsDataBean.getSellOrderCount();
        assertEquals(0, sellOrderCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCount_fJtk0() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(0, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCountWithPositiveValue_pIXN1() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(10);
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(10, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCountWithNegativeValue_BatL2() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(-10);
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(-10, holdingCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldingCountWithZeroValue_iAFe3() {
        RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
        runStatsDataBean.setHoldingCount(0);
        int holdingCount = runStatsDataBean.getHoldingCount();
        assertEquals(0, holdingCount);
    }
}