/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.naming.InitialContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockedConstruction;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2Entity_Test_Passing {
    private static int hitCount;
    private static String initTime;
    private TradeServices tradeSLSBLocal;
    PingServlet2Session2Entity pingservlet2session2entity;
    HttpServlet httpservlet;
    InitialContext initialcontext;
    MockedConstruction<InitialContext> mockedInitialContext;
    @Mock
    PingServlet2Session2Entity pingServlet2Session2Entity;
    @Mock
    HttpServlet httpServlet;
    @Mock
    InitialContext initialContext;
    @Mock
    HttpServletResponse httpServletResponse;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        mockedInitialContext = mockConstruction(InitialContext.class);
        httpservlet = mock(HttpServlet.class);
        initialcontext = mock(InitialContext.class);
        pingservlet2session2entity = new PingServlet2Session2Entity();
        pingservlet2session2entity.init(httpservlet);
        verify(httpservlet, times(1)).init(any());
        verify(initialcontext, times(1)).lookup("java:comp/env/ejb/TradeSLSBBean");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        // Write your test logic here
        // Use the mock objects and their behavior to test the doPost method
        // Write meaningful assertions to verify the expected behavior
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_KuWX0() throws Exception {
        PingServlet2Session2Entity pingServlet2Session2Entity = new PingServlet2Session2Entity();
        String servletInfo = pingServlet2Session2Entity.getServletInfo();
        assertEquals("web primitive, tests Servlet to Session to Entity EJB path", servletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidReq_CJal1() throws IOException, ServletException {
        PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        servlet.doGet(req, res);
        verify(res, times(1)).setContentType("text/html");
        verify(res, times(1)).getWriter();
    }
}