/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppServlet_Test_Passing {
    private HttpServletResponse mockResponse;
    TradeAppServlet tradeappservlet;
    HttpServlet httpservlet;
    ServletConfig servletconfig;
    HttpServletResponse httpservletresponse;
    HttpServletRequest httpservletrequest;
    HttpSession httpsession;
    private TradeAppServlet servlet;
    private HttpServletRequest mockRequest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        servletconfig = mock(ServletConfig.class);
        tradeappservlet = new TradeAppServlet();
        tradeappservlet.init(servletconfig);
        verify(servletconfig, times(1)).getInitParameterNames();
        verify(servletconfig, atLeastOnce()).getInitParameter("parm");
        verify(httpservlet, times(1)).init(servletconfig);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        httpservletresponse = mock(HttpServletResponse.class);
        httpservletrequest = mock(HttpServletRequest.class);
        servletconfig = mock(ServletConfig.class);
        tradeappservlet = new TradeAppServlet();
        httpsession = mock(HttpSession.class);
        httpservlet = mock(HttpServlet.class);
        when(httpservletrequest.getSession()).thenReturn(httpsession);
        tradeappservlet.doPost(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).sendRedirect("index.jsp");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_NnKl0() throws ServletException, IOException {
        TradeAppServlet servlet = new TradeAppServlet();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        servlet.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_oHiX0() {
        TradeAppServlet servlet = new TradeAppServlet();
        String actual = servlet.getServletInfo();
        String expected = "TradeAppServlet provides the standard web interface to Trade";
        assertEquals(expected, actual);
    }
}