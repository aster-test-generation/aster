/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.jms.ConnectionFactory;
import javax.jms.Queue;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBQueue_Test_Passing {
    private static String initTime;
    private static int hitCount;
    PingServlet2MDBQueue pingservlet2mdbqueue;
    HttpServlet httpservlet;
    PingServlet2MDBQueue pingServlet2MDBQueue;
    HttpServlet httpServlet;
    HttpServletResponse httpServletResponse;
    private ConnectionFactory queueConnectionFactory;
    private Queue tradeBrokerQueue;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservlet2mdbqueue = new PingServlet2MDBQueue();
        pingservlet2mdbqueue.init(httpservlet);
        verify(httpservlet).init(httpservlet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_dkhx0() {
        PingServlet2MDBQueue pingServlet2MDBQueue = new PingServlet2MDBQueue();
        String expectedServletInfo = "web primitive, configured with trade runtime configs, tests Servlet to Session EJB path";
        String actualServletInfo = pingServlet2MDBQueue.getServletInfo();
        assertEquals(expectedServletInfo, actualServletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_LGzm1() throws ServletException, IOException {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        servlet.doPost(req, res);
        verify(req, times(1)).getParameter("input");
        verify(res, times(1)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidRequest_quam0_1() throws Exception {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("GET");
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
        verify(response).getWriter();
        verify(response).getWriter().println(captor.capture());
        String output = captor.getValue();
        assertTrue(output.contains("<html><head><title>PingServlet2MDBQueue</title></head>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidRequest_quam0_2() throws Exception {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("GET");
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
        verify(response).getWriter();
        verify(response).getWriter().println(captor.capture());
        String output = captor.getValue();
        assertTrue(output.contains("<body><HR><FONT size=\"+2\" color=\"#000066\">PingServlet2MDBQueue<BR></FONT>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidRequest_quam0_3() throws Exception {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("GET");
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
        verify(response).getWriter();
        verify(response).getWriter().println(captor.capture());
        String output = captor.getValue();
        assertTrue(output.contains("<HR>initTime: 0"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidRequest_quam0_4() throws Exception {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("GET");
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
        verify(response).getWriter();
        verify(response).getWriter().println(captor.capture());
        String output = captor.getValue();
        assertTrue(output.contains("<BR>Hit Count: 1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidRequest_quam0_5() throws Exception {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("GET");
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
        verify(response).getWriter();
        verify(response).getWriter().println(captor.capture());
        String output = captor.getValue();
        assertTrue(output.contains("<HR>Posted Text message to java:comp/env/jms/TradeBrokerQueue destination"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidRequest_quam0_6() throws Exception {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("GET");
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
        verify(response).getWriter();
        verify(response).getWriter().println(captor.capture());
        String output = captor.getValue();
        assertTrue(output.contains("<BR>Message: null"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidRequest_quam0_7() throws Exception {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("GET");
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
        verify(response).getWriter();
        verify(response).getWriter().println(captor.capture());
        String output = captor.getValue();
        assertTrue(output.contains("<BR><BR>Message text: Ping message for queue java:comp/env/jms/TradeBrokerQueue sent from PingServlet2MDBQueue at"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidRequest_quam0_8() throws Exception {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("GET");
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
        verify(response).getWriter();
        verify(response).getWriter().println(captor.capture());
        String output = captor.getValue();
        assertTrue(output.contains("<BR><HR></FONT></BODY></HTML>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithInvalidRequest_JSua1() throws Exception {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("POST");
        servlet.doGet(request, response);
        verify(response).sendError(405, "PingServlet2MDBQueue does not support POST requests");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidRequest_quam0() throws Exception {
        PingServlet2MDBQueue servlet = new PingServlet2MDBQueue();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getMethod()).thenReturn("GET");
        servlet.doGet(request, response);
        verify(response).setContentType("text/html");
        ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
        verify(response).getWriter();
        verify(response).getWriter().println(captor.capture());
        String output = captor.getValue();
        assertTrue(output.contains("<html><head><title>PingServlet2MDBQueue</title></head>"));
        assertTrue(output.contains("<body><HR><FONT size=\"+2\" color=\"#000066\">PingServlet2MDBQueue<BR></FONT>"));
        assertTrue(output.contains("<HR>initTime: 0"));
        assertTrue(output.contains("<BR>Hit Count: 1"));
        assertTrue(output.contains("<HR>Posted Text message to java:comp/env/jms/TradeBrokerQueue destination"));
        assertTrue(output.contains("<BR>Message: null"));
        assertTrue(output.contains("<BR><BR>Message text: Ping message for queue java:comp/env/jms/TradeBrokerQueue sent from PingServlet2MDBQueue at"));
        assertTrue(output.contains("<BR><HR></FONT></BODY></HTML>"));
    }
}