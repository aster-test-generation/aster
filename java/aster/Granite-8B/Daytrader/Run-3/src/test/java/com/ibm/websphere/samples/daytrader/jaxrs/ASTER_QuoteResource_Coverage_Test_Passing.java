/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.jaxrs;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteResource_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGet_oiao0_1() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "symbol1,symbol2";
        List<QuoteDataBean> quoteDataBeans = quoteResource.quotesGet(symbols);
        assertNotNull(quoteDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGet_oiao0_0() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "symbol1,symbol0";
        List<QuoteDataBean> quoteDataBeans = quoteResource.quotesGet(symbols);
        assertEquals(0, quoteDataBeans.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithEmptySymbols_qiMr1_1() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "";
        List<QuoteDataBean> quoteDataBeans = quoteResource.quotesGet(symbols);
        assertNotNull(quoteDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithEmptySymbols_qiMr1_2() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "";
        List<QuoteDataBean> quoteDataBeans = quoteResource.quotesGet(symbols);
        assertTrue(quoteDataBeans.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithNullSymbols_pBIY2_1() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = null;
        List<QuoteDataBean> quoteDataBeans = quoteResource.quotesGet(symbols);
        assertNotNull(quoteDataBeans);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithNullSymbols_pBIY2_2() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = null;
        List<QuoteDataBean> quoteDataBeans = quoteResource.quotesGet(symbols);
        assertTrue(quoteDataBeans.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithSingleSymbol_FtOK3_1() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "symbol1";
        List<QuoteDataBean> quoteDataBeans = quoteResource.quotesGet(symbols);
        assertNotNull(quoteDataBeans);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQuotesGetWithSingleSymbol_FtOK3_2() {
        QuoteResource quoteResource = new QuoteResource();
        String symbols = "symbol1";
        List<QuoteDataBean> quoteDataBeans = quoteResource.quotesGet(symbols);
        assertEquals(1, quoteDataBeans.size());
    }
}