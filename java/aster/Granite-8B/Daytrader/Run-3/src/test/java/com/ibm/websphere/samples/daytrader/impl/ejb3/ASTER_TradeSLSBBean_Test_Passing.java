/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.persistence.EntityManager;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
    private EntityManager entityManager;
    TradeSLSBBean tradeslsbbean;
    private OrderDataBean order;
    private AccountDataBean account;
    private QuoteDataBean quote;
    private HoldingDataBean holding;
    private OrderDataBean orderDataBean;
    private AccountDataBean accountDataBean;
    private HoldingDataBean holdingDataBean;
    private QuoteDataBean quoteDataBean;
    private AccountProfileDataBean accountProfileDataBean;
    private TradeSLSBBean tradeSLSBBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange1_ZwhQ0() throws Exception {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal oldPrice = new BigDecimal(100);
        BigDecimal changeFactor = new BigDecimal(0.01);
        double sharesTraded = 100;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange2_fewR1() throws Exception {
        QuoteDataBean quote = new QuoteDataBean();
        BigDecimal oldPrice = new BigDecimal(100);
        BigDecimal changeFactor = new BigDecimal(0.01);
        double sharesTraded = 100;
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_ORio0_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_ORio0_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_ORio0_3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_ORio0_4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getRandomInstance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_ORio0_5() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_ORio0_6() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_ORio0_7() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertTrue(marketSummaryDataBean.getVolume() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_ORio0_8() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_ORio0_9() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_auET0_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user123";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_auET0_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user123";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertTrue(!holdings.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginInvalidPassword_KNJS1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        try {
            tradeSLSBBean.login("user1", "invalidPassword");
        } catch (RollbackException e) {
            assertTrue(e.getMessage().contains("No such user: user1"));
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_ySvr0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder1_blAr0() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.completeOrder(order.getOrderID(), true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder2_MaxE1() throws Exception {
        OrderDataBean order = OrderDataBean.getRandomInstance();
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.completeOrder(order.getOrderID(), false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_vmEs0() throws Exception {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        Mockito.when(entityManager.find(QuoteDataBean.class, "symbol")).thenReturn(quoteDataBean);
        QuoteDataBean result = tradeSLSBBean.getQuote("symbol");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders_BOUW0_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = new AccountProfileDataBean();
        profile.setUserID("123");
        AccountDataBean account = new AccountDataBean();
        account.setOrders(new ArrayList<OrderDataBean>());
        profile.setAccount(account);
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("123");
        assertNotNull(orders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders_BOUW0_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = new AccountProfileDataBean();
        profile.setUserID("123");
        AccountDataBean account = new AccountDataBean();
        account.setOrders(new ArrayList<OrderDataBean>());
        profile.setAccount(account);
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("123");
        assertEquals(0, orders.size());
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_LakM2_1() throws Exception {
        OrderDataBean order = new OrderDataBean();
        order.setOrderID(1);
        entityManager.persist(order);
        entityManager.flush();
        tradeSLSBBean.cancelOrder(1, true);
        OrderDataBean cancelledOrder = entityManager.find(OrderDataBean.class, 1);
        assertNotNull(cancelledOrder);
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_LakM2_2() throws Exception {
        OrderDataBean order = new OrderDataBean();
        order.setOrderID(1);
        entityManager.persist(order);
        entityManager.flush();
        tradeSLSBBean.cancelOrder(1, true);
        OrderDataBean cancelledOrder = entityManager.find(OrderDataBean.class, 1);
        assertTrue(cancelledOrder.isCancelled());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_SpvI0_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean createdQuote = tradeSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
        assertNotNull(createdQuote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_SpvI0_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean createdQuote = tradeSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
        assertTrue(createdQuote.getSymbol().equals(quoteDataBean.getSymbol()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_SpvI0_3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean createdQuote = tradeSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
        assertTrue(createdQuote.getCompanyName().equals(quoteDataBean.getCompanyName()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_SpvI0_4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean createdQuote = tradeSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
        assertTrue(createdQuote.getPrice().equals(quoteDataBean.getPrice()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_bUBb0_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getAddress(), profileData.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_bUBb0_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getPassword(), profileData.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_bUBb0_3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getFullName(), profileData.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_bUBb0_4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getCreditCard(), profileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_bUBb0_5() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getEmail(), profileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndTwoPhase_HMlp0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(123, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithOrderIDAndNoTwoPhase_XreV1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(456, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithNegativeOrderIDAndTwoPhase_DkJG2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.queueOrder(-789, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_XvnH0_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUserID");
        assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_XvnH0_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUserID");
        assertEquals("randomUserID", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_1() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_2() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertEquals("user123", accountDataBean.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_3() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_4() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertTrue(accountDataBean.getLogoutCount() >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_5() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_6() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertTrue(accountDataBean.getLoginCount() >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_7() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getAccountID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_8() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getProfile());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_9() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getOrders());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_10() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_11() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountData_qJin2_12() throws Exception {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("user123");
        assertNotNull(accountDataBean.getOpenBalance());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogout_tLCZ0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user123";
        tradeSLSBBean.logout(userID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_SxCE0_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_SxCE0_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getPrice(), changeFactor.multiply(quoteDataBean.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_SxCE0_3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getChange(), changeFactor.multiply(quoteDataBean.getPrice()).subtract(quoteDataBean.getOpen()).doubleValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_SxCE0_4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getVolume(), quoteDataBean.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_NDXK1_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(null, changeFactor, sharesTraded);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_NDXK1_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(null, changeFactor, sharesTraded);
        assertEquals(result.getPrice(), changeFactor.multiply(quoteDataBean.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_NDXK1_3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(null, changeFactor, sharesTraded);
        assertEquals(result.getChange(), changeFactor.multiply(quoteDataBean.getPrice()).subtract(quoteDataBean.getOpen()).doubleValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_NDXK1_4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(null, changeFactor, sharesTraded);
        assertEquals(result.getVolume(), quoteDataBean.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_RtQW2_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_RtQW2_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getPrice(), quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_RtQW2_3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_RtQW2_4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getVolume(), quoteDataBean.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroSharesTraded_OskZ3_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroSharesTraded_OskZ3_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getPrice(), changeFactor.multiply(quoteDataBean.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroSharesTraded_OskZ3_3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getChange(), changeFactor.multiply(quoteDataBean.getPrice()).subtract(quoteDataBean.getOpen()).doubleValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroSharesTraded_OskZ3_4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getVolume(), quoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_PoZz4_1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_PoZz4_2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getPrice(), changeFactor.multiply(quoteDataBean.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_PoZz4_3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getChange(), changeFactor.multiply(quoteDataBean.getPrice()).subtract(quoteDataBean.getOpen()).doubleValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_PoZz4_4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertEquals(result.getVolume(), quoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary_ORio0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        MarketSummaryDataBean marketSummaryDataBean = tradeSLSBBean.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
        assertNotNull(marketSummaryDataBean.getOpenTSIA());
        assertNotNull(marketSummaryDataBean.getGainPercent());
        assertNotNull(marketSummaryDataBean.getRandomInstance());
        assertNotNull(marketSummaryDataBean.getSummaryDate());
        assertNotNull(marketSummaryDataBean.getTSIA());
        assertTrue(marketSummaryDataBean.getVolume() > 0);
        assertNotNull(marketSummaryDataBean.getTopGainers());
        assertNotNull(marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_auET0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user123";
        Collection<HoldingDataBean> holdings = tradeSLSBBean.getHoldings(userID);
        assertNotNull(holdings);
        assertTrue(!holdings.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrders_BOUW0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profile = new AccountProfileDataBean();
        profile.setUserID("123");
        AccountDataBean account = new AccountDataBean();
        account.setOrders(new ArrayList<OrderDataBean>());
        profile.setAccount(account);
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders("123");
        assertNotNull(orders);
        assertEquals(0, orders.size());
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote_SpvI0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        QuoteDataBean createdQuote = tradeSLSBBean.createQuote(quoteDataBean.getSymbol(), quoteDataBean.getCompanyName(), quoteDataBean.getPrice());
        assertNotNull(createdQuote);
        assertTrue(createdQuote.getSymbol().equals(quoteDataBean.getSymbol()));
        assertTrue(createdQuote.getCompanyName().equals(quoteDataBean.getCompanyName()));
        assertTrue(createdQuote.getPrice().equals(quoteDataBean.getPrice()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_bUBb0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean("userID", "password", "fullName", "address", "email", "creditCard");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getAddress(), profileData.getAddress());
        assertEquals(temp.getPassword(), profileData.getPassword());
        assertEquals(temp.getFullName(), profileData.getFullName());
        assertEquals(temp.getCreditCard(), profileData.getCreditCard());
        assertEquals(temp.getEmail(), profileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountProfileData_XvnH0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("randomUserID");
        assertNotNull(accountProfileDataBean);
        assertEquals("randomUserID", accountProfileDataBean.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_SxCE0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(result);
        assertEquals(result.getPrice(), changeFactor.multiply(quoteDataBean.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
        assertEquals(result.getChange(), changeFactor.multiply(quoteDataBean.getPrice()).subtract(quoteDataBean.getOpen()).doubleValue());
        assertEquals(result.getVolume(), quoteDataBean.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNullSymbol_NDXK1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(null, changeFactor, sharesTraded);
        assertNotNull(result);
        assertEquals(result.getPrice(), changeFactor.multiply(quoteDataBean.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
        assertEquals(result.getChange(), changeFactor.multiply(quoteDataBean.getPrice()).subtract(quoteDataBean.getOpen()).doubleValue());
        assertEquals(result.getVolume(), quoteDataBean.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroChangeFactor_RtQW2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(result);
        assertEquals(result.getPrice(), quoteDataBean.getPrice());
        assertEquals(result.getChange(), 0.0);
        assertEquals(result.getVolume(), quoteDataBean.getVolume() + sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithZeroSharesTraded_OskZ3() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = 0.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(result);
        assertEquals(result.getPrice(), changeFactor.multiply(quoteDataBean.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
        assertEquals(result.getChange(), changeFactor.multiply(quoteDataBean.getPrice()).subtract(quoteDataBean.getOpen()).doubleValue());
        assertEquals(result.getVolume(), quoteDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolumeWithNegativeSharesTraded_PoZz4() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.valueOf(Math.random());
        double sharesTraded = -Math.random();
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(result);
        assertEquals(result.getPrice(), changeFactor.multiply(quoteDataBean.getPrice()).setScale(2, BigDecimal.ROUND_HALF_UP));
        assertEquals(result.getChange(), changeFactor.multiply(quoteDataBean.getPrice()).subtract(quoteDataBean.getOpen()).doubleValue());
        assertEquals(result.getVolume(), quoteDataBean.getVolume());
    }
}