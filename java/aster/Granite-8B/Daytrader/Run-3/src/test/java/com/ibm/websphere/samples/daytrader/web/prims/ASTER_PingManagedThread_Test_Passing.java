/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedThreadFactory;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedThread_Test_Passing {
    private static int hitCount;
    private static String initTime;
    PingManagedThread pingmanagedthread;
    HttpServlet httpservlet;
    @Mock
    HttpServlet httpServlet;
    @Mock
    HttpServletRequest httpServletRequest;
    @Mock
    HttpServletResponse httpServletResponse;
    @Mock
    ServletOutputStream servletOutputStream;
    PingManagedThread pingManagedThread;
    private ManagedThreadFactory managedThreadFactory;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;
    ServletOutputStream servletoutputstream;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingmanagedthread = new PingManagedThread();
        pingmanagedthread.init(httpservlet);
        verify(httpservlet, times(1)).init(any());
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingmanagedthread = new PingManagedThread();
        pingmanagedthread.init(httpservlet);
        verify(httpservlet, times(1)).init(any());
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost() throws Exception {
        pingManagedThread = new PingManagedThread();
        when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
        pingManagedThread.doPost(httpServletRequest, httpServletResponse);
        verify(httpServletResponse).getOutputStream();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_kJgA0() {
        PingManagedThread pingManagedThread = new PingManagedThread();
        String servletInfo = pingManagedThread.getServletInfo();
        assertEquals("Tests a ManagedThread asynchronous servlet", servletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testdoGet_VYwb0() throws Exception {
        httpservlet = mock(HttpServlet.class);
        httpservletrequest = mock(HttpServletRequest.class);
        httpservletresponse = mock(HttpServletResponse.class);
        servletoutputstream = mock(ServletOutputStream.class);
        pingmanagedthread = new PingManagedThread();
        when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
        pingmanagedthread.doGet(httpservletrequest, httpservletresponse);
        verify(httpservletresponse).setContentType("text/html");
        verify(servletoutputstream).println("<html><head><title>Ping ManagedThread</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping ManagedThread<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR/><BR/></FONT>");
        verify(httpservletresponse).getOutputStream();
        verify(servletoutputstream).println("<b>HitCount: " + ++hitCount + "</b><br/>");
        verify(httpservletresponse).flushBuffer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingmanagedthread = new PingManagedThread();
        pingmanagedthread.init(httpservlet);
        verify(httpservlet, times(1)).init(any());
        assertEquals(0, hitCount);
        assertNotNull(initTime);
    }
}