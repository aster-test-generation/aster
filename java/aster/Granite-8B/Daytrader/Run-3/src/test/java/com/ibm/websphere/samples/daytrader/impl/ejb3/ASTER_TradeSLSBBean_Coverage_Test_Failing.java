/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_TradeSLSBBean_Coverage_Test_Failing {
    private TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    private AccountDataBean accountDataBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInSession_MAtn0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        tradeSLSBBean.setInSession(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrder1_reoo0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        boolean twoPhase = true;
        tradeSLSBBean.completeOrder(orderDataBean.getOrderID(), twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_xfYm0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithNullOrderID_hgty1() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = null;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithNegativeOrderID_OUON2() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        Integer orderID = -1;
        boolean twoPhase = true;
        tradeSLSBBean.cancelOrder(orderID, twoPhase);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder1_btza0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "buy";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder2_HzXa1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "sell";
        double quantity = 100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder3_pUWp2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "buy";
        double quantity = 0.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder4_bXBf3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "sell";
        double quantity = 0.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder5_EDXK4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "buy";
        double quantity = -100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrder6_WDEL5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        String orderType = "sell";
        double quantity = -100.0;
        OrderDataBean order = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPublishQuotePriceChange1_Inyc0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = new QuoteDataBean();
        BigDecimal oldPrice = new BigDecimal(0);
        BigDecimal changeFactor = new BigDecimal(0);
        double sharesTraded = 0;
        tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData1_NMCf0() {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("1");
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData2_nheC1() {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("2");
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData3_PzyZ2() {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("3");
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData4_THbm3() {
        AccountDataBean accountDataBean = tradeSLSBBean.getAccountData("4");
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote1_XyGe0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "companyName", BigDecimal.ZERO);
        Assertions.assertNotNull(quote);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote2_okyX1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "companyName", BigDecimal.ZERO);
        Assertions.assertEquals(0, quote.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote3_owyR2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "companyName", BigDecimal.ZERO);
        Assertions.assertEquals("symbol", quote.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote4_fmob3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "companyName", BigDecimal.ZERO);
        Assertions.assertEquals("companyName", quote.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote5_uNqg4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "companyName", BigDecimal.ZERO);
        Assertions.assertEquals(BigDecimal.ZERO, quote.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote6_oEPE5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "companyName", BigDecimal.ZERO);
        Assertions.assertEquals(BigDecimal.ZERO, quote.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote7_JdMZ6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "companyName", BigDecimal.ZERO);
        Assertions.assertEquals(BigDecimal.ZERO, quote.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote8_XHOt7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "companyName", BigDecimal.ZERO);
        Assertions.assertEquals(0.0, quote.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote9_XXLs8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = tradeSLSBBean.createQuote("symbol", "companyName", BigDecimal.ZERO);
        Assertions.assertEquals(BigDecimal.ZERO, quote.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell1_YFlk0() {
        String userID = "user1";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell2_dNnU1() {
        String userID = "user2";
        Integer holdingID = 2;
        int orderProcessingMode = 2;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell31_cmmu2() {
        String userID = "user31";
        Integer holdingID = 31;
        int orderProcessingMode = 31;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithNullUserID_HiPE1() {
        tradeSLSBBean.logout(null);
        Assertions.fail("Expected IllegalArgumentException");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutWithEmptyUserID_EZyx2() {
        tradeSLSBBean.logout("");
        Assertions.fail("Expected IllegalArgumentException");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_Wrsd0() throws Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = 0.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_OmSC0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_ZYwk1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(0.0, quoteDataBean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_FFDZ6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(0.0, quoteDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_BwFa7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals("companyName", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_GBBp8() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals("symbol", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_pnnH10() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(0, quoteDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_KOuv2_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = mock(AccountProfileDataBean.class);
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(temp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_KOuv2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = mock(AccountProfileDataBean.class);
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getUserID(), profileData.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_KOuv2_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = mock(AccountProfileDataBean.class);
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getAddress(), profileData.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_KOuv2_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = mock(AccountProfileDataBean.class);
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getPassword(), profileData.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_KOuv2_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = mock(AccountProfileDataBean.class);
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getFullName(), profileData.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_KOuv2_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = mock(AccountProfileDataBean.class);
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getCreditCard(), profileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_KOuv2_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = mock(AccountProfileDataBean.class);
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getEmail(), profileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithNullProfileData_IKVx3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(null);
        assertNotNull(temp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithEmptyProfileData_WBIN4_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(temp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithEmptyProfileData_WBIN4_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getUserID().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithEmptyProfileData_WBIN4_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getAddress().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithEmptyProfileData_WBIN4_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getPassword().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithEmptyProfileData_WBIN4_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getFullName().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithEmptyProfileData_WBIN4_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getCreditCard().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithEmptyProfileData_WBIN4_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getEmail().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithInvalidProfileData_szxe5_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("invalid");
        profileData.setAddress("invalid");
        profileData.setPassword("invalid");
        profileData.setFullName("invalid");
        profileData.setCreditCard("invalid");
        profileData.setEmail("invalid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(temp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithInvalidProfileData_szxe5_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("invalid");
        profileData.setAddress("invalid");
        profileData.setPassword("invalid");
        profileData.setFullName("invalid");
        profileData.setCreditCard("invalid");
        profileData.setEmail("invalid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getUserID().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithInvalidProfileData_szxe5_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("invalid");
        profileData.setAddress("invalid");
        profileData.setPassword("invalid");
        profileData.setFullName("invalid");
        profileData.setCreditCard("invalid");
        profileData.setEmail("invalid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getAddress().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithInvalidProfileData_szxe5_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("invalid");
        profileData.setAddress("invalid");
        profileData.setPassword("invalid");
        profileData.setFullName("invalid");
        profileData.setCreditCard("invalid");
        profileData.setEmail("invalid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getPassword().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithInvalidProfileData_szxe5_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("invalid");
        profileData.setAddress("invalid");
        profileData.setPassword("invalid");
        profileData.setFullName("invalid");
        profileData.setCreditCard("invalid");
        profileData.setEmail("invalid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getFullName().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithInvalidProfileData_szxe5_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("invalid");
        profileData.setAddress("invalid");
        profileData.setPassword("invalid");
        profileData.setFullName("invalid");
        profileData.setCreditCard("invalid");
        profileData.setEmail("invalid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getCreditCard().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithInvalidProfileData_szxe5_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("invalid");
        profileData.setAddress("invalid");
        profileData.setPassword("invalid");
        profileData.setFullName("invalid");
        profileData.setCreditCard("invalid");
        profileData.setEmail("invalid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getEmail().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithValidProfileData_wSuS6_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("valid");
        profileData.setAddress("valid");
        profileData.setPassword("valid");
        profileData.setFullName("valid");
        profileData.setCreditCard("valid");
        profileData.setEmail("valid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(temp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithValidProfileData_wSuS6_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("valid");
        profileData.setAddress("valid");
        profileData.setPassword("valid");
        profileData.setFullName("valid");
        profileData.setCreditCard("valid");
        profileData.setEmail("valid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getUserID(), profileData.getUserID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithValidProfileData_wSuS6_3() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("valid");
        profileData.setAddress("valid");
        profileData.setPassword("valid");
        profileData.setFullName("valid");
        profileData.setCreditCard("valid");
        profileData.setEmail("valid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getAddress(), profileData.getAddress());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithValidProfileData_wSuS6_4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("valid");
        profileData.setAddress("valid");
        profileData.setPassword("valid");
        profileData.setFullName("valid");
        profileData.setCreditCard("valid");
        profileData.setEmail("valid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getPassword(), profileData.getPassword());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithValidProfileData_wSuS6_5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("valid");
        profileData.setAddress("valid");
        profileData.setPassword("valid");
        profileData.setFullName("valid");
        profileData.setCreditCard("valid");
        profileData.setEmail("valid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getFullName(), profileData.getFullName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithValidProfileData_wSuS6_6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("valid");
        profileData.setAddress("valid");
        profileData.setPassword("valid");
        profileData.setFullName("valid");
        profileData.setCreditCard("valid");
        profileData.setEmail("valid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getCreditCard(), profileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithValidProfileData_wSuS6_7() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("valid");
        profileData.setAddress("valid");
        profileData.setPassword("valid");
        profileData.setFullName("valid");
        profileData.setCreditCard("valid");
        profileData.setEmail("valid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertEquals(temp.getEmail(), profileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithNullUserID_KPfs7_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = mock(AccountProfileDataBean.class);
        when(profileData.getUserID()).thenReturn(null);
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(temp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithNullUserID_KPfs7_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = mock(AccountProfileDataBean.class);
        when(profileData.getUserID()).thenReturn(null);
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertTrue(temp.getUserID().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_nuWg0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        HoldingDataBean holdingDataBean = tradeSLSBBean.getHolding(1);
        Assertions.assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_hhEM1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote(TradeConfig.rndSymbol());
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_Wrsd0_OGWE1() throws Exception {
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        BigDecimal changeFactor = BigDecimal.ZERO;
        double sharesTraded = 0.0;
        QuoteDataBean result = tradeSLSBBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_RvJY2_yqeg0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(0.0, quoteDataBean.getHigh().doubleValue(), 0.0);
    }

    @Test
    public void test1_NPpf0() {
        tradeSLSBBean.getClosedOrders("1");
    }

    @Test
    public void test2_fNzx1() {
        tradeSLSBBean.getClosedOrders("2");
    }

    @Test
    public void test3_nkeb2() {
        tradeSLSBBean.getClosedOrders("3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_IUys3_DDTs0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(0.0, quoteDataBean.getLow().doubleValue(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_vjIR4_qglo0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(0.0, quoteDataBean.getOpen().doubleValue(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_CRwr5_dttW0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(0.0, quoteDataBean.getPrice().doubleValue(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest_0_bJrC1_1() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
        assertNotNull(closedOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest_0_bJrC1_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
        assertEquals(0, closedOrders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest_1_DYFB2_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
        assertEquals(1, closedOrders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest_2_JRHN3_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
        assertEquals(2, closedOrders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest_3_Gbat4_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
        assertEquals(3, closedOrders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest_4_TFLN5_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
        assertEquals(4, closedOrders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest_5_VNRQ6_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
        assertEquals(5, closedOrders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest_6_YfVY7_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
        assertEquals(6, closedOrders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest_7_JVNz8_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
        assertEquals(7, closedOrders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getClosedOrdersTest_8_kIiV9_2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        String userID = "user1";
        Collection<OrderDataBean> closedOrders = tradeSLSBBean.getClosedOrders(userID);
        assertEquals(8, closedOrders.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_pnnH10_WCCt0() {
        QuoteDataBean quoteDataBean = tradeSLSBBean.getQuote("symbol");
        assertEquals(0, quoteDataBean.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell1_YFlk0_qmdD0() {
        String userID = "user1";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell31_cmmu2_komB0() {
        String userID = "user31";
        Integer holdingID = 31;
        int orderProcessingMode = 31;
        OrderDataBean order = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
        assertNotNull(order);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn2_tzuW1_fid2() throws java.lang.Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 500.0;
        double NetValue = 600.0;
        double expected = 0.4;
        double actual = tradeSLSBBean.investmentReturn(investment, NetValue);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn3_vXOM2_fid2() throws java.lang.Exception {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        double investment = 1500.0;
        double NetValue = 1800.0;
        double expected = 0.1333333333333333;
        double actual = tradeSLSBBean.investmentReturn(investment, NetValue);
        assertEquals(expected, actual, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountProfileData_qyOW0() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeSLSBBean.getAccountProfileData("1");
        Assertions.assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_KOuv2() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = mock(AccountProfileDataBean.class);
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(temp);
        assertEquals(temp.getUserID(), profileData.getUserID());
        assertEquals(temp.getAddress(), profileData.getAddress());
        assertEquals(temp.getPassword(), profileData.getPassword());
        assertEquals(temp.getFullName(), profileData.getFullName());
        assertEquals(temp.getCreditCard(), profileData.getCreditCard());
        assertEquals(temp.getEmail(), profileData.getEmail());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithEmptyProfileData_WBIN4() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(temp);
        assertTrue(temp.getUserID().isEmpty());
        assertTrue(temp.getAddress().isEmpty());
        assertTrue(temp.getPassword().isEmpty());
        assertTrue(temp.getFullName().isEmpty());
        assertTrue(temp.getCreditCard().isEmpty());
        assertTrue(temp.getEmail().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithInvalidProfileData_szxe5() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("invalid");
        profileData.setAddress("invalid");
        profileData.setPassword("invalid");
        profileData.setFullName("invalid");
        profileData.setCreditCard("invalid");
        profileData.setEmail("invalid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(temp);
        assertTrue(temp.getUserID().isEmpty());
        assertTrue(temp.getAddress().isEmpty());
        assertTrue(temp.getPassword().isEmpty());
        assertTrue(temp.getFullName().isEmpty());
        assertTrue(temp.getCreditCard().isEmpty());
        assertTrue(temp.getEmail().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithValidProfileData_wSuS6() {
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setUserID("valid");
        profileData.setAddress("valid");
        profileData.setPassword("valid");
        profileData.setFullName("valid");
        profileData.setCreditCard("valid");
        profileData.setEmail("valid");
        AccountProfileDataBean temp = tradeSLSBBean.updateAccountProfile(profileData);
        assertNotNull(temp);
        assertEquals(temp.getUserID(), profileData.getUserID());
        assertEquals(temp.getAddress(), profileData.getAddress());
        assertEquals(temp.getPassword(), profileData.getPassword());
        assertEquals(temp.getFullName(), profileData.getFullName());
        assertEquals(temp.getCreditCard(), profileData.getCreditCard());
        assertEquals(temp.getEmail(), profileData.getEmail());
    }
}