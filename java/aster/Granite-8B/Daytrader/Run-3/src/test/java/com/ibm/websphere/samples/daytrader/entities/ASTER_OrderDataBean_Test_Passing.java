/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Passing {
    OrderDataBean orderdatabean;
    private String symbol;
    private Integer orderID;
    private BigDecimal price;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    @Mock
    private AccountDataBean account;
    @Mock
    private HoldingDataBean mockHolding;
    private OrderDataBean orderDataBean;
    private AccountDataBean accountDataBean;
    private QuoteDataBean quoteDataBean;
    private HoldingDataBean holdingDataBean;
    private double quantity;
    private BigDecimal orderFee;
    private String orderType;
    @Mock
    private QuoteDataBean mockQuote;
    private OrderDataBean other;
    private Date openDate;
    private Date completionDate;
    @Mock
    private AccountDataBean mockAccount;
    private String orderStatus;

    /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetOrderStatus() throws Exception{
           accountDataBean = mock(AccountDataBean.class);
           quoteDataBean = mock(QuoteDataBean.class);
           holdingDataBean = mock(HoldingDataBean.class);
           orderdatabean = new OrderDataBean("buy", "open", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("1.0"), "symbol");
           when(orderdatabean.getAccount()).thenReturn(accountDataBean);
           when(orderdatabean.getQuote()).thenReturn(quoteDataBean);
           when(orderdatabean.getHolding()).thenReturn(holdingDataBean);
           assertEquals("buy", orderdatabean.getOrderType());
           assertEquals("open", orderdatabean.getOrderStatus());
           assertNotNull(orderdatabean.getOpenDate());
           assertNotNull(orderdatabean.getCompletionDate());
           assertEquals(100.0, orderdatabean.getQuantity(), 0.0);
           assertEquals(new BigDecimal("100.0"), orderdatabean.getPrice());
           assertEquals(new BigDecimal("1.0"), orderdatabean.getOrderFee());
           assertEquals("symbol", orderdatabean.getSymbol());
       }
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderStatus() {
           accountDataBean = mock(AccountDataBean.class);
           quoteDataBean = mock(QuoteDataBean.class);
           holdingDataBean = mock(HoldingDataBean.class);
           orderDataBean = new OrderDataBean();
           String newOrderStatus = "newOrderStatus";
           orderDataBean.setOrderStatus(newOrderStatus);
           assertEquals(newOrderStatus, orderDataBean.getOrderStatus());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetSymbol() throws Exception{
           quote = new QuoteDataBean();
           symbol = "symbol";
           orderdatabean = new OrderDataBean(null, null, null, null, 0, null, null, quote, symbol);
           assertEquals(symbol, orderdatabean.getSymbol());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOrderStatus_RpJi0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           String orderStatus = orderDataBean.getOrderStatus();
           assertEquals("new", orderStatus);
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOrderID() throws Exception {
           orderID = 123;
           orderdatabean = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.01"), "IBM");
           when(orderdatabean.getOrderID()).thenReturn(orderID);
           assertEquals(orderID, orderdatabean.getOrderID());
       }
       private String orderStatus; /*
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testisOpen() throws Exception{
           orderdatabean = new OrderDataBean();
           when(orderdatabean.getOrderStatus()).thenReturn("open");
           assertTrue(orderdatabean.isOpen());
           when(orderdatabean.getOrderStatus()).thenReturn("processing");
           assertTrue(orderdatabean.isOpen());
           when(orderdatabean.getOrderStatus()).thenReturn("closed");
           assertFalse(orderdatabean.isOpen());
           when(orderdatabean.getOrderStatus()).thenReturn("canceled");
           assertFalse(orderdatabean.isOpen());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToString() {
           accountDataBean = mock(AccountDataBean.class);
           quoteDataBean = mock(QuoteDataBean.class);
           holdingDataBean = mock(HoldingDataBean.class);
           orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.10"), "symbol");
           String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + orderDataBean.getOpenDate() + "\n\t completionDate: " + orderDataBean.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.00\n\t       orderFee: 0.10\n\t         symbol: symbol";
           String actual = orderDataBean.toString();
           assertEquals(expected, actual);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOrderID_oTcL0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           Integer expectedOrderID = 1;
           orderDataBean.setOrderID(expectedOrderID);
           Integer actualOrderID = orderDataBean.getOrderID();
           assertEquals(expectedOrderID, actualOrderID);
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetAccount() {
           account = mock(AccountDataBean.class);
           orderdatabean = new OrderDataBean();
           orderdatabean.setAccount(account);
           verify(account, times(1)).setOrders(any());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test1_Agjq0() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test2_jUOb1() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test3_ptDI2() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test4_FZSg3() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test5_fgLd4() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test6_HUgY5() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test7_HpMr6() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test8_OGpt7() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test9_ObtC8() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test10_qgRT9() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test11_nxMj10() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test12_cqaP11() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test13_wDlD12() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test14_atmY13() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test15_xJCZ14() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test16_JgHh15() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test17_awKe16() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test18_BtGH17() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test19_gyaO18() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test20_oclk19() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test21_yKma20() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void test22_PYQn21() {
       OrderDataBean orderDataBean = new OrderDataBean();
       BigDecimal orderFee = orderDataBean.getOrderFee();
       assertNotNull(orderFee);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testsetOrderFee() throws Exception{
           orderdatabean = new OrderDataBean();
           BigDecimal newOrderFee = new BigDecimal(100);
           orderdatabean.setOrderFee(newOrderFee);
           assertEquals(newOrderFee, orderdatabean.getOrderFee());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetOpenDate() throws Exception {
           openDate = new Date();
           when(orderdatabean.getOpenDate()).thenReturn(openDate);
           // Act
           Date actualOpenDate = orderdatabean.getOpenDate();
           // Assert
           assertEquals(openDate, actualOpenDate);
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testIsOpen1_wSjB0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           orderDataBean.setOrderStatus("open");
           assertTrue(orderDataBean.isOpen());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testIsOpen2_brqW1() {
           OrderDataBean orderDataBean = new OrderDataBean();
           orderDataBean.setOrderStatus("processing");
           assertTrue(orderDataBean.isOpen());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testIsOpen3_ofJS2() {
           OrderDataBean orderDataBean = new OrderDataBean();
           orderDataBean.setOrderStatus("closed");
           assertFalse(orderDataBean.isOpen());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testToString_RuDQ0() {
           OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.00"), new BigDecimal("10.00"), "symbol");
           String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 100.00\n\t       orderFee: 10.00\n\t         symbol: symbol";
           assertEquals(expected, order.toString());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOpenDate() {
           openDate = new Date();
           orderdatabean = new OrderDataBean();
           orderdatabean.setOpenDate(openDate);
           Date newOpenDate = new Date();
           orderdatabean.setOpenDate(newOpenDate);
           assertEquals(newOpenDate, orderdatabean.getOpenDate());
       }
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       void testSetAccount_cVks0() {
           OrderDataBean order = new OrderDataBean();
           AccountDataBean account = new AccountDataBean();
           order.setAccount(account);
           assertEquals(account, order.getAccount());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testEquals1_oPJK0() {
       OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
       OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
       boolean expected = true;
       boolean actual = orderDataBean1.equals(orderDataBean2);
       assertEquals(expected, actual);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testEquals2_RRWv1() {
       OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
       OrderDataBean orderDataBean2 = new OrderDataBean(2, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
       boolean expected = false;
       boolean actual = orderDataBean1.equals(orderDataBean2);
       assertEquals(expected, actual);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testEquals3_YRIW2() {
       OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
       OrderDataBean orderDataBean2 = new OrderDataBean(1, "type2", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
       boolean expected = false;
       boolean actual = orderDataBean1.equals(orderDataBean2);
       assertEquals(expected, actual);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testEquals4_EZHk3() {
       OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
       OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status2", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
       boolean expected = false;
       boolean actual = orderDataBean1.equals(orderDataBean2);
       assertEquals(expected, actual);
    
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testEquals5_brPv4() {
       OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
       OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status1", new Date(1), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
       boolean expected = false;
       boolean actual = orderDataBean1.equals(orderDataBean2);
       assertEquals(expected, actual);
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetOrderFee_kXvj0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           BigDecimal orderFee = new BigDecimal(100.0);
           orderDataBean.setOrderFee(orderFee);
           assertEquals(orderFee, orderDataBean.getOrderFee());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testSetHolding() {
           holding = mock(HoldingDataBean.class);
           orderdatabean = new OrderDataBean();
           orderdatabean.setHolding(holding);
           verify(orderdatabean).setHolding(holding);
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    ublic void testSetOpenDate_TvtO0() {
       OrderDataBean order = new OrderDataBean();
       Date openDate = new Date();
       order.setOpenDate(openDate);
       assertEquals(openDate, order.getOpenDate());
    
       @Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testGetOpenDate_MDsP0() {
           OrderDataBean orderDataBean = new OrderDataBean();
           assertNotNull(orderDataBean.getOpenDate());
       }
    Test
    Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
       public void testgetCompletionDate() throws Exception{
           orderdatabean = new OrderDataBean(1, "Buy", "Open", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "Symbol");
           assertEquals(orderdatabean.getCompletionDate(), new Date());
       }
       private String orderType; /* orderType (buy, sell, etc.) */
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_1() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_2() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_3() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_4() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_5() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_6() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_7() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_8() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_9() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_10() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_11() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_12() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRandomInstance_13() throws Exception {
        orderdatabean = new OrderDataBean(new Integer(TradeConfig.rndInt(100000)), TradeConfig.rndBoolean() ? "buy" : "sell", "open", new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), new java.util.Date(TradeConfig.rndInt(Integer.MAX_VALUE)), TradeConfig.rndQuantity(), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndBigDecimal(1000.0f), TradeConfig.rndSymbol());
        OrderDataBean randomInstance = OrderDataBean.getRandomInstance();
        assertNotNull(randomInstance.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol() throws Exception {
        orderdatabean = new OrderDataBean();
        // Mock the QuoteDataBean and AccountDataBean objects
        QuoteDataBean quote = mock(QuoteDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        // Set the symbol using the setSymbol method
        orderdatabean.setSymbol("TEST_SYMBOL");
        // Assert that the symbol is set correctly
        assertEquals("TEST_SYMBOL", orderdatabean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        orderID = 123;
        orderdatabean = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.0"), new BigDecimal("0.5"), "symbol");
        int expectedHashCode = 123;
        int actualHashCode = orderdatabean.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest1_rsye0() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_1() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_2() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_3() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_4() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_5() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_6() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_7() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_8() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_9() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_10() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_11() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1_12() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_jBQq0() {
        OrderDataBean order = new OrderDataBean();
        order.setSymbol("symbol");
        assertEquals("symbol", order.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrice() {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, BigDecimal.valueOf(10.0), BigDecimal.valueOf(0.0), "symbol");
        when(orderdatabean.getQuote()).thenReturn(quote);
        when(orderdatabean.getHolding()).thenReturn(holding);
        when(orderdatabean.getAccount()).thenReturn(account);
        when(quote.getPrice()).thenReturn(BigDecimal.valueOf(10.0));
        when(holding.getPurchasePrice()).thenReturn(BigDecimal.valueOf(10.0));
        when(account.getBalance()).thenReturn(BigDecimal.valueOf(1000.0));
        BigDecimal expectedPrice = BigDecimal.valueOf(10.0);
        BigDecimal actualPrice = orderdatabean.getPrice();
        assertEquals(expectedPrice, actualPrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode_DbYW0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        int result = orderDataBean.hashCode();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashcode2_TnSo1() {
        OrderDataBean orderDataBean = new OrderDataBean(null, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        int result = orderDataBean.hashCode();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testprint() throws Exception {
        orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        orderdatabean.print();
        verify(orderdatabean, times(1)).toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetPrice_xmwj0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal price = orderDataBean.getPrice();
        assertEquals(new BigDecimal(0.0), price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_1() throws Exception {
        orderdatabean = new OrderDataBean();
        holding = mock(HoldingDataBean.class);
        when(mockHolding.getQuantity()).thenReturn(100.0);
        when(mockHolding.getQuoteID()).thenReturn("123");
        when(mockHolding.getQuote()).thenReturn(new QuoteDataBean());
        when(mockHolding.getPurchasePrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockHolding.getPurchaseDate()).thenReturn(new Date());
        when(mockHolding.getAccount()).thenReturn(new AccountDataBean());
        orderdatabean.setHolding(mockHolding);
        HoldingDataBean holding = orderdatabean.getHolding();
        assertEquals(100.0, holding.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_2() throws Exception {
        orderdatabean = new OrderDataBean();
        holding = mock(HoldingDataBean.class);
        when(mockHolding.getQuantity()).thenReturn(100.0);
        when(mockHolding.getQuoteID()).thenReturn("123");
        when(mockHolding.getQuote()).thenReturn(new QuoteDataBean());
        when(mockHolding.getPurchasePrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockHolding.getPurchaseDate()).thenReturn(new Date());
        when(mockHolding.getAccount()).thenReturn(new AccountDataBean());
        orderdatabean.setHolding(mockHolding);
        HoldingDataBean holding = orderdatabean.getHolding();
        assertEquals("123", holding.getQuoteID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_3() throws Exception {
        orderdatabean = new OrderDataBean();
        holding = mock(HoldingDataBean.class);
        when(mockHolding.getQuantity()).thenReturn(100.0);
        when(mockHolding.getQuoteID()).thenReturn("123");
        when(mockHolding.getQuote()).thenReturn(new QuoteDataBean());
        when(mockHolding.getPurchasePrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockHolding.getPurchaseDate()).thenReturn(new Date());
        when(mockHolding.getAccount()).thenReturn(new AccountDataBean());
        orderdatabean.setHolding(mockHolding);
        HoldingDataBean holding = orderdatabean.getHolding();
        assertNotNull(holding.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_4() throws Exception {
        orderdatabean = new OrderDataBean();
        holding = mock(HoldingDataBean.class);
        when(mockHolding.getQuantity()).thenReturn(100.0);
        when(mockHolding.getQuoteID()).thenReturn("123");
        when(mockHolding.getQuote()).thenReturn(new QuoteDataBean());
        when(mockHolding.getPurchasePrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockHolding.getPurchaseDate()).thenReturn(new Date());
        when(mockHolding.getAccount()).thenReturn(new AccountDataBean());
        orderdatabean.setHolding(mockHolding);
        HoldingDataBean holding = orderdatabean.getHolding();
        assertEquals(BigDecimal.valueOf(100.0), holding.getPurchasePrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_5() throws Exception {
        orderdatabean = new OrderDataBean();
        holding = mock(HoldingDataBean.class);
        when(mockHolding.getQuantity()).thenReturn(100.0);
        when(mockHolding.getQuoteID()).thenReturn("123");
        when(mockHolding.getQuote()).thenReturn(new QuoteDataBean());
        when(mockHolding.getPurchasePrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockHolding.getPurchaseDate()).thenReturn(new Date());
        when(mockHolding.getAccount()).thenReturn(new AccountDataBean());
        orderdatabean.setHolding(mockHolding);
        HoldingDataBean holding = orderdatabean.getHolding();
        assertNotNull(holding.getPurchaseDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding_6() throws Exception {
        orderdatabean = new OrderDataBean();
        holding = mock(HoldingDataBean.class);
        when(mockHolding.getQuantity()).thenReturn(100.0);
        when(mockHolding.getQuoteID()).thenReturn("123");
        when(mockHolding.getQuote()).thenReturn(new QuoteDataBean());
        when(mockHolding.getPurchasePrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockHolding.getPurchaseDate()).thenReturn(new Date());
        when(mockHolding.getAccount()).thenReturn(new AccountDataBean());
        orderdatabean.setHolding(mockHolding);
        HoldingDataBean holding = orderdatabean.getHolding();
        assertNotNull(holding.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancel() {
        orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 100.0, new BigDecimal("10.00"), new BigDecimal("0.00"), "symbol");
        orderDataBean.setAccount(account);
        orderDataBean.setQuote(quote);
        orderDataBean.setHolding(holding);
        orderDataBean.cancel();
        verify(orderDataBean, times(1)).setOrderStatus("cancelled");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testPrint_dAOQ0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol");
        orderDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID() {
        orderID = 123;
        orderdatabean = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.50"), " IBM");
        orderdatabean.setOrderID(orderID);
        assertEquals(orderID, orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetHolding_Ympc0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = orderDataBean.getHolding();
        assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML() {
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.00"), new BigDecimal("10.00"), "symbol");
        when(orderDataBean.getAccount()).thenReturn(accountDataBean);
        when(orderDataBean.getQuote()).thenReturn(quoteDataBean);
        when(orderDataBean.getHolding()).thenReturn(holdingDataBean);
        when(accountDataBean.getProfileID()).thenReturn("profileID");
        when(quoteDataBean.getSymbol()).thenReturn("symbol");
        when(holdingDataBean.getPurchasePrice()).thenReturn(new BigDecimal("100.00"));
        String expected = "<BR>Order <B>1</B>" + "<LI>      orderType: BUY</LI>" + "<LI>    orderStatus: OPEN</LI>" + "<LI>       openDate: " + new Date() + "</LI>" + "<LI> completionDate: " + new Date() + "</LI>" + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 100.00</LI>" + "<LI>       orderFee: 10.00</LI>" + "<LI>         symbol: symbol</LI>";
        String actual = orderDataBean.toHTML();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCancel_uRBx0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.cancel();
        assertEquals("cancelled", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuantity() {
        quantity = 10.0;
        when(orderdatabean.getQuantity()).thenReturn(quantity);
        assertEquals(quantity, orderdatabean.getQuantity());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderID_rjzC0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderID(1);
        assertEquals(1, orderDataBean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee() {
        orderdatabean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.00"), "symbol");
        when(orderdatabean.getAccount()).thenReturn(account);
        when(orderdatabean.getQuote()).thenReturn(quote);
        when(orderdatabean.getHolding()).thenReturn(holding);
        when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
        when(holding.getPurchasePrice()).thenReturn(new BigDecimal("10.00"));
        BigDecimal expectedOrderFee = new BigDecimal("0.00");
        BigDecimal actualOrderFee = orderdatabean.getOrderFee();
        assertEquals(expectedOrderFee, actualOrderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_Qjff0() {
        OrderDataBean orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol");
        String expected = "<BR>Order <B>1</B>" + "<LI>      orderType: BUY</LI>" + "<LI>    orderStatus: OPEN</LI>" + "<LI>       openDate: " + orderDataBean.getOpenDate() + "</LI>" + "<LI> completionDate: " + orderDataBean.getCompletionDate() + "</LI>" + "<LI>       quantity: 100.0</LI>" + "<LI>          price: 100.0</LI>" + "<LI>       orderFee: 10.0</LI>" + "<LI>         symbol: symbol</LI>";
        assertEquals(expected, orderDataBean.toHTML());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderType() throws Exception {
        orderdatabean = new OrderDataBean();
        // Set up the expected behavior of the setOrderType method
        doNothing().when(orderdatabean).setOrderType(anyString());
        // Call the method being tested
        orderdatabean.setOrderType("buy");
        // Verify that the method was called with the expected argument
        verify(orderdatabean).setOrderType("buy");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetQuantity_JXCN0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuantity(100.0);
        assertEquals(100.0, orderDataBean.getQuantity(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_1() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = QuoteDataBean.getRandomInstance();
        when(mockQuote.getCompanyName()).thenReturn("mockCompanyName");
        when(mockQuote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(mockQuote.getOpen()).thenReturn(new BigDecimal(90.0));
        when(mockQuote.getLow()).thenReturn(new BigDecimal(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(new BigDecimal(110.0));
        when(mockQuote.getSymbol()).thenReturn("mockSymbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        assertEquals("mockCompanyName", orderdatabean.getQuote().getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_2() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = QuoteDataBean.getRandomInstance();
        when(mockQuote.getCompanyName()).thenReturn("mockCompanyName");
        when(mockQuote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(mockQuote.getOpen()).thenReturn(new BigDecimal(90.0));
        when(mockQuote.getLow()).thenReturn(new BigDecimal(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(new BigDecimal(110.0));
        when(mockQuote.getSymbol()).thenReturn("mockSymbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        assertEquals(new BigDecimal(100.0), orderdatabean.getQuote().getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_3() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = QuoteDataBean.getRandomInstance();
        when(mockQuote.getCompanyName()).thenReturn("mockCompanyName");
        when(mockQuote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(mockQuote.getOpen()).thenReturn(new BigDecimal(90.0));
        when(mockQuote.getLow()).thenReturn(new BigDecimal(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(new BigDecimal(110.0));
        when(mockQuote.getSymbol()).thenReturn("mockSymbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        assertEquals(new BigDecimal(90.0), orderdatabean.getQuote().getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_4() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = QuoteDataBean.getRandomInstance();
        when(mockQuote.getCompanyName()).thenReturn("mockCompanyName");
        when(mockQuote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(mockQuote.getOpen()).thenReturn(new BigDecimal(90.0));
        when(mockQuote.getLow()).thenReturn(new BigDecimal(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(new BigDecimal(110.0));
        when(mockQuote.getSymbol()).thenReturn("mockSymbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        assertEquals(new BigDecimal(80.0), orderdatabean.getQuote().getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_5() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = QuoteDataBean.getRandomInstance();
        when(mockQuote.getCompanyName()).thenReturn("mockCompanyName");
        when(mockQuote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(mockQuote.getOpen()).thenReturn(new BigDecimal(90.0));
        when(mockQuote.getLow()).thenReturn(new BigDecimal(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(new BigDecimal(110.0));
        when(mockQuote.getSymbol()).thenReturn("mockSymbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        assertEquals(10.0, orderdatabean.getQuote().getChange());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_6() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = QuoteDataBean.getRandomInstance();
        when(mockQuote.getCompanyName()).thenReturn("mockCompanyName");
        when(mockQuote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(mockQuote.getOpen()).thenReturn(new BigDecimal(90.0));
        when(mockQuote.getLow()).thenReturn(new BigDecimal(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(new BigDecimal(110.0));
        when(mockQuote.getSymbol()).thenReturn("mockSymbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        assertEquals(new BigDecimal(110.0), orderdatabean.getQuote().getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_7() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = QuoteDataBean.getRandomInstance();
        when(mockQuote.getCompanyName()).thenReturn("mockCompanyName");
        when(mockQuote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(mockQuote.getOpen()).thenReturn(new BigDecimal(90.0));
        when(mockQuote.getLow()).thenReturn(new BigDecimal(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(new BigDecimal(110.0));
        when(mockQuote.getSymbol()).thenReturn("mockSymbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        assertEquals("mockSymbol", orderdatabean.getQuote().getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote_8() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = QuoteDataBean.getRandomInstance();
        when(mockQuote.getCompanyName()).thenReturn("mockCompanyName");
        when(mockQuote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(mockQuote.getOpen()).thenReturn(new BigDecimal(90.0));
        when(mockQuote.getLow()).thenReturn(new BigDecimal(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(new BigDecimal(110.0));
        when(mockQuote.getSymbol()).thenReturn("mockSymbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        assertEquals(1000.0, orderdatabean.getQuote().getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderType_yEby0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderType("BUY");
        assertEquals("BUY", orderDataBean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice() throws Exception {
        orderdatabean = new OrderDataBean();
        // Mock the QuoteDataBean and AccountDataBean objects
        QuoteDataBean quote = mock(QuoteDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        // Set the price using the setPrice method
        orderdatabean.setPrice(price);
        // Verify that the setPrice method was called with the correct price
        verify(orderdatabean).setPrice(price);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuote_QjjH0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        orderDataBean.setQuote(quoteDataBean);
        assertNotNull(orderDataBean.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() {
        orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        other = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        assertEquals(orderdatabean, orderdatabean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() {
        orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        other = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        assertNotEquals(orderdatabean, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() {
        orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        other = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        assertNotEquals(orderdatabean, new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() {
        orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        other = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        assertNotEquals(orderdatabean, other);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetPrice_llTN0() {
        OrderDataBean order = new OrderDataBean();
        BigDecimal price = new BigDecimal(100.0);
        order.setPrice(price);
        assertEquals(price, order.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_xGtm0_1() {
        OrderDataBean order = new OrderDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        order.setHolding(holding);
        assertNotNull(order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_xGtm0_2() {
        OrderDataBean order = new OrderDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        order.setHolding(holding);
        assertEquals(holding, order.getHolding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderType() throws Exception {
        orderType = "buy";
        when(orderdatabean.getOrderType()).thenReturn(orderType);
        assertEquals(orderType, orderdatabean.getOrderType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus_gJSU0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("open");
        assertEquals("open", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusNull_dBpj1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus(null);
        assertEquals(null, orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusEmpty_fPyL2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("");
        assertEquals("", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusInvalid_uisz4() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("invalid");
        assertEquals("invalid", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusNullAccount_xSKc5() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setAccountID(null);
        orderDataBean.setOrderStatus("open");
        orderDataBean.setAccount(accountDataBean);
        assertEquals("open", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusNullQuote_MdNN6() {
        OrderDataBean orderDataBean = new OrderDataBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(null);
        orderDataBean.setOrderStatus("open");
        orderDataBean.setQuote(quoteDataBean);
        assertEquals("open", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatusNullHolding_nmWi7() {
        OrderDataBean orderDataBean = new OrderDataBean();
        HoldingDataBean holdingDataBean = new HoldingDataBean();
        holdingDataBean.setHoldingID(null);
        orderDataBean.setOrderStatus("open");
        orderDataBean.setHolding(holdingDataBean);
        assertEquals("open", orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_QLfz0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Date completionDate = orderDataBean.getCompletionDate();
        assertEquals(null, completionDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol1_bTiZ0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setQuote(new QuoteDataBean());
        orderDataBean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol2_behW1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setSymbol("symbol1");
        orderDataBean.getSymbol();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuantity(quantity);
        // Set up the expected behavior of the setQuantity method
        doNothing().when(orderdatabean).setQuantity(anyDouble());
        // Call the method to be tested
        orderdatabean.setQuantity(100.0);
        // Verify that the method was called with the expected arguments
        verify(orderdatabean, times(1)).setQuantity(100.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsCompleted1_VFNw0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("completed");
        assertTrue(orderDataBean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsCompleted2_jFzy1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("alertcompleted");
        assertTrue(orderDataBean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsCompleted3_ioGv2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("cancelled");
        assertTrue(orderDataBean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsCompleted4_PTWx3() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("open");
        assertFalse(orderDataBean.isCompleted());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetQuote_zjIh0() {
        OrderDataBean order = new OrderDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        order.setQuote(quote);
        assertSame(quote, order.getQuote());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetCompletionDate() throws Exception {
        orderdatabean = new OrderDataBean(1, "buy", "open", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("10.0"), "symbol");
        orderdatabean.setCompletionDate(new Date());
        assertEquals(new Date(), orderdatabean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccount() throws Exception {
        orderdatabean = new OrderDataBean();
        account = AccountDataBean.getRandomInstance();
        orderdatabean.setAccount(account);
        when(mockAccount.getAccountID()).thenReturn(account.getAccountID());
        when(mockAccount.getProfileID()).thenReturn(account.getProfileID());
        when(mockAccount.getCreationDate()).thenReturn(account.getCreationDate());
        when(mockAccount.getLogoutCount()).thenReturn(account.getLogoutCount());
        when(mockAccount.getLoginCount()).thenReturn(account.getLoginCount());
        when(mockAccount.getBalance()).thenReturn(account.getBalance());
        when(mockAccount.getOpenBalance()).thenReturn(account.getOpenBalance());
        when(mockAccount.getOrders()).thenReturn(account.getOrders());
        when(mockAccount.getHoldings()).thenReturn(account.getHoldings());
        when(mockAccount.getProfile()).thenReturn(account.getProfile());
        assertEquals(account, orderdatabean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_Steg0() {
        OrderDataBean order = new OrderDataBean();
        order.setQuantity(100.0);
        assertEquals(100.0, order.getQuantity(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDate_szbD0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setCompletionDate(new Date());
        assertNotNull(orderDataBean.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccount_gyAW0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        AccountDataBean accountDataBean = orderDataBean.getAccount();
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled1_qPbf0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("cancelled");
        boolean result = orderDataBean.isCancelled();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCancelled2_rkfu1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("open");
        boolean result = orderDataBean.isCancelled();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_cGhP0() throws Exception {
        orderID = 123;
        orderdatabean = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.01"), "IBM");
        when(orderdatabean.getOrderID()).thenReturn(orderID);
        assertEquals(orderID, orderdatabean.getOrderID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderFee_NFxH0() throws Exception {
        OrderDataBean orderdatabean = new OrderDataBean();
        BigDecimal newOrderFee = new BigDecimal(100);
        orderdatabean.setOrderFee(newOrderFee);
        assertEquals(newOrderFee, orderdatabean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_oTcL0_IdBG0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer expectedOrderID = 1;
        orderDataBean.setOrderID(expectedOrderID);
        Integer actualOrderID = orderDataBean.getOrderID();
        assertEquals(expectedOrderID, actualOrderID);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus_PpzM0() {
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        orderDataBean = new OrderDataBean();
        String newOrderStatus = "newOrderStatus";
        orderDataBean.setOrderStatus(newOrderStatus);
        assertEquals(newOrderStatus, orderDataBean.getOrderStatus());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenDate_wfin0() throws Exception {
        openDate = new Date();
        when(orderdatabean.getOpenDate()).thenReturn(openDate);
        Date actualOpenDate = orderdatabean.getOpenDate();
        assertEquals(openDate, actualOpenDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompletionDate_ebrS0() throws Exception {
        orderdatabean = new OrderDataBean(1, "Buy", "Open", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "Symbol");
        assertEquals(orderdatabean.getCompletionDate(), new Date());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate_qDKI0() {
        openDate = new Date();
        orderdatabean = new OrderDataBean();
        orderdatabean.setOpenDate(openDate);
        Date newOpenDate = new Date();
        orderdatabean.setOpenDate(newOpenDate);
        assertEquals(newOpenDate, orderdatabean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_RuDQ0_Nhji0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.00"), new BigDecimal("10.00"), "symbol");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate().toString() + "\n\t completionDate: " + order.getCompletionDate().toString() + "\n\t       quantity: 100.0\n\t          price: 100.00\n\t       orderFee: 10.00\n\t         symbol: symbol";
        assertEquals(expected, order.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_kXvj0_RRao0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal orderFee = new BigDecimal("100.0");
        orderDataBean.setOrderFee(orderFee);
        assertEquals(orderFee, orderDataBean.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDate_MDsP0_LhLP1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertNotNull(orderDataBean.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate_TvtO0_DTha0() {
        OrderDataBean order = new OrderDataBean();
        Calendar calendar = Calendar.getInstance();
        Date openDate = calendar.getTime();
        order.setOpenDate(openDate);
        assertEquals(openDate, order.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_UUjj0_1() throws Exception {
        orderdatabean = new OrderDataBean();
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        when(orderdatabean.getOrderStatus()).thenReturn("processing");
        when(orderdatabean.getOrderStatus()).thenReturn("closed");
        when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
        assertTrue(orderdatabean.isOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen_UUjj0_3() throws Exception {
        orderdatabean = new OrderDataBean();
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        when(orderdatabean.getOrderStatus()).thenReturn("processing");
        when(orderdatabean.getOrderStatus()).thenReturn("closed");
        when(orderdatabean.getOrderStatus()).thenReturn("cancelled");
        assertFalse(orderdatabean.isOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals2_RRWv1_FrKv0() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(2, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
        boolean expected = false;
        boolean actual = orderDataBean1.equals(orderDataBean2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals4_EZHk3_xtez0() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status2", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
        boolean expected = false;
        boolean actual = orderDataBean1.equals(orderDataBean2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals3_YRIW2_MiqA0() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type2", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
        boolean expected = false;
        boolean actual = orderDataBean1.equals(orderDataBean2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_aYsl0() {
        HoldingDataBean holding = mock(HoldingDataBean.class);
        OrderDataBean orderdatabean = new OrderDataBean();
        orderdatabean.setHolding(holding);
        verify(orderdatabean, times(1)).setHolding(holding);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_AJsQ0() {
        orderdatabean = new OrderDataBean();
        orderdatabean.setQuantity(quantity);
        doNothing().when(orderdatabean).setQuantity(anyDouble());
        orderdatabean.setQuantity(100.0);
        verify(orderdatabean, times(1)).setQuantity(anyDouble());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals5_brPv4_UiQe0() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status1", new Date(1), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
        boolean expected = false;
        boolean actual = orderDataBean1.equals(orderDataBean2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals1_oPJK0_tqUR0() {
        OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
        OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
        boolean expected = true;
        boolean actual = orderDataBean1.equals(orderDataBean2);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Riil0() {
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.10"), "symbol");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + orderDataBean.getOpenDate() + "\n\t completionDate: " + orderDataBean.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.00\n\t       orderFee: 0.10\n\t         symbol: symbol";
        String actual = orderDataBean.toString();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccount_aIkt0() throws Exception {
        orderdatabean = new OrderDataBean();
        account = AccountDataBean.getRandomInstance();
        orderdatabean.setAccount(account);
        when(mockAccount.getAccountID()).thenReturn(account.getAccountID());
        when(mockAccount.getProfileID()).thenReturn(account.getProfileID());
        when(mockAccount.getLogoutCount()).thenReturn(account.getLogoutCount());
        when(mockAccount.getLoginCount()).thenReturn(account.getLoginCount());
        when(mockAccount.getBalance()).thenReturn(account.getBalance());
        when(mockAccount.getOpenBalance()).thenReturn(account.getOpenBalance());
        when(mockAccount.getOrders()).thenReturn(account.getOrders());
        when(mockAccount.getHoldings()).thenReturn(account.getHoldings());
        when(mockAccount.getProfile()).thenReturn(account.getProfile());
        assertEquals(account, orderdatabean.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRandomInstanceTest2_GYWH1() {
        OrderDataBean orderDataBean = OrderDataBean.getRandomInstance();
        assertNotNull(orderDataBean.getAccount());
        assertNotNull(orderDataBean.getCompletionDate());
        assertNotNull(orderDataBean.getHolding());
        assertNotNull(orderDataBean.getOpenDate());
        assertNotNull(orderDataBean.getPrice());
        assertNotNull(orderDataBean.getQuote());
        assertNotNull(orderDataBean.getQuantity());
        assertNotNull(orderDataBean.getOrderFee());
        assertNotNull(orderDataBean.getOrderID());
        assertNotNull(orderDataBean.getOrderStatus());
        assertNotNull(orderDataBean.getOrderType());
        assertNotNull(orderDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding() throws Exception {
        orderdatabean = new OrderDataBean();
        holding = mock(HoldingDataBean.class);
        when(mockHolding.getQuantity()).thenReturn(100.0);
        when(mockHolding.getQuoteID()).thenReturn("123");
        when(mockHolding.getQuote()).thenReturn(new QuoteDataBean());
        when(mockHolding.getPurchasePrice()).thenReturn(BigDecimal.valueOf(100.0));
        when(mockHolding.getPurchaseDate()).thenReturn(new Date());
        when(mockHolding.getAccount()).thenReturn(new AccountDataBean());
        orderdatabean.setHolding(mockHolding);
        HoldingDataBean holding = orderdatabean.getHolding();
        assertEquals(100.0, holding.getQuantity(), 0.0);
        assertEquals("123", holding.getQuoteID());
        assertNotNull(holding.getQuote());
        assertEquals(BigDecimal.valueOf(100.0), holding.getPurchasePrice());
        assertNotNull(holding.getPurchaseDate());
        assertNotNull(holding.getAccount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetQuote() throws Exception {
        orderdatabean = new OrderDataBean();
        quote = QuoteDataBean.getRandomInstance();
        when(mockQuote.getCompanyName()).thenReturn("mockCompanyName");
        when(mockQuote.getPrice()).thenReturn(new BigDecimal(100.0));
        when(mockQuote.getOpen()).thenReturn(new BigDecimal(90.0));
        when(mockQuote.getLow()).thenReturn(new BigDecimal(80.0));
        when(mockQuote.getChange()).thenReturn(10.0);
        when(mockQuote.getHigh()).thenReturn(new BigDecimal(110.0));
        when(mockQuote.getSymbol()).thenReturn("mockSymbol");
        when(mockQuote.getVolume()).thenReturn(1000.0);
        orderdatabean.setQuote(mockQuote);
        assertEquals("mockCompanyName", orderdatabean.getQuote().getCompanyName());
        assertEquals(new BigDecimal(100.0), orderdatabean.getQuote().getPrice());
        assertEquals(new BigDecimal(90.0), orderdatabean.getQuote().getOpen());
        assertEquals(new BigDecimal(80.0), orderdatabean.getQuote().getLow());
        assertEquals(10.0, orderdatabean.getQuote().getChange());
        assertEquals(new BigDecimal(110.0), orderdatabean.getQuote().getHigh());
        assertEquals("mockSymbol", orderdatabean.getQuote().getSymbol());
        assertEquals(1000.0, orderdatabean.getQuote().getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() {
        orderdatabean = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        other = new OrderDataBean(1, "type", "status", new Date(), new Date(), 1.0, new BigDecimal(1.0), new BigDecimal(1.0), "symbol");
        assertEquals(orderdatabean, orderdatabean);
        assertNotEquals(orderdatabean, null);
        assertNotEquals(orderdatabean, new Object());
        assertNotEquals(orderdatabean, other);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding_xGtm0() {
        OrderDataBean order = new OrderDataBean();
        HoldingDataBean holding = new HoldingDataBean();
        order.setHolding(holding);
        assertNotNull(order.getHolding());
        assertEquals(holding, order.getHolding());
    }
}