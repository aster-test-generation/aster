/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataBean_Test_Failing {
    OrderDataBean orderdatabean;
    private String symbol;
    private Integer orderID;
    private BigDecimal price;
    @Mock
    private QuoteDataBean quote;
    @Mock
    private HoldingDataBean holding;
    @Mock
    private AccountDataBean account;
    @Mock
    private HoldingDataBean mockHolding;
    private OrderDataBean orderDataBean;
    private AccountDataBean accountDataBean;
    private QuoteDataBean quoteDataBean;
    private HoldingDataBean holdingDataBean;
    private double quantity;
    private BigDecimal orderFee;
    private String orderType;
    @Mock
    private QuoteDataBean mockQuote;
    private OrderDataBean other;
    private Date openDate;
    private Date completionDate;
    @Mock
    private AccountDataBean mockAccount;
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderStatus() throws Exception{
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderdatabean = new OrderDataBean("buy", "open", new Date(), new Date(), 100.0, new BigDecimal("100.0"), new BigDecimal("1.0"), "symbol");
        when(orderdatabean.getAccount()).thenReturn(accountDataBean);
        when(orderdatabean.getQuote()).thenReturn(quoteDataBean);
        when(orderdatabean.getHolding()).thenReturn(holdingDataBean);
        assertEquals("buy", orderdatabean.getOrderType());
        assertEquals("open", orderdatabean.getOrderStatus());
        assertNotNull(orderdatabean.getOpenDate());
        assertNotNull(orderdatabean.getCompletionDate());
        assertEquals(100.0, orderdatabean.getQuantity(), 0.0);
        assertEquals(new BigDecimal("100.0"), orderdatabean.getPrice());
        assertEquals(new BigDecimal("1.0"), orderdatabean.getOrderFee());
        assertEquals("symbol", orderdatabean.getSymbol());
    }
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderStatus() {
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderDataBean = new OrderDataBean();
        String newOrderStatus = "newOrderStatus";
        orderDataBean.setOrderStatus(newOrderStatus);
        assertEquals(newOrderStatus, orderDataBean.getOrderStatus());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol() throws Exception{
        quote = new QuoteDataBean();
        symbol = "symbol";
        orderdatabean = new OrderDataBean(null, null, null, null, 0, null, null, quote, symbol);
        assertEquals(symbol, orderdatabean.getSymbol());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_RpJi0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        String orderStatus = orderDataBean.getOrderStatus();
        assertEquals("new", orderStatus);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID() throws Exception {
        orderID = 123;
        orderdatabean = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.01"), "IBM");
        when(orderdatabean.getOrderID()).thenReturn(orderID);
        assertEquals(orderID, orderdatabean.getOrderID());
    }
    private String orderStatus; /*
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisOpen() throws Exception{
        orderdatabean = new OrderDataBean();
        when(orderdatabean.getOrderStatus()).thenReturn("open");
        assertTrue(orderdatabean.isOpen());
        when(orderdatabean.getOrderStatus()).thenReturn("processing");
        assertTrue(orderdatabean.isOpen());
        when(orderdatabean.getOrderStatus()).thenReturn("closed");
        assertFalse(orderdatabean.isOpen());
        when(orderdatabean.getOrderStatus()).thenReturn("canceled");
        assertFalse(orderdatabean.isOpen());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString() {
        accountDataBean = mock(AccountDataBean.class);
        quoteDataBean = mock(QuoteDataBean.class);
        holdingDataBean = mock(HoldingDataBean.class);
        orderDataBean = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("10.00"), new BigDecimal("0.10"), "symbol");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + orderDataBean.getOpenDate() + "\n\t completionDate: " + orderDataBean.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 10.00\n\t       orderFee: 0.10\n\t         symbol: symbol";
        String actual = orderDataBean.toString();
        assertEquals(expected, actual);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_oTcL0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        Integer expectedOrderID = 1;
        orderDataBean.setOrderID(expectedOrderID);
        Integer actualOrderID = orderDataBean.getOrderID();
        assertEquals(expectedOrderID, actualOrderID);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccount() {
        account = mock(AccountDataBean.class);
        orderdatabean = new OrderDataBean();
        orderdatabean.setAccount(account);
        verify(account, times(1)).setOrders(any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test1_Agjq0() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test2_jUOb1() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test3_ptDI2() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test4_FZSg3() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test5_fgLd4() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test6_HUgY5() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test7_HpMr6() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test8_OGpt7() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test9_ObtC8() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test10_qgRT9() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test11_nxMj10() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test12_cqaP11() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test13_wDlD12() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test14_atmY13() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test15_xJCZ14() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test16_JgHh15() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test17_awKe16() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test18_BtGH17() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test19_gyaO18() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test20_oclk19() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test21_yKma20() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test22_PYQn21() {
    OrderDataBean orderDataBean = new OrderDataBean();
    BigDecimal orderFee = orderDataBean.getOrderFee();
    assertNotNull(orderFee);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetOrderFee() throws Exception{
        orderdatabean = new OrderDataBean();
        BigDecimal newOrderFee = new BigDecimal(100);
        orderdatabean.setOrderFee(newOrderFee);
        assertEquals(newOrderFee, orderdatabean.getOrderFee());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenDate() throws Exception {
        openDate = new Date();
        when(orderdatabean.getOpenDate()).thenReturn(openDate);
        // Act
        Date actualOpenDate = orderdatabean.getOpenDate();
        // Assert
        assertEquals(openDate, actualOpenDate);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsOpen1_wSjB0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("open");
        assertTrue(orderDataBean.isOpen());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsOpen2_brqW1() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("processing");
        assertTrue(orderDataBean.isOpen());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsOpen3_ofJS2() {
        OrderDataBean orderDataBean = new OrderDataBean();
        orderDataBean.setOrderStatus("closed");
        assertFalse(orderDataBean.isOpen());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_RuDQ0() {
        OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), new Date(), 100.0, new BigDecimal("100.00"), new BigDecimal("10.00"), "symbol");
        String expected = "Order 1\n\t      orderType: BUY\n\t    orderStatus: OPEN\n\t       openDate: " + order.getOpenDate() + "\n\t completionDate: " + order.getCompletionDate() + "\n\t       quantity: 100.0\n\t          price: 100.00\n\t       orderFee: 10.00\n\t         symbol: symbol";
        assertEquals(expected, order.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate() {
        openDate = new Date();
        orderdatabean = new OrderDataBean();
        orderdatabean.setOpenDate(openDate);
        Date newOpenDate = new Date();
        orderdatabean.setOpenDate(newOpenDate);
        assertEquals(newOpenDate, orderdatabean.getOpenDate());
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetAccount_cVks0() {
        OrderDataBean order = new OrderDataBean();
        AccountDataBean account = new AccountDataBean();
        order.setAccount(account);
        assertEquals(account, order.getAccount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals1_oPJK0() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
    boolean expected = true;
    boolean actual = orderDataBean1.equals(orderDataBean2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals2_RRWv1() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
    OrderDataBean orderDataBean2 = new OrderDataBean(2, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
    boolean expected = false;
    boolean actual = orderDataBean1.equals(orderDataBean2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals3_YRIW2() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "type2", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
    boolean expected = false;
    boolean actual = orderDataBean1.equals(orderDataBean2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals4_EZHk3() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status2", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
    boolean expected = false;
    boolean actual = orderDataBean1.equals(orderDataBean2);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals5_brPv4() {
    OrderDataBean orderDataBean1 = new OrderDataBean(1, "type1", "status1", new Date(), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
    OrderDataBean orderDataBean2 = new OrderDataBean(1, "type1", "status1", new Date(1), new Date(), 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), "symbol1");
    boolean expected = false;
    boolean actual = orderDataBean1.equals(orderDataBean2);
    assertEquals(expected, actual);
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_kXvj0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        BigDecimal orderFee = new BigDecimal(100.0);
        orderDataBean.setOrderFee(orderFee);
        assertEquals(orderFee, orderDataBean.getOrderFee());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHolding() {
        holding = mock(HoldingDataBean.class);
        orderdatabean = new OrderDataBean();
        orderdatabean.setHolding(holding);
        verify(orderdatabean).setHolding(holding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetOpenDate_TvtO0() {
    OrderDataBean order = new OrderDataBean();
    Date openDate = new Date();
    order.setOpenDate(openDate);
    assertEquals(openDate, order.getOpenDate());
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenDate_MDsP0() {
        OrderDataBean orderDataBean = new OrderDataBean();
        assertNotNull(orderDataBean.getOpenDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompletionDate() throws Exception{
        orderdatabean = new OrderDataBean(1, "Buy", "Open", new Date(), new Date(), 100.0, new BigDecimal(100.0), new BigDecimal(10.0), "Symbol");
        assertEquals(orderdatabean.getCompletionDate(), new Date());
    }
    private String orderType; /* orderType (buy, sell, etc.) */
}