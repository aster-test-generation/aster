/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.util.concurrent.TimeUnit;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletCDIEventAsync_Test_Passing {
    @InjectMocks
    private PingServletCDIEventAsync pingServletCDIEventAsync;
    private HttpServletResponse response;
    private static int hitCount2;
    private static String initTime;
    private static int hitCount1;
    PingServletCDIEventAsync pingservletcdieventasync;
    HttpServlet httpservlet;
    HttpServletResponse httpservletresponse;
    private int hitCount;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletcdieventasync = new PingServletCDIEventAsync();
        pingservletcdieventasync.init(null);
        verify(httpservlet, times(1)).init(any());
        assertEquals(0, hitCount1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletcdieventasync = new PingServletCDIEventAsync();
        pingservletcdieventasync.init(null);
        verify(httpservlet, times(1)).init(any());
        assertEquals(0, hitCount2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_3() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletcdieventasync = new PingServletCDIEventAsync();
        pingservletcdieventasync.init(null);
        verify(httpservlet, times(1)).init(any());
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_kevi0() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletcdieventasync = new PingServletCDIEventAsync();
        pingservletcdieventasync.init(null);
        verify(httpservlet, times(1)).init(any());
        assertEquals(0, hitCount1);
        assertEquals(0, hitCount2);
        assertNotNull(initTime);
    }
}