/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DirectSLSBBean_Coverage_Test_Failing {
    private static TradeDirect tradeDirect;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_ByLI0() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithInSessionTrue_EwZW0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = AccountDataBean.getRandomInstance();
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        String orderType = "BUY";
        double quantity = 100.0;
        tradeDirect.setInSession(true);
        OrderDataBean orderDataBean = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithInSessionFalse_ViFt1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = AccountDataBean.getRandomInstance();
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        String orderType = "BUY";
        double quantity = 100.0;
        tradeDirect.setInSession(false);
        OrderDataBean orderDataBean = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_setInSession_wCwn0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister1_qCvY1() throws Exception {
        tradeDirect.setInSession(true);
        AccountDataBean accountDataBean = tradeDirect.register("1", "1", "1", "1", "1", "1", new BigDecimal(1));
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_SaGA2() throws Exception {
        tradeDirect.setInSession(true);
        AccountDataBean accountDataBean = tradeDirect.register("2", "2", "2", "2", "2", "2", new BigDecimal(2));
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin_HCwj0() throws Exception {
        DirectSLSBBean direct = new DirectSLSBBean();
        AccountDataBean account = direct.login("uid", "pwd");
        assertNotNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogin2_damo1() throws Exception {
        DirectSLSBBean direct = new DirectSLSBBean();
        AccountDataBean account = direct.login("uid2", "pwd2");
        assertNotNull(account);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderWithTwoPhaseTrue_queI0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = true;
        OrderDataBean orderDataBean = directSLSBBean.completeOrder(orderID, twoPhase);
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderWithTwoPhaseFalse_WpUG1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer orderID = 1;
        boolean twoPhase = false;
        OrderDataBean orderDataBean = directSLSBBean.completeOrder(orderID, twoPhase);
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_URTU1_2() throws Exception {
        tradeDirect.setInSession(true);
        Collection<HoldingDataBean> holdings = tradeDirect.getHoldings("uid:0");
        assertTrue(!holdings.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder_vysr0() throws java.lang.Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        tradeDirect.cancelOrder(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder2_mdoq1() throws java.lang.Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        tradeDirect.cancelOrder(2, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrder3_foQS2() throws java.lang.Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        tradeDirect.cancelOrder(3, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateQuote1_ezDF0() throws java.lang.Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = tradeDirect.createQuote("symbol", "companyName", new BigDecimal(100));
        Assertions.assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_KVSy0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.queueOrder(100, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder2_dkBu1() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.queueOrder(200, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder3_cNeP2() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        directSLSBBean.queueOrder(300, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfile_fICf1() throws Exception {
        AccountProfileDataBean profileData = new AccountProfileDataBean();
        profileData.setCreditCard("1234567890123456");
        tradeDirect.setInSession(true);
        AccountProfileDataBean updatedProfileData = tradeDirect.updateAccountProfile(profileData);
        assertEquals(profileData.getCreditCard(), updatedProfileData.getCreditCard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateAccountProfileWithNullInput_gfor2() throws Exception {
        AccountProfileDataBean profileData = null;
        try {
            tradeDirect.setInSession(true);
            tradeDirect.updateAccountProfile(profileData);
            fail("Expected IllegalArgumentException for null input");
        } catch (IllegalArgumentException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountProfileData1_ARUo0() throws Exception {
        DirectSLSBBean tradeBean = new DirectSLSBBean();
        AccountProfileDataBean accountProfileDataBean = tradeBean.getAccountProfileData("1");
        Assertions.assertNotNull(accountProfileDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_uhdI0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = directSLSBBean.pingTwoPhase("symbol");
        assertNotNull(quoteDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted1_CjJB0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.setInSession(true);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted2_jvRj1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.orderCompleted("userID", 1);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccountData1_CwNc0() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        AccountDataBean accountDataBean = new AccountDataBean();
        accountDataBean.setCreationDate(new Date());
        accountDataBean.setLogoutCount(1);
        accountDataBean.setLoginCount(1);
        accountDataBean.setOpenBalance(new BigDecimal(1000.0));
        accountDataBean.setBalance(new BigDecimal(1000.0));
        accountDataBean.setAccountID(1);
        accountDataBean.setProfileID("1");
        tradeDirect.setInSession(true);
        AccountDataBean accountDataBean2 = tradeDirect.getAccountData("1");
        Assertions.assertEquals(accountDataBean, accountDataBean2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding1_zqBx0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer holdingID = null;
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(holdingID);
        Assertions.assertNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHolding2_EYtJ1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        Integer holdingID = 1;
        HoldingDataBean holdingDataBean = directSLSBBean.getHolding(holdingID);
        Assertions.assertNotNull(holdingDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithTwoPhaseTrue_CVyj0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.completeOrderAsync(1, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompleteOrderAsyncWithTwoPhaseFalse_RJIh1() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.completeOrderAsync(1, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell1_GAtQ0() throws Exception {
        DirectSLSBBean tradeSLSB = new DirectSLSBBean();
        String userID = null;
        Integer holdingID = null;
        int orderProcessingMode = 1;
        OrderDataBean orderdata = tradeSLSB.sell(userID, holdingID, orderProcessingMode);
        Assertions.fail("This is a generated test case");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell2_RVUF1() throws Exception {
        DirectSLSBBean tradeSLSB = new DirectSLSBBean();
        String userID = "";
        Integer holdingID = null;
        int orderProcessingMode = 1;
        OrderDataBean orderdata = tradeSLSB.sell(userID, holdingID, orderProcessingMode);
        Assertions.fail("This is a generated test case");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell3_qZxu2() throws Exception {
        DirectSLSBBean tradeSLSB = new DirectSLSBBean();
        String userID = "1";
        Integer holdingID = null;
        int orderProcessingMode = 1;
        OrderDataBean orderdata = tradeSLSB.sell(userID, holdingID, orderProcessingMode);
        Assertions.fail("This is a generated test case");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell4_BWiC3() throws Exception {
        DirectSLSBBean tradeSLSB = new DirectSLSBBean();
        String userID = "1";
        Integer holdingID = 1;
        int orderProcessingMode = 1;
        OrderDataBean orderdata = tradeSLSB.sell(userID, holdingID, orderProcessingMode);
        Assertions.fail("This is a generated test case");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy1_cJJk0() throws Exception {
        DirectSLSBBean tradeSLSB = new DirectSLSBBean();
        String userID = "1";
        String symbol = "1";
        double quantity = 1;
        int orderProcessingMode = 1;
        tradeSLSB.setInSession(true);
        OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
        if (orderProcessingMode == TradeConfig.ASYNCH) {
            tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy2_eUER1() throws Exception {
        DirectSLSBBean tradeSLSB = new DirectSLSBBean();
        String userID = "2";
        String symbol = "2";
        double quantity = 2;
        int orderProcessingMode = 2;
        tradeSLSB.setInSession(true);
        OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
        if (orderProcessingMode == TradeConfig.ASYNCH) {
            tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy3_UNRU2() throws Exception {
        DirectSLSBBean tradeSLSB = new DirectSLSBBean();
        String userID = "3";
        String symbol = "3";
        double quantity = 3;
        int orderProcessingMode = 3;
        tradeSLSB.setInSession(true);
        OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
        if (orderProcessingMode == TradeConfig.ASYNCH) {
            tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy4_lYUF3() throws Exception {
        DirectSLSBBean tradeSLSB = new DirectSLSBBean();
        String userID = "4";
        String symbol = "4";
        double quantity = 4;
        int orderProcessingMode = 4;
        tradeSLSB.setInSession(true);
        OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
        if (orderProcessingMode == TradeConfig.ASYNCH) {
            tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy5_aCvC4() throws Exception {
        DirectSLSBBean tradeSLSB = new DirectSLSBBean();
        String userID = "5";
        String symbol = "5";
        double quantity = 5;
        int orderProcessingMode = 5;
        tradeSLSB.setInSession(true);
        OrderDataBean orderdata = tradeSLSB.buy(userID, symbol, quantity, orderProcessingMode);
        if (orderProcessingMode == TradeConfig.ASYNCH) {
            tradeSLSB.completeOrderAsync(orderdata.getOrderID(), false);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateOrderWithInSessionFalse_ViFt1_jGnA0() throws Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        AccountDataBean account = AccountDataBean.getRandomInstance();
        QuoteDataBean quote = QuoteDataBean.getRandomInstance();
        HoldingDataBean holding = HoldingDataBean.getRandomInstance();
        String orderType = "BUY";
        double quantity = 100.0;
        tradeDirect.setInSession(false);
        OrderDataBean orderDataBean = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
        assertNotNull(orderDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister1_qCvY1_SMuA0() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        AccountDataBean accountDataBean = tradeDirect.register("1", "1", "1", "1", "1", "1", new BigDecimal(1));
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_SaGA2_GUue0() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        AccountDataBean accountDataBean = tradeDirect.register("user", "password", "email", "creditcard", "address", "openBalance", new BigDecimal(2));
        assertNotNull(accountDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_URTU1_egXX0_1() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        Collection<HoldingDataBean> holdings = tradeDirect.getHoldings("uid:0");
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_URTU1_egXX0_2() throws Exception {
        DirectSLSBBean tradeDirect = new DirectSLSBBean();
        tradeDirect.setInSession(true);
        Collection<HoldingDataBean> holdings = tradeDirect.getHoldings("uid:0");
        assertTrue(!holdings.isEmpty());
    }
}