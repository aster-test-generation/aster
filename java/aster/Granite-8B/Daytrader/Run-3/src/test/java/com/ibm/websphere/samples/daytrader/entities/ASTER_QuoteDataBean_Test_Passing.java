/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompanyName_ZYAc0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        assertEquals("companyName", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetVolume_yEJf0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setVolume(100.0);
        assertEquals(100.0, quoteDataBean.getVolume(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_hoQj0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("TEST_SYMBOL");
        assertEquals("TEST_SYMBOL", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithNull_PqyV1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol(null);
        assertNull(quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithEmpty_wYhU2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("");
        assertEquals("", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithLengthGreaterThan10_mYHy4() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("1234567890");
        assertEquals("1234567890", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbolWithLengthLessThan10_ucwY5() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setSymbol("123456789");
        assertEquals("123456789", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrice_vQCC0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(100.0), new BigDecimal(90.0), new BigDecimal(80.0), new BigDecimal(110.0), 10.0);
        BigDecimal expectedPrice = new BigDecimal(100.0);
        BigDecimal actualPrice = quoteDataBean.getPrice();
        assertEquals(expectedPrice, actualPrice);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpen_htXB0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        BigDecimal open = new BigDecimal(100.0);
        quoteDataBean.setOpen(open);
        assertEquals(open, quoteDataBean.getOpen());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_beue0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithParameters_eEGL1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 100.0, new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), new BigDecimal(100.0), 100.0);
        quoteDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintWithZeroParameters_yBuw3() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("", "", 0.0, new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), new BigDecimal(0.0), 0.0);
        quoteDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLow_JrnB0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        BigDecimal low = quoteDataBean.getLow();
        assertNotNull(low);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChange_UHJF0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol1", "companyName1", 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), new BigDecimal("1.0"), new BigDecimal("1.0"), 1.0);
        assertEquals(1.0, quoteDataBean.getChange(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML_sPQx0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol1", "companyName1", 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), 1.0);
        String expected = "<BR>Quote Data for: symbol1<LI> companyName: companyName1</LI><LI>      volume: 1.0</LI><LI>       price: 1.0</LI><LI>        open1: 1.0</LI><LI>         low: 1.0</LI><LI>        high: 1.0</LI><LI>      change1: 1.0</LI>";
        String actual = quoteDataBean.toHTML();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetHigh_lMDX0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 1.0, new BigDecimal("1.0"), new BigDecimal("1.0"), new BigDecimal("1.0"), new BigDecimal("1.0"), 1.0);
        BigDecimal high = quoteDataBean.getHigh();
        assertEquals(new BigDecimal("1.0"), high);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChange_aoOA0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setChange(10.5);
        assertEquals(10.5, quoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithNegativeValue_HWwD2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setChange(-10.5);
        assertEquals(-10.5, quoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithZeroValue_NhkD3() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setChange(0.0);
        assertEquals(0.0, quoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithLargeValue_HHmc5() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setChange(1000000.0);
        assertEquals(1000000.0, quoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithSmallValue_mlyt6() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setChange(0.0000001);
        assertEquals(0.0000001, quoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithNegativeLargeValue_vFRS7() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setChange(-1000000.0);
        assertEquals(-1000000.0, quoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChangeWithNegativeSmallValue_KtIf8() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setChange(-0.0000001);
        assertEquals(-0.0000001, quoteDataBean.getChange(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_Djaa0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol");
        assertEquals("symbol", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbolWithCompanyName_QQzA1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), 1.0);
        assertEquals("symbol", quoteDataBean.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TJqo0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol1", "companyName1", 100.0, new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), 100.0);
        String expected = "\n\tQuote Data for: symbol1\n\t\t companyName: companyName1\n\t\t      volume: 100.0\n\t\t       price: 100.0\n\t\t        open1: 100.0\n\t\t         low: 100.0\n\t\t        high: 100.0\n\t\t      change1: 100.0";
        assertEquals(expected, quoteDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_Hebj0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        boolean result = quoteDataBean.equals(null);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_ZajT1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        boolean result = quoteDataBean.equals(quoteDataBean);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_XnFa2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        boolean result = quoteDataBean.equals(new Object());
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameSymbol_vkuG3() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean("symbol");
        QuoteDataBean quoteDataBean2 = new QuoteDataBean("symbol");
        boolean result = quoteDataBean1.equals(quoteDataBean2);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentSymbol_iftQ4() {
        QuoteDataBean quoteDataBean1 = new QuoteDataBean("symbol1");
        QuoteDataBean quoteDataBean2 = new QuoteDataBean("symbol2");
        boolean result = quoteDataBean1.equals(quoteDataBean2);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_wiIa0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        BigDecimal price = new BigDecimal(100.0);
        quoteDataBean.setPrice(price);
        assertEquals(price, quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNull_avDr1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setPrice(null);
        assertEquals(null, quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithZero_VTLQ2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        BigDecimal price = new BigDecimal(0.0);
        quoteDataBean.setPrice(price);
        assertEquals(price, quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPriceWithNegativeValue_tMQc3() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        BigDecimal price = new BigDecimal(-100.0);
        quoteDataBean.setPrice(price);
        assertEquals(price, quoteDataBean.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompanyName_oYjS0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setCompanyName("Test Company");
        assertEquals("Test Company", quoteDataBean.getCompanyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLow_jEot0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        BigDecimal low = new BigDecimal(100.0);
        quoteDataBean.setLow(low);
        assertEquals(low, quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithNull_rMDy1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setLow(null);
        assertNull(quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithZero_ezCa2() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        BigDecimal low = BigDecimal.ZERO;
        quoteDataBean.setLow(low);
        assertEquals(low, quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLowWithNegativeValue_ckwP3() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        BigDecimal low = new BigDecimal(-100.0);
        quoteDataBean.setLow(low);
        assertEquals(low, quoteDataBean.getLow());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVolume_CMsO0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        double volume = quoteDataBean.getVolume();
        assertEquals(0.0, volume, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVolume2_ELHW1() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol", "companyName", 1.0, new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), new BigDecimal(1.0), 1.0);
        double volume = quoteDataBean.getVolume();
        assertEquals(1.0, volume, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHigh_uBeB0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        BigDecimal high = new BigDecimal(100.0);
        quoteDataBean.setHigh(high);
        assertEquals(high, quoteDataBean.getHigh());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpen_uzXp0() {
        QuoteDataBean quoteDataBean = new QuoteDataBean("symbol1", "companyName1", 100.0, new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), new BigDecimal("100.0"), 100.0);
        BigDecimal open = quoteDataBean.getOpen();
        assertNotNull(open);
    }
}