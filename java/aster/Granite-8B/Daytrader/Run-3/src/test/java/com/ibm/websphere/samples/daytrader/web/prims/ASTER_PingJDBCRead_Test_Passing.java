/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCRead_Test_Passing {
    private static String initTime;
    private static int hitCount;
    PingJDBCRead pingjdbcread;
    HttpServlet httpservlet;
    @Mock
    HttpServlet httpServlet;
    @Mock
    HttpServletResponse httpServletResponse;
    PingJDBCRead pingJDBCRead;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcread = new PingJDBCRead();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingJDBCRead
        pingjdbcread.init(httpservlet);
        // Verify that the init method of HttpServlet was called once
        verify(httpservlet, times(1)).init(any());
        // Add assertions to verify the behavior of PingJDBCRead.init
        assertEquals(0, hitCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcread = new PingJDBCRead();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingJDBCRead
        pingjdbcread.init(httpservlet);
        // Verify that the init method of HttpServlet was called once
        verify(httpservlet, times(1)).init(any());
        // Add assertions to verify the behavior of PingJDBCRead.init
        assertNotNull(initTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitServletConfig_HKkI0() throws ServletException {
        PingJDBCRead pingJDBCRead = new PingJDBCRead();
        ServletConfig servletConfig = mock(ServletConfig.class);
        pingJDBCRead.init(servletConfig);
        verify(servletConfig, times(1)).getInitParameter("hitCount");
        verify(servletConfig, times(1)).getInitParameter("initTime");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_aTwz0() {
        PingJDBCRead pingJDBCRead = new PingJDBCRead();
        String expected = "Basic JDBC Read using a prepared statment, makes use of TradeJDBC class";
        String actual = pingJDBCRead.getServletInfo();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingjdbcread = new PingJDBCRead();
        // Mock the init method of HttpServlet
        doNothing().when(httpservlet).init(any());
        // Call the init method of PingJDBCRead
        pingjdbcread.init(httpservlet);
        // Verify that the init method of HttpServlet was called once
        verify(httpservlet, times(1)).init(any());
        // Add assertions to verify the behavior of PingJDBCRead.init
        assertEquals(0, hitCount);
        assertNotNull(initTime);
    }
}