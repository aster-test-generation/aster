/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderFee_uJdq0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "symbol");
        BigDecimal orderFee = orderData.getOrderFee();
        Assertions.assertEquals(new BigDecimal(100), orderFee);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetQuantity_fnnu0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal("10.00"), "limit", 100.0, "AAPL");
        double quantity = orderData.getQuantity();
        assertEquals(100.0, quantity, 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPrice_DCtb0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "AAPL");
        orderData.setPrice(new BigDecimal(10));
        assertEquals(new BigDecimal(10), orderData.getPrice());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderStatus_pCaO0() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal("100.00"), "Limit", 100, "AAPL");
        String orderStatus = orderData.getOrderStatus();
        assertEquals("Open", orderStatus);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_lHix0() {
        OrderData orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100.00), "Limit", 100.0, "AAPL", new BigDecimal(150.00));
        String symbol = orderData.getSymbol();
        assertEquals("AAPL", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderID_lBcT0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "symbol");
        Integer actual = orderData.getOrderID();
        Integer expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSymbol_lcED0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "symbol", new BigDecimal(10));
        orderData.setSymbol("newSymbol");
        assertEquals("newSymbol", orderData.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetOpenDate_HFMr0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "symbol");
        assertEquals(new Date(), orderData.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOrderFee_CBvE0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), BigDecimal.ZERO, "limit", 100.0, "symbol");
        orderData.setOrderFee(BigDecimal.ONE);
        assertEquals(BigDecimal.ONE, orderData.getOrderFee());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenDate_biKJ0() {
        OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(100), "limit", 100, "AAPL");
        orderData.setOpenDate(new Date());
        assertNotNull(orderData.getOpenDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrderType_QNtw0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "AAPL", new BigDecimal(150));
        String orderType = orderData.getOrderType();
        assertEquals("limit", orderType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_JOIr0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal("100"), "limit", 100, "symbol");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTotal_oXIZ0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100, "AAPL");
        orderData.setTotal(new BigDecimal(200));
        assertEquals(new BigDecimal(200), orderData.getTotal());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantity_lERo0() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100.0, "AAPL");
        orderData.setQuantity(50.0);
        assertEquals(50.0, orderData.getQuantity(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityZero_Xanz1() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100.0, "AAPL");
        orderData.setQuantity(0.0);
        assertEquals(0.0, orderData.getQuantity(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetQuantityNegative_xfBj2() {
        OrderData orderData = new OrderData(1, "open", new Date(), new Date(), new BigDecimal(100), "limit", 100.0, "AAPL");
        orderData.setQuantity(-50.0);
        assertEquals(-50.0, orderData.getQuantity(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotal_EwRZ0() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal(100), "Limit", 100, "AAPL");
        BigDecimal total = orderData.getTotal();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalWithOrderFee_ubhR2() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal(100), "Limit", 100, "AAPL", new BigDecimal(5));
        BigDecimal total = orderData.getTotal();
        assertEquals(new BigDecimal(500), total);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalWithQuantity_uYFl4() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal(100), "Limit", 50, "AAPL");
        BigDecimal total = orderData.getTotal();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalWithSymbol_LUsc5() {
        OrderData orderData = new OrderData(1, "Open", new Date(), null, new BigDecimal(100), "Limit", 100, "MSFT");
        BigDecimal total = orderData.getTotal();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTotalWithAllParameters_aQeU6() {
        OrderData orderData = new OrderData(1, "Open", new Date(), new Date(), new BigDecimal(100), "Limit", 100, "AAPL", new BigDecimal(5));
        BigDecimal total = orderData.getTotal();
        assertEquals(new BigDecimal(500), total);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDate_NDGF0() {
        OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(100), "limit", 100, "symbol");
        orderData.setCompletionDate(new Date());
        assertEquals(new Date(), orderData.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateWithNull_xyuh1() {
        OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(100), "limit", 100, "symbol");
        orderData.setCompletionDate(null);
        assertNull(orderData.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateWithInvalidDate_xJYH2() {
        OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(100), "limit", 100, "symbol");
        orderData.setCompletionDate(new Date(-1));
        assertNotNull(orderData.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateWithInvalidDate2_QKph3() {
        OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(100), "limit", 100, "symbol");
        orderData.setCompletionDate(new Date(Long.MAX_VALUE));
        assertNotNull(orderData.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateWithInvalidDate3_OMXK4() {
        OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(100), "limit", 100, "symbol");
        orderData.setCompletionDate(new Date(Long.MIN_VALUE));
        assertNotNull(orderData.getCompletionDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompletionDateWithInvalidDate4_cfUP5() {
        OrderData orderData = new OrderData(1, "open", new Date(), null, new BigDecimal(100), "limit", 100, "symbol");
        orderData.setCompletionDate(new Date(0));
        assertNotNull(orderData.getCompletionDate());
    }
}