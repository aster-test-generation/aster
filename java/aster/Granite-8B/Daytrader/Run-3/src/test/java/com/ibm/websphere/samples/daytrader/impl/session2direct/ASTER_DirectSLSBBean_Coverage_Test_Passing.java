/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DirectSLSBBean_Coverage_Test_Passing {
    private static TradeDirect tradeDirect;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_BLyW0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        try {
            double rnd1 = 0.0;
            double rnd2 = 0.0;
            double investmentReturn = directSLSBBean.investmentReturn(rnd1, rnd2);
            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException ex) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_OkYL0() throws java.lang.Exception {
        tradeDirect = new TradeDirect();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_URTU1_1() throws Exception {
        tradeDirect.setInSession(true);
        Collection<HoldingDataBean> holdings = tradeDirect.getHoldings("uid:0");
        assertNotNull(holdings);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume1_qvuO0() throws java.lang.Exception {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        quoteDataBean.setCompanyName("TestCompany");
        quoteDataBean.setOpen(new BigDecimal(100.0));
        quoteDataBean.setPrice(new BigDecimal(100.0));
        quoteDataBean.setLow(new BigDecimal(100.0));
        quoteDataBean.setHigh(new BigDecimal(100.0));
        quoteDataBean.setChange(100.0);
        quoteDataBean.setVolume(100.0);
        quoteDataBean.setSymbol("TestSymbol");
        try {
            directSLSBBean.updateQuotePriceVolume("TestSymbol", new BigDecimal(100.0), 100.0);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImpl_wwaw0() {
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        int impl = directSLSBBean.getImpl();
        assertEquals(TradeConfig.SESSION_TO_DIRECT, impl);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHoldings_URTU1_2_fid1() throws Exception {
        tradeDirect.setInSession(true);
        Collection<HoldingDataBean> holdings = tradeDirect.getHoldings("uid:0");
        assertFalse(!holdings.isEmpty());
    }
}