/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import javax.websocket.CloseReason;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_MarketSummaryWebSocket_Coverage_Test_Passing {
    private MarketSummaryWebSocket marketSummaryWebSocket;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnClose1_vgCF0() {
        MarketSummaryWebSocket instance = new MarketSummaryWebSocket();
        Session session = null;
        CloseReason reason = null;
        instance.onClose(session, reason);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSendMarketSummary1_gTXG0() {
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        ActionMessage message = new ActionMessage();
        Session currentSession = mock(Session.class);
        marketSummaryWebSocket.sendMarketSummary(message, currentSession);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnError1_HJQY0() {
        Throwable t = new Throwable();
        Session currentSession = mock(Session.class);
        doNothing().when(marketSummaryWebSocket).onError(t, currentSession);
        marketSummaryWebSocket.onError(t, currentSession);
        verify(marketSummaryWebSocket, times(1)).onError(t, currentSession);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOnStockChangeWithSessionhasNextAndIteratorHasNoNext_QMxj5_TDRe0() {
        String event = "test";
        MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
        Iterator<Session> failSafeIterator = mock(Iterator.class);
        when(failSafeIterator.hasNext()).thenReturn(true);
        when(failSafeIterator.hasNext()).thenReturn(false);
        marketSummaryWebSocket.onStockChange(event);
        verify(marketSummaryWebSocket, times(1)).onStockChange(event);
        verify(failSafeIterator, times(1)).hasNext();
        verify(failSafeIterator, times(1)).next();
    }
}