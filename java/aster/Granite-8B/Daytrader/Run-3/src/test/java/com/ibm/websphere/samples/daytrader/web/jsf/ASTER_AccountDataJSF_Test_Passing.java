/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Passing {
    private OrderData[] closedOrders;
    private ExternalContext context;
    private TradeServices tradeAction;
    @Mock
    private AccountDataJSF accountdatajsf;
    @Mock
    private HttpSession httpsession;
    @Mock
    private ExternalContext externalcontext;
    @Mock
    private TradeServices services;
    @InjectMocks
    private AccountDataJSF accountDataJSF;
    private AccountDataBean accountDataBean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setCurrentTimeTest_InAs0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date currentTime = new Date();
        accountDataJSF.setCurrentTime(currentTime);
        assertEquals(accountDataJSF.getCurrentTime(), currentTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetLoginCount_doRb0() {
        int loginCount = 10;
        accountDataJSF.setLoginCount(loginCount);
        assertEquals(loginCount, accountDataJSF.getLoginCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainHTML_ESho0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        String gainHTML = accountDataJSF.getGainHTML();
        assertEquals("Expected gainHTML", "<html>Gain HTML</html>", gainHTML);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetClosedOrders_voWn0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setClosedOrders(closedOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSessionCreationDate_wlMN0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date sessionCreationDate = accountDataJSF.getSessionCreationDate();
        assertNotNull(sessionCreationDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLogoutCount_Pyth0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setLogoutCount(1);
        assertEquals(1, accountDataJSF.getLogoutCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastLogin_BDus0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date lastLogin = new Date();
        accountDataJSF.setLastLogin(lastLogin);
        assertEquals(lastLogin, accountDataJSF.getLastLogin());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLogoutCount_Pvvd0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        int logoutCount = accountDataJSF.getLogoutCount();
        assertEquals(0, logoutCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGain_rKck0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gain = BigDecimal.ONE;
        accountDataJSF.setGain(gain);
        assertEquals(gain, accountDataJSF.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithZeroGain_Yvxs1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gain = BigDecimal.ZERO;
        accountDataJSF.setGain(gain);
        assertEquals(gain, accountDataJSF.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainWithNegativeGain_lEFn2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gain = BigDecimal.valueOf(-100);
        accountDataJSF.setGain(gain);
        assertEquals(gain, accountDataJSF.getGain());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_EqsU0() {
        Instance<TradeServices> services = mock(Instance.class);
        when(services.get()).thenReturn(mock(TradeServices.class));
        accountDataJSF = new AccountDataJSF(services);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentTime_oMOS0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date currentTime = accountDataJSF.getCurrentTime();
        assertNotNull(currentTime);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfOrders_pSwR0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(Mockito.mock(Instance.class));
        Integer numberOfOrders = accountDataJSF.getNumberOfOrders();
        assertNotNull(numberOfOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumOfCashHoldings_mEKL0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal sumOfCashHoldings = BigDecimal.ZERO;
        accountDataJSF.setSumOfCashHoldings(sumOfCashHoldings);
        assertEquals(sumOfCashHoldings, accountDataJSF.getSumOfCashHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumOfCashHoldingsWithNull_NcXJ1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setSumOfCashHoldings(null);
        assertEquals(null, accountDataJSF.getSumOfCashHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSumOfCashHoldingsWithPositiveValue_LrXD3() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal sumOfCashHoldings = new BigDecimal(100);
        accountDataJSF.setSumOfCashHoldings(sumOfCashHoldings);
        assertEquals(sumOfCashHoldings, accountDataJSF.getSumOfCashHoldings());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercent_ccCO0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gainPercent = new BigDecimal(10);
        accountDataJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, accountDataJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithZeroGainPercent_mGAr1() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gainPercent = BigDecimal.ZERO;
        accountDataJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, accountDataJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithNullGainPercent_LeMY2() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setGainPercent(null);
        assertNull(accountDataJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGainPercentWithNegativeGainPercent_QiKW3() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gainPercent = new BigDecimal(-10);
        accountDataJSF.setGainPercent(gainPercent);
        assertEquals(gainPercent, accountDataJSF.getGainPercent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccountID_guFC0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Integer actualAccountID = accountDataJSF.getAccountID();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_YQmt0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        OrderData[] closedOrders = accountDataJSF.getClosedOrders();
        assertNotNull(closedOrders);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercent_rYan0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal gainPercent = accountDataJSF.getGainPercent();
        assertNotNull(gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_DsfJ0() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_omBD0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date creationDate = new Date();
        accountDataJSF.setCreationDate(creationDate);
        assertEquals(creationDate, accountDataJSF.getCreationDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProfileID_NhHN1() {
        String profileID = "123";
        accountDataJSF.setProfileID(profileID);
        assertEquals(profileID, accountDataJSF.getProfileID());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToggleShowAllRows_ofHG0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.toggleShowAllRows();
        assertEquals(0, accountDataJSF.getNumberOfOrderRows());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHoldingsTotal_UDlF0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        BigDecimal holdingsTotal = new BigDecimal(100);
        accountDataJSF.setHoldingsTotal(holdingsTotal);
        assertEquals(holdingsTotal, accountDataJSF.getHoldingsTotal());
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void setUp_ayyy0() {
        Instance<TradeServices> services = null; // Initialize services
        accountDataJSF = new AccountDataJSF(services);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetBalance_cBTZ1() {
        BigDecimal expectedBalance = new BigDecimal(0); // Set expected balance
        BigDecimal actualBalance = accountDataJSF.getBalance(); // Call getBalance method
        assertEquals(expectedBalance, actualBalance); // Assert that actual balance is equal to expected balance
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccountID_jVLN0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        accountDataJSF.setAccountID(123);
        assertEquals(123, accountDataJSF.getAccountID());
    }

    @BeforeEach
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSessionCreationDate_MbwP0() {
        AccountDataJSF accountDataJSF = new AccountDataJSF(null);
        Date sessionCreationDate = new Date();
        accountDataJSF.setSessionCreationDate(sessionCreationDate);
        assertEquals(sessionCreationDate, accountDataJSF.getSessionCreationDate());
    }
}