/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Passing {
    @Mock
    TradeConfigServlet tradeconfigservlet;
    @Mock
    HttpServlet httpservlet;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit() throws ServletException {
        MockitoAnnotations.openMocks(this);
        tradeconfigservlet.init(null);
        verify(tradeconfigservlet).init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigDisplay_XuRk0_1() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "some results";
        servlet.doConfigDisplay(req, resp, results);
        assertEquals("some results", req.getAttribute("status"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigDisplay_XuRk0_2() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "some results";
        servlet.doConfigDisplay(req, resp, results);
        assertEquals(TradeConfig.getPage(TradeConfig.CONFIG_PAGE), req.getAttribute("tradeConfig"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService1_RWEq0() throws ServletException, IOException {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("updateConfig");
        tradeConfigServlet.service(req, resp);
        verify(resp, times(1)).setContentType("text/html");
        verify(resp, times(1)).getWriter();
        verify(resp, times(1)).getWriter().println("<B><BR>DayTrader Configuration Updated</BR></B>");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService2_jWuu1() throws ServletException, IOException {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("resetTrade");
        tradeConfigServlet.service(req, resp);
        verify(resp, times(1)).setContentType("text/html");
        verify(resp, times(1)).getWriter();
        verify(resp, times(1)).getWriter().println("<B><BR>DayTrader Configuration Updated</BR></B>");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService3_GRpJ2() throws ServletException, IOException {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("buildDB");
        tradeConfigServlet.service(req, resp);
        verify(resp, times(1)).setContentType("text/html");
        verify(resp, times(1)).getWriter();
        verify(resp, times(1)).getWriter().println("DayTrader Database Built - 100users created");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService4_fASY3() throws ServletException, IOException {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("action")).thenReturn("buildDBTables");
        tradeConfigServlet.service(req, resp);
        verify(resp, times(1)).setContentType("text/html");
        verify(resp, times(1)).getWriter();
        verify(resp, times(1)).getWriter().println("<BR>TradeBuildDB: **** Database Product detected: DB2/ ****</BR>");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigDisplay_XuRk0() throws Exception {
        TradeConfigServlet servlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "some results";
        servlet.doConfigDisplay(req, resp, results);
        assertEquals("some results", req.getAttribute("status"));
        assertEquals(TradeConfig.getPage(TradeConfig.CONFIG_PAGE), req.getAttribute("tradeConfig"));
    }
}