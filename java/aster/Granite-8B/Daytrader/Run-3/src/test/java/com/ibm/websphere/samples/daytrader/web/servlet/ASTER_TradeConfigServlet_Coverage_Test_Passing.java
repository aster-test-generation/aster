/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_TradeConfigServlet_Coverage_Test_Passing {
    TradeConfigServlet servlet = new TradeConfigServlet();
    private TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit_cbOq0() throws javax.servlet.ServletException {
        TradeConfigServlet servlet = new TradeConfigServlet();
        servlet.init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigDisplay1_Kkkp0() throws Exception {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        String results = "results";
        servlet.doConfigDisplay(req, resp, results);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService1_FHJZ0() throws Exception {
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        tradeConfigServlet.service(request, response);
        String contentType = response.getContentType();
        assertEquals("text/html", contentType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate1_qUiX0() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate2_pMTs1() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("RuntimeMode")).thenReturn("0");
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate3_NAYU2() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("OrderProcessingMode")).thenReturn("0");
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate4_bAgG3() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("WebInterface")).thenReturn("0");
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate5_DLNo4() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("MaxUsers")).thenReturn("0");
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate6_eFLi5() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("MaxQuotes")).thenReturn("0");
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate7_iPiz6() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("marketSummaryInterval")).thenReturn("0");
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate8_Vsrn7() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("primIterations")).thenReturn("0");
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate9_numk8() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("0");
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate10_ndPl9() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("0");
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate11_PJoC10() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("EnableLongRun")).thenReturn("0");
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoConfigUpdate12_CxbX11() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.getParameter("DisplayOrderAlerts")).thenReturn("0");
        tradeConfigServlet.doConfigUpdate(req, resp);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testService1_FHJZ0_PXjF0() throws Exception {
        TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
        HttpServletRequest request = new MockHttpServletRequest();
        HttpServletResponse response = new MockHttpServletResponse();
        tradeConfigServlet.doConfigUpdate(request, response);
        String contentType = response.getContentType();
        assertEquals("text/html", contentType);
    }
}