/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeDirect_Coverage_Test_Passing {
    private TradeDirect tradeDirect;
    private static final String SYMBOL = "Symbol";
    private static final String COMPANY_NAME = "Company Name";
    private static final BigDecimal PRICE = BigDecimal.valueOf(100.0);

    public void testgetAccountProfileData1_aUjP0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("1");
        assertNotNull(accountProfileData);
    }

    public void testgetAccountProfileData2_KWDU1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("2");
        assertNotNull(accountProfileData);
    }

    public void testgetAccountProfileData3_Hvju2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("3");
        assertNotNull(accountProfileData);
    }

    public void testgetAccountProfileData4_kzgU3() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("4");
        assertNotNull(accountProfileData);
    }

    public void testgetAccountProfileData5_PbuF4() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("5");
        assertNotNull(accountProfileData);
    }

    public void testgetAccountProfileData6_XyFJ5() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("6");
        assertNotNull(accountProfileData);
    }

    public void testgetAccountProfileData7_YpvK6() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("7");
        assertNotNull(accountProfileData);
    }

    public void testgetAccountProfileData8_EqSe7() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("8");
        assertNotNull(accountProfileData);
    }

    public void testgetAccountProfileData9_ZVFa8() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("9");
        assertNotNull(accountProfileData);
    }

    public void testgetAccountProfileData10_xzvQ9() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("10");
        assertNotNull(accountProfileData);
    }

    public void testgetAccountProfileData11_SIhe10() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountProfileDataBean accountProfileData = tradeDirect.getAccountProfileData("11");
        assertNotNull(accountProfileData);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvestmentReturn_XpmW0() {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.investmentReturn(0.0, 0.0);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_GzYf0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
        marketSummaryDataBean = tradeDirect.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary1_GzYf20_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
        marketSummaryDataBean = tradeDirect.getMarketSummary();
        assertEquals(20, TradeConfig.getMarketSummaryInterval());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary2_atPj1_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
        marketSummaryDataBean = tradeDirect.getMarketSummary();
        assertFalse(TradeConfig.getMarketSummaryInterval() < 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister1_SgNP0() throws java.lang.Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.register("user1", "password1", "fullname1", "address1", "email1", "creditcard1", new BigDecimal(1000.00));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister2_Ihsk1() throws java.lang.Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.register("user2", "password2", "fullname2", "address2", "email2", "creditcard2", new BigDecimal(2000.00));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegister3_pXxI2() throws java.lang.Exception {
        TradeDirect tradeDirect = new TradeDirect();
        AccountDataBean accountData = tradeDirect.register("user3", "password3", "fullname3", "address3", "email3", "creditcard3", new BigDecimal(3000.00));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void tearDown_eJOZ1() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrderCompleted_leLL0() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        try {
            tradeDirect.orderCompleted("1", 1);
        } catch (UnsupportedOperationException e) {
            assertEquals("TradeDirect:orderCompleted method not supported", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary3_ikIL2_OLIP0_1() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
        long currentTime = System.currentTimeMillis();
        marketSummaryDataBean = tradeDirect.getMarketSummary();
        assertNotNull(marketSummaryDataBean);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMarketSummary3_ikIL2_OLIP0_2() throws Exception {
        TradeDirect tradeDirect = new TradeDirect();
        MarketSummaryDataBean marketSummaryDataBean = tradeDirect.getMarketSummary();
        long currentTime = System.currentTimeMillis();
        marketSummaryDataBean = tradeDirect.getMarketSummary();
        assertTrue(currentTime > marketSummaryDataBean.getSummaryDate().getTime());
    }
}