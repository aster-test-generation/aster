/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryJSF_Test_Passing {
    private MarketSummaryJSF marketSummaryJSF;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenTSIA_BYYi0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setOpenTSIA(new BigDecimal("100.00"));
        assertEquals(new BigDecimal("100.00"), marketSummaryJSF.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGainPercentHTML_sCLv0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        String result = marketSummaryJSF.getGainPercentHTML();
        Assertions.assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopGainers_NBOQ0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = new QuoteData[10];
        marketSummaryJSF.setTopGainers(topGainers);
        assertEquals(topGainers, marketSummaryJSF.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSummaryDate_VASb0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        Date summaryDate = marketSummaryJSF.getSummaryDate();
        assertNotNull(summaryDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTSIA_WpOK0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal tSIA = BigDecimal.ZERO;
        marketSummaryJSF.setTSIA(tSIA);
        assertEquals(tSIA, marketSummaryJSF.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVolume_IENF0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        double volume = marketSummaryJSF.getVolume();
        assertEquals(0.0, volume, 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIA_uvGH0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal tSIA = marketSummaryJSF.getTSIA();
        Assertions.assertNotNull(tSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIAWhenTSIAIsZero_RYzd2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal tSIA = BigDecimal.ZERO;
        Assertions.assertEquals(tSIA, marketSummaryJSF.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIAWhenTSIANegative_dvmj3() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal tSIA = BigDecimal.valueOf(-100);
        Assertions.assertEquals(tSIA, marketSummaryJSF.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopGainers_cgSA0_1() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = marketSummaryJSF.getTopGainers();
        assertNotNull(topGainers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopGainers_cgSA0_2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = marketSummaryJSF.getTopGainers();
        assertTrue(topGainers.length > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_vbfG0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertNotNull(gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_mvhc1() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertEquals(new BigDecimal("0.0"), gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_YJyI2() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertNotEquals(new BigDecimal("100.0"), gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_Pwck3() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0.0")) > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_IriC4() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertFalse(gainPercent.compareTo(new BigDecimal("0.0")) == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_qGvc5() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0.0")) >= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_PHsD6() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0.0")) <= 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_ubxV7() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0.0")) != 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_VzrC8() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0.0")) < 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_wcMv10() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        BigDecimal gainPercent = marketSummaryJSF.getGainPercent();
        assertTrue(gainPercent.compareTo(new BigDecimal("0.0")) == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetVolume_DbzI0_UMpF0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        marketSummaryJSF.setVolume(10.0);
        assertEquals(10.0, marketSummaryJSF.getVolume(), 0.01);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSummaryDateWithCurrentDate_xPFB2_JWQP0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        Date currentDate = new Date();
        marketSummaryJSF.setSummaryDate(currentDate);
        assertEquals(currentDate, marketSummaryJSF.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSummaryDateWithFutureDate_qNmW3_hBcE0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        Date futureDate = new Date(System.currentTimeMillis() + 24 * 60 * 60 * 1000);
        marketSummaryJSF.setSummaryDate(futureDate);
        assertEquals(futureDate, marketSummaryJSF.getSummaryDate());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopGainers_cgSA0() {
        MarketSummaryJSF marketSummaryJSF = new MarketSummaryJSF(null);
        QuoteData[] topGainers = marketSummaryJSF.getTopGainers();
        assertNotNull(topGainers);
        assertTrue(topGainers.length > 0);
    }
}