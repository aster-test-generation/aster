/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.StringReader;
import java.util.concurrent.TimeUnit;
import javax.json.Json;
import javax.json.stream.JsonParser;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingJSONPStreaming_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetServletInfo_anuS0() {
        PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
        String servletInfo = pingJSONPStreaming.getServletInfo();
        assertEquals("Basic JSON generation and parsing in a servlet", servletInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_init_0_iZpy1() throws ServletException {
        PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
        pingJSONPStreaming.init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_init_1_YVvd2() throws ServletException {
        PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
        ServletConfig config = null;
        pingJSONPStreaming.init(config);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextEvent_Ulso0() throws Exception {
        PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
        StringReader stringReader = new StringReader("{\"key1\":\"value1\",\"key2\":\"value2\"}");
        JsonParser parser = Json.createParser(stringReader);
        JsonParser.Event event = parser.next();
        assertEquals(JsonParser.Event.START_OBJECT, event);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextEvent2_Ssko1() throws Exception {
        PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
        StringReader stringReader = new StringReader("{\"key1\":\"value1\",\"key2\":\"value2\"}");
        JsonParser parser = Json.createParser(stringReader);
        JsonParser.Event event = parser.next();
        parser.next();
        assertEquals(JsonParser.Event.KEY_NAME, event);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextEvent3_TvnK2() throws Exception {
        PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
        StringReader stringReader = new StringReader("{\"key1\":\"value1\",\"key2\":\"value2\"}");
        JsonParser parser = Json.createParser(stringReader);
        JsonParser.Event event = parser.next();
        parser.next();
        parser.next();
        assertEquals(JsonParser.Event.VALUE_STRING, event);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_hFBE0() throws ServletException, IOException {
        {
            PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
            HttpServletRequest request = mock(HttpServletRequest.class);
            HttpServletResponse response = mock(HttpServletResponse.class);
            when(request.getParameter("callback")).thenReturn("test");
            pingJSONPStreaming.doGet(request, response);
            verify(response, times(1)).setContentType(eq("text/javascript"));
            verify(response, times(1)).setCharacterEncoding(eq("UTF-8"));
            verify(response, times(1)).getWriter();
            verify(response, times(1)).getWriter().write(anyString());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_init_2_KdVW3_nngx0() throws ServletException {
        PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
        MockServletConfig config = new MockServletConfig();
        pingJSONPStreaming.init(config);
    }
}