/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.TimeUnit;
import javax.websocket.DecodeException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JsonDecoder_Coverage_Test_Failing {
    JsonDecoder jsonDecoder = new JsonDecoder();

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode1_IKdF0_1() throws javax.websocket.DecodeException {
        JsonDecoder decoder = new JsonDecoder();
        String json = "{\"key\":\"key1\",\"value\":\"value1\"}";
        JsonMessage message = decoder.decode(json);
        assertEquals("key1", message.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode1_IKdF0_2() throws javax.websocket.DecodeException {
        JsonDecoder decoder = new JsonDecoder();
        String json = "{\"key\":\"key1\",\"value\":\"value1\"}";
        JsonMessage message = decoder.decode(json);
        assertEquals("value1", message.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_XWjR1_1() throws javax.websocket.DecodeException {
        JsonDecoder decoder = new JsonDecoder();
        String json = "{\"key\":\"key2\",\"value\":\"value2\"}";
        JsonMessage message = decoder.decode(json);
        assertEquals("key2", message.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode2_XWjR1_2() throws javax.websocket.DecodeException {
        JsonDecoder decoder = new JsonDecoder();
        String json = "{\"key\":\"key2\",\"value\":\"value2\"}";
        JsonMessage message = decoder.decode(json);
        assertEquals("value2", message.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_VXbN2_1() throws javax.websocket.DecodeException {
        JsonDecoder decoder = new JsonDecoder();
        String json = "{\"key\":\"key3\",\"value\":\"value3\"}";
        JsonMessage message = decoder.decode(json);
        assertEquals("key3", message.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode3_VXbN2_2() throws javax.websocket.DecodeException {
        JsonDecoder decoder = new JsonDecoder();
        String json = "{\"key\":\"key3\",\"value\":\"value3\"}";
        JsonMessage message = decoder.decode(json);
        assertEquals("value3", message.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode4_Quib3_1() throws javax.websocket.DecodeException {
        JsonDecoder decoder = new JsonDecoder();
        String json = "{\"key\":\"key4\",\"value\":\"value4\"}";
        JsonMessage message = decoder.decode(json);
        assertEquals("key4", message.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode4_Quib3_2() throws javax.websocket.DecodeException {
        JsonDecoder decoder = new JsonDecoder();
        String json = "{\"key\":\"key4\",\"value\":\"value4\"}";
        JsonMessage message = decoder.decode(json);
        assertEquals("value4", message.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_gXlZ4_1() throws javax.websocket.DecodeException {
        JsonDecoder decoder = new JsonDecoder();
        String json = "{\"key\":\"key5\",\"value\":\"value5\"}";
        JsonMessage message = decoder.decode(json);
        assertEquals("key5", message.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode5_gXlZ4_2() throws javax.websocket.DecodeException {
        JsonDecoder decoder = new JsonDecoder();
        String json = "{\"key\":\"key5\",\"value\":\"value5\"}";
        JsonMessage message = decoder.decode(json);
        assertEquals("value5", message.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWillDecode_RnHP0_fid2() {
        String json = "{\"name\":\"John\",\"age\":30}";
        boolean result = jsonDecoder.willDecode(json);
        assertTrue(result);
    }
}