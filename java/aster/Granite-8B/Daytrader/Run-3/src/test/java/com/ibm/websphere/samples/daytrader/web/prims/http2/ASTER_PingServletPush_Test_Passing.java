/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.http2;

import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.PushBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletPush_Test_Passing {
    private static String initTime;
    private static int hitCount;
    PingServletPush pingservletpush;
    HttpServlet httpservlet;
    HttpServletRequest httpservletrequest;
    HttpServletResponse httpservletresponse;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletpush = new PingServletPush();
        pingservletpush.init(httpservlet);
        verify(httpservlet).init(any());
        assertEquals(initTime, new java.util.Date().toString());
        assertEquals(hitCount, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullHttpServletRequest_WVLM0() throws ServletException, IOException {
        HttpServletRequest req = null;
        HttpServletResponse resp = mock(HttpServletResponse.class);
        PingServletPush pingServletPush = new PingServletPush();
        pingServletPush.doGet(req, resp);
        verify(resp, times(1)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullHttpServletResponse_IZRW1() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = null;
        PushBuilder pushBuilder = mock(PushBuilder.class);
        when(req.newPushBuilder()).thenReturn(pushBuilder);
        PingServletPush pingServletPush = new PingServletPush();
        pingServletPush.doGet(req, resp);
        verify(pushBuilder, times(0)).path(anyString());
        verify(pushBuilder, times(0)).push();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidHttpServletRequestAndHttpServletResponse_ljKu2() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        PushBuilder pushBuilder = mock(PushBuilder.class);
        when(req.newPushBuilder()).thenReturn(pushBuilder);
        PingServletPush pingServletPush = new PingServletPush();
        pingServletPush.doGet(req, resp);
        verify(pushBuilder, times(1)).path(anyString());
        verify(pushBuilder, times(1)).push();
        verify(resp, times(1)).getWriter();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_1() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletpush = new PingServletPush();
        pingservletpush.init(httpservlet);
        verify(httpservlet).init(any());
        assertEquals(initTime, new java.util.Date().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testinit_2() throws Exception {
        httpservlet = mock(HttpServlet.class);
        pingservletpush = new PingServletPush();
        pingservletpush.init(httpservlet);
        verify(httpservlet).init(any());
        assertEquals(hitCount, 0);
    }

    @Test
    public void testPingServletPush_n_fYrd0() throws Exception {
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();
        PingServletPush pingServletPush = new PingServletPush();
        pingServletPush.doGet(request, response);
        String expected = "<html><head><title>Ping Servlet HTTP/2</title></head>" + "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet HTTP/2<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time : " + initTime + "<BR><BR></FONT>  <B>Hit Count: " + hitCount + "</B><br>" + "<img src='images/graph.gif'>" + "</body></html>";
    }
}