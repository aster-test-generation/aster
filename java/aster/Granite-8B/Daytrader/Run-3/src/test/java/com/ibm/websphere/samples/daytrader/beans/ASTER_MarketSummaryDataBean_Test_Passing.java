/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenTSIA_fqve0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("1234567890.12"), new BigDecimal("1234567890.12"), 1234567890.12, null, null);
        BigDecimal openTSIA = marketSummaryDataBean.getOpenTSIA();
        assertEquals(new BigDecimal("1234567890.12"), openTSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTSIA_WkfC0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal tSIA = new BigDecimal(100);
        marketSummaryDataBean.setTSIA(tSIA);
        assertEquals(tSIA, marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOpenTSIA_mKRx0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(100));
        assertEquals(new BigDecimal(100), marketSummaryDataBean.getOpenTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetVolume_MAbh0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setVolume(100.0);
        assertEquals(100.0, marketSummaryDataBean.getVolume());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopLosers_YoTn0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Collection<QuoteDataBean> topLosers = new ArrayList<>();
        QuoteDataBean quoteDataBean = new QuoteDataBean();
        topLosers.add(quoteDataBean);
        marketSummaryDataBean.setTopLosers(topLosers);
        assertEquals(topLosers, marketSummaryDataBean.getTopLosers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSummaryDate_AGgE0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Date summaryDate = marketSummaryDataBean.getSummaryDate();
        assertNotNull(summaryDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpenTSIA_RYhi0() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        BigDecimal openTSIA = marketSummaryDataBean.getOpenTSIA();
        assertNotNull(openTSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGainPercent_dFxX1() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        BigDecimal gainPercent = marketSummaryDataBean.getGainPercent();
        assertNotNull(gainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIA_JnjL2() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        BigDecimal TSIA = marketSummaryDataBean.getTSIA();
        assertNotNull(TSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_wmzJ3() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        double volume = marketSummaryDataBean.getVolume();
        assertTrue(volume > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopGainers_dBkV4_1() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        Collection<QuoteDataBean> topGainers = marketSummaryDataBean.getTopGainers();
        assertNotNull(topGainers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopGainers_dBkV4_2() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        Collection<QuoteDataBean> topGainers = marketSummaryDataBean.getTopGainers();
        assertTrue(topGainers.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopLosers_TsfV5_1() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        Collection<QuoteDataBean> topLosers = marketSummaryDataBean.getTopLosers();
        assertNotNull(topLosers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopLosers_TsfV5_2() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        Collection<QuoteDataBean> topLosers = marketSummaryDataBean.getTopLosers();
        assertTrue(topLosers.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSummaryDate_aXOw6() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        Date summaryDate = marketSummaryDataBean.getSummaryDate();
        assertNotNull(summaryDate);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSummaryDate_rdgH0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setSummaryDate(new Date());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrint_bgEm0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("123.45"), new BigDecimal("678.90"), 123.45, null, null);
        marketSummaryDataBean.print();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVolume_VwgE0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setVolume(100.0);
        assertEquals(100.0, marketSummaryDataBean.getVolume(), 0.0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTSIA_zGry0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("100.00"), new BigDecimal("100.00"), 1000.0, null, null);
        assertEquals(new BigDecimal("100.00"), marketSummaryDataBean.getTSIA());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_XHsd0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        assertEquals("Market Summary at: null\n\t\t        TSIA:null\n\t\t    openTSIA:0.0\n\t\t        gain:0.0\n\t\t      volume:0.0", marketSummaryDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_pNLx1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal(1), new BigDecimal(1), 1.0, new ArrayList<QuoteDataBean>(), new ArrayList<QuoteDataBean>());
        assertEquals("Market Summary at: null\n\t\t        TSIA:1.0\n\t\t    openTSIA:1.0\n\t\t        gain:0.0\n\t\t      volume:1.0", marketSummaryDataBean.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopLosers_Nmzx0_1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopLosers(null);
        Collection<QuoteDataBean> topLosers = marketSummaryDataBean.getTopLosers();
        assertNotNull(topLosers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopLosers_Nmzx0_2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopLosers(null);
        Collection<QuoteDataBean> topLosers = marketSummaryDataBean.getTopLosers();
        assertTrue(topLosers.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTopGainers_TjXl0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Collection<QuoteDataBean> topGainers = new ArrayList<>();
        marketSummaryDataBean.setTopGainers(topGainers);
        assertEquals(topGainers, marketSummaryDataBean.getTopGainers());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_1_MvML0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(100));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(50));
        BigDecimal expectedGainPercent = new BigDecimal(0.5);
        BigDecimal actualGainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(expectedGainPercent, actualGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_2_ojFZ1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        BigDecimal expectedGainPercent = new BigDecimal(0);
        BigDecimal actualGainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(expectedGainPercent, actualGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_3_BAva2() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(100));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(200));
        BigDecimal expectedGainPercent = new BigDecimal(0.5);
        BigDecimal actualGainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(expectedGainPercent, actualGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_4_ogbn3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(50));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(100));
        BigDecimal expectedGainPercent = new BigDecimal(0.5);
        BigDecimal actualGainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(expectedGainPercent, actualGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_5_GVSO4() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(100));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        BigDecimal expectedGainPercent = new BigDecimal(0);
        BigDecimal actualGainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(expectedGainPercent, actualGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_6_DPxz5() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(100));
        BigDecimal expectedGainPercent = new BigDecimal(0);
        BigDecimal actualGainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(expectedGainPercent, actualGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_7_uOui6() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(100));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(100));
        BigDecimal expectedGainPercent = new BigDecimal(0);
        BigDecimal actualGainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(expectedGainPercent, actualGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGainPercent_9_tLwW8() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(50));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(50));
        BigDecimal expectedGainPercent = new BigDecimal(0);
        BigDecimal actualGainPercent = marketSummaryDataBean.getGainPercent();
        assertEquals(expectedGainPercent, actualGainPercent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopGainers_itvO0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Collection<QuoteDataBean> topGainers = marketSummaryDataBean.getTopGainers();
        assertNotNull(topGainers);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopLosers_wOTm1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        Collection<QuoteDataBean> topLosers = marketSummaryDataBean.getTopLosers();
        assertEquals(0, topLosers.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOpenTSIA_aypR3() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        BigDecimal openTSIA = marketSummaryDataBean.getOpenTSIA();
        assertEquals(BigDecimal.ZERO, openTSIA);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML1_yQCR0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        marketSummaryDataBean.setVolume(0);
        marketSummaryDataBean.setTopGainers(null);
        marketSummaryDataBean.setTopLosers(null);
        String actual = marketSummaryDataBean.toHTML();
        String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToHTML2_ENEI1() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTSIA(new BigDecimal(0));
        marketSummaryDataBean.setOpenTSIA(new BigDecimal(0));
        marketSummaryDataBean.setVolume(0);
        marketSummaryDataBean.setTopGainers(new ArrayList<QuoteDataBean>());
        marketSummaryDataBean.setTopLosers(new ArrayList<QuoteDataBean>());
        String actual = marketSummaryDataBean.toHTML();
        String expected = "<BR>Market Summary at: " + marketSummaryDataBean.getSummaryDate() + "<LI>        TSIA:" + marketSummaryDataBean.getTSIA() + "</LI>" + "<LI>    openTSIA:" + marketSummaryDataBean.getOpenTSIA() + "</LI>" + "<LI>      volume:" + marketSummaryDataBean.getVolume() + "</LI>" + "<BR> Current Top Gainers:" + "<BR>   Current Top Losers:";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopGainers_dBkV4() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        Collection<QuoteDataBean> topGainers = marketSummaryDataBean.getTopGainers();
        assertNotNull(topGainers);
        assertTrue(topGainers.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTopLosers_TsfV5() {
        MarketSummaryDataBean marketSummaryDataBean = MarketSummaryDataBean.getRandomInstance();
        Collection<QuoteDataBean> topLosers = marketSummaryDataBean.getTopLosers();
        assertNotNull(topLosers);
        assertTrue(topLosers.size() > 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTopLosers_Nmzx0() {
        MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean();
        marketSummaryDataBean.setTopLosers(null);
        Collection<QuoteDataBean> topLosers = marketSummaryDataBean.getTopLosers();
        assertNotNull(topLosers);
        assertTrue(topLosers.isEmpty());
    }
}