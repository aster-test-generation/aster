/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.AsyncContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_PingManagedExecutor_Coverage_Test_Failing {
    PingManagedExecutor pingManagedExecutor;

    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInit1_bkfZ0() throws javax.servlet.ServletException {
        pingManagedExecutor = new PingManagedExecutor();
        pingManagedExecutor.init(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost1_CnEW0() throws ServletException, IOException {
        PingManagedExecutor executor = new PingManagedExecutor();
        HttpServletRequest request = null;
        HttpServletResponse response = null;
        executor.doPost(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getServletInfo_yruT0()
    {
        PingManagedExecutor pingManagedExecutor = new PingManagedExecutor();
        assertEquals("Tests a ManagedExecutor", pingManagedExecutor.getServletInfo());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_tzKn0() throws ServletException, IOException {
        PingManagedExecutor executor = new PingManagedExecutor();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        AsyncContext asyncContext = mock(AsyncContext.class);
        when(req.startAsync()).thenReturn(asyncContext);
        when(res.getOutputStream()).thenReturn(out);
        executor.doGet(req, res);
    }
}