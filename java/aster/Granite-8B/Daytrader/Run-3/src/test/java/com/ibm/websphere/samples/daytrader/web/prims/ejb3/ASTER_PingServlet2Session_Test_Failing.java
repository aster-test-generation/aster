/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockHttpServletRequest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session_Test_Failing {
    private static String initTime;
    private static int hitCount;
    PingServlet2Session pingServlet2Session;
    HttpServlet httpServlet;
    @Mock
    HttpServletResponse httpServletResponse;
    private TradeServices tradeSLSBLocal;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testServletInfo_vSWX0() {
        PingServlet2Session servlet = new PingServlet2Session();
        String servletInfo = servlet.getServletInfo();
        assertTrue("web primitive, configured with trade runtime configs, tests Servlet to Session EJB path".equals(servletInfo));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_UZOe0() throws IOException, ServletException {
        PingServlet2Session pingServlet = new PingServlet2Session();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getParameter("param1")).thenReturn("value1");
        when(request.getParameter("param2")).thenReturn("value2");
        pingServlet.doGet(request, response);
        assertEquals("Expected output", "<html><head><title>PingServlet2SessionLocal</title></head>" + "<body><HR><FONT size=\"+2\" color=\"#000066\">PingServlet2SessionLocal<BR></FONT>" + "<FONT size=\"-1\" color=\"#000066\">" + "Tests the basis path from a Servlet to a Session Bean.</FONT>" + "<HR>initTime: 1234567890" + "<BR>Hit Count: 1" + "<HR>Investment Return Information <BR><BR>investment: 123.45" + "<BR>current Value: 678.90" + "<BR>investment return 500.00<HR></FONT></BODY></HTML>", response.getWriter().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_HDRM0() throws ServletException, IOException {
        pingServlet2Session = new PingServlet2Session();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        pingServlet2Session.doPost(request, response);
        verify(pingServlet2Session, times(1)).doGet(request, response);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPost_DHiF0_mpTc0() throws ServletException, IOException {
        PingServlet2Session pingServlet2Session = new PingServlet2Session();
        MockHttpServletRequest req = new MockHttpServletRequest();
        HttpServletResponse res = mock(HttpServletResponse.class);
        pingServlet2Session.doPost(req, res);
    }
}