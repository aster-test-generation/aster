/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipFile_Test_Passing {
private static byte[] ONE_ZERO_BYTE = new byte[1];
ZipFile zipfile;
@Mock
    ZipArchiveEntry entry;
private ZipEncoding zipEncoding;
@Mock
    ZipArchiveOutputStream mockZipArchiveOutputStream;
@Mock
    ZipArchiveEntryPredicate mockZipArchiveEntryPredicate;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInputStream() throws Exception{
        zipfile = Mockito.mock(ZipFile.class);
        ZipArchiveEntry entry = Mockito.mock(ZipArchiveEntry.class);
        Mockito.when(zipfile.getInputStream(entry)).thenReturn(new ByteArrayInputStream(new byte[0]));
        InputStream inputStream = zipfile.getInputStream(entry);
        Assertions.assertNotNull(inputStream);
        inputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcanReadEntryData() throws Exception {
        zipfile = Mockito.mock(ZipFile.class);
        when(zipfile.canReadEntryData(entry)).thenReturn(true);
        boolean result = zipfile.canReadEntryData(entry);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUnixSymlink() throws Exception {
        zipEncoding = mock(ZipEncoding.class);
        zipfile = mock(ZipFile.class);
        entry = mock(ZipArchiveEntry.class);
        when(entry.isUnixSymlink()).thenReturn(true);
        when(zipfile.getUnixSymlink(entry)).thenReturn("symlink");
        String symlink = zipfile.getUnixSymlink(entry);
        assertEquals("symlink", symlink);
        verify(zipfile).getUnixSymlink(entry);
    }
}