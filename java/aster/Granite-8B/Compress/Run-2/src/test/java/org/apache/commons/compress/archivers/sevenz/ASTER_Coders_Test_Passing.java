/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Coders_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddDecoderWithNullCoder_LZjl3_1() throws Exception {
        final String archiveName = "testArchiveName";
        final InputStream is = new ByteArrayInputStream(new byte[0]);
        final long uncompressedLength = 0;
        final byte[] password = new byte[0];
        final IOException exception =
                assertThrows(IOException.class, () -> Coders.addDecoder(archiveName, is, uncompressedLength, null, password, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_1() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.COPY), Coders.findByMethod(SevenZMethod.COPY));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_2() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.LZMA), Coders.findByMethod(SevenZMethod.LZMA));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_3() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.LZMA2), Coders.findByMethod(SevenZMethod.LZMA2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_4() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.DEFLATE), Coders.findByMethod(SevenZMethod.DEFLATE));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_5() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.DEFLATE64), Coders.findByMethod(SevenZMethod.DEFLATE64));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_6() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.BZIP2), Coders.findByMethod(SevenZMethod.BZIP2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_7() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.AES256SHA256), Coders.findByMethod(SevenZMethod.AES256SHA256));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_8() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.BCJ_X86_FILTER), Coders.findByMethod(SevenZMethod.BCJ_X86_FILTER));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_9() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.BCJ_PPC_FILTER), Coders.findByMethod(SevenZMethod.BCJ_PPC_FILTER));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_10() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.BCJ_IA64_FILTER), Coders.findByMethod(SevenZMethod.BCJ_IA64_FILTER));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_11() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.BCJ_ARM_FILTER), Coders.findByMethod(SevenZMethod.BCJ_ARM_FILTER));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_12() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.BCJ_ARM_THUMB_FILTER), Coders.findByMethod(SevenZMethod.BCJ_ARM_THUMB_FILTER));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_13() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.BCJ_SPARC_FILTER), Coders.findByMethod(SevenZMethod.BCJ_SPARC_FILTER));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_14() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertEquals(coderMap.get(SevenZMethod.DELTA_FILTER), Coders.findByMethod(SevenZMethod.DELTA_FILTER));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindByMethod_ZFWf0_15() throws Exception {
		Map<SevenZMethod, AbstractCoder> coderMap = new HashMap<>();
		assertNull(Coders.findByMethod(null));}
}