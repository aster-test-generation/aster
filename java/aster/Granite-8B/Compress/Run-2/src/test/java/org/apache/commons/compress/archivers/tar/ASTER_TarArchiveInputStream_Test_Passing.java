/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveInputStream_Test_Passing {
    private static void generateTestCases_ivqC1() throws Exception {
    }
    private static void generateNextTarEntryTestCases_DUJj2() throws Exception {
    }
    private static void generatePaxHeadersTestCases_wEoc3() throws Exception {
    }
    private static void generateTestCases_Wwtz1() throws Exception {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_sOZb0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, "");
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNotNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_fxuF1() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNotNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_Skko2() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0);
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNotNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_vnqW3() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, "", false);
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNotNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_laqJ4() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0);
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNotNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_vwuh5() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, false);
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNotNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_kZOd6() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, "");
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNotNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_EtRd7() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, "");
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNotNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarkSupported_hSXq0() throws Exception {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        boolean result = tarArchiveInputStream.markSupported();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentEntryTest_FKDQ0() throws Exception {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        TarArchiveEntry actualCurrentEntry = tarArchiveInputStream.getCurrentEntry();
        TarArchiveEntry expectedCurrentEntry = null;
        assertEquals(expectedCurrentEntry, actualCurrentEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntry_xNcR1() throws Exception {
        InputStream inputStream = null;
        int blockSize = 0;
        String encoding = null;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, encoding);
        TarArchiveEntry nextEntry = tarArchiveInputStream.getNextEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOF_XPGR0() throws Exception {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOFWithInputStream_VjFX1() throws Exception {
        InputStream inputStream = null;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOFWithInputStreamAndBlockSize_krCx2() throws Exception {
        InputStream inputStream = null;
        int blockSize = 0;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOFWithInputStreamAndBlockSizeAndRecordSize_Chxo3() throws Exception {
        InputStream inputStream = null;
        int blockSize = 0;
        int recordSize = 0;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, recordSize);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOFWithInputStreamAndBlockSizeAndRecordSizeAndEncoding_iCVR4() throws Exception {
        InputStream inputStream = null;
        int blockSize = 0;
        int recordSize = 0;
        String encoding = "";
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, recordSize, encoding);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOFWithInputStreamAndBlockSizeAndRecordSizeAndEncodingAndLenient_yvWK5() throws Exception {
        InputStream inputStream = null;
        int blockSize = 0;
        int recordSize = 0;
        String encoding = "";
        boolean lenient = false;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, recordSize, encoding, lenient);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOFWithInputStreamAndEncoding_ozGF6() throws Exception {
        InputStream inputStream = null;
        String encoding = "";
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, encoding);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOFWithInputStreamAndLenient_jqTt7() throws Exception {
        InputStream inputStream = null;
        boolean lenient = false;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, lenient);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip1_MTrE0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, "UTF-8");
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip2_JYID1() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"));
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip3_qqyI2() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024);
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip4_QvPH3() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, 1024, "UTF-8", true);
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip5_amAo4() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, 1024);
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip6_WlII5() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), true);
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip7_Ilvk6() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, 1024, "UTF-8");
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip8_veJo7() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), "UTF-8");
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_rsxE0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithBlockSize_mNSx1() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024);
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithBlockSizeAndRecordSize_QWBr2() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512);
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithBlockSizeAndRecordSizeAndEncoding_wUMp3() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512, "UTF-8");
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithBlockSizeAndRecordSizeAndEncodingAndLenient_KcQi4() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512, "UTF-8", true);
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithInputStreamAndLenient_euZz10() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), true);
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithInputStreamAndEncoding_vjar12() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), "UTF-8");
        tarArchiveInputStream.skip(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRecord_tEiX0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
        byte[] record = tarArchiveInputStream.readRecord();
        assertNotNull(record);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRecordWithBlockSize_MNwM1() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024);
        byte[] record = tarArchiveInputStream.readRecord();
        assertNotNull(record);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRecordSize_ifCp0() throws Exception {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        int recordSize = tarArchiveInputStream.getRecordSize();
        assertEquals(512, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRecordSize_1_Jvtf1() throws Exception {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0);
        int recordSize = tarArchiveInputStream.getRecordSize();
        assertEquals(0, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRecordSize_2_aHCm2() throws Exception {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, "", false);
        int recordSize = tarArchiveInputStream.getRecordSize();
        assertEquals(0, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRecordSize_3_GkMg3() throws Exception {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, "", true);
        int recordSize = tarArchiveInputStream.getRecordSize();
        assertEquals(0, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRecordSize_4_crQX4() throws Exception {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0);
        int recordSize = tarArchiveInputStream.getRecordSize();
        assertEquals(0, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRecordSize_5_mxVu5() throws Exception {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, "");
        int recordSize = tarArchiveInputStream.getRecordSize();
        assertEquals(0, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClose1_aesK0() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
		tarArchiveInputStream.close();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClose2_FzaM1() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024);
		tarArchiveInputStream.close();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClose3_sbIW2() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512, "UTF-8", true);
		tarArchiveInputStream.close();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMark_QukL0() throws Exception {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, "");
        tarArchiveInputStream.mark(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModTime_UyzU0() throws Exception {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getNextTarEntry_MBtA2() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
        assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_uSPJ0() throws Exception {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
        tarArchiveInputStream.reset();
    }
}