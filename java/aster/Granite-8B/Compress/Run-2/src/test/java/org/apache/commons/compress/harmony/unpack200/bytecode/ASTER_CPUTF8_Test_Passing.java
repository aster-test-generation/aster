/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPUTF8_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_EgGe0() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("test");
        boolean result = cputf8.equals(cputf8);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_vqjl1() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("test");
        boolean result = cputf8.equals(null);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_BLkz2() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("test");
        boolean result = cputf8.equals(new Object());
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentUTF8_lbaE3() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("test");
        CPUTF8 other = new CPUTF8("test2");
        boolean result = cputf8.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_UiMl0() throws Exception {
		CPUTF8 utf8 = new CPUTF8("UTF-8", 0);
		assertEquals("UTF-8:UTF-8", utf8.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testConstructorWithString_JITg1_2() throws Exception {
		CPUTF8 utf8 = new CPUTF8("UTF-8");
		assertEquals(0, utf8.globalIndex);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testConstructorWithUtf8AndGlobalIndex_hfuO2_2() throws Exception {
		CPUTF8 utf8 = new CPUTF8("UTF-8", 1);
		assertEquals(1, utf8.globalIndex);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithNullUtf8_AYZV3() throws Exception {
		CPUTF8 utf8 = new CPUTF8(null);
		assertEquals("null:null", utf8.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithEmptyUtf8_SdBl4() throws Exception {
		CPUTF8 utf8 = new CPUTF8("");
		assertEquals("UTF-8:null", utf8.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGlobalIndex_eCGT0() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        cputf8.setGlobalIndex(1);
        assertEquals(1, cputf8.globalIndex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGlobalIndexWithNegativeIndex_nWDr1() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        cputf8.setGlobalIndex(-1);
        assertEquals(-1, cputf8.globalIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGlobalIndexWithZeroIndex_ofwL2() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        cputf8.setGlobalIndex(0);
        assertEquals(0, cputf8.globalIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGlobalIndexWithLargeIndex_jIwj4() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        cputf8.setGlobalIndex(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, cputf8.globalIndex);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGlobalIndexWithSmallIndex_wqLO5() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        cputf8.setGlobalIndex(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, cputf8.globalIndex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnderlyingString_FMgq0() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("example", 0);
        assertEquals("example", cputf8.underlyingString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnderlyingStringWithGlobalIndex_zUGn1() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("example", 10);
        assertEquals("example", cputf8.underlyingString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_Kdbz0() throws IOException {
        CPUTF8 cputf8 = new CPUTF8("example", 0);
        DataOutputStream dos = new DataOutputStream(System.out);
        cputf8.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_dLQq0() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("string");
        int hashCode1 = cputf8.hashCode();
        assert hashCode1 == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_CNNG1() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        int hashCode2 = cputf8.hashCode();
        assert hashCode2 == 0;
    }
}