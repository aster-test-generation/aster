/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Iterators_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyCollection_JykT1_1() {
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Iterator<Integer> iterator = new ArrayList<>(Arrays.asList(4, 5, 6)).iterator();
        boolean wasModified = Iterators.addAll(collection, iterator);
        assertTrue(wasModified);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyCollection_JykT1_2() {
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Iterator<Integer> iterator = new ArrayList<>(Arrays.asList(4, 5, 6)).iterator();
        boolean wasModified = Iterators.addAll(collection, iterator);
        assertEquals(6, collection.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyCollection_JykT1_3() {
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Iterator<Integer> iterator = new ArrayList<>(Arrays.asList(4, 5, 6)).iterator();
        boolean wasModified = Iterators.addAll(collection, iterator);
        assertTrue(collection.contains(4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyCollection_JykT1_4() {
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Iterator<Integer> iterator = new ArrayList<>(Arrays.asList(4, 5, 6)).iterator();
        boolean wasModified = Iterators.addAll(collection, iterator);
        assertTrue(collection.contains(5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyCollection_JykT1_5() {
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Iterator<Integer> iterator = new ArrayList<>(Arrays.asList(4, 5, 6)).iterator();
        boolean wasModified = Iterators.addAll(collection, iterator);
        assertTrue(collection.contains(6));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithEmptyCollection_aPhI0_InSi0_1() {
        Collection<String> collection = new ArrayList<>();
        Iterator<String> iterator = new ArrayList<String>().iterator();
        boolean wasModified = Iterators.addAll(collection, iterator);
        assertFalse(wasModified);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithEmptyCollection_aPhI0_InSi0_2() {
        Collection<String> collection = new ArrayList<>();
        Iterator<String> iterator = new ArrayList<String>().iterator();
        boolean wasModified = Iterators.addAll(collection, iterator);
        assertTrue(collection.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyCollection_JykT1() {
        Collection<Integer> collection = new ArrayList<>();
        collection.add(1);
        collection.add(2);
        collection.add(3);
        Iterator<Integer> iterator = new ArrayList<>(Arrays.asList(4, 5, 6)).iterator();
        boolean wasModified = Iterators.addAll(collection, iterator);
        assertTrue(wasModified);
        assertEquals(6, collection.size());
        assertTrue(collection.contains(4));
        assertTrue(collection.contains(5));
        assertTrue(collection.contains(6));
    }
}