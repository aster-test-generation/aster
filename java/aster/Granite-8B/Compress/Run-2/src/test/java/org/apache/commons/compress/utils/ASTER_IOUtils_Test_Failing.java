/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.EOFException;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ReadableByteChannel;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
public class Aster_IOUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRange_tExN0() throws IOException {
        ReadableByteChannel input = mock(ReadableByteChannel.class);
        when(input.read(any(ByteBuffer.class))).thenReturn(10);
        byte[] result = IOUtils.readRange(input, 100);
        assertArrayEquals(new byte[10], result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRangeWithShortRead_ErbR2() throws IOException {
        ReadableByteChannel input = mock(ReadableByteChannel.class);
        when(input.read(any(ByteBuffer.class))).thenReturn(5);
        byte[] result = IOUtils.readRange(input, 10);
        assertArrayEquals(new byte[5], result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void close_XcSk4() throws IOException {
                throw new IOException();
            }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadFully_hQar0() throws IOException {
        ReadableByteChannel channel = null; // Initialize channel
        ByteBuffer byteBuffer = ByteBuffer.allocate(10); // Initialize byteBuffer
        IOUtils.readFully(channel, byteBuffer);
        assertEquals(10, byteBuffer.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadFullyWithEOFException_AHww1() throws IOException {
        ReadableByteChannel channel = null; // Initialize channel
        ByteBuffer byteBuffer = ByteBuffer.allocate(10); // Initialize byteBuffer
        try {
            IOUtils.readFully(channel, byteBuffer);
            fail("Expected EOFException");
        } catch (EOFException e) {
        }
    }
}