/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName_ElMO0() {
        String fileName = "example.txt.gz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName2_QWZx1() {
        String fileName = "example.txt";
        boolean expected = false;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName3_qcOm2() {
        String fileName = "example.tar.gz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName4_QdoO3() {
        String fileName = "example.zip";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName5_euTD4() {
        String fileName = "example.jar";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName6_LrwA5() {
        String fileName = "example.tar";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName7_jLSY6() {
        String fileName = "example.7z";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName8_mOPe7() {
        String fileName = "example.rar";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName9_Xkyd8() {
        String fileName = "example.bz2";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName10_wCkj9() {
        String fileName = "example.gz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName11_fsIW10() {
        String fileName = "example.z";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName12_mhBx11() {
        String fileName = "example.xz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName13_GCJp12() {
        String fileName = "example.lzma";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName14_XzrD13() {
        String fileName = "example.lz4";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName15_YZpr14() {
        String fileName = "example.snappy";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName16_gcpB15() {
        String fileName = "example.deflate";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName17_mhbA16() {
        String fileName = "example.Z";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName18_IqdR17() {
        String fileName = "example.bz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetUncompressedFilename_eeji0() {
		String fileName = "example.txt";
		String expected = "example.txt";
		String actual = GzipUtils.getUncompressedFilename(fileName);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsCompressedFilename_lrhI0_1() {
		assertTrue(GzipUtils.isCompressedFilename("file.txt.gz"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsCompressedFilename_lrhI0_2() {
		assertFalse(GzipUtils.isCompressedFilename("file.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilename_rZya0() {
        String fileName = "example.txt";
        String compressedFileName = GzipUtils.getCompressedFilename(fileName);
        String expectedCompressedFileName = "example.txt.gz";
        assertEquals(expectedCompressedFileName, compressedFileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUncompressedFileName_CfgT0() {
        String fileName = "example.txt";
        String expected = "example.txt";
        String actual = GzipUtils.getUncompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFileName_VHyX0() {
        String fileName = "example.txt";
        String compressedFileName = GzipUtils.getCompressedFileName(fileName);
        assertEquals("example.txt.gz", compressedFileName);
    }
}