/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMACompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatches_hzYp0() {
		byte[] signature = new byte[3];
		signature[0] = 0x5d;
		signature[1] = 0;
		signature[2] = 0;
		boolean result = LZMACompressorInputStream.matches(signature, 3);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithNullSignature_JQJQ1() {
		boolean result = LZMACompressorInputStream.matches(null, 3);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithInvalidLength_pijJ2() {
		byte[] signature = new byte[3];
		signature[0] = 0x5d;
		signature[1] = 0;
		signature[2] = 0;
		boolean result = LZMACompressorInputStream.matches(signature, 2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithInvalidSignature_kQFi3() {
		byte[] signature = new byte[3];
		signature[0] = 0x5e;
		signature[1] = 0;
		signature[2] = 0;
		boolean result = LZMACompressorInputStream.matches(signature, 3);
		assertFalse(result);
	}
}