/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.apache.commons.compress.utils.ByteUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JarMarker_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_bJrV0() throws ZipException {
        JarMarker jarMarker = new JarMarker();
        byte[] buffer = new byte[100]; // Assuming buffer is initialized with appropriate values
        int offset = 0;
        int length = buffer.length;
        jarMarker.parseFromCentralDirectoryData(buffer, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_psZJ0() throws ZipException {
        JarMarker jarMarker = new JarMarker();
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        jarMarker.parseFromLocalFileData(data, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileDataWithOffset_xwBB1() throws ZipException {
        JarMarker jarMarker = new JarMarker();
        byte[] data = new byte[10];
        int offset = 5;
        int length = 10;
        jarMarker.parseFromLocalFileData(data, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_DiEV0() throws Exception {
        JarMarker jarMarker = new JarMarker();
        ZipShort zipShort = jarMarker.getHeaderId();
        assertEquals(JarMarker.ID, zipShort);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataData_Jjwx0() throws Exception {
        JarMarker jarMarker = new JarMarker();
        byte[] actual = jarMarker.getLocalFileDataData();
        byte[] expected = ByteUtils.EMPTY_BYTE_ARRAY;
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_ibIE0() throws Exception {
        JarMarker jarMarker = new JarMarker();
        ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
        assertNotNull(centralDirectoryLength);
    }
}