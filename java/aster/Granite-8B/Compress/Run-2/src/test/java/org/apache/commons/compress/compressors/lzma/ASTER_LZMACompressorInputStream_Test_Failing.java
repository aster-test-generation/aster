/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMACompressorInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_vNOC0() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
        long n = 0;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip1_CVNn1() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 0);
        long n = 0;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip2_xZJJ2() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 0);
        long n = 1;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip3_dQoF3() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 0);
        long n = -1;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip4_iImm4() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 0);
        long n = Long.MAX_VALUE;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip5_iMTA5() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 0);
        long n = Long.MIN_VALUE;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
}