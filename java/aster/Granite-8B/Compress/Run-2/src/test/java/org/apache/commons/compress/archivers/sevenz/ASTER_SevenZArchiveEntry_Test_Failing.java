/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.Date;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Failing {
private Iterable<? extends SevenZMethodConfiguration> contentMethods;
private SevenZArchiveEntry sevenzarchiveentry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_cWls0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> contentMethods = entry.getContentMethods();
        assertNotNull(contentMethods);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_aTcx0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long ntfsLastModifiedDate = 1234567890L;
        entry.setLastModifiedDate(ntfsLastModifiedDate);
        assertEquals(1234567890L, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationDate_TbsA0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = entry.getCreationDate();
        assertNotNull(creationDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_djQv0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date lastModifiedDate = entry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessDate_WzBF0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date accessDate = entry.getAccessDate();
        assertNotNull(accessDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetContentMethods() {
        sevenzarchiveentry = new SevenZArchiveEntry();
        contentMethods = mock(Iterable.class);
        sevenzarchiveentry.setContentMethods(contentMethods);
        verify(sevenzarchiveentry).setContentMethods(contentMethods);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasStream_JhhV0_fid2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.hasStream();
        assertTrue(entry.hasStream());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHasAccessDate_mUky0_fid2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean hasAccessDate = entry.getHasAccessDate();
        assertTrue(hasAccessDate);
    }
}