/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHave_class_flags_hi_iQQS0() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_class_flags_hi();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHaveAllCodeFlags_Fyiw0() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_all_code_flags();
        boolean expected = false;
        assertEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPack_gKiY0() throws IOException, Pack200Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        segmentHeader.pack(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIc_count_ZhCw0() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        segmentHeader.setIc_count(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHave_file_size_hi_zhQY0() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_file_size_hi();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHaveFileOptions_XRNp0() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_file_options();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultMajorVersion_hjpD0() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        int defaultMajorVersion = segmentHeader.getDefaultMajorVersion();
        assertEquals(0, defaultMajorVersion);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchive_modtime_vhSm0() throws Exception {
        SegmentHeader sh = new SegmentHeader();
        int modtime = sh.getArchive_modtime();
        assertEquals(0, modtime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHave_field_flags_hi_DuPh0() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean haveFieldFlagsHi = segmentHeader.have_field_flags_hi();
        assertTrue(haveFieldFlagsHi);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHave_file_modtime_ddpt0() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_file_modtime();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHave_code_flags_hi_mDrB0() throws Exception {
		SegmentHeader segmentHeader = new SegmentHeader();
		boolean result = segmentHeader.have_code_flags_hi();
		boolean expected = false;
		assertEquals(expected, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflate_hint_aVVq0() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        segmentHeader.setDeflate_hint(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflate_hintWithFalse_LmKB1() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        segmentHeader.setDeflate_hint(false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHave_method_flags_hi_aEmY0() throws Exception {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_method_flags_hi();
        assertTrue(result);
    }
}