/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMAUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_MMxR0() throws Exception {
        byte[] signature = new byte[10];
        int length = 10;
        boolean result = LZMAUtils.matches(signature, length);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches2_RvAL1() throws Exception {
        byte[] signature = new byte[10];
        int length = 10;
        signature[0] = 0;
        boolean result = LZMAUtils.matches(signature, length);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches3_uxTb2() throws Exception {
        byte[] signature = new byte[10];
        int length = 10;
        signature[0] = 0;
        signature[1] = 0;
        boolean result = LZMAUtils.matches(signature, length);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches4_egZO3() throws Exception {
        byte[] signature = new byte[10];
        int length = 10;
        signature[0] = 0;
        signature[1] = 0;
        signature[2] = 0;
        boolean result = LZMAUtils.matches(signature, length);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches5_VzXl4() throws Exception {
        byte[] signature = new byte[10];
        int length = 10;
        signature[0] = 0;
        signature[1] = 0;
        signature[2] = 0;
        signature[3] = 0;
        boolean result = LZMAUtils.matches(signature, length);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches6_DDBJ5() throws Exception {
        byte[] signature = new byte[10];
        int length = 10;
        signature[0] = 0;
        signature[1] = 0;
        signature[2] = 0;
        signature[3] = 0;
        signature[4] = 0;
        boolean result = LZMAUtils.matches(signature, length);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches7_ymtp6() throws Exception {
        byte[] signature = new byte[10];
        int length = 10;
        signature[0] = 0;
        signature[1] = 0;
        signature[2] = 0;
        signature[3] = 0;
        signature[4] = 0;
        signature[5] = 0;
        boolean result = LZMAUtils.matches(signature, length);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches8_rOfv7() throws Exception {
        byte[] signature = new byte[10];
        int length = 10;
        signature[0] = 0;
        signature[1] = 0;
        signature[2] = 0;
        signature[3] = 0;
        signature[4] = 0;
        signature[5] = 0;
        signature[6] = 0;
        boolean result = LZMAUtils.matches(signature, length);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches9_FvKH8() throws Exception {
        byte[] signature = new byte[10];
        int length = 10;
        signature[0] = 0;
        signature[1] = 0;
        signature[2] = 0;
        signature[3] = 0;
        signature[4] = 0;
        signature[5] = 0;
        signature[6] = 0;
        signature[7] = 0;
        boolean result = LZMAUtils.matches(signature, length);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches10_soOC9() throws Exception {
        byte[] signature = new byte[10];
        int length = 10;
        signature[0] = 0;
        signature[1] = 0;
        signature[2] = 0;
        signature[3] = 0;
        signature[4] = 0;
        signature[5] = 0;
        signature[6] = 0;
        signature[7] = 0;
        signature[8] = 0;
        boolean result = LZMAUtils.matches(signature, length);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches11_Lnom10() throws Exception {
        byte[] signature = new byte[10];
        int length = 10;
        signature[0] = 0;
        signature[1] = 0;
        signature[2] = 0;
        signature[3] = 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsCompressedFilename_ADlY0_1() throws Exception {
		assertTrue(LZMAUtils.isCompressedFilename("file.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsCompressedFilename_ADlY0_2() throws Exception {
		assertFalse(LZMAUtils.isCompressedFilename("file.txt.lzma"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetCompressedFilename_iVTU0() throws Exception {
		String fileName = "test.txt";
		String compressedFileName = LZMAUtils.getCompressedFilename(fileName);
		assertEquals("test.txt.lzma", compressedFileName);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFileName_zPox0() throws Exception {
        String fileName = "example.txt";
        String expected = "example.txt";
        String actual = LZMAUtils.getUncompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetCompressedFileName_ywHn0() throws Exception {
        String fileName = "example.txt";
        String expectedFileName = "example.txt.lzma";
        String actualFileName = LZMAUtils.getCompressedFileName(fileName);
        assertEquals(expectedFileName, actualFileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLZMACompressionAvailable_TYcy0() throws Exception {
        boolean result = LZMAUtils.isLZMACompressionAvailable();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLZMACompressionAvailable2_dBSi1() throws Exception {
        boolean result = LZMAUtils.isLZMACompressionAvailable();
        assertFalse(result);
    }
}