/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;

import com.github.luben.zstd.BufferPool;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
public class Aster_ZstdCompressorInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testReadWithOffsetAndLength_FDTp1() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(1);
        ZstdCompressorInputStream zs = new ZstdCompressorInputStream(in);
        byte[] b = new byte[2];
        int bytesRead = zs.read(b, 1, 1);
        assertEquals(1, bytesRead);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testReadWithOffsetAndLengthExceedsBufferLength_RfrO2() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(1);
        ZstdCompressorInputStream zs = new ZstdCompressorInputStream(in);
        byte[] b = new byte[1];
        IOException exception =
            assertThrows(IOException.class, () -> zs.read(b, 0, 2));
        assertTrue(exception.getMessage().contains("Request array length exceeds buffer length"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testReadWithOffsetAndLengthExceedsBufferLength_RfrO2_1() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(1);
        ZstdCompressorInputStream zs = new ZstdCompressorInputStream(in);
        byte[] b = new byte[1];
        IOException exception =
            assertThrows(IOException.class, () -> zs.read(b, 0, 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose_Ykua0_RxAJ0() throws IOException {
    BufferPool bufferPool = mock(BufferPool.class);
    InputStream in = mock(InputStream.class);
    ZstdCompressorInputStream zstdCompressorInputStream = new ZstdCompressorInputStream(in, bufferPool);
    zstdCompressorInputStream.close();
    verify(in).close();
}
}