/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
public class Aster_DeflateCompressorInputStream_Test_Passing {
    private DeflateCompressorInputStream deflateCompressorInputStream;
    private InputStream inputStream;
    private Inflater inflater;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeflateParameters_dLda0() throws Exception {
	DeflateParameters deflateParameters = new DeflateParameters();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeflateCompressorInputStreamWithInputStreamAndDeflateParameters_VXtF1() throws Exception {
	InputStream inputStream = mock(InputStream.class);
	DeflateParameters parameters = new DeflateParameters();
	DeflateCompressorInputStream deflateCompressorInputStream = new DeflateCompressorInputStream(inputStream, parameters);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDeflateCompressorInputStreamWithInputStream_Yvjs2() throws Exception {
	InputStream inputStream = mock(InputStream.class);
	DeflateCompressorInputStream deflateCompressorInputStream = new DeflateCompressorInputStream(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_WQNE3() throws IOException {
	InputStream inputStream = mock(InputStream.class);
	DeflateCompressorInputStream deflateCompressorInputStream = new DeflateCompressorInputStream(inputStream);
	int ret = deflateCompressorInputStream.read();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureLengthGreaterThan3AndMagic1AndMagic2a_oXMF0() throws Exception {
        byte[] signature = {8, 1, 2, 3};
        boolean result = DeflateCompressorInputStream.matches(signature, 4);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureLengthGreaterThan3AndMagic1AndMagic2e_HumA4() throws Exception {
        byte[] signature = {8, 1, 2, 3};
        boolean result = DeflateCompressorInputStream.matches(signature, 4);
        assertFalse(result);
    }
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void tearDown_mhBN1() throws IOException {
        deflateCompressorInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testClose_McoZ2() throws Exception {
        assertDoesNotThrow(() -> {
            deflateCompressorInputStream.close();
        });
    }
}