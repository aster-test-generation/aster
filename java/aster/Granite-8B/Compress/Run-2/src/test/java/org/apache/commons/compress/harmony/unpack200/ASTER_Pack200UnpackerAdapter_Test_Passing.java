/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.io.input.BoundedInputStream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200UnpackerAdapter_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testNewBoundedInputStream_AIBh0() throws IOException {
        Path path = null; // Initialize with a valid path
        BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(path);
        assertEquals(boundedInputStream.available(), Files.size(path));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testNewBoundedInputStreamWithNegativeSize_LDCL1_1() throws Exception {
        Path path = null; // Initialize with a valid path
        IOException exception = assertThrows(IOException.class, () -> Pack200UnpackerAdapter.newBoundedInputStream(path));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStream_yueK0() throws IOException {
        File file = new File("example.txt");
        BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(file);
        assertEquals(boundedInputStream.available(), Files.size(file.toPath()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStreamWithIOException_LjUc1_1() throws Exception {
        Path path = Paths.get("nonexistent.txt");
        IOException exception = assertThrows(IOException.class, () -> Pack200UnpackerAdapter.newBoundedInputStream(path));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStream_Jsxk0() throws IOException, URISyntaxException {
        URL url = new URL("http://example.com/file.txt");
        BoundedInputStream boundedInputStream = Pack200UnpackerAdapter.newBoundedInputStream(url);
        assertNotNull(boundedInputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStreamWithBoundedInputStream_Hukt0() throws IOException {
        BoundedInputStream boundedInputStream = new BoundedInputStream(new ByteArrayInputStream(new byte[10]));
        BoundedInputStream result = Pack200UnpackerAdapter.newBoundedInputStream(boundedInputStream);
        assertEquals(boundedInputStream, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStreamWithFileInputStream_vpgz2_1() throws IOException {
        FileInputStream fileInputStream = new FileInputStream("test.txt");
        BoundedInputStream result = Pack200UnpackerAdapter.newBoundedInputStream(fileInputStream);
        assertTrue(result instanceof BoundedInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStreamWithFileInputStream_vpgz2_2() throws IOException {
        FileInputStream fileInputStream = new FileInputStream("test.txt");
        BoundedInputStream result = Pack200UnpackerAdapter.newBoundedInputStream(fileInputStream);
        assertNotEquals(fileInputStream, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStreamWithOtherInputStream_rcpH3_1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[10]);
        BoundedInputStream result = Pack200UnpackerAdapter.newBoundedInputStream(inputStream);
        assertTrue(result instanceof BoundedInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStreamWithOtherInputStream_rcpH3_2() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[10]);
        BoundedInputStream result = Pack200UnpackerAdapter.newBoundedInputStream(inputStream);
        assertNotEquals(inputStream, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStream_tQJZ0() throws IOException {
        Path path = Paths.get("test.txt");
        Files.createFile(path);
        BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path.toString());
        assertTrue(bis instanceof BoundedInputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStreamWithMultiplePaths_WUkC1() throws IOException {
        Path path1 = Paths.get("test1.txt");
        Path path2 = Paths.get("test2.txt");
        Files.createFile(path1);
        Files.createFile(path2);
        BoundedInputStream bis = Pack200UnpackerAdapter.newBoundedInputStream(path1.toString(), path2.toString());
        assertTrue(bis instanceof BoundedInputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewBoundedInputStreamWithInvalidPath_eddq2_1() throws Exception {
        IOException exception = assertThrows(IOException.class, () -> {
            Pack200UnpackerAdapter.newBoundedInputStream("invalid/path");
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testUnwrapWithOtherInputStream_ntab1() throws IOException {
        InputStream inputStream = new ByteArrayInputStream(new byte[10]);
        InputStream result = Pack200UnpackerAdapter.unwrap(inputStream);
        assertTrue(result == inputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testUnwrapWithNullInputStream_WDGZ2_1() throws Exception {
        IOException exception = assertThrows(IOException.class, () -> Pack200UnpackerAdapter.unwrap(null));}
}