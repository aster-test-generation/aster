/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.apache.commons.io.file.attribute.FileTimes;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToUnixTimeWithNullFileTime_aTJv0() {
        FileTime fileTime = null;
        long expected = 0;
        long actual = TimeUtils.toUnixTime(fileTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToUnixTimeWithNonNullFileTime_VCCk1() {
        FileTime fileTime = FileTime.fromMillis(1234567890L);
        long expected = 1234567890L / 1000L;
        long actual = TimeUtils.toUnixTime(fileTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTime_Ktvp0() {
        FileTime time = FileTime.fromMillis(0);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithNegativeTime_gcqU1() {
        FileTime time = FileTime.fromMillis(-1);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithLargeTime_dvwx2() {
        FileTime time = FileTime.fromMillis(Long.MAX_VALUE);
        boolean result = TimeUtils.isUnixTime(time);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithOneTime_RoEX5() {
        FileTime time = FileTime.fromMillis(1);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithTwoTime_PcEY6() {
        FileTime time = FileTime.fromMillis(2);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithThreeTime_dgfC7() {
        FileTime time = FileTime.fromMillis(3);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithFourTime_Bmha8() {
        FileTime time = FileTime.fromMillis(4);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithFiveTime_pFmJ9() {
        FileTime time = FileTime.fromMillis(5);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithSixTime_Pbho10() {
        FileTime time = FileTime.fromMillis(6);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithSevenTime_cXZK11() {
        FileTime time = FileTime.fromMillis(7);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithEightTime_hCUf12() {
        FileTime time = FileTime.fromMillis(8);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithNineTime_iGRC13() {
        FileTime time = FileTime.fromMillis(9);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithTenTime_dVAx14() {
        FileTime time = FileTime.fromMillis(10);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithElevenTime_epAk15() {
        FileTime time = FileTime.fromMillis(11);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithTwelveTime_PZpU16() {
        FileTime time = FileTime.fromMillis(12);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithThirteenTime_sstT17() {
        FileTime time = FileTime.fromMillis(13);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithFourteenTime_tpIC18() {
        FileTime time = FileTime.fromMillis(14);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithFifteenTime_gPvV19() {
        FileTime time = FileTime.fromMillis(15);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithSixteenTime_Owjs20() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_RVeP0() {
        Date date = new Date();
        long ntfsTime = TimeUtils.toNtfsTime(date);
        long expectedNtfsTime = FileTimes.toNtfsTime(date);
        assertEquals(expectedNtfsTime, ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToFileTime_kGCn0() {
        Date date = new Date();
        FileTime fileTime = TimeUtils.toFileTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToFileTime_FhPo0() {
        long ntfsTime = 1234567890L;
        FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
        assertNotNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToFileTimeWithNegativeTime_adsP2() {
        long ntfsTime = -1234567890L;
        FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
        assertNotNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToFileTimeWithZeroTime_WfdX3() {
        long ntfsTime = 0L;
        FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
        assertNotNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToFileTimeWithMaxTime_rsRH4() {
        long ntfsTime = Long.MAX_VALUE;
        FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
        assertNotNull(fileTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToFileTimeWithDst_LQkP5() {
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        long ntfsTime = 1234567890L;
        FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
        assertNotNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateToHundredNanos_xdGM0() {
        final FileTime fileTime = FileTime.from(Instant.ofEpochSecond(123, 456000));
        final FileTime expected = FileTime.from(Instant.ofEpochSecond(123, 456000));
        final FileTime actual = TimeUtils.truncateToHundredNanos(fileTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixTimeToFileTime_eCjP0() {
        long time = 1234567890L;
        FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
        assertEquals(FileTime.from(time, TimeUnit.SECONDS), fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixTimeToFileTimeWithZeroTime_nKXY1() {
        long time = 0L;
        FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
        assertEquals(FileTime.from(time, TimeUnit.SECONDS), fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixTimeToFileTimeWithNegativeTime_nXSZ2() {
        long time = -1234567890L;
        FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
        assertEquals(FileTime.from(time, TimeUnit.SECONDS), fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixTimeToFileTimeWithMaxTime_aZLS3() {
        long time = Long.MAX_VALUE;
        FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
        assertEquals(FileTime.from(time, TimeUnit.SECONDS), fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixTimeToFileTimeWithMinTime_eVZQ4() {
        long time = Long.MIN_VALUE;
        FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
        assertEquals(FileTime.from(time, TimeUnit.SECONDS), fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDate_HlTG0() {
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        Date date = TimeUtils.toDate(fileTime);
        assertNotNull(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_riRq0() {
        long javaTime = 1633636800000L; // Example Java time
        long expectedNtfsTime =132781104000000000L; // Example expected NTFS time
        long actualNtfsTime = TimeUtils.toNtfsTime(javaTime);
        assertEquals(expectedNtfsTime, actualNtfsTime);
    }
}