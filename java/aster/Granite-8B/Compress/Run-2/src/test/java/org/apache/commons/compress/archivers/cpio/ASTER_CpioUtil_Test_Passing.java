/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void fileTypeTest_Xkcb0() throws Exception {
        long mode = 0;
        long result = CpioUtil.fileType(mode);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testByteArray2long_PKyK0_1() throws Exception {
        assertEquals(0, CpioUtil.byteArray2long(new byte[] {}, false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testByteArray2long_PKyK0_2() throws Exception {
        assertEquals(0, CpioUtil.byteArray2long(new byte[] { 0 }, false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testByteArray2long_PKyK0_3() throws Exception {
        assertEquals(1, CpioUtil.byteArray2long(new byte[] { 1 }, false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testByteArray2long_PKyK0_4() throws Exception {
        assertEquals(256, CpioUtil.byteArray2long(new byte[] { 0, 1 }, false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testByteArray2long_PKyK0_5() throws Exception {
        assertEquals(65536, CpioUtil.byteArray2long(new byte[] { 0, 0, 1, 0 }, false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testByteArray2longWithSwapHalfWord_JhAl1_1() throws Exception {
        assertEquals(0, CpioUtil.byteArray2long(new byte[] {}, true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testByteArray2longWithSwapHalfWord_JhAl1_2() throws Exception {
        assertEquals(0, CpioUtil.byteArray2long(new byte[] { 0 }, true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testByteArray2longWithSwapHalfWord_JhAl1_3() throws Exception {
        assertEquals(1, CpioUtil.byteArray2long(new byte[] { 1 }, true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testByteArray2longWithSwapHalfWord_JhAl1_4() throws Exception {
        assertEquals(256, CpioUtil.byteArray2long(new byte[] { 1, 0 }, true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testByteArray2longWithSwapHalfWord_JhAl1_5() throws Exception {
        assertEquals(65536, CpioUtil.byteArray2long(new byte[] { 0, 1 }, true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testByteArray2longWithOddLength_yKxL2_1() throws Exception {
        final byte[] number = new byte[1];
        final UnsupportedOperationException e =
            assertThrows(UnsupportedOperationException.class, () -> CpioUtil.byteArray2long(number, false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArray_olNn0() throws Exception {
        byte[] expected = new byte[8];
        expected[0] = 0;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
        expected[5] = 0;
        expected[6] = 0;
        expected[7] = 1;
        byte[] actual = CpioUtil.long2byteArray(1, 8, false);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArray2_qpgQ1() throws Exception {
        byte[] expected = new byte[8];
        expected[0] = 127;
        expected[1] = -1;
        expected[2] = -1;
        expected[3] = -1;
        expected[4] = -1;
        expected[5] = -1;
        expected[6] = -1;
        expected[7] = -1;
        byte[] actual = CpioUtil.long2byteArray(-1, 8, false);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArray3_aDFE2() throws Exception {
        byte[] expected = new byte[8];
        expected[0] = 127;
        expected[1] = -1;
        expected[2] = -1;
        expected[3] = -1;
        expected[4] = -1;
        expected[5] = -1;
        expected[6] = -1;
        expected[7] = -1;
        byte[] actual = CpioUtil.long2byteArray(-1, 8, true);
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLong2ByteArray4_lTCl3() throws Exception {
        byte[] expected = new byte[8];
        expected[0] = 0;
        expected[1] = 0;
        expected[2] = 0;
        expected[3] = 0;
        expected[4] = 0;
        expected[5] = 0;
        expected[6] = 0;
        expected[7] = 1;
        byte[] actual = CpioUtil.long2byteArray(1, 8, true);
        assertArrayEquals(expected, actual);
    }
}