/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.Date;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffset2_mpLC1() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        long offset = dumpArchiveEntry.getOffset();
        assertEquals(0, offset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffset3_AYim2() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry();
        long offset = dumpArchiveEntry.getOffset();
        assertEquals(0, offset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTime_KRsp0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        Date atime = new Date();
        entry.setAccessTime(atime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_RdQA0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFifoNull_byfV9() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertTrue(!entry.isFifo());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIno_smLf0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, entry.getIno());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSimpleName_GGWc0() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals("simpleName", entry.getSimpleName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNlink_NoType_EWCH8() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, null);
        assertEquals(1, entry.getNlink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId10_jwPk9() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, dumpArchiveEntry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderCount2_Usvk1() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, entry.getHeaderCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderCount3_FzZI2() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        assertEquals(0, entry.getHeaderCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeNoType_eHEH8() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, null);
        assertEquals(null, entry.getType());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_hkAw0() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffset_UMCb1() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        long offset = entry.getOffset();
        assertTrue(offset >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_fUMd2() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        String name = entry.getName();
        assertNotNull(name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_jzww3() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        Date lastModified = entry.getLastModifiedDate();
        assertNotNull(lastModified);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGeneration_zqbJ4() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        int generation = entry.getGeneration();
        assertTrue(generation >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIno_vFgJ5() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        int ino = entry.getIno();
        assertTrue(ino >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSimpleName_CfTK6() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        String simpleName = entry.getSimpleName();
        assertNotNull(simpleName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNlink_rYAM7() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        int nlink = entry.getNlink();
        assertTrue(nlink >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_MKOs8() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        int mode = entry.getMode();
        assertTrue(mode >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_nNQz9() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        int groupId = entry.getGroupId();
        assertTrue(groupId >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_HIEe11() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        int userId = entry.getUserId();
        assertTrue(userId >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_PFel12() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        int hashCode = entry.hashCode();
        assertTrue(hashCode >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCount_iGNw13() throws Exception {
        byte[] buffer = new byte[1024]; // Assuming buffer size is 1024
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        int headerCount = entry.getHeaderCount();
        assertTrue(headerCount >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderType_mnnF0() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        DumpArchiveConstants.SEGMENT_TYPE headerType = dumpArchiveEntry.getHeaderType();
        assertNotNull(headerType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOriginalName_GZkR0() throws Exception {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        String originalName = dumpArchiveEntry.getOriginalName();
        assertEquals("name", originalName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType3_cxFR2() throws Exception {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(entry.getSize(), 0);
    }
}