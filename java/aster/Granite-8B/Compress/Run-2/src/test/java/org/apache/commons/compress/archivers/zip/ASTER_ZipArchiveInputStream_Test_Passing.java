/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.apache.commons.compress.archivers.ArchiveEntry;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;
import java.util.zip.CRC32;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveInputStream_Test_Passing {
@Mock
    private InputStream inputStream;
private ZipArchiveInputStream ziparchiveinputstream;
private byte[] skipBuf = new byte[1024];
private long uncompressedCount;
private boolean hitCentralDirectory;
private boolean useUnicodeExtraFields;
private boolean closed;
private boolean hasDataDescriptor;
private int entriesRead;
@Mock
    private ArchiveEntry mockArchiveEntry;
private ZipArchiveInputStream zipArchiveInputStream;
private ZipArchiveEntry zipArchiveEntry;
private CRC32 crc32;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextEntry() throws Exception {
        ziparchiveinputstream = new ZipArchiveInputStream(inputStream);
        // Mock the behavior of the getNextZipEntry method
        when(ziparchiveinputstream.getNextZipEntry()).thenReturn(new ZipArchiveEntry());
        // Call the method under test
        ZipArchiveEntry entry = ziparchiveinputstream.getNextEntry();
        // Assert that the method returned the expected result
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryTest_zpaj0() throws IOException {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
        assertNotNull(zipArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryTest1_pJhF1() throws IOException {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null, null, false, false, false);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
        assertNotNull(zipArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryTest2_UYKM2() throws IOException {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null, null, false, false);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
        assertNotNull(zipArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryTest3_JjFr3() throws IOException {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null, null, false);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
        assertNotNull(zipArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getNextEntryTest4_orwm4() throws IOException {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null, null);
        ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextEntry();
        assertNotNull(zipArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void setUp_Osla0() throws Exception {
		zipArchiveInputStream = new ZipArchiveInputStream(null);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSkipWithPositiveValue_GyYG1() throws IOException {
		long skipped = zipArchiveInputStream.skip(10);
		assertEquals(10, skipped);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSkipWithZeroValue_JnjZ2() throws IOException {
		long skipped = zipArchiveInputStream.skip(0);
		assertEquals(0, skipped);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSkipWithNegativeValue_drAo3() throws Exception {
		Assertions.assertThrows(IllegalArgumentException.class, () -> zipArchiveInputStream.skip(-10));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSkipWithLargeValue_luVa4() throws IOException {
		long skipped = zipArchiveInputStream.skip(Long.MAX_VALUE);
		assertEquals(Long.MAX_VALUE, skipped);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSkipWithMinValue_buLE6() throws IOException {
		long skipped = zipArchiveInputStream.skip(Long.MIN_VALUE);
		assertEquals(0, skipped);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_test1_sVvj0() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_test5_SoxI4() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextZipEntry();
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_test6_rHAa5() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_test11_kywX10() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.close();
    zais.getNextZipEntry();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_whenStreamIsClosed_returnsNull_ILbU0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.close();
    ZipArchiveEntry entry = zipArchiveInputStream.getNextZipEntry();
    Assertions.assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_whenNoEntries_returnsNull_mnNM0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    Assertions.assertNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_whenCentralDirectoryExists_returnsFirstEntry_ZZdK1() throws IOException {
    byte[] centralDirectory = { /* central directory bytes */ };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(centralDirectory));
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    Assertions.assertNotNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_whenCentralDirectoryExists_returnsSecondEntry_ywZp2() throws IOException {
    byte[] centralDirectory = { /* central directory bytes */ };
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(centralDirectory));
    zipArchiveInputStream.getNextZipEntry();
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    Assertions.assertNotNull(zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntryTest1_Mwrt0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null);
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName_IWZq0() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setName("test.txt");
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetSize_XVHd1() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setSize(1024);
    assertEquals(1024, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetComment_kjul2() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setComment("This is a test comment.");
    assertEquals("This is a test comment.", entry.getComment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetTime_SVIM4() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setTime(1234567890L);
    assertEquals(1234567890L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetExternalAttributes_SnLd5() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setExternalAttributes(0x12345678);
    assertEquals(0x12345678, entry.getExternalAttributes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLocalHeaderOffset_qvDn6() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setLocalHeaderOffset(1234567890L);
    assertEquals(1234567890L, entry.getLocalHeaderOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionMadeBy_MHlL7() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setVersionMadeBy(123);
    assertEquals(123, entry.getVersionMadeBy());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionRequired_uzWM8() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setVersionRequired(123);
    assertEquals(123, entry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetCentralDirectoryExtra_hxHI10() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setCentralDirectoryExtra(new byte[10]);
    assertArrayEquals(new byte[10], entry.getCentralDirectoryExtra());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDataOffset_XpYl12() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setDataOffset(1234567890L);
    assertEquals(1234567890L, entry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDiskNumberStart_rWlX13() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setDiskNumberStart(123);
    assertEquals(123, entry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPlatform_UieL14() throws Exception {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setPlatform(123);
    assertEquals(123, entry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_valid_entry_YTMJ0() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_invalid_entry_jYvH1() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_no_entries_Dxlo2() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_multiple_entries_pjdu3_1() throws Exception {
    byte[] entry1 = new byte[0];
    byte[] entry2 = new byte[0];
    byte[] data = new byte[entry1.length + entry2.length + 4];
    System.arraycopy(entry1, 0, data, 0, entry1.length);
    System.arraycopy(entry2, 0, data, entry1.length + 2, entry2.length);
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    entry = zais.getNextZipEntry();
    entry = zais.getNextZipEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_multiple_entries_pjdu3_2() throws Exception {
    byte[] entry1 = new byte[0];
    byte[] entry2 = new byte[0];
    byte[] data = new byte[entry1.length + entry2.length + 4];
    System.arraycopy(entry1, 0, data, 0, entry1.length);
    System.arraycopy(entry2, 0, data, entry1.length + 2, entry2.length);
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    entry = zais.getNextZipEntry();
    entry = zais.getNextZipEntry();
    assertEquals(entry1.length, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_multiple_entries_pjdu3_4() throws Exception {
    byte[] entry1 = new byte[0];
    byte[] entry2 = new byte[0];
    byte[] data = new byte[entry1.length + entry2.length + 4];
    System.arraycopy(entry1, 0, data, 0, entry1.length);
    System.arraycopy(entry2, 0, data, entry1.length + 2, entry2.length);
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    entry = zais.getNextZipEntry();
    entry = zais.getNextZipEntry();
    assertEquals(entry2.length, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_multiple_entries_pjdu3_5() throws Exception {
    byte[] entry1 = new byte[0];
    byte[] entry2 = new byte[0];
    byte[] data = new byte[entry1.length + entry2.length + 4];
    System.arraycopy(entry1, 0, data, 0, entry1.length);
    System.arraycopy(entry2, 0, data, entry1.length + 2, entry2.length);
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    entry = zais.getNextZipEntry();
    entry = zais.getNextZipEntry();
    assertNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_unicode_entry_GwrQ4_1() throws Exception {
    byte[] entry1 = "Test entry with unicode characters: ".getBytes(StandardCharsets.UTF_8);
    byte[] data = new byte[entry1.length + 4];
    System.arraycopy(entry1, 0, data, 0, entry1.length);
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_unicode_entry_GwrQ4_2() throws Exception {
    byte[] entry1 = "Test entry with unicode characters: ".getBytes(StandardCharsets.UTF_8);
    byte[] data = new byte[entry1.length + 4];
    System.arraycopy(entry1, 0, data, 0, entry1.length);
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals("Test entry with unicode characters: ", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_large_entry_YsmI5_1() throws Exception {
    byte[] entry1 = new byte[1024 * 1024 * 10];
    byte[] data = new byte[entry1.length + 4];
    System.arraycopy(entry1, 0, data, 0, entry1.length);
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_large_entry_YsmI5_2() throws Exception {
    byte[] entry1 = new byte[1024 * 1024 * 10];
    byte[] data = new byte[entry1.length + 4];
    System.arraycopy(entry1, 0, data, 0, entry1.length);
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(entry1.length, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_large_unicode_entry_ovlP6_1() throws Exception {
    byte[] entry1 = "Test entry with unicode characters: ".getBytes(StandardCharsets.UTF_8);
    byte[] data = new byte[entry1.length * 10 + 4];
    for (int i = 0; i < 10; i++) {
        System.arraycopy(entry1, 0, data, i * entry1.length, entry1.length);
    }
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_large_unicode_entry_ovlP6_2() throws Exception {
    byte[] entry1 = "Test entry with unicode characters: ".getBytes(StandardCharsets.UTF_8);
    byte[] data = new byte[entry1.length * 10 + 4];
    for (int i = 0; i < 10; i++) {
        System.arraycopy(entry1, 0, data, i * entry1.length, entry1.length);
    }
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals("Test entry with unicode characters: ", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_large_entry_and_skip_split_sig_tTjK7_1() throws Exception {
    byte[] entry1 = new byte[1024 * 1024 * 10];
    byte[] data = new byte[entry1.length + 4];
    System.arraycopy(entry1, 0, data, 0, entry1.length);
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data), null, false, true);
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_with_large_entry_and_skip_split_sig_tTjK7_2() throws Exception {
    byte[] entry1 = new byte[1024 * 1024 * 10];
    byte[] data = new byte[entry1.length + 4];
    System.arraycopy(entry1, 0, data, 0, entry1.length);
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(data), null, false, true);
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(entry1.length, entry.getSize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testingGetUncompressedCount_VfJJ0() throws Exception {
		InputStream inputStream = new ByteArrayInputStream(new byte[0]);
		ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(inputStream);
		long uncompressedCount = zipArchiveInputStream.getUncompressedCount();
		assertEquals(0, uncompressedCount);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_Stored_NoDataDescriptor_sTGi0() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_Stored_NoDataDescriptor_Offset_opxr4() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 9);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_Stored_NoDataDescriptor_Length_vruD8() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 0, 0);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_Stored_NoDataDescriptor_Offset_Length_KIOQ12() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[10];
    int read = zais.read(buffer, 1, 0);
    assertEquals(-1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_bufferNull_throwsIllegalArgumentException_QUoI0() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        zais.read(null, 0, 1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException ex) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_offsetNegative_throwsIndexOutOfBoundsException_ppYI1() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    try {
        zais.read(buffer, -1, 1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException ex) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_lengthNegative_throwsIndexOutOfBoundsException_qaPB2() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    try {
        zais.read(buffer, 0, -1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException ex) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_offsetPlusLengthExceedsBufferLength_throwsIndexOutOfBoundsException_fwwu3() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    try {
        zais.read(buffer, 0, 2);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException ex) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_closedStream_throwsIOException_tSPn4() throws Exception {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.close();
    byte[] buffer = new byte[1];
    try {
        zais.read(buffer, 0, 1);
        fail("Expected IOException");
    } catch (IOException ex) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_noCurrentEntry_returnsMinusOne_DQjN5() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    byte[] buffer = new byte[1];
    assertEquals(-1, zais.read(buffer, 0, 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_entryWithoutDataDescriptor_readsCorrectly_Zhla6() throws IOException {
}
}