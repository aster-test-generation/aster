/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarFile_Test_Passing {
private SeekableByteChannel archive;
private TarArchiveEntry entry;
private TarFile tarfile;
    private static void executeModifiedClass_PxCR3() throws IOException {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInputStream() throws Exception {
        archive = Mockito.mock(SeekableByteChannel.class);
        entry = Mockito.mock(TarArchiveEntry.class);
        tarfile = new TarFile(archive);
        InputStream inputStream = tarfile.getInputStream(entry);
        assertNotNull(inputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntriesWithContent_Etee1() throws Exception {
        byte[] content = new byte[10];
        TarFile tarFile = new TarFile(content, "UTF-8");
        List<TarArchiveEntry> entries = tarFile.getEntries();
        assertNotNull(entries);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntriesWithArchive_IAXR3() throws IOException {
        File archive = new File("archive.tar");
        TarFile tarFile = new TarFile(archive, true);
        List<TarArchiveEntry> entries = tarFile.getEntries();
        assertNotNull(entries);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntriesWithContentAndLenient_qtYj6() throws IOException {
        byte[] content = new byte[10];
        TarFile tarFile = new TarFile(content, true);
        List<TarArchiveEntry> entries = tarFile.getEntries();
        assertNotNull(entries);
    }
}