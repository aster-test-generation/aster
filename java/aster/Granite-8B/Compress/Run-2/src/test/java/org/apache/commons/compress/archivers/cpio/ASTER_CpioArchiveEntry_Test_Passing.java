/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum3_zglP2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum8_feKz7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime3_FqDU2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime8_pgDZ7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignmentBoundary2_AmzG1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10L);
        assertEquals(4, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignmentBoundary3_ANZP2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(4, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetName3_jvBk2() {
		CpioArchiveEntry entry = new CpioArchiveEntry("name");
		assertEquals("name", entry.getName());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetName7_yQlF6() {
		CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
		assertEquals("name", entry.getName());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj3_CDup2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj8_Wgsb7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals(0L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDeviceMin3_AHpX2() {
		CpioArchiveEntry entry = new CpioArchiveEntry("name");
		assertEquals(0, entry.getRemoteDeviceMin());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID3_KGGu2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID8_edSY7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat_nsHD0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat2_FJqZ1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 1L);
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat3_HmCo2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals((short)1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat7_vBYS6() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 1L);
        assertEquals((short)1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDeviceMin3_RmtS2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDeviceMin8_Lbhv7() {
        String name = "name";
        long size = 0L;
        CpioArchiveEntry entry = new CpioArchiveEntry(name, size);
        assertEquals(0, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize3_vXaz2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(110, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize7_wyNd6() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 10L);
        assertEquals(110, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize2_DsFU2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        entry.setSize(0);
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize7_FeIt7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0);
        entry.setSize(0);
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDataPadCount_withNonZeroFormat_returnsNonZeroValue_avhD1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        int result = entry.getDataPadCount();
        assertFalse(result > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount3_BrOE2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(1, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_LziA2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_DnBr7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 1L);
        assertEquals(1, entry.getNumberOfLinks());
}
}