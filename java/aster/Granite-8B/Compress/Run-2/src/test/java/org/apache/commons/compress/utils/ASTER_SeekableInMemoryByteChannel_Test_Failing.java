/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithNegativeSize_Meuw0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(-1);
    assertEquals(result, channel);
    assertEquals(channel.size(), 10);
    assertEquals(channel.position(), 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeGreaterThanIntMax_lXOE1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(Integer.MAX_VALUE + 1L);
    assertEquals(result, channel);
    assertEquals(channel.size(), Integer.MAX_VALUE + 1);
    assertEquals(channel.position(), Integer.MAX_VALUE + 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeLessThanCurrentSize_FKwJ2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(result, channel);
    assertEquals(channel.size(), 5);
    assertEquals(channel.position(), 5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeEqualToCurrentSize_yHpv3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(10);
    assertEquals(result, channel);
    assertEquals(channel.size(), 10);
    assertEquals(channel.position(), 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionAfterTruncating_hhxH7() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        channel.truncate(5);
        assertEquals(5, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithNegativeSize_zRuU3() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(-10);
        assertEquals(0, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithNullArray_VMnT4() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(null);
        assertEquals(0, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithNegativeSize_Meuw0_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(-1);
    assertEquals(result, channel);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithNegativeSize_Meuw0_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(-1);
    assertEquals(channel.size(), 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithNegativeSize_Meuw0_3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(-1);
    assertEquals(channel.position(), 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeGreaterThanIntMax_lXOE1_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(Integer.MAX_VALUE + 1L);
    assertEquals(result, channel);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeGreaterThanIntMax_lXOE1_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(Integer.MAX_VALUE + 1L);
    assertEquals(channel.size(), Integer.MAX_VALUE + 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeGreaterThanIntMax_lXOE1_3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(Integer.MAX_VALUE + 1L);
    assertEquals(channel.position(), Integer.MAX_VALUE + 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeLessThanCurrentSize_FKwJ2_3_fid2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(channel.position(), 5);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeEqualToCurrentSize_yHpv3_3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(10);
    assertEquals(channel.position(), 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithBufferLargerThanRemainingSpace_KHlR2_LXgO0() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer b = ByteBuffer.allocate(15);
        b.put("hello world".getBytes());
        b.flip();
        assertEquals(10, channel.write(b));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithBufferLargerThanRemainingSpaceAndResize_VlrY3_EwEM0() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer b = ByteBuffer.allocate(20);
        b.put("hello world".getBytes());
        b.flip();
        assertEquals(15, channel.write(b));
    }
}