/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Failing {
    private Pack200CompressorInputStream pack200CompressorInputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMark_UYEy1() {
        pack200CompressorInputStream.mark(1024);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMatchesWithSignature_aaYv0() {
		byte[] signature = { (byte) 0xCA, (byte) 0xFE, (byte) 0xB0, (byte) 0x0B };
		boolean result = Pack200CompressorInputStream.matches(signature, signature.length);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead2_uttB1() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""));
        int actual = pack200CompressorInputStream.read();
        assertEquals(0, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead4_Ndca3() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""), Pack200Strategy.IN_MEMORY, null);
        int actual = pack200CompressorInputStream.read();
        assertEquals(0, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead7_UJsn6() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""), Pack200Strategy.IN_MEMORY);
        int actual = pack200CompressorInputStream.read();
        assertEquals(0, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_lEuy0() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.jar"));
        byte[] b = new byte[1024];
        int off = 0;
        int count = 1024;
        int actual = pack200CompressorInputStream.read(b, off, count);
        assertEquals(1024, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead2_fSTa1() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.jar"));
        byte[] b = new byte[1024];
        int actual = pack200CompressorInputStream.read(b);
        assertEquals(1024, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable_SagS0() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("input.jar"), Pack200Strategy.IN_MEMORY, null);
        int available = pack200CompressorInputStream.available();
        assertEquals(0, available);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarkSupported1_PFmR1_owsQ0() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = null;
        try {
            pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""));
            boolean markSupported = pack200CompressorInputStream.markSupported();
            assertTrue(markSupported);
        } finally {
            if (pack200CompressorInputStream != null) {
                pack200CompressorInputStream.close();
            }
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarkSupported6_jHyj6_kINj0() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""), Pack200Strategy.IN_MEMORY);
        boolean markSupported = pack200CompressorInputStream.markSupported();
        assertTrue(markSupported);
    }
}