/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ExceptionsAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEntries_MtKg1_1() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        List<ClassFileEntry> entries = classConstantPool.entries();
        assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEntries_MtKg1_2() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        List<ClassFileEntry> entries = classConstantPool.entries();
        assertTrue(entries.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet_WIqY3() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int index = 0;
        ClassFileEntry entry = classConstantPool.get(index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddNestedEntries_aMMn4() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        classConstantPool.addNestedEntries();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_NBsI7() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int size = classConstantPool.size();
        assertEquals(0, size);
    }
}