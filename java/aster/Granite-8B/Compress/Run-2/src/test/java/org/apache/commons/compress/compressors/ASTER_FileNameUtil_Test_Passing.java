/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFileNameUtil_getUncompressedFilename_tKBT0() throws Exception {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "txt");
        uncompressSuffix.put("jar", "class");
        String defaultExtension = "txt";
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, defaultExtension);
        String fileName = "example.zip";
        String expected = "example.txt";
        String actual = fileNameUtil.getUncompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename_eZtk0() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "test.txt";
        boolean result = fileNameUtil.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename2_swRd1() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "test.txt.gz";
        boolean result = fileNameUtil.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename3_moAm2() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "test.txt.zip";
        boolean result = fileNameUtil.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename4_CAyL3() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "test.txt.tar";
        boolean result = fileNameUtil.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename5_qlHz4() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "test.txt.tar.gz";
        boolean result = fileNameUtil.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename6_xhiR5() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "test.txt.tar.bz2";
        boolean result = fileNameUtil.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename7_NFuX6() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "test.txt.tar.xz";
        boolean result = fileNameUtil.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename8_FAik7() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "test.txt.tar.zst";
        boolean result = fileNameUtil.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename9_cZNY8() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "test.txt.tar.lz4";
        boolean result = fileNameUtil.isCompressedFilename(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename17_Eqth16() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_smAS0() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "example.txt";
        String expected = "example.txt";
        String actual = fileNameUtil.getCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_tGTi1() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "example.tar.gz";
        String expected = "example.tar.gz";
        String actual = fileNameUtil.getCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_FZks2() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "example.tar.gz.zip";
        String expected = "example.tar.gz.zip";
        String actual = fileNameUtil.getCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_Sztq3() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "example.tar.gz.zip.7z";
        String expected = "example.tar.gz.zip.7z";
        String actual = fileNameUtil.getCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
}