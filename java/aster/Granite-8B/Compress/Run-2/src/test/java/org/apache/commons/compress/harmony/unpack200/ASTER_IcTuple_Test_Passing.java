/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IcTuple_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOuterClassIndex_mCXu0() {
		IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
		int result = icTuple.outerClassIndex();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOuterClassIndexWithNullC_XrUG1() {
		IcTuple icTuple = new IcTuple(null, 0, "C2", "N", 0, 0, 0, 0);
		int result = icTuple.outerClassIndex();
		assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOuterClassIndexWithEmptyC_viTf2() {
		IcTuple icTuple = new IcTuple("", 0, "C2", "N", 0, 0, 0, 0);
		int result = icTuple.outerClassIndex();
		assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOuterClassIndexWithNullC2_fqel3() {
		IcTuple icTuple = new IcTuple("C", 0, null, "N", 0, 0, 0, 0);
		int result = icTuple.outerClassIndex();
		assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOuterClassIndexWithEmptyC2_KUHG4() {
		IcTuple icTuple = new IcTuple("C", 0, "", "N", 0, 0, 0, 0);
		int result = icTuple.outerClassIndex();
		assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOuterClassIndexWithNullN_ccDX5() {
		IcTuple icTuple = new IcTuple("C", 0, "C2", null, 0, 0, 0, 0);
		int result = icTuple.outerClassIndex();
		assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOuterClassIndexWithEmptyN_cUYD6() {
		IcTuple icTuple = new IcTuple("C", 0, "C2", "", 0, 0, 0, 0);
		int result = icTuple.outerClassIndex();
		assertEquals(-1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterIsAnonymous_tINk0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.outerIsAnonymous();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNestedExplicitFlagSet1_yOJJ0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.nestedExplicitFlagSet();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNestedExplicitFlagSet2_nPRX1() {
        IcTuple icTuple = new IcTuple("C", 2, "C2", "N", 2, 2, 2, 2);
        boolean result = icTuple.nestedExplicitFlagSet();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameIndex_MrNv0() {
        IcTuple icTuple = new IcTuple("class1", 1, "class2", "method1", 1, 1, 1, 1);
        int result = icTuple.simpleClassNameIndex();
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_tyMo0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        assertEquals(17, icTuple.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicted_yXKH0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.predicted();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicted2_nhCi1() {
        IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.predicted();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicted3_Ikve2() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 1, 1, 1);
        boolean result = icTuple.predicted();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAnonymous_jgMv0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.isAnonymous();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNullSafeEquals_RAIT0() {
		IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
		boolean result = icTuple.nullSafeEquals("stringOne", "stringTwo");
		Assertions.assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNullSafeEqualsWithNullStringOne_Tsra1() {
		IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
		boolean result = icTuple.nullSafeEquals(null, "stringTwo");
		Assertions.assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNullSafeEqualsWithNullStringTwo_EybI2() {
		IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
		boolean result = icTuple.nullSafeEquals("stringOne", null);
		Assertions.assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_dQVf0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.equals(null);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClassObject_wiGg1() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.equals("String");
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_BARp2() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.equals(icTuple);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentValues_bOGJ3() {
        IcTuple icTuple1 = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        IcTuple icTuple2 = new IcTuple("C", 2, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple1.equals(icTuple2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameValues_pPoX4() {
        IcTuple icTuple1 = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        IcTuple icTuple2 = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple1.equals(icTuple2);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullValues_oZoD5() {
        IcTuple icTuple1 = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        IcTuple icTuple2 = new IcTuple(null, 0, null, null, 0, 0, 0, 0);
        boolean result = icTuple1.equals(icTuple2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassName_UWXq0() {
        IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
        String actual = icTuple.simpleClassName();
        String expected = "N";
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameWithNullC_vpJx1() {
        IcTuple icTuple = new IcTuple(null, 0, "C2", "N", 0, 0, 0, 0);
        String actual = icTuple.simpleClassName();
        String expected = "N";
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameWithEmptyC_juXn2() {
        IcTuple icTuple = new IcTuple("", 0, "C2", "N", 0, 0, 0, 0);
        String actual = icTuple.simpleClassName();
        String expected = "N";
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameWithNullC2_ihPX3() {
        IcTuple icTuple = new IcTuple("C", 0, null, "N", 0, 0, 0, 0);
        String actual = icTuple.simpleClassName();
        String expected = "N";
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameWithEmptyC2_oAuO4() {
        IcTuple icTuple = new IcTuple("C", 0, "", "N", 0, 0, 0, 0);
        String actual = icTuple.simpleClassName();
        String expected = "N";
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameWithNullN_oKTp5() {
        IcTuple icTuple = new IcTuple("C", 0, "C2", null, 0, 0, 0, 0);
        String actual = icTuple.simpleClassName();
        String expected = "C2";
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameWithEmptyN_EhWo6() {
        IcTuple icTuple = new IcTuple("C", 0, "C2", "", 0, 0, 0, 0);
        String actual = icTuple.simpleClassName();
        String expected = "C2";
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMember_gZiN0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.isMember();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetC_yCYS0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String actualC = icTuple.getC();
        String expectedC = "C";
        assertEquals(expectedC, actualC);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_EDwH0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        assertEquals("IcTuple (C in C2)", icTuple.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterClassString_LuSP0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String result = icTuple.outerClassString();
        assertEquals("C.N", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterClassStringWithNullValues_KKuT1() {
        IcTuple icTuple = new IcTuple(null, 0, null, null, 0, 0, 0, 0);
        String result = icTuple.outerClassString();
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterClassStringWithEmptyValues_ohze2() {
        IcTuple icTuple = new IcTuple("", 0, "", "", 0, 0, 0, 0);
        String result = icTuple.outerClassString();
        assertEquals("", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterClassStringWithWhitespaceValues_hMKZ3() {
        IcTuple icTuple = new IcTuple(" ", 0, " ", " ", 0, 0, 0, 0);
        String result = icTuple.outerClassString();
        assertEquals(" . ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetN_aBtL0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String actual = icTuple.getN();
        assertEquals("N", actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testThisClassIndex_FSLz0() {
        IcTuple icTuple = new IcTuple("class1", 1, "class2", "method1", 0, 1, 2, 3);
        int result = icTuple.thisClassIndex();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testThisClassIndex2_KrKn1() {
        IcTuple icTuple = new IcTuple("class1", 1, "class2", "method1", 1, 2, 3, 4);
        int result = icTuple.thisClassIndex();
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetF_pQDQ0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        assertEquals(1, icTuple.getF());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTupleIndex_cZuE0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        int result = icTuple.getTupleIndex();
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollar1_PMHv0() {
        IcTuple icTuple = new IcTuple("com.example.MyClass", 1, "com.example.MyClass2", "myMethod", 0, 1, 2, 3);
        String[] result = icTuple.innerBreakAtDollar("com.example.MyClass$MyInnerClass");
        assert result.length == 2;
        assert result[0].equals("com.example.MyClass");
        assert result[1].equals("MyInnerClass");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollar2_Yjsq1() {
        IcTuple icTuple = new IcTuple("com.example.MyClass", 1, "com.example.MyClass2", "myMethod", 0, 1, 2, 3);
        String[] result = icTuple.innerBreakAtDollar("com.example.MyClass$MyInnerClass$MyInnerInnerClass");
        assert result.length == 3;
        assert result[0].equals("com.example.MyClass");
        assert result[1].equals("MyInnerClass");
        assert result[2].equals("MyInnerInnerClass");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollar3_utoI2() {
        IcTuple icTuple = new IcTuple("com.example.MyClass", 1, "com.example.MyClass2", "myMethod", 0, 1, 2, 3);
        String[] result = icTuple.innerBreakAtDollar("com.example.MyClass");
        assert result.length == 1;
        assert result[0].equals("com.example.MyClass");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollar4_YTbf3() {
        IcTuple icTuple = new IcTuple("com.example.MyClass", 1, "com.example.MyClass2", "myMethod", 0, 1, 2, 3);
        String[] result = icTuple.innerBreakAtDollar("com.example.MyClass$");
        assert result.length == 2;
        assert result[0].equals("com.example.MyClass");
        assert result[1].equals("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testThisClassString_boGu0() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 5);
        assertEquals("C", icTuple.thisClassString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testThisClassString2_zxpq1() {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 5);
        assertEquals("C2$N", icTuple.thisClassString());
    }
}