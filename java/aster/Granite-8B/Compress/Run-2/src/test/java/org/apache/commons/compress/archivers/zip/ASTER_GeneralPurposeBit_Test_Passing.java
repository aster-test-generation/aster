/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Passing {
	{
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSlidingDictionarySize_wRzn0() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        int slidingDictionarySize = generalPurposeBit.getSlidingDictionarySize();
        assertEquals(0, slidingDictionarySize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithGeneralPurposeBitObject_HbJV0() throws Exception {
        GeneralPurposeBit g1 = new GeneralPurposeBit();
        GeneralPurposeBit g2 = new GeneralPurposeBit();
        assertTrue(g1.equals(g2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_SbpT5() throws Exception {
        GeneralPurposeBit g1 = new GeneralPurposeBit();
        assertFalse(g1.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClassObject_NolS6() throws Exception {
        GeneralPurposeBit g1 = new GeneralPurposeBit();
        String s = "test";
        assertFalse(g1.equals(s));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_GHqG0_5() throws Exception {
    byte[] data = new byte[4];
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_GHqG0_6() throws Exception {
    byte[] data = new byte[4];
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffset_MDwv1_5() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffset_MDwv1_6() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffsetAndDataDescriptorFlag_LvAQ2_5() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    data[offset] = (byte) 0x02;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffsetAndDataDescriptorFlag_LvAQ2_6() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    data[offset] = (byte) 0x02;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffsetAndUTF8Flag_gkyc3_5() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    data[offset] = (byte) 0x08;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffsetAndUTF8Flag_gkyc3_6() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    data[offset] = (byte) 0x08;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffsetAndStrongEncryptionFlag_HRRj4_5() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    data[offset] = (byte) 0x20;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffsetAndStrongEncryptionFlag_HRRj4_6() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    data[offset] = (byte) 0x20;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffsetAndEncryptionFlag_tKtE5_5() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    data[offset] = (byte) 0x40;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffsetAndEncryptionFlag_tKtE5_6() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    data[offset] = (byte) 0x40;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffsetAndSlidingDictionarySizeFlag_OQCX6_5() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    data[offset] = (byte) 0x80;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(8192, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffsetAndSlidingDictionarySizeFlag_OQCX6_6() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    data[offset] = (byte) 0x80;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_PJFP0() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] result = new byte[2];
        generalPurposeBit.encode(result, 0);
        assertArrayEquals(new byte[]{0, 0}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUsesDataDescriptorDefault_AVaT3() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        assertFalse(generalPurposeBit.usesDataDescriptor());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_KjwB0_1() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 0);
        assertEquals(0, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_KjwB0_2() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 0);
        assertEquals(0, buf[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_KjwB0_3() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 0);
        assertEquals(0, buf[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_KjwB0_4() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 0);
        assertEquals(0, buf[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_UoHn1_1() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 1);
        assertEquals(0, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_UoHn1_2() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 1);
        assertEquals(0, buf[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_UoHn1_3() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 1);
        assertEquals(0, buf[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_UoHn1_4() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 1);
        assertEquals(0, buf[3]);}
}