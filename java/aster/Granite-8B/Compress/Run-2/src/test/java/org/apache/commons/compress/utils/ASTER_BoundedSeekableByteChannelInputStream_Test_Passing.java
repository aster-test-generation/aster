/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BoundedSeekableByteChannelInputStream_Test_Passing {
    private SeekableByteChannel channel;
    private BoundedSeekableByteChannelInputStream boundedSeekableByteChannelInputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_QZyF1_1() throws IOException {
        ByteBuffer buf = ByteBuffer.allocate(10);
        int read = boundedSeekableByteChannelInputStream.read(0, buf);
        assertEquals(10, read);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_QZyF1_2() throws IOException {
        ByteBuffer buf = ByteBuffer.allocate(10);
        int read = boundedSeekableByteChannelInputStream.read(0, buf);
        assertTrue(buf.position() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadNegativePosition_QwQv3() throws IOException {
        ByteBuffer buf = ByteBuffer.allocate(10);
        try {
            boundedSeekableByteChannelInputStream.read(-1, buf);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadNullBuffer_lpAg4() throws IOException {
        try {
            boundedSeekableByteChannelInputStream.read(0, null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
}