/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveUtil_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCalculateChecksum_wZez0() {
        byte[] buffer = new byte[100];
        int expectedChecksum = 0;
        for (int i = 0; i < 256; i++) {
            expectedChecksum += DumpArchiveUtil.convert32(buffer, 4 * i);
        }
        int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
        assertEquals(expectedChecksum - (actualChecksum - DumpArchiveUtil.convert32(buffer, 28)), actualChecksum);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCalculateChecksumWithEmptyBuffer_QiqQ1() {
        byte[] buffer = new byte[0];
        int actualChecksum = DumpArchiveUtil.calculateChecksum(buffer);
        assertEquals(DumpArchiveConstants.CHECKSUM, actualChecksum);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert64_JHDF0() {
        byte[] buffer = new byte[8];
        buffer[0] = 0;
        buffer[1] = 0;
        buffer[2] = 0;
        buffer[3] = 0;
        buffer[4] = 0;
        buffer[5] = 0;
        buffer[6] = 0;
        buffer[7] = 1;
        long result = DumpArchiveUtil.convert64(buffer, 0);
        assertEquals(1L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testConvert32_knqC0() {
		byte[] buffer = new byte[4];
		buffer[0] = 0x01;
		buffer[1] = 0x02;
		buffer[2] = 0x03;
		buffer[3] = 0x04;
		int offset = 0;
		int result = DumpArchiveUtil.convert32(buffer, offset);
		assertEquals(16909060, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyWithValidMagicNumberAndValidChecksum_GoSy3() {
        byte[] buffer = new byte[32];
        buffer[24] = (byte) 0xFF;
        buffer[25] = (byte) 0xFF;
        buffer[26] = (byte) 0xFF;
        buffer[27] = (byte) 0xFF;
        buffer[28] = (byte) 0x01;
        buffer[29] = (byte) 0x02;
        buffer[30] = (byte) 0x03;
        buffer[31] = (byte) 0x04;
        assertTrue(DumpArchiveUtil.verify(buffer));
    }
}