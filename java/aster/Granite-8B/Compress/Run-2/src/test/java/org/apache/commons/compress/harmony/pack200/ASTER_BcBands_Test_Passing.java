/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;

import org.apache.commons.compress.harmony.unpack200.CpBands;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPLong;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPString;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.objectweb.asm.Label;

import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BcBands_Test_Passing {
private int byteCodeOffset;
private IntList bcShort = new IntList();
private IntList bcLocal = new IntList();
private static int IINC = 132;
private IntList bcByte = new IntList();
private IntList bcCodes = new IntList();
private static int WIDE = 196;
@Mock
    private CpBands cpBands;
@Mock
    private Segment segment;
@Mock
    private BcBands bcbands;
private List<CPClass> bcClassRef = new ArrayList<>();
private static int MULTIANEWARRAY = 197;
@Mock
    private CpBands mockCpBands;
@Mock
    private Segment mockSegment;
private IntList bciRenumbering = new IntList();
private IntList bcLabelRelativeOffsets = new IntList();
private Map<Label, Integer> labelsToOffsets = new HashMap<>();
private static int endMarker = 255;
private int renumberedOffset;
private List bcLabel = new ArrayList();
@Mock
    private Label label;
private String currentNewClass;
@Mock
    private CpBands cpBandsMock;
@Mock
    private IntList bcCodesMock;
private List<CPLong> bcLongRef = new ArrayList<>();
private List<CPString> bcStringRef = new ArrayList<>();
private List<CPFloat> bcFloatRef = new ArrayList<>();
private List<CPInt> bcIntref = new ArrayList<>();
private List<CPDouble> bcDoubleRef = new ArrayList<>();
@Mock
    private CPConstant cpConstantMock;
@Mock
    private CPInt cpIntMock;
@Mock
    private CPFloat cpFloatMock;
@Mock
    private CPLong cpLongMock;
@Mock
    private CPDouble cpDoubleMock;
@Mock
    private CPString cpStringMock;
@Mock
    private CPClass cpClassMock;
private IntList bcCaseValue = new IntList();
private static int TABLESWITCH = 170;
private IntList bcCaseCount = new IntList();
private List<CPMethodOrField> bcIMethodRef = new ArrayList<>();
private List bcSuperMethod = new ArrayList<>();
private List bcSuperField = new ArrayList<>();
private List<CPMethodOrField> bcMethodRef = new ArrayList<>();
private List bcThisMethod = new ArrayList<>();
private List bcInitRef = new ArrayList<>();
private List<CPMethodOrField> bcFieldRef = new ArrayList<>();
private List bcThisField = new ArrayList<>();
@Mock
    private OutputStream out;
@Mock
    private PackingUtils packingUtils;
@Mock
    private Codec codec;
@Mock
private String currentClass;
@Mock
private static int LOOKUPSWITCH = 171;
@Mock
    private List<CPMethodOrField> bcFieldRefMock;
@Mock
    private List bcThisFieldMock;
@Mock
    private String currentClassMock;
}