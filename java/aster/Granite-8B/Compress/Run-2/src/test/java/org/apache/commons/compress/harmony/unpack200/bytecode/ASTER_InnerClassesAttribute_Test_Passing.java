/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.apache.commons.compress.harmony.pack200.CPClass;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InnerClassesAttribute_Test_Passing {
    private CPClass innerClass;
@Mock
    private CPClass outerClass;
@Mock
    private CPUTF8 innerName;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_sQNu0() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
        boolean result = innerClassesAttribute.equals(innerClassesAttribute);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_JyIw1() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
        boolean result = innerClassesAttribute.equals(null);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_oRFw2() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
        boolean result = innerClassesAttribute.equals(new Object());
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_lnWA3() throws Exception {
        InnerClassesAttribute innerClassesAttribute1 = new InnerClassesAttribute("name1");
        InnerClassesAttribute innerClassesAttribute2 = new InnerClassesAttribute("name2");
        boolean result = innerClassesAttribute1.equals(innerClassesAttribute2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameName_YrNo4() throws Exception {
        InnerClassesAttribute innerClassesAttribute1 = new InnerClassesAttribute("name");
        InnerClassesAttribute innerClassesAttribute2 = new InnerClassesAttribute("name");
        boolean result = innerClassesAttribute1.equals(innerClassesAttribute2);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_CAsj0() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("exampleName");
        assertEquals("InnerClasses: exampleName", innerClassesAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_KpQa0() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("exampleName");
        ClassFileEntry[] nestedClassFileEntries = innerClassesAttribute.getNestedClassFileEntries();
        assertEquals(0, nestedClassFileEntries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerClassesAttributeGetLength_FHek0() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
        int length = innerClassesAttribute.getLength();
        assertEquals(14, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDoWrite_PBId0() throws IOException {
		InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
		DataOutputStream dos = new DataOutputStream(System.out);
		innerClassesAttribute.doWrite(dos);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOf_MVjK0() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_Rwxm2() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_hcOF0() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
        int expected = 1;
        int actual = innerClassesAttribute.hashCode();
        assertEquals(expected, actual);
    }
}