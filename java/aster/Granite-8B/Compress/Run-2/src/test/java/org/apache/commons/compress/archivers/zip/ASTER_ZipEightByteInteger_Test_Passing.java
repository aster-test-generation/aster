/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithZipEightByteInteger_FUZU0() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        assertTrue(zipEightByteInteger1.equals(zipEightByteInteger2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentValues_oyYq1() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 2}, 0);
        assertFalse(zipEightByteInteger1.equals(zipEightByteInteger2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClasses_cYAb2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        assertFalse(zipEightByteInteger.equals(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_rdPe3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        assertFalse(zipEightByteInteger.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_TPaM0() {
        byte[] bytes = new byte[8];
        int offset = 0;
        long expectedValue = 0L;
        long actualValue = ZipEightByteInteger.getLongValue(bytes, offset);
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_oLwW0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertEquals("ZipEightByteInteger value: 578437695752307201", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBigInteger_Byfp1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(12345678));
        assertEquals("ZipEightByteInteger value: 12345678", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLong_MzNF2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(12345678L);
        assertEquals("ZipEightByteInteger value: 12345678", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithByteArray_ylRH3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
        assertEquals("ZipEightByteInteger value: 578437695752307201", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_vBqg0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        BigInteger expectedValue = BigInteger.ZERO;
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_MhMD1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 0, 0, 0, 0, 0, 0, 0}, 0);
        BigInteger expectedValue = BigInteger.ONE;
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_Zero_rftv1() {
    byte[] bytes = new byte[8];
    long expected = 0;
    long actual = ZipEightByteInteger.getLongValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_Negative_PEOG2() {
    byte[] bytes = new byte[8];
    bytes[0] = (byte) 0xFF;
    bytes[1] = (byte) 0xFF;
    bytes[2] = (byte) 0xFF;
    bytes[3] = (byte) 0xFF;
    bytes[4] = (byte) 0xFF;
    bytes[5] = (byte) 0xFF;
    bytes[6] = (byte) 0xFF;
    bytes[7] = (byte) 0xFF;
    long expected = -1;
    long actual = ZipEightByteInteger.getLongValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_CXSw0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        byte[] bytes = zipEightByteInteger.getBytes();
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromByteArray_vuNz3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{56, -86, 78, -106, -11, 115, -121, 57});
        byte[] bytes = zipEightByteInteger.getBytes();
        assertArrayEquals(new byte[]{56, -86, 78, -106, -11, 115, -121, 57}, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInt_kSxM0() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    bytes[7] = 8;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 0);
    BigInteger expected = new BigInteger("12345678");
    BigInteger actual = ZipEightByteInteger.getValue(bytes, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArray_ZVKX1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    bytes[7] = 8;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    BigInteger expected = new BigInteger("578437695752307201");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInvalidLength2_XeaQ7() {
    byte[] bytes = new byte[9];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue2_rniO1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("1"));
        long longValue = zipEightByteInteger.getLongValue();
        assertEquals(1, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue3_ixeC2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1L);
        long longValue = zipEightByteInteger.getLongValue();
        assertEquals(1, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesBigIntegerValue_VXAv0() {
    BigInteger value = new BigInteger("12345678901234567890");
    byte[] expected = {0, 0, 0, 0, 0, 0, 0, 0};
    byte[] actual = ZipEightByteInteger.getBytes(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesBigIntegerValueWithLeftmostBitSet_bkgy3() {
    BigInteger value = new BigInteger("9223372036854775808");
    byte[] expected = {-128, 0, 0, 0, 0, 0, 0, 0};
    byte[] actual = ZipEightByteInteger.getBytes(value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesBigIntegerValueWithZeroValue_DXEJ9() {
    BigInteger value = new BigInteger("0");
    byte[] expected = {0, 0, 0, 0, 0, 0, 0, 0};
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithByteArrayValue_JpYd2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{56, -46, 0, 0, 0, 0, 0, 0});
        byte[] expectedBytes = {56, -46, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expectedBytes, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetValue_EHFV0() {
    final byte[] bytes = new byte[9];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 0;
    bytes[8] = 0;
    assertEquals(BigInteger.ZERO, ZipEightByteInteger.getValue(bytes, 0));
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetValue2_JxlH1() {
    final byte[] bytes = new byte[9];
    bytes[0] = 1;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 0;
    bytes[8] = 0;
    assertEquals(BigInteger.ONE, ZipEightByteInteger.getValue(bytes, 0));
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetValue3_fCuT2() {
    final byte[] bytes = new byte[9];
    bytes[0] = -1;
    bytes[1] = -1;
    bytes[2] = -1;
    bytes[3] = -1;
    bytes[4] = -1;
    bytes[5] = -1;
    bytes[6] = -1;
    bytes[7] = -1;
    bytes[8] = -1;
    assertEquals(
        new BigInteger("18446744073709551615", 10), ZipEightByteInteger.getValue(bytes, 0));
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetValue7_GzDU6() {
    final byte[] bytes = new byte[9];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueLong_EZGT3_iIyi0() {
    long value = 12345678L;
    byte[] bytes = new byte[8];
    bytes[0] = (byte) (value & 0xFF);
    bytes[1] = (byte) ((value >> 8) & 0xFF);
    bytes[2] = (byte) ((value >> 16) & 0xFF);
    bytes[3] = (byte) ((value >> 24) & 0xFF);
    bytes[4] = (byte) ((value >> 32) & 0xFF);
    bytes[5] = (byte) ((value >> 40) & 0xFF);
    bytes[6] = (byte) ((value >> 48) & 0xFF);
    bytes[7] = (byte) ((value >> 56) & 0xFF);
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    BigInteger expected = BigInteger.valueOf(value);
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
}