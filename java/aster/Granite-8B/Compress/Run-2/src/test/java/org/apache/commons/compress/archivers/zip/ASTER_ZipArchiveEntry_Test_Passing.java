/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.apache.commons.compress.utils.ByteUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveEntry_Test_Passing {
private int versionRequired;
private ZipArchiveEntry ziparchiveentry;
private static int SHORT_SHIFT = 16;
@Mock
    private ZipArchiveEntry zipArchiveEntry;
@Mock
    private ZipArchiveEntry entry;
@Mock
    private Path inputPath;
@Mock
    private java.util.zip.ZipEntry zipEntry;
@Mock
private int rawFlag;
private long time = -1;
@Mock
private String name;
private byte[] rawName;
private int alignment;
ExtraFieldUtils extraFieldUtils;
private boolean isStreamContiguous;
private int versionMadeBy;
private boolean lastModifiedDateSet;
private static String ZIP_DIR_SEP = "/";
@Mock
    private FileTime fileTime;
private long diskNumberStart;
private static int SHORT_MASK = 0xFFFF;
@Mock
    private ExtraFieldParsingBehavior parsingBehavior;
@Mock
    private ZipExtraField[] localFields;
@Mock
    private ZipExtraField[] centralFields;
@Mock
    private List<ZipExtraField> mergedFields;
@Mock
    private List<ZipExtraField> localFieldsList;
@Mock
    private List<ZipExtraField> centralFieldsList;
@Mock
    private ZipExtraField l;
@Mock
    private ZipExtraField c;
@Mock
    private byte[] local;
@Mock
    private byte[] central;
@Mock
    private UnparseableExtraFieldData unparseableExtraFieldData;
@Mock
    private ZipExtraField findUnparseable;
@Mock
    private ZipExtraField findMatching;
ZipShort zipShort;
ZipExtraField ze;
private int method = ZipMethod.UNKNOWN_CODE;
@Mock
    private ZipExtraField mockZipExtraField;
@Mock
    private UnparseableExtraFieldData mockUnparseableExtraFieldData;
private int internalAttributes;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequired_VjWE0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        int versionRequired = zipArchiveEntry.getVersionRequired();
        assertEquals(0, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequiredWithString_lJTT3() {
        String name = "name";
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(name);
        int versionRequired = zipArchiveEntry.getVersionRequired();
        assertEquals(0, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequiredWithFile_kRqo4() {
        File inputFile = new File("input");
        String entryName = "entryName";
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, entryName);
        int versionRequired = zipArchiveEntry.getVersionRequired();
        assertEquals(0, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetGeneralPurposeBit() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Mock the GeneralPurposeBit object
        GeneralPurposeBit mockGeneralPurposeBit = mock(GeneralPurposeBit.class);
        // Set the mock object as the general purpose bit of the ZipArchiveEntry
        ziparchiveentry.setGeneralPurposeBit(mockGeneralPurposeBit);
        // Verify that the general purpose bit of the ZipArchiveEntry is set to the mock object
        verify(ziparchiveentry).setGeneralPurposeBit(mockGeneralPurposeBit);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternalAttributes_vLKG0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        long externalAttributes = zipArchiveEntry.getExternalAttributes();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() {
        ziparchiveentry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        when(ziparchiveentry.getName()).thenReturn("name");
        when(other.getName()).thenReturn("name");
        boolean result = ziparchiveentry.equals(other);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObject_WcbM0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        boolean result = zipArchiveEntry.equals(other);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_JNWo1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        boolean result = zipArchiveEntry.equals(null);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_VBms2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        Object obj = new Object();
        boolean result = zipArchiveEntry.equals(obj);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_OMCb3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        other.setName("differentName");
        boolean result = zipArchiveEntry.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentComment_EciG4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        other.setComment("differentComment");
        boolean result = zipArchiveEntry.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentLastModifiedTime_zOEs5() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        other.setLastModifiedTime(FileTime.fromMillis(1234567890L));
        boolean result = zipArchiveEntry.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentLastAccessTime_xtHz6() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        other.setLastAccessTime(FileTime.fromMillis(1234567890L));
        boolean result = zipArchiveEntry.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentCreationTime_crJP7() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        other.setCreationTime(FileTime.fromMillis(1234567890L));
        boolean result = zipArchiveEntry.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentInternalAttributes_FaGt9() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        other.setInternalAttributes(123);
        boolean result = zipArchiveEntry.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentPlatform_GQgN10() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        other.setPlatform(123);
        boolean result = zipArchiveEntry.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentExternalAttributes_SlhX11() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        other.setExternalAttributes(123);
        boolean result = zipArchiveEntry.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentMethod_kiPO12() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        other.setMethod(123);
        boolean result = zipArchiveEntry.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentSize_ghBM13() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        other.setSize(1234567890L);
        boolean result = zipArchiveEntry.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentCrc_HImE14() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipArchiveEntry other = new ZipArchiveEntry();
        other.setCrc(1234567890L);
        boolean result = zipArchiveEntry.equals(other);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_mbWY0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        Date lastModifiedDate = zipArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithString_Fzne3() {
        String name = null;
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(name);
        Date lastModifiedDate = zipArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithFile_RBgN4() {
        File inputFile = null;
        String entryName = null;
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, entryName);
        Date lastModifiedDate = zipArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveUnparseableExtraFieldData1_iEAo0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.removeUnparseableExtraFieldData();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInternalAttributes() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        // arrange
        int expectedInternalAttributes = 10;
        when(ziparchiveentry.getInternalAttributes()).thenReturn(expectedInternalAttributes);
        // act
        int actualInternalAttributes = ziparchiveentry.getInternalAttributes();
        // assert
        assertEquals(expectedInternalAttributes, actualInternalAttributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInternalAttributes_tXiJ0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        int result = zipArchiveEntry.getInternalAttributes();
        assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawFlag() throws Exception {
        rawFlag = 123; // Set the value of rawFlag
        ziparchiveentry = new ZipArchiveEntry(); // Create an instance of ZipArchiveEntry
        // Mock the getRawFlag method to return the value of rawFlag
        when(ziparchiveentry.getRawFlag()).thenReturn(rawFlag);
        // Assert that the getRawFlag method returns the expected value
        assertEquals(rawFlag, ziparchiveentry.getRawFlag());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawFlag_zUOs0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        int rawFlag = zipArchiveEntry.getRawFlag();
        assertEquals(0, rawFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawFlagWithString_QXcS4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("");
        int rawFlag = zipArchiveEntry.getRawFlag();
        assertEquals(0, rawFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawFlagWithFile_SONW5() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File(""), "");
        int rawFlag = zipArchiveEntry.getRawFlag();
        assertEquals(0, rawFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime_OYOi0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setCreationTime(time);
        assertEquals(time, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNullTime_YoUn1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setCreationTime(null);
        assertNull(entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNegativeTime_czcO2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        FileTime time = FileTime.fromMillis(-1);
        entry.setCreationTime(time);
        assertEquals(time, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithZeroTime_usSK3() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        FileTime time = FileTime.fromMillis(0);
        entry.setCreationTime(time);
        assertEquals(time, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithPositiveTime_DBfO4() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        FileTime time = FileTime.fromMillis(1);
        entry.setCreationTime(time);
        assertEquals(time, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithLargeTime_xJDZ5() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        FileTime time = FileTime.fromMillis(Long.MAX_VALUE);
        entry.setCreationTime(time);
        assertEquals(time, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithSmallTime_jhEa6() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        FileTime time = FileTime.fromMillis(Long.MIN_VALUE);
        entry.setCreationTime(time);
        assertEquals(time, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_iXqP0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime_RLiX0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime time = FileTime.fromMillis(0);
        entry.setCreationTime(time);
        assertEquals(time, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNull_TlmX1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setCreationTime(null);
        assertNull(entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNegativeMillis_VBrf2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime time = FileTime.fromMillis(-1);
        entry.setCreationTime(time);
        assertEquals(FileTime.fromMillis(0), entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithLargeMillis_BKKh3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime time = FileTime.fromMillis(Long.MAX_VALUE);
        entry.setCreationTime(time);
        assertEquals(FileTime.fromMillis(Long.MAX_VALUE), entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNull_pFnb1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setCreationTime(null);
        assertEquals(null, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithPrivateMethod_ANNX2_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime time = FileTime.fromMillis(0);
        entry.setCreationTime(time);
        assertEquals(true, entry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID) != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithPrivateMethod_ANNX2_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime time = FileTime.fromMillis(0);
        entry.setCreationTime(time);
        assertEquals(true, entry.getExtraField(X000A_NTFS.HEADER_ID) != null);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStart_SEvs0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDiskNumberStart(1L);
    assertEquals(1L, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStartWithNegativeNumber_IdGV1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDiskNumberStart(-1L);
    assertEquals(-1L, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStartWithZero_Diue2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDiskNumberStart(0L);
    assertEquals(0L, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStartWithMaximumValue_fcPt3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDiskNumberStart(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStartWithMinimumValue_uvyC4() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDiskNumberStart(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_OGPF0_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setName("newName", "newRawName".getBytes());
        assertEquals("newName", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_OGPF0_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setName("newName", "newRawName".getBytes());
        assertArrayEquals("newRawName".getBytes(), entry.getRawName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignment() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Mock the alignment value
        when(ziparchiveentry.getAlignment()).thenReturn(10);
        // Assert that the alignment value returned by the getAlignment method is equal to 10
        assertEquals(10, ziparchiveentry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignment_LBNZ0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        int alignment = zipArchiveEntry.getAlignment();
        assertEquals(0, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentWithFile_BEvL4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("file"), "name");
        int alignment = zipArchiveEntry.getAlignment();
        assertEquals(0, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_MUOq0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_IIvH0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithEntry_nNAS1() throws ZipException {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(entry);
        zipArchiveEntry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithZipEntry_FKEw3() throws ZipException {
        java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entryName");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(entry);
        zipArchiveEntry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithString_kqfQ4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        zipArchiveEntry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithFile_Fnit5() {
        File inputFile = new File("file");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
        zipArchiveEntry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithString_OrgE3() {
        String name = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(name);
        entry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithFile_dBtr4() {
        File inputFile = new File("path/to/file");
        String entryName = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
        entry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtra_iSsk0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setExtra(new byte[0]);
    entry.setExtra();
    entry.setExtra(new byte[1]);
    entry.setExtra();
    entry.setExtra(new byte[2]);
    entry.setExtra();
    entry.setExtra(new byte[3]);
    entry.setExtra();
    entry.setExtra(new byte[4]);
    entry.setExtra();
    entry.setExtra(new byte[5]);
    entry.setExtra();
    entry.setExtra(new byte[6]);
    entry.setExtra();
    entry.setExtra(new byte[7]);
    entry.setExtra();
    entry.setExtra(new byte[8]);
    entry.setExtra();
    entry.setExtra(new byte[9]);
    entry.setExtra();
    entry.setExtra(new byte[10]);
    entry.setExtra();
    entry.setExtra(new byte[11]);
    entry.setExtra();
    entry.setExtra(new byte[12]);
    entry.setExtra();
    entry.setExtra(new byte[13]);
    entry.setExtra();
    entry.setExtra(new byte[14]);
    entry.setExtra();
    entry.setExtra(new byte[15]);
    entry.setExtra();
    entry.setExtra(new byte[16]);
    entry.setExtra();
    entry.setExtra(new byte[17]);
    entry.setExtra();
    entry.setExtra(new byte[18]);
    entry.setExtra();
    entry.setExtra(new byte[19]);
    entry.setExtra();
    entry.setExtra(new byte[20]);
    entry.setExtra();
    entry.setExtra(new byte[21]);
    entry.setExtra();
    entry.setExtra(new byte[22]);
    entry.setExtra();
    entry.setExtra(new byte[23]);
    entry.setExtra();
    entry.setExtra(new byte[24]);
    entry.setExtra();
    entry.setExtra(new byte[25]);
    entry.setExtra();
    entry.setExtra(new byte[26]);
    entry.setExtra();
    entry.setExtra(new byte[27]);
    entry.setExtra();
    entry.setExtra(new byte[28]);
    entry.setExtra();
    entry.setExtra(new byte[29]);
    entry.setExtra();
    entry.setExtra(new byte[30]);
    entry.setExtra();
    entry.setExtra(new byte[31]);
    entry.setExtra();
    entry.setExtra(new byte[32]);
    entry.setExtra();
    entry.setExtra(new byte[33]);
    entry.setExtra();
    entry.setExtra(new byte[34]);
    entry.setExtra();
    entry.setExtra(new byte[35]);
    entry.setExtra();
    entry.setExtra(new byte[36]);
    entry.setExtra();
    entry.setExtra(new byte[37]);
    entry.setExtra();
    entry.setExtra(new byte[38]);
    entry.setExtra();
    entry.setExtra(new byte[39]);
    entry.setExtra();
    entry.setExtra(new byte[40]);
    entry.setExtra();
    entry.setExtra(new byte[41]);
    entry.setExtra();
    entry.setExtra(new byte[42]);
    entry.setExtra();
    entry.setExtra(new byte[43]);
    entry.setExtra();
    entry.setExtra(new byte[44]);
    entry.setExtra();
    entry.setExtra(new byte[45]);
    entry.setExtra();
    entry.setExtra(new byte[46]);
    entry.setExtra();
    entry.setExtra(new byte[47]);
    entry.setExtra();
    entry.setExtra(new byte[48]);
    entry.setExtra();
    entry.setExtra(new byte[49]);
    entry.setExtra();
    entry.setExtra(new byte[50]);
    entry.setExtra();
    entry.setExtra(new byte[51]);
    entry.setExtra();
    entry.setExtra(new byte[52]);
    entry.setExtra();
    entry.setExtra(new byte[53]);
    entry.setExtra();
    entry.setExtra(new byte[54]);
    entry.setExtra();
    entry.setExtra(new byte[55]);
    entry.setExtra();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_TKhI0() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("input.txt"), "entryName");
        entry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetDataOffset() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        // arrange
        long expectedDataOffset = 100L;
        // act
        ziparchiveentry.setDataOffset(expectedDataOffset);
        // assert
        assertEquals(expectedDataOffset, ziparchiveentry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setDataOffsetTest_XBPn0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setDataOffset(10L);
        assertEquals(10L, zipArchiveEntry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setDataOffsetTest2_mMqV1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setDataOffset(0L);
        assertEquals(0L, zipArchiveEntry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setDataOffsetTest3_Smah2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setDataOffset(-10L);
        assertEquals(-10L, zipArchiveEntry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setDataOffsetTest4_wBVp3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setDataOffset(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, zipArchiveEntry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setDataOffsetTest5_pbkd4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setDataOffset(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, zipArchiveEntry.getDataOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraFieldsWithNullFields_kYHJ0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setExtraFields(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraFieldsWithEmptyFields_iqCz1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    entry.setExtraFields(new ZipExtraField[0]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetExtraFieldsWithUnparseableExtraFieldData_aVFU2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    UnparseableExtraFieldData field = new UnparseableExtraFieldData();
    entry.setExtraFields(new ZipExtraField[]{field});
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnparseableExtraFieldData_IKpj0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        UnparseableExtraFieldData unparseableExtra = zipArchiveEntry.getUnparseableExtraFieldData();
        assertNotNull(unparseableExtra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetName() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Set up mock objects if needed
        // ziparchiveentry = Mockito.mock(ZipArchiveEntry.class);
        // Set up expected behavior
        // Mockito.when(ziparchiveentry.setName("newName")).thenReturn(null);
        // Call the method under test
        ziparchiveentry.setName("newName");
        // Assert the expected behavior
        // Mockito.verify(ziparchiveentry, Mockito.times(1)).setName("newName");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithNullName_ZRvh0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setName(null);
        assertNull(entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithValidName_tYIe1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setName("validName");
        assertEquals("validName", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithFatPlatformAndNoDirectorySeparator_CFtL2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setName("name");
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithFatPlatformAndDirectorySeparator_kCZV3() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setName("name/with/separator");
        assertEquals("name/with/separator", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // arrange
        long expectedSize = 100;
        // act
        ziparchiveentry.setSize(expectedSize);
        // assert
        assertEquals(expectedSize, ziparchiveentry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithNegativeSize_ShdC0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        try {
            entry.setSize(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid entry size", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithPositiveSize_NOjK1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        entry.setSize(100);
        assertEquals(100, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_JsCl0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        boolean result = entry.isStreamContiguous();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        ziparchiveentry = new ZipArchiveEntry("test.txt");
        // Mock the getName() method
        when(ziparchiveentry.getName()).thenReturn("test.txt");
        // Assert that the hashCode() method returns the expected value
        assertEquals(ziparchiveentry.getName().hashCode(), ziparchiveentry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPlatform() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Mock the setPlatform method
        doNothing().when(ziparchiveentry).setPlatform(anyInt());
        // Call the setPlatform method with a mock argument
        ziparchiveentry.setPlatform(1);
        // Verify that the setPlatform method was called with the expected argument
        verify(ziparchiveentry).setPlatform(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetVersionMadeBy() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        ziparchiveentry.setVersionMadeBy(versionMadeBy);
        assertEquals(versionMadeBy, ziparchiveentry.getVersionMadeBy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalHeaderOffset() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        long expectedLocalHeaderOffset = 10;
        doReturn(expectedLocalHeaderOffset).when(ziparchiveentry).getLocalHeaderOffset();
        // Act
        long actualLocalHeaderOffset = ziparchiveentry.getLocalHeaderOffset();
        // Assert
        assertEquals(expectedLocalHeaderOffset, actualLocalHeaderOffset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalHeaderOffset_PZiG0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        long localHeaderOffset = zipArchiveEntry.getLocalHeaderOffset();
        assertEquals(0, localHeaderOffset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalHeaderOffsetWithString_aeCS3() {
        String name = "name";
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(name);
        long localHeaderOffset = zipArchiveEntry.getLocalHeaderOffset();
        assertEquals(0, localHeaderOffset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalHeaderOffsetWithFile_czcC4() {
        File inputFile = new File("file");
        String entryName = "entryName";
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, entryName);
        long localHeaderOffset = zipArchiveEntry.getLocalHeaderOffset();
        assertEquals(0, localHeaderOffset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffset() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Set up the expected behavior of the setLocalHeaderOffset method
        doNothing().when(ziparchiveentry).setLocalHeaderOffset(anyLong());
        // Call the method under test
        ziparchiveentry.setLocalHeaderOffset(123L);
        // Verify that the method was called with the expected arguments
        verify(ziparchiveentry).setLocalHeaderOffset(123L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffset_fxaC0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setLocalHeaderOffset(100L);
        assertEquals(100L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithNegativeValue_zkTe1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setLocalHeaderOffset(-100L);
        assertEquals(-100L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithZeroValue_GAaK2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setLocalHeaderOffset(0L);
        assertEquals(0L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithMaxValue_OpuK3() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setLocalHeaderOffset(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithMinValue_pNMC4() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setLocalHeaderOffset(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetExternalAttributes() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        // Mock the setExternalAttributes method
        doNothing().when(ziparchiveentry).setExternalAttributes(anyLong());
        // Call the setExternalAttributes method with a mock value
        ziparchiveentry.setExternalAttributes(123456L);
        // Verify that the setExternalAttributes method was called with the expected value
        verify(ziparchiveentry, times(1)).setExternalAttributes(123456L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes_Lswn0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setExternalAttributes(0x12345678L);
        assertEquals(0x12345678L, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtra_gigW0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        byte[] b = new byte[10];
        entry.setCentralDirectoryExtra(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithNull_DhQJ1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setCentralDirectoryExtra(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithEmptyArray_yFso2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        byte[] b = new byte[0];
        entry.setCentralDirectoryExtra(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithNegativeLengthArray_pcRo3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        byte[] b = new byte[-1];
        entry.setCentralDirectoryExtra(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithLargeLengthArray_XopV4() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        byte[] b = new byte[Integer.MAX_VALUE];
        entry.setCentralDirectoryExtra(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithLargeNegativeLengthArray_DohD5() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        byte[] b = new byte[Integer.MIN_VALUE];
        entry.setCentralDirectoryExtra(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithByteArray_hJAm0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        byte[] extra = new byte[10];
        entry.setExtra(extra);
        assert entry.getExtra() == extra;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithNullByteArray_bMZD1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setExtra(null);
        assert entry.getExtra() == null;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetExtraFields_1() throws Exception {
		ziparchiveentry = new ZipArchiveEntry();
		// Mock the ZipExtraField objects
		ZipExtraField extraField1 = mock(ZipExtraField.class);
		ZipExtraField extraField2 = mock(ZipExtraField.class);
		// Set the extra fields on the ZipArchiveEntry object
		ziparchiveentry.addExtraField(extraField1);
		ziparchiveentry.addExtraField(extraField2);
		// Call the getExtraFields method with includeUnparseable set to true
		ZipExtraField[] extraFields = ziparchiveentry.getExtraFields(true);
		// Assert that the returned array contains both extra fields
		Assertions.assertEquals(2, extraFields.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetExtraFields_2() throws Exception {
		ziparchiveentry = new ZipArchiveEntry();
		// Mock the ZipExtraField objects
		ZipExtraField extraField1 = mock(ZipExtraField.class);
		ZipExtraField extraField2 = mock(ZipExtraField.class);
		// Set the extra fields on the ZipArchiveEntry object
		ziparchiveentry.addExtraField(extraField1);
		ziparchiveentry.addExtraField(extraField2);
		// Call the getExtraFields method with includeUnparseable set to true
		ZipExtraField[] extraFields = ziparchiveentry.getExtraFields(true);
		// Assert that the returned array contains both extra fields
		Assertions.assertTrue(Arrays.asList(extraFields).contains(extraField1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetExtraFields_3() throws Exception {
		ziparchiveentry = new ZipArchiveEntry();
		// Mock the ZipExtraField objects
		ZipExtraField extraField1 = mock(ZipExtraField.class);
		ZipExtraField extraField2 = mock(ZipExtraField.class);
		// Set the extra fields on the ZipArchiveEntry object
		ziparchiveentry.addExtraField(extraField1);
		ziparchiveentry.addExtraField(extraField2);
		// Call the getExtraFields method with includeUnparseable set to true
		ZipExtraField[] extraFields = ziparchiveentry.getExtraFields(true);
		// Assert that the returned array contains both extra fields
		Assertions.assertTrue(Arrays.asList(extraFields).contains(extraField2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields4_TvhM3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("");
        ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(true);
        assertNotNull(extraFields);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields5_MYsI4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File(""), "");
        ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(true);
        assertNotNull(extraFields);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullEntry_SOII0() {
        try {
            new ZipArchiveEntry((ZipArchiveEntry) null);
            fail("Expected ZipException");
        } catch (final ZipException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullEntryName_fMGq2() {
        try {
            new ZipArchiveEntry((java.util.zip.ZipEntry) null);
            fail("Expected ZipException");
        } catch (final ZipException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullFile_FbzR3() {
        try {
            new ZipArchiveEntry((File) null, "name");
            fail("Expected NullPointerException");
        } catch (final NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullEntryNameAndFile_lrbi4() {
        try {
            new ZipArchiveEntry((File) null, (String) null);
            fail("Expected NullPointerException");
        } catch (final NullPointerException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethod() {
        ziparchiveentry = new ZipArchiveEntry();
        // Arrange
        int expectedMethod = ZipMethod.UNKNOWN_CODE;
        // Act
        int actualMethod = ziparchiveentry.getMethod();
        // Assert
        assertEquals(expectedMethod, actualMethod);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethod_roqT0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        int method = entry.getMethod();
        assertEquals(0, method);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodWithString_JzuO3() {
        String name = "name";
        ZipArchiveEntry entry = new ZipArchiveEntry(name);
        int method = entry.getMethod();
        assertEquals(0, method);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodWithFile_GKIb4() {
        File inputFile = new File("file");
        String entryName = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
        int method = entry.getMethod();
        assertEquals(0, method);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNullExtraField_gcYs0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    ZipExtraField extraField = entry.getExtraField(null);
    Assertions.assertNull(extraField);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNonExistingExtraField_WGhL1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("test");
    ZipExtraField extraField = entry.getExtraField(new ZipShort((short) 1234));
    Assertions.assertNull(extraField);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetTime_WhenTimeSet_ReturnsTime() {
        lastModifiedDateSet = false;
        time = -1;
        // Set up the mock object
        time = 1234567890L;
        // Call the method under test
        long result = zipArchiveEntry.getTime();
        // Assert that the result is equal to the time set
        assertEquals(result, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTimeWithZipArchiveEntry_oOBU0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        long time = entry.getTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTimeWithString_RDUf3() {
        String name = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(name);
        long time = entry.getTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTimeWithFileAndString_yOzT4() {
        File inputFile = new File("input.txt");
        String entryName = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
        long time = entry.getTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTime_wOGW0() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("input.txt"), "entryName");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        ZipEntry result = entry.setLastModifiedTime(fileTime);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTimeWithString_IKPk3() {
        String name = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(name);
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        ZipEntry result = entry.setLastModifiedTime(fileTime);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTimeWithFile_mTOD4() {
        File inputFile = new File("input.txt");
        String entryName = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        ZipEntry result = entry.setLastModifiedTime(fileTime);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTime() throws Exception {
        // Set up the mock object
        FileTime fileTime = mock(FileTime.class);
        when(zipArchiveEntry.setLastAccessTime(fileTime)).thenReturn(zipArchiveEntry);
        // Call the method under test
        ZipEntry result = zipArchiveEntry.setLastAccessTime(fileTime);
        // Verify that the method was called correctly
        verify(zipArchiveEntry, times(1)).setLastAccessTime(fileTime);
        // Verify that the correct object was returned
        assertEquals(zipArchiveEntry, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTime_ovzx0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        FileTime fileTime = FileTime.fromMillis(0);
        ZipEntry zipEntry = zipArchiveEntry.setLastAccessTime(fileTime);
        assertNotNull(zipEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithFile_qaGl3() {
        File file = new File("file");
        String entryName = "entryName";
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(file, entryName);
        FileTime fileTime = FileTime.fromMillis(0);
        ZipEntry zipEntry = zipArchiveEntry.setLastAccessTime(fileTime);
        assertNotNull(zipEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeBy_AyVI0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        int versionMadeBy = entry.getVersionMadeBy();
        assertEquals(0, versionMadeBy);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionMadeByWithFile_PeqT4() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("file"), "name");
        int versionMadeBy = entry.getVersionMadeBy();
        assertEquals(0, versionMadeBy);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() {
        MockitoAnnotations.openMocks(this);
        when(zipArchiveEntry.getName()).thenReturn("testName");
        assertEquals("testName", zipArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEntryName_OmAG0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        assertEquals("entryName", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullInputFileAndEntryName_iual4() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("inputFile"), null);
        assertEquals(null, entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataExtra() throws Exception {
        // Set up mock behavior
        when(zipArchiveEntry.getExtra()).thenReturn(new byte[]{1, 2, 3});
        // Call the method under test
        byte[] localFileDataExtra = zipArchiveEntry.getLocalFileDataExtra();
        // Assert the expected result
        assertArrayEquals(new byte[]{1, 2, 3}, localFileDataExtra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataExtraWithZipArchiveEntry_ESKc0() throws ZipException {
        ZipArchiveEntry entry = new ZipArchiveEntry(new ZipArchiveEntry());
        byte[] result = entry.getLocalFileDataExtra();
        assertEquals(ByteUtils.EMPTY_BYTE_ARRAY, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataExtraWithPathAndStringAndLinkOptionArray_uJKq1() throws IOException {
        Path inputPath = null;
        String entryName = "entryName";
        LinkOption[] options = new LinkOption[0];
        ZipArchiveEntry entry = new ZipArchiveEntry(inputPath, entryName, options);
        byte[] result = entry.getLocalFileDataExtra();
        assertEquals(ByteUtils.EMPTY_BYTE_ARRAY, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataExtraWithZipEntry_tbXl2() throws ZipException {
        java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entryName");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(entry);
        byte[] result = zipArchiveEntry.getLocalFileDataExtra();
        assertEquals(ByteUtils.EMPTY_BYTE_ARRAY, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataExtraWithString_qwcV3() {
        String name = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(name);
        byte[] result = entry.getLocalFileDataExtra();
        assertEquals(ByteUtils.EMPTY_BYTE_ARRAY, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataExtraWithFileAndString_BIUZ4() {
        File inputFile = null;
        String entryName = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
        byte[] result = entry.getLocalFileDataExtra();
        assertEquals(ByteUtils.EMPTY_BYTE_ARRAY, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory_ydEG0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithNonDirectorySeparator_SvvW2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test/file.txt");
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithEmptyName_kGCE3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("");
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetTime() {
        zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setTime(fileTime);
        verify(fileTime).toMillis();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime_iTzj0() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("input.txt"), "entryName");
        FileTime fileTime = FileTime.fromMillis(1234567890L);
        entry.setTime(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDiskNumberStart() {
        diskNumberStart = 1L;
        when(ziparchiveentry.getDiskNumberStart()).thenReturn(diskNumberStart);
        assertEquals(diskNumberStart, ziparchiveentry.getDiskNumberStart());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDiskNumberStart_JdhD0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        long diskNumberStart = zipArchiveEntry.getDiskNumberStart();
        assertEquals(0, diskNumberStart);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDiskNumberStartWithString_dlaG3() {
        String name = "name";
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(name);
        long diskNumberStart = zipArchiveEntry.getDiskNumberStart();
        assertEquals(0, diskNumberStart);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDiskNumberStartWithFile_YqKJ4() {
        File inputFile = new File("file");
        String entryName = "entryName";
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, entryName);
        long diskNumberStart = zipArchiveEntry.getDiskNumberStart();
        assertEquals(0, diskNumberStart);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUnixMode() {
        MockitoAnnotations.openMocks(this);
        when(zipArchiveEntry.getExternalAttributes()).thenReturn(100L);
        assertEquals(0, zipArchiveEntry.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getUnixMode_1_feUz0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        int result = zipArchiveEntry.getUnixMode();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawName() throws Exception {
        rawName = new byte[10];
        ziparchiveentry = new ZipArchiveEntry();
        when(ziparchiveentry.getRawName()).thenReturn(rawName);
        byte[] result = ziparchiveentry.getRawName();
        assertArrayEquals(rawName, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor1_xzbC0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] result = entry.getRawName();
        assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCentralDirectoryExtra() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Mock the ExtraFieldUtils class
        ExtraFieldUtils extraFieldUtils = mock(ExtraFieldUtils.class);
        when(extraFieldUtils.mergeCentralDirectoryData(any())).thenReturn(new byte[0]);
        // Set the ExtraFieldUtils field in the ZipArchiveEntry class
        Field extraFieldUtilsField = ZipArchiveEntry.class.getDeclaredField("extraFieldUtils");
        extraFieldUtilsField.setAccessible(true);
        extraFieldUtilsField.set(ziparchiveentry, extraFieldUtils);
        // Call the getCentralDirectoryExtra method and verify the behavior
        byte[] result = ziparchiveentry.getCentralDirectoryExtra();
        verify(extraFieldUtils, times(1)).mergeCentralDirectoryData(any());
        assertArrayEquals(new byte[0], result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtra_pcda0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] result = entry.getCentralDirectoryExtra();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullInputPath_fEHz1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(null, "entryName");
        byte[] result = entry.getCentralDirectoryExtra();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullName_QdgG4() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        byte[] result = entry.getCentralDirectoryExtra();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullInputFile_uXpN5() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        byte[] result = entry.getCentralDirectoryExtra();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyExtraFields_FeCh6() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.addExtraField(new Zip64ExtendedInformationExtraField());
        byte[] result = entry.getCentralDirectoryExtra();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullExtraFields_yIye7() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.addExtraField(null);
        byte[] result = entry.getCentralDirectoryExtra();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllExtraFieldsNoCopyNull_Zrik10() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.addExtraField(new Zip64ExtendedInformationExtraField());
        entry.addExtraField(null);
        byte[] result = entry.getCentralDirectoryExtra();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_jGSE0() {
        ZipShort zipShort1 = new ZipShort(new byte[]{0, 1});
        ZipShort zipShort2 = new ZipShort(new byte[]{0, 1});
        assertTrue(zipShort1.equals(zipShort2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutShort_ndaP1() {
        byte[] buf = new byte[2];
        ZipShort.putShort(1, buf, 0);
        assertArrayEquals(new byte[]{0, 1}, buf);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_GZHS2() {
        ZipShort zipShort = new ZipShort(new byte[]{0, 1});
        assertEquals(256, zipShort.getValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_MqkW3() {
        ZipShort zipShort = new ZipShort(1);
        assertArrayEquals(new byte[]{0, 1}, zipShort.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueBytes_sFmF4() {
        assertEquals(256, ZipShort.getValue(new byte[]{0, 1}));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_wRtl5() {
        ZipShort zipShort1 = new ZipShort(new byte[]{0, 1});
        ZipShort zipShort2 = new ZipShort(new byte[]{0, 1});
        assertEquals(zipShort1.hashCode(), zipShort2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesValue_nwer6() {
        assertArrayEquals(new byte[]{0, 1}, ZipShort.getBytes(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueBytesOffset_FOFt7() {
        assertEquals(256, ZipShort.getValue(new byte[]{0, 1, 0, 0}, 2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_odxd8_1() throws CloneNotSupportedException {
        ZipShort zipShort = new ZipShort(1);
        ZipShort clone = (ZipShort) zipShort.clone();
        assertNotSame(zipShort, clone);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_odxd8_2() throws CloneNotSupportedException {
        ZipShort zipShort = new ZipShort(1);
        ZipShort clone = (ZipShort) zipShort.clone();
        assertEquals(zipShort.getValue(), clone.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveExtraField_GwBy9() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test");
        ZipShort type = new ZipShort(1);
        zipArchiveEntry.removeExtraField(type);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixSymlink() {
        // Mock the getUnixMode() method to return a value that satisfies the condition in the isUnixSymlink method
        when(zipArchiveEntry.getUnixMode()).thenReturn(UnixStat.LINK_FLAG);
        // Call the isUnixSymlink method on the mock object
        boolean result = zipArchiveEntry.isUnixSymlink();
        // Assert that the result is true
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixSymlinkWithZipArchiveEntry_jHtV0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        boolean result = entry.isUnixSymlink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixSymlinkWithString_OIIP3() {
        String name = "name";
        ZipArchiveEntry entry = new ZipArchiveEntry(name);
        boolean result = entry.isUnixSymlink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixSymlinkWithFileAndString_vSBT4() {
        File inputFile = new File("input");
        String entryName = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
        boolean result = entry.isUnixSymlink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetVersionRequired() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        ziparchiveentry.setVersionRequired(versionRequired);
        verify(ziparchiveentry, times(1)).setVersionRequired(versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentInvalidValue_RTNm1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        try {
            entry.setAlignment(0x10000);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("Invalid value for alignment"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithLong_UjZs0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setTime(1234567890L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMethodWithValidMethod_bwjl0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        entry.setMethod(ZipArchiveEntry.DEFLATED);
        assertEquals(ZipArchiveEntry.DEFLATED, entry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMethodWithInvalidMethod_JxlZ1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        try {
            entry.setMethod(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("ZIP compression method can not be negative"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields_ufQk0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields();
        assertNotNull(extraFields);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGeneralPurposeBit_cxpa0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertNotNull(generalPurposeBit);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGeneralPurposeBit3_veVW2() throws IOException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertNotNull(generalPurposeBit);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGeneralPurposeBit4_vPoh3() throws ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entry"));
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertNotNull(generalPurposeBit);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGeneralPurposeBit5_mLxS4() throws ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new ZipArchiveEntry("entry"));
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertNotNull(generalPurposeBit);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffset_VCvH0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        long dataOffset = entry.getDataOffset();
        assertEquals(0, dataOffset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDataOffsetWithFileAndString_lTbu4() {
        ZipArchiveEntry entry = new ZipArchiveEntry(null, null);
        long dataOffset = entry.getDataOffset();
        assertEquals(0, dataOffset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_XzBN0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        long size = entry.getSize();
        assertEquals(0, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_hfFI1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setSize(10);
        long size = entry.getSize();
        assertEquals(10, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeToNegative_NBbW2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setSize(-10);
        long size = entry.getSize();
        assertEquals(-10, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeToZero_VVlO3() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setSize(0);
        long size = entry.getSize();
        assertEquals(0, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeToMaximumValue_yRpm4() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setSize(Long.MAX_VALUE);
        long size = entry.getSize();
        assertEquals(Long.MAX_VALUE, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeToMinimumValue_OwIw5() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setSize(Long.MIN_VALUE);
        long size = entry.getSize();
        assertEquals(Long.MIN_VALUE, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeToOverflowValue_gAnm6() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setSize(Long.MAX_VALUE + 10);
        long size = entry.getSize();
        assertEquals(Long.MAX_VALUE + 10, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeToUnderflowValue_CSjJ7() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setSize(Long.MIN_VALUE - 10);
        long size = entry.getSize();
        assertEquals(Long.MIN_VALUE - 10, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPlatform_EZMd0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        int result = zipArchiveEntry.getPlatform();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPlatformWithString_xTZC3() {
        String name = "name";
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(name);
        int result = zipArchiveEntry.getPlatform();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPlatformWithFile_DPxz4() {
        File inputFile = new File("file");
        String entryName = "entryName";
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, entryName);
        int result = zipArchiveEntry.getPlatform();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributes() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        // Set up the expected behavior of the setInternalAttributes method
        doNothing().when(ziparchiveentry).setInternalAttributes(anyInt());
        // Call the method under test
        ziparchiveentry.setInternalAttributes(10);
        // Verify that the method was called with the expected arguments
        verify(ziparchiveentry).setInternalAttributes(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetStreamContiguous() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        // Set up the mock object
        ZipArchiveEntry mockZiparchiveentry = mock(ZipArchiveEntry.class);
        // Set up the expected behavior
        doNothing().when(mockZiparchiveentry).setStreamContiguous(anyBoolean());
        // Call the method under test
        mockZiparchiveentry.setStreamContiguous(isStreamContiguous);
        // Verify that the method was called with the expected arguments
        verify(mockZiparchiveentry).setStreamContiguous(isStreamContiguous);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStreamContiguous_NeeD0_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setStreamContiguous(true);
        entry = new ZipArchiveEntry();
        entry.setStreamContiguous(false);
        assertTrue(entry.isStreamContiguous());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStreamContiguous_NeeD0_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setStreamContiguous(true);
        entry = new ZipArchiveEntry();
        entry.setStreamContiguous(false);
        assertFalse(entry.isStreamContiguous());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetNameSource4_HXQL3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setNameSource(null);
    assertEquals(null, zipArchiveEntry.getNameSource());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVersionRequired_oZND0() throws Exception {
        versionRequired = 1;
        ziparchiveentry = new ZipArchiveEntry();
        ziparchiveentry.setVersionRequired(versionRequired);
        assertEquals(versionRequired, ziparchiveentry.getVersionRequired());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUnixMode_SALj0() {
        MockitoAnnotations.openMocks(this);
        int mode = 0;
        zipArchiveEntry.setUnixMode(mode);
        verify(zipArchiveEntry, times(1)).setExternalAttributes(mode << SHORT_SHIFT | ((mode & 0200) == 0 ? 1 : 0) | (zipArchiveEntry.isDirectory() ? 0x10 : 0));
        verify(zipArchiveEntry, times(1)).setPlatform(ZipArchiveEntry.PLATFORM_UNIX);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithModeZero_xCHx0_UYtX0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    entry.setUnixMode(0);
    assertEquals(0, entry.getExternalAttributes() >> SHORT_SHIFT);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithModeZero_xCHx0_UYtX0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    entry.setUnixMode(0);
    assertEquals(1, entry.getExternalAttributes() & 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithModeZero_xCHx0_UYtX0_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    entry.setUnixMode(0);
    assertEquals(ZipArchiveEntry.PLATFORM_UNIX, entry.getPlatform());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithModeOne_LHYn1_NiuP0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    entry.setUnixMode(1);
    assertEquals(1, entry.getExternalAttributes() >> SHORT_SHIFT);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithModeOne_LHYn1_NiuP0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    entry.setUnixMode(1);
    assertEquals(1, entry.getExternalAttributes() & 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithModeOne_LHYn1_NiuP0_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    entry.setUnixMode(1);
    assertEquals(ZipArchiveEntry.PLATFORM_UNIX, entry.getPlatform());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithModeSeven_FMIh2_JbWm0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    entry.setUnixMode(7);
    assertEquals(7, entry.getExternalAttributes() >> SHORT_SHIFT);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithModeSeven_FMIh2_JbWm0_2() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    entry.setUnixMode(7);
    assertEquals(1, entry.getExternalAttributes() & 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetUnixModeWithModeSeven_FMIh2_JbWm0_3() {
    ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
    entry.setUnixMode(7);
    assertEquals(ZipArchiveEntry.PLATFORM_UNIX, entry.getPlatform());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_piGU0() {
        name = "exampleName";
        rawName = "exampleRawName".getBytes();
        ziparchiveentry.setName(name, rawName);
        verify(ziparchiveentry).setName(name);
        assertArrayEquals(rawName, ziparchiveentry.getRawName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUnparseableExtraFieldData_fCCV0() throws Exception {
        UnparseableExtraFieldData unparseableExtra = mock(UnparseableExtraFieldData.class);
        ZipArchiveEntry ziparchiveentry = new ZipArchiveEntry();
        when(ziparchiveentry.getUnparseableExtraFieldData()).thenReturn(unparseableExtra);
        assertEquals(unparseableExtra, ziparchiveentry.getUnparseableExtraFieldData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPlatformWithOne_iWBw3_pErY0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setPlatform(1);
    assertEquals(1, zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPlatformWithFour_GLee6_pMrz0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setPlatform(4);
    assertEquals(4, zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPlatformWithEight_IdAE10_ZaFt1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setPlatform(8);
    assertEquals(8, zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetPlatformWithFifteen_wZgN17_wAjB0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setPlatform(15);
    assertEquals(15, zipArchiveEntry.getPlatform());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithUnderflowNegativeLengthArray_YEYb9_YpYE0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        byte[] b = new byte[(int)-Long.MIN_VALUE];
        entry.setCentralDirectoryExtra(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetExtraField_izyH0() throws Exception {
		ZipExtraField zipExtraField = mock(ZipExtraField.class);
		ZipArchiveEntry ziparchiveentry = mock(ZipArchiveEntry.class);
		when(ziparchiveentry.getExtraField(any(ZipShort.class))).thenReturn(zipExtraField);
		ZipShort type = mock(ZipShort.class);
		ZipExtraField result = ziparchiveentry.getExtraField(type);
		verify(ziparchiveentry).getExtraField(type);
		assertEquals(zipExtraField, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithNullName_xngH4_Mwlt0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setName(null);
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAlignment_pqCK0() throws Exception {
        ziparchiveentry = new ZipArchiveEntry();
        int alignment = 1024;
        ziparchiveentry.setAlignment(alignment);
        assertEquals(alignment, ziparchiveentry.getAlignment());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetMethod_hWzD0() throws Exception{
        ziparchiveentry = new ZipArchiveEntry();
        int expectedMethod = 1;
        ziparchiveentry.setMethod(expectedMethod);
        assertEquals(expectedMethod, ziparchiveentry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributesWithFile_GGBp4_cKaO0() {
        File inputFile = new File("input");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
        zipArchiveEntry.setInternalAttributes(5);
        assertEquals(5, zipArchiveEntry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequiredWithZipEntry_MhyN2_fAIL0() {
        java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entryName");
        ZipArchiveEntry zipArchiveEntry = null;
        try {
            zipArchiveEntry = new ZipArchiveEntry(entry);
        } catch (ZipException e) {
            e.printStackTrace();
        }
        int versionRequired = zipArchiveEntry.getVersionRequired();
        assertEquals(0, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithPath_qOBJ1_jlsv0() {
        Path inputPath = null;
        String entryName = null;
        LinkOption[] options = null;
        ZipArchiveEntry zipArchiveEntry = null;
        try {
            zipArchiveEntry = new ZipArchiveEntry(inputPath, entryName, options);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Date lastModifiedDate = zipArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDateWithZipEntry_RLqV2_MeNQ0() {
        java.util.zip.ZipEntry entry = null;
        ZipArchiveEntry zipArchiveEntry = null;
        try {
            zipArchiveEntry = new ZipArchiveEntry(entry);
        } catch (ZipException e) {
            e.printStackTrace();
        }
        Date lastModifiedDate = zipArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentWithZipEntry_KDrF3_tmBt0() {
        ZipArchiveEntry zipArchiveEntry = null;
        try {
            zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry("entry"));
        } catch (ZipException e) {
            e.printStackTrace();
        }
        int alignment = zipArchiveEntry.getAlignment();
        assertEquals(0, alignment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields3_AQpO2_XlKB0() throws ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry(""));
        ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(true);
        assertNotNull(extraFields);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullEntryNameAndPathAndOptions_hscL6_KFxu1() {
        try {
            new ZipArchiveEntry((Path) null, (String) null, (LinkOption[]) null);
            fail("Expected NullPointerException");
        } catch (final NullPointerException e) {
        } catch (final IOException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMethodWithZipEntry_CWjN2_muSy0() {
        java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entryName");
        ZipArchiveEntry zipEntry = null;
        try {
            zipEntry = new ZipArchiveEntry(entry);
        } catch (ZipException e) {
            e.printStackTrace();
        }
        int method = zipEntry.getMethod();
        assertEquals(0, method);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTimeWithZipEntry_yeLm2_cpGJ0() {
        java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entryName");
        ZipArchiveEntry zipArchiveEntry = null;
        try {
            zipArchiveEntry = new ZipArchiveEntry(entry);
        } catch (ZipException e) {
            e.printStackTrace();
        }
        long time = zipArchiveEntry.getTime();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDiskNumberStartWithZipEntry_nBoe2_yomJ0() {
        java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entryName");
        ZipArchiveEntry zipArchiveEntry = null;
        try {
            zipArchiveEntry = new ZipArchiveEntry(entry);
        } catch (ZipException e) {
            e.printStackTrace();
        }
        long diskNumberStart = zipArchiveEntry.getDiskNumberStart();
        assertEquals(0, diskNumberStart);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPlatformWithZipEntry_oXFH2_vtVt0() {
        java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("entryName");
        ZipArchiveEntry zipArchiveEntry = null;
        try {
            zipArchiveEntry = new ZipArchiveEntry(entry);
        } catch (ZipException e) {
            e.printStackTrace();
        }
        int result = zipArchiveEntry.getPlatform();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetExtraFields() throws Exception {
		ziparchiveentry = new ZipArchiveEntry();
		// Mock the ZipExtraField objects
		ZipExtraField extraField1 = mock(ZipExtraField.class);
		ZipExtraField extraField2 = mock(ZipExtraField.class);
		// Set the extra fields on the ZipArchiveEntry object
		ziparchiveentry.addExtraField(extraField1);
		ziparchiveentry.addExtraField(extraField2);
		// Call the getExtraFields method with includeUnparseable set to true
		ZipExtraField[] extraFields = ziparchiveentry.getExtraFields(true);
		// Assert that the returned array contains both extra fields
		Assertions.assertEquals(2, extraFields.length);
		Assertions.assertTrue(Arrays.asList(extraFields).contains(extraField1));
		Assertions.assertTrue(Arrays.asList(extraFields).contains(extraField2));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithPrivateMethod_ANNX2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime time = FileTime.fromMillis(0);
        entry.setCreationTime(time);
        assertEquals(true, entry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID) != null);
        assertEquals(true, entry.getExtraField(X000A_NTFS.HEADER_ID) != null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_OGPF0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setName("newName", "newRawName".getBytes());
        assertEquals("newName", entry.getName());
        assertArrayEquals("newRawName".getBytes(), entry.getRawName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_odxd8() throws CloneNotSupportedException {
        ZipShort zipShort = new ZipShort(1);
        ZipShort clone = (ZipShort) zipShort.clone();
        assertNotSame(zipShort, clone);
        assertEquals(zipShort.getValue(), clone.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStreamContiguous_NeeD0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setStreamContiguous(true);
        assertTrue(entry.isStreamContiguous());
        entry = new ZipArchiveEntry();
        entry.setStreamContiguous(false);
        assertFalse(entry.isStreamContiguous());
    }
}