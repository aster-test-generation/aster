/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeLayout_Test_Passing {
private String layout;
private AttributeLayout attributelayout;
private SegmentConstantPool pool;
private ClassFileEntry classFileEntry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong_QRMJ0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(1L);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong2_eiYe1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(2L);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong3_pKTp2() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(3L);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong4_wYGS3() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(4L);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong5_JJrA4() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(5L);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong6_ohYr5() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(6L);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong7_eShY6() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(7L);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong8_Zkpl7() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(8L);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong9_oXPv8() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(9L);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong10_Jnrg9() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(10L);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong11_dqlQ10() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(11L);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong12_TxEl11() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(12L);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong13_EiRK12() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(13L);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong14_uzal13() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(14L);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong15_eCTe14() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(15L);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong16_bUCE15() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(16L);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong17_CueD16() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(17L);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong18_XQtj17() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(18L);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesLong19_isRU18() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        boolean result = attributeLayout.matches(19L);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLayout_sEFj0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        String layout = attributeLayout.getLayout();
        assertEquals("layout", layout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDefaultLayout_WRxd0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
        assertTrue(attributeLayout.isDefaultLayout());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumBackwardsCallablesWhenLayoutIsAsterisk_ZohT0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "*", 0);
        int result = attributeLayout.numBackwardsCallables();
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_fpFr0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        assertEquals("Context: name", attributeLayout.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashcodeWithNullNameAndLayout_UWaj0() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout(null, 0, null, 0);
    assertEquals(1, attributeLayout.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashcodeWithNonNullNameAndLayout_mAQw1() throws Exception {
    AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
    assertEquals(173, attributeLayout.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCodec1_KMhU0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.UNSIGNED5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCodec2_EnxF1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.BRANCH5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCodec3_tzLT2() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.BYTE1, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCodec5_WLaf4() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.BRANCH5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCodec6_hapx5() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.BCI5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCodec7_Odsm6() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.SIGNED5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_nfnJ0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
        String actualName = attributeLayout.getName();
        assertEquals("name", actualName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithIsDefault_alaY1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0, true);
        String actualName = attributeLayout.getName();
        assertEquals("name", actualName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetContext_MrMp0() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
		int actual = attributeLayout.getContext();
		int expected = 1;
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetContext_ZUPb1() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
		int actual = attributeLayout.getContext();
		int expected = 1;
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIndex_BXAQ0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
        int index = attributeLayout.getIndex();
        assertEquals(0, index);
    }
}