/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
public class Aster_ZstdCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMark_vDBK1() throws IOException {
		InputStream in = mock(InputStream.class);
		ZstdCompressorInputStream zs = new ZstdCompressorInputStream(in);
		zs.mark(10);
		verify(in).mark(10);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testRead_ixWw0() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class))).thenReturn(1);
        ZstdCompressorInputStream zs = new ZstdCompressorInputStream(in);
        byte[] b = new byte[1];
        int bytesRead = zs.read(b);
        assertEquals(1, bytesRead);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testClose2_zJmN1() throws IOException {
    InputStream in = mock(InputStream.class);
    ZstdCompressorInputStream zstdCompressorInputStream = new ZstdCompressorInputStream(in);
    zstdCompressorInputStream.close();
    verify(in).close();
}
}