/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;

import org.apache.commons.compress.archivers.zip.NioZipEncoding;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.File;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveEntry_Test_Passing {
@Mock
	private Object mockObject;
@InjectMocks
	private TarArchiveEntry tarArchiveEntry;
@Mock
    private TarArchiveEntry desc;
private TarArchiveEntry tararchiveentry;
private static final Map<String, String> GLOBAL_PAX_HEADERS = new HashMap<>();
private static final Map<String, String> EXTRA_PAX_HEADERS = new HashMap<>();
private static final Path FILE = mock(Path.class);
private static final String FILE_NAME = "file.txt";
private static final String LINK = "link.txt";
private static final String NAME = "name.txt";
private static final String USER_NAME = "user";
private static final String GROUP_NAME = "group";
private static final int MODE = 0755;
private static final long SIZE = 1024L;
private static final long DATA_OFFSET = 1024L;
private static final Date LAST_MODIFIED_TIME = new Date();
private static final FileTime LAST_ACCESS_TIME = FileTime.fromMillis(LAST_MODIFIED_TIME.getTime());
private static final FileTime LAST_MODIFIED_TIME_FILE_TIME = FileTime.fromMillis(LAST_MODIFIED_TIME.getTime());
private static final FileTime CREATION_TIME = FileTime.fromMillis(LAST_MODIFIED_TIME.getTime());
private static final long USER_ID = 1000L;
private static final long GROUP_ID = 1001L;
private static final byte LINK_FLAG = '1';
private static final byte[] HEADER_BUF_2 = new byte[512];
private static final byte[] HEADER_BUF_3 = new byte[512];
private static final byte[] HEADER_BUF_4 = new byte[512];
private static final byte[] HEADER_BUF_5 = new byte[512];
private static final byte[] HEADER_BUF_6 = new byte[512];
private static final byte[] HEADER_BUF_7 = new byte[512];
private static final byte[] HEADER_BUF_8 = new byte[512];
private static final byte[] HEADER_BUF_9 = new byte[512];
private static final byte[] HEADER_BUF_10 = new byte[512];
private static final byte[] HEADER_BUF_11 = new byte[512];
private static final byte[] HEADER_BUF_12 = new byte[512];
private static final byte[] HEADER_BUF_13 = new byte[512];
private static final byte[] HEADER_BUF_14 = new byte[512];
private static final byte[] HEADER_BUF_15 = new byte[512];
private static final byte[] HEADER_BUF_16 = new byte[512];
private static final byte[] HEADER_BUF_17 = new byte[512];
private static final byte[] HEADER_BUF_18 = new byte[512];
private static final byte[] HEADER_BUF_19 = new byte[512];
private static final byte[] HEADER_BUF_20 = new byte[512];
private static final byte[] HEADER_BUF_21 = new byte[512];
private static final byte[] HEADER_BUF_22 = new byte[512];
private static final byte[] HEADER_BUF_23 = new byte[512];
private static final byte[] HEADER_BUF_24 = new byte[512];
private static final byte[] HEADER_BUF_25 = new byte[512];
private static final byte[] HEADER_BUF_26 = new byte[512];
private static final byte[] HEADER_BUF_27 = new byte[512];
private static final byte[] HEADER_BUF_28 = new byte[512];
private static final byte[] HEADER_BUF_29 = new byte[512];
private static final byte[] HEADER_BUF_30 = new byte[512];
private static final byte[] HEADER_BUF_31 = new byte[512];
private static final byte[] HEADER_BUF_32 = new byte[512];
private static final byte[] HEADER_BUF_33 = new byte[512];
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetModTime4_FBoG4() throws Exception {
		TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0]);
		tarArchiveEntry.setModTime(new Date());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetModTime5_hBuS5() throws Exception {
		TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0);
		tarArchiveEntry.setModTime(new Date());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetModTime6_iFFL6() throws Exception {
		TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0, true);
		tarArchiveEntry.setModTime(new Date());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetModTime8_swHc8() throws Exception {
		TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
		tarArchiveEntry.setModTime(new Date());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetModTime9_jPEF9() throws Exception {
		TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", true);
		tarArchiveEntry.setModTime(new Date());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetModTime11_Zxxp11() throws Exception {
		TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
		tarArchiveEntry.setModTime(new Date());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetModTime12_eXDc12() throws Exception {
		TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"));
		tarArchiveEntry.setModTime(new Date());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModTime4_lOsS4() throws Exception {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModTime5_AeHE5() throws Exception {
        String name = "name";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModTime6_axOB6() throws Exception {
        String name = "name";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModTime8_ygWt8() throws Exception {
        String name = "name";
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModTime10_ALVD10() throws Exception {
        File file = new File("file");
        String fileName = "fileName";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModTime11_QcTS11() throws Exception {
        File file = new File("file");
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDevMajor_LGOB0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        assertEquals(0, entry.getDevMajor());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsOldGNUSparse_sjkR0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        assertTrue(entry.isOldGNUSparse());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveEntryGetLinkFlag_LlQK0() throws Exception {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
    byte linkFlag = tarArchiveEntry.getLinkFlag();
    assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveEntryGetLinkFlag2_qxaz1() throws Exception {
    Map<String, String> globalPaxHeaders = null;
    byte[] headerBuf = null;
    NioZipEncoding encoding = null;
    boolean lenient = false;
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(globalPaxHeaders, headerBuf, encoding, lenient);
    byte linkFlag = tarArchiveEntry.getLinkFlag();
    assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveEntryGetLinkFlag3_jdXk2() throws Exception {
    byte[] headerBuf = null;
    NioZipEncoding encoding = null;
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding);
    byte linkFlag = tarArchiveEntry.getLinkFlag();
    assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveEntryGetLinkFlag5_fglH4() throws Exception {
    String name = null;
    byte linkFlag = 0;
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
    byte linkFlag2 = tarArchiveEntry.getLinkFlag();
    assertEquals((byte) 0, linkFlag2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveEntryGetLinkFlag6_RfDH5() throws Exception {
    String name = null;
    byte linkFlag = 0;
    boolean preserveAbsolutePath = false;
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
    byte linkFlag2 = tarArchiveEntry.getLinkFlag();
    assertEquals((byte) 0, linkFlag2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveEntryGetLinkFlag7_lrOO6() throws Exception {
    Map<String, String> globalPaxHeaders = null;
    byte[] headerBuf = null;
    NioZipEncoding encoding = null;
    boolean lenient = false;
    long dataOffset = 0L;
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(globalPaxHeaders, headerBuf, encoding, lenient, dataOffset);
    byte linkFlag = tarArchiveEntry.getLinkFlag();
    assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveEntryGetLinkFlag8_JPGO7() throws Exception {
    String name = null;
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name);
    byte linkFlag = tarArchiveEntry.getLinkFlag();
    assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveEntryGetLinkFlag9_PVJo8() throws Exception {
    String name = null;
    boolean preserveAbsolutePath = false;
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
    byte linkFlag = tarArchiveEntry.getLinkFlag();
    assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveEntryGetLinkFlag10_qOhI9() throws Exception {
    byte[] headerBuf = null;
    NioZipEncoding encoding = null;
    boolean lenient = false;
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding, lenient);
    byte linkFlag = tarArchiveEntry.getLinkFlag();
    assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveEntryGetLinkFlag11_GfKk10() throws Exception {
    File file = null;
    String fileName = null;
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
    byte linkFlag = tarArchiveEntry.getLinkFlag();
    assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTarArchiveEntryGetLinkFlag12_lskH11() throws Exception {
    File file = null;
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
    byte linkFlag = tarArchiveEntry.getLinkFlag();
    assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongGroupId_MtQd0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        long groupId = tarArchiveEntry.getLongGroupId();
        assertEquals(0, groupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongGroupId2_eFof2() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null, false);
        long groupId = tarArchiveEntry.getLongGroupId();
        assertEquals(0, groupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongGroupId4_aUEo4() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null, false, 0L);
        long groupId = tarArchiveEntry.getLongGroupId();
        assertEquals(0, groupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime1_Merx1() throws Exception {
        Map<String, String> globalPaxHeaders = null;
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        boolean lenient = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(globalPaxHeaders, headerBuf, encoding, lenient);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime2_VzDy2() throws Exception {
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime3_AHds3() throws Exception {
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        long dataOffset = 0L;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding, true, dataOffset);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime4_YKvD4() throws Exception {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime5_nOxM5() throws Exception {
        String name = "test";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime6_lTpj6() throws Exception {
        String name = "test";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime7_DogG7() throws Exception {
        Map<String, String> globalPaxHeaders = null;
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        boolean lenient = true;
        long dataOffset = 0L;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(globalPaxHeaders, headerBuf, encoding, lenient, dataOffset);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime8_DACO8() throws Exception {
        String name = "test";
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime9_GNWh9() throws Exception {
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        boolean lenient = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding, lenient);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime10_Hvix10() throws Exception {
        File file = new File("test");
        String fileName = "test";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime11_blzH11() throws Exception {
        File file = new File("test");
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkWithLinkFlagSetToLink_kAwM0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 1, false);
        assertTrue(entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkWithLinkFlagSetToChar_aGCe1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry("test.txt", (byte) 2, false);
        assertTrue(!entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIds_erFa0_1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setIds(1000, 1001);
        assertEquals(1000, entry.getUserId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIds_erFa0_2() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setIds(1000, 1001);
        assertEquals(1001, entry.getGroupId());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithByteBuf_GkKF5() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[512]);
        tarArchiveEntry.setName("newName");
        assertEquals("newName", tarArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithStringAndByte_SZvN6() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1);
        tarArchiveEntry.setName("newName");
        assertEquals("newName", tarArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithStringAndByteAndPreserveAbsolutePath_EBia7() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1, true);
        tarArchiveEntry.setName("newName");
        assertEquals("newName", tarArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithString_tpKB9() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name");
        tarArchiveEntry.setName("newName");
        assertEquals("newName", tarArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithStringAndPreserveAbsolutePath_ylHs10() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", true);
        tarArchiveEntry.setName("newName");
        assertEquals("newName", tarArchiveEntry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStatusChangeTime_GjNp0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        FileTime statusChangeTime = tarArchiveEntry.getStatusChangeTime();
        assertNotNull(statusChangeTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_CIQJ0() throws Exception {
		TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0);
		assertEquals(tarArchiveEntry.getName().hashCode(), tarArchiveEntry.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUserId_Cutp0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        tarArchiveEntry.setUserId(123L);
        assertEquals(123L, tarArchiveEntry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUserName_DZMA0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        tarArchiveEntry.setUserName("userName");
        assertEquals("userName", tarArchiveEntry.getUserName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastAccessTime_OvdN0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        FileTime lastAccessTime = tarArchiveEntry.getLastAccessTime();
        assertNotNull(lastAccessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testSetGroupName_rMFC0() throws Exception {
		TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
		tarArchiveEntry.setGroupName("groupName");
		assertEquals("groupName", tarArchiveEntry.getGroupName());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNames_fQwi0_1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setNames("userName", "groupName");
        assertEquals("userName", entry.getUserName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNames_fQwi0_2() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setNames("userName", "groupName");
        assertEquals("groupName", entry.getGroupName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithLinkFlagOldNormReturnsTrue_qPZO1() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0, true);
        boolean result = tarArchiveEntry.isFile();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithLinkFlagNormalReturnsTrue_iYPT2() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 1, true);
        boolean result = tarArchiveEntry.isFile();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithLinkFlagDirReturnsFalse_MNlo3() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 5, true);
        boolean result = tarArchiveEntry.isFile();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithLinkFlagDirAndNameEndsWithSlashReturnsFalse_CYBA4() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name/", (byte) 5, true);
        boolean result = tarArchiveEntry.isFile();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddPaxHeader_JGow0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, (LinkOption[]) null);
        tarArchiveEntry.addPaxHeader("key", "value");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTimeWithString_KSco5() throws Exception {
        String name = "test.txt";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        FileTime time = FileTime.fromMillis(0);
        tarArchiveEntry.setLastModifiedTime(time);
        assertEquals(time, tarArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTimeWithStringAndLinkFlag_LZnu6() throws Exception {
        String name = "test.txt";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        FileTime time = FileTime.fromMillis(0);
        tarArchiveEntry.setLastModifiedTime(time);
        assertEquals(time, tarArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLinkWithPath_mDfP0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        boolean result = entry.isSymbolicLink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLinkWithMap_mQFK1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null, false);
        boolean result = entry.isSymbolicLink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLinkWithByteBufAndEncoding_NTNQ3() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, false);
        boolean result = entry.isSymbolicLink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLinkWithStringAndByte_QRqa5() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, (byte) 0);
        boolean result = entry.isSymbolicLink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLinkWithStringAndByteAndBoolean_lVnI6() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, (byte) 0, false);
        boolean result = entry.isSymbolicLink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLinkWithMapAndByteBufAndEncodingAndBooleanAndLong_vUNh7() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null, false, 0L);
        boolean result = entry.isSymbolicLink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLinkWithStringAndBoolean_xPkA9() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, false);
        boolean result = entry.isSymbolicLink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkName_Jdhg0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setLinkName("link");
        assertEquals("link", entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkNameWithEmptyLink_VpUL1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setLinkName("");
        assertEquals("", entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkNameWithNullLink_AsNK2() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setLinkName(null);
        assertEquals(null, entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkNameWithInvalidLink_IGSf4() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        String link = "a\0b";
        entry.setLinkName(link);
        assertEquals(link, entry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLinkName_qiKL0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        String linkName = tarArchiveEntry.getLinkName();
        assertEquals("", linkName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLinkName3_PIcw2() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null, false);
        String linkName = tarArchiveEntry.getLinkName();
        assertEquals("", linkName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLinkName4_fwfs3() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null, false, 0L);
        String linkName = tarArchiveEntry.getLinkName();
        assertEquals("", linkName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedTime_RriN0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        FileTime lastModifiedTime = tarArchiveEntry.getLastModifiedTime();
        assertNotNull(lastModifiedTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedTime3_GVWV2() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null, false);
        FileTime lastModifiedTime = tarArchiveEntry.getLastModifiedTime();
        assertNotNull(lastModifiedTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongUserId_FBOG0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        long longUserId = tarArchiveEntry.getLongUserId();
        assertEquals(0, longUserId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongUserId2_pIWu2() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null, false);
        long longUserId = tarArchiveEntry.getLongUserId();
        assertEquals(0, longUserId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongUserId4_hFYr4() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null, false, 0);
        long longUserId = tarArchiveEntry.getLongUserId();
        assertEquals(0, longUserId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGroupId_cYrr0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        assertEquals(0, tarArchiveEntry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGroupId2_IYUz2() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0], null);
        assertEquals(0, tarArchiveEntry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGroupId3_SOnp3() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0], null, false, 0L);
        assertEquals(0, tarArchiveEntry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGroupId4_Rlvg4() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("");
        assertEquals(0, tarArchiveEntry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGroupId5_LOkg5() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("", false);
        assertEquals(0, tarArchiveEntry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGroupId6_Oxiv6() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, new byte[0], null, false, 0L);
        assertEquals(0, tarArchiveEntry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGroupId7_snxm7() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, new byte[0], null, false);
        assertEquals(0, tarArchiveEntry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupId_WRek0() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setGroupId(0);
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupIdWithNegativeValue_lydz1() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setGroupId(-1);
        assertEquals(-1, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupIdWithMaxValue_HEjP2() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setGroupId(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupIdWithMinValue_dcsf3() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setGroupId(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupIdWithRandomValue_AJqD5() throws Exception {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        entry.setGroupId(1234567890L);
        assertEquals(1234567890L, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModTimeWithString_XCau4() throws Exception {
        String name = "fileName";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        tarArchiveEntry.setModTime(1234567890L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModTimeWithStringAndBoolean_WnLy5() throws Exception {
        String name = "fileName";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        tarArchiveEntry.setModTime(1234567890L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModTimeWithStringAndBoolean_fWCU7() throws Exception {
        String name = "fileName";
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        tarArchiveEntry.setModTime(1234567890L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModTimeWithFileAndString_UjXy9() throws IOException {
        File file = new File("file");
        String fileName = "fileName";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        tarArchiveEntry.setModTime(1234567890L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModTimeWithFile_vWWO10() throws IOException {
        File file = new File("file");
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        tarArchiveEntry.setModTime(1234567890L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getDataOffset_test1_LHDu0() throws Exception {
	TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, (LinkOption[]) null);
	long dataOffset = tarArchiveEntry.getDataOffset();
	assertEquals(0, dataOffset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime_ZyRD0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime1_TYxe1() throws Exception {
        Map<String, String> globalPaxHeaders = null;
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        boolean lenient = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(globalPaxHeaders, headerBuf, encoding, lenient);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime2_gylM2() throws Exception {
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime3_ULOj3() throws Exception {
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        boolean lenient = false;
        long dataOffset = 0L;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding, lenient, dataOffset);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime4_PuHI4() throws Exception {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime5_iCKZ5() throws Exception {
        String name = "";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime6_llmX6() throws Exception {
        String name = "";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime7_hMDS7() throws Exception {
        Map<String, String> globalPaxHeaders = null;
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        boolean lenient = false;
        long dataOffset = 0L;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(globalPaxHeaders, headerBuf, encoding, lenient, dataOffset);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime8_iUQw8() throws Exception {
        String name = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime9_OclW9() throws Exception {
        String name = "";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime10_fSjb10() throws Exception {
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        boolean lenient = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding, lenient);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime11_QPxr11() throws Exception {
        File file = null;
        String fileName = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationTime12_vKXu12() throws Exception {
        File file = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        FileTime creationTime = tarArchiveEntry.getCreationTime();
        assertNotNull(creationTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize_LmQu0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize1_FOLD1() throws Exception {
        Map<String, String> globalPaxHeaders = null;
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        boolean lenient = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(globalPaxHeaders, headerBuf, encoding, lenient);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize2_rHbB2() throws Exception {
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize3_imTr3() throws Exception {
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        long dataOffset = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding, false, dataOffset);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize4_ogET4() throws Exception {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize5_xFOB5() throws Exception {
        String name = "";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize6_Aujb6() throws Exception {
        String name = "";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize7_FWsl7() throws Exception {
        Map<String, String> globalPaxHeaders = null;
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        boolean lenient = false;
        long dataOffset = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(globalPaxHeaders, headerBuf, encoding, lenient, dataOffset);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize8_WCQK8() throws Exception {
        String name = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize9_HVfq9() throws Exception {
        String name = "";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize10_fOQk10() throws Exception {
        byte[] headerBuf = new byte[512];
        NioZipEncoding encoding = null;
        boolean lenient = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding, lenient);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize11_OgKT11() throws Exception {
        File file = null;
        String fileName = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize12_uiEA12() throws Exception {
        File file = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_QhYf0_1() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file2", (byte) 0);
    TarArchiveEntry entry3 = new TarArchiveEntry("file1", (byte) 0);
    assertEquals(entry1, entry3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_QhYf0_2() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file2", (byte) 0);
    TarArchiveEntry entry3 = new TarArchiveEntry("file1", (byte) 0);
    assertNotEquals(entry1, entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentLinkFlags_tFem1() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 1);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 2);
    assertNotEquals(entry1, entry2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentNames_boCb2() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file2", (byte) 0);
    assertNotEquals(entry1, entry2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentSizes_Htxw3() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry1.setSize(100);
    entry2.setSize(200);
    assertNotEquals(entry1, entry2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentModTimes_OHxG4() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry1.setModTime(new Date(1000));
    entry2.setModTime(new Date(2000));
    assertNotEquals(entry1, entry2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentUserIds_paLy5() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry1.setUserId(1000);
    entry2.setUserId(2000);
    assertNotEquals(entry1, entry2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentGroupIds_zKKh6() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry1.setGroupId(1000);
    entry2.setGroupId(2000);
    assertNotEquals(entry1, entry2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentLinkNames_OhoA7() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry1.setLinkName("link1");
    entry2.setLinkName("link2");
    assertNotEquals(entry1, entry2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentUserNames_CKnQ8() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry1.setUserName("user1");
    entry2.setUserName("user2");
    assertNotEquals(entry1, entry2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentGroupNames_TEUV9() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry1.setGroupName("group1");
    entry2.setGroupName("group2");
    assertNotEquals(entry1, entry2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentDevMajors_rfMa10() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry1.setDevMajor(1000);
    entry2.setDevMajor(2000);
    assertNotEquals(entry1, entry2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentDevMinors_xnRN11() throws Exception {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetRealSize1_wCgj0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, (LinkOption[]) null);
        long result = tarArchiveEntry.getRealSize();
        assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetRealSize2_FEKI1() throws Exception {
        Map<String, String> globalPaxHeaders = null;
        byte[] headerBuf = new byte[5];
        NioZipEncoding encoding = null;
        boolean lenient = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(globalPaxHeaders, headerBuf, encoding, lenient);
        long result = tarArchiveEntry.getRealSize();
        assertEquals(0L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetRealSize1_ebWM2() throws Exception {
        byte[] headerBuf = new byte[5];
        NioZipEncoding encoding = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding);
        long result = tarArchiveEntry.getRealSize();
        assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetRealSize3_vsJn4() throws Exception {
        byte[] headerBuf = new byte[5];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        long result = tarArchiveEntry.getRealSize();
        assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetRealSize4_RTUP5() throws Exception {
        String name = "";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        long result = tarArchiveEntry.getRealSize();
        assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetRealSize5_yBAw6() throws Exception {
        String name = "";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        long result = tarArchiveEntry.getRealSize();
        assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetRealSize6_SVhc7() throws Exception {
        Map<String, String> globalPaxHeaders = null;
        byte[] headerBuf = new byte[5];
        NioZipEncoding encoding = null;
        boolean lenient = true;
        long dataOffset = 0L;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(globalPaxHeaders, headerBuf, encoding, lenient, dataOffset);
        long result = tarArchiveEntry.getRealSize();
        assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetRealSize7_wwff8() throws Exception {
        String name = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name);
        long result = tarArchiveEntry.getRealSize();
        assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetRealSize8_LFus9() throws Exception {
        String name = "";
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        long result = tarArchiveEntry.getRealSize();
        assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetRealSize9_XziM10() throws Exception {
        byte[] headerBuf = new byte[5];
        NioZipEncoding encoding = null;
        boolean lenient = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf, encoding, lenient);
        long result = tarArchiveEntry.getRealSize();
        assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetRealSize10_uPzM11() throws Exception {
        File file = null;
        String fileName = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        long result = tarArchiveEntry.getRealSize();
        assertEquals(0L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetDevMinor_wIpm0() throws Exception {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        int result = tarArchiveEntry.getDevMinor();
        assertEquals(0, result);
    }
}