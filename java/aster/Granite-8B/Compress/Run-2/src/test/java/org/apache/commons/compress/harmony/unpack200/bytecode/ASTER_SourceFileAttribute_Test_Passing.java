/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SourceFileAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_uely0() throws Exception {
        CPUTF8 name = new CPUTF8("example");
        SourceFileAttribute attribute = new SourceFileAttribute(name);
        assertEquals("SourceFile: example", attribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithGlobalIndex_WBpg2() throws Exception {
        CPUTF8 name = new CPUTF8("example", 1);
        SourceFileAttribute attribute = new SourceFileAttribute(name);
        assertEquals("SourceFile: example", attribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_Rsmb0_1() throws Exception {
        CPUTF8 cPUTF8 = new CPUTF8("string");
        CPUTF8 cPUTF81 = new CPUTF8("utf8", 1);
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(cPUTF81);
        ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
        assertEquals(2, nestedClassFileEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_Rsmb0_3() throws Exception {
        CPUTF8 cPUTF8 = new CPUTF8("string");
        CPUTF8 cPUTF81 = new CPUTF8("utf8", 1);
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(cPUTF81);
        ClassFileEntry[] nestedClassFileEntries = sourceFileAttribute.getNestedClassFileEntries();
        assertEquals(cPUTF81, nestedClassFileEntries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_vOHD0() throws Exception {
        CPUTF8 cPUTF8 = new CPUTF8("string");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(cPUTF8);
        assertEquals(2, sourceFileAttribute.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsSourceFileAttribute_bmlp0() throws Exception {
    CPUTF8 utf8 = new CPUTF8("example");
    SourceFileAttribute attribute = new SourceFileAttribute(utf8);
    boolean result = attribute.isSourceFileAttribute();
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testResolve_hYoS0_1() throws Exception {
		CPUTF8 utf8 = new CPUTF8("test");
		ClassConstantPool pool = new ClassConstantPool();
		SourceFileAttribute attribute = new SourceFileAttribute(utf8);
		attribute.resolve(pool);
		assertEquals(1, pool.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testResolve_hYoS0_2() throws Exception {
		CPUTF8 utf8 = new CPUTF8("test");
		ClassConstantPool pool = new ClassConstantPool();
		SourceFileAttribute attribute = new SourceFileAttribute(utf8);
		attribute.resolve(pool);
		assertEquals(utf8, pool.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_dIQl0() throws IOException {
        CPUTF8 name = new CPUTF8("example");
        SourceFileAttribute attribute = new SourceFileAttribute(name);
        DataOutputStream dos = new DataOutputStream(System.out);
        attribute.writeBody(dos);
        dos.flush();
    }
}