/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArray_Hryc0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{1, 2, 3});
    byte[] actualArray = channel.array();
    byte[] expectedArray = new byte[]{1, 2, 3};
    assert Arrays.equals(actualArray, expectedArray);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpenWithOpenChannel_iZeG0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_ZCqX0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithConstructor_QMCl1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithArray_iYRs2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{1, 2, 3});
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_vhCg0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        assertEquals(10, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithArray_XoAU1() {
        byte[] data = new byte[20];
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
        assertEquals(20, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithZeroSize_epMR2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(0);
        assertEquals(0, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeLessThanCurrentSize_FKwJ2_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(result, channel);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeLessThanCurrentSize_FKwJ2_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(5);
    assertEquals(channel.size(), 5);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeLessThanCurrentSize_FKwJ2_3() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(5);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeEqualToCurrentSize_yHpv3_1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(10);
    assertEquals(result, channel);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testTruncateWithSizeEqualToCurrentSize_yHpv3_2() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    SeekableByteChannel result = channel.truncate(10);
    assertEquals(channel.size(), 10);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithBufferSmallerThanRemainingSpace_OejD1_TqXp0() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer b = ByteBuffer.allocate(5);
        b.put("hello".getBytes());
        b.flip();
        assertEquals(5, channel.write(b));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPosition3_QWqZ2_UVrU0() throws IOException {
		SeekableInMemoryByteChannel seekableInMemoryByteChannel = new SeekableInMemoryByteChannel();
		long newPosition = 0L;
		SeekableByteChannel result = seekableInMemoryByteChannel.position(newPosition);
		Assertions.assertEquals(0, result.position());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionAfterSettingPosition_ivaY3_OGpm0() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        try {
            channel.position(5);
        } catch (IOException e) {
            e.printStackTrace();
        }
        assertEquals(5, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testRead_igZA0_VsnL0_1() throws IOException {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
		ByteBuffer buf = ByteBuffer.allocate(5);
		int result = channel.read(buf);
		assertEquals(5, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testRead_igZA0_VsnL0_2() throws IOException {
		SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
		ByteBuffer buf = ByteBuffer.allocate(5);
		int result = channel.read(buf);
		assertEquals(5, buf.position());}
}