/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPoolArrayCache_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testArrayIsCached_sBFD0() throws Exception {
		SegmentConstantPoolArrayCache segmentConstantPoolArrayCache = new SegmentConstantPoolArrayCache();
		String[] array = new String[10];
		boolean result = segmentConstantPoolArrayCache.arrayIsCached(array);
		boolean expected = true;
		assertEquals(expected, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testArrayIsCachedWithNullArray_wGLu1() throws Exception {
		SegmentConstantPoolArrayCache segmentConstantPoolArrayCache = new SegmentConstantPoolArrayCache();
		String[] array = null;
		boolean result = segmentConstantPoolArrayCache.arrayIsCached(array);
		boolean expected = false;
		assertEquals(expected, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testArrayIsCachedWithDifferentSizeArray_kIzk2() throws Exception {
		SegmentConstantPoolArrayCache segmentConstantPoolArrayCache = new SegmentConstantPoolArrayCache();
		String[] array = new String[20];
		boolean result = segmentConstantPoolArrayCache.arrayIsCached(array);
		boolean expected = false;
		assertEquals(expected, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexesForArrayKey_ZgrR0() throws Exception {
        SegmentConstantPoolArrayCache segmentConstantPoolArrayCache = new SegmentConstantPoolArrayCache();
        String[] array = new String[]{"key1", "key2", "key3"};
        String key = "key2";
        List<Integer> expectedIndexes = Arrays.asList(1);
        List<Integer> actualIndexes = segmentConstantPoolArrayCache.indexesForArrayKey(array, key);
        assertEquals(expectedIndexes, actualIndexes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexesForArrayKeyWithNullArray_hYqC1() throws Exception {
        SegmentConstantPoolArrayCache segmentConstantPoolArrayCache = new SegmentConstantPoolArrayCache();
        String[] array = null;
        String key = "key2";
        List<Integer> expectedIndexes = null;
        List<Integer> actualIndexes = segmentConstantPoolArrayCache.indexesForArrayKey(array, key);
        assertEquals(expectedIndexes, actualIndexes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexesForArrayKeyWithEmptyArray_nHWC2() throws Exception {
        SegmentConstantPoolArrayCache segmentConstantPoolArrayCache = new SegmentConstantPoolArrayCache();
        String[] array = new String[]{};
        String key = "key2";
        List<Integer> expectedIndexes = null;
        List<Integer> actualIndexes = segmentConstantPoolArrayCache.indexesForArrayKey(array, key);
        assertEquals(expectedIndexes, actualIndexes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexesForArrayKeyWithNonExistingKey_LnUp3() throws Exception {
        SegmentConstantPoolArrayCache segmentConstantPoolArrayCache = new SegmentConstantPoolArrayCache();
        String[] array = new String[]{"key1", "key2", "key3"};
        String key = "key4";
        List<Integer> expectedIndexes = null;
        List<Integer> actualIndexes = segmentConstantPoolArrayCache.indexesForArrayKey(array, key);
        assertEquals(expectedIndexes, actualIndexes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCacheArrayWithNullArray_JIth0() throws Exception {
        SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
        String[] array = null;
        try {
            cache.cacheArray(array);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Trying to cache an array that already exists", e.getMessage());
        }
    }
}