/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_UnparseableExtraFieldData_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_offsetNegative_throwsIllegalArgumentException_LCwy1() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = new byte[10];
        int offset = -1;
        int length = 0;
        IllegalArgumentException exception =
                assertThrows(IllegalArgumentException.class, () -> unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length));
        assertEquals("offset must be non-negative", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_lengthNegative_throwsIllegalArgumentException_dJSh2() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = -1;
        IllegalArgumentException exception =
                assertThrows(IllegalArgumentException.class, () -> unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length));
        assertEquals("length must be non-negative", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_offsetPlusLengthExceedsBufferLength_throwsIllegalArgumentException_pjJp3() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 11;
        IllegalArgumentException exception =
                assertThrows(IllegalArgumentException.class, () -> unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length));
        assertEquals("offset + length must not exceed buffer length", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_validInput_setsCentralDirectoryData_dRVx4() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length);
        assertEquals(Arrays.copyOfRange(buffer, offset, offset + length), unparseableExtraFieldData.getCentralDirectoryData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetHeaderId_Rdtm0() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        ZipShort headerId = unparseableExtraFieldData.getHeaderId();
        assertEquals(0, headerId.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataLength2_gUHq1() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] bytes = new byte[10];
        ZipShort localFileDataLength = unparseableExtraFieldData.getLocalFileDataLength();
        assertEquals(10, localFileDataLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_offsetNegative_throwsIllegalArgumentException_LCwy1_1() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = new byte[10];
        int offset = -1;
        int length = 0;
        IllegalArgumentException exception =
                assertThrows(IllegalArgumentException.class, () -> unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_offsetPlusLengthExceedsBufferLength_throwsIllegalArgumentException_pjJp3_1() {
        UnparseableExtraFieldData unparseableExtraFieldData = new UnparseableExtraFieldData();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 11;
        IllegalArgumentException exception =
                assertThrows(IllegalArgumentException.class, () -> unparseableExtraFieldData.parseFromCentralDirectoryData(buffer, offset, length));}
}