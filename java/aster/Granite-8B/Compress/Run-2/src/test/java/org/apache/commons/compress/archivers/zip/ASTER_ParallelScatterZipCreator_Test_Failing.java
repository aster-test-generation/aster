/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.apache.commons.compress.parallel.InputStreamSupplier;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParallelScatterZipCreator_Test_Failing {
private ParallelScatterZipCreator parallelScatterZipCreator;
private ExecutorService executorService;
private DefaultBackingStoreSupplier backingStoreSupplier;
private ZipArchiveEntry zipArchiveEntry;
private InputStreamSupplier source;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArchiveEntry() {
        parallelScatterZipCreator = new ParallelScatterZipCreator(executorService, backingStoreSupplier);
        parallelScatterZipCreator.addArchiveEntry(zipArchiveEntry, source);
        verify(executorService).submit(any(Callable.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSubmitStreamAwareCallable_PyFL0() {
    ParallelScatterZipCreator parallelScatterZipCreator = new ParallelScatterZipCreator(mock(ExecutorService.class));
    Callable<? extends ScatterZipOutputStream> callable = mock(Callable.class);
    parallelScatterZipCreator.submitStreamAwareCallable(callable);
    verify(parallelScatterZipCreator).submitStreamAwareCallable(callable);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStatisticsMessage_Daoh0() {
        ParallelScatterZipCreator parallelScatterZipCreator = new ParallelScatterZipCreator();
        ScatterStatistics statistics = parallelScatterZipCreator.getStatisticsMessage();
        assertNotNull(statistics);
        assertEquals(0, statistics.getMergingElapsed());
        assertEquals(0, statistics.getCompressionElapsed());
    }
}