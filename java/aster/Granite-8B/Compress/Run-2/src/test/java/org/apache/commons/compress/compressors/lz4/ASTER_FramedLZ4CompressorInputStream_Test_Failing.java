/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lz4;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedLZ4CompressorInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadOnce_dSHF0_1() throws IOException {
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        BlockLZ4CompressorInputStream l = new BlockLZ4CompressorInputStream(null);
        long before = l.getBytesRead();
        int cnt = l.read(b, off, len);
        l = new BlockLZ4CompressorInputStream(null);
        before = l.getBytesRead();
        cnt = l.read(b, off, len);
        assertEquals(0, cnt);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadOnce_dSHF0_2() throws IOException {
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        BlockLZ4CompressorInputStream l = new BlockLZ4CompressorInputStream(null);
        long before = l.getBytesRead();
        int cnt = l.read(b, off, len);
        l = new BlockLZ4CompressorInputStream(null);
        before = l.getBytesRead();
        cnt = l.read(b, off, len);
        assertEquals(before, l.getBytesRead());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadOnce_dSHF0_3() throws IOException {
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        BlockLZ4CompressorInputStream l = new BlockLZ4CompressorInputStream(null);
        long before = l.getBytesRead();
        int cnt = l.read(b, off, len);
        l = new BlockLZ4CompressorInputStream(null);
        before = l.getBytesRead();
        cnt = l.read(b, off, len);
        assertEquals(-1, cnt);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadOnce_dSHF0_4() throws IOException {
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        BlockLZ4CompressorInputStream l = new BlockLZ4CompressorInputStream(null);
        long before = l.getBytesRead();
        int cnt = l.read(b, off, len);
        l = new BlockLZ4CompressorInputStream(null);
        before = l.getBytesRead();
        cnt = l.read(b, off, len);
        assertTrue(l.getBytesRead() > before);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_hEpB1_1() throws IOException {
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        FramedLZ4CompressorInputStream in = new FramedLZ4CompressorInputStream(null);
        int r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, false);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        assertEquals(0, r);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_hEpB1_2() throws IOException {
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        FramedLZ4CompressorInputStream in = new FramedLZ4CompressorInputStream(null);
        int r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, false);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        assertEquals(-1, r);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressedCount_iRZn0_CcbF0() {
        InputStream in = null;
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = null;
        try {
            framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in);
        } catch (IOException e) {
            e.printStackTrace();
        }
        long compressedCount = framedLZ4CompressorInputStream.getCompressedCount();
        assertEquals(0, compressedCount);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressedCount_decompressConcatenated_cdok1_hOQO0() {
        InputStream in = null;
        boolean decompressConcatenated = true;
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = null;
        try {
            framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in, decompressConcatenated);
        } catch (IOException e) {
            e.printStackTrace();
        }
        long compressedCount = framedLZ4CompressorInputStream.getCompressedCount();
        assertEquals(0, compressedCount);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches2_bMpy1_fid2() {
        byte[] signature = new byte[10];
        Arrays.fill(signature, (byte) 0x04);
        boolean result = FramedLZ4CompressorInputStream.matches(signature, 10);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadOnce_dSHF0() throws IOException {
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        BlockLZ4CompressorInputStream l = new BlockLZ4CompressorInputStream(null);
        long before = l.getBytesRead();
        int cnt = l.read(b, off, len);
        assertEquals(0, cnt);
        assertEquals(before, l.getBytesRead());
        l = new BlockLZ4CompressorInputStream(null);
        before = l.getBytesRead();
        cnt = l.read(b, off, len);
        assertEquals(-1, cnt);
        assertTrue(l.getBytesRead() > before);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_hEpB1() throws IOException {
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        FramedLZ4CompressorInputStream in = new FramedLZ4CompressorInputStream(null);
        int r = in.read(b, off, len);
        assertEquals(0, r);
        in = new FramedLZ4CompressorInputStream(null, false);
        r = in.read(b, off, len);
        assertEquals(-1, r);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        assertEquals(-1, r);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        assertEquals(-1, r);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        assertEquals(-1, r);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        assertEquals(-1, r);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        assertEquals(-1, r);
        in = new FramedLZ4CompressorInputStream(null, true);
        r = in.read(b, off, len);
        assertEquals(-1, r);
    }
}