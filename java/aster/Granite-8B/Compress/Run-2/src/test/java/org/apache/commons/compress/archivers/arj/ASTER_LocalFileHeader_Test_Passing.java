/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalFileHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_ZDFa0_1() throws Exception {
        LocalFileHeader localFileHeader = new LocalFileHeader();
        LocalFileHeader other = new LocalFileHeader();
        other.archiverVersionNumber = 1;
        other.archiverVersionNumber = localFileHeader.archiverVersionNumber;
        other.minVersionToExtract = 1;
        other.minVersionToExtract = localFileHeader.minVersionToExtract;
        other.hostOS = 1;
        other.hostOS = localFileHeader.hostOS;
        other.arjFlags = 1;
        other.arjFlags = localFileHeader.arjFlags;
        other.method = 1;
        other.method = localFileHeader.method;
        other.fileType = 1;
        other.fileType = localFileHeader.fileType;
        other.reserved = 1;
        other.reserved = localFileHeader.reserved;
        other.dateTimeModified = 1;
        other.dateTimeModified = localFileHeader.dateTimeModified;
        other.compressedSize = 1;
        other.compressedSize = localFileHeader.compressedSize;
        other.originalSize = 1;
        other.originalSize = localFileHeader.originalSize;
        other.originalCrc32 = 1;
        other.originalCrc32 = localFileHeader.originalCrc32;
        other.fileSpecPosition = 1;
        other.fileSpecPosition = localFileHeader.fileSpecPosition;
        other.fileAccessMode = 1;
        other.fileAccessMode = localFileHeader.fileAccessMode;
        other.firstChapter = 1;
        other.firstChapter = localFileHeader.firstChapter;
        other.lastChapter = 1;
        other.lastChapter = localFileHeader.lastChapter;
        other.extendedFilePosition = 1;
        other.extendedFilePosition = localFileHeader.extendedFilePosition;
        other.dateTimeAccessed = 1;
        other.dateTimeAccessed = localFileHeader.dateTimeAccessed;
        other.dateTimeCreated = 1;
        other.dateTimeCreated = localFileHeader.dateTimeCreated;
        other.originalSizeEvenForVolumes = 1;
        other.originalSizeEvenForVolumes = localFileHeader.originalSizeEvenForVolumes;
        other.name = "name";
        other.name = localFileHeader.name;
        other.comment = "comment";
        other.comment = localFileHeader.comment;
        other.extendedHeaders = new byte[][]{{1}};
        other.extendedHeaders = localFileHeader.extendedHeaders;
        assertTrue(localFileHeader.equals(localFileHeader));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_ZDFa0_2() throws Exception {
        LocalFileHeader localFileHeader = new LocalFileHeader();
        LocalFileHeader other = new LocalFileHeader();
        other.archiverVersionNumber = 1;
        other.archiverVersionNumber = localFileHeader.archiverVersionNumber;
        other.minVersionToExtract = 1;
        other.minVersionToExtract = localFileHeader.minVersionToExtract;
        other.hostOS = 1;
        other.hostOS = localFileHeader.hostOS;
        other.arjFlags = 1;
        other.arjFlags = localFileHeader.arjFlags;
        other.method = 1;
        other.method = localFileHeader.method;
        other.fileType = 1;
        other.fileType = localFileHeader.fileType;
        other.reserved = 1;
        other.reserved = localFileHeader.reserved;
        other.dateTimeModified = 1;
        other.dateTimeModified = localFileHeader.dateTimeModified;
        other.compressedSize = 1;
        other.compressedSize = localFileHeader.compressedSize;
        other.originalSize = 1;
        other.originalSize = localFileHeader.originalSize;
        other.originalCrc32 = 1;
        other.originalCrc32 = localFileHeader.originalCrc32;
        other.fileSpecPosition = 1;
        other.fileSpecPosition = localFileHeader.fileSpecPosition;
        other.fileAccessMode = 1;
        other.fileAccessMode = localFileHeader.fileAccessMode;
        other.firstChapter = 1;
        other.firstChapter = localFileHeader.firstChapter;
        other.lastChapter = 1;
        other.lastChapter = localFileHeader.lastChapter;
        other.extendedFilePosition = 1;
        other.extendedFilePosition = localFileHeader.extendedFilePosition;
        other.dateTimeAccessed = 1;
        other.dateTimeAccessed = localFileHeader.dateTimeAccessed;
        other.dateTimeCreated = 1;
        other.dateTimeCreated = localFileHeader.dateTimeCreated;
        other.originalSizeEvenForVolumes = 1;
        other.originalSizeEvenForVolumes = localFileHeader.originalSizeEvenForVolumes;
        other.name = "name";
        other.name = localFileHeader.name;
        other.comment = "comment";
        other.comment = localFileHeader.comment;
        other.extendedHeaders = new byte[][]{{1}};
        other.extendedHeaders = localFileHeader.extendedHeaders;
        assertFalse(localFileHeader.equals(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_ZDFa0_3() throws Exception {
        LocalFileHeader localFileHeader = new LocalFileHeader();
        LocalFileHeader other = new LocalFileHeader();
        other.archiverVersionNumber = 1;
        other.archiverVersionNumber = localFileHeader.archiverVersionNumber;
        other.minVersionToExtract = 1;
        other.minVersionToExtract = localFileHeader.minVersionToExtract;
        other.hostOS = 1;
        other.hostOS = localFileHeader.hostOS;
        other.arjFlags = 1;
        other.arjFlags = localFileHeader.arjFlags;
        other.method = 1;
        other.method = localFileHeader.method;
        other.fileType = 1;
        other.fileType = localFileHeader.fileType;
        other.reserved = 1;
        other.reserved = localFileHeader.reserved;
        other.dateTimeModified = 1;
        other.dateTimeModified = localFileHeader.dateTimeModified;
        other.compressedSize = 1;
        other.compressedSize = localFileHeader.compressedSize;
        other.originalSize = 1;
        other.originalSize = localFileHeader.originalSize;
        other.originalCrc32 = 1;
        other.originalCrc32 = localFileHeader.originalCrc32;
        other.fileSpecPosition = 1;
        other.fileSpecPosition = localFileHeader.fileSpecPosition;
        other.fileAccessMode = 1;
        other.fileAccessMode = localFileHeader.fileAccessMode;
        other.firstChapter = 1;
        other.firstChapter = localFileHeader.firstChapter;
        other.lastChapter = 1;
        other.lastChapter = localFileHeader.lastChapter;
        other.extendedFilePosition = 1;
        other.extendedFilePosition = localFileHeader.extendedFilePosition;
        other.dateTimeAccessed = 1;
        other.dateTimeAccessed = localFileHeader.dateTimeAccessed;
        other.dateTimeCreated = 1;
        other.dateTimeCreated = localFileHeader.dateTimeCreated;
        other.originalSizeEvenForVolumes = 1;
        other.originalSizeEvenForVolumes = localFileHeader.originalSizeEvenForVolumes;
        other.name = "name";
        other.name = localFileHeader.name;
        other.comment = "comment";
        other.comment = localFileHeader.comment;
        other.extendedHeaders = new byte[][]{{1}};
        other.extendedHeaders = localFileHeader.extendedHeaders;
        assertFalse(localFileHeader.equals(new Object()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_ZDFa0_4() throws Exception {
        LocalFileHeader localFileHeader = new LocalFileHeader();
        LocalFileHeader other = new LocalFileHeader();
        other.archiverVersionNumber = 1;
        other.archiverVersionNumber = localFileHeader.archiverVersionNumber;
        other.minVersionToExtract = 1;
        other.minVersionToExtract = localFileHeader.minVersionToExtract;
        other.hostOS = 1;
        other.hostOS = localFileHeader.hostOS;
        other.arjFlags = 1;
        other.arjFlags = localFileHeader.arjFlags;
        other.method = 1;
        other.method = localFileHeader.method;
        other.fileType = 1;
        other.fileType = localFileHeader.fileType;
        other.reserved = 1;
        other.reserved = localFileHeader.reserved;
        other.dateTimeModified = 1;
        other.dateTimeModified = localFileHeader.dateTimeModified;
        other.compressedSize = 1;
        other.compressedSize = localFileHeader.compressedSize;
        other.originalSize = 1;
        other.originalSize = localFileHeader.originalSize;
        other.originalCrc32 = 1;
        other.originalCrc32 = localFileHeader.originalCrc32;
        other.fileSpecPosition = 1;
        other.fileSpecPosition = localFileHeader.fileSpecPosition;
        other.fileAccessMode = 1;
        other.fileAccessMode = localFileHeader.fileAccessMode;
        other.firstChapter = 1;
        other.firstChapter = localFileHeader.firstChapter;
        other.lastChapter = 1;
        other.lastChapter = localFileHeader.lastChapter;
        other.extendedFilePosition = 1;
        other.extendedFilePosition = localFileHeader.extendedFilePosition;
        other.dateTimeAccessed = 1;
        other.dateTimeAccessed = localFileHeader.dateTimeAccessed;
        other.dateTimeCreated = 1;
        other.dateTimeCreated = localFileHeader.dateTimeCreated;
        other.originalSizeEvenForVolumes = 1;
        other.originalSizeEvenForVolumes = localFileHeader.originalSizeEvenForVolumes;
        other.name = "name";
        other.name = localFileHeader.name;
        other.comment = "comment";
        other.comment = localFileHeader.comment;
        other.extendedHeaders = new byte[][]{{1}};
        other.extendedHeaders = localFileHeader.extendedHeaders;
        assertFalse(localFileHeader.equals(other));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_ZDFa0_26() throws Exception {
        LocalFileHeader localFileHeader = new LocalFileHeader();
        LocalFileHeader other = new LocalFileHeader();
        other.archiverVersionNumber = 1;
        other.archiverVersionNumber = localFileHeader.archiverVersionNumber;
        other.minVersionToExtract = 1;
        other.minVersionToExtract = localFileHeader.minVersionToExtract;
        other.hostOS = 1;
        other.hostOS = localFileHeader.hostOS;
        other.arjFlags = 1;
        other.arjFlags = localFileHeader.arjFlags;
        other.method = 1;
        other.method = localFileHeader.method;
        other.fileType = 1;
        other.fileType = localFileHeader.fileType;
        other.reserved = 1;
        other.reserved = localFileHeader.reserved;
        other.dateTimeModified = 1;
        other.dateTimeModified = localFileHeader.dateTimeModified;
        other.compressedSize = 1;
        other.compressedSize = localFileHeader.compressedSize;
        other.originalSize = 1;
        other.originalSize = localFileHeader.originalSize;
        other.originalCrc32 = 1;
        other.originalCrc32 = localFileHeader.originalCrc32;
        other.fileSpecPosition = 1;
        other.fileSpecPosition = localFileHeader.fileSpecPosition;
        other.fileAccessMode = 1;
        other.fileAccessMode = localFileHeader.fileAccessMode;
        other.firstChapter = 1;
        other.firstChapter = localFileHeader.firstChapter;
        other.lastChapter = 1;
        other.lastChapter = localFileHeader.lastChapter;
        other.extendedFilePosition = 1;
        other.extendedFilePosition = localFileHeader.extendedFilePosition;
        other.dateTimeAccessed = 1;
        other.dateTimeAccessed = localFileHeader.dateTimeAccessed;
        other.dateTimeCreated = 1;
        other.dateTimeCreated = localFileHeader.dateTimeCreated;
        other.originalSizeEvenForVolumes = 1;
        other.originalSizeEvenForVolumes = localFileHeader.originalSizeEvenForVolumes;
        other.name = "name";
        other.name = localFileHeader.name;
        other.comment = "comment";
        other.comment = localFileHeader.comment;
        other.extendedHeaders = new byte[][]{{1}};
        other.extendedHeaders = localFileHeader.extendedHeaders;
        assertTrue(localFileHeader.equals(other));}
}