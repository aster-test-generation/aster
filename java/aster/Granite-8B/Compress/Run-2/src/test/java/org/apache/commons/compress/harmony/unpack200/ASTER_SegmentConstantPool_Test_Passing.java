/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SegmentConstantPool_Test_Passing {
SegmentConstantPool segmentconstantpool;
Segment segment;
CpBands bands;
private SegmentConstantPoolArrayCache arrayCache = new SegmentConstantPoolArrayCache();
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testmatchSpecificPoolEntryIndex() throws Exception {
        segmentconstantpool = new SegmentConstantPool(new CpBands(new Segment()));
        String[] nameArray = {"name1", "name2", "name3"};
        String compareString = "name2";
        int desiredIndex = 1;
        int result = segmentconstantpool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getConstantPoolEntry_1_YElM0() throws Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 0;
        long value = 0;
        ConstantPoolEntry result = segmentConstantPool.getConstantPoolEntry(cp, value);
        assertEquals(null, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getConstantPoolEntry_2_EKhK1() throws Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 0;
        long value = -1;
        try {
            segmentConstantPool.getConstantPoolEntry(cp, value);
            fail("Expected Pack200Exception to be thrown");
        } catch (Pack200Exception e) {
            assertEquals("Cannot have a negative range", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getConstantPoolEntry_3_IpjL2() throws Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        int cp = 0;
        long value = 1;
        ConstantPoolEntry result = segmentConstantPool.getConstantPoolEntry(cp, value);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetClassPoolEntry_1() throws Exception {
        bands = mock(CpBands.class);
        segmentconstantpool = new SegmentConstantPool(bands);
        // Mock the behavior of the bands object
        when(bands.getCpClass()).thenReturn(new String[]{"java/lang/String", "java/lang/Integer"});
        // Call the method under test
        ConstantPoolEntry result = segmentconstantpool.getClassPoolEntry("java/lang/String");
        // Assert that the result is not null
        // Assert that the result has the expected tag
        // Assert that the result has the expected global index
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetClassPoolEntry_3() throws Exception {
        bands = mock(CpBands.class);
        segmentconstantpool = new SegmentConstantPool(bands);
        // Mock the behavior of the bands object
        when(bands.getCpClass()).thenReturn(new String[]{"java/lang/String", "java/lang/Integer"});
        // Call the method under test
        ConstantPoolEntry result = segmentconstantpool.getClassPoolEntry("java/lang/String");
        // Assert that the result is not null
        // Assert that the result has the expected tag
        // Assert that the result has the expected global index
        assertEquals(0, result.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry_BqQQ0() throws Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
    String name = "exampleClass";
    ConstantPoolEntry result = segmentConstantPool.getClassPoolEntry(name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetClassPoolEntry2_BMgD1() throws Exception {
    Segment segment = new Segment();
    CpBands bands = new CpBands(segment);
    SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
    String name = "anotherClass";
    ConstantPoolEntry result = segmentConstantPool.getClassPoolEntry(name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_etpg0() throws Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = {"primaryArray1", "primaryArray2"};
        String[] secondaryArray = {"secondaryArray1", "secondaryArray2"};
        String primaryCompareString = "primaryCompareString";
        String secondaryCompareRegex = "secondaryCompareRegex";
        int desiredIndex = 1;
        int expected = 1;
        int actual = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex2_TPjY1() throws Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = {"primaryArray1", "primaryArray2"};
        String[] secondaryArray = {"secondaryArray1", "secondaryArray2"};
        String primaryCompareString = "primaryCompareString";
        String secondaryCompareRegex = "secondaryCompareRegex";
        int desiredIndex = 0;
        int expected = 0;
        int actual = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex3_iRPB2() throws Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = {"primaryArray1", "primaryArray2"};
        String[] secondaryArray = {"secondaryArray1", "secondaryArray2"};
        String primaryCompareString = "primaryCompareString";
        String secondaryCompareRegex = "secondaryCompareRegex";
        int desiredIndex = 2;
        int expected = -1;
        int actual = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_mQRU0() throws Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] nameArray = new String[10];
        String compareString = "test";
        int desiredIndex = 5;
        int actual = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assertEquals(5, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSpecificPoolEntry_nNVL0() throws Exception {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        ConstantPoolEntry constantPoolEntry = segmentConstantPool.getClassSpecificPoolEntry(1, 1, "TestClass");
        assertNotNull(constantPoolEntry);
    }
}