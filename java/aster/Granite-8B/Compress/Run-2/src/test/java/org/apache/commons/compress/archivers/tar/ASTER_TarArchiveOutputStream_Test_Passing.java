/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;

import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveOutputStream_Test_Passing {
@Mock
    private OutputStream outputStream;
@Mock
    private TarArchiveEntry entry;
@Mock
    private Map<String, String> headers;
private TarArchiveOutputStream tarArchiveOutputStream;
private boolean finished;
private ZipEncoding zipEncoding;
private static ZipEncoding ASCII = ZipEncodingHelper.getZipEncoding(StandardCharsets.US_ASCII);
private long currBytes;
private boolean haveUnclosedEntry;
private long currSize;
private byte[] recordBuf;
private boolean addPaxHeadersForNonAsciiNames;
TarArchiveOutputStream tararchiveoutputstream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePaxHeaders() throws IOException {
        tarArchiveOutputStream = new TarArchiveOutputStream(outputStream);
        String entryName = "entryName";
        when(entry.getName()).thenReturn(entryName);
        tarArchiveOutputStream.writePaxHeaders(entry, entryName, headers);
        verify(entry).getName();
        verify(outputStream).write(any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePaxHeaders_zVom0() throws IOException {
        final OutputStream os = mock(OutputStream.class);
        final TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(os);
        final Map<String, String> headers = new HashMap<>();
        headers.put("key1", "value1");
        headers.put("key2", "value2");
        final String entryName = "entryName";
        final TarArchiveEntry entry = mock(TarArchiveEntry.class);
        when(entry.getName()).thenReturn(entryName);
        when(entry.isPaxHeader()).thenReturn(false);
        tarArchiveOutputStream.writePaxHeaders(entry, entryName, headers);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePaxHeadersWithInvalidEntry_dfXE1_1() throws Exception {
        final OutputStream os = mock(OutputStream.class);
        final TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(os);
        final Map<String, String> headers = new HashMap<>();
        headers.put("key1", "value1");
        headers.put("key2", "value2");
        final String entryName = "entryName";
        final TarArchiveEntry entry = mock(TarArchiveEntry.class);
        when(entry.getName()).thenReturn(entryName);
        when(entry.isPaxHeader()).thenReturn(true);
        final IOException exception =
                assertThrows(IOException.class, () -> tarArchiveOutputStream.writePaxHeaders(entry, entryName, headers));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRecordSize_JwFY0() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out);
        int recordSize = tarArchiveOutputStream.getRecordSize();
        assertEquals(512, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRecordSizeWithBlockSize_lXeM1() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024);
        int recordSize = tarArchiveOutputStream.getRecordSize();
        assertEquals(1024, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRecordSizeWithBlockSizeAndRecordSize_iwrt2() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024, 2048);
        int recordSize = tarArchiveOutputStream.getRecordSize();
        assertEquals(2048, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRecordSizeWithBlockSizeAndEncoding_CWLG3() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024, "UTF-8");
        int recordSize = tarArchiveOutputStream.getRecordSize();
        assertEquals(512, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRecordSizeWithBlockSizeAndRecordSizeAndEncoding_jjsm4() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024, 2048, "UTF-8");
        int recordSize = tarArchiveOutputStream.getRecordSize();
        assertEquals(2048, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateArchiveEntry_UwMe0() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out);
        Path inputPath = null;
        String entryName = null;
        TarArchiveEntry actual = tarArchiveOutputStream.createArchiveEntry(inputPath, entryName);
        assertNotNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateArchiveEntryWithLinkOptions_pavp1() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out);
        Path inputPath = null;
        String entryName = null;
        LinkOption[] options = null;
        TarArchiveEntry actual = tarArchiveOutputStream.createArchiveEntry(inputPath, entryName, options);
        assertNotNull(actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWritten_OAwq0() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out);
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWrittenWithBlockSize_vTDq1() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024);
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWrittenWithEncoding_CMjR2() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, "UTF-8");
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWrittenWithBlockSizeAndRecordSize_SdNE3() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024, 2048);
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWrittenWithBlockSizeAndEncoding_sBkh4() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024, "UTF-8");
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWrittenWithBlockSizeRecordSizeAndEncoding_urFh5() throws Exception {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024, 2048, "UTF-8");
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
}