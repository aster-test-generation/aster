/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;

import org.apache.commons.io.file.attribute.FileTimes;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.Date;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Passing {
private Iterable<? extends SevenZMethodConfiguration> contentMethods;
private SevenZArchiveEntry sevenzarchiveentry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCrc_cBSe0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCreationDate_AVJC0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCreationDateBranchCoverage_bxjH2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNtfsTimeToJavaTime_XDrT0() {
    long ntfsTime = 1234567890L; // Replace with actual value
    Date expected = FileTimes.ntfsTimeToDate(ntfsTime);
    Date actual = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_YXTY0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.isDirectory();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItem_igaB0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_SSRy0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = new Date();
        entry.setCreationDate(creationDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasStream_JhhV0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.hasStream();
        assertFalse(entry.hasStream());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHasAccessDate_mUky0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean hasAccessDate = entry.getHasAccessDate();
        assertFalse(hasAccessDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetHasStream_hJIZ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setHasStream(true);
    assertTrue(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasWindowsAttributes_gvdI0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_iIfc0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_gwTN3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(1024);
        assertEquals(1024, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSize_LVSG4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(512);
        assertEquals(512, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_EMzB0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(100L);
        assertEquals(100L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithZero_cHnJ1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(0L);
        assertEquals(0L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithNegativeNumber_phKI2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(-100L);
        assertEquals(-100L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithMaximumLongValue_UaYK3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithMinimumLongValue_Rsmz4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_JgBi0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("file.txt");
        assertEquals(entry.getName().hashCode(), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_RMFs1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        assertEquals(0, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithDifferentName_yxxY2() {
        SevenZArchiveEntry entry1 = new SevenZArchiveEntry();
        entry1.setName("file1.txt");
        SevenZArchiveEntry entry2 = new SevenZArchiveEntry();
        entry2.setName("file2.txt");
        assertNotEquals(entry1.hashCode(), entry2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTime_bnTN0() {
        Date date = new Date();
        long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
        long expectedNtfsTime = FileTimes.toNtfsTime(date);
        assertEquals(expectedNtfsTime, ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDate_HnLN0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date accessDate = new Date();
        entry.setAccessDate(accessDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_bBFe0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date lastModifiedDate = new Date();
        entry.setLastModifiedDate(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAntiItem_jVeQ0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(true);
        assertTrue(entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAntiItemFalse_uMaj1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(false);
        assertFalse(entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAntiItemDefault_bDCk2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        assertFalse(entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasCrc_gaGK0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(true);
        assertTrue(entry.getHasCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributes_FStL0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int windowsAttributes = entry.getWindowsAttributes();
        assertEquals(0, windowsAttributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWindowsAttributes_qaEE0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(0);
        assertEquals(0, entry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWindowsAttributesWithNegativeValue_Oipm1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(-1);
        assertEquals(-1, entry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWindowsAttributesWithMaxValue_urVr2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, entry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWindowsAttributesWithMinValue_OBzd3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, entry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWindowsAttributesWithRandomValue_xzpn4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int randomValue = (int) (Math.random() * Integer.MAX_VALUE);
        entry.setWindowsAttributes(randomValue);
        assertEquals(randomValue, entry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrcValue_fWVv0_NARJ0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrcValue(1234567890L);
        assertEquals(1234567890L, entry.getCrcValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcValue_akBg0_ZeXz0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(1234567890L);
        assertEquals(1234567890L, entry.getCompressedCrcValue());
    }
}