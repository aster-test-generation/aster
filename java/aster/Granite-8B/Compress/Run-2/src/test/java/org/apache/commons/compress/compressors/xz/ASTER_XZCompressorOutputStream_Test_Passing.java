/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.OutputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
public class Aster_XZCompressorOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWriteInt_jLeQ0() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        XZCompressorOutputStream xzCompressorOutputStream = new XZCompressorOutputStream(mockOutputStream);
        int b = 1;
        xzCompressorOutputStream.write(b);
        verify(mockOutputStream).write(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_ScRA0() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        XZCompressorOutputStream xzCompressorOutputStream = new XZCompressorOutputStream(mockOutputStream);
        xzCompressorOutputStream.close();
        verify(mockOutputStream).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithPreset_FhgW1() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        int preset = 1;
        XZCompressorOutputStream xzCompressorOutputStream = new XZCompressorOutputStream(mockOutputStream, preset);
        xzCompressorOutputStream.close();
        verify(mockOutputStream).close();
    }
}