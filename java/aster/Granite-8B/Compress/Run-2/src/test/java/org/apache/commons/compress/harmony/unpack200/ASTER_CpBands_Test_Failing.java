/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.compress.harmony.unpack200.bytecode.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_WbFO0() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertNotNull(cpDescriptor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_xYnp1() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(0, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_XsAU2() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(1, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_UJTt3() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(2, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_NenI4() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(3, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_lbiN5() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(4, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_ymkb6() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(5, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_Oofu7() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(6, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_hYrE8() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(7, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_iziS9() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(8, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_kjAb10() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(9, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_dyKw11() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(10, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCpDescriptor_nrHa12() {
	CpBands cpBands = new CpBands(new Segment());
	String[] cpDescriptor = cpBands.getCpDescriptor();
	Assertions.assertEquals(11, cpDescriptor.length);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_gaEB0_1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertNotNull(cpFieldClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_gaEB0_2() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertNotEquals(0, cpFieldClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpClass_cuSi0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpClass = cpBands.getCpClass();
        assertNotNull(cpClass);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_GEfz0() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value("example");
        assertNotNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodDescriptor_MaTJ0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
        assertNotNull(cpMethodDescriptor);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFieldValue_sKen0() {
        CpBands cpBands = new CpBands(new Segment());
        CPFieldRef cpFieldRef = cpBands.cpFieldValue(0);
        assertNotNull(cpFieldRef);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCpIMethodClass_udsX0_1() {
		Segment segment = new Segment();
		CpBands cpBands = new CpBands(segment);
		String[] cpIMethodClass = cpBands.getCpIMethodClass();
		assertNotNull(cpIMethodClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCpIMethodClass_udsX0_2() {
		Segment segment = new Segment();
		CpBands cpBands = new CpBands(segment);
		String[] cpIMethodClass = cpBands.getCpIMethodClass();
		assertEquals(0, cpIMethodClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpInt_GbtI0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpInt = cpBands.getCpInt();
        assertNotNull(cpInt);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpLongValue_lRyR0() {
        CpBands cpBands = new CpBands(new Segment());
        CPLong cpLong = cpBands.cpLongValue(0);
        assertNotNull(cpLong);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpLongValue2_WOEu1() {
        CpBands cpBands = new CpBands(new Segment());
        CPLong cpLong = cpBands.cpLongValue(1);
        assertNotNull(cpLong);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValue_FpRJ0_1() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 0; // Replace with the appropriate index value
        CPClass cpClass = cpBands.cpClassValue(index);
        assertNotNull(cpClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValue_FpRJ0_2() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 0; // Replace with the appropriate index value
        CPClass cpClass = cpBands.cpClassValue(index);
        assertEquals("ExpectedClassName", cpClass.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValue1_zsaR0() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 0;
        CPUTF8 cpUTF8 = cpBands.cpSignatureValue(index);
        assertNotNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValue2_iFJx1() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 1;
        CPUTF8 cpUTF8 = cpBands.cpSignatureValue(index);
        assertNotNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValue3_nuxp2() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 2;
        CPUTF8 cpUTF8 = cpBands.cpSignatureValue(index);
        assertNotNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorTypeInts_mbwC0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpDescriptorTypeInts = cpBands.getCpDescriptorTypeInts();
        assertNotNull(cpDescriptorTypeInts);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_yHyS0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertNotNull(cpLong);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpSignature_Elqz0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = {"expected"};
        String[] actual = cpBands.getCpSignature();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue_wugh0() {
        CpBands cpBands = new CpBands(new Segment());
        String descriptor = "descriptor";
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(descriptor);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue2_HryW1() {
        CpBands cpBands = new CpBands(new Segment());
        String descriptor = "descriptor";
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(descriptor);
        assertEquals(0, cpNameAndType.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue3_EDYm2() {
        CpBands cpBands = new CpBands(new Segment());
        String descriptor = "descriptor";
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(descriptor);
        assertEquals("descriptor", cpNameAndType.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue13_lICw12() {
        CpBands cpBands = new CpBands(new Segment());
        String descriptor = "descriptor";
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(descriptor);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpSignature_Elqz0_fid1() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = {"expected"};
        String[] actual = cpBands.getCpSignature();
    assertNull(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_gaEB0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertNotNull(cpFieldClass);
        assertNotEquals(0, cpFieldClass.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCpIMethodClass_udsX0() {
		Segment segment = new Segment();
		CpBands cpBands = new CpBands(segment);
		String[] cpIMethodClass = cpBands.getCpIMethodClass();
		assertNotNull(cpIMethodClass);
		assertEquals(0, cpIMethodClass.length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpClassValue_FpRJ0() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 0; // Replace with the appropriate index value
        CPClass cpClass = cpBands.cpClassValue(index);
        assertNotNull(cpClass);
        assertEquals("ExpectedClassName", cpClass.getName());
    }
}