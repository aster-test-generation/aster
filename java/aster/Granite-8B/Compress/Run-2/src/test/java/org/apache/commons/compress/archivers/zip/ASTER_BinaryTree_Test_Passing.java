/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
public class Aster_BinaryTree_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDecodeInputStreamInt_FrCy0() throws IOException {
		final InputStream inputStream = mock(InputStream.class);
		final int totalNumberOfValues = 0;
		try {
			BinaryTree.decode(inputStream, totalNumberOfValues);
			fail("IllegalArgumentException expected but not thrown");
		} catch (final IllegalArgumentException e) {
		}
		verify(inputStream, times(1)).read();
		verifyNoMoreInteractions(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDecodeInputStreamInt2_NUNM1() throws IOException {
		final InputStream inputStream = mock(InputStream.class);
		final int totalNumberOfValues = 1;
		when(inputStream.read()).thenReturn(0);
		try {
			BinaryTree.decode(inputStream, totalNumberOfValues);
			fail("IOException expected but not thrown");
		} catch (final IOException e) {
		}
		verify(inputStream, times(2)).read();
		verifyNoMoreInteractions(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testDecodeInputStreamInt4_XibY3() throws IOException {
		final InputStream inputStream = mock(InputStream.class);
		final int totalNumberOfValues = 1;
		when(inputStream.read()).thenReturn(1);
		when(inputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(0);
		try {
			BinaryTree.decode(inputStream, totalNumberOfValues);
			fail("IOException expected but not thrown");
		} catch (final IOException e) {
		}
		verify(inputStream, times(2)).read();
		verify(inputStream, times(1)).read(any(byte[].class), anyInt(), anyInt());
		verifyNoMoreInteractions(inputStream);
}
}