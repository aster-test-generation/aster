/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;

import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.utils.Sets;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.SortedMap;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ArchiveStreamFactory_Test_Passing {
private volatile String entryEncoding;
@Mock
    private OutputStream out;
@Mock
    private ArchiveException archiveException;
@Mock
    private ArchiveStreamFactory archivestreamfactory;
@Mock
    private InputStream mockInputStream;
@Mock
	private InputStream in;
@Mock
    private OutputStream mockOutputStream;
@Mock
    private ArchiveStreamProvider mockArchiveStreamProvider;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateArchiveOutputStream() throws Exception {
        entryEncoding = "UTF-8";
        archivestreamfactory = new ArchiveStreamFactory(entryEncoding);
        when(archivestreamfactory.createArchiveOutputStream("archiverName", out, entryEncoding)).thenReturn(null);
        archivestreamfactory.createArchiveOutputStream("archiverName", out);
        verify(archivestreamfactory, times(1)).createArchiveOutputStream("archiverName", out, entryEncoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_rpWm0() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        OutputStream out = null;
        String archiverName = "test";
        ArchiveOutputStream actual = factory.createArchiveOutputStream(archiverName, out);
        assertNotNull(actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_validInput_returnsValidArchiveInputStream_1() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        // Mock the InputStream
        when(mockInputStream.available()).thenReturn(1024);
        // Call the method under test
        ArchiveInputStream archiveInputStream = archivestreamfactory.createArchiveInputStream("zip", mockInputStream, "UTF-8");
        // Assert that the correct ArchiveInputStream was returned
        assertNotNull(archiveInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_validInput_returnsValidArchiveInputStream_2() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        // Mock the InputStream
        when(mockInputStream.available()).thenReturn(1024);
        // Call the method under test
        ArchiveInputStream archiveInputStream = archivestreamfactory.createArchiveInputStream("zip", mockInputStream, "UTF-8");
        // Assert that the correct ArchiveInputStream was returned
        assertTrue(archiveInputStream instanceof ZipArchiveInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveInputStreamProviders_PtDG0_1() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        SortedMap<String, ArchiveStreamProvider> result = archiveStreamFactory.getArchiveInputStreamProviders();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveInputStreamProviders_PtDG0_2() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
        SortedMap<String, ArchiveStreamProvider> result = archiveStreamFactory.getArchiveInputStreamProviders();
        assertEquals(2, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveInputStreamProviders2_GPgV1_1() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> result = archiveStreamFactory.getArchiveInputStreamProviders();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveInputStreamProviders2_GPgV1_2() throws Exception {
        ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> result = archiveStreamFactory.getArchiveInputStreamProviders();
        assertEquals(2, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetInputStreamArchiveNames_cpKm0() throws Exception {
		ArchiveStreamFactory factory = new ArchiveStreamFactory();
		Set<String> result = factory.getInputStreamArchiveNames();
		Set<String> expected = Sets.newHashSet("ar", "arj", "zip", "tar", "jar", "cpio", "dump", "7z");
		assertEquals(expected, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetInputStreamArchiveNamesWithEncoding_sHNi1() throws Exception {
		ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
		Set<String> result = factory.getInputStreamArchiveNames();
		Set<String> expected = Sets.newHashSet("ar", "arj", "zip", "tar", "jar", "cpio", "dump", "7z");
		assertEquals(expected, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetInputStreamArchiveNamesWithNullEncoding_ZQxZ2() throws Exception {
		ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
		Set<String> result = factory.getInputStreamArchiveNames();
		Set<String> expected = Sets.newHashSet("ar", "arj", "zip", "tar", "jar", "cpio", "dump", "7z");
		assertEquals(expected, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetInputStreamArchiveNamesWithEmptyEncoding_rYnZ3() throws Exception {
		ArchiveStreamFactory factory = new ArchiveStreamFactory("");
		Set<String> result = factory.getInputStreamArchiveNames();
		Set<String> expected = Sets.newHashSet("ar", "arj", "zip", "tar", "jar", "cpio", "dump", "7z");
		assertEquals(expected, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveInputStreamProviders_CRFe0_1() throws Exception {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveInputStreamProviders_CRFe0_2() throws Exception {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
        assertTrue(result.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_AR_fLUo0() throws Exception {
        final OutputStream out = null;
        final ArchiveStreamFactory factory = new ArchiveStreamFactory();
        final ArArchiveOutputStream actual = factory.createArchiveOutputStream("AR", out);
        assertNotNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_ZIP_cwVj1() throws Exception {
        final OutputStream out = null;
        final ArchiveStreamFactory factory = new ArchiveStreamFactory();
        final ZipArchiveOutputStream actual = factory.createArchiveOutputStream("ZIP", out);
        assertNotNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_TAR_WlYn2() throws Exception {
        final OutputStream out = null;
        final ArchiveStreamFactory factory = new ArchiveStreamFactory();
        final TarArchiveOutputStream actual = factory.createArchiveOutputStream("TAR", out);
        assertNotNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_JAR_chRI3() throws Exception {
        final OutputStream out = null;
        final ArchiveStreamFactory factory = new ArchiveStreamFactory();
        final JarArchiveOutputStream actual = factory.createArchiveOutputStream("JAR", out);
        assertNotNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_CPIO_Ucmm4() throws Exception {
        final OutputStream out = null;
        final ArchiveStreamFactory factory = new ArchiveStreamFactory();
        final CpioArchiveOutputStream actual = factory.createArchiveOutputStream("CPIO", out);
        assertNotNull(actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_SEVEN_Z_nNBQ5() throws Exception {
        final OutputStream out = null;
        final ArchiveStreamFactory factory = new ArchiveStreamFactory();
        try {
            factory.createArchiveOutputStream("SEVEN_Z", out);
            fail("Expected StreamingNotSupportedException");
        } catch (final StreamingNotSupportedException e) {
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_withEncoding_DWxk6_1() throws Exception {
        final OutputStream out = null;
        final ArchiveStreamFactory factory = new ArchiveStreamFactory();
        final ZipArchiveOutputStream actual = factory.createArchiveOutputStream("ZIP", out, "UTF-8");
        assertNotNull(actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_withEncoding_DWxk6_2() throws Exception {
        final OutputStream out = null;
        final ArchiveStreamFactory factory = new ArchiveStreamFactory();
        final ZipArchiveOutputStream actual = factory.createArchiveOutputStream("ZIP", out, "UTF-8");
        assertEquals("UTF-8", actual.getEncoding());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_withNullEncoding_gTPh7_1() throws Exception {
        final OutputStream out = null;
        final ArchiveStreamFactory factory = new ArchiveStreamFactory();
        final ZipArchiveOutputStream actual = factory.createArchiveOutputStream("ZIP", out, null);
        assertNotNull(actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_withNullArchiveType_ylkl10() throws Exception {
        final OutputStream out = null;
        final ArchiveStreamFactory factory = new ArchiveStreamFactory();
        try {
            factory.createArchiveOutputStream(null, out);
            fail("Expected IllegalArgumentException");
        } catch (final IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getOutputStreamArchiveNamesTest_TVlk0() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> expected = Sets.newHashSet("ar", "zip", "tar", "jar", "cpio", "7z");
        assertEquals(expected, factory.getOutputStreamArchiveNames());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveOutputStreamProviders_xSEG0() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        SortedMap<String, ArchiveStreamProvider> result = factory.getArchiveOutputStreamProviders();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveOutputStreamProviders2_mbqq1() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("encoding");
        SortedMap<String, ArchiveStreamProvider> result = factory.getArchiveOutputStreamProviders();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGettingEntryEncodingWithNoEncodingSet_qaGb1() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        assertEquals(null, factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFindAvailableArchiveOutputStreamProviders_QwPE0_1() throws Exception {
        final SortedMap<String, ArchiveStreamProvider> map = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        assertNotNull(map);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFindAvailableArchiveOutputStreamProviders_QwPE0_2() throws Exception {
        final SortedMap<String, ArchiveStreamProvider> map = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        assertTrue(map.size() > 0);}
}