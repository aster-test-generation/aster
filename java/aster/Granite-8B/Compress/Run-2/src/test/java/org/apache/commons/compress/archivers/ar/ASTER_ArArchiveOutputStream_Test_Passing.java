/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.OutputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveOutputStream_Test_Passing {
private OutputStream out;
private ArArchiveOutputStream arArchiveOutputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Gtjw0_1() {
        ArArchiveEntry entry1 = new ArArchiveEntry("file1", 100L);
        ArArchiveEntry entry2 = new ArArchiveEntry("file2", 100L);
        ArArchiveEntry entry3 = new ArArchiveEntry("file1", 100L);
        assertEquals(entry1, entry3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_Gtjw0_2() {
        ArArchiveEntry entry1 = new ArArchiveEntry("file1", 100L);
        ArArchiveEntry entry2 = new ArArchiveEntry("file2", 100L);
        ArArchiveEntry entry3 = new ArArchiveEntry("file1", 100L);
        assertNotEquals(entry1, entry2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory_xExt1() {
        ArArchiveEntry entry = new ArArchiveEntry("file", 100L);
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_evAh2() {
        ArArchiveEntry entry = new ArArchiveEntry("file", 100L);
        assertNotNull(entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_cHTR3() {
        ArArchiveEntry entry = new ArArchiveEntry("file", 100L);
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_lGdh4() {
        ArArchiveEntry entry = new ArArchiveEntry("file", 100L);
        assertEquals(100L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_rbvk5() {
        ArArchiveEntry entry = new ArArchiveEntry("file", 100L);
        assertEquals(0, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_pPVc6_1() {
        ArArchiveEntry entry1 = new ArArchiveEntry("file1", 100L);
        ArArchiveEntry entry2 = new ArArchiveEntry("file2", 100L);
        ArArchiveEntry entry3 = new ArArchiveEntry("file1", 100L);
        assertEquals(entry1.hashCode(), entry3.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_pPVc6_2() {
        ArArchiveEntry entry1 = new ArArchiveEntry("file1", 100L);
        ArArchiveEntry entry2 = new ArArchiveEntry("file2", 100L);
        ArArchiveEntry entry3 = new ArArchiveEntry("file1", 100L);
        assertNotEquals(entry1.hashCode(), entry2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_FHIk7() {
        ArArchiveEntry entry = new ArArchiveEntry("file", 100L);
        assertEquals("file", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_ZPiU8() {
        ArArchiveEntry entry = new ArArchiveEntry("file", 100L);
        assertEquals(100L, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_rWIC9() {
        ArArchiveEntry entry = new ArArchiveEntry("file", 13318833188L);
        assertEquals(33188, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModified_JoAl10() {
        ArArchiveEntry entry = new ArArchiveEntry("file", 100L);
        assertNotNull(entry.getLastModified());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_pPVc6() {
        ArArchiveEntry entry1 = new ArArchiveEntry("file1", 100L);
        ArArchiveEntry entry2 = new ArArchiveEntry("file2", 100L);
        ArArchiveEntry entry3 = new ArArchiveEntry("file1", 100L);
        assertEquals(entry1.hashCode(), entry3.hashCode());
        assertNotEquals(entry1.hashCode(), entry2.hashCode());
    }
}