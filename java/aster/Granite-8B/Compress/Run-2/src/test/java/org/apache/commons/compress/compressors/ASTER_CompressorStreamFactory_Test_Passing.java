/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;

import org.apache.commons.compress.utils.Sets;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.Set;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetZstandard_ficq0() {
        assertEquals("zstd", CompressorStreamFactory.getZstandard());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBzip2_Cqdd0() {
        String expected = "bzip2";
        String actual = CompressorStreamFactory.getBzip2();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStreamCompressorNames_zPCs0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getInputStreamCompressorNames();
        assertEquals(Sets.newHashSet(CompressorStreamFactory.GZIP, CompressorStreamFactory.BROTLI, CompressorStreamFactory.BZIP2, CompressorStreamFactory.XZ, CompressorStreamFactory.LZMA, CompressorStreamFactory.PACK200, CompressorStreamFactory.DEFLATE, CompressorStreamFactory.SNAPPY_RAW, CompressorStreamFactory.SNAPPY_FRAMED, CompressorStreamFactory.Z, CompressorStreamFactory.LZ4_BLOCK, CompressorStreamFactory.LZ4_FRAMED, CompressorStreamFactory.ZSTANDARD, CompressorStreamFactory.DEFLATE64), compressorNames);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLZ4Framed_fwRz0() {
        String expected = "lz4-framed";
        String actual = CompressorStreamFactory.getLZ4Framed();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetGzip_ucPn0() {
        assertEquals("gz", CompressorStreamFactory.getGzip());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_1_tScV0() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_2_MyVi1() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false);
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_3_wgYQ2() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_4_MtTW3() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false, 2048);
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_5_LPGI4() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzma_NYfA0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        String lzma = factory.getLzma();
        assertEquals("lzma", lzma);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzmaWithNegativeMemoryLimit_AxvX3() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, -100);
        String lzma = factory.getLzma();
        assertEquals("lzma", lzma);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleton_gUyg0() {
        CompressorStreamFactory compressorStreamFactory = CompressorStreamFactory.getSingleton();
        assertNotNull(compressorStreamFactory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetZstandard_dvUd1() {
        String zstandard = CompressorStreamFactory.getZstandard();
        assertEquals("zstd", zstandard);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBzip2_mvmn2() {
        String bzip2 = CompressorStreamFactory.getBzip2();
        assertEquals("bzip2", bzip2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPack200_EPXn8() {
        String pack200 = CompressorStreamFactory.getPack200();
        assertEquals("pack200", pack200);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLZ4Block_nnoV9() {
        String lz4Block = CompressorStreamFactory.getLZ4Block();
        assertEquals("lz4-block", lz4Block);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflate_hXzU10() {
        String deflate = CompressorStreamFactory.getDeflate();
        assertEquals("deflate", deflate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSnappyFramed_hnvd11() {
        String snappyFramed = CompressorStreamFactory.getSnappyFramed();
        assertEquals("snappy-framed", snappyFramed);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflate64_nGgV12() {
        String deflate64 = CompressorStreamFactory.getDeflate64();
        assertEquals("deflate64", deflate64);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXz_lKAh14() {
        String xz = CompressorStreamFactory.getXz();
        assertEquals("xz", xz);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSnappyRaw_TkKT0() {
        String expected = "snappy-raw";
        String actual = CompressorStreamFactory.getSnappyRaw();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSnappyRawWithDecompressUntilEOF_TnRd1() {
        boolean decompressUntilEOF = true;
        CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF);
        String expected = "snappy-raw";
        String actual = factory.getSnappyRaw();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSnappyRawWithMemoryLimit_CdOV2() {
        int memoryLimitInKb = 1024;
        CompressorStreamFactory factory = new CompressorStreamFactory(false, memoryLimitInKb);
        String expected = "snappy-raw";
        String actual = factory.getSnappyRaw();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSnappyRawWithDecompressUntilEOFAndMemoryLimit_pVDB3() {
        boolean decompressUntilEOF = true;
        int memoryLimitInKb = 1024;
        CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF, memoryLimitInKb);
        String expected = "snappy-raw";
        String actual = factory.getSnappyRaw();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNames_IuKB0_3() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNames_IuKB0_4() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("xz"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNames_IuKB0_5() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("lzma"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNames_IuKB0_6() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("pack200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNames_IuKB0_7() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("deflate"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNames_IuKB0_8() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("snappy-framed"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNames_IuKB0_9() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("lz4-block"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNamesWithMemoryLimit_JzZu1_3() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("bzip2"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNamesWithMemoryLimit_JzZu1_4() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("xz"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNamesWithMemoryLimit_JzZu1_5() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("lzma"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNamesWithMemoryLimit_JzZu1_6() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("pack200"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNamesWithMemoryLimit_JzZu1_7() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("deflate"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNamesWithMemoryLimit_JzZu1_8() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("snappy-framed"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNamesWithMemoryLimit_JzZu1_9() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("lz4-block"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressUntilEOF_lEoJ0() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        Boolean result = factory.getDecompressUntilEOF();
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressUntilEOF_withMemoryLimit_hUkV1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        Boolean result = factory.getDecompressUntilEOF();
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getDeflate_Nrtm0() {
        assertEquals("deflate", CompressorStreamFactory.getDeflate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetDeflate64_eDLD0() {
        assertEquals("deflate64", CompressorStreamFactory.getDeflate64());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_TOmt6_iXAX0_1() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
        Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
        assertNotNull(outputStreamCompressorNames);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamCompressorNames_TOmt6_iXAX0_2() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
        Set<String> outputStreamCompressorNames = compressorStreamFactory.getOutputStreamCompressorNames();
        assertFalse(outputStreamCompressorNames.isEmpty());}
}