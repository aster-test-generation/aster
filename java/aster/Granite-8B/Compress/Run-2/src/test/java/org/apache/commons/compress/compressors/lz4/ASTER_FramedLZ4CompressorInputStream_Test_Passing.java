/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lz4;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
public class Aster_FramedLZ4CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_RGcX0() {
        byte[] signature = new byte[10];
        boolean result = FramedLZ4CompressorInputStream.matches(signature, 10);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches2_bMpy1() {
        byte[] signature = new byte[10];
        Arrays.fill(signature, (byte) 0x04);
        boolean result = FramedLZ4CompressorInputStream.matches(signature, 10);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches3_XiSb2() {
        byte[] signature = new byte[10];
        Arrays.fill(signature, (byte) 0x04);
        signature[4] = (byte) 0x22;
        boolean result = FramedLZ4CompressorInputStream.matches(signature, 10);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithDecompressConcatenatedTrue_hFow0() throws IOException {
        InputStream in = mock(InputStream.class);
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in, true);
        framedLZ4CompressorInputStream.close();
        verify(in, times(1)).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithDecompressConcatenatedFalse_VUuI1() throws IOException {
        InputStream in = mock(InputStream.class);
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in, false);
        framedLZ4CompressorInputStream.close();
        verify(in, times(1)).close();
    }
}