/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ByteCode_Test_Passing {
@Mock
	private CodeAttribute mockXmlAttribute;
@Mock
	private OperandManager mockOperandManager;
private ByteCode bytecode;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCode_opcodeIs0_WPZT0() {
        ByteCode byteCode = ByteCode.getByteCode(0);
        assertNotNull(byteCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCode_opcodeIs255_LXPr1() {
        ByteCode byteCode = ByteCode.getByteCode(255);
        assertNotNull(byteCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCode_opcodeIs127_GZbK2() {
        ByteCode byteCode = ByteCode.getByteCode(127);
        assertNotNull(byteCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_MOYO0() {
        ByteCode byteCode1 = new ByteCode(1);
        ByteCode byteCode2 = new ByteCode(2);
        ByteCode byteCode3 = new ByteCode(3);
        assertEquals(byteCode1.hashCode(), byteCode1.hashCode());
        assertNotEquals(byteCode1.hashCode(), byteCode2.hashCode());
        assertNotEquals(byteCode1.hashCode(), byteCode3.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetName_FJiJ0() {
        ByteCode byteCode = new ByteCode(0);
        String expectedName = byteCode.getByteCodeForm().getName();
        String actualName = byteCode.getName();
        assertEquals(expectedName, actualName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetNameWithZeroNestedEntries_gTTa2() {
        ClassFileEntry[] nestedEntries = new ClassFileEntry[0];
        ByteCode byteCode = new ByteCode(0, nestedEntries);
        String expectedName = byteCode.getByteCodeForm().getName();
        String actualName = byteCode.getName();
        assertEquals(expectedName, actualName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetNameWithNullNestedEntries_RPET3() {
        ByteCode byteCode = new ByteCode(0, null);
        String expectedName = byteCode.getByteCodeForm().getName();
        String actualName = byteCode.getName();
        assertEquals(expectedName, actualName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void fixUpByteCodeTargets(ByteCode byteCode, CodeAttribute codeAttribute) {
            }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewrite_Wypy0() {
        ByteCode byteCode = new ByteCode(0);
        int[] rewrite = byteCode.getRewrite();
        assertNotNull(rewrite);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewriteWithNested_gtNn1() {
        ClassFileEntry[] nested = new ClassFileEntry[0];
        ByteCode byteCode = new ByteCode(0, nested);
        int[] rewrite = byteCode.getRewrite();
        assertNotNull(rewrite);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_rfWi0() {
        ClassFileEntry[] nested = new ClassFileEntry[0];
        ByteCode byteCode = new ByteCode(0, nested);
        ClassFileEntry[] result = byteCode.getNestedClassFileEntries();
        assertEquals(nested, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpcode_GtFc0() {
        ByteCode byteCode = new ByteCode(0);
        int opcode = byteCode.getOpcode();
        assertEquals(0, opcode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasMultipleByteCodes_utVP0() {
        ByteCode byteCode1 = new ByteCode(0);
        ByteCode byteCode2 = new ByteCode(0, new ClassFileEntry[0]);
        Assertions.assertFalse(byteCode1.hasMultipleByteCodes());
        Assertions.assertFalse(byteCode2.hasMultipleByteCodes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNestedMustStartClassPool_RLtn0_fid1() {
		ByteCode byteCode = new ByteCode(0, new ClassFileEntry[]{});
		boolean result = byteCode.nestedMustStartClassPool();
		Assertions.assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_MOYO0_1() {
        ByteCode byteCode1 = new ByteCode(1);
        ByteCode byteCode2 = new ByteCode(2);
        ByteCode byteCode3 = new ByteCode(3);
        assertEquals(byteCode1.hashCode(), byteCode1.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_MOYO0_2() {
        ByteCode byteCode1 = new ByteCode(1);
        ByteCode byteCode2 = new ByteCode(2);
        ByteCode byteCode3 = new ByteCode(3);
        assertNotEquals(byteCode1.hashCode(), byteCode2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_MOYO0_3() {
        ByteCode byteCode1 = new ByteCode(1);
        ByteCode byteCode2 = new ByteCode(2);
        ByteCode byteCode3 = new ByteCode(3);
        assertNotEquals(byteCode1.hashCode(), byteCode3.hashCode());}
}