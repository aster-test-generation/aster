/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.objectweb.asm.Attribute;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingOptions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModificationTime_xyWg0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String expectedModificationTime = "2022-01-01"; // Replace with expected modification time
        packingOptions.setModificationTime(expectedModificationTime);
        String actualModificationTime = packingOptions.getModificationTime();
        assertEquals(expectedModificationTime, actualModificationTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getUnknownAttributePrototypes_1_Iozh0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        Attribute[] result = packingOptions.getUnknownAttributePrototypes();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVerbose_ZcMF0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        boolean verbose = packingOptions.isVerbose();
        assertTrue(verbose);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile_Ilse0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "example.txt";
        boolean result = packingOptions.isPassFile(passFileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile2_hlUA1() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "example.class";
        boolean result = packingOptions.isPassFile(passFileName);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile3_pxDs2() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "example/file.txt";
        boolean result = packingOptions.isPassFile(passFileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile4_iDMv3() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "example/file.class";
        boolean result = packingOptions.isPassFile(passFileName);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile5_fXNo4() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "example/file";
        boolean result = packingOptions.isPassFile(passFileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLogFile_Psca0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String expectedLogFile = ""; // Replace with the expected value
        String actualLogFile = packingOptions.getLogFile();
        assertEquals(expectedLogFile, actualLogFile);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStripDebug_CHJK0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(true);
        assertEquals(true, packingOptions.isStripDebug());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnknownClassAttributeAction_OquK0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        Map<String, String> map = new HashMap<>();
        String type = "someType";
        String defaultValue = "someDefaultValue";
        map.put(type, "someValue");
        String expected = "someValue";
        String actual = packingOptions.getUnknownClassAttributeAction(type);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUnknownFieldAttributeAction_Nrcu0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String type = "type";
        String result = packingOptions.getUnknownFieldAttributeAction(type);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSegmentLimit_UiJV0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        long segmentLimit = packingOptions.getSegmentLimit();
        assertEquals(0, segmentLimit);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnknownAttributeAction_TXlw0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String result = packingOptions.getUnknownAttributeAction();
        assertEquals("", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrder_uGEr0_1() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        packingOptions.setKeepFileOrder(false);
        assertTrue(packingOptions.isKeepFileOrder());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrder_uGEr0_2() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        packingOptions.setKeepFileOrder(false);
        assertFalse(packingOptions.isKeepFileOrder());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getUnknownMethodAttributeAction_Sorq0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String type = "type";
        String expected = "unknownAttributeAction";
        String actual = packingOptions.getUnknownMethodAttributeAction(type);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStripDebug_YPHv0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEffort_dWet0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        int effort = packingOptions.getEffort();
        assertEquals(0, effort);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHint_fUxR0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("keep");
        assertEquals("keep", packingOptions.getDeflateHint());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintWithTrue_JnUo1() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("true");
        assertEquals("true", packingOptions.getDeflateHint());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHintWithFalse_ysBr2() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("false");
        assertEquals("false", packingOptions.getDeflateHint());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSegmentLimit_yEtT0() throws Exception {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setSegmentLimit(100L);
    assertEquals(100L, packingOptions.getSegmentLimit());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModificationTimeWithInvalidTime_PDlR2() throws Exception {
    PackingOptions packingOptions = new PackingOptions();
    Exception exception = null;
    try {
        packingOptions.setModificationTime("invalid");
    } catch (IllegalArgumentException e) {
        exception = e;
    }
    assertNotNull(exception);
    assertEquals("Bad argument: -m invalid ? transmit modtimes should be either latest or keep (default)", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGzip_DaLf0_1() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setGzip(true);
        packingOptions.setGzip(false);
        assertTrue(packingOptions.isGzip());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGzip_DaLf0_2() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setGzip(true);
        packingOptions.setGzip(false);
        assertFalse(packingOptions.isGzip());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDeflateHint_nYPj0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String deflateHint = packingOptions.getDeflateHint();
        assertEquals("someDeflateHint", deflateHint);
    }
}