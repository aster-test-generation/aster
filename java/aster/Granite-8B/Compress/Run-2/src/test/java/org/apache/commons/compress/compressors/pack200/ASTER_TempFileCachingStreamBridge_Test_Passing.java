/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TempFileCachingStreamBridge_Test_Passing {
    private TempFileCachingStreamBridge tempFileCachingStreamBridge;
    private Path path;
@BeforeEach
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void tearDown_BmOb1() throws IOException {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateInputStream_jXJs2_1() throws IOException {
        InputStream inputStream = tempFileCachingStreamBridge.createInputStream();
        assertTrue(inputStream instanceof FilterInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateInputStream_jXJs2_2() throws IOException {
        InputStream inputStream = tempFileCachingStreamBridge.createInputStream();
        assertTrue(Files.exists(path));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateInputStreamWithNullPath_jlix5_1() throws Exception {
        path = null;
        IOException exception = new IOException("Path is null");
        IOException result = assertThrows(IOException.class, () -> tempFileCachingStreamBridge.createInputStream());}
}