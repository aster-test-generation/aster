/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreateFileTime_aMiB0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        FileTime result = x000A_NTFS.getCreateFileTime();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModifyFileTime_zTts0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        FileTime result = x000A_NTFS.getModifyFileTime();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccessFileTime_mFTq0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        FileTime result = x000A_NTFS.getAccessFileTime();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_LFZO0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        String result = x000A_NTFS.toString();
    assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_LFZO0_TVJI0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        x000A_NTFS.setAccessJavaTime(new Date());
        String result = x000A_NTFS.toString();
    assertNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataLength_LkvF0_fid1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipShort localFileDataLength = x000A_NTFS.getLocalFileDataLength();
        assertEquals(20, localFileDataLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_LFZO0_fid1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        String result = x000A_NTFS.toString();
        assertEquals("0x000A Zip Extra Field: Modify:[null] Access:[null] Create:[null] ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_kKHT2_1() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 0, 0, 0, 0, 0, 0, 0}, 0);
        assertEquals("0", zipEightByteInteger1.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_kKHT2_2() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 0, 0, 0, 0, 0, 0, 0}, 0);
        assertEquals("1", zipEightByteInteger2.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testCreateJavaTime_gSbu0_1() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		Date createJavaTime = x000A_NTFS.getCreateJavaTime();
		assertNotNull(createJavaTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testCreateJavaTime_gSbu0_2() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		Date createJavaTime = x000A_NTFS.getCreateJavaTime();
		assertEquals(1633387200000L, createJavaTime.getTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_sOcw2() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
	String result = zipEightByteInteger.toString();
	assertEquals("0", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testZipEightByteIntegerGetBytesLong_jstf8() {
        long value = 0L;
        byte[] expected = new byte[8];
        byte[] actual = ZipEightByteInteger.getBytes(value);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_LFZO0_TVJI0_fid1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        x000A_NTFS.setAccessJavaTime(new Date());
        String result = x000A_NTFS.toString();
        assertEquals("0x000A Zip Extra Field: Modify:[null] Access:[2021-04-19T17:44:22.000Z] Create:[null] ", result);
    }
}