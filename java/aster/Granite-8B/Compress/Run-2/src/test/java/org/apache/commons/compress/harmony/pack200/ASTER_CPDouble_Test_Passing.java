/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPDouble_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareTo_NTWq0() {
		CPDouble obj1 = new CPDouble(1.0);
		CPDouble obj2 = new CPDouble(2.0);
		int result = obj1.compareTo(obj2);
		assertEquals(-1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareTo_sxML1() {
		CPDouble obj1 = new CPDouble(1.0);
		CPDouble obj2 = new CPDouble(1.0);
		int result = obj1.compareTo(obj2);
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareTo_HWbS2() {
		CPDouble obj1 = new CPDouble(2.0);
		CPDouble obj2 = new CPDouble(1.0);
		int result = obj1.compareTo(obj2);
		assertEquals(1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareTo_CbjJ3() {
		CPDouble obj1 = new CPDouble(Double.MAX_VALUE);
		CPDouble obj2 = new CPDouble(Double.MIN_VALUE);
		int result = obj1.compareTo(obj2);
		assertEquals(1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareTo_RmcJ4() {
		CPDouble obj1 = new CPDouble(Double.MIN_VALUE);
		CPDouble obj2 = new CPDouble(Double.MAX_VALUE);
		int result = obj1.compareTo(obj2);
		assertEquals(-1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareTo_zFQW5() {
		CPDouble obj1 = new CPDouble(Double.NaN);
		CPDouble obj2 = new CPDouble(Double.NaN);
		int result = obj1.compareTo(obj2);
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareTo_Syhx6() {
		CPDouble obj1 = new CPDouble(Double.NaN);
		CPDouble obj2 = new CPDouble(1.0);
		int result = obj1.compareTo(obj2);
		assertTrue(Double.isNaN(result));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareTo_DHXz7() {
		CPDouble obj1 = new CPDouble(1.0);
		CPDouble obj2 = new CPDouble(Double.NaN);
		int result = obj1.compareTo(obj2);
		assertTrue(Double.isNaN(result));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareTo_OTDs8() {
		CPDouble obj1 = new CPDouble(Double.NaN);
		CPDouble obj2 = new CPDouble(Double.NaN);
		int result = obj1.compareTo(obj2);
		assertTrue(Double.isNaN(result));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDouble_EUDn0() {
        CPDouble cpDouble = new CPDouble(10.5);
        assertEquals(10.5, cpDouble.getDouble(), 0.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDoubleWithZero_FRup1() {
        CPDouble cpDouble = new CPDouble(0.0);
        assertEquals(0.0, cpDouble.getDouble(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDoubleWithNegativeValue_IJsD2() {
        CPDouble cpDouble = new CPDouble(-10.5);
        assertEquals(-10.5, cpDouble.getDouble(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDoubleWithLargeValue_mzrL4() {
        CPDouble cpDouble = new CPDouble(10000000000.0);
        assertEquals(10000000000.0, cpDouble.getDouble(), 0.0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDoubleWithSmallValue_sqCN5() {
        CPDouble cpDouble = new CPDouble(0.00000000001);
        assertEquals(0.00000000001, cpDouble.getDouble(), 0.0);
    }
}