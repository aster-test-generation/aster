/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum_pEFz0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum2_gkRr1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum4_SdJj3() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry(null, "entryName", (LinkOption[]) null);
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum5_MAAb4() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, null, "entryName", (LinkOption[]) null);
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum6_qGVI5() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum7_RuFb6() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum9_wsQI8() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime_pnNG0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime6_ScHI5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime7_YJSu6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime9_zKlZ8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID_uRAt0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(1L);
        assertEquals(1L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithNegativeValue_GRwO1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(-1L);
        assertEquals(-1L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithZeroValue_muje2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(0L);
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithMaxValue_MDbJ3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithMinValue_IuPy4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignmentBoundary_chYa0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(512, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignmentBoundary4_XmPK3() throws IOException {
        Path inputPath = null;
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, inputPath, "entryName");
        assertEquals(512, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignmentBoundary5_vWxf4() throws IOException {
        Path inputPath = null;
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, inputPath, "entryName");
        assertEquals(512, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignmentBoundary6_QprI5() throws IOException {
        File inputFile = null;
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, inputFile, "entryName");
        assertEquals(512, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignmentBoundary8_tGja7() {
        File inputFile = null;
        CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
        assertEquals(512, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetName_DnGM0() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
		assertEquals("name", entry.getName());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetName4_WDUO3() throws IOException {
		CpioArchiveEntry entry = new CpioArchiveEntry(null, "name", null);
		assertEquals("name", entry.getName());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetName5_UVIb4() throws IOException {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, null, "name", null);
		assertEquals("name", entry.getName());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetName6_KnsB5() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("name"), "name");
		assertEquals("name", entry.getName());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetName8_ToAK7() {
		CpioArchiveEntry entry = new CpioArchiveEntry(new File("name"), "name");
		assertEquals("name", entry.getName());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNetworkWithModeSetToC_ISNWK_wSFe0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(CpioConstants.C_ISNWK);
        assertTrue(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNetworkWithModeSetToNonC_ISNWKValue_WJuK1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(CpioConstants.C_ISREG);
        assertFalse(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode_kcga0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setInode(1L);
        assertEquals(1L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInodeWithNegativeNumber_WSmV1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setInode(-1L);
        assertEquals(-1L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInodeWithZero_tJsY2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setInode(0L);
        assertEquals(0L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInodeWithMaxValue_RwJH3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setInode(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInodeWithMinValue_kYkF4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setInode(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj_rnOs0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj6_phOf5() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj7_iVbR6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals(0L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj9_gGsZ8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMaj_PAYt0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setRemoteDeviceMaj(1L);
        assertEquals(1L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMajWithNegativeValue_XWwb1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setRemoteDeviceMaj(-1L);
        assertEquals(-1L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMajWithZeroValue_dMGt2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setRemoteDeviceMaj(0L);
        assertEquals(0L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMajWithMaxValue_eAXg3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setRemoteDeviceMaj(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMajWithMinValue_uKkM4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setRemoteDeviceMaj(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_jAHm0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertFalse(entry.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_zpUD1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertFalse(entry.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_YxuY2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertTrue(entry.equals(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameName_KHQg3() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name", 0L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name", 0L);
        assertTrue(entry1.equals(entry2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_pjRd4() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name1", 0L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name2", 0L);
        assertFalse(entry1.equals(entry2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullName_Cfnk5() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, null, 0L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, null, 0L);
        assertTrue(entry1.equals(entry2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentSize_TZCq6() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name", 10L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name", 20L);
        assertFalse(entry1.equals(entry2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithMode_pCyx0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(0100400);
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithModeAndName_NSmI1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        entry.setMode(0100400);
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithModeAndSize_uFwP2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 100);
        entry.setMode(0100400);
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithModeAndFileAndName_FiuI7() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, File.createTempFile("test", "test"), "test");
        entry.setMode(0100400);
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDeviceMin_tpAl0() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		assertEquals(0, entry.getRemoteDeviceMin());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDeviceMin2_ZrmY1() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
		entry.setDeviceMaj(0);
		entry.setDeviceMin(0);
		assertEquals(0, entry.getRemoteDeviceMin());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDeviceMin6_pJFt5() throws IOException {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
		entry.setRemoteDeviceMin(0);
		assertEquals(0, entry.getRemoteDeviceMin());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDeviceMin7_UUYO6() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
		assertEquals(0, entry.getRemoteDeviceMin());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDeviceMin8_VIng7() {
		CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
		assertEquals(0, entry.getRemoteDeviceMin());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_pAwD0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        Date date = new Date(1000 * entry.getTime());
        assertEquals(date, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink_fQtq0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDevice_WcFS0() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		long result = entry.getRemoteDevice();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDevice2_RJdS1() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
		long result = entry.getRemoteDevice();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDevice3_mgkA2() {
		CpioArchiveEntry entry = new CpioArchiveEntry("name");
		long result = entry.getRemoteDevice();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDevice6_pRPo5() {
		short format = (short) 0;
		CpioArchiveEntry entry = new CpioArchiveEntry(format, "name");
		long result = entry.getRemoteDevice();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDevice7_ZjeJ6() {
		short format = (short) 0;
		File inputFile = null;
		String entryName = "entryName";
		CpioArchiveEntry entry = new CpioArchiveEntry(format, inputFile, entryName);
		long result = entry.getRemoteDevice();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDevice8_zPEi7() {
		String name = "name";
		long size = 0L;
		CpioArchiveEntry entry = new CpioArchiveEntry(name, size);
		long result = entry.getRemoteDevice();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDevice9_tPNa8() {
		File inputFile = new File("path/to/file");
		String entryName = "entryName";
		CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
		long result = entry.getRemoteDevice();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID_atUv0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID6_IKUb5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID7_oAci6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID9_xALQ8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMaj_VNFK0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        assertEquals(0, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat6_vjeG5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("file"), "entryName");
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat8_jXNJ7() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "entryName");
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksum_NvEt0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(1234567890L);
        assertEquals(1234567890L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithNegativeValue_HTqk1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(-1234567890L);
        assertEquals(4294967296L - 1234567890L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithZeroValue_OXJL2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(0L);
        assertEquals(0L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithMaxValue_NGtK3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(4294967295L);
        assertEquals(4294967295L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithMaxValuePlusOne_mXmH4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(4294967296L);
        assertEquals(0L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithMaxValuePlusTwo_pwSw5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(4294967297L);
        assertEquals(1L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_1_ITFv0() {
        CpioArchiveEntry instance = new CpioArchiveEntry((short) 0, "name", 0L);
        long expResult = 0L;
        long result = instance.getMode();
        assertEquals(expResult, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevice_cFVW0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 1L);
        long device = entry.getDevice();
        assertEquals(0L, device);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDeviceMin_oOin0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDeviceMin2_wjyS1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDeviceMin4_DDWC3() throws IOException {
        Path inputPath = null;
        String entryName = "entryName";
        LinkOption[] options = new LinkOption[0];
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, inputPath, entryName, options);
        assertEquals(0, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDeviceMin5_FseK4() throws IOException {
        short format = 0;
        Path inputPath = null;
        String entryName = "entryName";
        LinkOption[] options = new LinkOption[0];
        CpioArchiveEntry entry = new CpioArchiveEntry(format, inputPath, entryName, options);
        assertEquals(0, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDeviceMin6_rnpt5() {
        short format = 0;
        CpioArchiveEntry entry = new CpioArchiveEntry(format, "name");
        assertEquals(0, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDeviceMin7_KrGh6() {
        short format = 0;
        File inputFile = null;
        String entryName = "entryName";
        CpioArchiveEntry entry = new CpioArchiveEntry(format, inputFile, entryName);
        assertEquals(0, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetDeviceMin9_Hdbc8() {
        File inputFile = null;
        String entryName = "entryName";
        CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
        assertEquals(0, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount1_KOTL0() {
        CpioArchiveEntry cut = new CpioArchiveEntry((short) 0);
        cut.setName(null);
        assertEquals(0, cut.getHeaderPadCount((Charset) null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount2_TQFE1() {
        CpioArchiveEntry cut = new CpioArchiveEntry((short) 0);
        cut.setName("abc");
        assertEquals(0, cut.getHeaderPadCount((Charset) null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount5_FvTJ4() {
        CpioArchiveEntry cut = new CpioArchiveEntry((short) 0);
        cut.setName("abc");
        assertEquals(1, cut.getHeaderPadCount((Charset) null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount18_LPiJ17() {
        CpioArchiveEntry cut = new CpioArchiveEntry((short) 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPipeWithModeSetToFifo_zXbp0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(010000);
        assertTrue(entry.isPipe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPipeWithModeNotSetToFifo_npOG1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(010040);
        assertFalse(entry.isPipe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize_HEGD0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        assertEquals(110, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize6_EhXy5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("file"), "name");
        assertEquals(110, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize8_snvE7() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "name");
        assertEquals(110, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_ezmm0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setName("newName");
        assertEquals("newName", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithNull_tfAu1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setName(null);
        assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithEmpty_brIY2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setName("");
        assertEquals("", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithTab_nxsz4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setName("\t");
        assertEquals("\t", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithNewline_MLzg5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setName("\n");
        assertEquals("\n", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithCarriageReturn_TtAR6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setName("\r");
        assertEquals("\r", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithTabAndNewline_sTxM7() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setName("\t\n");
        assertEquals("\t\n", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithTabAndCarriageReturn_uuEC8() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setName("\t\r");
        assertEquals("\t\r", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithNewlineAndCarriageReturn_UZhV9() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setName("\n\r");
        assertEquals("\n\r", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithTabNewlineAndCarriageReturn_BFim10() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setName("\t\n\r");
        assertEquals("\t\n\r", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFileWithModeSetToRegularFile_wAwF0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(0100644);
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFileWithModeSetToNonRegularFile_Jyhx1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(0100755);
        assertTrue(!entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_ADBV0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setSize(0);
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize1_lyOh1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0);
        entry.setSize(0);
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize5_VKes5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        entry.setSize(0);
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize6_BTaq6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        entry.setSize(0);
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize8_wvBT8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        entry.setSize(0);
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice_BPtT0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(1L);
        assertEquals(1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice2_QPZO1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "", 0L);
        entry.setDevice(1L);
        assertEquals(1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice3_tQBV2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("");
        entry.setDevice(1L);
        assertEquals(1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice8_XHRc7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("", 0L);
        entry.setDevice(1L);
        assertEquals(1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice9_Vmon8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File(""), "");
        entry.setDevice(1L);
        assertEquals(1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode_DYxy0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_UsqQ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(1065353216, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime_GDbg0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setTime(1234567890L);
        assertEquals(1234567890L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithNegativeTime_MOFZ1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setTime(-1234567890L);
        assertEquals(-1234567890L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithZeroTime_rKfi2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setTime(0L);
        assertEquals(0L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithMaxTime_vJVz3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setTime(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithMinTime_Ived4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setTime(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDataPadCount_withFormatZero_returnsZero_wSAm0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        int result = entry.getDataPadCount();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDataPadCount_withZeroSize_returnsZero_FGFb2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        int result = entry.getDataPadCount();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDataPadCount_withNonZeroSize_returnsNonZeroValue_lyjZ3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 10);
        int result = entry.getDataPadCount();
        assertTrue(result > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetHeaderPadCount_bzEf0() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		int result = entry.getHeaderPadCount(0L);
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetHeaderPadCount2_yMFc1() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "", 0L);
		int result = entry.getHeaderPadCount(0L);
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetHeaderPadCount3_RUbu2() {
		CpioArchiveEntry entry = new CpioArchiveEntry("");
		int result = entry.getHeaderPadCount(1L);
		assertEquals(1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount_gLyU0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount2_XBuz1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount6_lMzY5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount7_YWzE6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount8_veJe7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name",1L);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount9_OxdK8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetRemoteDevice_oxqX0() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		entry.setRemoteDevice(1L);
		assertEquals(1L, entry.getRemoteDevice());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetRemoteDevice_negative_Nidm1() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		entry.setRemoteDevice(0L);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetRemoteDevice_zero_tohm3() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		entry.setRemoteDevice(0L);
		assertEquals(0L, entry.getRemoteDevice());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMaj_kCBt0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setDeviceMaj(1L);
        assertEquals(1L, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMaj2_EHsh1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setDeviceMaj(0L);
        assertEquals(0L, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMaj3_EXVR2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setDeviceMaj(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMaj4_Qase3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setDeviceMaj(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getDeviceMaj());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGID_UGek0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        long gid = entry.getGID();
        assertEquals(0L, gid);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_dJBt0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_lDZd1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 1L);
        assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_ENmU5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_kzve6() {
        File inputFile = new File("file");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, inputFile, "entryName");
        assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_EZOJ8() {
        File inputFile = new File("file");
        CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
        assertEquals(1, entry.getNumberOfLinks());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDevice_ZsHw0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertFalse(entry.isCharacterDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDevice2_tZWq1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 32768);
        assertTrue(entry.isCharacterDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMin_BCoJ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setRemoteDeviceMin(10L);
        assertEquals(10L, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinWithFile_ncix2() {
        File file = new File("file");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "name");
        entry.setRemoteDeviceMin(10L);
        assertEquals(10L, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinWithFormatAndName_QpzU3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        entry.setRemoteDeviceMin(10L);
        assertEquals(10L, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignmentBoundary2_AmzG1_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10L);
        assertEquals(512, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignmentBoundary3_ANZP2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(512, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDeviceMin6_pJFt5_fid1() throws IOException {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
		assertEquals(0, entry.getRemoteDeviceMin());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDevice4_tIhm3() throws IOException {
		Path inputPath = null;
		String entryName = "entryName";
		LinkOption[] options = new LinkOption[0];
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, inputPath, entryName, options);
		long result = entry.getRemoteDevice();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDevice5_Jpmp4() throws IOException {
		short format = (short) 0;
		Path inputPath = null;
		String entryName = "entryName";
		LinkOption[] options = new LinkOption[0];
		CpioArchiveEntry entry = new CpioArchiveEntry(format, inputPath, entryName, options);
		long result = entry.getRemoteDevice();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetRemoteDevice9_tPNa8_fid1() {
		File inputFile = null;
		String entryName = "entryName";
		CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
		long result = entry.getRemoteDevice();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat3_HmCo2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFormat7_vBYS6_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 1L);
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderSize3_vXaz2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(106, entry.getHeaderSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDataPadCount_withNonZeroFormat_returnsNonZeroValue_avhD1_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        int result = entry.getDataPadCount();
        assertTrue(result > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetHeaderPadCount3_RUbu2_fid1() {
		CpioArchiveEntry entry = new CpioArchiveEntry("");
		int result = entry.getHeaderPadCount(0L);
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount3_BrOE2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderPadCount8_veJe7_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetRemoteDevice_negative_Nidm1_fid1() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		try {
			entry.setRemoteDevice(-1L);
			fail("Expected IllegalArgumentException");
		} catch (IllegalArgumentException e) {
		}
	}
}