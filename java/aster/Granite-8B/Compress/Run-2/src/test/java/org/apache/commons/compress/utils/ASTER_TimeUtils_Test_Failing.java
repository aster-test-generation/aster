/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithNegativeTime_gcqU1_fid1() {
        FileTime time = FileTime.fromMillis(-1);
        boolean result = TimeUtils.isUnixTime(time);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeWithLargeTime_dvwx2_fid1() {
        FileTime time = FileTime.fromMillis(Long.MAX_VALUE);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_riRq0_fid1() {
        long javaTime = 1633636800000L; // Example Java time
        long expectedNtfsTime = 116444736000000000L; // Example expected NTFS time
        long actualNtfsTime = TimeUtils.toNtfsTime(javaTime);
        assertEquals(expectedNtfsTime, actualNtfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToDate_hMHt0() {
        long ntfsTime = 1633832800000L; // Example NTFS time
        Date expectedDate = new Date(1633832800000L); // Example expected date
        Date actualDate = TimeUtils.ntfsTimeToDate(ntfsTime);
        assertEquals(expectedDate, actualDate);
    }
}