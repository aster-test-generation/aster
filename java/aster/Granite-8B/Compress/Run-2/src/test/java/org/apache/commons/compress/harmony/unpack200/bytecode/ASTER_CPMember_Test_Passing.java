/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_xapT0() throws Exception {
        CPMember cpMember = new CPMember(new CPUTF8("name"), new CPUTF8("descriptor"), 1L, new ArrayList<>());
        assertTrue(cpMember.equals(cpMember));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_hekH1() throws Exception {
        CPMember cpMember = new CPMember(new CPUTF8("name"), new CPUTF8("descriptor"), 1L, new ArrayList<>());
        assertFalse(cpMember.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_vUrb2() throws Exception {
        CPMember cpMember = new CPMember(new CPUTF8("name"), new CPUTF8("descriptor"), 1L, new ArrayList<>());
        assertFalse(cpMember.equals(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_ROry3() throws Exception {
        CPMember cpMember1 = new CPMember(new CPUTF8("name1"), new CPUTF8("descriptor"), 1L, new ArrayList<>());
        CPMember cpMember2 = new CPMember(new CPUTF8("name2"), new CPUTF8("descriptor"), 1L, new ArrayList<>());
        assertFalse(cpMember1.equals(cpMember2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentDescriptor_oLIh4() throws Exception {
        CPMember cpMember1 = new CPMember(new CPUTF8("name"), new CPUTF8("descriptor1"), 1L, new ArrayList<>());
        CPMember cpMember2 = new CPMember(new CPUTF8("name"), new CPUTF8("descriptor2"), 1L, new ArrayList<>());
        assertFalse(cpMember1.equals(cpMember2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentFlags_NDpa5() throws Exception {
        CPMember cpMember1 = new CPMember(new CPUTF8("name"), new CPUTF8("descriptor"), 1L, new ArrayList<>());
        CPMember cpMember2 = new CPMember(new CPUTF8("name"), new CPUTF8("descriptor"), 2L, new ArrayList<>());
        assertFalse(cpMember1.equals(cpMember2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentAttributes_WDdZ6() throws Exception {
        CPMember cpMember1 = new CPMember(new CPUTF8("name"), new CPUTF8("descriptor"), 1L, new ArrayList<>());
        CPMember cpMember2 = new CPMember(new CPUTF8("name"), new CPUTF8("descriptor"), 1L, new ArrayList<>());
        assertFalse(cpMember1.equals(cpMember2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameAttributes_pRoC7() throws Exception {
        CPMember cpMember1 = new CPMember(new CPUTF8("name"), new CPUTF8("descriptor"), 1L, new ArrayList<>());
        CPMember cpMember2 = new CPMember(new CPUTF8("name"), new CPUTF8("descriptor"), 1L, new ArrayList<>());
        assertTrue(cpMember1.equals(cpMember2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_tRLi0() throws Exception {
        CPUTF8 name = new CPUTF8("example");
        CPUTF8 descriptor = new CPUTF8("exampleDescriptor");
        long flags = 123456789L;
        List<Attribute> attributes = new ArrayList<>();
        CPMember cpMember = new CPMember(name, descriptor, flags, attributes);
        String expected = "CPMember: example(exampleDescriptor)";
        String actual = cpMember.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCPUTF8_adPp0_3() throws Exception {
		CPUTF8 utf81 = new CPUTF8("string1");
		CPUTF8 utf82 = new CPUTF8("string2", 1);
		assertEquals(1, utf82.getGlobalIndex());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_BdgW0() throws Exception {
    CPUTF8 utf81 = new CPUTF8("string1");
    CPUTF8 utf82 = new CPUTF8("string2", 1);
    CPMember member1 = new CPMember(utf81, utf82, 1L, new ArrayList<>());
    CPMember member2 = new CPMember(utf81, utf82, 1L, new ArrayList<>());
    assertEquals(member1.hashCode(), member2.hashCode());
}
}