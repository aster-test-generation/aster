/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.HashSet;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullElements_XrHs0() {
        HashSet<String> set = Sets.newHashSet((String) null);
        assertFalse(set.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithOneElement_ZbDV1_1() {
        HashSet<Integer> set = Sets.newHashSet(1);
        assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithOneElement_ZbDV1_2() {
        HashSet<Integer> set = Sets.newHashSet(1);
        assertTrue(set.contains(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithMultipleElements_iOXD2_1() {
        HashSet<String> set = Sets.newHashSet("a", "b", "c");
        assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithMultipleElements_iOXD2_2() {
        HashSet<String> set = Sets.newHashSet("a", "b", "c");
        assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithMultipleElements_iOXD2_3() {
        HashSet<String> set = Sets.newHashSet("a", "b", "c");
        assertTrue(set.contains("b"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithMultipleElements_iOXD2_4() {
        HashSet<String> set = Sets.newHashSet("a", "b", "c");
        assertTrue(set.contains("c"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithDuplicateElements_UDoz3_1() {
        HashSet<Integer> set = Sets.newHashSet(1, 2, 1);
        assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithDuplicateElements_UDoz3_2() {
        HashSet<Integer> set = Sets.newHashSet(1, 2, 1);
        assertTrue(set.contains(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithDuplicateElements_UDoz3_3() {
        HashSet<Integer> set = Sets.newHashSet(1, 2, 1);
        assertTrue(set.contains(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullAndDuplicateElements_SYlT4_1() {
        HashSet<Object> set = Sets.newHashSet(null, "a", null, "b", "a");
        assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullAndDuplicateElements_SYlT4_2() {
        HashSet<Object> set = Sets.newHashSet(null, "a", null, "b", "a");
        assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullAndDuplicateElements_SYlT4_3() {
        HashSet<Object> set = Sets.newHashSet(null, "a", null, "b", "a");
        assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullAndDuplicateElements_SYlT4_4() {
        HashSet<Object> set = Sets.newHashSet(null, "a", null, "b", "a");
        assertTrue(set.contains("b"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEmptyArray_ZoWz5() {
        HashSet<String> set = Sets.newHashSet();
        assertTrue(set.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithOneElement_ZbDV1() {
        HashSet<Integer> set = Sets.newHashSet(1);
        assertEquals(1, set.size());
        assertTrue(set.contains(1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithMultipleElements_iOXD2() {
        HashSet<String> set = Sets.newHashSet("a", "b", "c");
        assertEquals(3, set.size());
        assertTrue(set.contains("a"));
        assertTrue(set.contains("b"));
        assertTrue(set.contains("c"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithDuplicateElements_UDoz3() {
        HashSet<Integer> set = Sets.newHashSet(1, 2, 1);
        assertEquals(2, set.size());
        assertTrue(set.contains(1));
        assertTrue(set.contains(2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullAndDuplicateElements_SYlT4() {
        HashSet<Object> set = Sets.newHashSet(null, "a", null, "b", "a");
        assertEquals(3, set.size());
        assertTrue(set.contains(null));
        assertTrue(set.contains("a"));
        assertTrue(set.contains("b"));
    }
}