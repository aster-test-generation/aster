/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTableAttribute_Test_Passing {
	{
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_BPNd0() throws Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("name")}, new CPUTF8[]{new CPUTF8("descriptor")}, new int[]{1});
        String result = attribute.toString();
        assertEquals("LocalVariableTable: 1 variables", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetStartPCs_RjXb0_1() throws Exception {
		LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("test")}, new CPUTF8[]{new CPUTF8("int")}, new int[]{1});
		int[] startPCs = attribute.getStartPCs();
		Assertions.assertEquals(1, startPCs.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetStartPCs_RjXb0_2() throws Exception {
		LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("test")}, new CPUTF8[]{new CPUTF8("int")}, new int[]{1});
		int[] startPCs = attribute.getStartPCs();
		Assertions.assertEquals(1, startPCs[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenumberWithNegativeLength_dtTZ2() throws Pack200Exception {
        int localVariableTableLength = 1;
        int[] startPcs = {1};
        int[] lengths = {1};
        CPUTF8[] names = {new CPUTF8("name")};
        CPUTF8[] descriptors = {new CPUTF8("descriptor")};
        int[] indexes = {1};
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
        List<Integer> byteCodeOffsets = new ArrayList<>();
        byteCodeOffsets.add(-1);
        try {
            attribute.renumber(byteCodeOffsets);
            fail("Expected Pack200Exception");
        } catch (Pack200Exception e) {
            assertEquals("Error renumbering bytecode indexes", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenumberWithStopIndexGreaterThanOffsetsSize_QmHp3() throws Pack200Exception {
        int localVariableTableLength = 1;
        int[] startPcs = {1};
        int[] lengths = {1};
        CPUTF8[] names = {new CPUTF8("name")};
        CPUTF8[] descriptors = {new CPUTF8("descriptor")};
        int[] indexes = {1};
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(localVariableTableLength, startPcs, lengths, names, descriptors, indexes);
        List<Integer> byteCodeOffsets = new ArrayList<>();
        byteCodeOffsets.add(10);
        try {
            attribute.renumber(byteCodeOffsets);
            fail("Expected Pack200Exception");
        } catch (Pack200Exception e) {
            assertEquals("Error renumbering bytecode indexes", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_vwAr0_3() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("name")}, new CPUTF8[]{new CPUTF8("descriptor")}, new int[]{1});
        ClassConstantPool pool = new ClassConstantPool();
        localVariableTableAttribute.resolve(pool);
        assertEquals(1, pool.indexOf(new CPUTF8("name")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_vwAr0_4() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("name")}, new CPUTF8[]{new CPUTF8("descriptor")}, new int[]{1});
        ClassConstantPool pool = new ClassConstantPool();
        localVariableTableAttribute.resolve(pool);
        assertEquals(1, pool.indexOf(new CPUTF8("descriptor")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve2_lAAp1_3() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(2, new int[]{1, 2}, new int[]{1, 1}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2")}, new int[]{1, 1});
        ClassConstantPool pool = new ClassConstantPool();
        localVariableTableAttribute.resolve(pool);
        assertEquals(1, pool.indexOf(new CPUTF8("name1")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve2_lAAp1_4() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(2, new int[]{1, 2}, new int[]{1, 1}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2")}, new int[]{1, 1});
        ClassConstantPool pool = new ClassConstantPool();
        localVariableTableAttribute.resolve(pool);
        assertEquals(1, pool.indexOf(new CPUTF8("name2")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve2_lAAp1_5() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(2, new int[]{1, 2}, new int[]{1, 1}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2")}, new int[]{1, 1});
        ClassConstantPool pool = new ClassConstantPool();
        localVariableTableAttribute.resolve(pool);
        assertEquals(1, pool.indexOf(new CPUTF8("descriptor1")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve2_lAAp1_6() throws Exception {
        LocalVariableTableAttribute localVariableTableAttribute = new LocalVariableTableAttribute(2, new int[]{1, 2}, new int[]{1, 1}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2")}, new int[]{1, 1});
        ClassConstantPool pool = new ClassConstantPool();
        localVariableTableAttribute.resolve(pool);
        assertEquals(1, pool.indexOf(new CPUTF8("descriptor2")));}
}