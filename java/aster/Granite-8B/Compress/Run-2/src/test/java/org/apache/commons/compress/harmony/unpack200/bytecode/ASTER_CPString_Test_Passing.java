/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPString_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_trRF0() throws Exception {
        CPUTF8 utf8 = new CPUTF8("example");
        CPString cpString = new CPString(utf8, 1);
        assertEquals("String: example", cpString.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_WdFh0() throws Exception {
        CPUTF8 utf8 = new CPUTF8("example");
        CPString cpString = new CPString(utf8, 1);
        ClassFileEntry[] expected = new ClassFileEntry[] { utf8 };
        ClassFileEntry[] actual = cpString.getNestedClassFileEntries();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_AWzt0() throws IOException {
        CPUTF8 utf8 = new CPUTF8("example");
        CPString cpString = new CPString(utf8, 1);
        DataOutputStream dos = new DataOutputStream(System.out);
        cpString.writeBody(dos);
        dos.flush();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_GvhA0() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("string");
        assertEquals(cputf8.hashCode(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_Vduc1() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        assertEquals(cputf8.hashCode(), 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_ApFY2() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("string");
        CPString cpString = new CPString(cputf8, 0);
        assertEquals(cpString.hashCode(), 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_VdGd3() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        CPString cpString = new CPString(cputf8, 0);
        assertEquals(cpString.hashCode(), 0);
    }
}