/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameNameAndDifferentLength_dCGM3() {
        ArArchiveEntry entry1 = new ArArchiveEntry("test.txt", 100);
        ArArchiveEntry entry2 = new ArArchiveEntry("test.txt", 200);
        assertFalse(entry1.equals(entry2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_AGfC0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100L);
        Date expected = new Date(1000 * 100L);
        assertEquals(expected, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithFile_vuok3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "entryName");
        assertEquals(10L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_BulJ0() {
        ArArchiveEntry entry1 = new ArArchiveEntry("file1.txt", 100L);
        ArArchiveEntry entry2 = new ArArchiveEntry("file2.txt", 200L);
        assertEquals(entry1.hashCode(), entry1.hashCode());
        assertEquals(entry1.hashCode(), entry2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithUserId_qOdx1() {
        ArArchiveEntry entry1 = new ArArchiveEntry("file1.txt", 100L, 100, 100, 100, 100L);
        ArArchiveEntry entry2 = new ArArchiveEntry("file2.txt", 200L, 100, 100, 100, 100L);
        assertEquals(entry1.hashCode(), entry1.hashCode());
        assertEquals(entry1.hashCode(), entry2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithFile_VHYV2() throws IOException {
        ArArchiveEntry entry1 = new ArArchiveEntry(new File("file1.txt"), "file1.txt");
        ArArchiveEntry entry2 = new ArArchiveEntry(new File("file2.txt"), "file2.txt");
        assertEquals(entry1.hashCode(), entry1.hashCode());
        assertEquals(entry1.hashCode(), entry2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthWithFile_yemL3() throws IOException {
        ArArchiveEntry entry = new ArArchiveEntry(new File("test.txt"), "test.txt");
        assertEquals(100L, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_cieG0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        assertEquals(0, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_with_inputFile_entryName_JTAd3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "name");
        assertEquals(0, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_BulJ0_2() {
        ArArchiveEntry entry1 = new ArArchiveEntry("file1.txt", 100L);
        ArArchiveEntry entry2 = new ArArchiveEntry("file2.txt", 200L);
        assertEquals(entry1.hashCode(), entry2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithUserId_qOdx1_2() {
        ArArchiveEntry entry1 = new ArArchiveEntry("file1.txt", 100L, 100, 100, 100, 100L);
        ArArchiveEntry entry2 = new ArArchiveEntry("file2.txt", 200L, 100, 100, 100, 100L);
        assertEquals(entry1.hashCode(), entry2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithFile_VHYV2_2() throws IOException {
        ArArchiveEntry entry1 = new ArArchiveEntry(new File("file1.txt"), "file1.txt");
        ArArchiveEntry entry2 = new ArArchiveEntry(new File("file2.txt"), "file2.txt");
        assertEquals(entry1.hashCode(), entry2.hashCode());}
}