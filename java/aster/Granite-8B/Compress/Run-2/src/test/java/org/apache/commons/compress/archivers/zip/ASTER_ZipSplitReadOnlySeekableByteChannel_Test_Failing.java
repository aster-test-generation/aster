/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
public class Aster_ZipSplitReadOnlySeekableByteChannel_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_ZLDA0_1() throws IOException {
        SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel3 = mock(SeekableByteChannel.class);
        SeekableByteChannel result1 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1);
        SeekableByteChannel result2 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
        SeekableByteChannel result3 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2, channel3);
        assertEquals(channel1, result1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_ZLDA0_2() throws IOException {
        SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel3 = mock(SeekableByteChannel.class);
        SeekableByteChannel result1 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1);
        SeekableByteChannel result2 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
        SeekableByteChannel result3 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2, channel3);
        assertNotEquals(channel1, result2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_ZLDA0_3() throws IOException {
        SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel3 = mock(SeekableByteChannel.class);
        SeekableByteChannel result1 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1);
        SeekableByteChannel result2 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
        SeekableByteChannel result3 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2, channel3);
        assertNotEquals(channel2, result2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_ZLDA0_4() throws IOException {
        SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel3 = mock(SeekableByteChannel.class);
        SeekableByteChannel result1 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1);
        SeekableByteChannel result2 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
        SeekableByteChannel result3 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2, channel3);
        assertNotEquals(channel1, result3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_ZLDA0_5() throws IOException {
        SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel3 = mock(SeekableByteChannel.class);
        SeekableByteChannel result1 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1);
        SeekableByteChannel result2 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
        SeekableByteChannel result3 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2, channel3);
        assertNotEquals(channel2, result3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_ZLDA0_6() throws IOException {
        SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel3 = mock(SeekableByteChannel.class);
        SeekableByteChannel result1 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1);
        SeekableByteChannel result2 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
        SeekableByteChannel result3 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2, channel3);
        assertNotEquals(channel3, result3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_ZLDA0() throws IOException {
        SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
        SeekableByteChannel channel3 = mock(SeekableByteChannel.class);
        SeekableByteChannel result1 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1);
        assertEquals(channel1, result1);
        SeekableByteChannel result2 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
        assertNotEquals(channel1, result2);
        assertNotEquals(channel2, result2);
        SeekableByteChannel result3 = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2, channel3);
        assertNotEquals(channel1, result3);
        assertNotEquals(channel2, result3);
        assertNotEquals(channel3, result3);
    }
}