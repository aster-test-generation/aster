/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.bzip2;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.OutputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
public class Aster_BZip2CompressorOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_puqA9() throws Exception {
        BZip2CompressorOutputStream bZip2CompressorOutputStream = new BZip2CompressorOutputStream(null, 0);
        byte[] buf = new byte[0];
        try {
            bZip2CompressorOutputStream.write(buf, 0, 0);
            fail("Expected IOException");
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_lvJo3() throws IOException {
        BZip2CompressorOutputStream bZip2CompressorOutputStream = new BZip2CompressorOutputStream(null, 0);
        byte[] buf = new byte[10];
        bZip2CompressorOutputStream.write(buf, 0, 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testChooseBlockSize_Bnwe0_1() throws Exception {
        assertEquals(1, BZip2CompressorOutputStream.chooseBlockSize(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testChooseBlockSize_Bnwe0_2() throws Exception {
        assertEquals(9, BZip2CompressorOutputStream.chooseBlockSize(100000000));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithOutputStream_bPrO0() throws IOException {
        OutputStream out = mock(OutputStream.class);
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(out);
        bzip2CompressorOutputStream.close();
        verify(out, times(1)).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithOutputStreamAndBlockSize_ctEK1() throws IOException {
        OutputStream out = mock(OutputStream.class);
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(out, 1024);
        bzip2CompressorOutputStream.close();
        verify(out, times(1)).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlushWithOutputStream_QzBZ0() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(mockOutputStream);
        bzip2CompressorOutputStream.flush();
        verify(mockOutputStream, times(1)).flush();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlushWithOutputStreamAndBlockSize_mrWg1() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(mockOutputStream, 1024);
        bzip2CompressorOutputStream.flush();
        verify(mockOutputStream, times(1)).flush();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void writeRun_AYod2_xOHA1() throws IOException {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testChooseBlockSize_Bnwe0() throws Exception {
        assertEquals(1, BZip2CompressorOutputStream.chooseBlockSize(1));
        assertEquals(9, BZip2CompressorOutputStream.chooseBlockSize(100000000));
    }
}