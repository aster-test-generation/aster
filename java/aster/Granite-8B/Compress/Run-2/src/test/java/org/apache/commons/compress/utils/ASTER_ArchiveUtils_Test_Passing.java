/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.apache.commons.compress.archivers.ArchiveEntry;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
public class Aster_ArchiveUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_iplE0() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{1, 2, 3};
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithDifferentBuffers_YTuC1() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{4, 5, 6};
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithDifferentLengths_Taot2() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{1, 2};
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithIgnoreTrailingNullsFalse_AUUi3() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{1, 2, 0};
        boolean ignoreTrailingNulls = false;
        boolean result = ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithIgnoreTrailingNullsTrue_FOUG4() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{1, 2, 0};
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithOffsetAndLength_uRjS8() {
        byte[] buffer1 = new byte[]{0, 1, 2, 3, 4};
        byte[] buffer2 = new byte[]{1, 2, 3};
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, 1, 3, buffer2, 0, buffer2.length, ignoreTrailingNulls);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_pOOE0() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{1, 2, 3};
        boolean expected = true;
        boolean actual = ArchiveUtils.isEqual(buffer1, buffer2);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithDifferentBuffers_sbhh1() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{4, 5, 6};
        boolean expected = false;
        boolean actual = ArchiveUtils.isEqual(buffer1, buffer2);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithNullBuffer_PBxp2() {
        byte[] buffer1 = null;
        byte[] buffer2 = new byte[]{1, 2, 3};
        boolean expected = false;
        boolean actual = ArchiveUtils.isEqual(buffer1, buffer2);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithEmptyBuffer_mDNN3() {
        byte[] buffer1 = new byte[]{};
        byte[] buffer2 = new byte[]{1, 2, 3};
        boolean expected = false;
        boolean actual = ArchiveUtils.isEqual(buffer1, buffer2);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeWithEmptyString_nsDa1() {
    String s = "";
    String expected = "";
    String actual = ArchiveUtils.sanitize(s);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeWithNormalString_TsLv2() {
    String s = "Hello, World!";
    String expected = "Hello, World!";
    String actual = ArchiveUtils.sanitize(s);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeWithStringExceedingMaxLength_GzPk3() {
    String s = "This is a string that is longer than the maximum length allowed for sanitized names.";
    String expected = "This is a string that is longer than the maximum length allowed for sanitized names.";
    String actual = ArchiveUtils.sanitize(s);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeWithControlCharacters_Wupm4() {
    String s = "Hello\tWorld!";
    String expected = "Hello?World!";
    String actual = ArchiveUtils.sanitize(s);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSanitizeWithNonPrintableCharacters_YOJS5() {
    String s = "Hello\u0000World!";
    String expected = "Hello?World!";
    String actual = ArchiveUtils.sanitize(s);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsEqual_cUlD0() {
		byte[] buffer1 = new byte[10];
		byte[] buffer2 = new byte[10];
		boolean ignoreTrailingNulls = true;
		boolean result = ArchiveUtils.isEqual(buffer1, buffer2, ignoreTrailingNulls);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayZero_kfZT0() {
    byte[] a = new byte[10];
    assertTrue(ArchiveUtils.isArrayZero(a, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayNotZero_zgDR1() {
    byte[] a = new byte[10];
    a[0] = 1;
    assertFalse(ArchiveUtils.isArrayZero(a, 10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testArrayZeroSizeZero_GXfC2() {
    byte[] a = new byte[0];
    assertTrue(ArchiveUtils.isArrayZero(a, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_TMTC0() {
        byte[] inputBytes = {65, 66, 67};
        String expected = "ABC";
        String actual = ArchiveUtils.toAsciiString(inputBytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsEqual_vrIm0() {
		byte[] buffer1 = new byte[10];
		byte[] buffer2 = new byte[10];
		boolean result = ArchiveUtils.isEqual(buffer1, 0, 10, buffer2, 0, 10);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBuffer_WTsh0() {
        String expected = "expected";
        byte[] buffer = new byte[10];
        buffer[0] = 'e';
        buffer[1] = 'x';
        buffer[2] = 'p';
        buffer[3] = 'e';
        buffer[4] = 'c';
        buffer[5] = 't';
        buffer[6] = 'e';
        buffer[7] = 'd';
        buffer[8] = 0;
        buffer[9] = 0;
        boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_kRUC0() {
        byte[] inputBytes = { 65, 66, 67 };
        int offset = 0;
        int length = 3;
        String expected = "ABC";
        String actual = ArchiveUtils.toAsciiString(inputBytes, offset, length);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithNull_GNXY0() {
        byte[] buffer1 = null;
        int offset1 = 0;
        int length1 = 0;
        byte[] buffer2 = null;
        int offset2 = 0;
        int length2 = 0;
        boolean result = ArchiveUtils.isEqualWithNull(buffer1, offset1, length1, buffer2, offset2, length2);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_DirectoryEntry_jLoc0_vcJL0() {
        ArchiveEntry entry = mock(ArchiveEntry.class);
        when(entry.isDirectory()).thenReturn(true);
        when(entry.getSize()).thenReturn(100L);
        when(entry.getName()).thenReturn("test.txt");
        String expected = "d     100 test.txt";
        String actual = ArchiveUtils.toString(entry);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_FileEntry_wLFq1_PqiZ0() {
        ArchiveEntry entry = mock(ArchiveEntry.class);
        when(entry.isDirectory()).thenReturn(false);
        when(entry.getSize()).thenReturn(200L);
        when(entry.getName()).thenReturn("test.txt");
        String expected = "-     200 test.txt";
        String actual = ArchiveUtils.toString(entry);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ZeroSizeEntry_LEof2_dAsF0() {
        ArchiveEntry entry = mock(ArchiveEntry.class);
        when(entry.isDirectory()).thenReturn(false);
        when(entry.getSize()).thenReturn(0L);
        when(entry.getName()).thenReturn("test.txt");
        String expected = "-       0 test.txt";
        String actual = ArchiveUtils.toString(entry);
        assertEquals(expected, actual);
    }
}