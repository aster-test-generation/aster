/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipParameters_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCompressionLevelWithHighCompressionLevel_FuMY1() {
	GzipParameters gzipParameters = new GzipParameters();
	gzipParameters.setCompressionLevel(9);
	int result = gzipParameters.getCompressionLevel();
	assertEquals(9, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModificationTime_lYJT0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setModificationTime(1234567890L);
        assertEquals(1234567890L, gzipParameters.getModificationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateStrategy_TCst0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setDeflateStrategy(0);
        assertEquals(0, gzipParameters.getDeflateStrategy());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeflateStrategy_RpEe0() {
        GzipParameters gzipParameters = new GzipParameters();
        int deflateStrategy = gzipParameters.getDeflateStrategy();
        assertEquals(0, deflateStrategy);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBufferSize_mQqb0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setBufferSize(1024);
        assertEquals(1024, gzipParameters.getBufferSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBufferSizeWithZero_YvsB1() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setBufferSize(0);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("invalid buffer size: 0", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBufferSizeWithNegativeNumber_hDQn2() {
        GzipParameters gzipParameters = new GzipParameters();
        try {
            gzipParameters.setBufferSize(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("invalid buffer size: -1", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFileName_nkmo0_fid1() {
        GzipParameters gzipParameters = new GzipParameters();
        String fileName = gzipParameters.getFileName();
    assertNull(fileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOperatingSystem_ijuo0_fid1() {
        GzipParameters gzipParameters = new GzipParameters();
        int expectedOperatingSystem =255; // Replace with the expected value
        int actualOperatingSystem = gzipParameters.getOperatingSystem();
        assertEquals(expectedOperatingSystem, actualOperatingSystem);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystem_tcct0_nVQX0() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(1);
        assertEquals(1, gzipParameters.getOperatingSystem());
    }
}