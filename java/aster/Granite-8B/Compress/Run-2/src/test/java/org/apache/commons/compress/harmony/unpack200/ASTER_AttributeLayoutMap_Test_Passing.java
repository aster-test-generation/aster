/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeLayoutMap_Test_Passing {
private Map<AttributeLayout, NewAttributeBands> layoutsToBands = new HashMap<>();
private AttributeLayout layout;
private NewAttributeBands newBands;
@Mock
    private AttributeLayout layoutMock;
@Mock
    private NewAttributeBands newBandsMock;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckMap_hKbB0() throws Pack200Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        attributeLayoutMap.checkMap();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBands_mXTb0() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        NewAttributeBands newAttributeBands = attributeLayoutMap.getAttributeBands(layout);
        assertNotNull(newAttributeBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithIsDefault_fMEL1() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2, true);
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        NewAttributeBands newAttributeBands = attributeLayoutMap.getAttributeBands(layout);
        assertNotNull(newAttributeBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithBackwardsCallCount_dGSM2() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        layout.setBackwardsCallCount(10);
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        NewAttributeBands newAttributeBands = attributeLayoutMap.getAttributeBands(layout);
        assertNotNull(newAttributeBands);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithMatches_yVtq3() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        boolean matches = layout.matches(10);
        assertTrue(matches);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithGetLayout_CVRH4() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        String layoutString = layout.getLayout();
        assertEquals("layout", layoutString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithIsDefaultLayout_NkeA5() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2, true);
        boolean isDefault = layout.isDefaultLayout();
        assertTrue(isDefault);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithNumBackwardsCallables_PjaI8() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        int numBackwardsCallables = layout.numBackwardsCallables();
        assertEquals(0, numBackwardsCallables);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithToString_UTlt9() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        String toString = layout.toString();
        assertEquals("AttributeLayout [name=name, context=1, layout=layout, index=2]", toString);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithHashCode_avZa10() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        int hashCode = layout.hashCode();
        assertEquals(106812896, hashCode);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithGetCodec_uXGq11() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        Codec codec = layout.getCodec();
        assertNotNull(codec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithName_FPXt12() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        String name = layout.getName();
        assertEquals("name", name);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithContext_XNga13() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        int context = layout.getContext();
        assertEquals(1, context);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeBandsWithIndex_ONbY14() throws Exception {
        AttributeLayout layout = new AttributeLayout("name", 1, "layout", 2);
        int index = layout.getIndex();
        assertEquals(2, index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeLayout_gktf0() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(1, 2);
        assertNotNull(attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeLayout_exWG0() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 0;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertNotNull(attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeLayout2_vlfq1() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 1;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertNotNull(attributeLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeLayout3_GLfP2() throws Exception {
        AttributeLayoutMap attributeLayoutMap = new AttributeLayoutMap();
        String name = "name";
        int context = 2;
        AttributeLayout attributeLayout = attributeLayoutMap.getAttributeLayout(name, context);
        assertNotNull(attributeLayout);
    }
}