/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZOutputFile_Test_Passing {
private SeekableByteChannel channel;
private boolean finished;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_JAFw0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    SevenZArchiveEntry archiveEntry = new SevenZArchiveEntry();
    archiveEntry.setName("test.txt");
    archiveEntry.setSize(100);
    sevenZOutputFile.putArchiveEntry(archiveEntry);
    sevenZOutputFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteByteArray_ZKxs0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        byte[] b = new byte[1024];
        sevenZOutputFile.write(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteByteArrayIntInt_GMVQ1() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        byte[] b = new byte[1024];
        sevenZOutputFile.write(b, 0, 1024);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetContentMethods_ibzI0() throws Exception {
		SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("fileName"), "password".toCharArray());
		Iterable<? extends SevenZMethodConfiguration> methods = null; // Replace with actual iterable
		sevenZOutputFile.setContentMethods(methods);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentCompression_hxcJ0() throws Exception {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.txt"));
        sevenZOutputFile.setContentCompression(SevenZMethod.COPY);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithByteArrayAndOffsetAndLength_JjKx0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.write(new byte[10], 0, 10);
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithByteArray_tKQT1() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.write(new byte[10]);
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteByteArrayIntInt_OssM0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File(""));
    sevenZOutputFile.write(new byte[0], 0, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteByteArrayIntInt2_rhCB1() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File(""));
    sevenZOutputFile.write(new byte[0], 0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_zlPr0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.finish();
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_RmoW0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        sevenZOutputFile.finish();
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_zbcd0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
    sevenZOutputFile.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish2_lFPm1() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        sevenZOutputFile.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish1_watZ0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File(""));
    sevenZOutputFile.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish2_iiLA1() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File(""), new char[0]);
    sevenZOutputFile.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void finish_DcYi3() throws IOException {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveEntry_gwSX0_1() throws Exception {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("test.txt"), "test.txt");
        sevenZOutputFile.close();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveEntry_gwSX0_2() throws Exception {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("test.txt"), "test.txt");
        sevenZOutputFile.close();
        assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveEntry_gwSX0_3() throws Exception {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("test.txt"), "test.txt");
        sevenZOutputFile.close();
        assertTrue(entry.getHasLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFileNameAndPassword_izJD0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFileName_QyEq3() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveEntry_iqzp0_1() throws IOException {
        final SevenZOutputFile output = new SevenZOutputFile(new File("test.7z"));
        final Path inputPath = new File("test.txt").toPath();
        final String entryName = "test.txt";
        final LinkOption[] options = {};
        final SevenZArchiveEntry entry = output.createArchiveEntry(inputPath, entryName, options);
        output.close();
        assertNotNull(entry);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveEntry_iqzp0_2() throws IOException {
        final SevenZOutputFile output = new SevenZOutputFile(new File("test.7z"));
        final Path inputPath = new File("test.txt").toPath();
        final String entryName = "test.txt";
        final LinkOption[] options = {};
        final SevenZArchiveEntry entry = output.createArchiveEntry(inputPath, entryName, options);
        output.close();
        assertEquals(entryName, entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveEntry_iqzp0_3() throws IOException {
        final SevenZOutputFile output = new SevenZOutputFile(new File("test.7z"));
        final Path inputPath = new File("test.txt").toPath();
        final String entryName = "test.txt";
        final LinkOption[] options = {};
        final SevenZArchiveEntry entry = output.createArchiveEntry(inputPath, entryName, options);
        output.close();
        assertTrue(entry.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithFileOutputStream_wzHk0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    sevenZOutputFile.closeArchiveEntry();
    sevenZOutputFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseArchiveEntryWithFileOutputStreamAndPassword_JLzV2() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
    sevenZOutputFile.closeArchiveEntry();
    sevenZOutputFile.close();
}
}