/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_nxJn0_1() throws Exception {
        byte[] buf = new byte[4];
        ZipLong.putLong(0x12345678L, buf, 0);
        assertEquals(0x78, buf[0] & 0xff);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_nxJn0_2() throws Exception {
        byte[] buf = new byte[4];
        ZipLong.putLong(0x12345678L, buf, 0);
        assertEquals(0x56, buf[1] & 0xff);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_nxJn0_3() throws Exception {
        byte[] buf = new byte[4];
        ZipLong.putLong(0x12345678L, buf, 0);
        assertEquals(0x34, buf[2] & 0xff);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutLong_nxJn0_4() throws Exception {
        byte[] buf = new byte[4];
        ZipLong.putLong(0x12345678L, buf, 0);
        assertEquals(0x12, buf[3] & 0xff);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithObjectThatIsZipLong_QhpW0() throws Exception {
    ZipLong zipLong1 = new ZipLong(123);
    ZipLong zipLong2 = new ZipLong(123);
    boolean result = zipLong1.equals(zipLong2);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithObjectThatIsNotZipLong_tNMK1() throws Exception {
    ZipLong zipLong = new ZipLong(123);
    boolean result = zipLong.equals(new Object());
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_mhrp2() throws Exception {
    ZipLong zipLong = new ZipLong(123);
    boolean result = zipLong.equals(null);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_pvsp0_1() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(0);
        ZipLong zipLong3 = new ZipLong(1L);
        ZipLong zipLong4 = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals("ZipLong value: 0", zipLong1.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_pvsp0_2() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(0);
        ZipLong zipLong3 = new ZipLong(1L);
        ZipLong zipLong4 = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals("ZipLong value: 0", zipLong2.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_pvsp0_3() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(0);
        ZipLong zipLong3 = new ZipLong(1L);
        ZipLong zipLong4 = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals("ZipLong value: 1", zipLong3.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_pvsp0_4() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(0);
        ZipLong zipLong3 = new ZipLong(1L);
        ZipLong zipLong4 = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals("ZipLong value: 0", zipLong4.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_sxmc0_1() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(1);
        ZipLong zipLong3 = new ZipLong(2147483647L);
        ZipLong zipLong4 = new ZipLong(new byte[]{127, -1, -1, -1});
        ZipLong zipLong5 = new ZipLong(new byte[]{127, 0, 0, 0});
        ZipLong zipLong6 = new ZipLong(new byte[]{127, 1, 0, 0});
        ZipLong zipLong7 = new ZipLong(new byte[]{127, -1, -1, -1}, 0);
        ZipLong zipLong8 = new ZipLong(new byte[]{127, 0, 0, 0}, 0);
        ZipLong zipLong9 = new ZipLong(new byte[]{127, 1, 0, 0}, 0);
        assertEquals(0, zipLong1.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_sxmc0_2() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(1);
        ZipLong zipLong3 = new ZipLong(2147483647L);
        ZipLong zipLong4 = new ZipLong(new byte[]{127, -1, -1, -1});
        ZipLong zipLong5 = new ZipLong(new byte[]{127, 0, 0, 0});
        ZipLong zipLong6 = new ZipLong(new byte[]{127, 1, 0, 0});
        ZipLong zipLong7 = new ZipLong(new byte[]{127, -1, -1, -1}, 0);
        ZipLong zipLong8 = new ZipLong(new byte[]{127, 0, 0, 0}, 0);
        ZipLong zipLong9 = new ZipLong(new byte[]{127, 1, 0, 0}, 0);
        assertEquals(1, zipLong2.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_sxmc0_3() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(1);
        ZipLong zipLong3 = new ZipLong(2147483647L);
        ZipLong zipLong4 = new ZipLong(new byte[]{127, -1, -1, -1});
        ZipLong zipLong5 = new ZipLong(new byte[]{127, 0, 0, 0});
        ZipLong zipLong6 = new ZipLong(new byte[]{127, 1, 0, 0});
        ZipLong zipLong7 = new ZipLong(new byte[]{127, -1, -1, -1}, 0);
        ZipLong zipLong8 = new ZipLong(new byte[]{127, 0, 0, 0}, 0);
        ZipLong zipLong9 = new ZipLong(new byte[]{127, 1, 0, 0}, 0);
        assertEquals(2147483647L, zipLong3.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_sxmc0_4() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(1);
        ZipLong zipLong3 = new ZipLong(2147483647L);
        ZipLong zipLong4 = new ZipLong(new byte[]{127, -1, -1, -1});
        ZipLong zipLong5 = new ZipLong(new byte[]{127, 0, 0, 0});
        ZipLong zipLong6 = new ZipLong(new byte[]{127, 1, 0, 0});
        ZipLong zipLong7 = new ZipLong(new byte[]{127, -1, -1, -1}, 0);
        ZipLong zipLong8 = new ZipLong(new byte[]{127, 0, 0, 0}, 0);
        ZipLong zipLong9 = new ZipLong(new byte[]{127, 1, 0, 0}, 0);
        assertEquals(4294967295L, zipLong4.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_sxmc0_5() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(1);
        ZipLong zipLong3 = new ZipLong(2147483647L);
        ZipLong zipLong4 = new ZipLong(new byte[]{127, -1, -1, -1});
        ZipLong zipLong5 = new ZipLong(new byte[]{127, 0, 0, 0});
        ZipLong zipLong6 = new ZipLong(new byte[]{127, 1, 0, 0});
        ZipLong zipLong7 = new ZipLong(new byte[]{127, -1, -1, -1}, 0);
        ZipLong zipLong8 = new ZipLong(new byte[]{127, 0, 0, 0}, 0);
        ZipLong zipLong9 = new ZipLong(new byte[]{127, 1, 0, 0}, 0);
        assertEquals(2147483647L, zipLong5.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_sxmc0_6() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(1);
        ZipLong zipLong3 = new ZipLong(2147483647L);
        ZipLong zipLong4 = new ZipLong(new byte[]{127, -1, -1, -1});
        ZipLong zipLong5 = new ZipLong(new byte[]{127, 0, 0, 0});
        ZipLong zipLong6 = new ZipLong(new byte[]{127, 1, 0, 0});
        ZipLong zipLong7 = new ZipLong(new byte[]{127, -1, -1, -1}, 0);
        ZipLong zipLong8 = new ZipLong(new byte[]{127, 0, 0, 0}, 0);
        ZipLong zipLong9 = new ZipLong(new byte[]{127, 1, 0, 0}, 0);
        assertEquals(2147483648L, zipLong6.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_sxmc0_7() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(1);
        ZipLong zipLong3 = new ZipLong(2147483647L);
        ZipLong zipLong4 = new ZipLong(new byte[]{127, -1, -1, -1});
        ZipLong zipLong5 = new ZipLong(new byte[]{127, 0, 0, 0});
        ZipLong zipLong6 = new ZipLong(new byte[]{127, 1, 0, 0});
        ZipLong zipLong7 = new ZipLong(new byte[]{127, -1, -1, -1}, 0);
        ZipLong zipLong8 = new ZipLong(new byte[]{127, 0, 0, 0}, 0);
        ZipLong zipLong9 = new ZipLong(new byte[]{127, 1, 0, 0}, 0);
        assertEquals(4294967295L, zipLong7.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_sxmc0_8() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(1);
        ZipLong zipLong3 = new ZipLong(2147483647L);
        ZipLong zipLong4 = new ZipLong(new byte[]{127, -1, -1, -1});
        ZipLong zipLong5 = new ZipLong(new byte[]{127, 0, 0, 0});
        ZipLong zipLong6 = new ZipLong(new byte[]{127, 1, 0, 0});
        ZipLong zipLong7 = new ZipLong(new byte[]{127, -1, -1, -1}, 0);
        ZipLong zipLong8 = new ZipLong(new byte[]{127, 0, 0, 0}, 0);
        ZipLong zipLong9 = new ZipLong(new byte[]{127, 1, 0, 0}, 0);
        assertEquals(2147483647L, zipLong8.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_sxmc0_9() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(1);
        ZipLong zipLong3 = new ZipLong(2147483647L);
        ZipLong zipLong4 = new ZipLong(new byte[]{127, -1, -1, -1});
        ZipLong zipLong5 = new ZipLong(new byte[]{127, 0, 0, 0});
        ZipLong zipLong6 = new ZipLong(new byte[]{127, 1, 0, 0});
        ZipLong zipLong7 = new ZipLong(new byte[]{127, -1, -1, -1}, 0);
        ZipLong zipLong8 = new ZipLong(new byte[]{127, 0, 0, 0}, 0);
        ZipLong zipLong9 = new ZipLong(new byte[]{127, 1, 0, 0}, 0);
        assertEquals(2147483648L, zipLong9.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_VUtr0_1() throws Exception {
        ZipLong zipLong1 = new ZipLong(123);
        byte[] expectedBytes = {0, 0, 0, 123};
        byte[] actualBytes = zipLong1.getBytes();
        ZipLong zipLong2 = new ZipLong(new byte[]{0, 0, 0, 123}, 0);
        byte[] expectedBytes2 = {0, 0, 0, 123};
        byte[] actualBytes2 = zipLong2.getBytes();
        ZipLong zipLong3 = new ZipLong(0x12345678L);
        byte[] expectedBytes3 = {0x12, 0x34, 0x56, 0x78};
        byte[] actualBytes3 = zipLong3.getBytes();
        ZipLong zipLong4 = new ZipLong(new byte[]{0x12, 0x34, 0x56, 0x78});
        byte[] expectedBytes4 = {0x12, 0x34, 0x56, 0x78};
        byte[] actualBytes4 = zipLong4.getBytes();
        assertArrayEquals(expectedBytes, actualBytes);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_VUtr0_2() throws Exception {
        ZipLong zipLong1 = new ZipLong(123);
        byte[] expectedBytes = {0, 0, 0, 123};
        byte[] actualBytes = zipLong1.getBytes();
        ZipLong zipLong2 = new ZipLong(new byte[]{0, 0, 0, 123}, 0);
        byte[] expectedBytes2 = {0, 0, 0, 123};
        byte[] actualBytes2 = zipLong2.getBytes();
        ZipLong zipLong3 = new ZipLong(0x12345678L);
        byte[] expectedBytes3 = {0x12, 0x34, 0x56, 0x78};
        byte[] actualBytes3 = zipLong3.getBytes();
        ZipLong zipLong4 = new ZipLong(new byte[]{0x12, 0x34, 0x56, 0x78});
        byte[] expectedBytes4 = {0x12, 0x34, 0x56, 0x78};
        byte[] actualBytes4 = zipLong4.getBytes();
        assertArrayEquals(expectedBytes2, actualBytes2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_VUtr0_3() throws Exception {
        ZipLong zipLong1 = new ZipLong(123);
        byte[] expectedBytes = {0, 0, 0, 123};
        byte[] actualBytes = zipLong1.getBytes();
        ZipLong zipLong2 = new ZipLong(new byte[]{0, 0, 0, 123}, 0);
        byte[] expectedBytes2 = {0, 0, 0, 123};
        byte[] actualBytes2 = zipLong2.getBytes();
        ZipLong zipLong3 = new ZipLong(0x12345678L);
        byte[] expectedBytes3 = {0x12, 0x34, 0x56, 0x78};
        byte[] actualBytes3 = zipLong3.getBytes();
        ZipLong zipLong4 = new ZipLong(new byte[]{0x12, 0x34, 0x56, 0x78});
        byte[] expectedBytes4 = {0x12, 0x34, 0x56, 0x78};
        byte[] actualBytes4 = zipLong4.getBytes();
        assertArrayEquals(expectedBytes3, actualBytes3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_VUtr0_4() throws Exception {
        ZipLong zipLong1 = new ZipLong(123);
        byte[] expectedBytes = {0, 0, 0, 123};
        byte[] actualBytes = zipLong1.getBytes();
        ZipLong zipLong2 = new ZipLong(new byte[]{0, 0, 0, 123}, 0);
        byte[] expectedBytes2 = {0, 0, 0, 123};
        byte[] actualBytes2 = zipLong2.getBytes();
        ZipLong zipLong3 = new ZipLong(0x12345678L);
        byte[] expectedBytes3 = {0x12, 0x34, 0x56, 0x78};
        byte[] actualBytes3 = zipLong3.getBytes();
        ZipLong zipLong4 = new ZipLong(new byte[]{0x12, 0x34, 0x56, 0x78});
        byte[] expectedBytes4 = {0x12, 0x34, 0x56, 0x78};
        byte[] actualBytes4 = zipLong4.getBytes();
        assertArrayEquals(expectedBytes4, actualBytes4);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueByteArrayInt_mkbX0() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        long value = ZipLong.getValue(new byte[]{0, 0, 0, 0}, 0);
        assertEquals(0, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueByteArray_UKhe1() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        long value = ZipLong.getValue(new byte[]{0, 0, 0, 0});
        assertEquals(0, value);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetIntValue_Beyz0_1() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        zipLong = new ZipLong(100);
        zipLong = new ZipLong(255L);
        zipLong = new ZipLong(new byte[]{1, 2, 3, 4});
        assertEquals(0, zipLong.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetIntValue_Beyz0_2() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        zipLong = new ZipLong(100);
        zipLong = new ZipLong(255L);
        zipLong = new ZipLong(new byte[]{1, 2, 3, 4});
        assertEquals(100, zipLong.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetIntValue_Beyz0_3() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        zipLong = new ZipLong(100);
        zipLong = new ZipLong(255L);
        zipLong = new ZipLong(new byte[]{1, 2, 3, 4});
        assertEquals(255, zipLong.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetIntValue_Beyz0_4() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        zipLong = new ZipLong(100);
        zipLong = new ZipLong(255L);
        zipLong = new ZipLong(new byte[]{1, 2, 3, 4});
        assertEquals(16842348, zipLong.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_jZHd0_1() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0});
        ZipLong zipLong2 = new ZipLong(0);
        ZipLong zipLong3 = new ZipLong(1L);
        ZipLong zipLong4 = new ZipLong(new byte[]{1, 0, 0, 0});
        assertEquals(zipLong1.hashCode(), zipLong2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_jZHd0_2() throws Exception {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0});
        ZipLong zipLong2 = new ZipLong(0);
        ZipLong zipLong3 = new ZipLong(1L);
        ZipLong zipLong4 = new ZipLong(new byte[]{1, 0, 0, 0});
        assertEquals(zipLong3.hashCode(), zipLong4.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesFromInt_rPwo0() throws Exception {
    ZipLong zipLong = new ZipLong(123456789);
    byte[] expected = { (byte) 0x59, (byte) 0xCD, (byte) 0x34, (byte) 0x12 };
    byte[] actual = ZipLong.getBytes(123456789);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesFromLong_KuCs1() throws Exception {
    ZipLong zipLong = new ZipLong(1234567890123456L);
    byte[] expected = { (byte) 0x59, (byte) 0xCD, (byte) 0x34, (byte) 0x12, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12 };
    byte[] actual = ZipLong.getBytes(1234567890123456L);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_XoKq0() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong clone = (ZipLong) zipLong.clone();
        assertEquals(zipLong.getValue(), clone.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone2_ghgt1() throws Exception {
        ZipLong zipLong = new ZipLong(100);
        ZipLong clone = (ZipLong) zipLong.clone();
        assertEquals(zipLong.getValue(), clone.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone3_joBI2() throws Exception {
        ZipLong zipLong = new ZipLong(100L);
        ZipLong clone = (ZipLong) zipLong.clone();
        assertEquals(zipLong.getValue(), clone.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone4_vxok3() throws Exception {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        ZipLong clone = (ZipLong) zipLong.clone();
        assertEquals(zipLong.getValue(), clone.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EXPe0() throws Exception {
        byte[] bytes = {0x01, 0x02, 0x03, 0x04};
        int offset = 0;
        long expectedValue = 0x04030201L;
        long actualValue = ZipLong.getValue(bytes, offset);
        assertEquals(expectedValue, actualValue);
    }
}