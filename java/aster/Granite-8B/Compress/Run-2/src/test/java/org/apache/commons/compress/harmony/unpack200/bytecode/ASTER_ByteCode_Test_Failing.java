/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.anyList;
import static org.mockito.Mockito.verify;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ByteCode_Test_Failing {
@Mock
	private CodeAttribute mockXmlAttribute;
@Mock
	private OperandManager mockOperandManager;
private ByteCode bytecode;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNestedMustStartClassPool_RLtn0() {
		ByteCode byteCode = new ByteCode(0, new ClassFileEntry[]{});
		boolean result = byteCode.nestedMustStartClassPool();
		Assertions.assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testapplyByteCodeTargetFixup() {
		bytecode = new ByteCode(0);
		bytecode.applyByteCodeTargetFixup(mockXmlAttribute);
		verify(mockXmlAttribute).renumber(anyList());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_vaKo0() {
        ByteCode bytecode = new ByteCode(0);
        assertEquals(0, bytecode.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_jJYe1() {
        ByteCode bytecode = new ByteCode(0, new ClassFileEntry[0]);
        assertEquals(0, bytecode.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPosition_NIVz0() {
        ByteCode byteCode = new ByteCode(0);
        int[] nestedPosition = byteCode.getNestedPosition(0);
        assertNotNull(nestedPosition);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPositions_zKPc0() {
        ByteCode byteCode = new ByteCode(0);
        int[][] nestedPositions = byteCode.getNestedPositions();
        assertEquals(0, nestedPositions.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPositions_YuzR1() {
        ByteCode byteCode = new ByteCode(0, new ClassFileEntry[0]);
        int[][] nestedPositions = byteCode.getNestedPositions();
        assertEquals(0, nestedPositions.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_uALd0() {
        ByteCode bytecode = new ByteCode(0);
        assertEquals("ACONST_NULL", bytecode.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeTargets_BpYj0() {
        ByteCode byteCode = new ByteCode(0);
        int[] targets = byteCode.getByteCodeTargets();
        assertNotNull(targets);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeIndex_PLGB0() {
        ByteCode byteCode = new ByteCode(0);
        assertEquals(0, byteCode.getByteCodeIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeIndexWithNested_vkeS1() {
        ClassFileEntry[] nested = new ClassFileEntry[1];
        ByteCode byteCode = new ByteCode(0, nested);
        assertEquals(0, byteCode.getByteCodeIndex());
    }
}