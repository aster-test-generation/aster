/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.ReadableByteChannel;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
public class Aster_IOUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_NZwz0() throws IOException {
        InputStream input = mock(InputStream.class);
        long toSkip = 10;
        long result = IOUtils.skip(input, toSkip);
        verify(input, times(1)).skip(toSkip);
        assertEquals(toSkip, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyRange_ZeroLength_LNns0() throws IOException {
    final InputStream input = mock(InputStream.class);
    final OutputStream output = mock(OutputStream.class);
    final long length = 0;
    final int bufferSize = 1024;
    final long result = IOUtils.copyRange(input, length, output, bufferSize);
    assertEquals(0, result);
    verify(input, never()).read(any(), anyInt(), anyInt());
    verify(output, never()).write(any(), anyInt(), anyInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyRange_LargeBuffer_qfpH3() throws IOException {
    final InputStream input = mock(InputStream.class);
    final OutputStream output = mock(OutputStream.class);
    final long length = 1024;
    final int bufferSize = 1024;
    final long result = IOUtils.copyRange(input, length, output, bufferSize);
    assertEquals(length, result);
    verify(input, times(1)).read(any(), anyInt(), anyInt());
    verify(output, times(1)).write(any(), anyInt(), anyInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCopyRange_LargeInput_ZyAt4() throws IOException {
    final InputStream input = mock(InputStream.class);
    final OutputStream output = mock(OutputStream.class);
    final long length = Long.MAX_VALUE;
    final int bufferSize = 1024;
    final long result = IOUtils.copyRange(input, length, output, bufferSize);
    assertEquals(length, result);
    verify(input, times(1)).read(any(), anyInt(), anyInt());
    verify(output, times(1)).write(any(), anyInt(), anyInt());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRangeWithZeroLength_mBxE1() throws IOException {
        ReadableByteChannel input = mock(ReadableByteChannel.class);
        when(input.read(any(ByteBuffer.class))).thenReturn(0);
        byte[] result = IOUtils.readRange(input, 0);
        assertArrayEquals(new byte[0], result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void close_MAcJ1() throws IOException {
            }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseQuietlyWithNull_NkYH2() {
        IOUtils.closeQuietly(null);
    }
}