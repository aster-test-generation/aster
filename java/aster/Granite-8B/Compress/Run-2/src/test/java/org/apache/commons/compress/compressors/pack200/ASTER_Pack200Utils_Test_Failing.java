/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200Utils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNormalize_qLkd0_1() throws IOException {
		File from = new File("from.jar");
		File to = new File("to.jar");
		Pack200Utils.normalize(from, to);
		assertNotNull(from);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNormalize_qLkd0_2() throws IOException {
		File from = new File("from.jar");
		File to = new File("to.jar");
		Pack200Utils.normalize(from, to);
		assertNotNull(to);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNormalize_qLkd0_3() throws IOException {
		File from = new File("from.jar");
		File to = new File("to.jar");
		Pack200Utils.normalize(from, to);
		assertTrue(from.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNormalize_qLkd0_4() throws IOException {
		File from = new File("from.jar");
		File to = new File("to.jar");
		Pack200Utils.normalize(from, to);
		assertTrue(to.exists());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNormalize_qLkd0_5() throws IOException {
		File from = new File("from.jar");
		File to = new File("to.jar");
		Pack200Utils.normalize(from, to);
		assertEquals(from.length(), to.length());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithNullProps_nXjw0() throws IOException {
    final File from = new File("from.jar");
    final File to = new File("to.jar");
    final Map<String, String> props = null;
    Pack200Utils.normalize(from, to, props);
    // Add assertion here
    // For example:
    // assertEquals(expectedValue, actualValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithEmptyProps_rPet1() throws IOException {
    final File from = new File("from.jar");
    final File to = new File("to.jar");
    final Map<String, String> props = new HashMap<>();
    Pack200Utils.normalize(from, to, props);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithNonEmptyProps_QSNj2() throws IOException {
    final File from = new File("from.jar");
    final File to = new File("to.jar");
    final Map<String, String> props = new HashMap<>();
    props.put("key", "value");
    Pack200Utils.normalize(from, to, props);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testNormalize_Axnk0() throws IOException {
		File jar = new File("example.jar");
		Pack200Utils.normalize(jar);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNormalizeWithNullProps_nXjw0_fid1() throws IOException {
    final File from = new File("from.jar");
    final File to = new File("to.jar");
    final Map<String, String> props = null;
    Pack200Utils.normalize(from, to, props);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNormalize_Vwem0() throws IOException {
		File jar = new File("path/to/jar");
		Map<String, String> props = new HashMap<>();
		Pack200Utils.normalize(jar, props);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testNormalizeWithNullJar_Nysi1_fid1() {
		assertThrows(IOException.class, () -> Pack200Utils.normalize(null));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNormalize_qLkd0() throws IOException {
		File from = new File("from.jar");
		File to = new File("to.jar");
		Pack200Utils.normalize(from, to);
		assertNotNull(from);
		assertNotNull(to);
		assertTrue(from.exists());
		assertTrue(to.exists());
		assertEquals(from.length(), to.length());
	}
}