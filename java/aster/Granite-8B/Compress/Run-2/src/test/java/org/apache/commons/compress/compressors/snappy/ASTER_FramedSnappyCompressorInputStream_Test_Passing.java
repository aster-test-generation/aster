/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
public class Aster_FramedSnappyCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesStandardDialect_szNG0() throws Exception {
        byte[] signature = new byte[FramedSnappyCompressorInputStream.SZ_SIGNATURE.length];
        boolean result = FramedSnappyCompressorInputStream.matches(signature, FramedSnappyCompressorInputStream.SZ_SIGNATURE.length);
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithEmptyBuffer_ByeA3() throws Exception {
        InputStream in = mock(InputStream.class);
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in);
        byte[] b = new byte[0];
        int off = 0;
        int len = 0;
        int read = framedSnappyCompressorInputStream.read(b, off, len);
        assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithNonEmptyBuffer_yFEM4() throws Exception {
        InputStream in = mock(InputStream.class);
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in);
        byte[] b = new byte[10];
        int off = 0;
        int len = 10;
        when(in.read(b, off, len)).thenReturn(5);
        int read = framedSnappyCompressorInputStream.read(b, off, len);
        assertEquals(5, read);
        verify(in, times(1)).read(b, off, len);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmask_nnwC0() throws Exception {
        long x = 1234567890L;
        long expected = 3728043489L;
        long actual = FramedSnappyCompressorInputStream.unmask(x);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithInputStreamAndDialect_NItE0() throws IOException {
        InputStream in = mock(InputStream.class);
        FramedSnappyDialect dialect = FramedSnappyDialect.STANDARD;
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in, dialect);
        framedSnappyCompressorInputStream.close();
        verify(in, times(1)).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithInputStreamBlockSizeAndDialect_tqWI1() throws IOException {
        InputStream in = mock(InputStream.class);
        int blockSize = 1024;
        FramedSnappyDialect dialect = FramedSnappyDialect.STANDARD;
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in, blockSize, dialect);
        framedSnappyCompressorInputStream.close();
        verify(in, times(1)).close();
    }
}