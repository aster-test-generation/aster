/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveSparseEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsExtended_onMw0() throws IOException {
		TarArchiveSparseEntry tarArchiveSparseEntry = new TarArchiveSparseEntry(new byte[512]);
		assertFalse(tarArchiveSparseEntry.isExtended());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSparseHeaders_umzm0_1() throws IOException {
        byte[] headerBuf = new byte[512];
        TarArchiveSparseEntry tarArchiveSparseEntry = new TarArchiveSparseEntry(headerBuf);
        List<TarArchiveStructSparse> sparseHeaders = tarArchiveSparseEntry.getSparseHeaders();
        assertNotNull(sparseHeaders);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSparseHeaders_umzm0_2() throws IOException {
        byte[] headerBuf = new byte[512];
        TarArchiveSparseEntry tarArchiveSparseEntry = new TarArchiveSparseEntry(headerBuf);
        List<TarArchiveStructSparse> sparseHeaders = tarArchiveSparseEntry.getSparseHeaders();
        assertTrue(sparseHeaders.isEmpty());}
}