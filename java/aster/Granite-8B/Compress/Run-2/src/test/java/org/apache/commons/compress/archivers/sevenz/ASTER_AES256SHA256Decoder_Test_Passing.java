/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AES256SHA256Decoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSha256Password_heLT0() throws Exception {
        char[] password = "password".toCharArray();
        int numCyclesPower = 1000;
        byte[] salt = new byte[16];
        byte[] expected = new byte[32]; // Replace with expected result
        byte[] actual = AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOptionsAsPropertiesWithNullOptions_VhwZ0() throws IOException {
        AES256SHA256Decoder aes256SHA256Decoder = new AES256SHA256Decoder();
        byte[] options = null;
        byte[] expectedProps = new byte[2];
        expectedProps[0] = 0;
        expectedProps[1] = 0;
        byte[] actualProps = aes256SHA256Decoder.getOptionsAsProperties(options);
        assertEquals(expectedProps, actualProps);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16Decode1_SmAL0() throws Exception {
        char[] chars = null;
        byte[] expected = null;
        byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16Decode2_lUKu1() throws Exception {
        char[] chars = new char[0];
        byte[] expected = new byte[0];
        byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16Decode3_NEPE2() throws Exception {
        char[] chars = new char[] {'a', 'b', 'c'};
        byte[] expected = new byte[] {-92, -107, -96, -91, -88, -83};
        byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16Decode4_BcWL3() throws Exception {
        char[] chars = new char[] {'a', 'b', 'c', 'd', 'e', 'f'};
        byte[] expected = new byte[] {-92, -107, -96, -91, -88, -83, 0, 0};
        byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16Decode5_uRIp4() throws Exception {
        char[] chars = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'};
        byte[] expected = new byte[] {-92, -107, -96, -91, -88, -83, 0, 0, 0, 0};
        byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16Decode6_DVqm5() throws Exception {
        char[] chars = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'};
        byte[] expected = new byte[] {-92, -107, -96, -91, -88, -83, 0, 0, 0, 0, 0, 0};
        byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16Decode7_cjJA6() throws Exception {
        char[] chars = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'};
        byte[] expected = new byte[] {-92, -107, -96, -91, -88, -83, 0, 0, 0, 0, 0, 0, 0, 0};
        byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
        assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUtf16Decode8_zyFE7() throws Exception {
        char[] chars = new char[] {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'};
        byte[] expected = new byte[] {-92, -107, -96, -91, -88, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        byte[] actual = AES256SHA256Decoder.utf16Decode(chars);
        assertArrayEquals(expected, actual);
    }
}