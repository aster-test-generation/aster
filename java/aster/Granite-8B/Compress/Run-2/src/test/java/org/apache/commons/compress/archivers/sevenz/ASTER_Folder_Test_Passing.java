/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Folder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_fjXI0() throws Exception {
        Folder folder = new Folder();
        int index = 0;
        int result = folder.findBindPairForInStream(index);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStreamWhenBindPairsNull_eNZg1() throws Exception {
        Folder folder = new Folder();
        folder.bindPairs = null;
        int index = 0;
        int result = folder.findBindPairForInStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStreamWhenIndexNotFound_oivF2() throws Exception {
        Folder folder = new Folder();
        folder.bindPairs = new BindPair[1];
        int index = 1;
        int result = folder.findBindPairForInStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream_ySkp0() throws Exception {
        Folder folder = new Folder();
        int index = 0;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStreamWithNullBindPairs_CElP1() throws Exception {
        Folder folder = new Folder();
        folder.bindPairs = null;
        int index = 0;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStreamWithEmptyBindPairs_NueC2() throws Exception {
        Folder folder = new Folder();
        folder.bindPairs = new BindPair[0];
        int index = 0;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test1_tyGe0() throws Exception {
    Folder folder = new Folder();
    folder.totalOutputStreams = 0;
    long result = folder.getUnpackSize();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test2_JyPO1() throws Exception {
    Folder folder = new Folder();
    folder.totalOutputStreams = 1;
    long result = folder.getUnpackSize();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test3_wMFF2() throws Exception {
    Folder folder = new Folder();
    folder.totalOutputStreams = 2;
    long result = folder.getUnpackSize();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test4_DPTO3() throws Exception {
    Folder folder = new Folder();
    folder.totalOutputStreams = 3;
    long result = folder.getUnpackSize();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToString_cQys0() throws Exception {
        Folder folder = new Folder();
        assertEquals("Folder with 0 coders, 0 input streams, 0 output streams, 0 bind pairs, 0 packed streams, 0 unpack sizes, without CRC and 0 unpack streams", folder.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToStringWithcoders_BRSQ1() throws Exception {
        Folder folder = new Folder();
        folder.coders = new Coder[1];
        assertEquals("Folder with 1 coders, 0 input streams, 0 output streams, 0 bind pairs, 0 packed streams, 0 unpack sizes, without CRC and 0 unpack streams", folder.toString());
    }
}