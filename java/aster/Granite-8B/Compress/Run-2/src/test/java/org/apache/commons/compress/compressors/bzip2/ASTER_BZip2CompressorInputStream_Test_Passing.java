/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.bzip2;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BZip2CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_FpRy0() throws Exception {
        byte[] signature = new byte[3];
        signature[0] = 'B';
        signature[1] = 'Z';
        signature[2] = 'h';
        boolean result = BZip2CompressorInputStream.matches(signature, 3);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithLengthLessThanThree_Sajd3() throws Exception {
        byte[] signature = new byte[2];
        signature[0] = 'B';
        signature[1] = 'Z';
        boolean result = BZip2CompressorInputStream.matches(signature, 2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureNull_Ckpw4() throws Exception {
        byte[] signature = null;
        boolean result = BZip2CompressorInputStream.matches(signature, 3);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureEmpty_zMZD5() throws Exception {
        byte[] signature = new byte[0];
        boolean result = BZip2CompressorInputStream.matches(signature, 0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSignatureNullAndLengthZero_hvgA6() throws Exception {
        byte[] signature = null;
        boolean result = BZip2CompressorInputStream.matches(signature, 0);
        assertFalse(result);
    }
}