/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.math.BigInteger;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromBigInteger_rMSl1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1234217890123421789L));
        byte[] bytes = zipEightByteInteger.getBytes();
        assertArrayEquals(new byte[]{21, -86, 78, -106, -11, 115, -121, 57}, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromLong_hnGd2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234217890123421789L);
        byte[] bytes = zipEightByteInteger.getBytes();
        assertArrayEquals(new byte[]{21, -86, 78, -106, -11, 115, -121, 57}, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayIntInvalidOffset_YHWd4() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    bytes[7] = 8;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 1);
    try {
        BigInteger actual = zipEightByteInteger.getValue();
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayIntInvalidOffset2_KvHn5() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    bytes[7] = 8;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 9);
    try {
        BigInteger actual = zipEightByteInteger.getValue();
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInvalidLength_GhQW6() {
    byte[] bytes = new byte[7];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    try {
        BigInteger actual = zipEightByteInteger.getValue();
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesLongValue_afhC1() {
    long value = 1234567890123456789L;
    byte[] expected = {0,21,21,21,21,21,21,21};
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesBigIntegerValueWithNegativeValue_HyaB5() {
    BigInteger value = new BigInteger("-12345678901234567890");
    byte[] expected = {0,46,46,46,46,46,46, -128};
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesBigIntegerValueWithLeftmostBitSetAndNegativeValue_wkwS7() {
    BigInteger value = new BigInteger("-9223372036854775808");
    byte[] expected = {0, -1, -1, -1, -1, -1, -1, -1};
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithLongValue_qjSa0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234-467890L);
        byte[] expectedBytes = {-46, -46, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expectedBytes, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigIntegerValue_dBEG1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1234-467890L));
        byte[] expectedBytes = {-46, -46, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expectedBytes, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithOffsetValue_Aptw3() {
        byte[] bytes = new byte[10];
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 2);
        byte[] expectedBytes = {0, 0,0, -46, 0, 0, 0, 0};
        assertArrayEquals(expectedBytes, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetValue4_GBRH3() {
    final byte[] bytes = new byte[9];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 0;
    bytes[8] = 1;
    assertEquals(
        new BigInteger("18446744073709551616", 10), ZipEightByteInteger.getValue(bytes, 0));
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetValue5_DEWa4() {
    final byte[] bytes = new byte[9];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 1;
    bytes[8] = 0;
    assertEquals(
        new BigInteger("340282366920938463463374607431768211456", 10),
        ZipEightByteInteger.getValue(bytes, 0));
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetValue6_TVuj5() {
    final byte[] bytes = new byte[9];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 1;
    bytes[7] = 0;
    bytes[8] = 0;
    assertEquals(
        new BigInteger("680564733841876926926749214863536422912", 10),
        ZipEightByteInteger.getValue(bytes, 0));
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueBigInteger_WGNx2_RunZ0() {
    BigInteger value = new BigInteger("12345678");
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(value);
    BigInteger expected = value;
    byte[] bytes = value.toByteArray();
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_oLwW0_fid1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertEquals("ZipEightByteInteger value: 12345678", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithByteArray_ylRH3_fid1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
        assertEquals("ZipEightByteInteger value: 12345678", zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue3_ZSvi2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{-1, -1, -1, -1, -1, -1, -1, -1}, 0);
        BigInteger expectedValue = BigInteger.valueOf(-1);
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue4_mvGS3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{127, -1, -1, -1, -1, -1, -1, -1}, 0);
        BigInteger expectedValue = BigInteger.valueOf(127);
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue5_DnGp4() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{-128, 0, 0, 0, 0, 0, 0, 0}, 0);
        BigInteger expectedValue = BigInteger.valueOf(-128);
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue6_Hhdx5() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        BigInteger expectedValue = BigInteger.ONE;
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue7_KaIg6() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, -1}, 0);
        BigInteger expectedValue = BigInteger.valueOf(-1);
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue8_ECdC7() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{127, -1, -1, -1, -1, -1, -1, 0}, 0);
        BigInteger expectedValue = BigInteger.valueOf(86823040);
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue9_YNBh8() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{-128, 0, 0, 0, 0, 0, 0, -1}, 0);
        BigInteger expectedValue = BigInteger.valueOf(-86823041);
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue10_fPJN9() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 1, 0}, 0);
        BigInteger expectedValue = BigInteger.valueOf(256);
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_oIfP0() {
        byte[] bytes = new byte[8];
        bytes[0] = 0;
        bytes[1] = 0;
        bytes[2] = 0;
        bytes[3] = 0;
        bytes[4] = 0;
        bytes[5] = 0;
        bytes[6] = 0;
        bytes[7] = 1;
        long expected = 1;
        long actual = ZipEightByteInteger.getLongValue(bytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromBigInteger_rMSl1_fid1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1234567890123456789L));
        byte[] bytes = zipEightByteInteger.getBytes();
        assertArrayEquals(new byte[]{56, -86, 78, -106, -11, 115, -121, 57}, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromLong_hnGd2_fid1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234567890123456789L);
        byte[] bytes = zipEightByteInteger.getBytes();
        assertArrayEquals(new byte[]{56, -86, 78, -106, -11, 115, -121, 57}, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInt_kSxM0_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    bytes[7] = 8;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 0);
    BigInteger expected = new BigInteger("12345678");
    BigInteger actual = ZipEightByteInteger.getValue(bytes, 0);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArray_ZVKX1_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    bytes[7] = 8;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    BigInteger expected = new BigInteger("12345678");
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayIntInvalidOffset_YHWd4_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    bytes[7] = 8;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 1);
    try {
        BigInteger actual = ZipEightByteInteger.getValue(bytes, 1);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayIntInvalidOffset2_KvHn5_fid1() {
    byte[] bytes = new byte[8];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    bytes[7] = 8;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 9);
    try {
        BigInteger actual = ZipEightByteInteger.getValue(bytes, 9);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInvalidLength_GhQW6_fid1() {
    byte[] bytes = new byte[7];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    bytes[6] = 7;
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
    try {
        BigInteger actual = ZipEightByteInteger.getValue(bytes);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_geJX0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        long longValue = zipEightByteInteger.getLongValue();
        assertEquals(1, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue4_ejGI3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1});
        long longValue = zipEightByteInteger.getLongValue();
        assertEquals(1, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesBigIntegerValue_VXAv0_fid1() {
    BigInteger value = new BigInteger("12345678901234567890");
    byte[] expected = {0, 0, 0, 0, 0, 0, 0, 0};
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesLongValue_afhC1_fid1() {
    long value = 1234567890123456789L;
    byte[] expected = {0, 0, 0, 0, 0, 0, 0, 0};
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesBigIntegerValueWithLeftmostBitSet_bkgy3_fid1() {
    BigInteger value = new BigInteger("9223372036854775808");
    byte[] expected = {-128, 0, 0, 0, 0, 0, 0, 0};
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesBigIntegerValueWithNegativeValue_HyaB5_fid1() {
    BigInteger value = new BigInteger("-12345678901234567890");
    byte[] expected = {0, 0, 0, 0, 0, 0, 0, -128};
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesBigIntegerValueWithLeftmostBitSetAndNegativeValue_wkwS7_fid1() {
    BigInteger value = new BigInteger("-9223372036854775808");
    byte[] expected = {127, -1, -1, -1, -1, -1, -1, -1};
    byte[] actual = ZipEightByteInteger.getBytes(value);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithLongValue_qjSa0_fid1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234567890L);
        byte[] expectedBytes = {56, -46, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expectedBytes, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithBigIntegerValue_dBEG1_fid1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1234567890L));
        byte[] expectedBytes = {56, -46, 0, 0, 0, 0, 0, 0};
        assertArrayEquals(expectedBytes, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWithOffsetValue_Aptw3_fid1() {
        byte[] bytes = new byte[10];
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 2);
        byte[] expectedBytes = {0, 0, 56, -46, 0, 0, 0, 0};
        assertArrayEquals(expectedBytes, zipEightByteInteger.getBytes());
    }
}