/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ConstantValueAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameObject_lAkT0() throws Exception {
    ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
    assertTrue(attribute.equals(attribute));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameValues_qOkv1() throws Exception {
    ConstantValueAttribute attribute1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute attribute2 = new ConstantValueAttribute(new ByteCode(1));
    assertTrue(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentValues_iFdr2() throws Exception {
    ConstantValueAttribute attribute1 = new ConstantValueAttribute(new ByteCode(1));
    ConstantValueAttribute attribute2 = new ConstantValueAttribute(new ByteCode(2));
    assertFalse(attribute1.equals(attribute2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_YWRs3() throws Exception {
    ConstantValueAttribute attribute = new ConstantValueAttribute(new ByteCode(1));
    assertFalse(attribute.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ICVJ0() throws Exception {
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(1));
        String expected = "Constant:ConstantValueAttribute(opcode=1, nested=[])";
        assertEquals(expected, constantValueAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_fnFQ0_1() throws Exception {
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(0));
        ClassFileEntry[] nestedClassFileEntries = constantValueAttribute.getNestedClassFileEntries();
        assertNotNull(nestedClassFileEntries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_fnFQ0_2() throws Exception {
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(0));
        ClassFileEntry[] nestedClassFileEntries = constantValueAttribute.getNestedClassFileEntries();
        assertEquals(2, nestedClassFileEntries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstantValueAttributeGetLength_PzNw0() throws Exception {
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(0));
        assertEquals(2, constantValueAttribute.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_TWfG0() throws IOException {
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(0));
        DataOutputStream dos = new DataOutputStream(System.out);
        constantValueAttribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_sTHU0() throws Exception {
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(0));
        assertEquals(31, constantValueAttribute.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNestedEntries_tzCs1() throws Exception {
        ClassFileEntry[] nestedEntries = new ClassFileEntry[1];
        nestedEntries[0] = new ByteCode(0);
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(0, nestedEntries));
        assertEquals(62, constantValueAttribute.hashCode());
    }
}