/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RunCodec_Test_Passing {
    private RunCodec runCodec;
    private BHSDCodec aCodec;
    private BHSDCodec bCodec;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_Hcts0() throws Pack200Exception {
        aCodec = new BHSDCodec(1, 2);
        bCodec = new BHSDCodec(3, 4, 5, 6);
        runCodec = new RunCodec(7, aCodec, bCodec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetACodec_yVPD1() throws Exception {
        assertEquals(aCodec, runCodec.getACodec());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_Tnpz0() throws Exception {
        BHSDCodec aCodec = new BHSDCodec(1, 2);
        BHSDCodec bCodec = new BHSDCodec(3, 4, 5, 6);
        RunCodec runCodec = new RunCodec(7, aCodec, bCodec);
        String expected = "RunCodec[k=7;aCodec=BHSDCodec[b=1;h=2];bCodec=BHSDCodec[b=3;h=4;s=5;d=6]]";
        assertEquals(expected, runCodec.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_UHuC0() throws Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
        BHSDCodec bHSDCodec2 = new BHSDCodec(1, 2, 3, 4);
        RunCodec runCodec = new RunCodec(1, bHSDCodec, bHSDCodec2);
        byte[] result = runCodec.encode(1);
        assertEquals(0, result.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetK_LneR0() throws Exception {
        BHSDCodec bHSDCodec1 = new BHSDCodec(0, 0);
        BHSDCodec bHSDCodec2 = new BHSDCodec(0, 0, 0, 0);
        BHSDCodec bHSDCodec3 = new BHSDCodec(0, 0, 0);
        RunCodec runCodec = new RunCodec(0, bHSDCodec1, bHSDCodec2);
        assertEquals(0, runCodec.getK());
    }
}