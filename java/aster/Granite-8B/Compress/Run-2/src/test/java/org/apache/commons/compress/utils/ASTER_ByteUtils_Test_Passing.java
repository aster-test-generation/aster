/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian_1_sKrI0_5() {
        byte[] b = new byte[8];
        long value = 1234567890123456L;
        int off = 0;
        int length = 8;
        ByteUtils.toLittleEndian(b, value, off, length);
        assertEquals(-43, b[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian_1_sKrI0_6() {
        byte[] b = new byte[8];
        long value = 1234567890123456L;
        int off = 0;
        int length = 8;
        ByteUtils.toLittleEndian(b, value, off, length);
        assertEquals(98, b[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian_1_sKrI0_8() {
        byte[] b = new byte[8];
        long value = 1234567890123456L;
        int off = 0;
        int length = 8;
        ByteUtils.toLittleEndian(b, value, off, length);
        assertEquals(0, b[7]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian_2_sLir1_1() {
        byte[] b = new byte[4];
        long value = 4294967295L;
        int off = 0;
        int length = 4;
        ByteUtils.toLittleEndian(b, value, off, length);
        assertEquals(-1, b[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian_2_sLir1_2() {
        byte[] b = new byte[4];
        long value = 4294967295L;
        int off = 0;
        int length = 4;
        ByteUtils.toLittleEndian(b, value, off, length);
        assertEquals(-1, b[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian_2_sLir1_3() {
        byte[] b = new byte[4];
        long value = 4294967295L;
        int off = 0;
        int length = 4;
        ByteUtils.toLittleEndian(b, value, off, length);
        assertEquals(-1, b[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian_2_sLir1_4() {
        byte[] b = new byte[4];
        long value = 4294967295L;
        int off = 0;
        int length = 4;
        ByteUtils.toLittleEndian(b, value, off, length);
        assertEquals(-1, b[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromLittleEndian_qJro0() {
        byte[] bytes = {0x01, 0x02, 0x03, 0x04};
        long expected = 0x04030201L;
        long actual = ByteUtils.fromLittleEndian(bytes);
        assertEquals(expected, actual);
    }
}