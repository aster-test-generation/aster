/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;

import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttributeBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseAttributesWithNullSegment_ctOa1() throws Exception {
        Segment segment = null;
        AttributeLayout attributeLayout = new AttributeLayout("TestLayout", 1, "TestLayout", 1);
        try {
            NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Segment cannot be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseAttributesWithNullAttributeLayout_Tgga2() throws Exception {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = null;
        try {
            NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("AttributeLayout cannot be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls_kUYs0() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[1];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls2_sZDd1() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[2];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls3_MHRD2() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[3];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls4_DOSF3() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[4];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls5_tzFQ4() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[5];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls6_NNdA5() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[6];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls7_aXwl6() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[7];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls8_UMHf7() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[8];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls9_lrZG8() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[9];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls10_SQEN9() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[10];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls_csvJ0() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        newAttributeBands.setBackwardsCalls(new int[]{1, 2, 3, 4});
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithEmptyBackwardsCallsArray_JjHX1() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        newAttributeBands.setBackwardsCalls(new int[]{});
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithNullBackwardsCallsArray_vMca2() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        newAttributeBands.setBackwardsCalls(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithNegativeBackwardsCalls_Pvsb3() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        newAttributeBands.setBackwardsCalls(new int[]{-1, -2, -3, -4});
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls_IucY0() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
        int[] backwardsCalls = {1, 2, 3, 4};
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCodec_cfMv0() throws Exception {
	NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
	BHSDCodec codec = newAttributeBands.getCodec("O");
	Assertions.assertEquals(Codec.BRANCH5, codec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCodec2_afkT1() throws Exception {
	NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
	BHSDCodec codec = newAttributeBands.getCodec("P");
	Assertions.assertEquals(Codec.BCI5, codec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCodec3_jgIf2() throws Exception {
	NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
	BHSDCodec codec = newAttributeBands.getCodec("S");
	Assertions.assertEquals(Codec.SIGNED5, codec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCodec4_HZCl3() throws Exception {
	NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
	BHSDCodec codec = newAttributeBands.getCodec("B");
	Assertions.assertEquals(Codec.BYTE1, codec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCodec5_WnLp4() throws Exception {
	NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
	BHSDCodec codec = newAttributeBands.getCodec("layoutElement");
	Assertions.assertEquals(Codec.UNSIGNED5, codec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpack_jlCb0() throws IOException, Pack200Exception {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        newAttributeBands.unpack();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_JCFB0() throws IOException, Pack200Exception {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        InputStream in = null; // initialize with actual input stream
        newAttributeBands.read(in);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBackwardsCallCount_LsEw0() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 1, "layout", 1));
        int result = newAttributeBands.getBackwardsCallCount();
        assertEquals(0, result);
    }
}