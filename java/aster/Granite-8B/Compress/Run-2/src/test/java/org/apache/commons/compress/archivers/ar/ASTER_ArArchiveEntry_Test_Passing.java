/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameName_oXeX0() {
        ArArchiveEntry entry1 = new ArArchiveEntry("test.txt", 100);
        ArArchiveEntry entry2 = new ArArchiveEntry("test.txt", 100);
        assertTrue(entry1.equals(entry2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_koZY1() {
        ArArchiveEntry entry1 = new ArArchiveEntry("test.txt", 100);
        ArArchiveEntry entry2 = new ArArchiveEntry("test2.txt", 100);
        assertFalse(entry1.equals(entry2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullName_KKTP2() {
        ArArchiveEntry entry1 = new ArArchiveEntry(null, 100);
        ArArchiveEntry entry2 = new ArArchiveEntry(null, 100);
        assertTrue(entry1.equals(entry2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullObject_MpaN8() {
        ArArchiveEntry entry1 = new ArArchiveEntry("test.txt", 100);
        assertFalse(entry1.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClassObject_Eyhb9() {
        ArArchiveEntry entry1 = new ArArchiveEntry("test.txt", 100);
        assertFalse(entry1.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory_Vcrn0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        boolean isDirectory = entry.isDirectory();
        assertFalse(isDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithUserId_IwUO2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 100, 101, 102, 103L);
        boolean isDirectory = entry.isDirectory();
        assertFalse(isDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithFile_zmmn3() throws IOException {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input.txt"), "entryName");
        boolean isDirectory = entry.isDirectory();
        assertFalse(isDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_BqBu0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithUserId_vRjL2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 100, 200, 300, 400L);
        assertEquals(200, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithFile_kjxw3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input"), "entry");
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_uVqW0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        assertEquals(10L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithUserId_LrRC2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 100, 200, 300, 400L);
        assertEquals(10L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_EuAG0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        assertEquals(0, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserIdWithUserId_Wwwp2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 100, 200, 300, 400L);
        assertEquals(100, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserIdWithFile_fVNQ3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "entryName");
        assertEquals(0, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_hFct0() {
        ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithUserId_yKDv2() {
        ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L, 100, 100, 100, 100L);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithFile_vUkK3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("test.txt"), "test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLength_RrSm0() {
        ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L);
        assertEquals(100L, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthWithUserId_IGTy2() {
        ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L, 100, 100, 100, 100L);
        assertEquals(100L, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_with_userId_groupId_mode_lastModified_XLYT2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 1, 2, 3, 4L);
        assertEquals(3, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameNameAndDifferentLength_dCGM3_fid1() {
        ArArchiveEntry entry1 = new ArArchiveEntry("test.txt", 100);
        ArArchiveEntry entry2 = new ArArchiveEntry("test.txt", 200);
        assertTrue(entry1.equals(entry2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithFile_vuok3_fid1() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "entryName");
        assertEquals(0L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_BulJ0_1() {
        ArArchiveEntry entry1 = new ArArchiveEntry("file1.txt", 100L);
        ArArchiveEntry entry2 = new ArArchiveEntry("file2.txt", 200L);
        assertEquals(entry1.hashCode(), entry1.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithUserId_qOdx1_1() {
        ArArchiveEntry entry1 = new ArArchiveEntry("file1.txt", 100L, 100, 100, 100, 100L);
        ArArchiveEntry entry2 = new ArArchiveEntry("file2.txt", 200L, 100, 100, 100, 100L);
        assertEquals(entry1.hashCode(), entry1.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithFile_VHYV2_1() throws IOException {
        ArArchiveEntry entry1 = new ArArchiveEntry(new File("file1.txt"), "file1.txt");
        ArArchiveEntry entry2 = new ArArchiveEntry(new File("file2.txt"), "file2.txt");
        assertEquals(entry1.hashCode(), entry1.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthWithFile_yemL3_fid1() throws IOException {
        ArArchiveEntry entry = new ArArchiveEntry(new File("test.txt"), "test.txt");
        assertEquals(0L, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_cieG33188() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 133188L);
        assertEquals(33188, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_with_inputFile_entryName_JTAd3_fid1() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "name");
        assertEquals(33188, entry.getMode());
    }
}