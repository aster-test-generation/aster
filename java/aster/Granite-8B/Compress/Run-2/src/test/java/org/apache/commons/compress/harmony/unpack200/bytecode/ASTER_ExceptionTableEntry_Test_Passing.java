/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;

import org.apache.commons.compress.harmony.pack200.CPClass;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExceptionTableEntry_Test_Passing {
private int endPcRenumbered;
private int handlerPC;
private int handlerPcRenumbered;
private int startPC;
private int startPcRenumbered;
private int endPC;
private ExceptionTableEntry exceptiontableentry;
private List<Integer> byteCodeOffsets;
private CPClass catchType;
private int catchTypeIndex;
@Mock
    private ClassConstantPool pool;
@Mock
    private CPClass resolvedCatchType;
private DataOutputStream dos;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite() throws IOException {
        endPcRenumbered = 10;
        handlerPcRenumbered = 20;
        catchTypeIndex = 30;
        startPcRenumbered = 40;
        exceptiontableentry = new ExceptionTableEntry(startPcRenumbered, endPcRenumbered, handlerPcRenumbered, null);
        dos = mock(DataOutputStream.class);
        exceptiontableentry.write(dos);
        verify(dos, times(1)).writeShort(startPcRenumbered);
        verify(dos, times(1)).writeShort(endPcRenumbered);
        verify(dos, times(1)).writeShort(handlerPcRenumbered);
        verify(dos, times(1)).writeShort(catchTypeIndex);
    }
}