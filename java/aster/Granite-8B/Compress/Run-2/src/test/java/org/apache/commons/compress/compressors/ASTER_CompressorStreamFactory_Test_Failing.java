/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.Set;
import java.util.SortedMap;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getCompressorInputStreamProviders_decompressUntilEOF_false_IZEl0_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getCompressorInputStreamProviders_decompressUntilEOF_false_IZEl0_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
        assertTrue(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getCompressorInputStreamProviders_decompressUntilEOF_true_kUIG1_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getCompressorInputStreamProviders_decompressUntilEOF_true_kUIG1_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
        assertTrue(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getCompressorInputStreamProviders_decompressUntilEOF_true_memoryLimitInKb_1024_FKFr2_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getCompressorInputStreamProviders_decompressUntilEOF_true_memoryLimitInKb_1024_FKFr2_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
        assertTrue(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressorOutputStreamProviders_1_Dyim0() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false);
        SortedMap<String, CompressorStreamProvider> actual = compressorStreamFactory.getCompressorOutputStreamProviders();
        SortedMap<String, CompressorStreamProvider> expected = Collections.emptySortedMap();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressorOutputStreamProviders_2_qLmh1() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
        SortedMap<String, CompressorStreamProvider> actual = compressorStreamFactory.getCompressorOutputStreamProviders();
        SortedMap<String, CompressorStreamProvider> expected = Collections.emptySortedMap();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressorOutputStreamProviders_3_dgkW2() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1000);
        SortedMap<String, CompressorStreamProvider> actual = compressorStreamFactory.getCompressorOutputStreamProviders();
        SortedMap<String, CompressorStreamProvider> expected = Collections.emptySortedMap();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressorOutputStreamProviders_4_nFHm3() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false, 1000);
        SortedMap<String, CompressorStreamProvider> actual = compressorStreamFactory.getCompressorOutputStreamProviders();
        SortedMap<String, CompressorStreamProvider> expected = Collections.emptySortedMap();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCompressorOutputStreamProviders_5_uenL4() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
        SortedMap<String, CompressorStreamProvider> actual = compressorStreamFactory.getCompressorOutputStreamProviders();
        SortedMap<String, CompressorStreamProvider> expected = Collections.emptySortedMap();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableCompressorOutputStreamProviders_LfYk0() {
        SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream_zmPi0() throws Exception {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        CompressorInputStream result = factory.createCompressorInputStream(in);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStreamWithDecompressUntilEOF_dUMg1() throws Exception {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        CompressorInputStream result = factory.createCompressorInputStream(in);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStreamWithDecompressUntilEOFAndMemoryLimit_kDPa2() throws Exception {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        InputStream in = null;
        CompressorInputStream result = factory.createCompressorInputStream(in);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStreamWithCompressorInputStream_EZWZ3() throws Exception {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        CompressorInputStream in = null;
        CompressorInputStream result = factory.createCompressorInputStream(in);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStreamWithCompressorInputStreamAndDecompressUntilEOF_vxZA4() throws Exception {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        CompressorInputStream in = null;
        CompressorInputStream result = factory.createCompressorInputStream(in);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStreamWithCompressorInputStreamAndDecompressUntilEOFAndMemoryLimit_aBju5() throws Exception {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        CompressorInputStream in = null;
        CompressorInputStream result = factory.createCompressorInputStream(in);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStreamWithStringAndInputStream_KrAV9() throws Exception {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        String name = "test";
        InputStream in = null;
        CompressorInputStream result = factory.createCompressorInputStream(name, in);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStreamWithStringAndInputStreamAndDecompressUntilEOF_Rlpu10() throws Exception {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        String name = "test";
        InputStream in = null;
        CompressorInputStream result = factory.createCompressorInputStream(name, in);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStreamWithStringAndInputStreamAndDecompressUntilEOFAndMemoryLimit_gDCM11() throws Exception {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        String name = "test";
        InputStream in = null;
        CompressorInputStream result = factory.createCompressorInputStream(name, in);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzmaWithDecompressUntilEOFFalse_HCpj2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false);
        String lzma = factory.getLzma();
        assertNull(lzma);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDetectWithIOException_cMpU5_1() {
        InputStream inputStream = null;
        IOException exception = assertThrows(IOException.class, () -> {
            CompressorStreamFactory.detect(inputStream);
        });}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNames_IuKB0_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertEquals(8, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNames_IuKB0_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("gzip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNamesWithMemoryLimit_JzZu1_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertEquals(8, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNamesWithMemoryLimit_JzZu1_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertTrue(compressorNames.contains("gzip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressUntilEOF_default_noBf2() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Boolean result = factory.getDecompressUntilEOF();
        assertEquals(false, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPack200_NfZN0() {
        String expected = "Pack200";
        String actual = CompressorStreamFactory.getPack200();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLZ4Block_aobp0() {
        String lz4Block = CompressorStreamFactory.getLZ4Block();
        assertEquals("LZ4_BLOCK", lz4Block);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getDeflate_defaultConstructor_GARV1() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        assertEquals("DEFLATE", factory.getDeflate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getDeflate_withDecompressUntilEOF_NDTf2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        assertEquals("DEFLATE", factory.getDeflate());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getDeflate_withMemoryLimit_KbJD3() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        assertEquals("DEFLATE", factory.getDeflate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSnappyFramed_NxDD0() {
        String expected = "SNAPPY_FRAMED";
        String actual = CompressorStreamFactory.getSnappyFramed();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetBrotli_rpCT0() {
        assertEquals("BROTLI", CompressorStreamFactory.getBrotli());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetBrotliWithDecompressUntilEOF_NDze2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        assertEquals("BROTLI", factory.getBrotli());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetBrotliWithMemoryLimit_kZwf3() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        assertEquals("BROTLI", factory.getBrotli());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream_oyhm0_1() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertNotNull(cin);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream_oyhm0_2() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertEquals(0, cin.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream_oyhm0_3() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertEquals(0, cin.getBytesRead());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream_oyhm0_4() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertEquals(0, cin.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream2_DczT1_1() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertNotNull(cin);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream2_DczT1_2() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertEquals(0, cin.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream2_DczT1_3() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertEquals(0, cin.getBytesRead());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream2_DczT1_4() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertEquals(0, cin.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream3_AaxA2_1() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertNotNull(cin);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream3_AaxA2_2() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertEquals(0, cin.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream3_AaxA2_3() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertEquals(0, cin.getBytesRead());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream3_AaxA2_4() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertEquals(0, cin.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream4_vLjn3_1() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 100);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertNotNull(cin);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream4_vLjn3_2() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 100);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertEquals(0, cin.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream4_vLjn3_3() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 100);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertEquals(0, cin.getBytesRead());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream4_vLjn3_4() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 100);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertEquals(0, cin.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream6_rQku5_1() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertNotNull(cin);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream6_rQku5_2() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertEquals(0, cin.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream6_rQku5_3() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertEquals(0, cin.getBytesRead());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream6_rQku5_4() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertEquals(0, cin.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream7_npTu6_1() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 100);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertNotNull(cin);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream7_npTu6_2() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 100);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertEquals(0, cin.getCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream7_npTu6_3() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 100);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertEquals(0, cin.getBytesRead());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream7_npTu6_4() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 100);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertEquals(0, cin.getUncompressedCount());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXz_xgPp0() {
        String expectedXz = "XZ";
        String actualXz = CompressorStreamFactory.getXz();
        assertEquals(expectedXz, actualXz);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressorInputStreamProviders_wYZK3_hWBU0_1() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
        SortedMap<String, CompressorStreamProvider> compressorInputStreamProviders = compressorStreamFactory.getCompressorInputStreamProviders();
        assertNotNull(compressorInputStreamProviders);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressorInputStreamProviders_wYZK3_hWBU0_2() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
        SortedMap<String, CompressorStreamProvider> compressorInputStreamProviders = compressorStreamFactory.getCompressorInputStreamProviders();
        assertFalse(compressorInputStreamProviders.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressorOutputStreamProviders_Byku4_YjcB0_1() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
        SortedMap<String, CompressorStreamProvider> compressorOutputStreamProviders = compressorStreamFactory.getCompressorOutputStreamProviders();
        assertNotNull(compressorOutputStreamProviders);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressorOutputStreamProviders_Byku4_YjcB0_2() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
        SortedMap<String, CompressorStreamProvider> compressorOutputStreamProviders = compressorStreamFactory.getCompressorOutputStreamProviders();
        assertFalse(compressorOutputStreamProviders.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream_bmMz0_eehE0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        Set<String> compressorNames = null;
        CompressorInputStream result = null;
        try {
            result = factory.createCompressorInputStream(in, compressorNames);
        } catch (CompressorException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream2_tCzU1_MsHs0() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        Set<String> compressorNames = null;
        CompressorInputStream result = null;
        try {
            result = factory.createCompressorInputStream(in, compressorNames);
        } catch (CompressorException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream3_SHdz2_udIW0() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 100);
        InputStream in = null;
        Set<String> compressorNames = null;
        CompressorInputStream result = null;
        try {
            result = factory.createCompressorInputStream(in, compressorNames);
        } catch (CompressorException e) {
            e.printStackTrace();
        }
        assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetZstandard_ficq0_fid2() {
        assertEquals("ZSTANDARD", CompressorStreamFactory.getZstandard());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBzip2_Cqdd0_fid2() {
        String expected = "BZIP2";
        String actual = CompressorStreamFactory.getBzip2();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetZ_LmEq0() {
        assertEquals("Z", CompressorStreamFactory.getZ());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLZ4Framed_fwRz0_fid2() {
        String expected = "LZ4_FRAMED";
        String actual = CompressorStreamFactory.getLZ4Framed();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetGzip_ucPn0_fid2() {
        assertEquals("GZIP", CompressorStreamFactory.getGzip());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzma_NYfA0_fid2() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        String lzma = factory.getLzma();
        assertEquals("LZMA", lzma);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzmaWithNegativeMemoryLimit_AxvX3_fid2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, -100);
        String lzma = factory.getLzma();
        assertEquals("LZMA", lzma);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBrotli_SqdY13() {
        String brotli = CompressorStreamFactory.getBrotli();
        assertEquals("brotli", brotli);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSnappyRaw_TkKT0_fid2() {
        String expected = "SNAPPY_RAW";
        String actual = CompressorStreamFactory.getSnappyRaw();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSnappyRawWithDecompressUntilEOF_TnRd1_fid2() {
        boolean decompressUntilEOF = true;
        CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF);
        String expected = "SNAPPY_RAW";
        String actual = factory.getSnappyRaw();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSnappyRawWithMemoryLimit_CdOV2_fid2() {
        int memoryLimitInKb = 1024;
        CompressorStreamFactory factory = new CompressorStreamFactory(false, memoryLimitInKb);
        String expected = "SNAPPY_RAW";
        String actual = factory.getSnappyRaw();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSnappyRawWithDecompressUntilEOFAndMemoryLimit_pVDB3_fid2() {
        boolean decompressUntilEOF = true;
        int memoryLimitInKb = 1024;
        CompressorStreamFactory factory = new CompressorStreamFactory(decompressUntilEOF, memoryLimitInKb);
        String expected = "SNAPPY_RAW";
        String actual = factory.getSnappyRaw();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNamesWithMemoryLimit_JzZu1_1_fid2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertEquals(8, compressorNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getDeflate_Nrtm0_fid2() {
        assertEquals("DEFLATE", CompressorStreamFactory.getDeflate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getCompressorInputStreamProviders_decompressUntilEOF_false_IZEl0() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
        assertNotNull(providers);
        assertTrue(providers.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getCompressorInputStreamProviders_decompressUntilEOF_true_kUIG1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
        assertNotNull(providers);
        assertTrue(providers.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void test_getCompressorInputStreamProviders_decompressUntilEOF_true_memoryLimitInKb_1024_FKFr2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorInputStreamProviders();
        assertNotNull(providers);
        assertTrue(providers.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDetectWithIOException_cMpU5() {
        InputStream inputStream = null;
        IOException exception = assertThrows(IOException.class, () -> {
            CompressorStreamFactory.detect(inputStream);
        });
        assertEquals("Stream is null", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNames_IuKB0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertEquals(8, compressorNames.size());
        assertTrue(compressorNames.contains("gzip"));
        assertTrue(compressorNames.contains("bzip2"));
        assertTrue(compressorNames.contains("xz"));
        assertTrue(compressorNames.contains("lzma"));
        assertTrue(compressorNames.contains("pack200"));
        assertTrue(compressorNames.contains("deflate"));
        assertTrue(compressorNames.contains("snappy-framed"));
        assertTrue(compressorNames.contains("lz4-block"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNamesWithMemoryLimit_JzZu1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false, 1024);
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        assertEquals(8, compressorNames.size());
        assertTrue(compressorNames.contains("gzip"));
        assertTrue(compressorNames.contains("bzip2"));
        assertTrue(compressorNames.contains("xz"));
        assertTrue(compressorNames.contains("lzma"));
        assertTrue(compressorNames.contains("pack200"));
        assertTrue(compressorNames.contains("deflate"));
        assertTrue(compressorNames.contains("snappy-framed"));
        assertTrue(compressorNames.contains("lz4-block"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream_oyhm0() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertNotNull(cin);
        assertEquals(0, cin.getCount());
        assertEquals(0, cin.getBytesRead());
        assertEquals(0, cin.getUncompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream2_DczT1() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertNotNull(cin);
        assertEquals(0, cin.getCount());
        assertEquals(0, cin.getBytesRead());
        assertEquals(0, cin.getUncompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream3_AaxA2() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertNotNull(cin);
        assertEquals(0, cin.getCount());
        assertEquals(0, cin.getBytesRead());
        assertEquals(0, cin.getUncompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream4_vLjn3() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 100);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in);
        assertNotNull(cin);
        assertEquals(0, cin.getCount());
        assertEquals(0, cin.getBytesRead());
        assertEquals(0, cin.getUncompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream6_rQku5() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertNotNull(cin);
        assertEquals(0, cin.getCount());
        assertEquals(0, cin.getBytesRead());
        assertEquals(0, cin.getUncompressedCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream7_npTu6() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 100);
        InputStream in = null;
        CompressorInputStream cin = factory.createCompressorInputStream("name", in, true);
        assertNotNull(cin);
        assertEquals(0, cin.getCount());
        assertEquals(0, cin.getBytesRead());
        assertEquals(0, cin.getUncompressedCount());
    }
}