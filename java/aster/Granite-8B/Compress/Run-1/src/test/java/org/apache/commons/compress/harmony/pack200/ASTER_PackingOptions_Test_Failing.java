/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingOptions_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile1_cwiw0() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "test.txt";
        boolean expected = true;
        boolean actual = packingOptions.isPassFile(passFileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile3_nKCW2() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "test/test.txt";
        boolean expected = true;
        boolean actual = packingOptions.isPassFile(passFileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLogFile_FKjq0() {
        PackingOptions packingOptions = new PackingOptions();
        String logFile = packingOptions.getLogFile();
        assertNotNull(logFile);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getUnknownClassAttributeAction_Clbj0() {
        PackingOptions packingOptions = new PackingOptions();
        Map<String, String> map = new HashMap<>();
        String type = "exampleType";
        String defaultValue = "exampleDefaultValue";
        String expected = "expectedValue";
        map.put(type, expected);
        String actual = packingOptions.getUnknownClassAttributeAction(type);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUnknownFieldAttributeAction_GHkd0() {
        PackingOptions packingOptions = new PackingOptions();
        Map<String, String> map = new HashMap<>();
        map.put("type1", "action1");
        map.put("type2", "action2");
        String defaultValue = "defaultAction";
        String type = "type3";
        String expected = "defaultAction";
        String actual = packingOptions.getUnknownFieldAttributeAction(type);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSegmentLimit_BHJb0() {
        PackingOptions packingOptions = new PackingOptions();
        long segmentLimit = packingOptions.getSegmentLimit();
        assertEquals(0, segmentLimit);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetUnknownMethodAttributeAction_DplO0()
{
    PackingOptions packingOptions = new PackingOptions();
    String type = "type";
    String defaultValue = "defaultValue";
    String expected = "expected";
    Map<String, String> map = new HashMap<>();
    map.put(type, expected);
    String actual = packingOptions.getUnknownMethodAttributeAction(type);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEffort_NLsA0() {
        PackingOptions packingOptions = new PackingOptions();
        int effort = packingOptions.getEffort();
        assertEquals(0, effort);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVerbose_dkFW0_1_fid2() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setVerbose(true);
        packingOptions.setVerbose(false);
        assertTrue(packingOptions.isVerbose());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSegmentLimit_dYnd1_1_fid2() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setSegmentLimit(0L);
    packingOptions.setSegmentLimit(1L);
    packingOptions.setSegmentLimit(Long.MAX_VALUE);
    packingOptions.setSegmentLimit(Long.MIN_VALUE);
    assertEquals(0L, packingOptions.getSegmentLimit());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSegmentLimit_dYnd1_2() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setSegmentLimit(0L);
    packingOptions.setSegmentLimit(1L);
    packingOptions.setSegmentLimit(Long.MAX_VALUE);
    packingOptions.setSegmentLimit(Long.MIN_VALUE);
    assertEquals(1L, packingOptions.getSegmentLimit());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSegmentLimit_dYnd1_3() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setSegmentLimit(0L);
    packingOptions.setSegmentLimit(1L);
    packingOptions.setSegmentLimit(Long.MAX_VALUE);
    packingOptions.setSegmentLimit(Long.MIN_VALUE);
    assertEquals(Long.MAX_VALUE, packingOptions.getSegmentLimit());}
}