/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBlockDeviceWithModeNotSetToC_ISBLK_NqqX1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(0);
        assertFalse(entry.isBlockDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime_arKP0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime6_MBps5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime7_nUZh6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime9_aojw8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetChksum_rSxn0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        assertEquals(10L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID_xVjT0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setGID(100L);
        assertEquals(100L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithNegativeValue_dbGD1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setGID(-100L);
        assertEquals(-100L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithZeroValue_cWKG2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setGID(0L);
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithMaxValue_HGMR3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setGID(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithMinValue_vXbS4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setGID(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithOverflowValue_XdUD5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setGID(Long.MAX_VALUE + 100L);
        assertEquals(-922337203685477580L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithUnderflowValue_EONL6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setGID(Long.MIN_VALUE - 100L);
        assertEquals(922337203685477580L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_CHwT0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName6_HurK5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName7_dUEn6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("file"), "name");
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName9_wzlU8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "name");
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsNetwork_lrqg0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertFalse(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsNetwork2_gmoQ1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertFalse(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsNetwork6_uQcn5() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertFalse(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsNetwork7_NnyP6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertFalse(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsNetwork9_Azgv8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertFalse(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj_AEsk0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMaj_crBf0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMaj(12345L);
        assertEquals(12345L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMajWithInvalidFormat_BhRH1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        try {
            entry.setRemoteDeviceMaj(12345L);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode_CgHM0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setInode(1L);
        assertEquals(1L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInodeWithNegativeNumber_CRql1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setInode(-1L);
        assertEquals(-1L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInodeWithZero_ltml2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setInode(0L);
        assertEquals(0L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInodeWithMaximumValue_iaOg3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setInode(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInodeWithMinimumValue_tBWI4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setInode(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInodeWithOverflowValue_YRwI5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setInode(Long.MAX_VALUE + 1L);
        assertEquals(Long.MAX_VALUE + 1L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInodeWithUnderflowValue_WMyE6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setInode(Long.MIN_VALUE - 1L);
        assertEquals(Long.MIN_VALUE - 1L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithNull_rHAh0() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		boolean result = entry.equals(null);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameObject_dvmD2() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		entry.setName("test");
		boolean result = entry.equals(entry);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameName_ODBg3() {
		CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name", 100L);
		CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name", 100L);
		boolean result = entry1.equals(entry2);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentName_AonW4() {
		CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name1", 100L);
		CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name2", 100L);
		boolean result = entry1.equals(entry2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentSize_pzAA5() {
		CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name", 100L);
		CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name", 200L);
		boolean result = entry1.equals(entry2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_EEGi0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        Date expected = new Date(1000 * 100L);
        Date actual = entry.getLastModifiedDate();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin_NtRH0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        long result = entry.getRemoteDeviceMin();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin2_GQKs1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        long result = entry.getRemoteDeviceMin();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin4_ZFDI3() throws IOException {
        Path inputPath = null;
        String entryName = "entryName";
        LinkOption[] options = new LinkOption[0];
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, inputPath, entryName, options);
        long result = entry.getRemoteDeviceMin();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin5_UNpf4() throws IOException {
        short format = (short) 0;
        Path inputPath = null;
        String entryName = "entryName";
        LinkOption[] options = new LinkOption[0];
        CpioArchiveEntry entry = new CpioArchiveEntry(format, inputPath, entryName, options);
        long result = entry.getRemoteDeviceMin();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin6_rNAB5() throws IOException {
        short format = (short) 0;
        String name = "name";
        CpioArchiveEntry entry = new CpioArchiveEntry(format, name);
        long result = entry.getRemoteDeviceMin();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin7_iJma6() {
        short format = (short) 0;
        File inputFile = null;
        String entryName = "entryName";
        CpioArchiveEntry entry = new CpioArchiveEntry(format, inputFile, entryName);
        long result = entry.getRemoteDeviceMin();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin9_yZPy8() {
        File inputFile = null;
        String entryName = "entryName";
        CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
        long result = entry.getRemoteDeviceMin();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithFormat_rPyj0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        boolean isDirectory = entry.isDirectory();
        assertTrue(isDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithFormatNameSize_bqTG1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        boolean isDirectory = entry.isDirectory();
        assertFalse(isDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithFormatName_mLrp2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        boolean isDirectory = entry.isDirectory();
        assertFalse(isDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithFormatName_lGoy5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("file"), "entry");
        boolean isDirectory = entry.isDirectory();
        assertFalse(isDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink_BXJm0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink2_SEwJ1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink4_lRwQ3() throws IOException {
        Path inputPath = null;
        String entryName = "entryName";
        LinkOption[] options = new LinkOption[0];
        CpioArchiveEntry entry = new CpioArchiveEntry(inputPath, entryName, options);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink5_TtqG4() throws IOException {
        short format = 0;
        Path inputPath = null;
        String entryName = "entryName";
        LinkOption[] options = new LinkOption[0];
        CpioArchiveEntry entry = new CpioArchiveEntry(format, inputPath, entryName, options);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink6_vbVI5() {
        short format = 0;
        CpioArchiveEntry entry = new CpioArchiveEntry(format, "name");
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink7_aPpa6() {
        short format = 0;
        File inputFile = null;
        String entryName = "entryName";
        CpioArchiveEntry entry = new CpioArchiveEntry(format, inputFile, entryName);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink9_ErEE8() {
        File inputFile = null;
        String entryName = "entryName";
        CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, entryName);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice_Hwst0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice2_RBme1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, entry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice3_uquz2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0, entry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice6_yPlb5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0, entry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice7_YcMF6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals(0, entry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice8_lYxM7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals(0, entry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice9_ysse8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0, entry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID_oVYZ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID6_KISZ5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID7_uhQw6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("file"), "name");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID9_hGTo8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "name");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_with_inputFile_as_File_and_entryName_as_String_aNyv7() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("input"), "name");
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_with_format_as_short_and_inputFile_as_File_and_entryName_as_String_qzFr8() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("input"), "name");
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksum_vZWT0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(1234567890L);
        assertEquals(1234567890L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithNegativeValue_uMjN1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(-1234567890L);
        assertEquals(4294967296L - 1234567890L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithZeroValue_JXQC2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(0L);
        assertEquals(0L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithMaxValue_AGzw3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(4294967295L);
        assertEquals(4294967295L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithOverflowValue_offj4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(4294967296L);
        assertEquals(0L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetChksumWithUnderflowValue_skNM5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setChksum(-4294967296L);
        assertEquals(4294967296L, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMin_Mxfk0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice_AAxj0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    long result = entry.getDevice();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice2_FmCB1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
    long result = entry.getDevice();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice3_tSax2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name");
    long result = entry.getDevice();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice6_YTqh5() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
    long result = entry.getDevice();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice7_tMab6() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("file"), "entryName");
    long result = entry.getDevice();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice8_XxbY7() {
    CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
    long result = entry.getDevice();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDevice9_TJDy8() {
    CpioArchiveEntry entry = new CpioArchiveEntry(new File("file"), "entryName");
    long result = entry.getDevice();
    assertEquals(0L, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_1_cXdC0() {
        CpioArchiveEntry instance = new CpioArchiveEntry((short) 0, "name", 0L);
        long expResult = 0L;
        long result = instance.getMode();
        assertEquals(expResult, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPipeWithModeSetToFifo_jmoR0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(010000);
        assertTrue(entry.isPipe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPipeWithModeNotSetToFifo_OUAV1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(010040);
        assertFalse(entry.isPipe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFileWithFile_pfCa0() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("test.txt"), "test.txt");
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_pxpY0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setName("test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithFile_zMLu2() {
        File file = new File("test.txt");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "test.txt");
        entry.setName("new_test.txt");
        assertEquals("new_test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNameWithFormatAndName_OhcL3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test.txt", 100L);
        entry.setName("new_test.txt");
        assertEquals("new_test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice_yUzQ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(1L);
        assertEquals(1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithNegativeNumber_NQle1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(-1L);
        assertEquals(-1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithZero_eSGK2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(0L);
        assertEquals(0L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithMaximumValue_cYEw3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithMinimumValue_kZgT4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithOverflowValue_BvcW5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(Long.MAX_VALUE + 1L);
        assertEquals(Long.MAX_VALUE + 1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithUnderflowValue_skJj6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(Long.MIN_VALUE - 1L);
        assertEquals(Long.MIN_VALUE - 1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSocketWithModeSocket_yEGG0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(0120000);
        boolean result = entry.isSocket();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSocketWithModeNotSocket_hMBX1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(0100000);
        boolean result = entry.isSocket();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode_UGgz0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        long inode = entry.getInode();
        assertEquals(0, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode2_ZhoW1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        long inode = entry.getInode();
        assertEquals(0, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode4_yJVS3() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry(null, "entryName", (LinkOption[]) null);
        long inode = entry.getInode();
        assertEquals(0, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode5_ewFn4() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, null, "entryName", (LinkOption[]) null);
        long inode = entry.getInode();
        assertEquals(0, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode6_FqOM5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        long inode = entry.getInode();
        assertEquals(0, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode7_bqQK6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        long inode = entry.getInode();
        assertEquals(0, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode9_ZjNA8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        long inode = entry.getInode();
        assertEquals(0, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_WGBW0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 1L);
        assertEquals(113493161, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetTime_xULR0() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
		entry.setTime(1234567890L);
		assertEquals(1234567890L, entry.getTime());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDataPadCount_withFormatZero_returnsZero_tsCd0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getDataPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDataPadCount_withZeroSize_returnsZero_VLln2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 0);
        assertEquals(0, entry.getDataPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDataPadCount_withNonZeroSize_returnsNonZeroValue_ycaO3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "test", 10);
        assertTrue(entry.getDataPadCount() > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetHeaderPadCount_gNLf0() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		int headerPadCount = entry.getHeaderPadCount();
		assertEquals(0, headerPadCount);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount1_Ehgj0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount2_asct1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount3_TkMo2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name");
        assertEquals(1, cpioArchiveEntry.getHeaderPadCount(1L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount6_qLNJ5() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount7_ySZS6() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount8_jpfK7() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name",1L);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount9_wMWJ8() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMaj_xbci0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDeviceMaj(1L);
        assertEquals(1L, entry.getDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMajWithInvalidFormat_BHuG1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        try {
            entry.setDeviceMaj(1L);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID_iEjx0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID6_mLEj5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID7_fqTx6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID9_rifW8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_oyBN0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        assertEquals(10L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize2_kdiG1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 20L);
        assertEquals(20L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize4_GXxa3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize5_FINn4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("input.txt"), "entryName");
        assertEquals(0L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize9_Earx8() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 40L);
        assertEquals(40L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDeviceWithModeSetToNonC_ISCHRValue_DMYB1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(0x8000);
        assertFalse(entry.isCharacterDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_ecSR0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        long numberOfLinks = entry.getNumberOfLinks();
        assertEquals(1, numberOfLinks);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_fTMC1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        long numberOfLinks = entry.getNumberOfLinks();
        assertEquals(1, numberOfLinks);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_TJxG5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        long numberOfLinks = entry.getNumberOfLinks();
        assertEquals(1, numberOfLinks);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_TMRx6() {
        File inputFile = new File("inputFile");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, inputFile, "entryName");
        long numberOfLinks = entry.getNumberOfLinks();
        assertEquals(1, numberOfLinks);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_lpQP8() {
        File inputFile = new File("inputFile");
        CpioArchiveEntry entry = new CpioArchiveEntry(inputFile, "entryName");
        long numberOfLinks = entry.getNumberOfLinks();
        assertEquals(1, numberOfLinks);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMin_kFPI0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMin(1L);
        assertEquals(1L, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinWithNegativeNumber_uxvL1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMin(-1L);
        assertEquals(-1L, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinWithZero_cgXG2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMin(0L);
        assertEquals(0L, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinWithMaxValue_ZZze3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMin(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMinWithMinValue_qgqn4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMin(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSizeWithValidSize_vGMt1_xKTG0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) CpioConstants.C_ISREG);
    entry.setSize(100);
    assertEquals(100, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentClass_Gjgy1() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		boolean result = entry.equals(new Object());
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameObject_dvmD2_fid1() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		boolean result = entry.equals(entry);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentFormat_loxk6_fid1() {
		CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1);
		CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 2);
		boolean result = entry1.equals(entry2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_with_name_as_String_PLyd2_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_with_size_as_long_RASN3_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
        assertEquals((short) 0, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDataPadCount_withNonZeroFormat_returnsNonZeroValue_Bfcx1_fid1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertTrue(entry.getDataPadCount() > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount3_TkMo2_fid1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name");
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount8_jpfK7_fid1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name", 0L);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(0L));
    }
}