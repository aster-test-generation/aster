/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ValidGzipHeader_pCko0() {
    byte[] signature = new byte[]{31, -117};
    boolean result = GzipCompressorInputStream.matches(signature, 2);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_InvalidGzipHeader_qzAc1() {
    byte[] signature = new byte[]{31, -118};
    boolean result = GzipCompressorInputStream.matches(signature, 2);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_ShortSignature_pgUT2() {
    byte[] signature = new byte[]{31};
    boolean result = GzipCompressorInputStream.matches(signature, 1);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatches_LongSignature_vJBk3() {
    byte[] signature = new byte[]{31, -117, 0, 0, 0, 0, 0, 0};
    boolean result = GzipCompressorInputStream.matches(signature, 8);
    assertTrue(result);
}
}