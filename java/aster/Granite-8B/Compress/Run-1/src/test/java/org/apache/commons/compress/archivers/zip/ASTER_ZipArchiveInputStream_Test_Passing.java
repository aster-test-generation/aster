/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.function.Function;
import java.util.zip.ZipEntry;
import org.apache.commons.compress.archivers.ArchiveEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches1_zykt0() {
        byte[] signature = new byte[4];
        int length = 0;
        boolean result = ZipArchiveInputStream.matches(signature, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches2_KKec1() {
        byte[] signature = new byte[4];
        int length = 4;
        boolean result = ZipArchiveInputStream.matches(signature, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches3_zlkd2() {
        byte[] signature = new byte[4];
        int length = 5;
        boolean result = ZipArchiveInputStream.matches(signature, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches4_gTYk3() {
        byte[] signature = new byte[4];
        int length = 10;
        boolean result = ZipArchiveInputStream.matches(signature, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches5_rEoa4() {
        byte[] signature = new byte[4];
        int length = 20;
        boolean result = ZipArchiveInputStream.matches(signature, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches6_rrZn5() {
        byte[] signature = new byte[4];
        int length = 30;
        boolean result = ZipArchiveInputStream.matches(signature, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNextZipEntry_Lgwm0() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNextZipEntry1_Nxqc1() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNextZipEntry2_PQBl2() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextZipEntry();
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNextZipEntry3_qVki3() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNextZipEntry4_Bxxa4() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNextZipEntry5_tJUK5() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNextZipEntry6_USGG6() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNextZipEntry7_bcsI7() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNextZipEntry8_HzFN8() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNextZipEntry9_GyPc9() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.close();
    ZipArchiveEntry entry = zais.getNextZipEntry();
    assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetNextZipEntry10_CKEd10() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
    zais.getNextZipEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_test1_JMZl0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertEquals(null, zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_test4_aaqE3() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.close();
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertEquals(null, zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_test5_zEhw4() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.getNextZipEntry();
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertEquals(null, zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_test8_HFyQ7() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zipArchiveInputStream.getNextZipEntry();
    zipArchiveInputStream.close();
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertEquals(null, zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void getNextZipEntry_test1_JmOX0() throws IOException {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    ZipArchiveEntry zipArchiveEntry = zipArchiveInputStream.getNextZipEntry();
    assertEquals(null, zipArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_whenNoEntries_returnsNull_yitS0() throws IOException {
    ZipArchiveInputStream in = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry entry = in.getNextZipEntry();
    Assertions.assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldSupport_yLXW0_1() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null);
        Function<ZipShort, ZipExtraField> extraFieldSupport = (ZipShort zipShort) -> null;
        ZipArchiveInputStream result = zipArchiveInputStream.setExtraFieldSupport(extraFieldSupport);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldSupport_yLXW0_2() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null);
        Function<ZipShort, ZipExtraField> extraFieldSupport = (ZipShort zipShort) -> null;
        ZipArchiveInputStream result = zipArchiveInputStream.setExtraFieldSupport(extraFieldSupport);
        assertTrue(result == zipArchiveInputStream);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryDataWithZipArchiveEntry_OUZz0() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null);
        ArchiveEntry archiveEntry = new ZipArchiveEntry();
        boolean result = zipArchiveInputStream.canReadEntryData(archiveEntry);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryDataWithZipArchiveEntryAndDataDescriptor_cqRR1() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null, null, false, true);
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setMethod(ZipEntry.DEFLATED);
        boolean result = zipArchiveInputStream.canReadEntryData(zipArchiveEntry);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryDataWithZipArchiveEntryAndStoredMethod_oLoJ2() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null, null, false, true);
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setMethod(ZipEntry.STORED);
        boolean result = zipArchiveInputStream.canReadEntryData(zipArchiveEntry);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryDataWithZipArchiveEntryAndEnhancedDeflatedMethod_YURK3() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null, null, false, true);
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setMethod(ZipMethod.ENHANCED_DEFLATED.getCode());
        boolean result = zipArchiveInputStream.canReadEntryData(zipArchiveEntry);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryDataWithZipArchiveEntryAndUnsupportedMethod_gaND4() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null, null, false, true);
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setMethod(10);
        boolean result = zipArchiveInputStream.canReadEntryData(zipArchiveEntry);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_ybwo2() throws IOException {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null);
        byte[] buffer = new byte[10];
        int offset = 5;
        int length = 3;
        int read = zipArchiveInputStream.read(buffer, offset, length);
        assertEquals(-1, read);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryData_WithZipArchiveEntry_ReturnsFalse_WhenEntryUsesDeflateMethodAndNoDataDescriptor_AkqY3() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setMethod(ZipEntry.DEFLATED);
        assertTrue(zipArchiveInputStream.canReadEntryData(zipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryData_WithZipArchiveEntry_ReturnsFalse_WhenEntryUsesEnhancedDeflateMethodAndNoDataDescriptor_YKpe4() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setMethod(ZipMethod.ENHANCED_DEFLATED.getCode());
        assertTrue(zipArchiveInputStream.canReadEntryData(zipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryData_WithZipArchiveEntry_ReturnsFalse_WhenEntryUsesStoredMethodAndNoDataDescriptor_hfNE5() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setMethod(ZipEntry.STORED);
        assertFalse(zipArchiveInputStream.canReadEntryData(zipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryData_WithZipArchiveEntry_ReturnsFalse_WhenEntryUsesUnsupportedMethod_bEUe6() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setMethod(100);
        assertFalse(zipArchiveInputStream.canReadEntryData(zipArchiveEntry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_closed_HGVH5() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    zais.close();
    try {
        zais.read(new byte[1], 0, 1);
        fail("Expected IOException");
    } catch (IOException ex) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithPositiveValue_jqsM0_JXsw0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    try {
        long skipped = zipArchiveInputStream.skip(0);
        assertEquals(0, skipped);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithZeroValue_MdVZ1_qTPT0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[10]));
    long skipped = 0;
    try {
        skipped = zipArchiveInputStream.skip(0);
    } catch (IOException e) {
        e.printStackTrace();
    }
    assertEquals(0, skipped);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSkipWithLargeValue_fyor3_oObP0() {
    ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    try {
        long skipped = zipArchiveInputStream.skip(00);
        assertEquals(0, skipped);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNextZipEntry_whenNoEntry_returnsNull_thLM0_zqRU0() throws IOException {
    ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    ZipArchiveEntry entry = null;
    try {
        entry = zais.getNextZipEntry();
    } catch (IOException e) {
        e.printStackTrace();
    }
    Assertions.assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldSupport_yLXW0() {
        ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(null);
        Function<ZipShort, ZipExtraField> extraFieldSupport = (ZipShort zipShort) -> null;
        ZipArchiveInputStream result = zipArchiveInputStream.setExtraFieldSupport(extraFieldSupport);
        assertNotNull(result);
        assertTrue(result == zipArchiveInputStream);
    }
}