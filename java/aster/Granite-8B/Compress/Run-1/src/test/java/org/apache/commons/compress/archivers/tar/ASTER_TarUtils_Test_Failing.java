/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctal_ifOb0() {
        assertEquals(0L, TarUtils.parseOctal(new byte[]{48}, 0, 1));
        assertEquals(1L, TarUtils.parseOctal(new byte[]{49}, 0, 1));
        assertEquals(2L, TarUtils.parseOctal(new byte[]{50}, 0, 1));
        assertEquals(3L, TarUtils.parseOctal(new byte[]{51}, 0, 1));
        assertEquals(4L, TarUtils.parseOctal(new byte[]{52}, 0, 1));
        assertEquals(5L, TarUtils.parseOctal(new byte[]{53}, 0, 1));
        assertEquals(6L, TarUtils.parseOctal(new byte[]{54}, 0, 1));
        assertEquals(7L, TarUtils.parseOctal(new byte[]{55}, 0, 1));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalWithInvalidInput_hmKU1() {
        try {
            TarUtils.parseOctal(new byte[]{}, 0, 0);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Length 0 must be at least 2", e.getMessage());
        }
        try {
            TarUtils.parseOctal(new byte[]{48}, 0, 0);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Length 0 must be at least 2", e.getMessage());
        }
        try {
            TarUtils.parseOctal(new byte[]{48}, 0, -1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Length -1 must be at least 2", e.getMessage());
        }
        try {
            TarUtils.parseOctal(new byte[]{48}, 0, 1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid byte 0 at offset 0 in '' len=1", e.getMessage());
        }
        try {
            TarUtils.parseOctal(new byte[]{48, 32}, 0, 2);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid byte 32 at offset 1 in ' ' len=2", e.getMessage());
        }
        try {
            TarUtils.parseOctal(new byte[]{48, 32, 49}, 0, 3);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid byte 32 at offset 1 in ' ' len=3", e.getMessage());
        }
        try {
            TarUtils.parseOctal(new byte[]{48, 32, 49, 32}, 0, 4);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid byte 32 at offset 3 in ' 1' len=4", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseOctalWithTrailer_JBOk2() {
        assertEquals(1L, TarUtils.parseOctal(new byte[]{49, 32}, 0, 2));
        assertEquals(1L, TarUtils.parseOctal(new byte[]{49, 32, 48}, 0, 3));
        assertEquals(1L, TarUtils.parseOctal(new byte[]{49, 32, 48, 32}, 0, 4));
        assertEquals(1L, TarUtils.parseOctal(new byte[]{49, 32, 48, 32, 48}, 0, 5));
        assertEquals(1L, TarUtils.parseOctal(new byte[]{49, 32, 48, 32, 48, 32}, 0, 6));
        assertEquals(1L, TarUtils.parseOctal(new byte[]{49, 32, 48, 32, 48, 32, 48}, 0, 7));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatOctalBytes_mfck0() {
        byte[] buf = new byte[10];
        int offset = 0;
        int length = 10;
        long value = 1234567890L;
        int expected = 11;
        int actual = TarUtils.formatOctalBytes(value, buf, offset, length);
        assertEquals(expected, actual);
        assertEquals("012345670 ", new String(buf, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary_Octal_pGuV0() {
    byte[] buffer = {(byte) 0x123};
    int offset = 0;
    int length = 3;
    long expected = 83;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary_Binary_BIDW1() {
    byte[] buffer = {(byte) 0x80, (byte) 0x01};
    int offset = 0;
    int length = 2;
    long expected = -2;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary_Binary_ExceedsMaximumValue_SHqx3() {
    byte[] buffer = {(byte) 0x80, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01};
    int offset = 0;
    int length = 9;
    long expected = -9223372036854775808L;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFormatCheckSumOctalBytes_KHqN0() {
		byte[] buf = new byte[10];
		int offset = 0;
		int length = 8;
		long value = 1234567890L;
		int result = TarUtils.formatCheckSumOctalBytes(value, buf, offset, length);
		assertEquals(18, result);
		assertEquals("00000000000000000", new String(buf, offset, length));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyCheckSum_gYmx0() {
        byte[] header = new byte[512];
        assertTrue(TarUtils.verifyCheckSum(header));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyCheckSumWithStoredSum_zFWK1() {
        byte[] header = new byte[512];
        long storedSum = 1234567890L;
        for (int i = 0; i < 8; i++) {
            header[i] = (byte) (storedSum & 0xff);
            storedSum >>= 8;
        }
        assertTrue(TarUtils.verifyCheckSum(header));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyCheckSumWithUnsignedSum_wmyw2() {
        byte[] header = new byte[512];
        long unsignedSum = 1234567890L;
        for (int i = 0; i < 8; i++) {
            header[i] = (byte) (unsignedSum & 0xff);
            unsignedSum >>= 8;
        }
        header[148] = ' ';
        assertTrue(TarUtils.verifyCheckSum(header));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyCheckSumWithSignedSum_Wfdw3() {
        byte[] header = new byte[512];
        long signedSum = 1234567890L;
        for (int i = 0; i < 8; i++) {
            header[i] = (byte) (signedSum & 0xff);
            signedSum >>= 8;
        }
        header[148] = ' ';
        assertTrue(TarUtils.verifyCheckSum(header));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyCheckSumWithStoredSumAndUnsignedSum_qajd4() {
        byte[] header = new byte[512];
        long storedSum = 1234567890L;
        long unsignedSum = 0;
        for (int i = 0; i < 8; i++) {
            header[i] = (byte) (storedSum & 0xff);
            storedSum >>= 8;
            unsignedSum += 0xff & header[i];
        }
        assertTrue(TarUtils.verifyCheckSum(header));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyCheckSumWithStoredSumAndSignedSum_EinP5() {
        byte[] header = new byte[512];
        long storedSum = 1234567890L;
        long signedSum = 0;
        for (int i = 0; i < 8; i++) {
            header[i] = (byte) (storedSum & 0xff);
            storedSum >>= 8;
            signedSum += header[i];
        }
        assertTrue(TarUtils.verifyCheckSum(header));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyCheckSumWithUnsignedSumAndSignedSum_iNCe6() {
        byte[] header = new byte[512];
        long unsignedSum = 1234567890L;
        long signedSum = 0;
        for (int i = 0; i < 8; i++) {
            header[i] = (byte) (unsignedSum & 0xff);
            unsignedSum >>= 8;
            signedSum += header[i];
        }
        header[148] = ' ';
        assertTrue(TarUtils.verifyCheckSum(header));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVerifyCheckSumWithStoredSumAndUnsignedSumAndSignedSum_QrVK7() {
        byte[] header = new byte[512];
        long storedSum = 1234567890L;
        long unsignedSum = 0;
        long signedSum = 0;
        for (int i = 0; i < 8; i++) {
            header[i] = (byte) (storedSum & 0xff);
            storedSum >>= 8;
            unsignedSum += 0xff & header[i];
            signedSum += header[i];
        }
        assertTrue(TarUtils.verifyCheckSum(header));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseName_SXir0() {
        final byte[] buffer = new byte[10];
        final int offset = 0;
        final int length = 10;
        final String expected = "expected";
        assertEquals(expected, TarUtils.parseName(buffer, offset, length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes_KOxk0() {
        byte[] buf = new byte[10];
        assertEquals(1, TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 1));
        assertEquals(2, TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 2));
        assertEquals(3, TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 3));
        assertEquals(4, TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 4));
        assertEquals(5, TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 5));
        assertEquals(6, TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 6));
        assertEquals(7, TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 7));
        assertEquals(8, TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 8));
        assertEquals(9, TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 9));
        assertEquals(10, TarUtils.formatLongOctalOrBinaryBytes(0, buf, 0, 10));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes2_bToF1() {
        byte[] buf = new byte[10];
        assertEquals(1, TarUtils.formatLongOctalOrBinaryBytes(1, buf, 0, 1));
        assertEquals(2, TarUtils.formatLongOctalOrBinaryBytes(1, buf, 0, 2));
        assertEquals(3, TarUtils.formatLongOctalOrBinaryBytes(1, buf, 0, 3));
        assertEquals(4, TarUtils.formatLongOctalOrBinaryBytes(1, buf, 0, 4));
        assertEquals(5, TarUtils.formatLongOctalOrBinaryBytes(1, buf, 0, 5));
        assertEquals(6, TarUtils.formatLongOctalOrBinaryBytes(1, buf, 0, 6));
        assertEquals(7, TarUtils.formatLongOctalOrBinaryBytes(1, buf, 0, 7));
        assertEquals(8, TarUtils.formatLongOctalOrBinaryBytes(1, buf, 0, 8));
        assertEquals(9, TarUtils.formatLongOctalOrBinaryBytes(1, buf, 0, 9));
        assertEquals(10, TarUtils.formatLongOctalOrBinaryBytes(1, buf, 0, 10));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalOrBinaryBytes3_aaYw2() {
        byte[] buf = new byte[10];
        assertEquals(1, TarUtils.formatLongOctalOrBinaryBytes(127, buf, 0, 1));
        assertEquals(2, TarUtils.formatLongOctalOrBinaryBytes(127, buf, 0, 2));
        assertEquals(3, TarUtils.formatLongOctalOrBinaryBytes(127, buf, 0, 3));
        assertEquals(4, TarUtils.formatLongOctalOrBinaryBytes(127, buf, 0, 4));
        assertEquals(5, TarUtils.formatLongOctalOrBinaryBytes(127, buf, 0, 5));
        assertEquals(6, TarUtils.formatLongOctalOrBinaryBytes(127, buf, 0, 6));
        assertEquals(7, TarUtils.formatLongOctalOrBinaryBytes(127, buf, 0, 7));
        assertEquals(8, TarUtils.formatLongOctalOrBinaryBytes(127, buf, 0, 8));
        assertEquals(9, TarUtils.formatLongOctalOrBinaryBytes(127, buf, 0, 9));
        assertEquals(10, TarUtils.formatLongOctalOrBinaryBytes(127, buf, 0, 10));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromPAX01SparseHeadersWithNullInput_gESp5() {
        try {
            TarUtils.parseFromPAX01SparseHeaders(null);
            fail("Expected IOException");
        } catch (final IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatLongOctalBytes_lFSu0() {
        final byte[] buf = new byte[12];
        assertEquals(3, TarUtils.formatLongOctalBytes(0, buf, 0, 12));
        assertEquals("000000 ", new String(buf, 0, 8));
        assertEquals(3, TarUtils.formatLongOctalBytes(1, buf, 0, 12));
        assertEquals("000001 ", new String(buf, 0, 8));
        assertEquals(3, TarUtils.formatLongOctalBytes(127, buf, 0, 12));
        assertEquals("000177 ", new String(buf, 0, 8));
        assertEquals(3, TarUtils.formatLongOctalBytes(128, buf, 0, 12));
        assertEquals("000200 ", new String(buf, 0, 8));
        assertEquals(3, TarUtils.formatLongOctalBytes(255, buf, 0, 12));
        assertEquals("000377 ", new String(buf, 0, 8));
        assertEquals(3, TarUtils.formatLongOctalBytes(256, buf, 0, 12));
        assertEquals("001000 ", new String(buf, 0, 8));
        assertEquals(3, TarUtils.formatLongOctalBytes(32767, buf, 0, 12));
        assertEquals("007777 ", new String(buf, 0, 8));
        assertEquals(3, TarUtils.formatLongOctalBytes(32768, buf, 0, 12));
        assertEquals("010000 ", new String(buf, 0, 8));
        assertEquals(3, TarUtils.formatLongOctalBytes(2147483647L, buf, 0, 12));
        assertEquals("1777777 ", new String(buf, 0, 8));
        assertEquals(3, TarUtils.formatLongOctalBytes(2147483648L, buf, 0, 12));
        assertEquals("2000000 ", new String(buf, 0, 8));
        assertEquals(3, TarUtils.formatLongOctalBytes(9223372036854775807L, buf, 0, 12));
        assertEquals("7777777777 ", new String(buf, 0, 12));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString_iLWq0() {
        byte[] buffer = new byte[10];
       TarUtils.formatUnsignedOctalString(0, buffer, 0, 10);
        assertEquals("000000000", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString2_RsQW1() {
        byte[] buffer = new byte[10];
       TarUtils.formatUnsignedOctalString(1, buffer, 0, 10);
        assertEquals("000000001", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString3_tKgG2() {
        byte[] buffer = new byte[10];
       TarUtils.formatUnsignedOctalString(123, buffer, 0, 10);
        assertEquals("00000123", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString4_cboU3() {
        byte[] buffer = new byte[10];
       TarUtils.formatUnsignedOctalString(1234567890L, buffer, 0, 10);
        assertEquals("012345670", new String(buffer));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatUnsignedOctalString5_GqEf4() {
        byte[] buffer = new byte[10];
       TarUtils.formatUnsignedOctalString(1234567890123456789L, buffer, 0, 10);
        assertEquals("012345670", new String(buffer));
    }
}