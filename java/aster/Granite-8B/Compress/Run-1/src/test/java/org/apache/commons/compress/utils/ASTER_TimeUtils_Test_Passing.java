/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToUnixTimeWithNonNullFileTime_WGWa0() {
        FileTime fileTime = FileTime.fromMillis(1234567890L);
        long expected = 1234567890L / 1000L;
        long actual = TimeUtils.toUnixTime(fileTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToUnixTimeWithNullFileTime_UAei1() {
        FileTime fileTime = null;
        long expected = 0L;
        long actual = TimeUtils.toUnixTime(fileTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsUnixTime_QmLZ0() {
		FileTime time = FileTime.fromMillis(0);
		boolean result = TimeUtils.isUnixTime(time);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTime_ipBj0_1() {
        long seconds = 0;
        boolean expected = true;
        boolean actual = TimeUtils.isUnixTime(seconds);
        seconds = Integer.MIN_VALUE;
        expected = true;
        actual = TimeUtils.isUnixTime(seconds);
        seconds = Integer.MAX_VALUE;
        expected = true;
        actual = TimeUtils.isUnixTime(seconds);
        assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_Sotl0() {
        Date date = new Date();
        long ntfsTime = TimeUtils.toNtfsTime(date);
        long expectedNtfsTime = FileTimes.toNtfsTime(date);
        assertEquals(expectedNtfsTime, ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToFileTime_dPtn0() {
        Date date = new Date();
        FileTime fileTime = TimeUtils.toFileTime(date);
        assertNotNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToFileTime_RoDW1() {
        Date date = new Date();
        Instant instant = date.toInstant();
        FileTime fileTime = TimeUtils.toFileTime(date);
        assertEquals(fileTime, FileTime.from(instant));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToFileTimeWithNullDate_hBFn3() {
        Date date = null;
        FileTime fileTime = TimeUtils.toFileTime(date);
    assertNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToFileTime_oaCT0() {
        long ntfsTime = 1234567890L;
        FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
        assertNotNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToFileTime_rdkf1() {
        long ntfsTime = 0L;
        FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
        assertNotNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToFileTime_oetm2() {
        long ntfsTime = Long.MAX_VALUE;
        FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
        assertNotNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixTimeToFileTime_Tpuq0_1() {
        long time = 1632356000L; // Example Unix time
        FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
        assertNotNull(fileTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixTimeToFileTime_Tpuq0_2() {
        long time = 1632356000L; // Example Unix time
        FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
        assertEquals(1632356000000L, fileTime.toMillis());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDate_BCRc0() {
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        Date date = TimeUtils.toDate(fileTime);
        assertNotNull(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_fxFu0() {
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        long ntfsTime = TimeUtils.toNtfsTime(fileTime);
        assertNotNull(ntfsTime);
    }
}