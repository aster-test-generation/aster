/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_PoIV0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        assertNotNull(methods);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_MKjO0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedDate(1234567890L);
        assertEquals(1234567890L, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithZero_QpQy1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedDate(0L);
        assertEquals(0L, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithNegativeNumber_OGsH2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedDate(-1234567890L);
        assertEquals(-1234567890L, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithMaximumNumber_mJGM3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedDate(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithMinimumNumber_zzuy4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedDate(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithOverflowNumber_MAie5() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedDate(Long.MAX_VALUE + 1);
        assertEquals(Long.MAX_VALUE + 1, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDateWithUnderflowNumber_tiTy6() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedDate(Long.MIN_VALUE - 1);
        assertEquals(Long.MIN_VALUE - 1, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetCreationDateWithNullTime_hClY1() {
		SevenZArchiveEntry entry = new SevenZArchiveEntry();
		entry.setCreationTime(null);
		Date creationDate = entry.getCreationDate();
		assertNull(creationDate);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToJavaTime_mIgZ0() {
        long ntfsTime = 1234567890L; // Replace with actual value
        Date expectedDate = new Date(1234567890000L); // Replace with expected value
        Date actualDate = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
        assertEquals(expectedDate, actualDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_eNDA0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date expectedDate = new Date(1234567890L); // Replace with actual expected date
        assertEquals(expectedDate, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedTime_ESvw0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        FileTime lastModifiedTime = entry.getLastModifiedTime();
        assertNotNull(lastModifiedTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessDate_otjs0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date accessDate = entry.getAccessDate();
        assertNotNull(accessDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetCreationDate_TOeA0_fid2() {
		SevenZArchiveEntry entry = new SevenZArchiveEntry();
		Date creationDate = entry.getCreationDate();
		assertNotNull(creationDate);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasLastModifiedDate_XLyo0_fid2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean hasLastModifiedDate = entry.getHasLastModifiedDate();
        assertTrue(hasLastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHasAccessDate_GZjk0_fid2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean hasAccessDate = entry.getHasAccessDate();
        assertTrue(hasAccessDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_zoYp1_1_fid2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
        entry.setName("test.zip");
        entry.setName("test.tar.gz");
        assertEquals("test.txt", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_zoYp1_2_fid2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
        entry.setName("test.zip");
        entry.setName("test.tar.gz");
        assertEquals("test.zip", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_YSXQ0_fid2() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationDate(1234567890L);
    assertEquals(1234567890L, entry.getCreationDate());
}
}