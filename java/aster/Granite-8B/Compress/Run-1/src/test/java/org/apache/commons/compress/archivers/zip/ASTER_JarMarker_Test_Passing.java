/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JarMarker_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_GbgX0_1() {
        JarMarker jarMarker = new JarMarker();
        byte[] centralDirectoryData = jarMarker.getCentralDirectoryData();
        assertNotNull(centralDirectoryData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataData_RvaY0() {
        JarMarker jarMarker = new JarMarker();
        byte[] actual = jarMarker.getLocalFileDataData();
        byte[] expected = ByteUtils.EMPTY_BYTE_ARRAY;
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_hEqZ0_1() {
        JarMarker jarMarker = new JarMarker();
        ZipShort localFileDataLength = jarMarker.getLocalFileDataLength();
        assertNotNull(localFileDataLength);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_hEqZ0_2() {
        JarMarker jarMarker = new JarMarker();
        ZipShort localFileDataLength = jarMarker.getLocalFileDataLength();
        assertEquals(0, localFileDataLength.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_enyZ0() {
        JarMarker jarMarker = JarMarker.getInstance();
        byte[] centralDirectoryData = jarMarker.getCentralDirectoryData();
        assertNotNull(centralDirectoryData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_AhtW1() {
        JarMarker jarMarker = JarMarker.getInstance();
        ZipShort headerId = jarMarker.getHeaderId();
        assertNotNull(headerId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataData_keda2() {
        JarMarker jarMarker = JarMarker.getInstance();
        byte[] localFileDataData = jarMarker.getLocalFileDataData();
        assertNotNull(localFileDataData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_tANd3() {
        JarMarker jarMarker = JarMarker.getInstance();
        ZipShort localFileDataLength = jarMarker.getLocalFileDataLength();
        assertNotNull(localFileDataLength);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_yMvp4() {
        JarMarker jarMarker = JarMarker.getInstance();
        ZipShort centralDirectoryLength = jarMarker.getCentralDirectoryLength();
        assertNotNull(centralDirectoryLength);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_AvmP5_1() {
        JarMarker jarMarker1 = JarMarker.getInstance();
        JarMarker jarMarker2 = JarMarker.getInstance();
        assertNotNull(jarMarker1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_AvmP5_2() {
        JarMarker jarMarker1 = JarMarker.getInstance();
        JarMarker jarMarker2 = JarMarker.getInstance();
        assertNotNull(jarMarker2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_AvmP5_3() {
        JarMarker jarMarker1 = JarMarker.getInstance();
        JarMarker jarMarker2 = JarMarker.getInstance();
        assertTrue(jarMarker1 == jarMarker2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInstance_AvmP5_4() {
        JarMarker jarMarker1 = JarMarker.getInstance();
        JarMarker jarMarker2 = JarMarker.getInstance();
       assertSame(jarMarker1, jarMarker2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCentralDirectoryLength_IoJn0() {
		JarMarker jarMarker = new JarMarker();
		ZipShort zipShort = jarMarker.getCentralDirectoryLength();
		assertEquals(0, zipShort.getValue());
	}
}