/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_aDlC0() {
        ZipLong zipLong = new ZipLong(123456789L);
        byte[] expected = new byte[] {21, -75, 75, -37 };
        byte[] actual = zipLong.getBytes();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValue_JFEs0_3() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        zipLong = new ZipLong(1);
        zipLong = new ZipLong(Integer.MAX_VALUE);
        zipLong = new ZipLong(Integer.MIN_VALUE);
        assertEquals(Integer.MAX_VALUE, zipLong.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArray_NfhW1() {
    byte[] bytes = new byte[4];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    assertEquals(0x01020304L, ZipLong.getValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInvalidLength_ubOd6() {
    byte[] bytes = new byte[3];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    try {
        ZipLong.getValue(bytes);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInvalidLength2_YiYt7() {
    byte[] bytes = new byte[5];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    try {
        ZipLong.getValue(bytes);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        assertEquals("invalid input byte array length - must be exactly 4 bytes", e.getMessage());
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInvalidLength3_EHja8() {
    byte[] bytes = new byte[0];
    try {
        ZipLong.getValue(bytes);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInvalidLength5_TQDQ10() {
    byte[] bytes = new byte[2];
    bytes[0] = 1;
    bytes[1] = 2;
    try {
        ZipLong.getValue(bytes);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInvalidLength6_uFVv11() {
    byte[] bytes = new byte[6];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    try {
        ZipLong.getValue(bytes);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        // Expected exception
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesLong_EJyR0() {
    ZipLong zipLong = new ZipLong(1234567890L);
    byte[] bytes = ZipLong.getBytes(1234567890L);
    assert bytes != null;
    assert bytes[0] == 52;
    assert bytes[1] == -47;
    assert bytes[2] == -28;
    assert bytes[3] == -75;
    assert bytes[4] == 0;
    assert bytes[5] == 0;
    assert bytes[6] == 0;
    assert bytes[7] == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesInt_JtTu1() {
    ZipLong zipLong = new ZipLong(123456789);
    byte[] bytes = ZipLong.getBytes(123456789);
    assert bytes != null;
    assert bytes.length == 4;
    assert bytes[0] == 52;
    assert bytes[1] == -47;
    assert bytes[2] == -28;
    assert bytes[3] == -75;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesShort_QDQl3() {
    ZipLong zipLong = new ZipLong((short) 12345);
    byte[] bytes = ZipLong.getBytes((short) 12345);
    assert bytes != null;
    assert bytes[0] == 82;
    assert bytes[1] == -85;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesInt2_pyVx4() {
    ZipLong zipLong = new ZipLong(123456789);
    byte[] bytes = ZipLong.getBytes(123456789);
    assert bytes != null;
    assert bytes.length == 4;
    assert bytes[1] == -47;
    assert bytes[2] == -28;
    assert bytes[3] == -75;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_aDlC0_fid1() {
        ZipLong zipLong = new ZipLong(123456789L);
        byte[] expected = new byte[] { 52, -75, 75, -37 };
        byte[] actual = zipLong.getBytes();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInt_NCoD0_fid1() {
    byte[] bytes = new byte[4];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    assertEquals(0x01020304L, ZipLong.getValue(bytes, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInvalidLength2_YiYt7_fid1() {
    byte[] bytes = new byte[5];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    try {
        ZipLong.getValue(bytes);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInvalidLength4_QrzZ9() {
    byte[] bytes = new byte[1];
    bytes[0] = 1;
    try {
        ZipLong.getValue(bytes);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInvalidLength6_uFVv11_fid1() {
    byte[] bytes = new byte[6];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    bytes[4] = 5;
    bytes[5] = 6;
    try {
        ZipLong.getValue(bytes);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesLong_EJyR0_fid1() {
    ZipLong zipLong = new ZipLong(1234567890L);
    byte[] bytes = ZipLong.getBytes(1234567890L);
    assert bytes != null;
    assert bytes.length == 8;
    assert bytes[0] == 52;
    assert bytes[1] == -47;
    assert bytes[2] == -28;
    assert bytes[3] == -75;
    assert bytes[4] == 0;
    assert bytes[5] == 0;
    assert bytes[6] == 0;
    assert bytes[7] == 0;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesByte_CyPf2_fid1() {
    ZipLong zipLong = new ZipLong((byte) 123);
    byte[] bytes = ZipLong.getBytes((byte) 123);
    assert bytes != null;
    assert bytes.length == 1;
    assert bytes[0] == 123;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesShort_QDQl3_fid1() {
    ZipLong zipLong = new ZipLong((short) 12345);
    byte[] bytes = ZipLong.getBytes((short) 12345);
    assert bytes != null;
    assert bytes.length == 2;
    assert bytes[0] == 82;
    assert bytes[1] == -85;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_BIve0_2_fid2() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        zipLong = new ZipLong(1234567890L);
        zipLong = new ZipLong(1234567890L);
        zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals(1234567890L, zipLong.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValue_JFEs0_1() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        zipLong = new ZipLong(1);
        zipLong = new ZipLong(Integer.MAX_VALUE);
        zipLong = new ZipLong(Integer.MIN_VALUE);
        assertEquals(0, zipLong.getIntValue());}
}