/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType;
import org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCpDescriptorNameInts_AjwS0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpDescriptorNameInts = cpBands.getCpDescriptorNameInts();
        assertNotNull(cpDescriptorNameInts);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpFieldClass_qTew0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpFieldClass = cpBands.getCpFieldClass();
        assertNotNull(cpFieldClass);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCpClass_VWWI0_1() {
		Segment segment = new Segment();
		CpBands cpBands = new CpBands(segment);
		String[] cpClass = cpBands.getCpClass();
		assertNotNull(cpClass);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCpClass_VWWI0_2() {
		Segment segment = new Segment();
		CpBands cpBands = new CpBands(segment);
		String[] cpClass = cpBands.getCpClass();
		assertEquals(0, cpClass.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value_TfUI0() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 cpUTF8 = cpBands.cpUTF8Value("example");
        assertNotNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodDescriptor_dwuH0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpMethodDescriptor = cpBands.getCpMethodDescriptor();
        assertNotNull(cpMethodDescriptor);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFieldValue_mIny0_1() {
        CpBands cpBands = new CpBands(new Segment());
        CPFieldRef cpFieldRef = cpBands.cpFieldValue(0);
        assertNotNull(cpFieldRef);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFieldValue_mIny0_2() {
        CpBands cpBands = new CpBands(new Segment());
        CPFieldRef cpFieldRef = cpBands.cpFieldValue(0);
        assertTrue(cpFieldRef instanceof CPFieldRef);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFieldValue_mIny0_3() {
        CpBands cpBands = new CpBands(new Segment());
        CPFieldRef cpFieldRef = cpBands.cpFieldValue(0);
        assertEquals(0, cpFieldRef.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCpIMethodClass_Ipkr0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] expected = {"class1", "class2", "class3"};
        String[] actual = cpBands.getCpIMethodClass();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpInt_fxHs0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpInt = cpBands.getCpInt();
        assertNotNull(cpInt);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFloatValue_FItR0() {
        CpBands cpBands = new CpBands(new Segment());
        CPFloat cpFloat = cpBands.cpFloatValue(0);
        assertNotNull(cpFloat);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFloatValue2_vWwg1() {
        CpBands cpBands = new CpBands(new Segment());
        CPFloat cpFloat = cpBands.cpFloatValue(1);
        assertNotNull(cpFloat);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValue1_NpuU0() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 cpUTF8 = cpBands.cpSignatureValue(0);
        assertNotNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValue2_zRsc1() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 cpUTF8 = cpBands.cpSignatureValue(1);
        assertNotNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpSignatureValue3_bpZV2() {
        CpBands cpBands = new CpBands(new Segment());
        CPUTF8 cpUTF8 = cpBands.cpSignatureValue(2);
        assertNotNull(cpUTF8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptorTypeInts_lUEg0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        int[] cpDescriptorTypeInts = cpBands.getCpDescriptorTypeInts();
        assertNotNull(cpDescriptorTypeInts);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpLong_dpaG0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        long[] cpLong = cpBands.getCpLong();
        assertNotNull(cpLong);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpMethodValue_LXHq0() {
        CpBands cpBands = new CpBands(new Segment());
        CPMethodRef cpMethodRef = cpBands.cpMethodValue(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue1_sfwo0() {
        CpBands cpBands = new CpBands(new Segment());
        String descriptor = "java.lang.String";
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(descriptor);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue2_yqqF1() {
        CpBands cpBands = new CpBands(new Segment());
        String descriptor = "java.lang.Integer";
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(descriptor);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue3_nUii2() {
        CpBands cpBands = new CpBands(new Segment());
        String descriptor = "java.lang.Float";
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(descriptor);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue_Vlaq0() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(0);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue2_cqrT1() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(1);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue3_oDWZ2() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(2);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue4_ebPD3() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(3);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue5_SJbJ4() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(4);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue6_Svru5() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(5);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue7_ickB6() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(6);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue8_kkso7() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(7);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue9_ruwk8() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(8);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue10_Hmqx9() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(9);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue11_bBof10() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(10);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue12_hDIS11() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(11);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue13_NEao12() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(12);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue14_QSFT13() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(13);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpNameAndTypeValue15_hufh14() {
        CpBands cpBands = new CpBands(new Segment());
        CPNameAndType cpNameAndType = cpBands.cpNameAndTypeValue(14);
        assertNotNull(cpNameAndType);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value1_GaFJ0() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 0;
        CPUTF8 cputf8 = cpBands.cpUTF8Value(index);
        assertEquals(0, cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value2_UnqP1() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 1;
        CPUTF8 cputf8 = cpBands.cpUTF8Value(index);
        assertEquals(1, cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value3_KSoE2() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 2;
        CPUTF8 cputf8 = cpBands.cpUTF8Value(index);
        assertEquals(2, cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value4_tAzz3() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 3;
        CPUTF8 cputf8 = cpBands.cpUTF8Value(index);
        assertEquals(3, cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value5_Illg4() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 4;
        CPUTF8 cputf8 = cpBands.cpUTF8Value(index);
        assertEquals(4, cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value6_JcTe5() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 5;
        CPUTF8 cputf8 = cpBands.cpUTF8Value(index);
        assertEquals(5, cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value7_HkPb6() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 6;
        CPUTF8 cputf8 = cpBands.cpUTF8Value(index);
        assertEquals(6, cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value8_wdPA7() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 7;
        CPUTF8 cputf8 = cpBands.cpUTF8Value(index);
        assertEquals(7, cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value9_RYRE8() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 8;
        CPUTF8 cputf8 = cpBands.cpUTF8Value(index);
        assertEquals(8, cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpUTF8Value10_QazO9() {
        CpBands cpBands = new CpBands(new Segment());
        int index = 9;
        CPUTF8 cputf8 = cpBands.cpUTF8Value(index);
        assertEquals(9, cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8_zHki0_PCoa0_1() {
        CpBands cpBands = new CpBands(new Segment());
        String[] cpUTF8 = cpBands.getCpUTF8();
        assertNotNull(cpUTF8);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpUTF8_zHki0_PCoa0_2() {
        CpBands cpBands = new CpBands(new Segment());
        String[] cpUTF8 = cpBands.getCpUTF8();
        assertNotEquals(0, cpUTF8.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpMethodClass_XqVf0_mSXC0() {
        Segment segment = new Segment();
        CpBands cpBands = new CpBands(segment);
        String[] cpMethodClass = cpBands.getCpMethodClass();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCpDescriptor_JfpQ0_zFqV0() {
        CpBands cpBands = new CpBands(new Segment());
        String[] actualCpDescriptor = cpBands.getCpDescriptor();
        String[] expectedCpDescriptor = null; // Replace with expected value
        assertArrayEquals(expectedCpDescriptor, actualCpDescriptor);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassPoolEntry_WiPD2_UHdc0() {
        CpBands cpBands = new CpBands(new Segment());
        SegmentConstantPool constantPool = cpBands.getConstantPool();
        ConstantPoolEntry entry = constantPool.getClassPoolEntry("ClassName");
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSpecificPoolEntry_lArB5_hCpq0() {
        CpBands cpBands = new CpBands(new Segment());
        SegmentConstantPool constantPool = cpBands.getConstantPool();
        ConstantPoolEntry entry = null;
        try {
            entry = constantPool.getClassSpecificPoolEntry(0, 0, "ClassName");
        } catch (Pack200Exception e) {
            e.printStackTrace();
        }
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCpClass_VWWI0() {
		Segment segment = new Segment();
		CpBands cpBands = new CpBands(segment);
		String[] cpClass = cpBands.getCpClass();
		assertNotNull(cpClass);
		assertEquals(0, cpClass.length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCpFieldValue_mIny0() {
        CpBands cpBands = new CpBands(new Segment());
        CPFieldRef cpFieldRef = cpBands.cpFieldValue(0);
        assertNotNull(cpFieldRef);
        assertTrue(cpFieldRef instanceof CPFieldRef);
        assertEquals(0, cpFieldRef.hashCode());
    }
}