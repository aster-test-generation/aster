/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHave_file_options_yrHP0() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_file_options();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDefaultMajorVersionTest_vsDA0() {
        SegmentHeader segmentHeader = new SegmentHeader();
        int defaultMajorVersion = segmentHeader.getDefaultMajorVersion();
        assertEquals(0, defaultMajorVersion);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchive_modtime_Spde0() {
        SegmentHeader sh = new SegmentHeader();
        int modtime = sh.getArchive_modtime();
        assertTrue(modtime >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHave_file_modtime_gjlg0() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_file_modtime();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHave_code_flags_hi_YBGl0() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_code_flags_hi();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCp_Double_count_rjmO0() {
        SegmentHeader segmentHeader = new SegmentHeader();
        segmentHeader.setCp_Double_count(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHave_file_size_hi_mZtI0_fid1() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_file_size_hi();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHave_field_flags_hi_eYNz0_fid1() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_field_flags_hi();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHave_method_flags_hi_lcnh0_fid1() {
        SegmentHeader segmentHeader = new SegmentHeader();
        boolean result = segmentHeader.have_method_flags_hi();
        assertFalse(result);
    }
}