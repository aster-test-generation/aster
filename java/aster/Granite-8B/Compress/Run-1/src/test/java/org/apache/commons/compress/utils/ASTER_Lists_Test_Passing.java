/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Lists_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_OdVI0() {
        ArrayList<Object> list = Lists.newArrayList();
        assertNotNull(list);
        assertTrue(list.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithEmptyIterator_tkNp0() {
		Iterator<String> iterator = Collections.emptyIterator();
		List<String> list = Lists.newArrayList(iterator);
		assertTrue(list.isEmpty());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithOneElementIterator_cgvb2() {
		Iterator<String> iterator = Arrays.asList("a").iterator();
		List<String> list = Lists.newArrayList(iterator);
		assertEquals(1, list.size());
		assertEquals("a", list.get(0));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithMultipleElementsIterator_HfRs3() {
		Iterator<String> iterator = Arrays.asList("a", "b", "c").iterator();
		List<String> list = Lists.newArrayList(iterator);
		assertEquals(3, list.size());
		assertEquals("a", list.get(0));
		assertEquals("b", list.get(1));
		assertEquals("c", list.get(2));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_OdVI0_1() {
        ArrayList<Object> list = Lists.newArrayList();
        assertNotNull(list);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_OdVI0_2() {
        ArrayList<Object> list = Lists.newArrayList();
        assertTrue(list.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithOneElementIterator_cgvb2_1() {
		Iterator<String> iterator = Arrays.asList("a").iterator();
		List<String> list = Lists.newArrayList(iterator);
		assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithOneElementIterator_cgvb2_2() {
		Iterator<String> iterator = Arrays.asList("a").iterator();
		List<String> list = Lists.newArrayList(iterator);
		assertEquals("a", list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithMultipleElementsIterator_HfRs3_1() {
		Iterator<String> iterator = Arrays.asList("a", "b", "c").iterator();
		List<String> list = Lists.newArrayList(iterator);
		assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithMultipleElementsIterator_HfRs3_2() {
		Iterator<String> iterator = Arrays.asList("a", "b", "c").iterator();
		List<String> list = Lists.newArrayList(iterator);
		assertEquals("a", list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithMultipleElementsIterator_HfRs3_3() {
		Iterator<String> iterator = Arrays.asList("a", "b", "c").iterator();
		List<String> list = Lists.newArrayList(iterator);
		assertEquals("b", list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithMultipleElementsIterator_HfRs3_4() {
		Iterator<String> iterator = Arrays.asList("a", "b", "c").iterator();
		List<String> list = Lists.newArrayList(iterator);
		assertEquals("c", list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithOneElementList_lEoP5_USia0_1() {
		List<String> list = Arrays.asList("a");
		List<String> newList = Lists.newArrayList(list.iterator());
		assertEquals(1, newList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithOneElementList_lEoP5_USia0_2() {
		List<String> list = Arrays.asList("a");
		List<String> newList = Lists.newArrayList(list.iterator());
		assertEquals("a", newList.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithMultipleElementsList_BIth6_KvsY0_1() {
		List<String> list = Arrays.asList("a", "b", "c");
		List<String> newList = Lists.newArrayList(list.iterator());
		assertEquals(3, newList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithMultipleElementsList_BIth6_KvsY0_2() {
		List<String> list = Arrays.asList("a", "b", "c");
		List<String> newList = Lists.newArrayList(list.iterator());
		assertEquals("a", newList.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithMultipleElementsList_BIth6_KvsY0_3() {
		List<String> list = Arrays.asList("a", "b", "c");
		List<String> newList = Lists.newArrayList(list.iterator());
		assertEquals("b", newList.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNewArrayListWithMultipleElementsList_BIth6_KvsY0_4() {
		List<String> list = Arrays.asList("a", "b", "c");
		List<String> newList = Lists.newArrayList(list.iterator());
		assertEquals("c", newList.get(2));}
}