/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParsingUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseLongValue_pmgJ0() throws IOException {
		assertEquals(10L, ParsingUtils.parseLongValue("10", 10));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongValue_oHfM0_TWPZ0_1() throws IOException {
        assertEquals(123, ParsingUtils.parseLongValue("123"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongValue_oHfM0_TWPZ0_2() throws IOException {
        assertEquals(0, ParsingUtils.parseLongValue("0"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongValue_oHfM0_TWPZ0_3() throws IOException {
        assertEquals(-123, ParsingUtils.parseLongValue("-123"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongValueWithRadix_ECzI1_Gbtm0_2() throws IOException {
        assertEquals(11, ParsingUtils.parseLongValue("1011", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongValueWithRadix_ECzI1_Gbtm0_3() throws IOException {
        assertEquals(12, ParsingUtils.parseLongValue("1100", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseIntValueWithRadix8_ChvW2_QskI0() {
        int radix = 8;
        String value = "017";
        int expected = 15;
        int actual = 0;
        try {
            actual = ParsingUtils.parseIntValue(value, radix);
        } catch (IOException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseIntValueWithRadix16_xpqc1_ZwGm0_fid2() {
        int radix = 16;
        String value = "0xFF";
        int expected =0;
        int actual = 0;
        try {
            actual = ParsingUtils.parseIntValue(value, radix);
        } catch (IOException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseIntValueWithRadix2_BFAE3_xmKC0_fid2() {
        int radix = 2;
        String value = "110010";
        int expected =50;
        try {
            int actual = ParsingUtils.parseIntValue(value, radix);
            assertEquals(expected, actual);
        } catch (IOException e) {
            fail("IOException should not be thrown");
        }
    }
}