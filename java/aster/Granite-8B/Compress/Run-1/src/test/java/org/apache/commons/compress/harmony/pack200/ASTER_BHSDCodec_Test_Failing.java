/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BHSDCodec_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts1_qjlY0() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(0, 0);
        int[] actual = bHSDCodec.decodeInts(0, null, 0);
        assertEquals(0, actual.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts2_rTYF1() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(0, 0, 0, 0);
        int[] actual = bHSDCodec.decodeInts(0, null, 0);
        assertEquals(0, actual.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts3_KMoE2() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(0, 0, 0);
        int[] actual = bHSDCodec.decodeInts(0, null, 0);
        assertEquals(0, actual.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLargest_tipY0() {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 1);
        long result = bHSDCodec.largest();
        assertEquals(0L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLargest2_YYEQ1() {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 1, 1, 1);
        long result = bHSDCodec.largest();
        assertEquals(0L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLargest3_PzwP2() {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 1, 1);
        long result = bHSDCodec.largest();
        assertEquals(0L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSmallest_SuDq0() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 1);
        long smallest = bhsdCodec.smallest();
        assertEquals(0L, smallest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSmallest2_VEZI1() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 1, 1, 1);
        long smallest = bhsdCodec.smallest();
        assertEquals(0L, smallest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSmallest3_oomg2() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 1, 1);
        long smallest = bhsdCodec.smallest();
        assertEquals(0L, smallest);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetB_jPyk0() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2);
        int b = bhsdCodec.getB();
        assertEquals(1, b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBWithHSD_tfEG1() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3, 4);
        int b = bhsdCodec.getB();
        assertEquals(1, b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBWithHS_RvXp2() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3);
        int b = bhsdCodec.getB();
        assertEquals(1, b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSignedWithPositiveSign_xoYl0() {
        BHSDCodec codec = new BHSDCodec(8, 16, 1);
        boolean result = codec.isSigned();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSignedWithNegativeSign_BLpc1() {
        BHSDCodec codec = new BHSDCodec(8, 16, -1);
        boolean result = codec.isSigned();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_AVJv0() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertEquals("(1,256)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString2_NFhA1() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
    assertEquals("(1,2,3,4)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString3_VkQO2() {
    BHSDCodec codec = new BHSDCodec(1, 2, 3);
    assertEquals("(1,2,3)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString4_ukuo3() {
    BHSDCodec codec = new BHSDCodec(1, 2, 0, 4);
    assertEquals("(1,2,4)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeltaWithDZero_yRcJ0() {
        BHSDCodec codec = new BHSDCodec(1, 1, 1, 0);
        boolean result = codec.isDelta();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeltaWithDNonZero_mMKM1() {
        BHSDCodec codec = new BHSDCodec(1, 1, 1, 1);
        boolean result = codec.isDelta();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_Vsvz0() {
    BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
    assertEquals(10667318, bHSDCodec.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode2_cfqV1() {
    BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(108490780, bHSDCodec.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode3_EtzF2() {
    BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3);
    assertEquals(108490780, bHSDCodec.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCardinality_MEZj0() {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 1);
        long cardinality = bHSDCodec.cardinality();
        assertEquals(0, cardinality);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCardinality2_aJTY1() {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 1, 1, 1);
        long cardinality = bHSDCodec.cardinality();
        assertEquals(0, cardinality);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCardinality3_Pnbs2() {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 1, 1);
        long cardinality = bHSDCodec.cardinality();
        assertEquals(0, cardinality);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodes_BjAK0() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        boolean result = codec.encodes(10);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodes2_iTYN1() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        boolean result = codec.encodes(0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodes3_ylot2() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        boolean result = codec.encodes(5);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts1_sskX0() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
        int[] result = bHSDCodec.decodeInts(3, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts2_zxSh1() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3, 4);
        int[] result = bHSDCodec.decodeInts(5, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts3_FDSg2() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3);
        int[] result = bHSDCodec.decodeInts(6, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts4_fcQN3() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
        int[] result = bHSDCodec.decodeInts(7, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts5_RgpU4() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3, 4);
        int[] result = bHSDCodec.decodeInts(8, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts6_TbUb5() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3);
        int[] result = bHSDCodec.decodeInts(9, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts7_sAjE6() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
        int[] result = bHSDCodec.decodeInts(10, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts8_dGFy7() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3, 4);
        int[] result = bHSDCodec.decodeInts(11, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts9_FwsK8() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3);
        int[] result = bHSDCodec.decodeInts(12, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts10_qBiV9() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
        int[] result = bHSDCodec.decodeInts(13, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts11_Luqr10() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3, 4);
        int[] result = bHSDCodec.decodeInts(14, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts12_AidH11() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3);
        int[] result = bHSDCodec.decodeInts(15, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts13_Qqte12() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
        int[] result = bHSDCodec.decodeInts(16, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts14_KuvI13() throws IOException, Pack200Exception {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3, 4);
        int[] result = bHSDCodec.decodeInts(17, null);
        assert result != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetS_MEUb0() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2);
        int expectedS = 1;
        int actualS = bhsdCodec.getS();
        assertEquals(expectedS, actualS);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetS2_Nuva1() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3, 4);
        int expectedS = 3;
        int actualS = bhsdCodec.getS();
        assertEquals(expectedS, actualS);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetS3_PvmO2() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3);
        int expectedS = 3;
        int actualS = bhsdCodec.getS();
        assertEquals(expectedS, actualS);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetH_OAGt0() {
        BHSDCodec codec = new BHSDCodec(1, 2);
        assertEquals(2, codec.getH());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHWithSAndD_qRSO1() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3, 4);
        assertEquals(2, codec.getH());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHWithS_sqmn2() {
        BHSDCodec codec = new BHSDCodec(1, 2, 3);
        assertEquals(2, codec.getH());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_pdSq0() throws Pack200Exception {
        BHSDCodec codec = new BHSDCodec(1, 2);
        byte[] result = codec.encode(10);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetL_SxfW0() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2);
        int result = bhsdCodec.getL();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetL2_OpOF1() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3, 4);
        int result = bhsdCodec.getL();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetL3_bJUY2() {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 2, 3);
        int result = bhsdCodec.getL();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_BLTs0() throws Pack200Exception {
    BHSDCodec bHSDCodec = new BHSDCodec(1, 1, 1, 1);
    int value = 1;
    int last = 1;
    byte[] expected = new byte[]{0};
    byte[] actual = bHSDCodec.encode(value, last);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode7_gOQU6() throws Pack200Exception {
    BHSDCodec bHSDCodec = new BHSDCodec(1, 1, 1, 1);
    int value = 1;
    int last = 1;
    byte[] expected = new byte[]{(byte) 0};
    byte[] actual = bHSDCodec.encode(value, last);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode11_nJeB10() throws Pack200Exception {
    BHSDCodec bHSDCodec = new BHSDCodec(1, 1, 1, 1);
    int value = 1;
    int last = 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString1_AVJv0_fid1() {
    BHSDCodec codec = new BHSDCodec(1, 2);
    assertEquals("(1,2)", codec.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode2_cfqV1_fid1() {
    BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3, 4);
    assertEquals(-108490780, bHSDCodec.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode3_EtzF2_fid1() {
    BHSDCodec bHSDCodec = new BHSDCodec(1, 2, 3);
    assertEquals(-108490780, bHSDCodec.hashCode());
}
}