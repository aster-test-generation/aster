/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZCompressorInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_zfzZ0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false, 1024);
        long n = 10;
        long result = xzCompressorInputStream.skip(n);
        assertEquals(n, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip2_rwXk1() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false);
        long n = 10;
        long result = xzCompressorInputStream.skip(n);
        assertEquals(n, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip3_LxNZ2() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream);
        long n = 10;
        long result = xzCompressorInputStream.skip(n);
        assertEquals(n, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedCount_QOGu0() {
        InputStream inputStream = null;
        boolean decompressConcatenated = false;
        int memoryLimitInKb = 0;
        XZCompressorInputStream xzCompressorInputStream = null;
        try {
            xzCompressorInputStream = new XZCompressorInputStream(inputStream, decompressConcatenated, memoryLimitInKb);
        } catch (IOException e) {
            e.printStackTrace();
        }
        long compressedCount = xzCompressorInputStream.getCompressedCount();
        assertEquals(0, compressedCount);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_GLse0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, true, 1024);
        xzCompressorInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_zfzZ0_cYST0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false, 1024);
        long n = 10L;
        long result = xzCompressorInputStream.skip(n);
        assertEquals(n, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip2_rwXk1_XpnR0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false);
        long n = 10L;
        long result = xzCompressorInputStream.skip(n);
        assertEquals(n, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithDecompressConcatenatedFalse_YaFG1_TgDc0() throws IOException {
    InputStream inputStream = null;
    XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false);
    xzCompressorInputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithMemoryLimitInKb_OTjU2() throws IOException {
    InputStream inputStream = null;
    XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, true, 2048);
    xzCompressorInputStream.close();
}
}