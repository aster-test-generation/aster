/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CountingOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteByteArray_QPww0() throws IOException {
        CountingOutputStream countingOutputStream = new CountingOutputStream(System.out);
        byte[] b = new byte[10];
        countingOutputStream.write(b);
        assertEquals(10, countingOutputStream.getBytesWritten());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteByteArrayIntInt_aPTj1() throws IOException {
        CountingOutputStream countingOutputStream = new CountingOutputStream(System.out);
        byte[] b = new byte[10];
        countingOutputStream.write(b, 0, 5);
        assertEquals(5, countingOutputStream.getBytesWritten());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWritten_YJMD0() {
        CountingOutputStream cos = new CountingOutputStream(System.out);
        assertEquals(0, cos.getBytesWritten());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountWithWrittenValue_qqnw0() {
        CountingOutputStream countingOutputStream = new CountingOutputStream(System.out);
        countingOutputStream.count(10);
        assertEquals(10, countingOutputStream.getBytesWritten());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountWithNegativeWrittenValue_odiA1() {
        CountingOutputStream countingOutputStream = new CountingOutputStream(System.out);
        countingOutputStream.count(-1);
        assertEquals(0, countingOutputStream.getBytesWritten());
    }
}