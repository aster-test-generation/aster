/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPUTF8_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyStringInput_vOMX2() {
        CPUTF8 cputf8 = new CPUTF8("", 1);
        assertEquals("UTF-8:", cputf8.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInvalidUTF8Input_wIdO3() {
        CPUTF8 cputf8 = new CPUTF8("invalid\u0000utf8", 1);
        assertEquals("UTF-8:invalid\u0000utf8", cputf8.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructorParameters_sCpg4() {
        CPUTF8 cputf8 = new CPUTF8("example", 1);
        assertEquals("UTF-8:example", cputf8.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGlobalIndexField_FLla6() {
        CPUTF8 cputf8 = new CPUTF8("example", 1);
        cputf8.globalIndex = 2;
        assertEquals("UTF-8:example", cputf8.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_wNJp0() {
        CPUTF8 cputf8 = new CPUTF8("string");
        assertEquals(31 + "string".hashCode(), cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_boPd1() {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        assertEquals(31 + "utf8".hashCode(), cputf8.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_DIGh1_qgNB1() {
        CPUTF8 cputf8 = new CPUTF8("test");
        boolean result = cputf8.equals(null);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentUTF8_vmJy3_NTVm0() {
        CPUTF8 cputf81 = new CPUTF8("test1");
        CPUTF8 cputf82 = new CPUTF8("test2");
        boolean result = cputf81.equals(cputf82);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGlobalIndexWithLargeIndex_wicU4_RONk0() {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        cputf8.setGlobalIndex(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, cputf8.globalIndex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGlobalIndexWithPositiveIndex_ElOG3_wHlZ0() {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        cputf8.setGlobalIndex(10);
        assertEquals(10, cputf8.globalIndex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGlobalIndexWithSmallIndex_VOYr5_WpaD0() {
        CPUTF8 cputf8 = new CPUTF8("utf8", 0);
        cputf8.setGlobalIndex(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, cputf8.globalIndex);
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_XAbE0_HZrq1() throws IOException {
        CPUTF8 cputf8 = new CPUTF8("example");
        DataOutputStream dos = new DataOutputStream(System.out);
        cputf8.writeBody(dos);
    }
}