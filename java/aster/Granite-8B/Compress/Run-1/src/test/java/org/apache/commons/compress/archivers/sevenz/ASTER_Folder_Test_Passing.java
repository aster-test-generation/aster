/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Folder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindBindPairForOutStream_VzrH0() {
		Folder folder = new Folder();
		int index = 0;
		int result = folder.findBindPairForOutStream(index);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindBindPairForOutStream2_ZLzB1() {
		Folder folder = new Folder();
		int index = 1;
		int result = folder.findBindPairForOutStream(index);
		assertEquals(-1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindBindPairForOutStream3_qdvR2() {
		Folder folder = new Folder();
		int index = 2;
		int result = folder.findBindPairForOutStream(index);
		assertEquals(-1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindBindPairForOutStream4_BYoR3() {
		Folder folder = new Folder();
		int index = 3;
		int result = folder.findBindPairForOutStream(index);
		assertEquals(-1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_KgmV0() {
        Folder folder = new Folder();
        int index =-1;
        int expected =-1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream2_fFIy1() {
        Folder folder = new Folder();
        int index = 1;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream3_ZWPz2() {
        Folder folder = new Folder();
        int index = 2;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream4_GTET3() {
        Folder folder = new Folder();
        int index = 3;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream5_sXQE4() {
        Folder folder = new Folder();
        int index = 4;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream6_mzsx5() {
        Folder folder = new Folder();
        int index = 5;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream7_VIjT6() {
        Folder folder = new Folder();
        int index = 6;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream8_zdkd7() {
        Folder folder = new Folder();
        int index = 7;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream9_iJhz8() {
        Folder folder = new Folder();
        int index = 8;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream10_gLZr9() {
        Folder folder = new Folder();
        int index = 9;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream11_QiUO10() {
        Folder folder = new Folder();
        int index = 10;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream12_REFp11() {
        Folder folder = new Folder();
        int index = 11;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream13_CjOs12() {
        Folder folder = new Folder();
        int index = 12;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream14_YDWq13() {
        Folder folder = new Folder();
        int index = 13;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream15_oLKi14() {
        Folder folder = new Folder();
        int index = 14;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream16_QIjN15() {
        Folder folder = new Folder();
        int index = 15;
        int expected = -1;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test1_Vmvj0() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 0;
    long result = folder.getUnpackSize();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test2_ImzI1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 1;
    folder.unpackSizes = new long[1];
    folder.unpackSizes[0] = 10;
    long result = folder.getUnpackSize();
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test3_ytaD2() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 2;
    folder.unpackSizes = new long[2];
    folder.unpackSizes[0] = 10;
    folder.unpackSizes[1] = 20;
    long result = folder.getUnpackSize();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test4_CFpG3() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 3;
    folder.unpackSizes = new long[3];
    folder.unpackSizes[0] = 10;
    folder.unpackSizes[1] = 20;
    folder.unpackSizes[2] = 30;
    long result = folder.getUnpackSize();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoopWithDuplicatesAndBacktrackAndCycle_edCI6() {
    Folder folder = new Folder();
    folder.packedStreams = new long[5];
    folder.coders = new Coder[5];
    folder.bindPairs = new BindPair[4];
}
}