/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithEmptySignature_TmZf0() {
        byte[] signature = new byte[0];
        boolean result = XZUtils.matches(signature, 0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName_aYVc0() {
        String fileName = "example.tar.xz";
        boolean expected = true;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName2_ghTR1() {
        String fileName = "example.txt";
        boolean expected = false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName3_mKUs2() {
        String fileName = "example.tar.gz";
        boolean expected =false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName4_pfli3() {
        String fileName = "example.zip";
        boolean expected =false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName5_fPJw4() {
        String fileName = "example.jar";
        boolean expected =false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName6_aNsk5() {
        String fileName = "example.7z";
        boolean expected =false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName7_ZjMv6() {
        String fileName = "example.tar";
        boolean expected =false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName8_OOmw7() {
        String fileName = "example.gz";
        boolean expected =false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName9_wLJi8() {
        String fileName = "example.rar";
        boolean expected =false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName10_CzJo9() {
        String fileName = "example.bz2";
        boolean expected =false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName11_CJuL10() {
        String fileName = "example.xz";
        boolean expected = true;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName12_pDXJ11() {
        String fileName = "example.pdf";
        boolean expected = false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName13_KKhE12() {
        String fileName = "example.doc";
        boolean expected = false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName14_UFDd13() {
        String fileName = "example.docx";
        boolean expected = false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName15_OsbZ14() {
        String fileName = "example.png";
        boolean expected = false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName16_kdfg15() {
        String fileName = "example.jpg";
        boolean expected = false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName18_BUUm17() {
        String fileName = "example.mp3";
        boolean expected = false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName19_bWeu18() {
        String fileName = "example.mp4";
        boolean expected = false;
        boolean actual = XZUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsXZCompressionAvailable_xWpd0() {
        boolean result = XZUtils.isXZCompressionAvailable();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testIsCompressedFilename_gzXX0_1() {
		assertTrue(XZUtils.isCompressedFilename("file.tar.xz"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testIsCompressedFilename_gzXX0_2() {
		assertFalse(XZUtils.isCompressedFilename("file.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testUncompressedFileName_dctq0() {
		String fileName = "test.txt.xz";
		String expected = "test.txt";
		String actual = XZUtils.getUncompressedFileName(fileName);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testIsCompressedFilename_gzXX0() {
		assertTrue(XZUtils.isCompressedFilename("file.tar.xz"));
		assertFalse(XZUtils.isCompressedFilename("file.txt"));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFileName_Biys0() {
        String fileName = "example.txt";
        String expected = "example.txt.xz";
        String actual = XZUtils.getCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
}