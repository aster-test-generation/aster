/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X5455_ExtendedTimestamp_Test_Passing {
	{
	    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_dAEg0() {
        X5455_ExtendedTimestamp xf = new X5455_ExtendedTimestamp();
        assertTrue(xf.equals(xf));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_dyuh1() {
        X5455_ExtendedTimestamp xf = new X5455_ExtendedTimestamp();
        assertFalse(xf.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_lYTn2() {
        X5455_ExtendedTimestamp xf = new X5455_ExtendedTimestamp();
        assertFalse(xf.equals(""));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameValues_IYTN3() {
        X5455_ExtendedTimestamp xf1 = new X5455_ExtendedTimestamp();
        X5455_ExtendedTimestamp xf2 = new X5455_ExtendedTimestamp();
        assertTrue(xf1.equals(xf2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTime_UyTf0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        Date d = new Date();
        x5455_ExtendedTimestamp.setModifyJavaTime(d);
        assertNotNull(x5455_ExtendedTimestamp.getModifyTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_qIlm0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        ZipShort headerId = extendedTimestamp.getHeaderId();
        assertNotNull(headerId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateFileTime_QDlp0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        extendedTimestamp.setCreateFileTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_rTSS0() throws ZipException {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] buffer = new byte[100]; // Replace with actual buffer
        int offset = 0; // Replace with actual offset
        int length = buffer.length; // Replace with actual length
        extendedTimestamp.parseFromCentralDirectoryData(buffer, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyFileTime_VnLx0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        extendedTimestamp.setModifyFileTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_xCkp1() {
        ZipLong zipLong1 = new ZipLong(1234567890L);
        ZipLong zipLong2 = new ZipLong(1234567890L);
        assert zipLong1.equals(zipLong2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_vWcM3() {
        ZipLong zipLong = new ZipLong(1234567890L);
        assert zipLong.getValue() == 1234567890L;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_bqjl6() {
        ZipLong zipLong1 = new ZipLong(1234567890L);
        ZipLong zipLong2 = new ZipLong(1234567890L);
        assert zipLong1.hashCode() == zipLong2.hashCode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_fpco10() {
        ZipLong zipLong = new ZipLong(1234567890L);
        assert zipLong.clone() instanceof ZipLong;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTime_GnMT0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        Date date = new Date();
        extendedTimestamp.setAccessJavaTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_hwGD0_1() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] centralDirectoryData = extendedTimestamp.getCentralDirectoryData();
        assertNotNull(centralDirectoryData);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_hwGD0_2() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] centralDirectoryData = extendedTimestamp.getCentralDirectoryData();
        assertNotEquals(0, centralDirectoryData.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessFileTime_qHas0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        extendedTimestamp.setAccessFileTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFlags_hBmv0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte result = x5455_ExtendedTimestamp.getFlags();
        assertEquals((byte) 0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataLength_OdzV0() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        ZipShort zipShort = x5455_ExtendedTimestamp.getLocalFileDataLength();
        assertEquals(1, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataData_dxRk0_1() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        byte[] data = x5455_ExtendedTimestamp.getLocalFileDataData();
        assertNotNull(data);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTime_NIZg0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        Date date = new Date();
        extendedTimestamp.setCreateJavaTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateJavaTime_sZTh0() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        Date date = new Date();
        extendedTimestamp.setCreateJavaTime(date);
        assertNotNull(extendedTimestamp.getCreateTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_wmaO0_fid1() {
        X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
        String result = x5455_ExtendedTimestamp.toString();
        assertEquals("0x5455 Zip Extra Field: Flags=0 ", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccessJavaTime_AAEC0_fid1() {
    X5455_ExtendedTimestamp x5455ExtendedTimestamp = new X5455_ExtendedTimestamp();
    ZipLong unixTime = new ZipLong(123456789);
    Date expected = new Date(123456789 * 1000L);
    Date actual = x5455ExtendedTimestamp.getAccessJavaTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTime_uoYl4_fid1() {
        X5455_ExtendedTimestamp extendedTimestamp = new X5455_ExtendedTimestamp();
        ZipLong accessTime = extendedTimestamp.getAccessTime();
        assertEquals(4, accessTime.getBytes(4).length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsBit0_modifyTimePresent_HxPb0_fid1() {
    X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
    boolean result = x5455_ExtendedTimestamp.isBit0_modifyTimePresent();
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFlags1_joso1_aCUc0_1() {
		X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
		x5455_ExtendedTimestamp.setFlags((byte) 1);
		assertEquals(true, x5455_ExtendedTimestamp.isBit0_modifyTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFlags1_joso1_aCUc0_2() {
		X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
		x5455_ExtendedTimestamp.setFlags((byte) 1);
		assertEquals(false, x5455_ExtendedTimestamp.isBit1_accessTimePresent());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetFlags1_joso1_aCUc0_3() {
		X5455_ExtendedTimestamp x5455_ExtendedTimestamp = new X5455_ExtendedTimestamp();
		x5455_ExtendedTimestamp.setFlags((byte) 1);
		assertEquals(false, x5455_ExtendedTimestamp.isBit2_createTimePresent());}
}