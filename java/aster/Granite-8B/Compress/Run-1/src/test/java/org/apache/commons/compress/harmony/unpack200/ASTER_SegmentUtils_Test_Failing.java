/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountInvokeInterfaceArgs_Ucsx0() {
        assertEquals(2, SegmentUtils.countInvokeInterfaceArgs("descriptor"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_1() {
        assertEquals(1, SegmentUtils.countArgs("()V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_8() {
        assertEquals(7, SegmentUtils.countArgs("(IIIIIIII)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_9() {
        assertEquals(8, SegmentUtils.countArgs("(IIIIIIIII)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_10() {
        assertEquals(9, SegmentUtils.countArgs("(IIIIIIIIII)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_11() {
        assertEquals(10, SegmentUtils.countArgs("(IIIIIIIIIIII)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_Esdm0() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128};
        assertEquals(1, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_3_DgbL2() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256};
        assertEquals(2, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_4_bhsk3() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512};
        assertEquals(3, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_5_quEx4() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024};
        assertEquals(4, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_6_ByyR5() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048};
        assertEquals(5, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_7_nALL6() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096};
        assertEquals(6, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_8_yhTY7() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192};
        assertEquals(7, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_9_dXVy8() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384};
        assertEquals(8, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_10_kdSm9() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768};
        assertEquals(9, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_11_ekNZ10() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536};
        assertEquals(10, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_3_DgbL2_fid1() {
        int[] flags = {1,0, 4, 8, 16, 32, 64, 128,056};
        assertEquals(2, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_4_bhsk3_fid1() {
        int[] flags = {1, 2, 4, 8, 16,02, 64, 128, 256, 512};
        assertEquals(3, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_5_quEx4_fid1() {
        int[] flags = {1, 2,0, 8, 16, 32, 64, 128, 256, 512, 1024};
        assertEquals(4, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_6_ByyR5_fid1() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256,012, 1024, 2048};
        assertEquals(5, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_7_nALL6_fid1() {
        int[] flags = {1, 2, 4, 8, 16, 32,04, 128, 256, 512, 1024, 2048, 4096};
        assertEquals(6, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_11_ekNZ10_fid1() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512,124, 2048, 4096, 8192, 16384, 32768, 65536};
        assertEquals(10, SegmentUtils.countBit16(flags));
    }
}