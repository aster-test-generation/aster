/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPFloat_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testcompareTo_ihMA8() {
		CPFloat obj1 = new CPFloat(Float.NaN);
		CPFloat obj2 = new CPFloat(Float.MIN_VALUE);
		assertTrue(obj1.compareTo(obj2) > 0);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testcompareTo_zgKK9() {
		CPFloat obj1 = new CPFloat(Float.MIN_VALUE);
		CPFloat obj2 = new CPFloat(Float.NaN);
		assertTrue(obj1.compareTo(obj2) < 0);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFloat_mERU0() {
        CPFloat floatObj = new CPFloat(10.5f);
        float result = floatObj.getFloat();
        assertEquals(10.5f, result, 0.001);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFloatWithZero_edzH2() {
        CPFloat floatObj = new CPFloat(0.0f);
        float result = floatObj.getFloat();
        assertEquals(0.0f, result, 0.001);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFloatWithNegativeValue_rzDg3() {
        CPFloat floatObj = new CPFloat(-10.5f);
        float result = floatObj.getFloat();
        assertEquals(-10.5f, result, 0.001);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFloatWithLargeValue_DNKY4() {
        CPFloat floatObj = new CPFloat(1000000.0f);
        float result = floatObj.getFloat();
        assertEquals(1000000.0f, result, 0.001);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFloatWithSmallValue_efpm5() {
        CPFloat floatObj = new CPFloat(0.00001f);
        float result = floatObj.getFloat();
        assertEquals(0.00001f, result, 0.001);
    }
}