/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_VQZD0() {
        ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(null);
        byte[] signature = new byte[8];
        signature[0] = 0x21;
        signature[1] = 0x3c;
        signature[2] = 0x61;
        signature[3] = 0x72;
        signature[4] = 0x63;
        signature[5] = 0x68;
        signature[6] = 0x3e;
        signature[7] = 0x0a;
        boolean result = ArArchiveInputStream.matches(signature, 8);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithShortSignature_ETmA1() {
        ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(null);
        byte[] signature = new byte[7];
        signature[0] = 0x21;
        signature[1] = 0x3c;
        signature[2] = 0x61;
        signature[3] = 0x72;
        signature[4] = 0x63;
        signature[5] = 0x68;
        signature[6] = 0x3e;
        boolean result = ArArchiveInputStream.matches(signature, 7);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithEmptySignature_Hyfc2() {
        ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(null);
        byte[] signature = new byte[0];
        boolean result = ArArchiveInputStream.matches(signature, 0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithNullSignature_wmWo3() {
        ArArchiveInputStream arArchiveInputStream = new ArArchiveInputStream(null);
        byte[] signature = null;
        boolean result = ArArchiveInputStream.matches(signature, 0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextArEntry_xeDy9() throws IOException {
        ArArchiveInputStream in = new ArArchiveInputStream(null);
    }
}