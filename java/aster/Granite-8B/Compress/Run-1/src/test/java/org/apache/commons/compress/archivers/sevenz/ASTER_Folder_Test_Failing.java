/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Folder_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QQHh0() {
        Folder folder = new Folder();
        String expected = "Folder with 0 coders, 0 input streams, 0 output streams, 0 bind pairs, 0 packed streams, 0 unpack sizes, without CRC and 0 unpack streams";
        assertEquals(expected, folder.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithcoders_WxYo1() {
        Folder folder = new Folder();
        folder.coders = new Coder[1];
        String expected = "Folder with 1 coders, 0 input streams, 0 output streams, 0 bind pairs, 0 packed streams, 0 unpack sizes, without CRC and 0 unpack streams";
        assertEquals(expected, folder.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoopWithDuplicates_SrIY4_uIUd0() {
    Folder folder = new Folder();
    folder.packedStreams = new long[1];
    folder.coders = new Coder[1];
    folder.bindPairs = new BindPair[2];
    folder.bindPairs[0] = new BindPair(0, 1);
    folder.bindPairs[1] = new BindPair(1, 2);
    try {
        Iterable<Coder> coders = folder.getOrderedCoders();
        List<Coder> coderList = new ArrayList<>();
        for (Coder coder : coders) {
            coderList.add(coder);
        }
        assertEquals(1, coderList.size());
        assertEquals(folder.coders[0], coderList.get(0));
        assertEquals(folder.coders[1], coderList.get(1));
        assertEquals(folder.coders[2], coderList.get(2));
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindBindPairForOutStream_VzrH0_fid1() {
		Folder folder = new Folder();
		int index = 0;
		int result = folder.findBindPairForOutStream(index);
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_KgmV0_fid1() {
        Folder folder = new Folder();
        int index = 0;
        int expected = 0;
        int actual = folder.findBindPairForInStream(index);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test3_ytaD2_fid1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 2;
    folder.unpackSizes = new long[2];
    folder.unpackSizes[0] = 10;
    folder.unpackSizes[1] = 20;
    long result = folder.getUnpackSize();
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test4_CFpG3_fid1() {
    Folder folder = new Folder();
    folder.totalOutputStreams = 3;
    folder.unpackSizes = new long[3];
    folder.unpackSizes[0] = 10;
    folder.unpackSizes[1] = 20;
    folder.unpackSizes[2] = 30;
    long result = folder.getUnpackSize();
    assertEquals(10, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoopWithDuplicates_SrIY4_uIUd0_fid2() {
    Folder folder = new Folder();
    folder.packedStreams = new long[3];
    folder.coders = new Coder[3];
    folder.bindPairs = new BindPair[2];
    folder.bindPairs[0] = new BindPair(0, 1);
    folder.bindPairs[1] = new BindPair(1, 2);
    try {
        Iterable<Coder> coders = folder.getOrderedCoders();
        List<Coder> coderList = new ArrayList<>();
        for (Coder coder : coders) {
            coderList.add(coder);
        }
        assertEquals(3, coderList.size());
        assertEquals(folder.coders[0], coderList.get(0));
        assertEquals(folder.coders[1], coderList.get(1));
        assertEquals(folder.coders[2], coderList.get(2));
    } catch (IOException e) {
        e.printStackTrace();
    }
}
}