/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Enumeration;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipFile_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipFileGetInputStream_Tqhx0() throws IOException {
    ZipFile zipFile = new ZipFile("test.zip");
    ZipArchiveEntry entry = zipFile.getEntries().nextElement();
    InputStream inputStream = zipFile.getInputStream(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnixSymlink_dFVb0() throws IOException {
        ZipFile zipFile = new ZipFile(new File("test.zip"));
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        entry.setUnixMode(012345);
        assertEquals("rwxr-xr-x", zipFile.getUnixSymlink(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnixSymlinkWithInvalidMode_FjNg1() throws IOException {
        ZipFile zipFile = new ZipFile(new File("test.zip"));
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        entry.setUnixMode(07777);
        assertEquals("rwxrwxrwx", zipFile.getUnixSymlink(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnixSymlinkWithNullEntry_mZLy2() throws IOException {
        ZipFile zipFile = new ZipFile(new File("test.zip"));
        assertNull(zipFile.getUnixSymlink(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnixSymlinkWithNonSymlinkEntry_mEIk3() throws IOException {
        ZipFile zipFile = new ZipFile(new File("test.zip"));
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        entry.setUnixMode(0100644);
        assertNull(zipFile.getUnixSymlink(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRawInputStream_entryNotNull_returnsInputStream_RUvY0() throws IOException {
        final ZipFile zipFile = new ZipFile(new File("test.zip"));
        final ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        final InputStream inputStream = zipFile.getRawInputStream(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRawInputStream_entryNull_returnsNull_mILX1() throws IOException {
        final ZipFile zipFile = new ZipFile(new File("test.zip"));
        final InputStream inputStream = zipFile.getRawInputStream(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getRawInputStream_entryDataOffsetUnknown_returnsNull_uspV2() throws IOException {
        final ZipFile zipFile = new ZipFile(new File("test.zip"));
        final ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntriesInPhysicalOrder_gvjq0() throws IOException {
        ZipFile zipFile = new ZipFile(new File("test.zip"));
        Enumeration<ZipArchiveEntry> entries = zipFile.getEntriesInPhysicalOrder();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipFileGetInputStream_Tqhx0_fid1() throws IOException {
    ZipFile zipFile = new ZipFile("test.zip");
    ZipArchiveEntry entry = zipFile.getEntries().nextElement();
    InputStream inputStream = zipFile.getInputStream(entry);
    // Add assertion here
    assertNotNull(inputStream);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntries_AADa0_VvAs0() {
        ZipFile zipFile = null;
        try {
            zipFile = new ZipFile(new File("test.zip"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        Iterable<ZipArchiveEntry> entries = zipFile.getEntries("test.txt");
        assertNotNull(entries);
    }
}