/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeprecatedAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_OncR0() {
        DeprecatedAttribute deprecatedAttribute = new DeprecatedAttribute();
        assertEquals("Deprecated Attribute", deprecatedAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLength_KYyw0() {
        DeprecatedAttribute deprecatedAttribute = new DeprecatedAttribute();
        int length = deprecatedAttribute.getLength();
        assertEquals(0, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_Vbzk0() throws IOException {
        DeprecatedAttribute deprecatedAttribute = new DeprecatedAttribute();
        DataOutputStream dos = new DataOutputStream(System.out);
        deprecatedAttribute.writeBody(dos);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_HPKP2() {
        DeprecatedAttribute deprecatedAttribute1 = new DeprecatedAttribute();
        DeprecatedAttribute deprecatedAttribute2 = new DeprecatedAttribute();
        assertTrue(deprecatedAttribute1.equals(deprecatedAttribute2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_hsrU7() {
        DeprecatedAttribute deprecatedAttribute1 = new DeprecatedAttribute();
        DeprecatedAttribute deprecatedAttribute2 = new DeprecatedAttribute();
        assertEquals(deprecatedAttribute1.hashCode(), deprecatedAttribute2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_rPNV4_fid1() {
        DeprecatedAttribute deprecatedAttribute = new DeprecatedAttribute();
        assertFalse(deprecatedAttribute.toString().startsWith("DeprecatedAttribute"));
    }
}