/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testResolve9_ruDg8() {
    CPUTF8 utf8 = new CPUTF8("example");
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_zeMI0_pwDQ0() {
        CPUTF8 name = new CPUTF8("example");
        CPUTF8 descriptor = new CPUTF8("java/lang/String");
        long flags = 0;
        List<Attribute> attributes = new ArrayList<>();
        CPMember cpMember = new CPMember(name, descriptor, flags, attributes);
        assertEquals("CPMember: UTF-8:example(UTF-8:java/lang/String)", cpMember.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPMember_Suro1_nXyU0() {
        CPUTF8 name = new CPUTF8("example");
        CPUTF8 descriptor = new CPUTF8("example");
        List<Attribute> attributes = new ArrayList<>();
        CPMember member = new CPMember(name, descriptor, 1, attributes);
        ClassFileEntry[] entries = member.getNestedClassFileEntries();
        assert entries.length == 2;
        assert entries[0].equals(name);
        assert entries[1].equals(descriptor);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_jZza0_HTEs0() {
    CPUTF8 utf81 = new CPUTF8("string1");
    CPUTF8 utf82 = new CPUTF8("string2", 1);
    CPMember member1 = new CPMember(utf81, utf82, 1L, new ArrayList<>());
    CPMember member2 = new CPMember(utf81, utf82, 1L, new ArrayList<>());
    assertEquals(member1.hashCode(), member2.hashCode());
}
}