/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData2_smRN1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        byte[] data = new byte[100];
        int offset = 10;
        int length = 100;
        try {
            x000A_NTFS.parseFromLocalFileData(data, offset, length);
        } catch (ZipException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_taof0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
    assertNull(x000A_NTFS.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetAccessJavaTime_JfRK0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date result = x000A_NTFS.getAccessJavaTime();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreateJavaTime_LTpl0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger z = new ZipEightByteInteger(1234567890L);
        Date expected = FileTimes.ntfsTimeToDate(1234567890L);
        Date actual = x000A_NTFS.getCreateJavaTime();
    assertNull(expected);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_Ftiy0() {
	ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0,0,0,0,0,0,0}, 0);
	ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{0,0,0,0,0,0,0}, 0);
	assertEquals(zipEightByteInteger1, zipEightByteInteger2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_WURl1() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0,0,0,0,0,0,0}, 0);
	assertEquals(0L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_OHBW2() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0,0,0,0,0,0,0}, 0);
	assertEquals("0", zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue2_DJhF4() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0,0,0,0,0,0,0});
	assertEquals(0L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_uKdw5() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0,0,0,0,0,0,0}, 0);
	assertArrayEquals(new byte[]{0,0,0,0,0,0,0}, zipEightByteInteger.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals2_cQFo7() {
	ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0,0,0,0,0,0,0}, 0);
	ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{0,0,0,0,0,0,0}, 0);
	assertEquals(zipEightByteInteger1.hashCode(), zipEightByteInteger2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue3_OMSH8() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0,0,0,0,0,0,1}, 0);
	assertEquals(1L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals3_IbJw11() {
	ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0,0,0,0,0,0,1}, 0);
	ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{0,0,0,0,0,0,0}, 0);
	assertEquals(zipEightByteInteger1, zipEightByteInteger2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataLength_gUnA0_fid1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipShort localFileDataLength = x000A_NTFS.getLocalFileDataLength();
        assertEquals(18, localFileDataLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetModifyFileTime_erUs0_fid1() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime result = x000A_NTFS.getModifyFileTime();
    assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_taof0_fid1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        assertEquals("0x000A Zip Extra Field: Modify:[0] Access:[0] Create:[0] ", x000A_NTFS.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCreateTime_rNXF0_fid1() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipEightByteInteger zipEightByteInteger = x000A_NTFS.getCreateTime();
		assertEquals(null, zipEightByteInteger);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreateJavaTime_LTpl0_fid1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger z = new ZipEightByteInteger(1234567890L);
        Date expected = FileTimes.ntfsTimeToDate(1234567890L);
        Date actual = x000A_NTFS.getCreateJavaTime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_nBRX1_2_fid1() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertEquals(1684234849123456L, zipEightByteInteger2.getLongValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_qYJe2_1() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertEquals("0", zipEightByteInteger1.toString());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_qYJe2_2() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertEquals("1684234849123456", zipEightByteInteger2.toString());}
}