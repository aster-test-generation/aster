/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetDevMajor9_ZAGd9() {
        File file = null;
        String fileName = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        int result = tarArchiveEntry.getDevMajor();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetDevMajor10_AxgC10() {
        File file = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        int result = tarArchiveEntry.getDevMajor();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag8_KNij7() {
        String name = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name);
        byte linkFlag = tarArchiveEntry.getLinkFlag();
        assertEquals((byte) 0, linkFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag9_LAAO8() {
        String name = "";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        byte linkFlag = tarArchiveEntry.getLinkFlag();
        assertEquals((byte) 0, linkFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag11_Mdtt10() {
        File file = null;
        String fileName = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        byte linkFlag = tarArchiveEntry.getLinkFlag();
        assertEquals((byte) 0, linkFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag12_ZBmK11() {
        File file = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        byte linkFlag = tarArchiveEntry.getLinkFlag();
        assertEquals((byte) 0, linkFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkWithLinkFlagSetToLink_pTVf0() {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 1, true);
        assertTrue(entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithLinkFlagOldNorm_XxSK1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, (byte) 0, false);
        assertTrue(tarArchiveEntry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithLinkFlagNormal_BbmU2() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, (byte) 1, false);
        assertTrue(tarArchiveEntry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithLinkFlagDir_yISw3() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, (byte) 5, false);
        assertTrue(!tarArchiveEntry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithLinkFlagOther_ddZw5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, (byte) 2, false);
        assertTrue(tarArchiveEntry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsFileWithLinkFlagOtherAndNameEndWithSlash_UovW6() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, (byte) 2, false);
        assertTrue(!tarArchiveEntry.isFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMode5_SzGt5() {
        String name = "";
        byte linkFlag = 0;
        TarArchiveEntry entry = new TarArchiveEntry(name, linkFlag);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMode6_gYpp6() {
        String name = "";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry entry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMode8_iIZP8() {
        String name = "";
        TarArchiveEntry entry = new TarArchiveEntry(name);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMode9_yJRB9() {
        String name = "";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry entry = new TarArchiveEntry(name, preserveAbsolutePath);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMode11_idFV11() {
        File file = null;
        String fileName = "";
        TarArchiveEntry entry = new TarArchiveEntry(file, fileName);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMode12_uNHa12() {
        File file = null;
        TarArchiveEntry entry = new TarArchiveEntry(file);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor2_WpOJ1() {
        Path file = null;
        String fileName = "";
        LinkOption[] linkOptions = new LinkOption[0];
        try {
            new TarArchiveEntry(file, fileName, linkOptions);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor15_EuYH14() {
        Path file = null;
        try {
            new TarArchiveEntry(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModTime11_MLtH11_gkIr0() {
        Path file = null;
        TarArchiveEntry tarArchiveEntry = null;
        try {
            tarArchiveEntry = new TarArchiveEntry(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetDevMajor11_Szmc11_sBZX0() {
        Path file = null;
        TarArchiveEntry tarArchiveEntry = null;
        try {
            tarArchiveEntry = new TarArchiveEntry(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
        int result = tarArchiveEntry.getDevMajor();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkName_QdDg0_LOMU0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        tarArchiveEntry.setLinkName("link");
        assertEquals("link", tarArchiveEntry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkName_BEkw2_UKkD0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0], null);
        tarArchiveEntry.setLinkName("link");
        assertEquals("link", tarArchiveEntry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkName_KjVO3_aVLE0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new byte[0], null, false, 0L);
        tarArchiveEntry.setLinkName("link");
        assertEquals("link", tarArchiveEntry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLinkName3_MUxL2_iXJD0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null, false);
        String linkName = tarArchiveEntry.getLinkName();
        assertEquals("", linkName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedTime_Jprg0_nGmO0() {
        try {
            TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
            FileTime lastModifiedTime = tarArchiveEntry.getLastModifiedTime();
            assertNotNull(lastModifiedTime);
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedTime2_mNyB2_yrSW0() {
        TarArchiveEntry tarArchiveEntry = null;
        try {
            tarArchiveEntry = new TarArchiveEntry(null, null, null, false);
        } catch (IOException e) {
            e.printStackTrace();
        }
        FileTime lastModifiedTime = tarArchiveEntry.getLastModifiedTime();
        assertNotNull(lastModifiedTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSparseHeaders_YaYD0_KFXV0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, (LinkOption[]) null);
        List<TarArchiveStructSparse> actual = tarArchiveEntry.getSparseHeaders();
        assertTrue(actual.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGroupId_mPeE0_cbyJ0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        int groupId = tarArchiveEntry.getGroupId();
        assertEquals(0, groupId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGroupId3_VpMe2_pVGj0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null, false);
        int groupId = tarArchiveEntry.getGroupId();
        assertEquals(0, groupId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGroupId4_Kpen3_EwbK0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null, false, 0L);
        int groupId = tarArchiveEntry.getGroupId();
        assertEquals(0, groupId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullFile_eMpS0_sAlF0() {
        TarArchiveEntry tarArchiveEntry = null;
        try {
            tarArchiveEntry = new TarArchiveEntry(null, "fileName", LinkOption.NOFOLLOW_LINKS);
        } catch (IOException e) {
            e.printStackTrace();
        }
        TarArchiveEntry[] directoryEntries = tarArchiveEntry.getDirectoryEntries();
        assertEquals(0, directoryEntries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupId3_ICNr4_tbbm0() {
        TarArchiveEntry tarArchiveEntry = null;
        try {
            tarArchiveEntry = new TarArchiveEntry(null, null, null);
        } catch (IOException e) {
            e.printStackTrace();
        }
        tarArchiveEntry.setGroupId(3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupId6_ECxZ7_lHjM0() {
        TarArchiveEntry tarArchiveEntry = null;
        try {
            tarArchiveEntry = new TarArchiveEntry(null, null, null);
        } catch (IOException e) {
            e.printStackTrace();
        }
        tarArchiveEntry.setGroupId(6);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupId13_bCHR14_HAVP1() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        tarArchiveEntry.setGroupId(13);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGroupId15_znNU16_BkqG1() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        tarArchiveEntry.setGroupId(15);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetDevMinor_ioFG0_kDuL0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        int result = tarArchiveEntry.getDevMinor();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetDevMinor2_HLzc2_DjNl0() {
        TarArchiveEntry tarArchiveEntry = null;
        try {
            tarArchiveEntry = new TarArchiveEntry(null, null, null, false);
        } catch (IOException e) {
            e.printStackTrace();
        }
        int result = tarArchiveEntry.getDevMinor();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetDevMinor3_ysaI3_HLcU0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null, false, 0L);
        int result = tarArchiveEntry.getDevMinor();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUserName_hmmM0_tLxA0() throws IOException {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        String actualUserName = tarArchiveEntry.getUserName();
        assertEquals("", actualUserName);
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDeviceWithHeaderBuf_UGKx3_AxYv0_1_fid3() throws IOException {
        byte[] headerBuf = new byte[512];
        headerBuf[156] = 1;
        TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(headerBuf);
        headerBuf[156] = 2;
        TarArchiveEntry tarArchiveEntry2 = new TarArchiveEntry(headerBuf);
        assertTrue(tarArchiveEntry1.isCharacterDevice());}
}