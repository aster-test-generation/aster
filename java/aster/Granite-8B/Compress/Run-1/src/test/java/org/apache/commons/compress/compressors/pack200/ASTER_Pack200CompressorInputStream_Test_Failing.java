/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches1_RADI0() {
        byte[] signature = new byte[4];
        signature[0] = (byte) 0xCA;
        signature[1] = (byte) 0xFE;
        signature[2] = (byte) 0xB1;
        signature[3] = (byte) 0x09;
        boolean result = Pack200CompressorInputStream.matches(signature, 4);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches4_VuhR3() {
        byte[] signature = new byte[5];
        signature[0] = (byte) 0xCA;
        signature[1] = (byte) 0xFE;
        signature[2] = (byte) 0xB1;
        signature[3] = (byte) 0x09;
        signature[4] = (byte) 0x00;
        boolean result = Pack200CompressorInputStream.matches(signature, 5);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_isxL0() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""));
        byte[] b = new byte[10];
        int result = pack200CompressorInputStream.read(b);
        assertEquals(10, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_epuR0() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("input.jar"), Pack200Strategy.IN_MEMORY, null);
        long count = 10;
        long skippedBytes = pack200CompressorInputStream.skip(count);
        assertEquals(count, skippedBytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset2_ENex1() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""));
        pack200CompressorInputStream.reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset4_eYVh3() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""), Pack200Strategy.IN_MEMORY, null);
        pack200CompressorInputStream.reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset7_gJOt6() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""), Pack200Strategy.IN_MEMORY);
        pack200CompressorInputStream.reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFileAndMap_kBNX1() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.jar"), new HashMap<>());
        pack200CompressorInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFileAndPack200StrategyAndMap_nubx3() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.jar"), Pack200Strategy.IN_MEMORY, new HashMap<>());
        pack200CompressorInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFileAndPack200Strategy_VJIM6() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.jar"), Pack200Strategy.IN_MEMORY);
        pack200CompressorInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFile_IWZr7() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.jar"));
        pack200CompressorInputStream.close();
    }
}