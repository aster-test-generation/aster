/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_2() {
        assertEquals(1, SegmentUtils.countArgs("(I)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_3() {
        assertEquals(2, SegmentUtils.countArgs("(II)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_4() {
        assertEquals(3, SegmentUtils.countArgs("(III)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_5() {
        assertEquals(4, SegmentUtils.countArgs("(IIII)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_6() {
        assertEquals(5, SegmentUtils.countArgs("(IIIII)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_7() {
        assertEquals(6, SegmentUtils.countArgs("(IIIIII)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16WithEmptyArray_nSTf0() {
    long[] flags = new long[0];
    int expectedCount = 0;
    int actualCount = SegmentUtils.countBit16(flags);
    assertEquals(expectedCount, actualCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16WithSingleSetBit_fhYX1() {
    long[] flags = new long[1];
    flags[0] = 1 << 16;
    int expectedCount = 1;
    int actualCount = SegmentUtils.countBit16(flags);
    assertEquals(expectedCount, actualCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16WithEmptyFlags_JVvv0() {
    long[][] flags = new long[0][0];
    int expectedCount = 0;
    int actualCount = SegmentUtils.countBit16(flags);
    assertEquals(expectedCount, actualCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16WithOneElementFlags_lWUK1() {
    long[][] flags = new long[1][1];
    flags[0][0] = 1 << 16;
    int expectedCount = 1;
    int actualCount = SegmentUtils.countBit16(flags);
    assertEquals(expectedCount, actualCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16WithMultipleElementsFlags_glSE2() {
    long[][] flags = new long[2][2];
    flags[0][0] = 1 << 16;
    flags[0][1] = 0;
    flags[1][0] = 0;
    flags[1][1] = 1 << 16;
    int expectedCount = 2;
    int actualCount = SegmentUtils.countBit16(flags);
    assertEquals(expectedCount, actualCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountBit16WithMultipleFlags_LfCe3() {
    long[][] flags = new long[3][3];
    flags[0][0] = 1 << 16;
    flags[0][1] = 0;
    flags[0][2] = 0;
    flags[1][0] = 0;
    flags[1][1] = 1 << 16;
    flags[1][2] = 0;
    flags[2][0] = 0;
    flags[2][1] = 0;
    flags[2][2] = 1 << 16;
    int expectedCount = 3;
    int actualCount = SegmentUtils.countBit16(flags);
    assertEquals(expectedCount, actualCount);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_2_bltJ1() {
        int[] flags = {0, 0, 0, 0, 0, 0, 0, 0};
        assertEquals(0, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs1_RdAY0() {
    assertEquals(0, SegmentUtils.countArgs("()V", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs2_xUTf1() {
    assertEquals(1, SegmentUtils.countArgs("(I)V", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs3_ewLC2() {
    assertEquals(2, SegmentUtils.countArgs("(II)V", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs4_KVlT3() {
    assertEquals(1, SegmentUtils.countArgs("(I)J", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs5_jUaj4() {
    assertEquals(2, SegmentUtils.countArgs("(II)J", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs6_YMCA5() {
    assertEquals(1, SegmentUtils.countArgs("(I)D", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs7_qPxa6() {
    assertEquals(2, SegmentUtils.countArgs("(II)D", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs8_BljK7() {
    assertEquals(1, SegmentUtils.countArgs("(I)F", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs9_nzzR8() {
    assertEquals(2, SegmentUtils.countArgs("(II)F", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs10_SLAV9() {
    assertEquals(1, SegmentUtils.countArgs("(I)Lcom/example/Class;", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs11_mOFl10() {
    assertEquals(2, SegmentUtils.countArgs("(II)Lcom/example/Class;", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs12_ewrP11() {
    assertEquals(1, SegmentUtils.countArgs("(I)[I", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs13_zDgQ12() {
    assertEquals(2, SegmentUtils.countArgs("(II)[I", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCountArgs14_Tkim13() {
    assertEquals(1, SegmentUtils.countArgs("(I)[[I", 1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_8_fid1() {
        assertEquals(8, SegmentUtils.countArgs("(IIIIIIII)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_9_fid1() {
        assertEquals(9, SegmentUtils.countArgs("(IIIIIIIII)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_10_fid1() {
        assertEquals(10, SegmentUtils.countArgs("(IIIIIIIIII)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_yxWO0_11_fid1() {
        assertEquals(12, SegmentUtils.countArgs("(IIIIIIIIIIII)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_8_yhTY0() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192};
        assertEquals(0, SegmentUtils.countBit16(flags));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_10_kdSm0() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4006, 8102, 16384, 32768};
        assertEquals(0, SegmentUtils.countBit16(flags));
    }
}