/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X0017_StrongEncryptionHeader_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_rDAa0() throws ZipException {
        X0017_StrongEncryptionHeader header = new X0017_StrongEncryptionHeader();
        byte[] data = new byte[100]; // Replace with actual data
        int offset = 0; // Replace with actual offset
        int length = data.length; // Replace with actual length
        header.parseFromCentralDirectoryData(data, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRecordCount_KhbO0() {
        X0017_StrongEncryptionHeader instance = new X0017_StrongEncryptionHeader();
        long expResult = 0L;
        long result = instance.getRecordCount();
        assertEquals(expResult, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testParseCentralDirectoryFormatWithInvalidData_nRkl2_fid1() {
		byte[] data = new byte[11];
		X0017_StrongEncryptionHeader header = new X0017_StrongEncryptionHeader();
		try {
			header.parseCentralDirectoryFormat(data, 0, data.length);
		} catch (ZipException e) {
			assertFalse(e.getMessage().contains("minimal"));
		}
	}
}