/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSet_vkMt0_1() {
        HashSet<String> set = new HashSet<>();
        set =Sets.newHashSet("a", "b", "c");
        set =Sets.newHashSet("a", "b", "a");
        set =Sets.newHashSet();
        assertEquals(set.size(), 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSet_vkMt0_3() {
        HashSet<String> set = new HashSet<>();
        set =Sets.newHashSet("a", "b", "c");
        set =Sets.newHashSet("a", "b", "a");
        set =Sets.newHashSet();
        assertFalse(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSet_vkMt0_4() {
        HashSet<String> set = new HashSet<>();
        set =Sets.newHashSet("a", "b", "c");
        set =Sets.newHashSet("a", "b", "a");
        set =Sets.newHashSet();
        assertFalse(set.contains("b"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSet_vkMt0_5() {
        HashSet<String> set = new HashSet<>();
        set =Sets.newHashSet("a", "b", "c");
        set =Sets.newHashSet("a", "b", "a");
        set =Sets.newHashSet();
        assertFalse(set.contains("c"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNull_HRiw1_1() {
        HashSet<String> set =Sets.newHashSet("a", null, "b");
        assertEquals(set.size(),3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNull_HRiw1_2() {
        HashSet<String> set =Sets.newHashSet("a", null, "b");
        assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNull_HRiw1_3() {
        HashSet<String> set =Sets.newHashSet("a", null, "b");
        assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNull_HRiw1_4() {
        HashSet<String> set =Sets.newHashSet("a", null, "b");
        assertTrue(set.contains("b"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEmptyArray_RKaJ2() {
        HashSet<String> set =Sets.newHashSet();
        assertEquals(set.size(), 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullVarargs_qGol5_1() {
        HashSet<String> set =Sets.newHashSet((String) null);
        assertEquals(set.size(), 1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullVarargs_qGol5_2() {
        HashSet<String> set =Sets.newHashSet((String) null);
        assertTrue(set.contains(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithVarargs_luVU6_1() {
        HashSet<String> set =Sets.newHashSet("a", "b", "c");
        assertEquals(set.size(), 3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithVarargs_luVU6_2() {
        HashSet<String> set =Sets.newHashSet("a", "b", "c");
        assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithVarargs_luVU6_3() {
        HashSet<String> set =Sets.newHashSet("a", "b", "c");
        assertTrue(set.contains("b"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithVarargs_luVU6_4() {
        HashSet<String> set =Sets.newHashSet("a", "b", "c");
        assertTrue(set.contains("c"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithVarargsAndDuplicates_LyVt8_1() {
        HashSet<String> set =Sets.newHashSet("a", "b", "a");
        assertEquals(set.size(), 2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithVarargsAndDuplicates_LyVt8_2() {
        HashSet<String> set =Sets.newHashSet("a", "b", "a");
        assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithVarargsAndDuplicates_LyVt8_3() {
        HashSet<String> set =Sets.newHashSet("a", "b", "a");
        assertTrue(set.contains("b"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSet_vkMt0() {
        HashSet<String> set = new HashSet<>();
        assertEquals(set.size(), 0);
        set =Sets.newHashSet("a", "b", "c");
        assertEquals(set.size(), 3);
        assertTrue(set.contains("a"));
        assertTrue(set.contains("b"));
        assertTrue(set.contains("c"));
        set =Sets.newHashSet("a", "b", "a");
        assertEquals(set.size(), 2);
        assertTrue(set.contains("a"));
        assertTrue(set.contains("b"));
        set =Sets.newHashSet();
        assertEquals(set.size(), 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullVarargs_qGol5() {
        HashSet<String> set =Sets.newHashSet((String) null);
        assertEquals(set.size(), 1);
        assertTrue(set.contains(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithVarargs_luVU6() {
        HashSet<String> set =Sets.newHashSet("a", "b", "c");
        assertEquals(set.size(), 3);
        assertTrue(set.contains("a"));
        assertTrue(set.contains("b"));
        assertTrue(set.contains("c"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithVarargsAndDuplicates_LyVt8() {
        HashSet<String> set =Sets.newHashSet("a", "b", "a");
        assertEquals(set.size(), 2);
        assertTrue(set.contains("a"));
        assertTrue(set.contains("b"));
    }
}