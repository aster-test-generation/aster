/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian_Jzbp0() {
        byte[] b = new byte[8];
        ByteUtils.toLittleEndian(b, 1234567890123456789L, 0, 8);
        assert Arrays.equals(b, new byte[]{90, 113, -2, -61, 85, -106, 85, 59});
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian2_oslX1() {
        byte[] b = new byte[8];
        ByteUtils.toLittleEndian(b, 1234567890123456789L, 0, 4);
        assert Arrays.equals(b, new byte[]{90, 113, -2, -61});
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromLittleEndian_Kzdo0() {
        byte[] bytes = {0, 0, 0, 0, 0, 0, 0, 1};
        long result = ByteUtils.fromLittleEndian(bytes, 0, 8);
        assertEquals(1L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromLittleEndian2_AyUr1_fid2() {
        byte[] bytes = {1, 0, 0, 0, 0, 0, 0, 0};
        long result = ByteUtils.fromLittleEndian(bytes, 0, 8);
        assertEquals(256L, result);
    }
}