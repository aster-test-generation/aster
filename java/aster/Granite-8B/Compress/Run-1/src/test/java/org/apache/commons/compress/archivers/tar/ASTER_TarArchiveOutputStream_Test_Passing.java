/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRecordSize_HgXi0() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(null);
        int recordSize = tarArchiveOutputStream.getRecordSize();
        assertEquals(512, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setMode(final int mode) {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWritten_akaW0() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out);
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWrittenWithBlockSize_MNUg1() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024);
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWrittenWithEncoding_ipoY2() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, "UTF-8");
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWrittenWithBlockSizeAndEncoding_gaYN4() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024, "UTF-8");
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
}