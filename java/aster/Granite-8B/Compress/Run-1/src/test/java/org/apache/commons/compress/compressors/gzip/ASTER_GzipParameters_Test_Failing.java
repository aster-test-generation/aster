/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipParameters_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetFileName_BneU0() {
    GzipParameters gzipParameters = new GzipParameters();
    String fileName = gzipParameters.getFileName();
    assertEquals("fileName", fileName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFilename_THXk0() {
        GzipParameters gzipParameters = new GzipParameters();
        String expected = "expected_file_name"; // Replace with expected file name
        String actual = gzipParameters.getFilename();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOperatingSystem_IKRf0() {
        GzipParameters gzipParameters = new GzipParameters();
        int result = gzipParameters.getOperatingSystem();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOperatingSystemToNegativeValue_aUWL4() {
        GzipParameters gzipParameters = new GzipParameters();
        gzipParameters.setOperatingSystem(-1);
        assertEquals(0, gzipParameters.getOperatingSystem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressionLevelWithNegativeLevel_fkIM2() {
        GzipParameters gzipParameters = new GzipParameters();
        Exception exception = null;
        try {
            gzipParameters.setCompressionLevel(-1);
        } catch (IllegalArgumentException e) {
            exception = e;
        }
        assertNotNull(exception);
        assertTrue(exception.getMessage().contains("Invalid gzip compression level: -1"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetComment_ctXm0() {
        GzipParameters gzipParameters = new GzipParameters();
        String comment = gzipParameters.getComment();
        assertNotNull(comment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFilename_THXk0_fid1() {
        GzipParameters gzipParameters = new GzipParameters();
        String expected = "expected_file_name"; // Replace with expected file name
        String actual = gzipParameters.getFilename();
    assertNull(expected);
    }
}