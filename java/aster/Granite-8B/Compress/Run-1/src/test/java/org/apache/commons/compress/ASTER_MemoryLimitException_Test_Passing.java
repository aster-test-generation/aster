/**
 * Generated by Aster
 */
package org.apache.commons.compress;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MemoryLimitException_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMemoryLimitInKb_zRwN0() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(1024, 2048);
        assertEquals(2048, memoryLimitException.getMemoryLimitInKb());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMemoryLimitInKbWithException_tgho1() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(1024, 2048, new Exception());
        assertEquals(2048, memoryLimitException.getMemoryLimitInKb());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMemoryNeededInKb_QOJb0() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(1024, 2048);
        long memoryNeededInKb = memoryLimitException.getMemoryNeededInKb();
        assertEquals(1024, memoryNeededInKb);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMemoryNeededInKbWithException_TFxD1() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(1024, 2048, new Exception());
        long memoryNeededInKb = memoryLimitException.getMemoryNeededInKb();
        assertEquals(1024, memoryNeededInKb);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMemoryNeededInKbWithNegativeMemoryNeededInKb_ubXl2() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(-1024, 2048);
        long memoryNeededInKb = memoryLimitException.getMemoryNeededInKb();
        assertEquals(-1024, memoryNeededInKb);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMemoryNeededInKbWithZeroMemoryNeededInKb_oOJW3() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(0, 2048);
        long memoryNeededInKb = memoryLimitException.getMemoryNeededInKb();
        assertEquals(0, memoryNeededInKb);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMemoryNeededInKbWithZeroMemoryLimitInKb_LVAb4() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(1024, 0);
        long memoryNeededInKb = memoryLimitException.getMemoryNeededInKb();
        assertEquals(1024, memoryNeededInKb);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMemoryNeededInKbWithNegativeMemoryLimitInKb_fGEt5() {
        MemoryLimitException memoryLimitException = new MemoryLimitException(1024, -2048);
        long memoryNeededInKb = memoryLimitException.getMemoryNeededInKb();
        assertEquals(1024, memoryNeededInKb);
    }
}