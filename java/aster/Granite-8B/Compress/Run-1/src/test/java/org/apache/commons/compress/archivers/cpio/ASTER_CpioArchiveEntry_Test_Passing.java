/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime3_ELAM2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTime8_CCqB7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        long time = entry.getTime();
        assertEquals(0L, time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName3_NfkV2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName8_ItPL7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsNetwork3_GELm2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertFalse(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsNetwork8_sCrY7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertFalse(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentFormat_loxk6() {
		CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1);
		CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 2);
		boolean result = entry1.equals(entry2);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin3_qHfJ2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        long result = entry.getRemoteDeviceMin();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin8_JmpH7() {
        String name = "name";
        long size = 0L;
        CpioArchiveEntry entry = new CpioArchiveEntry(name, size);
        long result = entry.getRemoteDeviceMin();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink3_SfwB2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink8_nSbY7() {
        String name = "name";
        long size = 0L;
        CpioArchiveEntry entry = new CpioArchiveEntry(name, size);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID3_VAlU2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUID8_Zgeu7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 10L);
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_with_format_as_short_FvsG0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_with_format_as_String_HoKY1() {
        CpioArchiveEntry entry = new CpioArchiveEntry("1");
        assertEquals((short) 1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_with_name_as_String_PLyd2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals((short)1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_with_size_as_long_RASN3() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 100L);
        assertEquals((short)1, entry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode3_Webg2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        long inode = entry.getInode();
        assertEquals(0, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode8_tlyu7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        long inode = entry.getInode();
        assertEquals(0, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getDataPadCount_withNonZeroFormat_returnsNonZeroValue_Bfcx1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertFalse(entry.getDataPadCount() > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMajWithNullEntry_wmyE2() {
        CpioArchiveEntry entry = null;
        try {
            entry.setDeviceMaj(1L);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID3_wdDW2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGID8_LqQM7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize3_pkLN2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 30L);
        assertEquals(30L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_mqXT2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        long numberOfLinks = entry.getNumberOfLinks();
        assertEquals(1, numberOfLinks);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_JiPm7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 10L);
        long numberOfLinks = entry.getNumberOfLinks();
        assertEquals(1, numberOfLinks);
    }
}