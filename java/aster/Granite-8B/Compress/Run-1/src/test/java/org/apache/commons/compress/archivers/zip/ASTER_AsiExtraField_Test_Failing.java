/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AsiExtraField_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_vfpm0() throws ZipException {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] data = new byte[10];
        int offset = 0;
        int length = 10;
        asiExtraField.parseFromLocalFileData(data, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_lgKR0() throws ZipException {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] buffer = new byte[100]; // Replace with actual buffer
        int offset = 0; // Replace with actual offset
        int length = buffer.length; // Replace with actual length
        asiExtraField.parseFromCentralDirectoryData(buffer, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithNull_MtaD2() {
        AsiExtraField asiExtraField = null;
        try {
            asiExtraField.clone();
        } catch (UnsupportedOperationException e) {
            assert true;
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLinkedFile_xvih0_fid1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        String expected = "link";
        String actual = asiExtraField.getLinkedFile();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_1_EJrN0_fid1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        int mode = 0;
        int expected = 1;
        int actual = asiExtraField.getMode(mode);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_2_ZlDG1_fid1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        int mode = 1;
        int expected = 1;
        int actual = asiExtraField.getMode(mode);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_3_JBTF2_fid1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        int mode = 2;
        int expected = 2;
        int actual = asiExtraField.getMode(mode);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_SeGk0_fid1() {
        AsiExtraField asiExtraField = new AsiExtraField();
        ZipShort localFileDataLength = asiExtraField.getLocalFileDataLength();
        assertEquals(20, localFileDataLength.getValue());
    }
}