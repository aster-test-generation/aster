/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ParsingUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongValueWithRadix_ECzI1_Gbtm0_1() throws IOException {
        assertEquals(10, ParsingUtils.parseLongValue("10", 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseIntValueWithRadix16_xpqc1_ZwGm0() {
        int radix = 16;
        String value = "0xFF";
        int expected = 255;
        int actual = 0;
        try {
            actual = ParsingUtils.parseIntValue(value, radix);
        } catch (IOException e) {
            e.printStackTrace();
        }
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseIntValueWithRadix2_BFAE3_xmKC0() {
        int radix = 2;
        String value = "110010";
        int expected = 202;
        try {
            int actual = ParsingUtils.parseIntValue(value, radix);
            assertEquals(expected, actual);
        } catch (IOException e) {
            fail("IOException should not be thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseIntValueWithInvalidRadix_uwdw4_eiPU0() {
        int radix = 37;
        String value = "123";
        try {
            ParsingUtils.parseIntValue(value, radix);
            fail("Expected NumberFormatException");
        } catch (NumberFormatException e) {
            assertTrue(e.getMessage().contains("Unable to parse int from string value: 123"));
        } catch (IOException e) {
            fail("Unexpected IOException");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseIntValueWithInvalidValue_wHcH5_tfMo0() {
        int radix = 10;
        String value = "abc";
        try {
            ParsingUtils.parseIntValue(value, radix);
            fail("Expected NumberFormatException");
        } catch (NumberFormatException e) {
            assertTrue(e.getMessage().contains("Unable to parse int from string value: abc"));
        } catch (IOException e) {
            fail("Unexpected IOException");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseLongValueWithRadix_ECzI1_Gbtm0_1_fid2() throws IOException {
        assertEquals(2, ParsingUtils.parseLongValue("2", 2));}
}