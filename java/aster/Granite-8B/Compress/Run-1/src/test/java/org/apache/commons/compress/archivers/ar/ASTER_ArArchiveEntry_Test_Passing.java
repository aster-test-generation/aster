/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.io.IOException;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory_XAOl0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        boolean isDirectory = entry.isDirectory();
        assertFalse(isDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithUserId_VjFC2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 100, 200, 300, 400L);
        boolean isDirectory = entry.isDirectory();
        assertFalse(isDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithFile_pZhY3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("inputFile"), "entryName");
        boolean isDirectory = entry.isDirectory();
        assertFalse(isDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_czlc0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100L);
        Date lastModified = entry.getLastModifiedDate();
        assertNotNull(lastModified);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithNull_dwdx0() {
		ArArchiveEntry entry = new ArArchiveEntry("name", 100L);
		boolean result = entry.equals(null);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentClass_oMjM1() {
		ArArchiveEntry entry = new ArArchiveEntry("name", 100L);
		boolean result = entry.equals(new Object());
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameObject_fRjv2() {
		ArArchiveEntry entry = new ArArchiveEntry("name", 100L);
		boolean result = entry.equals(entry);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameName_ihQh3() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name", 100L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name", 100L);
		boolean result = entry1.equals(entry2);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentName_DvPD4() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name1", 100L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name2", 100L);
		boolean result = entry1.equals(entry2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_xWaT0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithUserIdGroupIdMode_qbiw2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 1, 2, 3, 4L);
        assertEquals(2, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithFile_UpnT3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "entryName");
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_khZl0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        assertEquals(10L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithUserId_gPsI2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 100, 200, 300, 400L);
        assertEquals(10L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_odUw0() {
        ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithUserId_CCNb2() {
        ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1000, 1001, 1002, 1003L);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithFile_qZbj3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("test.txt"), "test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithEmptyName_OiDk5() {
        ArArchiveEntry entry = new ArArchiveEntry("", 100);
        assertEquals("", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArArchiveEntryGetLength_JAHT0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        assertEquals(10L, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArArchiveEntryGetLengthWithUserId_kTNd2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 100, 101, 102, 103L);
        assertEquals(10L, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_with_name_length_userId_groupId_mode_lastModified_JjhA2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 100, 200, 300, 400L);
        assertEquals(300, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedWithUserId_mLoD2() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 123L, 123, 456, 789, 1000L);
    assertEquals(1000L, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentLength_iBIt5_fid1() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name", 100L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name", 200L);
		boolean result = entry1.equals(entry2);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentUserId_UuuR6_fid1() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name", 100L, 100, 200, 300, 400L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name", 100L, 200, 200, 300, 400L);
		boolean result = entry1.equals(entry2);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentGroupId_JFLP7_fid1() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name", 100L, 100, 200, 300, 400L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name", 100L, 100, 300, 300, 400L);
		boolean result = entry1.equals(entry2);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentMode_ARMq8_fid1() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name", 100L, 100, 200, 300, 400L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name", 100L, 100, 200, 400, 400L);
		boolean result = entry1.equals(entry2);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentLastModified_NAcI9_fid1() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name", 100L, 100, 200, 300, 400L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name", 100L, 100, 200, 300, 500L);
		boolean result = entry1.equals(entry2);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithFile_DLZx3_fid1() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input.txt"), "entryName");
        assertEquals(0L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_IrUb0_fid1() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 123L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithUserId_pFQi2_fid1() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 123L, 123, 456, 789, 1000L);
    assertEquals(3373738, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithFile_sLXg3_fid1() throws IOException {
    File file = new File("path/to/file");
    ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
    assertEquals(-479564228, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullName_BbKP4_fid1() {
        ArArchiveEntry entry = new ArArchiveEntry(null, 100);
    assertNull(entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArArchiveEntryGetLengthWithFile_erKZ3_fid1() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input.txt"), "entryName");
        assertEquals(0L, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_with_name_length_CzIC33188() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 133188L);
        assertEquals(33188, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_with_inputFile_entryName_emBz3_fid1() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input"), "entryName");
        assertEquals(33188, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedWithFile_bLab3_fid1() throws IOException {
    File file = new File("file");
    ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
}
}