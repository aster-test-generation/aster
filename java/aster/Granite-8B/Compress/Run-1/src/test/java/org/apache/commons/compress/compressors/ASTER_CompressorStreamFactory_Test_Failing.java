/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.io.InputStream;
import java.util.Set;
import java.util.SortedMap;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Set;
import java.util.SortedMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCompressorInputStreamProviders1_XVqw0_1() throws Exception {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> result = compressorStreamFactory.getCompressorInputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCompressorInputStreamProviders1_XVqw0_2() throws Exception {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> result = compressorStreamFactory.getCompressorInputStreamProviders();
    assertEquals(1, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCompressorInputStreamProviders2_hBqK1_1() throws Exception {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 100);
    SortedMap<String, CompressorStreamProvider> result = compressorStreamFactory.getCompressorInputStreamProviders();
    assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCompressorInputStreamProviders2_hBqK1_2() throws Exception {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 100);
    SortedMap<String, CompressorStreamProvider> result = compressorStreamFactory.getCompressorInputStreamProviders();
    assertEquals(1, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableCompressorOutputStreamProviders_DGRd0() {
        SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorOutputStreamProviders();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFalseDecompressUntilEOF_sZtw1_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFalseDecompressUntilEOF_sZtw1_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertTrue(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrueDecompressUntilEOF_XRGZ2_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrueDecompressUntilEOF_XRGZ2_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZeroMemoryLimitInKb_hYPX4_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 0);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZeroMemoryLimitInKb_hYPX4_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 0);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositiveMemoryLimitInKb_EeAP5_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositiveMemoryLimitInKb_EeAP5_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertFalse(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNegativeMemoryLimitInKb_KTKC6_1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, -1024);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNegativeMemoryLimitInKb_KTKC6_2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, -1024);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertTrue(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStream_Tcvv0() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        InputStream in = null;
        Set<String> compressorNames = null;
        CompressorInputStream result = factory.createCompressorInputStream(in, compressorNames);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStreamWithMemoryLimit_LaYE1() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        InputStream in = null;
        Set<String> compressorNames = null;
        CompressorInputStream result = factory.createCompressorInputStream(in, compressorNames);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateCompressorInputStreamWithDecompressUntilEOF_lBqF2() throws CompressorException {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        InputStream in = null;
        Set<String> compressorNames = null;
        CompressorInputStream result = factory.createCompressorInputStream(in, compressorNames);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressUntilEOFWithNoParams_bUAc2() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Boolean result = factory.getDecompressUntilEOF();
    assertNull(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableCompressorInputStreamProviders_egzi0_1() {
        SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableCompressorInputStreamProviders_egzi0_2() {
        SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
        assertTrue(result.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetZstandard_eQUC0_fid2() {
        assertEquals("ZSTANDARD", CompressorStreamFactory.getZstandard());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBzip2_kjcz0_fid2() {
        String bzip2 = CompressorStreamFactory.getBzip2();
        assertEquals("BZIP2", bzip2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetZ_gYxT0() {
        assertEquals("Z", CompressorStreamFactory.getZ());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLZ4Framed_pmZF0_fid2() {
        assertEquals("LZ4_FRAMED", CompressorStreamFactory.getLZ4Framed());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGzip_VLor0_fid2() {
        String result = CompressorStreamFactory.getGzip();
        assertEquals("gzip", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzma_IFEv0_fid2() {
        assertEquals("LZMA", CompressorStreamFactory.getLzma());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testgetSnappyRaw_OXPH0_fid2() {
		assertEquals("SNAPPY_RAW", CompressorStreamFactory.getSnappyRaw());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressUntilEOFWithNoParams_bUAc2_fid2() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Boolean result = factory.getDecompressUntilEOF();
        assertEquals(false, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetPack200_Wwaz0_fid2() {
        String expected = "PACK200";
        String actual = CompressorStreamFactory.getPack200();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLZ4Block_slHr0_fid2() {
        assertEquals("LZ4_BLOCK", CompressorStreamFactory.getLZ4Block());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetDeflate_pban0_fid2() {
        assertEquals("DEFLATE", CompressorStreamFactory.getDeflate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetDeflate64_WnXW0_fid2() {
        String expected = "eJyt01uwjAUheHvZwm5";
        String actual = CompressorStreamFactory.getDeflate64();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetBrotli_XAyR0_fid2() {
        assertEquals("BROTLI", CompressorStreamFactory.getBrotli());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetBrotliWithDecompressUntilEOF_UzaC2_fid2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        assertEquals("BROTLI", factory.getBrotli());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetBrotliWithMemoryLimit_BLwv3_fid2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        assertEquals("BROTLI", factory.getBrotli());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetXz_LtUT0_fid2() {
		CompressorStreamFactory factory = new CompressorStreamFactory();
		String actualXz = factory.getXz();
		String expectedXz = "XZ";
		assertEquals(expectedXz, actualXz);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetXz_ocmP1_fid2() {
		CompressorStreamFactory factory = new CompressorStreamFactory(true);
		String actualXz = factory.getXz();
		String expectedXz = "XZ";
		assertEquals(expectedXz, actualXz);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetXz_ksAa2_fid2() {
		CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
		String actualXz = factory.getXz();
		String expectedXz = "XZ";
		assertEquals(expectedXz, actualXz);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCompressorInputStreamProviders1_XVqw0() throws Exception {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
    SortedMap<String, CompressorStreamProvider> result = compressorStreamFactory.getCompressorInputStreamProviders();
    assertNotNull(result);
    assertEquals(1, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetCompressorInputStreamProviders2_hBqK1() throws Exception {
    CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 100);
    SortedMap<String, CompressorStreamProvider> result = compressorStreamFactory.getCompressorInputStreamProviders();
    assertNotNull(result);
    assertEquals(1, result.size());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFalseDecompressUntilEOF_sZtw1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);
        assertTrue(providers.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrueDecompressUntilEOF_XRGZ2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);
        assertFalse(providers.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZeroMemoryLimitInKb_hYPX4() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 0);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);
        assertFalse(providers.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositiveMemoryLimitInKb_EeAP5() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);
        assertFalse(providers.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNegativeMemoryLimitInKb_KTKC6() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, -1024);
        SortedMap<String, CompressorStreamProvider> providers = factory.getCompressorOutputStreamProviders();
        assertNotNull(providers);
        assertTrue(providers.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableCompressorInputStreamProviders_egzi0() {
        SortedMap<String, CompressorStreamProvider> result = CompressorStreamFactory.findAvailableCompressorInputStreamProviders();
        assertNotNull(result);
        assertTrue(result.size() > 0);
    }
}