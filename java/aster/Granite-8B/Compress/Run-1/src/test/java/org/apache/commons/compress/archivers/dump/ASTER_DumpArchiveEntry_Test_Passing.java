/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_jNBN0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOffset2_SSRG1() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        long offset = dumpArchiveEntry.getOffset();
        assertEquals(0, offset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_tLpF0() {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        boolean result = entry.equals(null);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_KbaA1() {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        boolean result = entry.equals(new Object());
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_oLbi2() {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        boolean result = entry.equals(entry);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getGeneration_2_bRCJ1() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, dumpArchiveEntry.getGeneration());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSimpleName_dJBj0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals("simpleName", entry.getSimpleName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getOriginalName_Avpc0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName");
        String originalName = dumpArchiveEntry.getOriginalName();
        assertEquals("name", originalName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParse_qtKq0() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffset_iYaS1() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.getOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_SqFe3() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertNotNull(entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGeneration_aHNe4() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.getGeneration());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIno_Vuya5() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.getIno());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNlink_sQLd7() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.getNlink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_WbSd8() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_LNFi9() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPermissions_kSoZ10() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertNotNull(entry.getPermissions());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUserId_YguT11() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.getUserId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_yUNH12() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderCount_ygWo13() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.getHeaderCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderHoles_YiLN16() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.getHeaderHoles());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreationTime_tdVL17() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertNotNull(entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_gwou18() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVolume_NtUL19() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertEquals(0, entry.getVolume());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVolume2_iVFU1() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName");
        assertEquals(0, entry.getVolume());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVolume3_PoWD2() {
        DumpArchiveEntry entry = new DumpArchiveEntry();
        assertEquals(0, entry.getVolume());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOffset_JQxD0_Emym0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        long offset = dumpArchiveEntry.getOffset();
        assertEquals(0, offset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode_uxUt0_VMVC0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        entry.setMode(0644);
        assert entry.getMode() == 0644;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeLink_cElu3_TqSK0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.LINK);
        entry.setMode(0644);
        assert entry.getMode() == 0644;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentIno_fXxu4_Srpk0() {
        DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName", 2, DumpArchiveEntry.TYPE.FILE);
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOffsetWithNegativeOffset_cXmZ1_vejJ0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        entry.setOffset(-100L);
        assertEquals(-100L, entry.getOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOffsetWithMaximumOffset_VhgM3_glMG0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        entry.setOffset(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOffsetWithMinimumOffset_zlKA4_lxYf0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        entry.setOffset(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSparseRecord_hUTk0_vjpI0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        boolean isSparse = dumpArchiveEntry.isSparseRecord(0);
        assertTrue(isSparse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTime_uKWD0_lMTe0_1() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FILE);
        Date accessTime = entry.getAccessTime();
        assertNotNull(accessTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTime_uKWD0_lMTe0_2() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 123, DumpArchiveEntry.TYPE.FILE);
        Date accessTime = entry.getAccessTime();
        assertTrue(accessTime.before(new Date()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentType_CACP6_HZWg0_fid2() {
        DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.DIRECTORY);
        boolean result = entry1.equals(entry2);
        assertTrue(result);
    }
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNlinkWhiteout_HgZH1_lwee0_fid2() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName",0, DumpArchiveEntry.TYPE.WHITEOUT);
        int nlink = dumpArchiveEntry.getNlink();
        assertEquals(1, nlink);
    }
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNlinkSocket_aOJb2_Kwss0_fid2() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName",0, DumpArchiveEntry.TYPE.SOCKET);
        int nlink = dumpArchiveEntry.getNlink();
        assertEquals(1, nlink);
    }
@Test
@Timeout(value =0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNlinkUnknown_PUQH7_USiH0_fid2() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName",0, DumpArchiveEntry.TYPE.UNKNOWN);
        int nlink = dumpArchiveEntry.getNlink();
        assertEquals(1, nlink);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSparseRecordWithIdxGreaterThanZero_Biil1_Nqfx0_fid2() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        boolean isSparse = dumpArchiveEntry.isSparseRecord(1);
        assertTrue(isSparse);
    }
}