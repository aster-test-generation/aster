/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AES256SHA256Decoder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSha256PasswordWithNullSalt_wTSv3_1() {
        char[] password = "password".toCharArray();
        int numCyclesPower = 1000;
        Throwable exception = assertThrows(NullPointerException.class,
                () -> AES256SHA256Decoder.sha256Password(password, numCyclesPower, null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSha256PasswordWithInvalidSaltLength_YrzK4_1() {
        char[] password = "password".toCharArray();
        int numCyclesPower = 1000;
        byte[] salt = new byte[15];
        Throwable exception = assertThrows(IllegalArgumentException.class,
                () -> AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testUtf16DecodeNull_Qkxc0() {
        assertDoesNotThrow(() -> AES256SHA256Decoder.utf16Decode(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testUtf16DecodeEmpty_uTam1() {
        assertEquals(0, AES256SHA256Decoder.utf16Decode(new char[0]).length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testUtf16DecodeWithInvalidCodePoint2_TYJv9() {
        final char[] chars = new char[1024];
        for (int i = 0; i < 1024; i++) {
            chars[i] = (char) (0x110000 + i);
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSha256PasswordWithInvalidSaltLength_YrzK4() {
        char[] password = "password".toCharArray();
        int numCyclesPower = 1000;
        byte[] salt = new byte[15];
        Throwable exception = assertThrows(IllegalArgumentException.class,
                () -> AES256SHA256Decoder.sha256Password(password, numCyclesPower, salt));
        assertTrue(exception.getMessage().contains("salt"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void write(int b) throws IOException {
                throw new IOException("Error writing to stream");
            }
}