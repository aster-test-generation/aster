/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseBoolean_RvSK0() {
        byte[] buffer = new byte[1];
        buffer[0] = 1;
        boolean result = TarUtils.parseBoolean(buffer, 0);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseBooleanFalse_jcdY1() {
        byte[] buffer = new byte[1];
        buffer[0] = 0;
        boolean result = TarUtils.parseBoolean(buffer, 0);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSparse_ljTi0_1() {
        byte[] buffer = new byte[100]; // Assuming buffer size is 100
        int offset = 0; // Assuming offset is 0
        TarArchiveStructSparse result = TarUtils.parseSparse(buffer, offset);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseSparse_ljTi0() {
        byte[] buffer = new byte[100]; // Assuming buffer size is 100
        int offset = 0; // Assuming offset is 0
        TarArchiveStructSparse result = TarUtils.parseSparse(buffer, offset);
        assertNotNull(result);
        assertEquals(0, result.getOffset()); // Assuming default value of getOffset() is 0
        assertEquals(0, result.getNumbytes()); // Assuming default value of getNumbytes() is 0
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatNameBytes_uFNo0() {
        final String name = "test";
        final byte[] buf = new byte[10];
        final int offset = 0;
        final int length = 4;
        final int expected = 4;
        final int actual = TarUtils.formatNameBytes(name, buf, offset, length);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseOctalOrBinary_Binary_Negative_ePfL2() {
    byte[] buffer = {(byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff};
    int offset = 0;
    int length = 9;
    long expected = -1;
    long actual = TarUtils.parseOctalOrBinary(buffer, offset, length);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeCheckSum_wLjx0() {
        byte[] buf = {1, 2, 3, 4, 5};
        long expectedSum = 15;
        long actualSum = TarUtils.computeCheckSum(buf);
        assertEquals(expectedSum, actualSum);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeCheckSumWithEmptyBuffer_fCNW1() {
        byte[] buf = {};
        long expectedSum = 0;
        long actualSum = TarUtils.computeCheckSum(buf);
        assertEquals(expectedSum, actualSum);
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromPAX01SparseHeaders_sqtY0() throws IOException {
        final String sparseMap = "100,200,300,400";
        final List<TarArchiveStructSparse> expectedSparseHeaders = new ArrayList<>();
        expectedSparseHeaders.add(new TarArchiveStructSparse(100, 200));
        expectedSparseHeaders.add(new TarArchiveStructSparse(300, 400));
        final List<TarArchiveStructSparse> actualSparseHeaders = TarUtils.parseFromPAX01SparseHeaders(sparseMap);
        assertEquals(expectedSparseHeaders, actualSparseHeaders);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromPAX01SparseHeadersWithInvalidInput_TXoz1() {
        final String sparseMap = "100,200,300";
        try {
            TarUtils.parseFromPAX01SparseHeaders(sparseMap);
            fail("Expected IOException");
        } catch (final IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromPAX01SparseHeadersWithNegativeOffset_BilU2() {
        final String sparseMap = "-100,200";
        try {
            TarUtils.parseFromPAX01SparseHeaders(sparseMap);
            fail("Expected IOException");
        } catch (final IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromPAX01SparseHeadersWithNegativeNumbytes_Inrd3() {
        final String sparseMap = "100,-200";
        try {
            TarUtils.parseFromPAX01SparseHeaders(sparseMap);
            fail("Expected IOException");
        } catch (final IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromPAX01SparseHeadersWithEmptyInput_NkxS4() {
        final String sparseMap = "";
        try {
            TarUtils.parseFromPAX01SparseHeaders(sparseMap);
            fail("Expected IOException");
        } catch (final IOException e) {
        }
    }
}