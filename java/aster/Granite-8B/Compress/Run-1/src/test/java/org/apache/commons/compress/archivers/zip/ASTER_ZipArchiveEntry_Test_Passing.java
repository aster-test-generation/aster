/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.nio.file.attribute.FileTime;
import java.util.Arrays;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequired3_PrvC3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("");
        int versionRequired = zipArchiveEntry.getVersionRequired();
        assertEquals(0, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVersionRequired4_svpO4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File(""), "");
        int versionRequired = zipArchiveEntry.getVersionRequired();
        assertEquals(0, versionRequired);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternalAttributes_TAot0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        long externalAttributes = entry.getExternalAttributes();
        assertEquals(0, externalAttributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_DVnP0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        boolean result = entry.equals(null);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_HJKW1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        boolean result = entry.equals(new Object());
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_tyNi2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        boolean result = entry.equals(entry);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameName_Xsll4() {
        ZipArchiveEntry entry1 = new ZipArchiveEntry();
        ZipArchiveEntry entry2 = new ZipArchiveEntry();
        entry1.setName("name");
        entry2.setName("name");
        boolean result = entry1.equals(entry2);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_Dpqf5() {
        ZipArchiveEntry entry1 = new ZipArchiveEntry();
        ZipArchiveEntry entry2 = new ZipArchiveEntry();
        entry1.setName("name1");
        entry2.setName("name2");
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_rNvT0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("input.zip"), "entryName");
        Date lastModifiedDate = zipArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRawFlag4_vhCJ3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("");
        int rawFlag = zipArchiveEntry.getRawFlag();
        assertEquals(0, rawFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime_Gdez0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        entry.setCreationTime(time);
        assertEquals(time, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInternalAttributes_VhYl0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        int result = zipArchiveEntry.getInternalAttributes();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_GkIC0_2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    zipArchiveEntry.setCreationTime(FileTime.fromMillis(1L));
    assertEquals(1L, zipArchiveEntry.getCreationTime().toMillis());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithString_ycjU3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("");
        FileTime time = FileTime.fromMillis(0);
        entry.setCreationTime(time);
        assertEquals(time, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithFile_IxHb4() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File(""), "");
        FileTime time = FileTime.fromMillis(0);
        entry.setCreationTime(time);
        assertEquals(time, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_GJPJ0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime time = FileTime.fromMillis(0L);
    zipArchiveEntry.setCreationTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_lYBj0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    entry.setCreationTime(time);
    assertEquals(time, entry.getCreationTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime_xGCx0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime time = FileTime.fromMillis(0);
        entry.setCreationTime(time);
        assertEquals(time, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStart_aHUc0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDiskNumberStart(1L);
    assertEquals(1L, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStartWithNegativeNumber_KpVN1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDiskNumberStart(-1L);
    assertEquals(-1L, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStartWithZero_nnhr2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDiskNumberStart(0L);
    assertEquals(0L, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStartWithMaximumValue_gFFC3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDiskNumberStart(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetDiskNumberStartWithMinimumValue_Uybo4() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDiskNumberStart(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, zipArchiveEntry.getDiskNumberStart());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_yqUb0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setName("testName", new byte[10]);
        assertEquals("testName", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_EHRG0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_HOWh0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAlignment_dzhZ0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        int result = zipArchiveEntry.getAlignment();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_SgQv0() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("input.txt"), "entryName");
        entry.setExtra();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldsWithNullFields_XjKF0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setExtraFields(null);
        assertEquals(0, entry.getExtraFields().length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraFieldsWithEmptyFields_Qhcf1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setExtraFields(new ZipExtraField[0]);
        assertEquals(0, entry.getExtraFields().length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setDataOffsetTest_TSkv0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDataOffset(1L);
    assertEquals(1L, zipArchiveEntry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setDataOffsetTest1_HCyF1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDataOffset(0L);
    assertEquals(0L, zipArchiveEntry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setDataOffsetTest2_jZgm2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDataOffset(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, zipArchiveEntry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setDataOffsetTest3_XcJp3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDataOffset(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, zipArchiveEntry.getDataOffset());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void setDataOffsetTest17_oDjd17() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDataOffset(Long.MIN_VALUE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetName_Vnxq0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setName("test.txt");
    assertEquals("test.txt", entry.getName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithValidSize_okaD0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        entry.setSize(100);
        assertEquals(100, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithNegativeSize_UrpL1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        try {
            entry.setSize(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid entry size", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguous_hWVU0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        boolean result = entry.isStreamContiguous();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguousWithString_emXY3() {
        String name = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(name);
        boolean result = entry.isStreamContiguous();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStreamContiguousWithFile_dZvB4() {
        File inputFile = new File("file");
        String entryName = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(inputFile, entryName);
        boolean result = entry.isStreamContiguous();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_bmoB0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    assertEquals(entry.getName().hashCode(), entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithDifferentName_NwSW2() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("name1");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("name2");
    assertNotEquals(entry1.getName().hashCode(), entry2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithDifferentEntry_JRFk3() {
    ZipArchiveEntry entry1 = new ZipArchiveEntry("name1");
    ZipArchiveEntry entry2 = new ZipArchiveEntry("name2");
    assertNotEquals(entry1.hashCode(), entry2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExternalAttributes_wdez0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setExternalAttributes(0x12345678L);
        assertEquals(0x12345678L, entry.getExternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffset_gqBD0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setLocalHeaderOffset(10L);
        assertEquals(10L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithNegativeValue_GQuG1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setLocalHeaderOffset(-10L);
        assertEquals(-10L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithZeroValue_YZQh2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setLocalHeaderOffset(0L);
        assertEquals(0L, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithMaxValue_OSGR3() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setLocalHeaderOffset(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLocalHeaderOffsetWithMinValue_ZFBX4() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setLocalHeaderOffset(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getLocalHeaderOffset());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtra_diVP0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] b = new byte[10];
        entry.setCentralDirectoryExtra(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtra_PUMY0_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("input.txt"), "entryName");
        byte[] b = new byte[10];
        entry.setCentralDirectoryExtra(b);
        assertNotNull(entry.getCentralDirectoryExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_YmAX0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    byte[] b = new byte[10];
    entry.setCentralDirectoryExtra(b);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCentralDirectoryExtra_hWgK0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setCentralDirectoryExtra(new byte[10]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithEmptyArray_YvZz2_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] b = new byte[0];
        entry.setCentralDirectoryExtra(b);
        assertNotSame(b, entry.getCentralDirectoryExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithEmptyArray_YvZz2_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] b = new byte[0];
        entry.setCentralDirectoryExtra(b);
        assertTrue(Arrays.equals(b, entry.getCentralDirectoryExtra()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithLargeArray_oaXX3_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] b = new byte[10000];
        entry.setCentralDirectoryExtra(b);
        assertNotSame(b, entry.getCentralDirectoryExtra());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithLargeArray_oaXX3_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] b = new byte[10000];
        entry.setCentralDirectoryExtra(b);
        assertTrue(Arrays.equals(b, entry.getCentralDirectoryExtra()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGettingExtraFieldsWhenIncludeUnparseableIsTrue_RcCV0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        ZipExtraField[] extraFields = entry.getExtraFields(true);
        assertNotNull(extraFields);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGettingExtraFieldsWhenIncludeUnparseableIsFalse_ZRvd1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        ZipExtraField[] extraFields = entry.getExtraFields(false);
        assertNotNull(extraFields);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGettingExtraFieldsWhenIncludeUnparseableIsTrue_PiIw0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        ZipExtraField[] extraFields = entry.getExtraFields(true);
        assertNotNull(extraFields);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGettingExtraFieldsWhenIncludeUnparseableIsFalse_lMrL1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        ZipExtraField[] extraFields = entry.getExtraFields(false);
        assertNotNull(extraFields);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtraWithByteArray_oIzX0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] extra = new byte[10];
        entry.setExtra(extra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithIncludeUnparseableTrue_xcse0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithIncludeUnparseableFalse_uSOT1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithIncludeUnparseableTrue_TIsy0() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("input.zip"), "entryName");
        ZipExtraField[] extraFields = entry.getExtraFields(true);
        assertNotNull(extraFields);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFieldsWithIncludeUnparseableFalse_eOnM1() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("input.zip"), "entryName");
        ZipExtraField[] extraFields = entry.getExtraFields(false);
        assertNotNull(extraFields);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExtraFields4_sgtL3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("");
        zipArchiveEntry.getExtraFields(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExtraFields5_cQXM4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File(""), "");
        zipArchiveEntry.getExtraFields(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExtraFields6_kWKA5() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("");
        zipArchiveEntry.getExtraFields(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTime_entrySet_PAyx0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setLastModifiedTime(FileTime.fromMillis(123456789L));
        assertEquals(123456789L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_afVj0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1234567890L);
    zipArchiveEntry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_tvNv0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    FileTime fileTime = FileTime.fromMillis(0L);
    zipArchiveEntry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testZipShortInt_UrkM1() {
		ZipShort zipShort = new ZipShort(10);
		assertEquals(10, zipShort.getValue());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testZipShortByteArray_aJni2() {
		ZipShort zipShort = new ZipShort(new byte[10]);
		assertEquals(0, zipShort.getValue());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsObject_bpyB3() {
		ZipShort zipShort1 = new ZipShort(10);
		ZipShort zipShort2 = new ZipShort(10);
		assertEquals(true, zipShort1.equals(zipShort2));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPutShortIntByteArrayInt_nmzX4() {
		byte[] bytes = new byte[10];
		ZipShort.putShort(10, bytes, 5);
		assertEquals(10, bytes[5]);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBytes_XxKG7() {
		ZipShort zipShort = new ZipShort(10);
		byte[] bytes = zipShort.getBytes();
		assertEquals(2, bytes.length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetValueByteArray_DYks8() {
		byte[] bytes = new byte[10];
		assertEquals(0, ZipShort.getValue(bytes));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetValueByteArrayInt_NVsI9() {
		byte[] bytes = new byte[10];
		assertEquals(0, ZipShort.getValue(bytes, 5));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode_frLr10() {
		ZipShort zipShort1 = new ZipShort(10);
		ZipShort zipShort2 = new ZipShort(10);
		assertEquals(zipShort1.hashCode(), zipShort2.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBytesInt_yMUn11() {
		ZipShort zipShort = new ZipShort(10);
		byte[] bytes = zipShort.getBytes(5);
		assertEquals(2, bytes.length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testClone_JnmN13() throws CloneNotSupportedException {
		ZipShort zipShort = new ZipShort(10);
		ZipShort clone = (ZipShort) zipShort.clone();
		assertEquals(zipShort.getValue(), clone.getValue());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testZipArchiveEntry_ObhL16() {
		ZipArchiveEntry entry = new ZipArchiveEntry();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_DboG0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1234567890L);
    entry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_YzGR0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(0L);
    zipArchiveEntry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_YGsE0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastModifiedTime(fileTime);
    assertEquals(fileTime, entry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_cQyo0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setLastModifiedTime(FileTime.fromMillis(1234567890L));
    assertEquals(1234567890L, zipArchiveEntry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastModifiedTime_TWgY0() {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    entry.setLastModifiedTime(FileTime.fromMillis(1234567890L));
    assertEquals(1234567890L, entry.getLastModifiedTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTime_hMwR0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastModifiedTime(fileTime);
        assertEquals(fileTime, entry.getLastModifiedTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_pXFg0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    zipArchiveEntry.setLastAccessTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_pKub6_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime lastModifiedTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastModifiedTime(lastModifiedTime);
        entry.setExtra();
        assertNotNull(entry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_pKub6_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime lastModifiedTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastModifiedTime(lastModifiedTime);
        entry.setExtra();
        assertNotNull(entry.getExtraField(X000A_NTFS.HEADER_ID));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTime_LkzB0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime fileTime = FileTime.fromMillis(0L);
        entry.setLastModifiedTime(fileTime);
        assertEquals(fileTime, entry.getLastModifiedTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_IsIF0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    zipArchiveEntry.setLastAccessTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_eeHP0_1() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastAccessTime(fileTime);
    assertEquals(fileTime, entry.getLastAccessTime());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_eeHP0_4() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastAccessTime(fileTime);
    assertNotNull(entry.getExtraField(X000A_NTFS.HEADER_ID));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetLastAccessTime_eeHP0_5() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
    entry.setLastAccessTime(fileTime);
    assertNotNull(entry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithString_OWsY3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        FileTime fileTime = FileTime.fromMillis(1234567890L);
        entry.setLastAccessTime(fileTime);
        assertEquals(fileTime, entry.getLastAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithFile_GRyb4() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("input.zip"), "entryName");
        FileTime fileTime = FileTime.fromMillis(1234567890L);
        entry.setLastAccessTime(fileTime);
        assertEquals(fileTime, entry.getLastAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTime_TUeA0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastAccessTime(fileTime);
        assertEquals(fileTime, entry.getLastAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithPositiveMillis_jJYX5() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime fileTime = FileTime.fromMillis(1);
        entry.setLastAccessTime(fileTime);
        assertEquals(fileTime, entry.getLastAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithNegativeMillis_bTxx2() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        FileTime fileTime = FileTime.fromMillis(-1);
        zipArchiveEntry.setLastAccessTime(fileTime);
        assertEquals(fileTime, zipArchiveEntry.getLastAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithZeroMillis_teJM3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        FileTime fileTime = FileTime.fromMillis(0);
        zipArchiveEntry.setLastAccessTime(fileTime);
        assertEquals(fileTime, zipArchiveEntry.getLastAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithPositiveMillis_Vnkh4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        FileTime fileTime = FileTime.fromMillis(1);
        zipArchiveEntry.setLastAccessTime(fileTime);
        assertEquals(fileTime, zipArchiveEntry.getLastAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetVersionMadeBy_BMhh0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    int versionMadeBy = zipArchiveEntry.getVersionMadeBy();
    assertEquals(0, versionMadeBy);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTime_ijpg0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime fileTime = FileTime.fromMillis(0);
        entry.setLastAccessTime(fileTime);
        assertEquals(fileTime, entry.getLastAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithFile_IXCW5() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("file"), "name");
        FileTime fileTime = FileTime.fromMillis(0);
        entry.setLastAccessTime(fileTime);
        assertEquals(fileTime, entry.getLastAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullExtra_roXg0_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] result = entry.getLocalFileDataExtra();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullExtra_roXg0_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] result = entry.getLocalFileDataExtra();
        assertTrue(result.length == 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonNullExtra_dwJj1_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] extra = new byte[10];
        entry.setExtra(extra);
        byte[] result = entry.getLocalFileDataExtra();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory_bcmU0_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry = new ZipArchiveEntry("test/");
        assertTrue(entry.isDirectory());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithEmptyName_KAgx1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("");
        assertFalse(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDiskNumberStart_vPmb0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        long result = zipArchiveEntry.getDiskNumberStart();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getUnixMode_1_GEuw0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        int result = zipArchiveEntry.getUnixMode();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor2_OQPQ1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] rawName = entry.getRawName();
        assertNull(rawName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryExtra_VwLQ0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        byte[] centralDirectoryExtra = zipArchiveEntry.getCentralDirectoryExtra();
        assertNotNull(centralDirectoryExtra);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixSymlinkWithZipArchiveEntry_YZlh0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        boolean result = entry.isUnixSymlink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAlignmentInvalidValue_SmsO1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        try {
            entry.setAlignment(1025);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid value for alignment, must be power of two and no bigger than " + 0xffff + " but is " + 1025, e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime_ETKs0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        entry.setTime(1234567890L);
        assertEquals(1234567890L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithFileTime_vNno1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        FileTime fileTime = FileTime.fromMillis(1234567890L);
        entry.setTime(fileTime);
        assertEquals(fileTime, entry.getLastModifiedTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithString_tPcw3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("entryName");
        zipArchiveEntry.setTime(1234567890L);
        assertEquals(1234567890L, zipArchiveEntry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithFilePathStringArray_LNoq4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("input.txt"), "entryName");
        zipArchiveEntry.setTime(1234567890L);
        assertEquals(1234567890L, zipArchiveEntry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithLong_Wvqh5() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setTime(1234567890L);
        assertEquals(1234567890L, zipArchiveEntry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithLong_qTNS0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    zipArchiveEntry.setTime(1234567890L);
    assertEquals(1234567890L, zipArchiveEntry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFileTime_XUMF1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
    FileTime fileTime = FileTime.fromMillis(1234567890L);
    zipArchiveEntry.setTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithNegativeTime_qXii1() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setTime(-1234567890L);
    assertEquals(-1234567890L, entry.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime_Gbly0_4() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setTime(1234567890L);
        entry.setTime(ZipUtil.dosToJavaTime(1234567890L));
        assertNotNull(entry.getLastModifiedDate());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithFileTime_nFYE1() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        FileTime fileTime = FileTime.fromMillis(1234567890L);
        zipArchiveEntry.setTime(fileTime);
        assertEquals(fileTime, zipArchiveEntry.getLastModifiedTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithString_VSqB3() {
        ZipArchiveEntry entry = new ZipArchiveEntry("entryName");
        entry.setTime(1234567890L);
        assertEquals(1234567890L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithFileInputString_dXiS4() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("input.txt"), "entryName");
        entry.setTime(1234567890L);
        assertEquals(1234567890L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetTimeWithFileTime_QryI1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("input.txt"), "entryName");
    FileTime fileTime = FileTime.fromMillis(1234567890L);
    zipArchiveEntry.setTime(fileTime);
    assertEquals(fileTime, zipArchiveEntry.getLastModifiedTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime_GoHH0_2() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File("input.txt"), "entryName");
        entry.setTime(1234567890L);
        assertEquals(1234567890L, entry.getLastModifiedTime().toMillis());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithFileInputString_erwT4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        zipArchiveEntry.setTime(1234567890L);
        assertEquals(1234567890L, zipArchiveEntry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddExtraFieldWithUnparseableExtraFieldData_VMqi1_1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        UnparseableExtraFieldData ze = new UnparseableExtraFieldData();
        entry.addExtraField(ze);
        assertNotNull(entry.getExtraFields());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithFileAndString_rCCm4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputPath"), "entryName");
        zipArchiveEntry.setTime(1234567890L);
        assertEquals(1234567890L, zipArchiveEntry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTime_NmCd8() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        zipArchiveEntry.setLastModifiedTime(FileTime.fromMillis(1234567890L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMethodWithNegativeMethod_eCzD0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        try {
            entry.setMethod(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("ZIP compression method can not be negative: -1", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMethodWithValidMethod_Odlv1() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        entry.setMethod(0);
        assertEquals(0, entry.getMethod());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExtraFields_AZkR0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
        ZipExtraField[] extraFields = zipArchiveEntry.getExtraFields();
        assertNotNull(extraFields);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor2_Xlgy1() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor5_wyqx4() {
        ZipArchiveEntry entry = new ZipArchiveEntry("");
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor6_hnfN5() {
        ZipArchiveEntry entry = new ZipArchiveEntry(new File(""), "");
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGeneralPurposeBit_IssK0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertEquals(0, generalPurposeBit.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGeneralPurposeBit4_xHcM3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        GeneralPurposeBit generalPurposeBit = zipArchiveEntry.getGeneralPurposeBit();
        assertEquals(0, generalPurposeBit.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPlatform4_CRoU3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        int actualPlatform = zipArchiveEntry.getPlatform();
        assertEquals(0, actualPlatform);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPlatform5_WdQO4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File("inputFile"), "entryName");
        int actualPlatform = zipArchiveEntry.getPlatform();
        assertEquals(0, actualPlatform);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguous_NnjU0() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setStreamContiguous(true);
    assertEquals(true, entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetStreamContiguousFalse_byjN1() {
    ZipArchiveEntry entry = new ZipArchiveEntry();
    entry.setStreamContiguous(false);
    assertEquals(false, entry.isStreamContiguous());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGeneralPurposeBit_UIBG0_iQHI0() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("name");
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        zipArchiveEntry.setGeneralPurposeBit(generalPurposeBit);
        assertEquals(generalPurposeBit, zipArchiveEntry.getGeneralPurposeBit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnrecognizedExtraField_gXpK3_skNw0() {
        UnrecognizedExtraField u = new UnrecognizedExtraField();
        u.setHeaderId(new ZipShort(10));
        byte[] b = new byte[10];
        u.setLocalFileDataData(b);
        u.setCentralDirectoryData(b);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddNTFSTimestamp_jYFH5_Wtoa0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime lastModifiedTime = FileTime.fromMillis(System.currentTimeMillis());
        FileTime lastAccessTime = FileTime.fromMillis(System.currentTimeMillis());
        FileTime creationTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastModifiedTime(lastModifiedTime);
        entry.setLastAccessTime(lastAccessTime);
        entry.setCreationTime(creationTime);
        assertNotNull(entry.getExtraField(X000A_NTFS.HEADER_ID));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInternalAttributesWithFile_xsEd4_jeNU0() {
        File inputFile = new File("file");
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(inputFile, "entryName");
        zipArchiveEntry.setInternalAttributes(5);
        assertEquals(5, zipArchiveEntry.getInternalAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_GkIC0() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    assertEquals(0L, zipArchiveEntry.getCreationTime().toMillis());
    zipArchiveEntry.setCreationTime(FileTime.fromMillis(1L));
    assertEquals(1L, zipArchiveEntry.getCreationTime().toMillis());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithEmptyArray_YvZz2() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] b = new byte[0];
        entry.setCentralDirectoryExtra(b);
        assertNotSame(b, entry.getCentralDirectoryExtra());
        assertTrue(Arrays.equals(b, entry.getCentralDirectoryExtra()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCentralDirectoryExtraWithLargeArray_oaXX3() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] b = new byte[10000];
        entry.setCentralDirectoryExtra(b);
        assertNotSame(b, entry.getCentralDirectoryExtra());
        assertTrue(Arrays.equals(b, entry.getCentralDirectoryExtra()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExtra_pKub6() {
        ZipArchiveEntry entry = new ZipArchiveEntry("name");
        FileTime lastModifiedTime = FileTime.fromMillis(System.currentTimeMillis());
        entry.setLastModifiedTime(lastModifiedTime);
        entry.setExtra();
        assertNotNull(entry.getExtraField(X5455_ExtendedTimestamp.HEADER_ID));
        assertNotNull(entry.getExtraField(X000A_NTFS.HEADER_ID));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullExtra_roXg0() {
        ZipArchiveEntry entry = new ZipArchiveEntry();
        byte[] result = entry.getLocalFileDataExtra();
        assertNotNull(result);
        assertTrue(result.length == 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory_bcmU0() {
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        assertFalse(entry.isDirectory());
        entry = new ZipArchiveEntry("test/");
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObject_hOem3_fid2() {
        ZipArchiveEntry entry1 = new ZipArchiveEntry();
        ZipArchiveEntry entry2 = new ZipArchiveEntry();
        boolean result = entry1.equals(entry2);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationTime_GkIC1_1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setCreationTime(FileTime.fromMillis(1L));
    zipArchiveEntry.setCreationTime(FileTime.fromMillis(1L));
    assertEquals(1L, zipArchiveEntry.getCreationTime().toMillis());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalHeaderOffsetWithString_jQmY3_fid2() {
        String name = "entryName";
        ZipArchiveEntry entry = new ZipArchiveEntry(name);
        long offset = entry.getLocalHeaderOffset();
        assertEquals(-1, offset);
    }
}