/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithOffset_bIvv2() {
		byte[] bytes = new byte[2];
		bytes[0] = 0;
		bytes[1] = 10;
		ZipShort zipShort = new ZipShort(bytes, 1);
		assertEquals("ZipShort value: 10", zipShort.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArray_fjPF1() {
    byte[] bytes = {0x01, 0x02};
    int expected = 0x0102;
    int actual = ZipShort.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset2_gSxM3() {
    byte[] bytes = {0x03, 0x04};
    int offset = 1;
    int expected = 0x0304;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset4_UIPd5() {
    byte[] bytes = {0x07, 0x08};
    int offset = 1;
    int expected = 0x0807;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset6_Dlxa7() {
    byte[] bytes = {0x0B, 0x0C};
    int offset = 1;
    int expected = 0x0C0B;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset8_TFLe9() {
    byte[] bytes = {0x0F, 0x10};
    int offset = 1;
    int expected = 0x10;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset10_nsuU11() {
    byte[] bytes = {0x13, 0x14};
    int offset = 1;
    int expected = 0x1413;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithArray_eham3_fid1() {
		byte[] bytes = new byte[2];
		bytes[0] = 0;
		bytes[1] = 10;
		ZipShort zipShort = new ZipShort(bytes);
		assertEquals("ZipShort value: 10", zipShort.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue4_LswQ3_fid1() {
        ZipShort zipShort = new ZipShort(new byte[]{1, 0});
        assertEquals(256, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue7_tQbU6_fid1() {
        ZipShort zipShort = new ZipShort(new byte[]{127, -1});
        assertEquals(32767, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue10_ELYY9_fid1() {
        ZipShort zipShort = new ZipShort(new byte[]{0, -1});
        assertEquals(65536, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_uFNo0() {
        ZipShort zipShort1 = new ZipShort(new byte[]{0, 1}, 0);
        ZipShort zipShort2 = new ZipShort(1);
        assertEquals(1, zipShort1.hashCode());
        assertEquals(1, zipShort2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset_mziQ0_fid1() {
    byte[] bytes = {0x01, 0x02};
    int offset = 0;
    int expected = 0x0102;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset3_FIyd4_fid1() {
    byte[] bytes = {0x05, 0x06};
    int offset = 0;
    int expected = 0x0506;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset4_UIPd5_fid1() {
    byte[] bytes = {0x07, 0x08};
    int offset = 1;
    int expected = 0x0708;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset5_SbyG6_fid1() {
    byte[] bytes = {0x09, 0x0A};
    int offset = 0;
    int expected = 0x090A;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset6_Dlxa7_fid1() {
    byte[] bytes = {0x0B, 0x0C};
    int offset = 1;
    int expected = 0x0B0C;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset7_iFng8_fid1() {
    byte[] bytes = {0x0D, 0x0E};
    int offset = 0;
    int expected = 0x0D0E;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset8_TFLe9_fid1() {
    byte[] bytes = {0x0F, 0x10};
    int offset = 1;
    int expected = 0x0F10;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset9_dLQj10_fid1() {
    byte[] bytes = {0x11, 0x12};
    int offset = 0;
    int expected = 0x1112;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset10_nsuU11_fid1() {
    byte[] bytes = {0x13, 0x14};
    int offset = 1;
    int expected = 0x1314;
    int actual = ZipShort.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_uFNo0_1() {
        ZipShort zipShort1 = new ZipShort(new byte[]{0, 1}, 0);
        ZipShort zipShort2 = new ZipShort(1);
        assertEquals(1, zipShort1.hashCode());}
}