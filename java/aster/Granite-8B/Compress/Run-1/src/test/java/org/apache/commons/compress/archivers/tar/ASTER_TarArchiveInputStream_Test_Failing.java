/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveInputStream_Test_Failing {
final int magicLen = TarConstants.MAGICLEN;
final int magicOffset = TarConstants.MAGIC_OFFSET;
    private static void generateTestCases_nILe1() {
    }
    private static void generateNextTarEntryTestCases(TarArchiveInputStream tarArchiveInputStream) {
    }
    private static void generatePaxHeadersTestCases(TarArchiveInputStream tarArchiveInputStream) {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test1_gMYO0() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, "UTF-8");
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNotNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test2_axUo1() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNotNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test3_UPHJ2() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024);
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNotNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test4_VdbM3() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512, "UTF-8", true);
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNotNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test5_muKA4() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512);
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNotNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test6_eHVb5() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), true);
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNotNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test7_ySwT6() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512, "UTF-8");
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNotNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test8_zuYQ7() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), "UTF-8");
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNotNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip1_KgLn0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, "");
        tarArchiveInputStream.skip(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip2_sMqj1() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, "", false);
        tarArchiveInputStream.skip(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip3_ADrG2() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, "", true);
        tarArchiveInputStream.skip(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentEntryTest_IQtQ0() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        TarArchiveEntry currEntry = tarArchiveInputStream.getCurrentEntry();
        assertNotNull(currEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentEntryTest2_Hgne1() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, null, false);
        TarArchiveEntry currEntry = tarArchiveInputStream.getCurrentEntry();
        assertNotNull(currEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip1_Qneh0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, "UTF-8");
        long skipped = tarArchiveInputStream.skip(10);
        assertEquals(10, skipped);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip2_qCWN1() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"));
        long skipped = tarArchiveInputStream.skip(10);
        assertEquals(10, skipped);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip3_XoLc2() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024);
        long skipped = tarArchiveInputStream.skip(10);
        assertEquals(10, skipped);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip4_cjWM3() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, 512, "UTF-8", true);
        long skipped = tarArchiveInputStream.skip(10);
        assertEquals(10, skipped);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip5_SwCy4() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, 512);
        long skipped = tarArchiveInputStream.skip(10);
        assertEquals(10, skipped);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip6_meqw5() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), true);
        long skipped = tarArchiveInputStream.skip(10);
        assertEquals(10, skipped);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip7_tZOJ6() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, 512, "UTF-8");
        long skipped = tarArchiveInputStream.skip(10);
        assertEquals(10, skipped);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip8_cihH7() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), "UTF-8");
        long skipped = tarArchiveInputStream.skip(10);
        assertEquals(10, skipped);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRecord_IEPr0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
        byte[] record = tarArchiveInputStream.readRecord();
        assertNotNull(record);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRecordWithBlockSize_NCJU1() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024);
        byte[] record = tarArchiveInputStream.readRecord();
        assertNotNull(record);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRecordWithBlockSizeAndRecordSize_hRst2() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512);
        byte[] record = tarArchiveInputStream.readRecord();
        assertNotNull(record);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRecordWithBlockSizeAndRecordSizeAndEncoding_Qjqe3() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512, "UTF-8");
        byte[] record = tarArchiveInputStream.readRecord();
        assertNotNull(record);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRecordWithBlockSizeAndRecordSizeAndEncodingAndLenient_Onvp4() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512, "UTF-8", true);
        byte[] record = tarArchiveInputStream.readRecord();
        assertNotNull(record);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRecordWithEncoding_UiJA6() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), "UTF-8");
        byte[] record = tarArchiveInputStream.readRecord();
        assertNotNull(record);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadRecordWithLenient_IynD7() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), true);
        byte[] record = tarArchiveInputStream.readRecord();
        assertNotNull(record);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry_Vvum2() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
        assertNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry_pXGL0() throws IOException {
        InputStream inputStream = null;
        int blockSize = 0;
        String encoding = null;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, encoding);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry1_Rnua1() throws IOException {
        InputStream inputStream = null;
        int blockSize = 0;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry2_JfQD2() throws IOException {
        InputStream inputStream = null;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry3_ofbV3() throws IOException {
        InputStream inputStream = null;
        int blockSize = 0;
        int recordSize = 0;
        String encoding = null;
        boolean lenient = false;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, recordSize, encoding, lenient);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry4_Bunw4() throws IOException {
        InputStream inputStream = null;
        int blockSize = 0;
        int recordSize = 0;
        String encoding = null;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, recordSize, encoding);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry5_KUCD5() throws IOException {
        InputStream inputStream = null;
        int blockSize = 0;
        int recordSize = 0;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, recordSize);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry6_KUGp6() throws IOException {
        InputStream inputStream = null;
        String encoding = null;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, encoding);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable1_lVJO0_qIwA0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, "");
        tarArchiveInputStream.available();
        int available = tarArchiveInputStream.available();
        assert available == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable4_fATE3_jGnA0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, "", false);
        tarArchiveInputStream.available();
        int available = tarArchiveInputStream.available();
        assert available == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable5_zZdY4_UQOG0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0);
        tarArchiveInputStream.available();
        int available = tarArchiveInputStream.available();
        assert available == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable6_Mcji5_rDYc0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, false);
        tarArchiveInputStream.available();
        int available = tarArchiveInputStream.available();
        assert available == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable7_iJuC6_elFr0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, "");
        tarArchiveInputStream.available();
        int available = tarArchiveInputStream.available();
        assert available == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable8_FoRd7_TcsM0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, "");
        tarArchiveInputStream.available();
        int available = tarArchiveInputStream.available();
        assert available == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test1_gMYO0_Xjwd0() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, "UTF-8");
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test3_UPHJ2_JplG0() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024);
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test4_VdbM3_sRGA0() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512, "UTF-8", true);
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test5_muKA4_bjmw0() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512);
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test6_eHVb5_JEAT0() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), true);
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test7_ySwT6_QbgH0() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024, 512, "UTF-8");
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test8_zuYQ7_WZoU0() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), "UTF-8");
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNull(longNameData);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testMark_LFJK0_fzkb0() throws IOException {
		try (TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"))) {
			tarArchiveInputStream.mark(100);
			tarArchiveInputStream.reset();
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry1_Rnua1_msxp0() throws IOException {
        InputStream inputStream = null;
        int blockSize = 512;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
        if (entry != null) {
            entry.getName();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry2_JfQD2_xMYO0() throws IOException {
        InputStream inputStream = null;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream);
        tarArchiveInputStream.getNextTarEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry5_KUCD5_UxbF0() throws IOException {
        InputStream inputStream = null;
        int blockSize = 512;
        int recordSize = 512;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, recordSize);
        tarArchiveInputStream.getNextTarEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry4_Bunw4_tRTN0() throws IOException {
        InputStream inputStream = null;
        int blockSize = 512;
        int recordSize = 512;
        String encoding = "UTF-8";
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, recordSize, encoding);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextTarEntry3_ofbV3_uwcG0() throws IOException {
        InputStream inputStream = null;
        int blockSize = 512;
        int recordSize = 512;
        String encoding = "UTF-8";
        boolean lenient = false;
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, recordSize, encoding, lenient);
        tarArchiveInputStream.getNextTarEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test2_axUo1_fid3() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
		byte[] longNameData = tarArchiveInputStream.getLongNameData();
		Assertions.assertNull(longNameData);
	}
}