/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPool_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatchesWithRegexStringMatchingAllAndCompareStringMatchingAll_XqVp0() {
    boolean result = SegmentConstantPool.regexMatches(SegmentConstantPool.REGEX_MATCH_ALL, "anystring");
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatchesWithRegexStringMatchingInitAndCompareStringMatchingInit_hxRa1() {
    boolean result = SegmentConstantPool.regexMatches(SegmentConstantPool.REGEX_MATCH_INIT, SegmentConstantPool.INITSTRING);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex2_Urmw1() {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] primaryArray = {"a", "b", "c"};
        String[] secondaryArray = {"1", "2", "3"};
        String primaryCompareString = "d";
        String secondaryCompareRegex = "2";
        int desiredIndex = 0;
        int actual = segmentConstantPool.matchSpecificPoolEntryIndex(primaryArray, secondaryArray, primaryCompareString, secondaryCompareRegex, desiredIndex);
        assertEquals(-1, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatchesWithRegexStringMatchingAllAndCompareStringNotMatchingAll_cXBm2_fid1() {
    boolean result = SegmentConstantPool.regexMatches(SegmentConstantPool.REGEX_MATCH_ALL, "notmatchingall");
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_tDoI0_fid1() {
        Segment segment = new Segment();
        CpBands bands = new CpBands(segment);
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] nameArray = new String[10];
        String compareString = "exampleString";
        int desiredIndex =-1;
        int expectedIndex =-1;
        int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assertEquals(expectedIndex, actualIndex);
    }
}