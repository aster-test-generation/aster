/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches2_SAXT1() {
        byte[] signature = new byte[2];
        signature[0] = 0x00;
        signature[1] = 0x53;
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches4_qPAz3() {
        byte[] signature = new byte[2];
        signature[0] = 0x00;
        signature[1] = 0x00;
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches9_Hfty8() {
        byte[] signature = new byte[3];
        signature[0] = 0x00;
        signature[1] = 0x00;
        signature[2] = 0x53;
        boolean result = ArjArchiveInputStream.matches(signature, 3);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches13_UaqM12() {
        byte[] signature = new byte[3];
        signature[0] = 0x00;
        signature[1] = 0x00;
        signature[2] = 0x53;
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_UpGk0() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_KdqV0() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        Date lastModifiedDate = entry.getLastModifiedDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_GWFo1() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        long size = entry.getSize();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHostOs_yDjS2() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        int hostOs = entry.getHostOs();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_mrLq3() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        int hashCode = entry.hashCode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnixMode_tuSh4() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        int unixMode = entry.getUnixMode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_IdUk5() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        String name = entry.getName();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_jHZC6() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        int mode = entry.getMode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_qXwy0() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        Date lastModifiedDate = entry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_HarW1() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        long size = entry.getSize();
        assertTrue(size >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHostOs_HiGG2() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        int hostOs = entry.getHostOs();
        assertTrue(hostOs >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnixMode_FZIW4() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        int unixMode = entry.getUnixMode();
        assertTrue(unixMode >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_uqOT6() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        int mode = entry.getMode();
        assertTrue(mode >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void close_wIfH0() throws IOException {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches3_FzXS2_Hrjx0() {
        byte[] signature = new byte[2];
        signature[0] = (byte) 0xFF;
        signature[1] = (byte) 0x00;
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches7_ibDL6_XPmn0() {
        byte[] signature = new byte[3];
        signature[0] = 0x00;
        signature[1] = 0x53;
        signature[2] = (byte) 0xFF;
        boolean result = ArjArchiveInputStream.matches(signature, 3);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches8_xNXA7_EQdh0() {
        byte[] signature = new byte[3];
        signature[0] = (byte) 0xFF;
        signature[1] = 0x00;
        signature[2] = 0x53;
        boolean result = ArjArchiveInputStream.matches(signature, 3);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches10_ThPR9_vbcZ0() {
        byte[] signature = new byte[3];
        signature[0] = (byte) 0xFF;
        signature[1] = 0x53;
        signature[2] = 0x00;
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches11_FhGP10_hyzc0() {
        byte[] signature = new byte[3];
        signature[0] = 0x00;
        signature[1] = 0x53;
        signature[2] = (byte) 0xFF;
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches12_EbrJ11_UUKz0() {
        byte[] signature = new byte[3];
        signature[0] = (byte) 0xFF;
        signature[1] = 0x00;
        signature[2] = 0x53;
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_wLAe3_fid2() {
        ArjArchiveEntry entry1 = new ArjArchiveEntry();
        ArjArchiveEntry entry2 = new ArjArchiveEntry();
        int hashCode1 = entry1.hashCode();
        int hashCode2 = entry2.hashCode();
        assertFalse(hashCode1 != hashCode2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_eddy0_GTZO0_fid2() {
        byte[] signature = new byte[2];
        signature[0] = (byte) 0xFF;
        signature[1] = (byte) 0x53;
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches6_lRBh5_VfMM0_fid2() {
        byte[] signature = new byte[3];
        signature[0] = (byte) 0xFF;
        signature[1] = 0x53;
        signature[2] = 0x00;
        boolean result = ArjArchiveInputStream.matches(signature, 3);
        assertFalse(result);
    }
}