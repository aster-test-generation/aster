/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IntList_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_get_with_valid_location_jpML0() {
    IntList intList = new IntList(10);
    int actual = intList.get(0);
    int expected = 0;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_get_with_valid_location_and_capacity_bGuF1() {
    IntList intList = new IntList(10);
    int actual = intList.get(9);
    int expected = 0;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_get_with_invalid_location_UviJ2() {
    IntList intList = new IntList(10);
    int actual = intList.get(10);
    int expected = 0;
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_amRx0() {
        IntList intList = new IntList(10);
        intList.remove(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove1_HnvB1() {
        IntList intList = new IntList();
        intList.remove(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove2_BmaQ2() {
        IntList intList = new IntList(10);
        intList.remove(9);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove3_ZlfN3() {
        IntList intList = new IntList();
        intList.remove(9);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove4_WJUT4() {
        IntList intList = new IntList(10);
        intList.remove(5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove5_vdux5() {
        IntList intList = new IntList();
        intList.remove(5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove6_DlWt6() {
        IntList intList = new IntList(10);
        intList.remove(2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove7_sTQa7() {
        IntList intList = new IntList();
        intList.remove(2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd2_YKBU1() {
        IntList intList = new IntList(10);
        intList.add(1, 1);
        assert intList.get(1) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd3_cOcB2() {
        IntList intList = new IntList(10);
        intList.add(2, 1);
        assert intList.get(2) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd4_INhV3() {
        IntList intList = new IntList(10);
        intList.add(3, 1);
        assert intList.get(3) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd5_ONng4() {
        IntList intList = new IntList(10);
        intList.add(4, 1);
        assert intList.get(4) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd6_xrHw5() {
        IntList intList = new IntList(10);
        intList.add(5, 1);
        assert intList.get(5) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd7_kOtw6() {
        IntList intList = new IntList(10);
        intList.add(6, 1);
        assert intList.get(6) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd8_BwNr7() {
        IntList intList = new IntList(10);
        intList.add(7, 1);
        assert intList.get(7) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd9_UufF8() {
        IntList intList = new IntList(10);
        intList.add(8, 1);
        assert intList.get(8) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd10_IVtT9() {
        IntList intList = new IntList(10);
        intList.add(9, 1);
        assert intList.get(9) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd11_FgQb10() {
        IntList intList = new IntList(10);
        intList.add(10, 1);
        assert intList.get(10) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd12_LXkI11() {
        IntList intList = new IntList(10);
        intList.add(11, 1);
        assert intList.get(11) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationHalfway_AdnC2() {
    IntList list = new IntList(10);
    list.add(5, 1);
    assertEquals(1, list.get(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationEnd_DTjZ3() {
    IntList list = new IntList(10);
    list.add(9, 1);
    assertEquals(1, list.get(9));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationAfterLastIndex_TaLO5() {
    IntList list = new IntList(10);
    list.add(10, 1);
    assertEquals(1, list.get(9));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationNegative_GoVI6() {
    IntList list = new IntList(10);
    list.add(-10, 1);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void test_get_with_invalid_location_UviJ2_fid1() {
    IntList intList = new IntList(10);
    int actual = intList.get(10);
    int expected = 0;
    assertNotEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArray_NEIV0_2_fid1() {
        IntList intList = new IntList(10);
        int[] array = intList.toArray();
        assertEquals(10, array.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationOne_eVLH1_fid1() {
    IntList list = new IntList(10);
    list.add(1, 1);
    assertEquals(1, list.get(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationBeforeFirstIndex_CykZ4_fid1() {
    IntList list = new IntList(10);
    list.add(-1, 1);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationTooLarge_rLRs7_fid1() {
    IntList list = new IntList(10);
    list.add(100, 1);
    assertEquals(1, list.get(9));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_ftBf0_1() {
        IntList list = new IntList(10);
        list.add(5);
        list.add(10);
        list.remove(0);
        assertEquals(0, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_ftBf0_3_fid1() {
        IntList list = new IntList(10);
        list.add(5);
        list.add(10);
        list.remove(0);
        assertEquals(2, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArray_NEIV0() {
        IntList intList = new IntList(10);
        int[] array = intList.toArray();
        assertNotNull(array);
        assertEquals(10, array.length);
    }
}