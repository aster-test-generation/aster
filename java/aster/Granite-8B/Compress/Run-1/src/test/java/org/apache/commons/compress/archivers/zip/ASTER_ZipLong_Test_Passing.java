/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipLong_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithObjectThatIsZipLong_tmqo0() {
    ZipLong zipLong1 = new ZipLong(123456789);
    ZipLong zipLong2 = new ZipLong(123456789);
    assertTrue(zipLong1.equals(zipLong2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithObjectThatIsNotZipLong_oxVq1() {
    ZipLong zipLong1 = new ZipLong(123456789);
    Object object = new Object();
    assertFalse(zipLong1.equals(object));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_tcoO2() {
    ZipLong zipLong1 = new ZipLong(123456789);
    assertFalse(zipLong1.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_PhEP0() {
        ZipLong zipLong = new ZipLong(123456789);
        assertEquals("ZipLong value: 123456789", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOffset_mTAo1() {
        byte[] bytes = new byte[8];
        ZipLong zipLong = new ZipLong(bytes, 2);
        assertEquals("ZipLong value: 0", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithArray_Qqic3() {
        byte[] bytes = new byte[8];
        ZipLong zipLong = new ZipLong(bytes);
        assertEquals("ZipLong value: 0", zipLong.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_BIve0_1() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        zipLong = new ZipLong(1234567890L);
        zipLong = new ZipLong(1234567890L);
        zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals(0, zipLong.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_BIve0_2() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        zipLong = new ZipLong(0L);
        zipLong = new ZipLong(0L);
        zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals(0L, zipLong.getValue());}
@Test
@Timeout(value =-2147483648, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValue_JFEs0_2() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        zipLong = new ZipLong(1);
        zipLong = new ZipLong(Integer.MAX_VALUE);
        zipLong = new ZipLong(Integer.MIN_VALUE);
        assertEquals(1, zipLong.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValue_JFEs0_4() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        zipLong = new ZipLong(1);
        zipLong = new ZipLong(Integer.MAX_VALUE);
        zipLong = new ZipLong(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, zipLong.getIntValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_DhPG0_1() {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(0);
        ZipLong zipLong3 = new ZipLong(0L);
        ZipLong zipLong4 = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals(zipLong1.hashCode(), zipLong2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_DhPG0_2() {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(0);
        ZipLong zipLong3 = new ZipLong(0L);
        ZipLong zipLong4 = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals(zipLong1.hashCode(), zipLong3.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_DhPG0_3() {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(0);
        ZipLong zipLong3 = new ZipLong(0L);
        ZipLong zipLong4 = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals(zipLong1.hashCode(), zipLong4.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInt_NCoD0() {
    byte[] bytes = new byte[4];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayIntInvalidOffset_tvZM4() {
    byte[] bytes = new byte[4];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    try {
        ZipLong.getValue(bytes, 4);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayIntInvalidOffset2_ifGg5() {
    byte[] bytes = new byte[4];
    bytes[0] = 1;
    bytes[1] = 2;
    bytes[2] = 3;
    bytes[3] = 4;
    try {
        ZipLong.getValue(bytes, -1);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetValue_diIe0() {
        byte[] bytes = new byte[4];
        int offset = 0;
        long expectedValue = 0; // Replace with expected value
        long actualValue = ZipLong.getValue(bytes, offset);
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_iekY0_1() {
        ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4}, 0);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertNotSame(zipLong, clonedZipLong);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_iekY0_2() {
        ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4}, 0);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertEquals(zipLong.getValue(), clonedZipLong.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithIntValue_ujrV1_1() {
        ZipLong zipLong = new ZipLong(1234);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertNotSame(zipLong, clonedZipLong);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithIntValue_ujrV1_2() {
        ZipLong zipLong = new ZipLong(1234);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertEquals(zipLong.getValue(), clonedZipLong.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithLongValue_ydJO2_1() {
        ZipLong zipLong = new ZipLong(1234567890L);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertNotSame(zipLong, clonedZipLong);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithLongValue_ydJO2_2() {
        ZipLong zipLong = new ZipLong(1234567890L);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertEquals(zipLong.getValue(), clonedZipLong.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithByteArray_rxcN3_1() {
        ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4});
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertNotSame(zipLong, clonedZipLong);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithByteArray_rxcN3_2() {
        ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4});
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertEquals(zipLong.getValue(), clonedZipLong.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithByteArrayAndOffset_VDUK4_1() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 1, 2, 3, 4, 5}, 4);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertNotSame(zipLong, clonedZipLong);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithByteArrayAndOffset_VDUK4_2() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 1, 2, 3, 4, 5}, 4);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertEquals(zipLong.getValue(), clonedZipLong.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetBytesByte_CyPf2() {
    ZipLong zipLong = new ZipLong((byte) 123);
    byte[] bytes = ZipLong.getBytes((byte) 123);
    assert bytes != null;
    assert bytes[0] == 123;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_BIve0() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        assertEquals(0, zipLong.getValue());
        zipLong = new ZipLong(1234567890L);
        assertEquals(1234567890L, zipLong.getValue());
        zipLong = new ZipLong(1234567890L);
        assertEquals(1234567890L, zipLong.getValue());
        zipLong = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals(0, zipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIntValue_JFEs0() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        assertEquals(0, zipLong.getIntValue());
        zipLong = new ZipLong(1);
        assertEquals(1, zipLong.getIntValue());
        zipLong = new ZipLong(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, zipLong.getIntValue());
        zipLong = new ZipLong(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, zipLong.getIntValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_DhPG0() {
        ZipLong zipLong1 = new ZipLong(new byte[]{0, 0, 0, 0}, 0);
        ZipLong zipLong2 = new ZipLong(0);
        ZipLong zipLong3 = new ZipLong(0L);
        ZipLong zipLong4 = new ZipLong(new byte[]{0, 0, 0, 0});
        assertEquals(zipLong1.hashCode(), zipLong2.hashCode());
        assertEquals(zipLong1.hashCode(), zipLong3.hashCode());
        assertEquals(zipLong1.hashCode(), zipLong4.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_iekY0() {
        ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4}, 0);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertNotSame(zipLong, clonedZipLong);
        assertEquals(zipLong.getValue(), clonedZipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithIntValue_ujrV1() {
        ZipLong zipLong = new ZipLong(1234);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertNotSame(zipLong, clonedZipLong);
        assertEquals(zipLong.getValue(), clonedZipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithLongValue_ydJO2() {
        ZipLong zipLong = new ZipLong(1234567890L);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertNotSame(zipLong, clonedZipLong);
        assertEquals(zipLong.getValue(), clonedZipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithByteArray_rxcN3() {
        ZipLong zipLong = new ZipLong(new byte[]{1, 2, 3, 4});
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertNotSame(zipLong, clonedZipLong);
        assertEquals(zipLong.getValue(), clonedZipLong.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneWithByteArrayAndOffset_VDUK4() {
        ZipLong zipLong = new ZipLong(new byte[]{0, 0, 0, 1, 2, 3, 4, 5}, 4);
        ZipLong clonedZipLong = (ZipLong) zipLong.clone();
        assertNotSame(zipLong, clonedZipLong);
        assertEquals(zipLong.getValue(), clonedZipLong.getValue());
    }
}