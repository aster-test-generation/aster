/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.Set;
import org.apache.commons.compress.utils.Sets;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CompressorStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetZstandard_eQUC0() {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBzip2_kjcz0() {
        String bzip2 = CompressorStreamFactory.getBzip2();
        assertEquals("bzip2", bzip2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStreamCompressorNames_sGxZ0() {
        CompressorStreamFactory factory = new CompressorStreamFactory(false);
        Set<String> compressorNames = factory.getInputStreamCompressorNames();
        assertEquals(Sets.newHashSet(CompressorStreamFactory.GZIP, CompressorStreamFactory.BROTLI, CompressorStreamFactory.BZIP2, CompressorStreamFactory.XZ, CompressorStreamFactory.LZMA, CompressorStreamFactory.PACK200, CompressorStreamFactory.DEFLATE, CompressorStreamFactory.SNAPPY_RAW, CompressorStreamFactory.SNAPPY_FRAMED, CompressorStreamFactory.Z, CompressorStreamFactory.LZ4_BLOCK, CompressorStreamFactory.LZ4_FRAMED, CompressorStreamFactory.ZSTANDARD, CompressorStreamFactory.DEFLATE64), compressorNames);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLZ4Framed_pmZF0() {
        assertEquals("lz4-framed", CompressorStreamFactory.getLZ4Framed());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGzip_VLor0() {
        String result = CompressorStreamFactory.getGzip();
        assertEquals("gz", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLzma_IFEv0() {
        assertEquals("lzma", CompressorStreamFactory.getLzma());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_1_zrCF0() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true);
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_2_UOZD1() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_3_MZXR2() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false, 1024);
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_4_xmdh3() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 2048);
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_5_tzNx4() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false, 512);
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_6_AgBf5() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 1024);
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_7_RmxM6() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(false, 2048);
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDecompressConcatenated_8_JLgX7() {
        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory(true, 512);
        boolean result = compressorStreamFactory.getDecompressConcatenated();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputStreamCompressorNames_PrqH0() {
        CompressorStreamFactory factory = new CompressorStreamFactory();
        Set<String> compressorNames = factory.getOutputStreamCompressorNames();
        Set<String> expectedCompressorNames = Sets.newHashSet(CompressorStreamFactory.GZIP, CompressorStreamFactory.BZIP2, CompressorStreamFactory.XZ, CompressorStreamFactory.LZMA, CompressorStreamFactory.PACK200, CompressorStreamFactory.DEFLATE, CompressorStreamFactory.SNAPPY_FRAMED, CompressorStreamFactory.LZ4_BLOCK, CompressorStreamFactory.LZ4_FRAMED, CompressorStreamFactory.ZSTANDARD);
        assertEquals(expectedCompressorNames, compressorNames);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressUntilEOF_kgbZ0() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        Boolean result = factory.getDecompressUntilEOF();
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDecompressUntilEOFWithMemoryLimit_KjPs1() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        Boolean result = factory.getDecompressUntilEOF();
        assertEquals(true, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetPack200_Wwaz0() {
        String expected = "pack200";
        String actual = CompressorStreamFactory.getPack200();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetLZ4Block_slHr0() {
        assertEquals("lz4-block", CompressorStreamFactory.getLZ4Block());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetDeflate64_WnXW0() {
        String expected = "deflate64";
        String actual = CompressorStreamFactory.getDeflate64();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetBrotliWithDecompressUntilEOF_UzaC2() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true);
        assertEquals("br", factory.getBrotli());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetBrotliWithMemoryLimit_BLwv3() {
        CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
        assertEquals("br", factory.getBrotli());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetXz_LtUT0() {
		CompressorStreamFactory factory = new CompressorStreamFactory();
		String actualXz = factory.getXz();
		String expectedXz = "xz";
		assertEquals(expectedXz, actualXz);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetXz_ocmP1() {
		CompressorStreamFactory factory = new CompressorStreamFactory(true);
		String actualXz = factory.getXz();
		String expectedXz = "xz";
		assertEquals(expectedXz, actualXz);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetXz_ksAa2() {
		CompressorStreamFactory factory = new CompressorStreamFactory(true, 1024);
		String actualXz = factory.getXz();
		String expectedXz = "xz";
		assertEquals(expectedXz, actualXz);
	}
}