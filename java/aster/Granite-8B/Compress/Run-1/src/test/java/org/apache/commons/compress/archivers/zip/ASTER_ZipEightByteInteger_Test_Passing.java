/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithZipEightByteInteger_Vpno0() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        assertTrue(zipEightByteInteger1.equals(zipEightByteInteger2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentValues_Rmis1() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 1, 1, 1, 1, 1, 1, 1}, 0);
        assertFalse(zipEightByteInteger1.equals(zipEightByteInteger2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_UmTv0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8], 0);
        long longValue = ZipEightByteInteger.getLongValue(new byte[8], 0);
        assertEquals(0L, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue4_bPyy3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8]);
        long longValue = ZipEightByteInteger.getLongValue(new byte[8], 0);
        assertEquals(0L, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_reEg0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        String expected = "ZipEightByteInteger value: 578437695752307201";
        assertEquals(expected, zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_JKUF1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("12345678901234567890"));
        BigInteger expectedValue = new BigInteger("12345678901234567890");
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue4_egld3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
        BigInteger expectedValue = new BigInteger("578437695752307201");
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBytes4_xqEp3() {
		ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
		byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
		byte[] actual = zipEightByteInteger.getBytes();
		assert expected.length == actual.length;
		for (int i = 0; i < expected.length; i++) {
			assertEquals(expected[i], actual[i]);
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetValueByteArrayInt_vjfA0() {
		byte[] bytes = new byte[8];
		int offset = 0;
		BigInteger expectedValue = BigInteger.ZERO;
		BigInteger actualValue = ZipEightByteInteger.getValue(bytes, offset);
		assertEquals(expectedValue, actualValue);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetValueByteArray_gfeX3() {
		byte[] bytes = new byte[8];
		BigInteger expectedValue = BigInteger.ZERO;
		BigInteger actualValue = ZipEightByteInteger.getValue(bytes);
		assertEquals(expectedValue, actualValue);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArray_AHED3_yLQP0() {
        byte[] bytes = new byte[10];
        bytes[0] = (byte) 0b10000000;
        bytes[1] = 0b01010101;
        bytes[2] = 0b01010101;
        bytes[3] = 0b01010101;
        bytes[4] = 0b01010101;
        bytes[5] = 0b01010101;
        bytes[6] = 0b01010101;
        bytes[7] = 0b01010101;
        bytes[8] = 0b01010101;
        bytes[9] = 0b01010101;
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        BigInteger expectedValue = new BigInteger("6148914691236517248", 10);
        BigInteger actualValue = zipEightByteInteger.getValue(bytes);
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromByteArray_TakS2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0xD2, (byte) 0x9B, (byte) 0x4D});
        byte[] expected = new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0xD2, (byte) 0x9B, (byte) 0x4D};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromZero_SVmX4() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(0L);
        byte[] expected = new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromNegativeOne_tKyG5() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(-1L);
        byte[] expected = new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
}