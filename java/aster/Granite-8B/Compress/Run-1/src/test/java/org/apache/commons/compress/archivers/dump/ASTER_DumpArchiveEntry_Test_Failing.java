/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Oyqp2() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertNotNull(entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSimpleName_uUJT6() {
        byte[] buffer = new byte[1024];
        DumpArchiveEntry entry = DumpArchiveEntry.parse(buffer);
        assertNotNull(entry.getSimpleName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithNegativeTime_ezBp2_zLBc0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        Date ctime = new Date(-1);
        entry.setCreationTime(ctime);
        assertEquals(0, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithZeroTime_xXyl3_hVBe0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        Date ctime = new Date(0);
        entry.setCreationTime(ctime);
        assertEquals(0, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTimeWithPositiveTime_UCab4_oAhu0() {
        DumpArchiveEntry entry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        Date ctime = new Date(1);
        entry.setCreationTime(ctime);
        assertEquals(1, entry.getCreationTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentType_CACP6_HZWg0() {
        DumpArchiveEntry entry1 = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        DumpArchiveEntry entry2 = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.DIRECTORY);
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_Mzks0_rYkZ0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        int mode = dumpArchiveEntry.getMode();
        assertEquals(0100644, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNlinkWhiteout_HgZH1_lwee0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.WHITEOUT);
        int nlink = dumpArchiveEntry.getNlink();
        assertEquals(1, nlink);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNlinkSocket_aOJb2_Kwss0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.SOCKET);
        int nlink = dumpArchiveEntry.getNlink();
        assertEquals(1, nlink);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNlinkUnknown_PUQH7_USiH0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.UNKNOWN);
        int nlink = dumpArchiveEntry.getNlink();
        assertEquals(1, nlink);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSparseRecordWithIdxGreaterThanZero_Biil1_Nqfx0() {
        DumpArchiveEntry dumpArchiveEntry = new DumpArchiveEntry("name", "simpleName", 1, DumpArchiveEntry.TYPE.FILE);
        boolean isSparse = dumpArchiveEntry.isSparseRecord(1);
        assertFalse(isSparse);
    }
}