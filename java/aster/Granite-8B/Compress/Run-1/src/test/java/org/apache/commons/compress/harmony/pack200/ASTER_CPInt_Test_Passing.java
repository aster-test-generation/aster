/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPInt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareTo_UNzQ0() {
		CPInt obj1 = new CPInt(10);
		CPInt obj2 = new CPInt(20);
		int result = obj1.compareTo(obj2);
		assertEquals(-1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareToWithSameValues_XYco1() {
		CPInt obj1 = new CPInt(10);
		CPInt obj2 = new CPInt(10);
		int result = obj1.compareTo(obj2);
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareToWithNegativeValues_ujMo2() {
		CPInt obj1 = new CPInt(-10);
		CPInt obj2 = new CPInt(10);
		int result = obj1.compareTo(obj2);
		assertEquals(-1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testCompareToWithPositiveValues_nFUY3() {
		CPInt obj1 = new CPInt(10);
		CPInt obj2 = new CPInt(-10);
		int result = obj1.compareTo(obj2);
		assertEquals(1, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetInt_ihld0() {
		CPInt intObj = new CPInt(10);
		int result = intObj.getInt();
		assertEquals(10, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetIntWithZero_ALNQ2() {
		CPInt intObj = new CPInt(0);
		int result = intObj.getInt();
		assertEquals(0, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetIntWithNegativeNumber_fKwU3() {
		CPInt intObj = new CPInt(-10);
		int result = intObj.getInt();
		assertEquals(-10, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetIntWithPositiveNumber_fsIm4() {
		CPInt intObj = new CPInt(100);
		int result = intObj.getInt();
		assertEquals(100, result);
	}
}