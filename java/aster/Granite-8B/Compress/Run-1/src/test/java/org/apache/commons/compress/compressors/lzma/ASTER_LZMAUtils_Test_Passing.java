/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMAUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsCompressedFileName_ktpB0_1() {
        assertTrue(LZMAUtils.isCompressedFileName("file.lzma"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsCompressedFileName_ktpB0_2() {
        assertFalse(LZMAUtils.isCompressedFileName("file.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_cHeP0() {
        byte[] signature = new byte[10];
        int length = 10;
        boolean result = LZMAUtils.matches(signature, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithSmallerLength_IwJm1() {
        byte[] signature = new byte[10];
        int length = 9;
        boolean result = LZMAUtils.matches(signature, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithDifferentSignature_jWng2() {
        byte[] signature = new byte[10];
        signature[0] = 1;
        int length = 10;
        boolean result = LZMAUtils.matches(signature, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithEmptySignature_fCkN3() {
        byte[] signature = new byte[0];
        int length = 0;
        boolean result = LZMAUtils.matches(signature, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsCompressedFilename_AfZy0_1() {
		assertTrue(LZMAUtils.isCompressedFilename("file.txt.lzma"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsCompressedFilename_AfZy0_2() {
		assertFalse(LZMAUtils.isCompressedFilename("file.txt"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilename_ErWa0() {
        String fileName = "example.txt";
        String expected = "example.txt";
        String actual = LZMAUtils.getUncompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilename_pBIr0() {
        String fileName = "example.txt";
        String compressedFileName = LZMAUtils.getCompressedFilename(fileName);
        assertEquals("example.txt.lzma", compressedFileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFileName_KWRR0() {
        String fileName = "example.txt";
        String expected = "example.txt.lzma";
        String actual = LZMAUtils.getCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFileNameWithDifferentExtension_zQLQ3() {
        String fileName = "example.doc";
        String expected = "example.doc.lzma";
        String actual = LZMAUtils.getCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsCompressedFileName_ktpB0() {
        assertTrue(LZMAUtils.isCompressedFileName("file.lzma"));
        assertFalse(LZMAUtils.isCompressedFileName("file.txt"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsCompressedFilename_AfZy0() {
		assertTrue(LZMAUtils.isCompressedFilename("file.txt.lzma"));
		assertFalse(LZMAUtils.isCompressedFilename("file.txt"));
	}
}