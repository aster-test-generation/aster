/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToFileTime_tpAQ3() {
        long ntfsTime = Long.MIN_VALUE;
        FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
        assertNotNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateToHundredNanos_aXRY0() {
        final FileTime fileTime = FileTime.fromMillis(1234567890L);
        final FileTime expected = FileTime.fromMillis(1234567800L);
        final FileTime actual = TimeUtils.truncateToHundredNanos(fileTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_tfHV0() {
        long javaTime = 1633855723000L; // Example Java time
        long expectedNtfsTime = 116444736300000000L; // Example expected NTFS time
        long ntfsTime = TimeUtils.toNtfsTime(javaTime);
        assert ntfsTime == expectedNtfsTime;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToDate_lcsM0() {
        long ntfsTime = 163329547000L; // Example NTFS time
        Date expectedDate = new Date(ntfsTime);
        Date actualDate = TimeUtils.ntfsTimeToDate(ntfsTime);
        assertEquals(expectedDate, actualDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToFileTimeWithNullDate_hBFn3_fid2() {
        Date date = null;
        FileTime fileTime = TimeUtils.toFileTime(date);
        assertEquals(fileTime, FileTime.fromMillis(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixTimeToFileTime_Tpuq0_2_fid2() {
        long time = 1632356000L; // Example Unix time
        FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
        assertEquals(163235600000000000L, fileTime.toMillis());}
}