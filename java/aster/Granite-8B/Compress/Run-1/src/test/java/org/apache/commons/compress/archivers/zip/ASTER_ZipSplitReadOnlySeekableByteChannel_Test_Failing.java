/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipSplitReadOnlySeekableByteChannel_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_FHnh0() throws IOException {
        List<SeekableByteChannel> channels = new ArrayList<>();
        SeekableByteChannel lastSegmentChannel = null;
        SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(lastSegmentChannel, channels);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildFromLastSplitSegment_WkIf0() throws IOException {
        List<SeekableByteChannel> channels = null; // Initialize channels
        File lastSegmentFile = null; // Initialize lastSegmentFile
        SeekableByteChannel expected = null; // Initialize expected
        SeekableByteChannel actual = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesWithOneFile_skTT0() throws IOException {
    final File file = new File("test.txt");
    final SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(file);
    assertNotNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesWithMultipleFiles_wJGu1() throws IOException {
    final File file1 = new File("test1.txt");
    final File file2 = new File("test2.txt");
    final SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(file1, file2);
    assertNotNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesWithEmptyFilesArray_rosn3() throws IOException {
    final SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(new File[0]);
    assertNotNull(channel);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForPathsWithNullPaths_eATJ2() {
        try {
            ZipSplitReadOnlySeekableByteChannel.forPaths((Path[]) null);
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForPathsWithEmptyPaths_xkma3() {
        try {
            ZipSplitReadOnlySeekableByteChannel.forPaths();
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForPathsWithNullPath_DhdL4() {
        try {
            ZipSplitReadOnlySeekableByteChannel.forPaths((Path) null);
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesWithNullFileInFilesArray_cZEb4_upLo0() {
    final File[] files = {null};
    try {
        final SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles(files);
        fail("Expected IOException");
    } catch (final IOException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testForFilesWithEmptyFilesArray_rosn3_fid1() throws IOException {
    final SeekableByteChannel channel = ZipSplitReadOnlySeekableByteChannel.forFiles();
    assertNotNull(channel);
}
}