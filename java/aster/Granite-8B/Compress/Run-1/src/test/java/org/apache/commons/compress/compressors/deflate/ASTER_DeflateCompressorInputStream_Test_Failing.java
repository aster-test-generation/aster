/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeflateCompressorInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_FVwc0() throws IOException {
        DeflateCompressorInputStream deflateCompressorInputStream = new DeflateCompressorInputStream(null);
        long result = deflateCompressorInputStream.skip(1);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip1_bOwb1() throws IOException {
        DeflateCompressorInputStream deflateCompressorInputStream = new DeflateCompressorInputStream(null, null);
        long result = deflateCompressorInputStream.skip(1);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip3_vUcW3() throws IOException {
        DeflateCompressorInputStream deflateCompressorInputStream = new DeflateCompressorInputStream(null, null);
        long result = deflateCompressorInputStream.skip(0);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip4_ZTdB4() throws IOException {
        DeflateCompressorInputStream deflateCompressorInputStream = new DeflateCompressorInputStream(null);
        long result = deflateCompressorInputStream.skip(-1);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip5_nJeK5() throws IOException {
        DeflateCompressorInputStream deflateCompressorInputStream = new DeflateCompressorInputStream(null, null);
        long result = deflateCompressorInputStream.skip(-1);
        assertEquals(0, result);
    }
}