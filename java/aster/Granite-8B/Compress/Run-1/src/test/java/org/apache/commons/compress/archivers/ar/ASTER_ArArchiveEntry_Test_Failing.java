/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentLength_iBIt5() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name", 100L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name", 200L);
		boolean result = entry1.equals(entry2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentUserId_UuuR6() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name", 100L, 100, 200, 300, 400L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name", 100L, 200, 200, 300, 400L);
		boolean result = entry1.equals(entry2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentGroupId_JFLP7() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name", 100L, 100, 200, 300, 400L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name", 100L, 100, 300, 300, 400L);
		boolean result = entry1.equals(entry2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentMode_ARMq8() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name", 100L, 100, 200, 300, 400L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name", 100L, 100, 200, 400, 400L);
		boolean result = entry1.equals(entry2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentLastModified_NAcI9() {
		ArArchiveEntry entry1 = new ArArchiveEntry("name", 100L, 100, 200, 300, 400L);
		ArArchiveEntry entry2 = new ArArchiveEntry("name", 100L, 100, 200, 300, 500L);
		boolean result = entry1.equals(entry2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithFile_DLZx3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input.txt"), "entryName");
        assertEquals(10L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_IrUb0() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 123L);
    assertEquals(123456789, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithUserId_pFQi2() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 123L, 123, 456, 789, 1000L);
    assertEquals(123456789, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCodeWithFile_sLXg3() throws IOException {
    File file = new File("path/to/file");
    ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
    assertEquals(123456789, entry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithNullName_BbKP4() {
        ArArchiveEntry entry = new ArArchiveEntry(null, 100);
        assertEquals("", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArArchiveEntryGetLengthWithFile_erKZ3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input.txt"), "entryName");
        assertEquals(10L, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_with_name_length_CzIC0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        assertEquals(0, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_with_inputFile_entryName_emBz3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input"), "entryName");
        assertEquals(0, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified_wnRF0() {
    ArArchiveEntry entry = new ArArchiveEntry("name", 123L);
    assertEquals(123L, entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModifiedWithFile_bLab3() throws IOException {
    File file = new File("file");
    ArArchiveEntry entry = new ArArchiveEntry(file, "entryName");
    assertEquals(Files.getLastModifiedTime(file.toPath()).toMillis(), entry.getLastModified());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLastModified_wnRF0_fid1() {
    ArArchiveEntry entry = new ArArchiveEntry("name",1719029662L);
    assertEquals(123L, entry.getLastModified());
}
}