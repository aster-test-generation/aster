/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import java.util.Arrays;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MultiReadOnlySeekableByteChannel_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncate_FHMI0() {
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(Arrays.asList(new SeekableByteChannel[0]));
        SeekableByteChannel result = channel.truncate(0L);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_SIdF0() {
        List<SeekableByteChannel> channels = null; // Initialize channels
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
        ByteBuffer src = ByteBuffer.allocate(10); // Initialize src
        int bytesWritten = multiReadOnlySeekableByteChannel.write(src);
        assertEquals(0, bytesWritten); // Assert that 0 bytes were written
        assertTrue(src.hasRemaining()); // Assert that src has remaining bytes
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_GsYU0() throws IOException {
        MultiReadOnlySeekableByteChannel channel = new MultiReadOnlySeekableByteChannel(null);
        assertEquals(0, channel.size());
    }
}