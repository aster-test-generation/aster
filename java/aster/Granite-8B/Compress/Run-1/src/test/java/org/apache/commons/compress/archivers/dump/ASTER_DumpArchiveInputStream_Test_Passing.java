/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.io.IOException;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DumpArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches1_OOGW0() {
        byte[] buffer = new byte[32];
        int length = 31;
        boolean result = DumpArchiveInputStream.matches(buffer, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOffset_utfs0() {
        DumpArchiveEntry entry = new DumpArchiveEntry();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithValidOffsetAndInvalidLength_jpOJ11() throws IOException {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches2_CZEd1_fid1() {
        byte[] buffer = new byte[32];
        int length = 32;
        boolean result = DumpArchiveInputStream.matches(buffer, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches3_pBvX2_fid1() {
        byte[] buffer = new byte[32];
        int length = 33;
        boolean result = DumpArchiveInputStream.matches(buffer, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches4_tOVz3_fid1() {
        byte[] buffer = new byte[32];
        int length = 1024;
        boolean result = DumpArchiveInputStream.matches(buffer, length);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesReadWithNullInputStreamAndNullEncoding_Ciss6_TDkp0() {
        DumpArchiveInputStream dumpArchiveInputStream = null;
        try {
            dumpArchiveInputStream = new DumpArchiveInputStream(null, null);
        } catch (ArchiveException e) {
            e.printStackTrace();
        }
        long bytesRead = 0;
        if (dumpArchiveInputStream != null) {
            bytesRead = dumpArchiveInputStream.getBytesRead();
        }
        assertEquals(0, bytesRead);
    }
}