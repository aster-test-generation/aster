/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IntList_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithEmptyList_CPMe0() {
        IntList list = new IntList();
        assertTrue(list.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNonEmptyList_zxLw1() {
        IntList list = new IntList(10);
        list.add(1);
        assertFalse(list.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithEmptyList_yLML0() {
        IntList list = new IntList();
        IntList otherList = new IntList();
        list.addAll(otherList);
        assertTrue(list.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyList_vcOD1_1() {
        IntList list = new IntList();
        IntList otherList = new IntList();
        otherList.add(1);
        otherList.add(2);
        otherList.add(3);
        list.addAll(otherList);
        assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyList_vcOD1_2() {
        IntList list = new IntList();
        IntList otherList = new IntList();
        otherList.add(1);
        otherList.add(2);
        otherList.add(3);
        list.addAll(otherList);
        assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyList_vcOD1_3() {
        IntList list = new IntList();
        IntList otherList = new IntList();
        otherList.add(1);
        otherList.add(2);
        otherList.add(3);
        list.addAll(otherList);
        assertEquals(2, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyList_vcOD1_4() {
        IntList list = new IntList();
        IntList otherList = new IntList();
        otherList.add(1);
        otherList.add(2);
        otherList.add(3);
        list.addAll(otherList);
        assertEquals(3, list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArray_NEIV0_1() {
        IntList intList = new IntList(10);
        int[] array = intList.toArray();
        assertNotNull(array);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArray_NEIV0_2() {
        IntList intList = new IntList(0);
        int[] array = intList.toArray();
        assertEquals(0, array.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArrayWithEmptyList_CkhX2_1() {
        IntList intList = new IntList();
        int[] array = intList.toArray();
        assertNotNull(array);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArrayWithEmptyList_CkhX2_2() {
        IntList intList = new IntList();
        int[] array = intList.toArray();
        assertEquals(0, array.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_QmDs0() {
        IntList intList = new IntList(10);
        intList.add(0, 1);
        assert intList.get(0) == 1;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationZero_CQKY0() {
    IntList list = new IntList(10);
    list.add(0, 1);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationZeroWithEmptyList_CLAF8() {
    IntList list = new IntList(0);
    list.add(0, 1);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationZeroWithFullList_kuwX9() {
    IntList list = new IntList(10);
    for (int i = 0; i < 10; i++) {
        list.add(0, 1);
    }
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationZeroWithFullListAndGrow_yTqL10() {
    IntList list = new IntList(10);
    for (int i = 0; i < 10; i++) {
        list.add(0, 1);
    }
    list.add(0, 1);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAddAtLocationZeroWithFullListAndGrowAndShrink_rmAZ11() {
    IntList list = new IntList(10);
    for (int i = 0; i < 10; i++) {
        list.add(0, 1);
    }
    list.add(0, 1);
    list.remove(0);
    assertEquals(1, list.get(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_ftBf1_1() {
        IntList list = new IntList(11);
        list.add(5);
        list.add(11);
        list.remove(1);
        assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_ftBf0_2() {
        IntList list = new IntList(10);
        list.add(5);
        list.add(10);
        list.remove(0);
        assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyList_vcOD1() {
        IntList list = new IntList();
        IntList otherList = new IntList();
        otherList.add(1);
        otherList.add(2);
        otherList.add(3);
        list.addAll(otherList);
        assertEquals(3, list.size());
        assertEquals(1, list.get(0));
        assertEquals(2, list.get(1));
        assertEquals(3, list.get(2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArrayWithEmptyList_CkhX2() {
        IntList intList = new IntList();
        int[] array = intList.toArray();
        assertNotNull(array);
        assertEquals(0, array.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_ftBf0() {
        IntList list = new IntList(10);
        assertEquals(0, list.size());
        list.add(5);
        assertEquals(1, list.size());
        list.add(10);
        assertEquals(2, list.size());
        list.remove(0);
        assertEquals(1, list.size());
    }
}