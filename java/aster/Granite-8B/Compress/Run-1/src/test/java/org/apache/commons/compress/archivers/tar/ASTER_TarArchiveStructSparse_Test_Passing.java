/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveStructSparse_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOffset_EpBI0() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(10L, 20L);
        long offset = tarArchiveStructSparse.getOffset();
        assertEquals(10L, offset);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_LBlN0() {
        TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(1L, 2L);
        String actualResult = tarArchiveStructSparse.toString();
        String expectedResult = "TarArchiveStructSparse{offset=1, numbytes=2}";
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetNumbytes_lnaO0() {
		TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0, 1);
		long numbytes = tarArchiveStructSparse.getNumbytes();
		assertEquals(1, numbytes);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameObject_WwdA0() {
		TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
		boolean result = tarArchiveStructSparse.equals(tarArchiveStructSparse);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithNull_Pbrk1() {
		TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
		boolean result = tarArchiveStructSparse.equals(null);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentClass_KHLg2() {
		TarArchiveStructSparse tarArchiveStructSparse = new TarArchiveStructSparse(0L, 0L);
		boolean result = tarArchiveStructSparse.equals("string");
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentOffset_WlNu3() {
		TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(0L, 0L);
		TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(1L, 0L);
		boolean result = tarArchiveStructSparse1.equals(tarArchiveStructSparse2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentNumbytes_soPv4() {
		TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(0L, 0L);
		TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(0L, 1L);
		boolean result = tarArchiveStructSparse1.equals(tarArchiveStructSparse2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameValues_Hggi5() {
		TarArchiveStructSparse tarArchiveStructSparse1 = new TarArchiveStructSparse(0L, 0L);
		TarArchiveStructSparse tarArchiveStructSparse2 = new TarArchiveStructSparse(0L, 0L);
		boolean result = tarArchiveStructSparse1.equals(tarArchiveStructSparse2);
		assertTrue(result);
	}
}