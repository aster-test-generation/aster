/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveOutputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRecordSize2_avna1() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(null, 0);
        int recordSize = tarArchiveOutputStream.getRecordSize();
        assertEquals(0, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRecordSize3_fYcE2() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(null, 0, 0);
        int recordSize = tarArchiveOutputStream.getRecordSize();
        assertEquals(0, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRecordSize4_ukPa3() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(null, 0, 0, "");
        int recordSize = tarArchiveOutputStream.getRecordSize();
        assertEquals(0, recordSize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWrittenWithBlockSizeAndRecordSize_zNLy3() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024, 2048);
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWrittenWithBlockSizeRecordSizeAndEncoding_AMot5() {
        TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(System.out, 1024, 2048, "UTF-8");
        long bytesWritten = tarArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
}