/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TarArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModTime4_KcUw4() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModTime5_gREG5() {
        String name = "test.txt";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModTime7_Lziq7() {
        String name = "test.txt";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModTime9_nQPD9() {
        File file = new File("test.txt");
        String fileName = "test.txt";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModTime10_QWKB10() {
        File file = new File("test.txt");
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetDevMajor4_cEPz4() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        int result = tarArchiveEntry.getDevMajor();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetDevMajor5_vmYd5() {
        String name = "";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        int result = tarArchiveEntry.getDevMajor();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetDevMajor7_BftW7() {
        String name = "";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        int result = tarArchiveEntry.getDevMajor();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag5_cGXQ4() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        byte linkFlag = tarArchiveEntry.getLinkFlag();
        assertEquals((byte) 0, linkFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag6_sMxV5() {
        String name = "";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        byte result = tarArchiveEntry.getLinkFlag();
        assertEquals((byte) 0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkWithLinkFlagSetToChar_OATq1() {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 2, true);
        assertTrue(!entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendent_zQqd0() {
        TarArchiveEntry entry = new TarArchiveEntry("parent/child");
        TarArchiveEntry descendant = new TarArchiveEntry("parent/child/grandchild");
        assertTrue(entry.isDescendent(descendant));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendentWithDifferentPaths_WVhQ1() {
        TarArchiveEntry entry = new TarArchiveEntry("parent/child");
        TarArchiveEntry descendant = new TarArchiveEntry("parent/otherchild");
        assertFalse(entry.isDescendent(descendant));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDescendentWithNoCommonPath_RWZV2() {
        TarArchiveEntry entry = new TarArchiveEntry("parent/child");
        TarArchiveEntry descendant = new TarArchiveEntry("otherparent/otherchild");
        assertFalse(entry.isDescendent(descendant));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedTime_LnqV0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", (byte) 0, false);
        FileTime time = FileTime.fromMillis(1234567890L);
        tarArchiveEntry.setLastModifiedTime(time);
        assertEquals(time, tarArchiveEntry.getLastModifiedTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkName_YMkn4() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0);
        tarArchiveEntry.setLinkName("link");
        assertEquals("link", tarArchiveEntry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkName_jktt5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("name", (byte) 0, false);
        tarArchiveEntry.setLinkName("link");
        assertEquals("link", tarArchiveEntry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkName_aGSU8() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"), "fileName");
        tarArchiveEntry.setLinkName("link");
        assertEquals("link", tarArchiveEntry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLinkName_eUjK9() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("file"));
        tarArchiveEntry.setLinkName("link");
        assertEquals("link", tarArchiveEntry.getLinkName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMode4_hDqy4() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry entry = new TarArchiveEntry(headerBuf);
        int mode = entry.getMode();
        assertEquals(0, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag8_KNij7_fid1() {
        String name = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name);
        byte linkFlag = tarArchiveEntry.getLinkFlag();
        assertEquals((byte)48, linkFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag9_LAAO8_fid1() {
        String name = "";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        byte linkFlag = tarArchiveEntry.getLinkFlag();
        assertEquals((byte)48, linkFlag);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkWithLinkFlagSetToLink_pTVf0_fid1() {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 1, true);
        assertFalse(entry.isLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMode8_iIZP8_fid1() {
        String name = "";
        TarArchiveEntry entry = new TarArchiveEntry(name);
        int mode = entry.getMode();
        assertEquals(33188, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMode9_yJRB9_fid1() {
        String name = "";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry entry = new TarArchiveEntry(name, preserveAbsolutePath);
        int mode = entry.getMode();
        assertEquals(33188, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModTime_EKxE0_mjoX0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(new File("test.txt"), "test.txt");
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWhenSizeIsPositive_DwrZ2_HndW0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test");
        tarArchiveEntry.setSize(100);
        assertEquals(100, tarArchiveEntry.getSize());
    }
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDeviceWithHeaderBuf_UGKx3_AxYv0_1() throws IOException {
        byte[] headerBuf = new byte[512];
        headerBuf[156] = 1;
        TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(headerBuf);
        headerBuf[156] = 2;
        TarArchiveEntry tarArchiveEntry2 = new TarArchiveEntry(headerBuf);
        assertFalse(tarArchiveEntry1.isCharacterDevice());}
@Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDeviceWithHeaderBuf_UGKx3_AxYv0_2() throws IOException {
        byte[] headerBuf = new byte[512];
        headerBuf[156] = 1;
        TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(headerBuf);
        headerBuf[156] = 2;
        TarArchiveEntry tarArchiveEntry2 = new TarArchiveEntry(headerBuf);
        assertFalse(tarArchiveEntry2.isCharacterDevice());}
}