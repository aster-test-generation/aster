/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeflateParameters_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompressionLevel_VkrA0() {
        DeflateParameters deflateParameters = new DeflateParameters();
        int compressionLevel = deflateParameters.getCompressionLevel();
        assertEquals(0, compressionLevel);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithZlibHeader_HEFa0() {
        DeflateParameters deflateParameters = new DeflateParameters();
        boolean result = deflateParameters.withZlibHeader();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressionLevelWithInvalidLevel_MSiD1() {
        DeflateParameters deflateParameters = new DeflateParameters();
        try {
            deflateParameters.setCompressionLevel(0);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("Invalid Deflate compression level"));
        }
    }
}