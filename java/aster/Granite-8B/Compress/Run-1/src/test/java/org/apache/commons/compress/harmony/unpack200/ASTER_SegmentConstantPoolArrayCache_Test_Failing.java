/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.util.Collections;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentConstantPoolArrayCache_Test_Failing {
private SegmentConstantPoolArrayCache segmentConstantPoolArrayCache;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCacheArrayWithNullArray_iFsN0() {
        SegmentConstantPoolArrayCache cache = new SegmentConstantPoolArrayCache();
        String[] array = null;
        assert !cache.arrayIsCached(array);
        cache.cacheArray(array);
        assert cache.arrayIsCached(array);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexesForArrayKeyWhenArrayIsCached_sVgR1() {
        String[] array = new String[]{"key1", "key2", "key3"};
        segmentConstantPoolArrayCache.cacheArray(array);
        String key = "key2";
        List<Integer> expectedIndexes = Arrays.asList(1);
        List<Integer> actualIndexes = segmentConstantPoolArrayCache.indexesForArrayKey(array, key);
        assertEquals(expectedIndexes, actualIndexes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexesForArrayKeyWhenArrayIsNotCached_pZlA2() {
        String[] array = new String[]{"key1", "key2", "key3"};
        String key = "key2";
        List<Integer> expectedIndexes = Arrays.asList(1);
        List<Integer> actualIndexes = segmentConstantPoolArrayCache.indexesForArrayKey(array, key);
        assertEquals(expectedIndexes, actualIndexes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexesForArrayKeyWhenArrayIsCachedAndKeyIsNotFound_uJEq3() {
        String[] array = new String[]{"key1", "key2", "key3"};
        segmentConstantPoolArrayCache.cacheArray(array);
        String key = "key4";
        List<Integer> expectedIndexes = Collections.emptyList();
        List<Integer> actualIndexes = segmentConstantPoolArrayCache.indexesForArrayKey(array, key);
        assertEquals(expectedIndexes, actualIndexes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexesForArrayKeyWhenArrayIsNotCachedAndKeyIsNotFound_noPP4() {
        String[] array = new String[]{"key1", "key2", "key3"};
        String key = "key4";
        List<Integer> expectedIndexes = Collections.emptyList();
        List<Integer> actualIndexes = segmentConstantPoolArrayCache.indexesForArrayKey(array, key);
        assertEquals(expectedIndexes, actualIndexes);
    }
}