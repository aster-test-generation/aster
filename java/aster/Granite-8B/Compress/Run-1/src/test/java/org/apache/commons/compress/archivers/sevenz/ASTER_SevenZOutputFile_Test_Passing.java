/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.OpenOption;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZOutputFile_Test_Passing {
final ByteArrayOutputStream baos = new ByteArrayOutputStream();
final byte[] contents = baos.toByteArray();
final DataOutputStream out = new DataOutputStream(baos);

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_LQwG0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithFileName_ICte2() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        sevenZOutputFile.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithFinishedObject_XKaY4() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        sevenZOutputFile.finish();
        try {
            sevenZOutputFile.finish();
            fail("Expected IOException");
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void finish_HnVK4() throws IOException {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithFileNameAndPassword_RPuu0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), new char[] {'p', 'a', 's', 's', 'w', 'o', 'r', 'd'});
    sevenZOutputFile.finish();
    sevenZOutputFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithFileName_QjnO1() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
    sevenZOutputFile.finish();
    sevenZOutputFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_WxNg0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.finish();
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithNullPassword_WNQK1() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), null);
        sevenZOutputFile.finish();
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithFinishedFile_CtfH4() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.finish();
        try {
            sevenZOutputFile.finish();
            fail("Expected IOException");
        } catch (IOException e) {
        }
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFinish_OqzU0() throws IOException {
		SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), new char[] {'a', 'b'});
		sevenZOutputFile.finish();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_mHwI0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), new char[0]);
        sevenZOutputFile.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_NlIn0() throws IOException {
    SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), new char[0]);
    sevenZOutputFile.finish();
    sevenZOutputFile.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithNullPassword_Ojiw1() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), null);
        sevenZOutputFile.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithFileAndPassword_yFqy0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.write(new File("test.txt").toPath(), new OpenOption[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithFile_AgMH3() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        sevenZOutputFile.write(new File("test.txt").toPath(), new OpenOption[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFileNameAndPassword_Csss0() throws IOException {
        SevenZOutputFile sevenZOutputFile = new SevenZOutputFile(new File("test.7z"), "password".toCharArray());
        sevenZOutputFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveEntry_oONH0_zsHs0() {
        SevenZOutputFile sevenZOutputFile = null;
        try {
            sevenZOutputFile = new SevenZOutputFile(new File("test.7z"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        SevenZArchiveEntry entry = sevenZOutputFile.createArchiveEntry(new File("test.txt"), "test.txt");
        assert entry.isDirectory() == false;
        assert entry.getName().equals("test.txt");
        assert entry.getLastModifiedTime() != null;
        assert entry.getCreationTime() != null;
        assert entry.getAccessTime() != null;
    }
}