/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMACompressorInputStream_Test_Failing {
    private InputStream in;
    private LZMACompressorInputStream lzmaCompressorInputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable_cdxl1() throws IOException {
        int available = lzmaCompressorInputStream.available();
        assertEquals(1024, available);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableWithMemoryLimit_HwbU2() throws IOException {
        lzmaCompressorInputStream = new LZMACompressorInputStream(in, 1024);
        int available = lzmaCompressorInputStream.available();
        assertEquals(1024, available);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_xCzJ0() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
        long n = 0;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip2_qTCK1() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 0);
        long n = 0;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip3_sXra2() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
        long n = 1;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip4_Cgmu3() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 0);
        long n = 1;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip5_NTQw4() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
        long n = -1;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip6_ZQvN5() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 0);
        long n = -1;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip7_zFMl6() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
        long n = Long.MAX_VALUE;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip8_HhKV7() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, 0);
        long n = Long.MAX_VALUE;
        long result = lzmaCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_MbNN0() throws IOException {
        InputStream inputStream = null;
        int memoryLimitInKb = 0;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream, memoryLimitInKb);
        lzmaCompressorInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose2_sEEM1() throws IOException {
        InputStream inputStream = null;
        LZMACompressorInputStream lzmaCompressorInputStream = new LZMACompressorInputStream(inputStream);
        lzmaCompressorInputStream.close();
    }
}