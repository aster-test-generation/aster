/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.util.Set;
import org.apache.commons.compress.utils.Sets;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveStreamFactory_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testOutputStreamArchiveNames_vfBt0() {
		ArchiveStreamFactory archiveStreamFactory = new ArchiveStreamFactory();
		Set<String> expected = Sets.newHashSet("ar", "zip", "tar", "jar", "cpio", "7z");
		assertEquals(expected, archiveStreamFactory.getOutputStreamArchiveNames());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGettingEntryEncoding_AFVf0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        assertEquals("UTF-8", factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGettingEntryEncodingWithNoEncodingSet_zaNI1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        assertEquals(null, factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testingGetInputStreamArchiveNames_QnVy0_1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getInputStreamArchiveNames();
        assertEquals(8, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testingGetInputStreamArchiveNames_QnVy0_2() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getInputStreamArchiveNames();
        assertTrue(archiveNames.contains("ar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testingGetInputStreamArchiveNames_QnVy0_3() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getInputStreamArchiveNames();
        assertTrue(archiveNames.contains("arj"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testingGetInputStreamArchiveNames_QnVy0_4() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getInputStreamArchiveNames();
        assertTrue(archiveNames.contains("zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testingGetInputStreamArchiveNames_QnVy0_5() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getInputStreamArchiveNames();
        assertTrue(archiveNames.contains("tar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testingGetInputStreamArchiveNames_QnVy0_6() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getInputStreamArchiveNames();
        assertTrue(archiveNames.contains("jar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testingGetInputStreamArchiveNames_QnVy0_7() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getInputStreamArchiveNames();
        assertTrue(archiveNames.contains("cpio"));}
}