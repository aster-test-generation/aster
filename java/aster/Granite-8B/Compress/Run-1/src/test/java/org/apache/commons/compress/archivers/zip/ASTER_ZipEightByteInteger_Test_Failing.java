/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBytes2_OUSD1() {
		ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("12345678901234567890"));
		byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
		byte[] actual = zipEightByteInteger.getBytes();
		assert expected.length == actual.length : " lengths differ";
		for (int i = 0; i < expected.length; i++) {
			assert expected[i] == actual[i] : " byte " + i + " differ";
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueWithOffset_noBC1_2() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 1;
    assertEquals(256L, ZipEightByteInteger.getLongValue(bytes, 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueWithOffset_noBC1_3() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 1;
    assertEquals(65536L, ZipEightByteInteger.getLongValue(bytes, 2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueWithOffset_noBC1_4() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 1;
    assertEquals(16777216L, ZipEightByteInteger.getLongValue(bytes, 3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueWithOffset_noBC1_5() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 1;
    assertEquals(4294967296L, ZipEightByteInteger.getLongValue(bytes, 4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueWithOffset_noBC1_6() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 1;
    assertEquals(1099511627776L, ZipEightByteInteger.getLongValue(bytes, 5));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueWithOffset_noBC1_7() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 1;
    assertEquals(281474976710656L, ZipEightByteInteger.getLongValue(bytes, 6));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueWithOffset_noBC1_8() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 1;
    assertEquals(72057594037927936L, ZipEightByteInteger.getLongValue(bytes, 7));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesBigInteger_vprB0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("12345678901234567890"));
        byte[] result = ZipEightByteInteger.getBytes(new BigInteger("12345678901234567890"));
        byte[] expected = new byte[]{(byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34};
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_reEg0_fid1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        String expected = "ZipEightByteInteger value: 12345678";
        assertEquals(expected, zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_VvBm0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        BigInteger expectedValue = BigInteger.ONE;
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue4_egld3_fid1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
        BigInteger expectedValue = new BigInteger("12345678");
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBytes_ehGU0() {
		ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
		byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
		byte[] actual = zipEightByteInteger.getBytes();
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBytes2_OUSD1_fid1() {
		ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("12345678901234567890"));
		byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
		byte[] actual = zipEightByteInteger.getBytes();
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetBytes4_xqEp3_fid1() {
		ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
		byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8};
		byte[] actual = zipEightByteInteger.getBytes();
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_bbmC0() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 1;
    assertEquals(1L, ZipEightByteInteger.getLongValue(bytes));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueWithOffset_noBC1_1() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 1;
    assertEquals(1L, ZipEightByteInteger.getLongValue(bytes, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_UjGM0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        long longValue = zipEightByteInteger.getLongValue();
        assertEquals(1L, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromLong_eigh0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234567890L);
        byte[] expected = new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0xD2, (byte) 0x9B, (byte) 0x4D};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromBigInteger_hgip1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1234567890L));
        byte[] expected = new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0xD2, (byte) 0x9B, (byte) 0x4D};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromByteArrayAndOffset_uvQh3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, -46, -99, -115, 77}, 28);
        byte[] expected = new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0xD2, (byte) 0x9B, (byte) 0x4D};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueWithLong_wfAc3_kXmJ0() {
    final byte[] bytes = new byte[8];
    bytes[0] = (byte) ((1234567890123456789L >> 56) & 0xFF);
    bytes[1] = (byte) ((1234567890123456789L >> 48) & 0xFF);
    bytes[2] = (byte) ((1234567890123456789L >> 40) & 0xFF);
    bytes[3] = (byte) ((1234567890123456789L >> 32) & 0xFF);
    bytes[4] = (byte) ((1234567890123456789L >> 24) & 0xFF);
    bytes[5] = (byte) ((1234567890123456789L >> 16) & 0xFF);
    bytes[6] = (byte) ((1234567890123456789L >> 8) & 0xFF);
    bytes[7] = (byte) (1234567890123456789L & 0xFF);
    assertEquals(1234567890123456789L, ZipEightByteInteger.getLongValue(bytes, 0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetValueBigInteger_gYma1_xesW0() {
		BigInteger value = BigInteger.ZERO;
		BigInteger expectedValue = BigInteger.ZERO;
		byte[] bytes = value.toByteArray();
		BigInteger actualValue = ZipEightByteInteger.getValue(bytes, 0);
		assertEquals(expectedValue, actualValue);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesByteArrayOffset_sHUW3_gCAE0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0, (byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34}, 9);
        byte[] result = zipEightByteInteger.getBytes();
        byte[] expected = new byte[]{(byte) 0x90, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78, (byte) 0x90, (byte) 0x12, (byte) 0x34};
        assertArrayEquals(expected, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithOffset_kWUJ0_uRDa0() {
        byte[] bytes = new byte[10];
        bytes[0] = (byte) 0b10000000;
        bytes[1] = 0b01010101;
        bytes[2] = 0b01010101;
        bytes[3] = 0b01010101;
        bytes[4] = 0b01010101;
        bytes[5] = 0b01010101;
        bytes[6] = 0b01010101;
        bytes[7] = 0b01010101;
        bytes[8] = 0b01010101;
        bytes[9] = 0b01010101;
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 0);
        BigInteger expectedValue = new BigInteger("12345678901234567890", 10);
        BigInteger actualValue = zipEightByteInteger.getValue(bytes, 0);
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithByteArray_AHED3_yLQP0_fid1() {
        byte[] bytes = new byte[10];
        bytes[0] = (byte) 0b10000000;
        bytes[1] = 0b01010101;
        bytes[2] = 0b01010101;
        bytes[3] = 0b01010101;
        bytes[4] = 0b01010101;
        bytes[5] = 0b01010101;
        bytes[6] = 0b01010101;
        bytes[7] = 0b01010101;
        bytes[8] = 0b01010101;
        bytes[9] = 0b01010101;
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        BigInteger expectedValue = new BigInteger("12345678901234567890", 10);
        BigInteger actualValue = zipEightByteInteger.getValue(bytes);
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValueWithOffset_noBC1() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 0;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 1;
    assertEquals(1L, ZipEightByteInteger.getLongValue(bytes, 0));
    assertEquals(256L, ZipEightByteInteger.getLongValue(bytes, 1));
    assertEquals(65536L, ZipEightByteInteger.getLongValue(bytes, 2));
    assertEquals(16777216L, ZipEightByteInteger.getLongValue(bytes, 3));
    assertEquals(4294967296L, ZipEightByteInteger.getLongValue(bytes, 4));
    assertEquals(1099511627776L, ZipEightByteInteger.getLongValue(bytes, 5));
    assertEquals(281474976710656L, ZipEightByteInteger.getLongValue(bytes, 6));
    assertEquals(72057594037927936L, ZipEightByteInteger.getLongValue(bytes, 7));
}
}