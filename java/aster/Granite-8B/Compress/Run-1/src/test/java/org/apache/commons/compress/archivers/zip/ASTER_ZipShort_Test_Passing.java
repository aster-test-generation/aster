/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_MemN0() {
        ZipShort zipShort1 = new ZipShort(new byte[]{0, 1}, 0);
        ZipShort zipShort2 = new ZipShort(new byte[]{0, 1}, 0);
        assertTrue(zipShort1.equals(zipShort2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentValue_Tswi1() {
        ZipShort zipShort1 = new ZipShort(1);
        ZipShort zipShort2 = new ZipShort(2);
        assertFalse(zipShort1.equals(zipShort2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentType_sRSM2() {
        ZipShort zipShort = new ZipShort(1);
        assertFalse(zipShort.equals("1"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPutShort_Kqid0_1() {
		byte[] buf = new byte[2];
		ZipShort.putShort(1, buf, 0);
		assertEquals(1, buf[0] & 0xff);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPutShort_Kqid0_2() {
		byte[] buf = new byte[2];
		ZipShort.putShort(1, buf, 0);
		assertEquals(0, buf[1] & 0xff);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_QJjF0() {
		ZipShort zipShort = new ZipShort(10);
		assertEquals("ZipShort value: 10", zipShort.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToStringWithArray_eham3() {
		byte[] bytes = new byte[2];
		bytes[0] = 0;
		bytes[1] = 10;
		ZipShort zipShort = new ZipShort(bytes);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_zFzU0_1() {
        ZipShort zipShort = new ZipShort(10);
        byte[] bytes = zipShort.getBytes();
        assertEquals(2, bytes.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_zFzU0_2() {
        ZipShort zipShort = new ZipShort(10);
        byte[] bytes = zipShort.getBytes();
        assertEquals((byte) 10, bytes[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_zFzU0_3() {
        ZipShort zipShort = new ZipShort(10);
        byte[] bytes = zipShort.getBytes();
        assertEquals((byte) 0, bytes[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_KydG0() {
        ZipShort zipShort = new ZipShort(new byte[]{0, 1}, 0);
        assertEquals(256, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_vNlU1() {
        ZipShort zipShort = new ZipShort(1);
        assertEquals(1, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue3_GkNo2() {
        ZipShort zipShort = new ZipShort(new byte[]{0, 1});
        assertEquals(256, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue4_LswQ3() {
        ZipShort zipShort = new ZipShort(new byte[]{1, 0});
        assertEquals(1, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue5_ORch4() {
        ZipShort zipShort = new ZipShort(new byte[]{1, 1});
        assertEquals(257, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue6_jwxH5() {
        ZipShort zipShort = new ZipShort(new byte[]{0, 0});
        assertEquals(0, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue7_tQbU6() {
        ZipShort zipShort = new ZipShort(new byte[]{127, -1});
        assertEquals(65407, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue8_etMa7() {
        ZipShort zipShort = new ZipShort(new byte[]{-1, 127});
        assertEquals(32767, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue9_qVak8() {
        ZipShort zipShort = new ZipShort(new byte[]{-1, -1});
        assertEquals(65535, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue10_ELYY9() {
        ZipShort zipShort = new ZipShort(new byte[]{0, -1});
        assertEquals(65280, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_uFNo0_2() {
        ZipShort zipShort1 = new ZipShort(new byte[]{0, 1}, 0);
        ZipShort zipShort2 = new ZipShort(1);
        assertEquals(1, zipShort2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_WrYV0_1() {
        ZipShort zipShort1 = new ZipShort(new byte[]{1, 2}, 0);
        ZipShort zipShort2 = new ZipShort(10);
        ZipShort zipShort3 = new ZipShort(new byte[]{3, 4});
        ZipShort clonedZipShort1 = (ZipShort) zipShort1.clone();
        ZipShort clonedZipShort2 = (ZipShort) zipShort2.clone();
        ZipShort clonedZipShort3 = (ZipShort) zipShort3.clone();
        assertNotSame(zipShort1, clonedZipShort1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_WrYV0_2() {
        ZipShort zipShort1 = new ZipShort(new byte[]{1, 2}, 0);
        ZipShort zipShort2 = new ZipShort(10);
        ZipShort zipShort3 = new ZipShort(new byte[]{3, 4});
        ZipShort clonedZipShort1 = (ZipShort) zipShort1.clone();
        ZipShort clonedZipShort2 = (ZipShort) zipShort2.clone();
        ZipShort clonedZipShort3 = (ZipShort) zipShort3.clone();
        assertNotSame(zipShort2, clonedZipShort2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_WrYV0_3() {
        ZipShort zipShort1 = new ZipShort(new byte[]{1, 2}, 0);
        ZipShort zipShort2 = new ZipShort(10);
        ZipShort zipShort3 = new ZipShort(new byte[]{3, 4});
        ZipShort clonedZipShort1 = (ZipShort) zipShort1.clone();
        ZipShort clonedZipShort2 = (ZipShort) zipShort2.clone();
        ZipShort clonedZipShort3 = (ZipShort) zipShort3.clone();
        assertNotSame(zipShort3, clonedZipShort3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_WrYV0_4() {
        ZipShort zipShort1 = new ZipShort(new byte[]{1, 2}, 0);
        ZipShort zipShort2 = new ZipShort(10);
        ZipShort zipShort3 = new ZipShort(new byte[]{3, 4});
        ZipShort clonedZipShort1 = (ZipShort) zipShort1.clone();
        ZipShort clonedZipShort2 = (ZipShort) zipShort2.clone();
        ZipShort clonedZipShort3 = (ZipShort) zipShort3.clone();
        assertEquals(zipShort1.getValue(), clonedZipShort1.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_WrYV0_5() {
        ZipShort zipShort1 = new ZipShort(new byte[]{1, 2}, 0);
        ZipShort zipShort2 = new ZipShort(10);
        ZipShort zipShort3 = new ZipShort(new byte[]{3, 4});
        ZipShort clonedZipShort1 = (ZipShort) zipShort1.clone();
        ZipShort clonedZipShort2 = (ZipShort) zipShort2.clone();
        ZipShort clonedZipShort3 = (ZipShort) zipShort3.clone();
        assertEquals(zipShort2.getValue(), clonedZipShort2.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_WrYV0_6() {
        ZipShort zipShort1 = new ZipShort(new byte[]{1, 2}, 0);
        ZipShort zipShort2 = new ZipShort(10);
        ZipShort zipShort3 = new ZipShort(new byte[]{3, 4});
        ZipShort clonedZipShort1 = (ZipShort) zipShort1.clone();
        ZipShort clonedZipShort2 = (ZipShort) zipShort2.clone();
        ZipShort clonedZipShort3 = (ZipShort) zipShort3.clone();
        assertEquals(zipShort3.getValue(), clonedZipShort3.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Psac0() {
        ZipShort zipShort = new ZipShort(new byte[]{0x01, 0x02}, 0);
        assertEquals(513, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_Yesr1() {
        ZipShort zipShort = new ZipShort(513);
        assertEquals(513, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue3_oLpD2() {
        ZipShort zipShort = new ZipShort(new byte[]{0x01, 0x02});
        assertEquals(513, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset_mziQ0() {
    byte[] bytes = {0x01, 0x02};
    int offset = 0;
    int expected = 0x0102;
    int actual = ZipShort.getValue(bytes, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset3_FIyd4() {
    byte[] bytes = {0x05, 0x06};
    int offset = 0;
    int expected = 0x0506;
    int actual = ZipShort.getValue(bytes, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset5_SbyG6() {
    byte[] bytes = {0x09, 0x0A};
    int offset = 0;
    int expected = 0x090A;
    int actual = ZipShort.getValue(bytes, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset7_iFng8() {
    byte[] bytes = {0x0D, 0x0E};
    int offset = 0;
    int expected = 0x0D0E;
    int actual = ZipShort.getValue(bytes, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithByteArrayAndOffset9_dLQj10() {
    byte[] bytes = {0x11, 0x12};
    int offset = 0;
    int expected = 0x1112;
    int actual = ZipShort.getValue(bytes, offset);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesInt_BZhS0() {
        byte[] result = ZipShort.getBytes(0);
        assert result.length == 2;
        assert result[0] == 0;
        assert result[1] == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueWithInt_mJGh2_fZmB0() {
    int value = 0x0102;
    int expected = 0x0102;
    byte[] bytes = ZipShort.getBytes(value);
    int actual = ZipShort.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testPutShort_Kqid0() {
		byte[] buf = new byte[2];
		ZipShort.putShort(1, buf, 0);
		assertEquals(1, buf[0] & 0xff);
		assertEquals(0, buf[1] & 0xff);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_zFzU0() {
        ZipShort zipShort = new ZipShort(10);
        byte[] bytes = zipShort.getBytes();
        assertEquals(2, bytes.length);
        assertEquals((byte) 10, bytes[0]);
        assertEquals((byte) 0, bytes[1]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_WrYV0() {
        ZipShort zipShort1 = new ZipShort(new byte[]{1, 2}, 0);
        ZipShort zipShort2 = new ZipShort(10);
        ZipShort zipShort3 = new ZipShort(new byte[]{3, 4});
        ZipShort clonedZipShort1 = (ZipShort) zipShort1.clone();
        ZipShort clonedZipShort2 = (ZipShort) zipShort2.clone();
        ZipShort clonedZipShort3 = (ZipShort) zipShort3.clone();
        assertNotSame(zipShort1, clonedZipShort1);
        assertNotSame(zipShort2, clonedZipShort2);
        assertNotSame(zipShort3, clonedZipShort3);
        assertEquals(zipShort1.getValue(), clonedZipShort1.getValue());
        assertEquals(zipShort2.getValue(), clonedZipShort2.getValue());
        assertEquals(zipShort3.getValue(), clonedZipShort3.getValue());
    }
}