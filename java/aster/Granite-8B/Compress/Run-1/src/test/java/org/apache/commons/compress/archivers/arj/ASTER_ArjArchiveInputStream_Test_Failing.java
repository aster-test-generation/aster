/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import java.io.ByteArrayInputStream;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveInputStream_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_wLAe3() {
        ArjArchiveEntry entry1 = new ArjArchiveEntry();
        ArjArchiveEntry entry2 = new ArjArchiveEntry();
        int hashCode1 = entry1.hashCode();
        int hashCode2 = entry2.hashCode();
        assertTrue(hashCode1 != hashCode2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_hXKO5() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        String name = entry.getName();
        assertNotNull(name);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructorInputStream_Khzm7() throws ArchiveException {
        ArjArchiveInputStream stream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructorInputStreamString_QwKb8() throws ArchiveException {
        ArjArchiveInputStream stream = new ArjArchiveInputStream(new ByteArrayInputStream(new byte[0]), "UTF-8");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_eddy0_GTZO0() {
        byte[] signature = new byte[2];
        signature[0] = (byte) 0xFF;
        signature[1] = (byte) 0x53;
        boolean result = ArjArchiveInputStream.matches(signature, 2);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches6_lRBh5_VfMM0() {
        byte[] signature = new byte[3];
        signature[0] = (byte) 0xFF;
        signature[1] = 0x53;
        signature[2] = 0x00;
        boolean result = ArjArchiveInputStream.matches(signature, 3);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArjArchiveInputStreamInputStream_zSXB7_cjBA0() {
        ArjArchiveInputStream stream = null;
        try {
            stream = new ArjArchiveInputStream(null);
        } catch (ArchiveException e) {
            e.printStackTrace();
        }
    }
}