/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ConstantValueAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_uKTy0() {
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(1));
        String expected = "Constant:aconst_null";
        String actual = constantValueAttribute.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_pmGZ1() {
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(1, new ClassFileEntry[0]));
        String expected = "Constant:aconst_null";
        String actual = constantValueAttribute.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testConstantValueAttributeGetLength_yGUE0() {
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(1));
    int actualLength = constantValueAttribute.getLength();
    int expectedLength = 2;
    assertEquals(expectedLength, actualLength);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_GkIY0() throws IOException {
        ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(0));
        DataOutputStream dos = new DataOutputStream(System.out);
        constantValueAttribute.writeBody(dos);
    }
@Test
@Timeout(value =-2074107191, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_Oltf0() {
    ConstantValueAttribute constantValueAttribute = new ConstantValueAttribute(new ByteCode(0));
    assertEquals(1, constantValueAttribute.hashCode());
}
}