/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingOptions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddCodeAttributeAction_UkIg0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.addCodeAttributeAction("attributeName", "action");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModificationTime_PBYw0() {
        PackingOptions packingOptions = new PackingOptions();
        String modificationTime = packingOptions.getModificationTime();
        assertNotNull(modificationTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVerbose_dkFW0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setVerbose(true);
        assertTrue(packingOptions.isVerbose());
        packingOptions.setVerbose(false);
        assertFalse(packingOptions.isVerbose());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile2_nhyf1() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "test.class";
        boolean expected = false;
        boolean actual = packingOptions.isPassFile(passFileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile4_GGiu3() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "test/test.class";
        boolean expected = false;
        boolean actual = packingOptions.isPassFile(passFileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile5_onUy4() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "test.jar";
        boolean expected = false;
        boolean actual = packingOptions.isPassFile(passFileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStripDebug_iXcI0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(true);
        boolean result = packingOptions.isStripDebug();
        assert result;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUnknownAttributeAction_bNJD1() {
        PackingOptions packingOptions = new PackingOptions();
        String unknownAttributeAction = packingOptions.getUnknownAttributeAction();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEffort_DGDY0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setEffort(10);
        assertEquals(10, packingOptions.getEffort());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrder_NTnJ0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        boolean result = packingOptions.isKeepFileOrder();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrderFalse_CCMQ1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(false);
        boolean result = packingOptions.isKeepFileOrder();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrderDefault_EuVg2() {
        PackingOptions packingOptions = new PackingOptions();
        boolean result = packingOptions.isKeepFileOrder();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetStripDebug_mpNq0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHint_Keep_JgxD0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("keep");
        assertEquals("keep", packingOptions.getDeflateHint());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHint_True_PHoG1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("true");
        assertEquals("true", packingOptions.getDeflateHint());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHint_False_UiQL2() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("false");
        assertEquals("false", packingOptions.getDeflateHint());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSegmentLimit_lyDB0() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setSegmentLimit(100L);
    assertEquals(100L, packingOptions.getSegmentLimit());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSegmentLimit_dYnd1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setSegmentLimit(0L);
    assertEquals(0L, packingOptions.getSegmentLimit());
    packingOptions.setSegmentLimit(1L);
    assertEquals(1L, packingOptions.getSegmentLimit());
    packingOptions.setSegmentLimit(Long.MAX_VALUE);
    assertEquals(Long.MAX_VALUE, packingOptions.getSegmentLimit());
    packingOptions.setSegmentLimit(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, packingOptions.getSegmentLimit());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGzip_hTAb0() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setGzip(true);
        assertTrue(packingOptions.isGzip());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getDeflateHint_LUdx0() {
        PackingOptions packingOptions = new PackingOptions();
        String deflateHint = packingOptions.getDeflateHint();
        assertNotNull(deflateHint);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVerbose_dkFW0_1() {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setVerbose(true);
        packingOptions.setVerbose(false);
        assertFalse(packingOptions.isVerbose());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile1_cwiw0_fid1() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "test.txt";
        boolean expected =false;
        boolean actual = packingOptions.isPassFile(passFileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile3_nKCW2_fid1() {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "test/test.txt";
        boolean expected =false;
        boolean actual = packingOptions.isPassFile(passFileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getUnknownClassAttributeAction_Clbj0_fid1() {
        PackingOptions packingOptions = new PackingOptions();
        Map<String, String> map = new HashMap<>();
        String type = "exampleType";
        String defaultValue = "exampleDefaultValue";
        String expected = "pass";
        map.put(type, expected);
        String actual = packingOptions.getUnknownClassAttributeAction(type);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUnknownFieldAttributeAction_GHkd0_fid1() {
        PackingOptions packingOptions = new PackingOptions();
        Map<String, String> map = new HashMap<>();
        map.put("type1", "action1");
        map.put("type2", "action2");
        String defaultValue = "pass";
        String type = "type3";
        String expected = "pass";
        String actual = packingOptions.getUnknownFieldAttributeAction(type);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSegmentLimit_BHJb1000000() {
        PackingOptions packingOptions = new PackingOptions();
        long segmentLimit = packingOptions.getSegmentLimit();
        assertEquals(1000000, segmentLimit);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetUnknownMethodAttributeAction_DplO0_fid1()
{
    PackingOptions packingOptions = new PackingOptions();
    String type = "type";
    String defaultValue = "defaultValue";
    String expected = "expected";
    Map<String, String> map = new HashMap<>();
    map.put(type, expected);
    String actual = packingOptions.getUnknownMethodAttributeAction(type);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEffort_NLsA5() {
        PackingOptions packingOptions = new PackingOptions();
        int effort = packingOptions.getEffort();
        assertEquals(5, effort);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSegmentLimit_dYnd1_1() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setSegmentLimit(0L);
    packingOptions.setSegmentLimit(1L);
    packingOptions.setSegmentLimit(Long.MAX_VALUE);
    packingOptions.setSegmentLimit(Long.MIN_VALUE);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetSegmentLimit_dYnd1_4() {
    PackingOptions packingOptions = new PackingOptions();
    packingOptions.setSegmentLimit(0L);
    packingOptions.setSegmentLimit(1L);
    packingOptions.setSegmentLimit(Long.MAX_VALUE);
    packingOptions.setSegmentLimit(Long.MIN_VALUE);
    assertEquals(Long.MIN_VALUE, packingOptions.getSegmentLimit());}
}