/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Zip64ExtendedInformationExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_teGz0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        ZipShort headerId = zip64ExtendedInformationExtraField.getHeaderId();
        assertEquals(0x0001, headerId.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_zpxX0() {
        Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField();
        byte[] buffer = new byte[100];
        int offset = 0;
        int length = 100;
        try {
            extraField.parseFromLocalFileData(buffer, offset, length);
        } catch (ZipException e) {
            fail("Failed to parse from local file data");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileDataWithInsufficientData_QRsr2() {
        Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField();
        byte[] buffer = new byte[100];
        int offset = 0;
        int length = 1;
        try {
            extraField.parseFromLocalFileData(buffer, offset, length);
            fail("Expected ZipException");
        } catch (ZipException e) {
            assertEquals("Zip64 extended information must contain both size values in the local file header.", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileDataWithMissingDiskStart_LcqA3() {
        Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField();
        byte[] buffer = new byte[100];
        int offset = 0;
        int length = 10;
        try {
            extraField.parseFromLocalFileData(buffer, offset, length);
            fail("Expected ZipException");
        } catch (ZipException e) {
            assertEquals("Zip64 extended information must contain both size values in the local file header.", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileDataWithMissingRelativeHeaderOffset_iOIT4() {
        Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField();
        byte[] buffer = new byte[100];
        int offset = 0;
        int length = 12;
        try {
            extraField.parseFromLocalFileData(buffer, offset, length);
            fail("Expected ZipException");
        } catch (ZipException e) {
            assertEquals("Zip64 extended information must contain both size values in the local file header.", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileDataWithMissingCompressedSize_jCXe5() {
        Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField();
        byte[] buffer = new byte[100];
        int offset = 0;
        int length = 8;
        try {
            extraField.parseFromLocalFileData(buffer, offset, length);
            fail("Expected ZipException");
        } catch (ZipException e) {
            assertEquals("Zip64 extended information must contain both size values in the local file header.", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileDataWithMissingSize_cHtU6() {
        Zip64ExtendedInformationExtraField extraField = new Zip64ExtendedInformationExtraField();
        byte[] buffer = new byte[100];
        int offset = 0;
        int length = 4;
        try {
            extraField.parseFromLocalFileData(buffer, offset, length);
            fail("Expected ZipException");
        } catch (ZipException e) {
            assertEquals("Zip64 extended information must contain both size values in the local file header.", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_qmsW2() {
        ZipEightByteInteger size = new ZipEightByteInteger(100L);
        ZipEightByteInteger compressedSize = new ZipEightByteInteger(200L);
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(size, compressedSize);
        assertEquals(16, zip64ExtendedInformationExtraField.getCentralDirectoryLength().getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataLength_DmCL0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        ZipShort localFileDataLength = zip64ExtendedInformationExtraField.getLocalFileDataLength();
        assertEquals(0, localFileDataLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataLength2_riqR1() {
        ZipEightByteInteger size = new ZipEightByteInteger(100L);
        ZipEightByteInteger compressedSize = new ZipEightByteInteger(200L);
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(size, compressedSize);
        ZipShort localFileDataLength = zip64ExtendedInformationExtraField.getLocalFileDataLength();
        assertEquals(16, localFileDataLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_sSEM0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        ZipEightByteInteger size = new ZipEightByteInteger(100L);
        zip64ExtendedInformationExtraField.setSize(size);
        assertEquals(size, zip64ExtendedInformationExtraField.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithNull_Szrc1() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        zip64ExtendedInformationExtraField.setSize(null);
        assertNull(zip64ExtendedInformationExtraField.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithNegativeValue_GDGI2() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        ZipEightByteInteger size = new ZipEightByteInteger(-100L);
        zip64ExtendedInformationExtraField.setSize(size);
        assertEquals(size, zip64ExtendedInformationExtraField.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_kfKA0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(1L), new ZipEightByteInteger(2L), new ZipEightByteInteger(3L), new ZipLong(4L));
        ZipShort centralDirectoryLength = zip64ExtendedInformationExtraField.getCentralDirectoryLength();
        assertEquals(28, centralDirectoryLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_mjVj1() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        ZipShort centralDirectoryLength = zip64ExtendedInformationExtraField.getCentralDirectoryLength();
        assertEquals(0, centralDirectoryLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_tzEn2() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(1L), new ZipEightByteInteger(2L));
        ZipShort centralDirectoryLength = zip64ExtendedInformationExtraField.getCentralDirectoryLength();
        assertEquals(16, centralDirectoryLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDiskStartNumber_JLcD0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(1L), new ZipEightByteInteger(2L), new ZipEightByteInteger(3L), new ZipLong(4L));
        ZipLong diskStartNumber = zip64ExtendedInformationExtraField.getDiskStartNumber();
        assertEquals(4L, diskStartNumber.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getRelativeHeaderOffset_Ikcj0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(1L), new ZipEightByteInteger(2L), new ZipEightByteInteger(3L), new ZipLong(4L));
        assertEquals(3L, zip64ExtendedInformationExtraField.getRelativeHeaderOffset().getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCompressedSize_bGID0() {
    Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
    ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(10L);
    zip64ExtendedInformationExtraField.setCompressedSize(zipEightByteInteger);
    assertEquals(zipEightByteInteger, zip64ExtendedInformationExtraField.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_QXPC0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(1L), new ZipEightByteInteger(2L), new ZipEightByteInteger(3L), new ZipLong(4L));
        assertEquals(1L, zip64ExtendedInformationExtraField.getSize().getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize2_czPY1() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(1L), new ZipEightByteInteger(2L));
        assertEquals(1L, zip64ExtendedInformationExtraField.getSize().getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataDataWithNullSizeAndCompressedSize_nLOU4() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        byte[] expectedData = new byte[0];
        assertArrayEquals(expectedData, zip64ExtendedInformationExtraField.getLocalFileDataData());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataDataWithNullSizeAndCompressedSizeAndDiskStart_FQoP7() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedSize_ulzt0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(10), new ZipEightByteInteger(20), new ZipEightByteInteger(30), new ZipLong(40));
        assertEquals(20, zip64ExtendedInformationExtraField.getCompressedSize().getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCompressedSize2_TREz1() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField(new ZipEightByteInteger(10), new ZipEightByteInteger(20));
        assertEquals(20, zip64ExtendedInformationExtraField.getCompressedSize().getLongValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData2_fVJd1_iMMk0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(true, true, true, false);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData3_zjyZ2_jvbM0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(true, true, false, true);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData4_EvtU3_VlVB0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(true, true, false, false);
        } catch (ZipException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData5_WUBz4_KWEH0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(true, false, true, true);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData6_wkAb5_NJhL0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(true, false, true, false);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData7_jZYx6_yiFP0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(true, false, false, true);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData9_Xbja8_vamN0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(false, true, true, true);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData10_oDbA9_EQtY0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(false, true, true, false);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData11_vavG10_vTsK0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(false, true, false, true);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData12_RBkY11_Seip0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(false, true, false, false);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData13_QmCk12_wudG0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(false, false, true, true);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData14_awZR13_vjCT0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(false, false, true, false);
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReparseCentralDirectoryData15_SdOr14_yFvV0() {
        Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField = new Zip64ExtendedInformationExtraField();
        try {
            zip64ExtendedInformationExtraField.reparseCentralDirectoryData(false, false, false, true);
        } catch (ZipException e) {
        }
    }
}