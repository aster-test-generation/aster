/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_Kqod0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
        byte[] array = channel.array();
        assertNotNull(array);
        assertEquals(10, array.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray2_tqhK1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        byte[] array = channel.array();
        assertNotNull(array);
        assertEquals(0, array.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray3_LBMt2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[5]);
        byte[] array = channel.array();
        assertNotNull(array);
        assertEquals(5, array.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeSmallerThanZero_yLMW0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        try {
            channel.truncate(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Size has to be in range 0.. " + Integer.MAX_VALUE, e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeGreaterThanIntegerMax_dyxN1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        try {
            channel.truncate(Integer.MAX_VALUE + 1L);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Size has to be in range 0.. " + Integer.MAX_VALUE, e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpenWithOpenChannel_CTxD0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_mlif0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithByteArray_seST1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{1, 2, 3});
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_wNok0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        assertEquals(10, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithByteArray_yohc1() {
        byte[] data = new byte[20];
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
        assertEquals(20, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithNoArgs_YlUa2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        assertEquals(0, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_Kqod0_1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
        byte[] array = channel.array();
        assertNotNull(array);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_Kqod0_2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
        byte[] array = channel.array();
        assertEquals(10, array.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray2_tqhK1_1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        byte[] array = channel.array();
        assertNotNull(array);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray2_tqhK1_2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        byte[] array = channel.array();
        assertEquals(0, array.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray3_LBMt2_1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[5]);
        byte[] array = channel.array();
        assertNotNull(array);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray3_LBMt2_2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[5]);
        byte[] array = channel.array();
        assertEquals(5, array.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeEqualToCurrentSize_VCet3_Qhqn0_1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        channel.truncate(100);
        assertEquals(100, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeEqualToCurrentSize_VCet3_Qhqn0_2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(0);
        channel.truncate(0);
        assertEquals(0, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeGreaterThanCurrentSize_CSWM4_joPw0_2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        channel.truncate(0);
        assertEquals(0, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithEmptyBuffer_BwjJ0_RqYV0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer b = ByteBuffer.allocate(0);
        int written = 0;
        try {
            written = channel.write(b);
        } catch (IOException e) {
            e.printStackTrace();
        }
        assertEquals(0, written);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithEmptyBuffer_ZFlk0_sGKp0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        ByteBuffer buffer = ByteBuffer.allocate(0);
        try {
            int bytesWritten = channel.write(buffer);
            assertEquals(0, bytesWritten);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}