/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithIgnoreTrailingNullsTrue_hmaH4_fid1() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        int offset1 = 0;
        int length1 = 3;
        byte[] buffer2 = new byte[]{1, 2, 0};
        int offset2 = 0;
        int length2 = 3;
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2, ignoreTrailingNulls);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitize2_HFpq1_fid1() {
        String s = "Hello, !";
        String expected = "Hello, ???!";
        String actual = ArchiveUtils.sanitize(s);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitize3_Rjyt2_fid1() {
        String s = "Hello, \u0000World!";
        String expected = "Hello, ???!";
        String actual = ArchiveUtils.sanitize(s);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitize4_aOFO3_fid1() {
        String s = "Hello, \u001FWorld!";
        String expected = "Hello, ???!";
        String actual = ArchiveUtils.sanitize(s);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitize5_Rcrn4_fid1() {
        String s = "Hello, \u007FWorld!";
        String expected = "Hello, ???!";
        String actual = ArchiveUtils.sanitize(s);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitize6_mJKt5_fid1() {
        String s = "Hello, \u0080World!";
        String expected = "Hello, ???!";
        String actual = ArchiveUtils.sanitize(s);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitize7_AOWf6_fid1() {
        String s = "Hello, \uFFFFWorld!";
        String expected = "Hello, ???!";
        String actual = ArchiveUtils.sanitize(s);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_Ggfi0() {
        byte[] buffer1 = new byte[] { 0, 1, 2 };
        byte[] buffer2 = new byte[] { 0, 1, 2 };
        assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, true));
        buffer2 = new byte[] { 0, 1, 3 };
        assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
        buffer1 = new byte[] { 0, 1, 2, 0 };
        buffer2 = new byte[] { 0, 1, 2 };
        assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
        buffer1 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 2, 0 };
        assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));
        buffer1 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 2 };
        assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, false));
        buffer2 = new byte[] { 0, 1, 3 };
        assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, false));
        buffer1 = new byte[] { 0, 1, 2, 0 };
        buffer2 = new byte[] { 0, 1, 2 };
        assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, false));
        buffer1 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 2, 0 };
        assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, false));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBufferDifferentStart_FDnx5() {
        String expected = "World";
        byte[] buffer = "Hello, World!".getBytes();
        boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, 6, 11);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_Ggfi0_2_fid3() {
        byte[] buffer1 = new byte[] { 0, 1, 2 };
        byte[] buffer2 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 3 };
        buffer1 = new byte[] { 0, 1, 2, 0 };
        buffer2 = new byte[] { 0, 1, 2 };
        buffer1 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 2, 0 };
        buffer1 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 3 };
        buffer1 = new byte[] { 0, 1, 2, 0 };
        buffer2 = new byte[] { 0, 1, 2 };
        buffer1 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 2, 0 };
        assertFalse(ArchiveUtils.isEqual(buffer1, buffer2, true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_Ggfi0_5_fid3() {
        byte[] buffer1 = new byte[] { 0, 1, 2 };
        byte[] buffer2 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 3 };
        buffer1 = new byte[] { 0, 1, 2, 0 };
        buffer2 = new byte[] { 0, 1, 2 };
        buffer1 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 2, 0 };
        buffer1 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 3 };
        buffer1 = new byte[] { 0, 1, 2, 0 };
        buffer2 = new byte[] { 0, 1, 2 };
        buffer1 = new byte[] { 0, 1, 2 };
        buffer2 = new byte[] { 0, 1, 2, 0 };
        assertTrue(ArchiveUtils.isEqual(buffer1, buffer2, false));}
}