/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilename_XIoA0() {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "example.txt";
        String compressedFileName = fileNameUtil.getCompressedFilename(fileName);
        assertEquals("example.txt", compressedFileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilenameWithNullFileName_Wjnq1() {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = null;
        String compressedFileName = fileNameUtil.getCompressedFilename(fileName);
        assertEquals(null, compressedFileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilenameWithEmptyFileName_pzgI2() {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "";
        String compressedFileName = fileNameUtil.getCompressedFilename(fileName);
        assertEquals("", compressedFileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilenameWithNoExtension_qQPj3() {
        FileNameUtil fileNameUtil = new FileNameUtil(null, null);
        String fileName = "example";
        String compressedFileName = fileNameUtil.getCompressedFilename(fileName);
        assertEquals("example", compressedFileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilenameWithUncompressSuffix_KIPz4() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put(".zip", "");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, null);
        String fileName = "example.zip";
        String compressedFileName = fileNameUtil.getCompressedFilename(fileName);
        assertEquals("example", compressedFileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilenameWithUncompressSuffix_KIPz4_fid1() {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put(".zip", "");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, null);
        String fileName = "example.zipnull.zip";
        String compressedFileName = fileNameUtil.getCompressedFilename(fileName);
        assertEquals("example.zipnull", compressedFileName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilenameWithDefaultExtension_qglo5() {
        FileNameUtil fileNameUtil = new FileNameUtil(null, ".txt");
        String fileName = "example";
        String compressedFileName = fileNameUtil.getCompressedFilename(fileName);
        assertEquals("example.txt", compressedFileName);
    }
}