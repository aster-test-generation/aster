/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import java.util.Arrays;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesIworkDialect_Rfot1() {
    byte[] signature = new byte[FramedSnappyCompressorInputStream.SZ_SIGNATURE.length];
    Arrays.fill(signature, (byte) 0x00);
    boolean result = FramedSnappyCompressorInputStream.matches(signature, signature.length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesStandardDialect_zZJg0_fid2() {
    byte[] signature = new byte[FramedSnappyCompressorInputStream.SZ_SIGNATURE.length];
    Arrays.fill(signature, (byte) 0xFF);
    boolean result = FramedSnappyCompressorInputStream.matches(signature, signature.length);
    assertFalse(result);
}
}