/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSlidingDictionarySize_dNLX0() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        int slidingDictionarySize = generalPurposeBit.getSlidingDictionarySize();
        assertEquals(0, slidingDictionarySize);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_zEfd1() {
        GeneralPurposeBit g = new GeneralPurposeBit();
        boolean result = g.equals(g);
        Assertions.assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_zPgY6() {
        GeneralPurposeBit g = new GeneralPurposeBit();
        boolean result = g.equals(null);
        Assertions.assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNumberOfShannonFanoTrees_uwzL0() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        int numberOfShannonFanoTrees = generalPurposeBit.getNumberOfShannonFanoTrees();
        assertEquals(0, numberOfShannonFanoTrees);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_VfVq0() {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] result = new byte[2];
        generalPurposeBit.encode(result, 0);
        assertEquals(2, result.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUseDataDescriptor_uAXH0() {
		GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
		generalPurposeBit.useDataDescriptor(true);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_owYz0() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] buf = new byte[2];
    generalPurposeBit.encode(buf, 0);
    assertEquals(0, buf[0]);
    assertEquals(0, buf[1]);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_owYz0_1() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] buf = new byte[2];
    generalPurposeBit.encode(buf, 0);
    assertEquals(0, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode1_owYz0_2() {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] buf = new byte[2];
    generalPurposeBit.encode(buf, 0);
    assertEquals(0, buf[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObject_NHXu0_fid2() {
        GeneralPurposeBit g1 = new GeneralPurposeBit();
        GeneralPurposeBit g2 = new GeneralPurposeBit();
        boolean result = g1.equals(g2);
        Assertions.assertTrue(result);
    }
}