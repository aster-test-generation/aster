/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.arj;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArjArchiveEntry_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObject_iTna3() {
        ArjArchiveEntry entry1 = new ArjArchiveEntry();
        ArjArchiveEntry entry2 = new ArjArchiveEntry();
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsHostOsUnix_JFBN0_1() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        boolean isUnix = true;
        when(entry.isHostOsUnix()).thenReturn(isUnix);
        boolean isNotUnix = false;
        when(entry.isHostOsUnix()).thenReturn(isNotUnix);
        assertEquals(isUnix, entry.getUnixMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsHostOsUnix_JFBN0_2() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        boolean isUnix = true;
        when(entry.isHostOsUnix()).thenReturn(isUnix);
        boolean isNotUnix = false;
        when(entry.isHostOsUnix()).thenReturn(isNotUnix);
        assertEquals(0, entry.getUnixMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_tysY1_1() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        int mode = 123;
        when(entry.getMode()).thenReturn(mode);
        int defaultMode = 0;
        when(entry.getMode()).thenReturn(defaultMode);
        assertEquals(mode, entry.getUnixMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_tysY1_2() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        int mode = 123;
        when(entry.getMode()).thenReturn(mode);
        int defaultMode = 0;
        when(entry.getMode()).thenReturn(defaultMode);
        assertEquals(defaultMode, entry.getUnixMode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsHostOsUnix_dQgK0() {
		ArjArchiveEntry entry = new ArjArchiveEntry();
		boolean result = entry.isHostOsUnix();
		Assertions.assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsHostOsUnix_JFBN0() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        boolean isUnix = true;
        when(entry.isHostOsUnix()).thenReturn(isUnix);
        assertEquals(isUnix, entry.getUnixMode());
        boolean isNotUnix = false;
        when(entry.isHostOsUnix()).thenReturn(isNotUnix);
        assertEquals(0, entry.getUnixMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMode_tysY1() {
        ArjArchiveEntry entry = new ArjArchiveEntry();
        int mode = 123;
        when(entry.getMode()).thenReturn(mode);
        assertEquals(mode, entry.getUnixMode());
        int defaultMode = 0;
        when(entry.getMode()).thenReturn(defaultMode);
        assertEquals(defaultMode, entry.getUnixMode());
    }
}