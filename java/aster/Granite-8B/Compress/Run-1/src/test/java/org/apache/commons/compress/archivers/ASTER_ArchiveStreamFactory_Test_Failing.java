/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.OutputStream;
import java.util.Set;
import java.util.SortedMap;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Set;
import java.util.SortedMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveStreamFactory_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_vvua0() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        OutputStream out = null;
        String archiverName = "jar";
        ArchiveOutputStream archiveOutputStream = factory.createArchiveOutputStream(archiverName, out);
        assertNotNull(archiveOutputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveInputStreamProviders_laVD0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        SortedMap<String, ArchiveStreamProvider> result = factory.getArchiveInputStreamProviders();
        assertNotNull(result);
        assertEquals(12, result.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveInputStreamProviders2_SGni1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> result = factory.getArchiveInputStreamProviders();
        assertNotNull(result);
        assertEquals(12, result.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testingGetInputStreamArchiveNames_QnVy0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getInputStreamArchiveNames();
        assertEquals(6, archiveNames.size());
        assertTrue(archiveNames.contains("ar"));
        assertTrue(archiveNames.contains("arj"));
        assertTrue(archiveNames.contains("zip"));
        assertTrue(archiveNames.contains("tar"));
        assertTrue(archiveNames.contains("jar"));
        assertTrue(archiveNames.contains("cpio"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveInputStreamProviders_rQAd0() {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
        assertNotNull(result);
        assertTrue(result.size() > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullEncoding_xvrg0() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
        assertNotNull(providers);
        assertTrue(providers.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyEncoding_xUIL1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("");
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
        assertNotNull(providers);
        assertTrue(providers.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveOutputStreamProviders_geoJ0() {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        assertNotNull(result);
        assertTrue(result.size() > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveOutputStreamProvidersWithEncoding_WWQK1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> result = factory.findAvailableArchiveOutputStreamProviders();
        assertNotNull(result);
        assertTrue(result.size() > 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveInputStreamProviders_laVD0_1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        SortedMap<String, ArchiveStreamProvider> result = factory.getArchiveInputStreamProviders();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveInputStreamProviders_laVD0_2() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        SortedMap<String, ArchiveStreamProvider> result = factory.getArchiveInputStreamProviders();
        assertEquals(12, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveInputStreamProviders2_SGni1_1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> result = factory.getArchiveInputStreamProviders();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetArchiveInputStreamProviders2_SGni1_2() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> result = factory.getArchiveInputStreamProviders();
        assertEquals(12, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveInputStreamProviders_rQAd0_1() {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveInputStreamProviders_rQAd0_2() {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
        assertTrue(result.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullEncoding_xvrg0_1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullEncoding_xvrg0_2() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory(null);
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
        assertTrue(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyEncoding_xUIL1_1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("");
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyEncoding_xUIL1_2() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("");
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
        assertTrue(providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveOutputStreamProviders_geoJ0_1() {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveOutputStreamProviders_geoJ0_2() {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        assertTrue(result.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveOutputStreamProvidersWithEncoding_WWQK1_1() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> result = factory.findAvailableArchiveOutputStreamProviders();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveOutputStreamProvidersWithEncoding_WWQK1_2() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> result = factory.findAvailableArchiveOutputStreamProviders();
        assertTrue(result.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testingGetInputStreamArchiveNames_QnVy0_1_fid3() {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getInputStreamArchiveNames();
        assertEquals(6, archiveNames.size());}
}