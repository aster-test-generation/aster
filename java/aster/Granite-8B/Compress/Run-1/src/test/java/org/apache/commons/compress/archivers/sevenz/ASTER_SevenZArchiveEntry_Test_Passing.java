/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SevenZArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCreationDate_dPAF0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCreationDateFalse_nZLl2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetCreationDate_TOeA0() {
		SevenZArchiveEntry entry = new SevenZArchiveEntry();
		entry.setCreationDate(new Date());
		Date creationDate = entry.getCreationDate();
		assertNotNull(creationDate);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHasLastModifiedDate_XLyo0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean hasLastModifiedDate = entry.getHasLastModifiedDate();
        assertFalse(hasLastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrc_Utcy0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(0);
        assertEquals(0, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithNegativeValue_kpOw1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(-1);
        assertEquals(-1, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithMaxValue_BtYO2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithMinValue_yZVm3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithRandomValue_MQCp4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int randomValue = new Random().nextInt();
        entry.setCompressedCrc(randomValue);
        assertEquals(randomValue, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithOne_ffeW6() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(1);
        assertEquals(1, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithMaxValuePlusOne_qidc8() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MAX_VALUE + 1);
        assertEquals(Integer.MAX_VALUE + 1, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithMinValueMinusOne_NZqB9() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MIN_VALUE - 1);
        assertEquals(Integer.MIN_VALUE - 1, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithRandomValuePlusOne_ekQK10() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int randomValue = new Random().nextInt();
        entry.setCompressedCrc(randomValue + 1);
        assertEquals(randomValue + 1, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithRandomValueMinusOne_XUcL11() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int randomValue = new Random().nextInt();
        entry.setCompressedCrc(randomValue - 1);
        assertEquals(randomValue - 1, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_RnKz0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = new Date();
        entry.setCreationDate(creationDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItem_oxQa0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(true);
        assertTrue(entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItemFalse_USJI2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(false);
        assertFalse(entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItemTwice_eCCW3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(true);
        entry.setAntiItem(false);
        assertFalse(entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasStream_Abbw0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.hasStream();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHasAccessDate_GZjk0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean hasAccessDate = entry.getHasAccessDate();
        assertFalse(hasAccessDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasWindowsAttributes_hYNb0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasWindowsAttributes(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_nlBh0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_zoYp1_1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.tar.gz");
        entry.setName("test.zip");
        entry.setName("test.tar.gz");
        assertEquals("test.tar.gz", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_zoYp1_2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
        entry.setName("test.tar.gz");
        entry.setName("test.tar.gz");
        assertEquals("test.tar.gz", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_zoYp1_3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
        entry.setName("test.zip");
        entry.setName("test.tar.gz");
        assertEquals("test.tar.gz", entry.getName());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_KugU0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
        assertEquals(entry.getName().hashCode(), entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_iZPP1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        assertEquals(0, entry.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTime_WHNo0() {
        Date date = new Date();
        long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
        long expectedNtfsTime = FileTimes.toNtfsTime(date);
        assertEquals(expectedNtfsTime, ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDate_sZoj0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date accessDate = new Date();
        entry.setAccessDate(accessDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDateWithNullDate_TsIv1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAccessDate(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDateWithFutureDate_JiDt2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date futureDate = new Date(System.currentTimeMillis() + 24 * 60 * 60 * 1000);
        entry.setAccessDate(futureDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDateWithPastDate_CpIm3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date pastDate = new Date(System.currentTimeMillis() - 24 * 60 * 60 * 1000);
        entry.setAccessDate(pastDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCrc_bvKV0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int crc = entry.getCrc();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHasCreationDate_DaWF0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(true);
        assertTrue(entry.getHasCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHasCreationDateFalse_MSpZ1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(false);
        assertFalse(entry.getHasCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHasCreationDateDefault_JPmk2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        assertFalse(entry.getHasCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcValue_xmBz0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_RyCg0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date lastModifiedDate = new Date();
        entry.setLastModifiedDate(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDirectory_xfXF0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setDirectory(true);
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_aErT0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(100L);
        assertEquals(100L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreationDate_YSXQ0() {
    SevenZArchiveEntry entry = new SevenZArchiveEntry();
    entry.setCreationDate(1234567890L);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedCrcValue_nQLF0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long crc = entry.getCompressedCrcValue();
        assertEquals(0, crc);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributes_yZYH0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int windowsAttributes = entry.getWindowsAttributes();
        assertEquals(0, windowsAttributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWindowsAttributes_xZAK0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(0);
        assertEquals(0, entry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWindowsAttributesWithNegativeValue_ZydK1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(-1);
        assertEquals(-1, entry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWindowsAttributesWithMaxValue_reEM2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, entry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWindowsAttributesWithMinValue_sDkz3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(Integer.MIN_VALUE);
        assertEquals(Integer.MIN_VALUE, entry.getWindowsAttributes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHasWindowsAttributes_bxMB0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean expected = false;
        boolean actual = entry.getHasWindowsAttributes();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_zoYp1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
        assertEquals("test.txt", entry.getName());
        entry.setName("test.zip");
        assertEquals("test.zip", entry.getName());
        entry.setName("test.tar.gz");
        assertEquals("test.tar.gz", entry.getName());
    }
}