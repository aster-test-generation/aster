/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.examples;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Path;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Archiver_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_xKbz0() throws IOException, ArchiveException {
        Archiver archiver = new Archiver();
        String format = "zip";
        SeekableByteChannel target = null;
        File directory = new File("path/to/directory");
        archiver.create(format, target, directory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreate_yrvx0() throws IOException {
        Archiver archiver = new Archiver();
        ArchiveOutputStream<?> target = null; // Replace with actual ArchiveOutputStream
        File directory = new File("path/to/directory"); // Replace with actual directory
        archiver.create(target, directory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDirectory_mOIO2_1() {
        Archiver archiver = new Archiver();
        ArchiveOutputStream<?> target = null; // Replace with actual ArchiveOutputStream
        File directory = null;
        Exception exception = assertThrows(IOException.class, () -> archiver.create(target, directory));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateSevenZ_CARC0() throws IOException {
        Archiver archiver = new Archiver();
        SeekableByteChannel target = null;
        Path directory = null;
        archiver.create("7z", target, directory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateZip_TXeB1() throws IOException {
        Archiver archiver = new Archiver();
        SeekableByteChannel target = null;
        Path directory = null;
        archiver.create("zip", target, directory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreate_GLQZ0() throws IOException {
    Archiver archiver = new Archiver();
    ArchiveOutputStream<?> target = null; // Replace with appropriate value
    Path directory = null; // Replace with appropriate value
    archiver.create(target, directory);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullTarget_tKpR1() {
        Archiver archiver = new Archiver();
        ArchiveOutputStream<?> target = null;
        File directory = new File("path/to/directory"); // Replace with actual directory
        Exception exception = assertThrows(IOException.class, () -> archiver.create(target, directory));
        assertTrue(exception.getMessage().contains("target"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDirectory_mOIO2() {
        Archiver archiver = new Archiver();
        ArchiveOutputStream<?> target = null; // Replace with actual ArchiveOutputStream
        File directory = null;
        Exception exception = assertThrows(IOException.class, () -> archiver.create(target, directory));
        assertTrue(exception.getMessage().contains("directory"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithInvalidFormat_JUYL1() {
        Archiver archiver = new Archiver();
        File target = new File("test.zip");
        File directory = new File("test");
        IOException exception = assertThrows(IOException.class, () -> archiver.create("invalid", target, directory));
        String expectedMessage = "Invalid archive format: invalid";
        String actualMessage = exception.getMessage();
        assertEquals(expectedMessage, actualMessage);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullFormat_FlIA2() {
        Archiver archiver = new Archiver();
        File target = new File("test.zip");
        File directory = new File("test");
        IOException exception = assertThrows(IOException.class, () -> archiver.create(null, target, directory));
        String expectedMessage = "Archive format cannot be null";
        String actualMessage = exception.getMessage();
        assertEquals(expectedMessage, actualMessage);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullTarget_NYKD3() {
        Archiver archiver = new Archiver();
        File target = null;
        File directory = new File("test");
        IOException exception = assertThrows(IOException.class, () -> archiver.create("zip", target, directory));
        String expectedMessage = "Target file cannot be null";
        String actualMessage = exception.getMessage();
        assertEquals(expectedMessage, actualMessage);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullDirectory_bzrb4() {
        Archiver archiver = new Archiver();
        File target = new File("test.zip");
        File directory = null;
        IOException exception = assertThrows(IOException.class, () -> archiver.create("zip", target, directory));
        String expectedMessage = "Directory cannot be null";
        String actualMessage = exception.getMessage();
        assertEquals(expectedMessage, actualMessage);
    }
}