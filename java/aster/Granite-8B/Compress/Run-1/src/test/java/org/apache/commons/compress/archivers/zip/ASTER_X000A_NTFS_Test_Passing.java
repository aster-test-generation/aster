/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import java.util.zip.ZipException;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Calendar;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getModifyTime_sIBM0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger modifyTime = x000A_NTFS.getModifyTime();
        assertNotNull(modifyTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessFileTime_YRlO0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        x000A_NTFS.setAccessFileTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataLength_gUnA0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipShort localFileDataLength = x000A_NTFS.getLocalFileDataLength();
        assertEquals(32, localFileDataLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_WaTK0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipShort zipShort = x000A_NTFS.getCentralDirectoryLength();
        assertNotNull(zipShort);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testgetModifyFileTime_erUs0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime result = x000A_NTFS.getModifyFileTime();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateTimeWithZipEightByteInteger_DeMN0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8], 0);
        X000A_NTFS x000ANTFS = new X000A_NTFS();
        x000ANTFS.setCreateTime(zipEightByteInteger);
        assertEquals(zipEightByteInteger, x000ANTFS.getCreateTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_Mucd0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        byte[] data = new byte[100];
        int offset = 0;
        int length = 100;
        try {
            x000A_NTFS.parseFromLocalFileData(data, offset, length);
        } catch (ZipException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData3_SjDG2() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        byte[] data = new byte[100];
        int offset = 0;
        int length = 90;
        try {
            x000A_NTFS.parseFromLocalFileData(data, offset, length);
        } catch (ZipException e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetCreateJavaTime_HjTZ0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date date = new Date();
    x000A_NTFS.setCreateJavaTime(date);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_mBzV0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Date d = new Date();
    x000A_NTFS.setModifyJavaTime(d);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_PWCX0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipShort zipShort = x000A_NTFS.getHeaderId();
        assertNotNull(zipShort);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetCreateTime_rNXF0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipEightByteInteger zipEightByteInteger = x000A_NTFS.getCreateTime();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreateJavaTimeWithNullTime_cQBS1() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger z = ZipEightByteInteger.ZERO;
        Date actual = x000A_NTFS.getCreateJavaTime();
        assertNull(actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_HwUe0_1() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        ZipEightByteInteger zipEightByteInteger4 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertTrue(zipEightByteInteger1.equals(zipEightByteInteger2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_HwUe0_2() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        ZipEightByteInteger zipEightByteInteger4 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertTrue(zipEightByteInteger3.equals(zipEightByteInteger4));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_nBRX1_1() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertEquals(0L, zipEightByteInteger1.getLongValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_nBRX1_2() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertEquals(578437695752307201L, zipEightByteInteger2.getLongValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreateJavaTimeWithNullTime_cQBS1_rUqC0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger z = new ZipEightByteInteger(0);
        x000A_NTFS.setAccessTime(z);
        Date actual = x000A_NTFS.getCreateJavaTime();
        assertNull(actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyFileTime_Ymbn0_lqcA0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    FileTime time = FileTime.fromMillis(System.currentTimeMillis());
    x000A_NTFS.setModifyFileTime(time);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_nekF4_1() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertArrayEquals(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, zipEightByteInteger1.getBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_nekF4_2() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, zipEightByteInteger2.getBytes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTime_Gfib0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date date = new Date();
        x000A_NTFS.setAccessJavaTime(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTime_hSMZ0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger accessTime = x000A_NTFS.getAccessTime();
        assertNotNull(accessTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateTimeWithByteArray_tfhy4_Komg0() {
        byte[] bytes = new byte[8];
        X000A_NTFS x000ANTFS = new X000A_NTFS();
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        x000ANTFS.setCreateTime(zipEightByteInteger);
        assertArrayEquals(bytes, x000ANTFS.getCreateTime().getBytes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_odcB0_qkcP0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        byte[] buffer = new byte[100];
        int offset = 0;
        int length = 100;
        try {
            x000A_NTFS.parseFromCentralDirectoryData(buffer, offset, length);
        } catch (ZipException e) {
            e.printStackTrace();
        }
        assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getModifyTime());
        assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getAccessTime());
        assertEquals(ZipEightByteInteger.ZERO, x000A_NTFS.getCreateTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModifyJavaTime_nVkT0_qkjX0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger modifyTime = new ZipEightByteInteger(1234567890L);
        x000A_NTFS.setModifyTime(modifyTime);
        Date expected = FileTimes.ntfsTimeToDate(1234567890L);
        Date actual = x000A_NTFS.getModifyJavaTime();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getModifyTime_sIBM0_eENN0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger modifyTime = x000A_NTFS.getModifyTime();
        assertNotNull(modifyTime.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetModifyJavaTime_mBzV0_DNal0() {
    X000A_NTFS x000A_NTFS = new X000A_NTFS();
    Calendar calendar = Calendar.getInstance();
    x000A_NTFS.setModifyJavaTime(calendar.getTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAccessTime_hSMZ0_CJLk0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger accessTime = x000A_NTFS.getAccessTime();
        assertNotNull(accessTime.getValue());
    }
}