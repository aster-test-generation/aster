/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import org.apache.commons.compress.utils.ByteUtils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X7875_NewUnix_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameObject_ajJb0() {
    X7875_NewUnix x = new X7875_NewUnix();
    assertTrue(x.equals(x));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithNull_chrH1() {
    X7875_NewUnix x = new X7875_NewUnix();
    assertFalse(x.equals(null));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentClass_WNvV2() {
    X7875_NewUnix x = new X7875_NewUnix();
    assertFalse(x.equals(new Object()));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithSameValues_bKuF3() {
    X7875_NewUnix x = new X7875_NewUnix();
    X7875_NewUnix y = new X7875_NewUnix();
    assertTrue(x.equals(y));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_PiAj0() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        byte[] actualCentralDirectoryData = x7875_NewUnix.getCentralDirectoryData();
        byte[] expectedCentralDirectoryData = ByteUtils.EMPTY_BYTE_ARRAY;
        assertArrayEquals(expectedCentralDirectoryData, actualCentralDirectoryData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_kOBd0() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        ZipShort headerId = x7875_NewUnix.getHeaderId();
        assertNotNull(headerId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID_Xztu0() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        long uid = x7875_NewUnix.getUID();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_xPNE0() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        ZipShort centralDirectoryLength = x7875_NewUnix.getCentralDirectoryLength();
        assertEquals(0, centralDirectoryLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testTrimLeadingZeroesForceMinLength4_cwDF3() {
        byte[] array = new byte[]{0, 0, 0, 0, 1};
        byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
        assertArrayEquals(new byte[]{1}, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataLength_VLkY7() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        ZipShort zipShort = x7875_NewUnix.getLocalFileDataLength();
        assertEquals(7, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testTrimLeadingZeroesForceMinLength_cTkO0_fid1() {
        byte[] array = null;
        byte[] result = X7875_NewUnix.trimLeadingZeroesForceMinLength(array);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLocalFileDataData_dVSB0_fid1() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        byte[] actual = x7875_NewUnix.getLocalFileDataData();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLocalFileDataData4_SJIV3() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        byte[] actual = x7875_NewUnix.getLocalFileDataData();
        assertEquals(7, actual.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID_CDTE0_irzF0() {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        x7875_NewUnix.setGID(1L);
        assertEquals(1L, x7875_NewUnix.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_LYDm0_iqwb0_1() throws CloneNotSupportedException {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        X7875_NewUnix clonedX7875_NewUnix = (X7875_NewUnix) x7875_NewUnix.clone();
        assertNotNull(clonedX7875_NewUnix);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_LYDm0_iqwb0_2() throws CloneNotSupportedException {
        X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
        X7875_NewUnix clonedX7875_NewUnix = (X7875_NewUnix) x7875_NewUnix.clone();
        assertNotSame(x7875_NewUnix, clonedX7875_NewUnix);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetUID_krnA0_QmaB0() {
		X7875_NewUnix x7875_NewUnix = new X7875_NewUnix();
		x7875_NewUnix.setUID(1L);
		assertEquals(1L, x7875_NewUnix.getUID());
	}
}