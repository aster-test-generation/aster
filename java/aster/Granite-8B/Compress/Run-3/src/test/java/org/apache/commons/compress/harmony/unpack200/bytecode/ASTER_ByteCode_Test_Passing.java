/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import org.apache.commons.compress.harmony.unpack200.Segment;
import org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.anyList;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ByteCode_Test_Passing {
@Mock
    private CodeAttribute mockXmlAttribute;
private ByteCode bytecode;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetOperandBytes1_FJkT0() {
		ByteCode bytecode = new ByteCode(0);
		int[] operands = new int[1];
		bytecode.setOperandBytes(operands);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetOperandBytes2_dsSJ1() {
		ByteCode bytecode = new ByteCode(0, new ClassFileEntry[0]);
		int[] operands = new int[2];
		bytecode.setOperandBytes(operands);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetOperandBytes3_mSZw2() {
		ByteCode bytecode = new ByteCode(0);
		int[] operands = new int[3];
		bytecode.setOperandBytes(operands);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testSetOperandBytes4_yEvW3() {
		ByteCode bytecode = new ByteCode(0, new ClassFileEntry[0]);
		int[] operands = new int[4];
		bytecode.setOperandBytes(operands);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_1_pNss0() {
        int opcode = 0;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_2_UQZL1() {
        int opcode = 1;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_3_SheI2() {
        int opcode = 2;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_4_drXO3() {
        int opcode = 3;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_5_KsPL4() {
        int opcode = 4;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_6_EmQQ5() {
        int opcode = 5;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_7_rCtq6() {
        int opcode = 6;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_8_zHaK7() {
        int opcode = 7;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_9_JJAw8() {
        int opcode = 8;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_10_FYFg9() {
        int opcode = 9;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_11_bGEr10() {
        int opcode = 10;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_12_woSQ11() {
        int opcode = 11;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_13_raAE12() {
        int opcode = 12;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_14_rDBD13() {
        int opcode = 13;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_15_ieKH14() {
        int opcode = 14;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_16_DcrG15() {
        int opcode = 15;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_17_Imqc16() {
        int opcode = 16;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_18_plAx17() {
        int opcode = 17;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getByteCode_19_EFlw18() {
        int opcode = 18;
        ByteCode expected = new ByteCode(opcode);
        ByteCode actual = ByteCode.getByteCode(opcode);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_LqoI0() {
        ByteCode bytecode1 = new ByteCode(1);
        ByteCode bytecode2 = new ByteCode(2);
        Assertions.assertNotEquals(bytecode1.hashCode(), bytecode2.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_APSO0() {
        ByteCode byteCode = new ByteCode(0);
        String actualName = byteCode.getName();
        String expectedName = byteCode.getByteCodeForm().getName();
        assertEquals(expectedName, actualName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewrite_ztXC0() {
        ByteCode byteCode = new ByteCode(0);
        int[] rewrite = byteCode.getRewrite();
        assertEquals(1, rewrite.length);
        assertEquals(0, rewrite[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewriteWithNested_diPJ1() {
        ClassFileEntry[] nested = new ClassFileEntry[1];
        ByteCode byteCode = new ByteCode(0, nested);
        int[] rewrite = byteCode.getRewrite();
        assertEquals(2, rewrite.length);
        assertEquals(0, rewrite[0]);
        assertEquals(1, rewrite[1]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_sameObject_EvYw0() {
		ByteCode obj1 = new ByteCode(0);
		ByteCode obj2 = new ByteCode(0);
		boolean result = obj1.equals(obj2);
		assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEquals_differentObject_kSsE1() {
		ByteCode obj1 = new ByteCode(0);
		ByteCode obj2 = new ByteCode(1);
		boolean result = obj1.equals(obj2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPosition_tavB0() {
        ByteCode byteCode = new ByteCode(0);
        int[] result = byteCode.getNestedPosition(0);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPosition_PBVH1() {
        ByteCode byteCode = new ByteCode(0, new ClassFileEntry[0]);
        int[] result = byteCode.getNestedPosition(0);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPositions_mAQI0() {
        ByteCode byteCode = new ByteCode(0);
        int[][] nestedPositions = byteCode.getNestedPositions();
        assertNotNull(nestedPositions);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedPositions_XdLW1() {
        ByteCode byteCode = new ByteCode(0, new ClassFileEntry[0]);
        int[][] nestedPositions = byteCode.getNestedPositions();
        assertNotNull(nestedPositions);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testToString_HPgQ0() {
        ByteCode byteCode = new ByteCode(0);
        String expected = "ACONST_NULL";
        assertEquals(expected, byteCode.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_WTYk0() {
        ClassFileEntry[] nested = new ClassFileEntry[0];
        ByteCode byteCode = new ByteCode(0, nested);
        ClassFileEntry[] result = byteCode.getNestedClassFileEntries();
        assertArrayEquals(nested, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullNestedEntries_dccM2() {
        ByteCode byteCode = new ByteCode(0, null);
        ClassFileEntry[] result = byteCode.getNestedClassFileEntries();
        assertNotNull(result);
        assertTrue(result.length == 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeTargets_rVDm0() {
        ByteCode byteCode = new ByteCode(0);
        int[] targets = byteCode.getByteCodeTargets();
        assertNotNull(targets);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeTargetsWithNested_ADcE1() {
        ClassFileEntry[] nested = new ClassFileEntry[1];
        ByteCode byteCode = new ByteCode(0, nested);
        int[] targets = byteCode.getByteCodeTargets();
        assertNotNull(targets);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeForm_KJqe0() {
        ByteCode byteCode = new ByteCode(0);
        ByteCodeForm byteCodeForm = byteCode.getByteCodeForm();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEntries_Mcxn1() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        List<ClassFileEntry> entries = classConstantPool.entries();
        assertNotNull(entries);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_AdYE2() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        Segment segment = new Segment();
        classConstantPool.resolve(segment);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet_dUeO3() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int index = 0;
        ClassFileEntry entry = classConstantPool.get(index);
        assertNotNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddNestedEntries_qrMA4() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        classConstantPool.addNestedEntries();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_VeuA7() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int size = classConstantPool.size();
        assertTrue(size >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_IJhb8() {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        Segment segment = new Segment();
        ByteCode byteCode = new ByteCode(0, new ClassFileEntry[0]);
        byteCode.resolve(classConstantPool);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetByteCodeIndex_fxjk0() {
        ByteCode byteCode = new ByteCode(0);
        int index = byteCode.getByteCodeIndex();
        assertEquals(0, index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpcode_Ocqy0() {
        ByteCode byteCode = new ByteCode(1);
        int opcode = byteCode.getOpcode();
        assertEquals(1, opcode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpcodeWithNested_dUop1() {
        ClassFileEntry[] nested = new ClassFileEntry[1];
        ByteCode byteCode = new ByteCode(1, nested);
        int opcode = byteCode.getOpcode();
        assertEquals(1, opcode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasMultipleByteCodes_skOp0() {
        ByteCode byteCode1 = new ByteCode(0);
        ByteCode byteCode2 = new ByteCode(1, new ClassFileEntry[0]);
        Assertions.assertFalse(byteCode1.hasMultipleByteCodes());
        Assertions.assertFalse(byteCode2.hasMultipleByteCodes());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testapplyByteCodeTargetFixup() {
        bytecode = new ByteCode(0);
        bytecode.applyByteCodeTargetFixup(mockXmlAttribute);
        verify(mockXmlAttribute).renumber(anyList());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewrite_ztXC0_1() {
        ByteCode byteCode = new ByteCode(0);
        int[] rewrite = byteCode.getRewrite();
        assertEquals(1, rewrite.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewrite_ztXC0_2() {
        ByteCode byteCode = new ByteCode(0);
        int[] rewrite = byteCode.getRewrite();
        assertEquals(0, rewrite[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewriteWithNested_diPJ1_1() {
        ClassFileEntry[] nested = new ClassFileEntry[1];
        ByteCode byteCode = new ByteCode(0, nested);
        int[] rewrite = byteCode.getRewrite();
        assertEquals(2, rewrite.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewriteWithNested_diPJ1_2() {
        ClassFileEntry[] nested = new ClassFileEntry[1];
        ByteCode byteCode = new ByteCode(0, nested);
        int[] rewrite = byteCode.getRewrite();
        assertEquals(0, rewrite[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRewriteWithNested_diPJ1_3() {
        ClassFileEntry[] nested = new ClassFileEntry[1];
        ByteCode byteCode = new ByteCode(0, nested);
        int[] rewrite = byteCode.getRewrite();
        assertEquals(1, rewrite[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullNestedEntries_dccM2_1() {
        ByteCode byteCode = new ByteCode(0, null);
        ClassFileEntry[] result = byteCode.getNestedClassFileEntries();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntriesWithNullNestedEntries_dccM2_2() {
        ByteCode byteCode = new ByteCode(0, null);
        ClassFileEntry[] result = byteCode.getNestedClassFileEntries();
        assertTrue(result.length == 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasMultipleByteCodes_skOp0_1() {
        ByteCode byteCode1 = new ByteCode(0);
        ByteCode byteCode2 = new ByteCode(1, new ClassFileEntry[0]);
        Assertions.assertFalse(byteCode1.hasMultipleByteCodes());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasMultipleByteCodes_skOp0_2() {
        ByteCode byteCode1 = new ByteCode(0);
        ByteCode byteCode2 = new ByteCode(1, new ClassFileEntry[0]);
        Assertions.assertFalse(byteCode2.hasMultipleByteCodes());}
}