/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPInt_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareTo_LatH0() {
        CPInt cpInt1 = new CPInt(10);
        CPInt cpInt2 = new CPInt(20);
        int result = cpInt1.compareTo(cpInt2);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareToWithSameValues_qeVj1() {
        CPInt cpInt1 = new CPInt(10);
        CPInt cpInt2 = new CPInt(10);
        int result = cpInt1.compareTo(cpInt2);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareToWithLargeValues_MCuI2() {
        CPInt cpInt1 = new CPInt(100000000);
        CPInt cpInt2 = new CPInt(200000000);
        int result = cpInt1.compareTo(cpInt2);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareToWithNegativeValues_zeuy3() {
        CPInt cpInt1 = new CPInt(-10);
        CPInt cpInt2 = new CPInt(-20);
        int result = cpInt1.compareTo(cpInt2);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareToWithZero_XqLf4() {
        CPInt cpInt1 = new CPInt(0);
        CPInt cpInt2 = new CPInt(10);
        int result = cpInt1.compareTo(cpInt2);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareToWithNull_pMAl5() {
        CPInt cpInt1 = new CPInt(10);
        int result = cpInt1.compareTo(null);
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInt_uIVV0() {
        CPInt cpInt = new CPInt(5);
        assertEquals(5, cpInt.getInt());
    }
}