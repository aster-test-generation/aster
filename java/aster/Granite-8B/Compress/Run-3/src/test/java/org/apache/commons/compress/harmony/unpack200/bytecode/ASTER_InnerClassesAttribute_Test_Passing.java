/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import org.apache.commons.compress.harmony.unpack200.Segment;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InnerClassesAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithNull_tOau0() throws Exception {
		InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
		boolean result = innerClassesAttribute.equals(null);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameObject_bsyc1() throws Exception {
		InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
		boolean result = innerClassesAttribute.equals(innerClassesAttribute);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentClass_hWZz2() throws Exception {
		InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
		boolean result = innerClassesAttribute.equals(new Object());
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentName_SjxY3() throws Exception {
		InnerClassesAttribute innerClassesAttribute1 = new InnerClassesAttribute("name1");
		InnerClassesAttribute innerClassesAttribute2 = new InnerClassesAttribute("name2");
		boolean result = innerClassesAttribute1.equals(innerClassesAttribute2);
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameName_vlpO4() throws Exception {
		InnerClassesAttribute innerClassesAttribute1 = new InnerClassesAttribute("name");
		InnerClassesAttribute innerClassesAttribute2 = new InnerClassesAttribute("name");
		boolean result = innerClassesAttribute1.equals(innerClassesAttribute2);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QNlS0() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("exampleName");
        String expected = "InnerClasses: exampleName";
        String actual = innerClassesAttribute.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_GmHp0() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("example");
        ClassFileEntry[] nestedClassFileEntries = innerClassesAttribute.getNestedClassFileEntries();
        assertEquals(0, nestedClassFileEntries.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerClassesAttributeGetLength_EQDq0() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
        int length = innerClassesAttribute.getLength();
        assertEquals(12, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEntries_dJPH1() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        List<ClassFileEntry> entries = classConstantPool.entries();
        assertTrue(entries.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_PFUQ2() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        Segment segment = new Segment();
        classConstantPool.resolve(segment);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet_WRbC3() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int index = 0;
        ClassFileEntry entry = classConstantPool.get(index);
        assertEquals(null, entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddNestedEntries_SVKb4() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        classConstantPool.addNestedEntries();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_Ycdw7() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int size = classConstantPool.size();
        assertEquals(0, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_JoVW8() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
        ClassConstantPool classConstantPool = new ClassConstantPool();
        innerClassesAttribute.resolve(classConstantPool);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_pGbo0() throws Exception {
        InnerClassesAttribute innerClassesAttribute = new InnerClassesAttribute("name");
        assertEquals(31 * super.hashCode() + (innerClassesAttribute.getAttributeName() == null ? 0 : innerClassesAttribute.getAttributeName().hashCode()), innerClassesAttribute.hashCode());
    }
}