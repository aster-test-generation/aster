/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IntList_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithEmptyList_BCnD0() throws Exception {
        IntList list = new IntList();
        assertTrue(list.isEmpty());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEmptyWithNonEmptyList_vCbL1() throws Exception {
        IntList list = new IntList(10);
        list.add(1);
        assertFalse(list.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithEmptyList_WsHs0() throws Exception {
        IntList list = new IntList();
        IntList otherList = new IntList();
        list.addAll(otherList);
        assertTrue(list.isEmpty());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyList_qEMA1_1() throws Exception {
        IntList list = new IntList();
        IntList otherList = new IntList();
        otherList.add(1);
        otherList.add(2);
        otherList.add(3);
        list.addAll(otherList);
        assertEquals(3, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyList_qEMA1_2() throws Exception {
        IntList list = new IntList();
        IntList otherList = new IntList();
        otherList.add(1);
        otherList.add(2);
        otherList.add(3);
        list.addAll(otherList);
        assertEquals(1, list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyList_qEMA1_3() throws Exception {
        IntList list = new IntList();
        IntList otherList = new IntList();
        otherList.add(1);
        otherList.add(2);
        otherList.add(3);
        list.addAll(otherList);
        assertEquals(2, list.get(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyList_qEMA1_4() throws Exception {
        IntList list = new IntList();
        IntList otherList = new IntList();
        otherList.add(1);
        otherList.add(2);
        otherList.add(3);
        list.addAll(otherList);
        assertEquals(3, list.get(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_get_0_VtUk0() throws Exception {
        IntList intList = new IntList(10);
        int actual = intList.get(0);
        int expected = 0;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_get_1_Cgtg1() throws Exception {
        IntList intList = new IntList(10);
        int actual = intList.get(1);
        int expected = 0;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_get_2_RIFB2() throws Exception {
        IntList intList = new IntList(10);
        int actual = intList.get(2);
        int expected = 0;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToArray_vplq0() throws Exception {
        IntList intList = new IntList(10);
        int[] expected = {1, 2, 3, 4, 5};
        for (int i = 0; i < expected.length; i++) {
            intList.add(expected[i]);
        }
        int[] actual = intList.toArray();
        assertArrayEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_LWNz0() throws Exception {
        IntList intList = new IntList(10);
        intList.remove(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove1_pDrA1() throws Exception {
        IntList intList = new IntList(10);
        intList.remove(5);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove2_jjXi2() throws Exception {
        IntList intList = new IntList(10);
        intList.remove(9);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove3_EPnB3() throws Exception {
        IntList intList = new IntList(10);
        intList.remove(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove4_EJKw4() throws Exception {
        IntList intList = new IntList(10);
        intList.remove(4);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove5_dMni5() throws Exception {
        IntList intList = new IntList(10);
        intList.remove(6);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove6_FxNz6() throws Exception {
        IntList intList = new IntList(10);
        intList.remove(2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove7_GYrE7() throws Exception {
        IntList intList = new IntList(10);
        intList.remove(3);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove8_jMtB8() throws Exception {
        IntList intList = new IntList(10);
        intList.remove(8);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove9_ItbB9() throws Exception {
        IntList intList = new IntList(10);
        intList.remove(7);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_dmzJ0_1() throws Exception {
        IntList list = new IntList(10);
        list.add(5);
        assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd2_rrJX1_1() throws Exception {
        IntList list = new IntList();
        list.add(10);
        assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIncrementWithNegativeLocation_YBmA1() throws Exception {
        IntList intList = new IntList(10);
        try {
            intList.increment(-1);
        } catch (IndexOutOfBoundsException e) {
            assert e.getMessage().equals("-1");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIncrementWithLocationGreaterThanCapacity_rQyJ2() throws Exception {
        IntList intList = new IntList(10);
        try {
            intList.increment(10);
        } catch (IndexOutOfBoundsException e) {
            assert e.getMessage().equals("10");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd_ipZu0() throws Exception {
        IntList intList = new IntList(10);
        intList.add(0, 1);
        intList.add(1, 2);
        intList.add(2, 3);
        intList.add(3, 4);
        intList.add(4, 5);
        intList.add(5, 6);
        intList.add(6, 7);
        intList.add(7, 8);
        intList.add(8, 9);
        intList.add(9, 10);
        intList.add(10, 11);
        intList.add(11, 12);
        assert intList.get(0) == 1;
        assert intList.get(1) == 2;
        assert intList.get(2) == 3;
        assert intList.get(3) == 4;
        assert intList.get(4) == 5;
        assert intList.get(5) == 6;
        assert intList.get(6) == 7;
        assert intList.get(7) == 8;
        assert intList.get(8) == 9;
        assert intList.get(9) == 10;
        assert intList.get(10) == 11;
        assert intList.get(11) == 12;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAtFront_eJdJ1() throws Exception {
        IntList intList = new IntList(10);
        intList.add(0, 1);
        assert intList.get(0) == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAtEnd_ifoI2() throws Exception {
        IntList intList = new IntList(10);
        intList.add(10, 1);
        assert intList.get(9) == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddInMiddle_GdPN3() throws Exception {
        IntList intList = new IntList(10);
        intList.add(5, 1);
        assert intList.get(5) == 1;
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddWithGrowForInsert_fgUj4() throws Exception {
        IntList intList = new IntList(10);
        intList.add(5, 1);
        intList.add(5, 2);
        intList.add(5, 3);
        intList.add(5, 4);
        intList.add(5, 5);
        intList.add(5, 6);
        intList.add(5, 7);
        intList.add(5, 8);
        intList.add(5, 9);
        intList.add(5, 10);
        intList.add(5, 11);
        intList.add(5, 12);
        assert intList.get(5) == 1;
        assert intList.get(6) == 2;
        assert intList.get(7) == 3;
        assert intList.get(8) == 4;
        assert intList.get(9) == 5;
        assert intList.get(10) == 6;
        assert intList.get(11) == 7;
        assert intList.get(12) == 8;
        assert intList.get(13) == 9;
        assert intList.get(14) == 10;
        assert intList.get(15) == 11;
        assert intList.get(16) == 12;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd2_MpnT1() throws Exception {
        IntList intList = new IntList(10);
        intList.add(1, 2);
        assert intList.get(1) == 2;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd3_PQFo2() throws Exception {
        IntList intList = new IntList(10);
        intList.add(2, 3);
        assert intList.get(2) == 3;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd4_hKNX3() throws Exception {
        IntList intList = new IntList(10);
        intList.add(3, 4);
        assert intList.get(3) == 4;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd5_nugP4() throws Exception {
        IntList intList = new IntList(10);
        intList.add(4, 5);
        assert intList.get(4) == 5;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd6_JhaY5() throws Exception {
        IntList intList = new IntList(10);
        intList.add(5, 6);
        assert intList.get(5) == 6;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd7_GrhF6() throws Exception {
        IntList intList = new IntList(10);
        intList.add(6, 7);
        assert intList.get(6) == 7;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd8_gDfS7() throws Exception {
        IntList intList = new IntList(10);
        intList.add(7, 8);
        assert intList.get(7) == 8;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd9_IYAU8() throws Exception {
        IntList intList = new IntList(10);
        intList.add(8, 9);
        assert intList.get(8) == 9;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd10_Ugqz9() throws Exception {
        IntList intList = new IntList(10);
        intList.add(9, 10);
        assert intList.get(9) == 10;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd11_fmph10() throws Exception {
        IntList intList = new IntList(10);
        intList.add(10, 11);
        assert intList.get(10) == 11;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAdd12_ecKM11() throws Exception {
        IntList intList = new IntList(10);
        intList.add(11, 12);
        assert intList.get(11) == 12;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_kuzT0_1() throws Exception {
        IntList intList = new IntList(10);
        intList.add(5);
        intList.add(10);
        intList.remove(0);
        assertEquals(0, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_kuzT0_2() throws Exception {
        IntList intList = new IntList(10);
        intList.add(5);
        intList.add(10);
        intList.remove(0);
        assertEquals(1, intList.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_kuzT0_3() throws Exception {
        IntList intList = new IntList(10);
        intList.add(5);
        intList.add(10);
        intList.remove(0);
        assertEquals(2, intList.size());}
}