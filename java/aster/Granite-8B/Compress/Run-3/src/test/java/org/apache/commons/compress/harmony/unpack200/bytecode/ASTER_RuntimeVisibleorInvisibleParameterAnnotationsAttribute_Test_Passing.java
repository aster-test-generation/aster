/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import org.apache.commons.compress.harmony.unpack200.Segment;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RuntimeVisibleorInvisibleParameterAnnotationsAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCPUTF8ConstructorWithGlobalIndex_dZJO1_2() throws Exception {
        CPUTF8 utf8 = new CPUTF8("test", 1);
        assertEquals(1, utf8.globalIndex);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClassConstantPoolConstructor_ZroG2() throws Exception {
        ClassConstantPool pool = new ClassConstantPool();
        assertNotNull(pool);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClassConstantPoolEntries_pcRd4_1() throws Exception {
        ClassConstantPool pool = new ClassConstantPool();
        List<ClassFileEntry> entries = pool.entries();
        assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClassConstantPoolEntries_pcRd4_2() throws Exception {
        ClassConstantPool pool = new ClassConstantPool();
        List<ClassFileEntry> entries = pool.entries();
        assertTrue(entries.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClassConstantPoolResolve_ZNua5() throws Exception {
        ClassConstantPool pool = new ClassConstantPool();
        pool.resolve(new Segment());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddNestedEntries_MxRt7() throws Exception {
        ClassConstantPool pool = new ClassConstantPool();
        pool.addNestedEntries();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClassConstantPoolEntries_pcRd4() throws Exception {
        ClassConstantPool pool = new ClassConstantPool();
        List<ClassFileEntry> entries = pool.entries();
        assertNotNull(entries);
        assertTrue(entries.isEmpty());
}
}