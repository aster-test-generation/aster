/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_RunCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_spAD0() throws Pack200Exception {
        BHSDCodec aCodec = new BHSDCodec(1, 2);
        BHSDCodec bCodec = new BHSDCodec(3, 4, 5, 6);
        RunCodec runCodec = new RunCodec(7, aCodec, bCodec);
        byte[] result = runCodec.encode(8, 9);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEncode_MpqF0() throws Pack200Exception {
		BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
		BHSDCodec bHSDCodec2 = new BHSDCodec(1, 2, 3, 4);
		BHSDCodec bHSDCodec3 = new BHSDCodec(1, 2, 3);
		RunCodec runCodec = new RunCodec(1, bHSDCodec, bHSDCodec2);
		byte[] actual = runCodec.encode(1);
		byte[] expected = new byte[0];
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBCodec_YPCJ0_OTsw0() {
    BHSDCodec bHSDCodec = new BHSDCodec(0, 0);
    BHSDCodec bHSDCodec1 = new BHSDCodec(0, 0, 0, 0);
    BHSDCodec bHSDCodec2 = new BHSDCodec(0, 0, 0);
    RunCodec runCodec = null;
    try {
        runCodec = new RunCodec(0, bHSDCodec, bHSDCodec1);
    } catch (Pack200Exception e) {
        e.printStackTrace();
    }
    Codec bCodec = runCodec.getBCodec();
    assertNotNull(bCodec);
    assertEquals(bHSDCodec, bCodec);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetACodec_wEZY0_qneo0() {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
        BHSDCodec bHSDCodec1 = new BHSDCodec(1, 2, 3, 4);
        BHSDCodec bHSDCodec2 = new BHSDCodec(1, 2, 3);
        RunCodec runCodec = null;
        try {
            runCodec = new RunCodec(1, bHSDCodec, bHSDCodec1);
        } catch (Pack200Exception e) {
            e.printStackTrace();
        }
        Codec actualGetACodecResult = runCodec.getACodec();
        Codec expectedGetACodecResult = bHSDCodec;
        assertEquals(expectedGetACodecResult, actualGetACodecResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_qfWp0_reij0() {
        BHSDCodec aCodec = new BHSDCodec(1, 2);
        BHSDCodec bCodec = new BHSDCodec(3, 4, 5, 6);
        RunCodec runCodec = null;
        try {
            runCodec = new RunCodec(7, aCodec, bCodec);
        } catch (Pack200Exception e) {
            e.printStackTrace();
        }
        String expected = "RunCodec[k=7;aCodec=BHSDCodec[b=1;h=2];bCodec=BHSDCodec[b=3;h=4;s=5;d=6]]";
        assertEquals(expected, runCodec.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecodeInts_dWtO0_uhkb0_1() throws IOException {
        BHSDCodec bHSDCodec = new BHSDCodec(1, 2);
        BHSDCodec bHSDCodec1 = new BHSDCodec(1, 2, 3, 4);
        RunCodec runCodec = new RunCodec(5, bHSDCodec, bHSDCodec1);
        int[] aValues = new int[]{1, 2, 3};
        int[] bValues = new int[]{4, 5, 6};
        int[] band = new int[]{1, 2, 3, 4, 5, 6};
        InputStream in = mock(InputStream.class);
        when(in.read()).thenReturn(1, 2, 3, 4, 5, 6);
        int[] result = runCodec.decodeInts(6, in);
        aValues = new int[]{1, 2, 3};
        bValues = new int[]{4, 5, 6};
        band = new int[]{1, 2, 3, 4, 5, 6};
        in = mock(InputStream.class);
        when(in.read()).thenReturn(1, 2, 3, 4, 5, 6);
        result = runCodec.decodeInts(6, in);
        assertArrayEquals(band, result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetK_JXXr0_rIqo0() {
		BHSDCodec bHSDCodec = new BHSDCodec(0, 0);
		BHSDCodec bHSDCodec1 = new BHSDCodec(0, 0, 0, 0);
		BHSDCodec bHSDCodec2 = new BHSDCodec(0, 0, 0);
		RunCodec runCodec = null;
		try {
			runCodec = new RunCodec(0, bHSDCodec, bHSDCodec1);
		} catch (Pack200Exception e) {
			e.printStackTrace();
		}
		int actual = runCodec.getK();
		int expected = 0;
		assertEquals(expected, actual);
	}
}