/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.gzip;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GzipUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName_NgtD0() throws Exception {
        String fileName = "example.txt.gz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName2_eVgK1() throws Exception {
        String fileName = "example.txt";
        boolean expected = false;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName3_Bwnz2() throws Exception {
        String fileName = "example.tar.gz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName4_VqKy3() throws Exception {
        String fileName = "example.tar";
        boolean expected = false;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName5_Gtgb4() throws Exception {
        String fileName = "example.zip";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName6_wkWi5() throws Exception {
        String fileName = "example.jar";
        boolean expected = false;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName7_yGaG6() throws Exception {
        String fileName = "example.7z";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName8_ylbY7() throws Exception {
        String fileName = "example.rar";
        boolean expected = false;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName9_cDAG8() throws Exception {
        String fileName = "example.gz";
        boolean expected = false;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName10_fWLS9() throws Exception {
        String fileName = "example.tar.z";
        boolean expected = false;
        boolean actual = GzipUtils.isCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilename_tDgA0() throws Exception {
        String fileName = "example.txt.gz";
        String expected = "example.txt";
        String actual = GzipUtils.getUncompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename_zsae0() throws Exception {
        String fileName = "example.txt.gz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename2_donT1() throws Exception {
        String fileName = "example.txt";
        boolean expected = false;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename3_XfFQ2() throws Exception {
        String fileName = "example.tar.gz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename4_FxyS3() throws Exception {
        String fileName = "example.zip";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename5_zpKM4() throws Exception {
        String fileName = "example.jar";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename6_uonB5() throws Exception {
        String fileName = "example.tar";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename7_Zdxp6() throws Exception {
        String fileName = "example.7z";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename8_ubiQ7() throws Exception {
        String fileName = "example.rar";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename9_RwJJ8() throws Exception {
        String fileName = "example.bz2";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename10_gXMn9() throws Exception {
        String fileName = "example.gz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename11_hdbx10() throws Exception {
        String fileName = "example.z";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename12_pDBB11() throws Exception {
        String fileName = "example.xz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename13_JIHP12() throws Exception {
        String fileName = "example.lzma";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename14_wmWk13() throws Exception {
        String fileName = "example.tar.z";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename16_daHv15() throws Exception {
        String fileName = "example.tar.xz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename17_kGwg16() throws Exception {
        String fileName = "example.tar.lzma";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename18_LjQg17() throws Exception {
        String fileName = "example.zip.gz";
        boolean expected = true;
        boolean actual = GzipUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilename_lTGm0() throws Exception {
        String fileName = "example.txt";
        String expected = "example.txt.gz";
        String actual = GzipUtils.getCompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetUncompressedFileName_cViG0() throws Exception {
		String fileName = "example.txt";
		String expected = "example.txt";
		String actual = GzipUtils.getUncompressedFileName(fileName);
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFileName_oPhZ0() throws Exception {
        String fileName = "example.txt";
        String expected = "example.txt.gz";
        String actual = GzipUtils.getCompressedFileName(fileName);
        assertEquals(expected, actual);
    }
}