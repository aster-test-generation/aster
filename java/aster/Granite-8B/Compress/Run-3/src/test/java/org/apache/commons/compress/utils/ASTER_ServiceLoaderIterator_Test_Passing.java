/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ServiceLoaderIterator_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasNextWithEmptyServiceLoader_hEdE0() {
    ServiceLoaderIterator<String> iterator = new ServiceLoaderIterator<>(String.class);
    assertFalse(iterator.hasNext());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasNextWithOneServiceLoader_PjKl1() {
    ServiceLoaderIterator<String> iterator = new ServiceLoaderIterator<>(String.class, getClass().getClassLoader());
    assertTrue(iterator.hasNext());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHasNextWithMultipleServiceLoaders_NsTv2() {
    ServiceLoaderIterator<String> iterator = new ServiceLoaderIterator<>(String.class);
    assertTrue(iterator.hasNext());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNext_GRZy0() {
        ServiceLoaderIterator<String> iterator = new ServiceLoaderIterator<>(String.class);
        String next = iterator.next();
        assertNotNull(next);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextWithClassLoader_Wxbh1() {
        ServiceLoaderIterator<String> iterator = new ServiceLoaderIterator<>(String.class, getClass().getClassLoader());
        String next = iterator.next();
        assertNotNull(next);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_QqHw0() {
        ServiceLoaderIterator<String> iterator = new ServiceLoaderIterator<>(String.class);
        iterator.remove();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove2_OMfb1() {
        ServiceLoaderIterator<Integer> iterator = new ServiceLoaderIterator<>(Integer.class, getClass().getClassLoader());
        iterator.remove();
    }
}