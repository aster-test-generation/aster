/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lz4;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedLZ4CompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithValidSignature_tDbH0() {
    byte[] signature = {0x04, 0x22, 0x4D, 0x18};
    boolean result = FramedLZ4CompressorInputStream.matches(signature, signature.length);
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithInvalidSignature_diBk1() {
    byte[] signature = {0x00, 0x00, 0x00, 0x00};
    boolean result = FramedLZ4CompressorInputStream.matches(signature, signature.length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithShortSignature_vWAi2() {
    byte[] signature = {0x04, 0x22};
    boolean result = FramedLZ4CompressorInputStream.matches(signature, signature.length);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_Nqsw1_1() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(1);
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in);
        byte[] b = new byte[1];
        int r = framedLZ4CompressorInputStream.read(b, 0, 1);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);
        r = framedLZ4CompressorInputStream.read(b, 0, 1);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenThrow(new IOException());
        assertEquals(1, r);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_Nqsw1_2() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(1);
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in);
        byte[] b = new byte[1];
        int r = framedLZ4CompressorInputStream.read(b, 0, 1);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);
        r = framedLZ4CompressorInputStream.read(b, 0, 1);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenThrow(new IOException());
        assertEquals(-1, r);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_Nqsw1_3() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(1);
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in);
        byte[] b = new byte[1];
        int r = framedLZ4CompressorInputStream.read(b, 0, 1);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);
        r = framedLZ4CompressorInputStream.read(b, 0, 1);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenThrow(new IOException());
        IOException e = assertThrows(IOException.class, () -> framedLZ4CompressorInputStream.read(b, 0, 1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_WithDecompressConcatenatedFalse_AndUncompressedBlock_ReturnsExpectedValue_OkEd0() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(10);
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in, false);
        int actual = framedLZ4CompressorInputStream.read(new byte[10], 0, 10);
        assertEquals(10, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_WithDecompressConcatenatedTrue_AndUncompressedBlock_ReturnsExpectedValue_Hcwg1() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(10);
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in, true);
        int actual = framedLZ4CompressorInputStream.read(new byte[10], 0, 10);
        assertEquals(10, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_WithDecompressConcatenatedFalse_AndEndReached_ReturnsExpectedValue_mnVJ4() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in, false);
        int actual = framedLZ4CompressorInputStream.read(new byte[10], 0, 10);
        assertEquals(-1, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_WithDecompressConcatenatedTrue_AndEndReached_ReturnsExpectedValue_NQiz5() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in, true);
        int actual = framedLZ4CompressorInputStream.read(new byte[10], 0, 10);
        assertEquals(-1, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_bRAD0() throws IOException {
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(null);
        framedLZ4CompressorInputStream.read();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead1_Deju1() throws IOException {
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(null, false);
        framedLZ4CompressorInputStream.read(new byte[1], 0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead2_tkPg2() throws IOException {
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(null);
        framedLZ4CompressorInputStream.read(new byte[1], 0, 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_Nqsw1() throws IOException {
        InputStream in = mock(InputStream.class);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(1);
        FramedLZ4CompressorInputStream framedLZ4CompressorInputStream = new FramedLZ4CompressorInputStream(in);
        byte[] b = new byte[1];
        int r = framedLZ4CompressorInputStream.read(b, 0, 1);
        assertEquals(1, r);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);
        r = framedLZ4CompressorInputStream.read(b, 0, 1);
        assertEquals(-1, r);
        when(in.read(any(byte[].class), anyInt(), anyInt())).thenThrow(new IOException());
        IOException e = assertThrows(IOException.class, () -> framedLZ4CompressorInputStream.read(b, 0, 1));
        assertTrue(e.getMessage().contains("IOException"));
    }
}