/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_IcTuple_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterClassIndex_JJDi0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        int result = icTuple.outerClassIndex();
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterIsAnonymous_mNvn0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.outerIsAnonymous();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNestedExplicitFlagSet_oOxl0() throws Exception {
		IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
		boolean result = icTuple.nestedExplicitFlagSet();
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNestedExplicitFlagSet2_OQau1() throws Exception {
		IcTuple icTuple = new IcTuple("C", 2, "C2", "N", 1, 1, 1, 1);
		boolean result = icTuple.nestedExplicitFlagSet();
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassNameIndex_fgGJ0() throws Exception {
        IcTuple icTuple = new IcTuple("class1", 1, "class2", "method1", 0, 0, 0, 0);
        int result = icTuple.simpleClassNameIndex();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_XUWX0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        assertEquals(123456789, icTuple.hashCode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicted_OoMh0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean predicted = icTuple.predicted();
        assertTrue(predicted);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPredicted2_PPYB1() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean predicted = icTuple.predicted();
        assertFalse(predicted);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAnonymous_zdvx0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.isAnonymous();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNullSafeEqualsWithNullStringOneAndNonNullStringTwo_bpkz0() throws Exception {
		IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
		boolean result = icTuple.nullSafeEquals(null, "stringTwo");
		boolean expected = true;
		assertEquals(expected, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNullSafeEqualsWithNonNullStringOneAndNullStringTwo_mBMa1() throws Exception {
		IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
		boolean result = icTuple.nullSafeEquals("stringOne", null);
		boolean expected = true;
		assertEquals(expected, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testNullSafeEqualsWithNonNullStringOneAndNonNullStringTwo_GYLe2() throws Exception {
		IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
		boolean result = icTuple.nullSafeEquals("stringOne", "stringTwo");
		boolean expected = false;
		assertEquals(expected, result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetC2_MPRP0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 2, 3, 4);
        String actualC2 = icTuple.getC2();
        String expectedC2 = "C2";
        assertEquals(expectedC2, actualC2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSimpleClassName_IlWX0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String result = icTuple.simpleClassName();
        assertEquals("N", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsMember_wJzr0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        boolean result = icTuple.isMember();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetC_otRj0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
        String actualC = icTuple.getC();
        assertEquals("C", actualC);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_vxfw0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        String expected = "IcTuple (IcTuple in IcTuple)";
        assertEquals(expected, icTuple.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOuterClassString_CERo0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
        String result = icTuple.outerClassString();
        assertEquals("C", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetN_rUjI0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 5);
        assertEquals("N", icTuple.getN());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testThisClassIndex_EhgV0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        int actual = icTuple.thisClassIndex();
        int expected = 1;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testThisClassIndexWhenNotPredicted_yWSv1() throws Exception {
        IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 1, 1, 1, 1);
        int actual = icTuple.thisClassIndex();
        int expected = -1;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetF_wEOu0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 1, 1, 1, 1);
        int actualF = icTuple.getF();
        int expectedF = 1;
        assertEquals(expectedF, actualF);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetTupleIndex_GsZS0() throws Exception {
		IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 2, 3, 4, 5);
		int actual = icTuple.getTupleIndex();
		int expected = 5;
		assertEquals(expected, actual);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollar1_qXwD0() throws Exception {
        IcTuple icTuple = new IcTuple("com.example.Class", 1, "com.example.Class2", "method", 0, 1, 2, 3);
        String[] result = icTuple.innerBreakAtDollar("com.example.Class$InnerClass");
        assert result.length == 2;
        assert result[0].equals("com.example.Class");
        assert result[1].equals("InnerClass");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollar2_jFHg1() throws Exception {
        IcTuple icTuple = new IcTuple("com.example.Class", 1, "com.example.Class2", "method", 0, 1, 2, 3);
        String[] result = icTuple.innerBreakAtDollar("com.example.Class$InnerClass$InnerInnerClass");
        assert result.length == 3;
        assert result[0].equals("com.example.Class");
        assert result[1].equals("InnerClass");
        assert result[2].equals("InnerInnerClass");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollar3_PEgD2() throws Exception {
        IcTuple icTuple = new IcTuple("com.example.Class", 1, "com.example.Class2", "method", 0, 1, 2, 3);
        String[] result = icTuple.innerBreakAtDollar("com.example.Class");
        assert result.length == 1;
        assert result[0].equals("com.example.Class");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInnerBreakAtDollar4_TQym3() throws Exception {
        IcTuple icTuple = new IcTuple("com.example.Class", 1, "com.example.Class2", "method", 0, 1, 2, 3);
        String[] result = icTuple.innerBreakAtDollar("com.example.Class$InnerClass$InnerInnerClass$InnerInnermostClass");
        assert result.length == 4;
        assert result[0].equals("com.example.Class");
        assert result[1].equals("InnerClass");
        assert result[2].equals("InnerInnerClass");
        assert result[3].equals("InnerInnermostClass");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testThisClassString_flOb0() throws Exception {
        IcTuple icTuple = new IcTuple("C", 0, "C2", "N", 0, 0, 0, 0);
        String actual = icTuple.thisClassString();
        String expected = "C";
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testThisClassString2_RTnG1() throws Exception {
        IcTuple icTuple = new IcTuple("C", 1, "C2", "N", 0, 0, 0, 0);
        String actual = icTuple.thisClassString();
        String expected = "C2$N";
        assertEquals(expected, actual);
    }
}