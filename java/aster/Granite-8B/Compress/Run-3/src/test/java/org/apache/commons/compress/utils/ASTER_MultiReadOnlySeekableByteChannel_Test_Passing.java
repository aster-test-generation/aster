/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_MultiReadOnlySeekableByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition1_kBZN0() throws IOException {
        List<SeekableByteChannel> channels = null; // Initialize channels
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
        long channelNumber = 0; // Initialize channelNumber
        long relativeOffset = 0; // Initialize relativeOffset
        SeekableByteChannel seekableByteChannel = multiReadOnlySeekableByteChannel.position(channelNumber, relativeOffset);
        assertNotNull(seekableByteChannel);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition2_yxZX1() throws IOException {
        List<SeekableByteChannel> channels = null; // Initialize channels
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
        long channelNumber = 1; // Initialize channelNumber
        long relativeOffset = 1; // Initialize relativeOffset
        SeekableByteChannel seekableByteChannel = multiReadOnlySeekableByteChannel.position(channelNumber, relativeOffset);
        assertNotNull(seekableByteChannel);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition3_ggFN2() throws IOException {
        List<SeekableByteChannel> channels = null; // Initialize channels
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
        long channelNumber = 2; // Initialize channelNumber
        long relativeOffset = 2; // Initialize relativeOffset
        SeekableByteChannel seekableByteChannel = multiReadOnlySeekableByteChannel.position(channelNumber, relativeOffset);
        assertNotNull(seekableByteChannel);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForPathsWithNullPaths_bkTP2_1() throws Exception {
        SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forPaths((Path[]) null);
        assertNotNull(channel);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForPathsWithNullPaths_bkTP2_2() throws Exception {
        SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forPaths((Path[]) null);
        assertTrue(channel instanceof MultiReadOnlySeekableByteChannel);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_OjNY0() throws Exception {
        List<SeekableByteChannel> channels = new ArrayList<>();
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
        ByteBuffer src = ByteBuffer.allocate(10);
        int bytesWritten = multiReadOnlySeekableByteChannel.write(src);
        assert bytesWritten == 10;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForFilesWithOneFile_lNya0() throws IOException {
        final File file = new File("test.txt");
        final SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forFiles(file);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForFilesWithMultipleFiles_lQQn1() throws IOException {
        final File file1 = new File("test1.txt");
        final File file2 = new File("test2.txt");
        final SeekableByteChannel channel = MultiReadOnlySeekableByteChannel.forFiles(file1, file2);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition1_ldZp0() throws Exception {
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(Collections.emptyList());
        try {
            multiReadOnlySeekableByteChannel.position(-1L);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition2_SkCg1() throws Exception {
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(Collections.emptyList());
        try {
            multiReadOnlySeekableByteChannel.position(0L);
            fail("Expected ClosedChannelException");
        } catch (ClosedChannelException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition3_OSui2() throws Exception {
        SeekableByteChannel seekableByteChannel = mock(SeekableByteChannel.class);
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(Collections.singletonList(seekableByteChannel));
        multiReadOnlySeekableByteChannel.position(0L);
        verify(seekableByteChannel).position(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition4_WreY3() throws Exception {
        SeekableByteChannel seekableByteChannel = mock(SeekableByteChannel.class);
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(Collections.singletonList(seekableByteChannel));
        multiReadOnlySeekableByteChannel.position(1L);
        verify(seekableByteChannel).position(1L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition5_PYGU4() throws Exception {
        SeekableByteChannel seekableByteChannel = mock(SeekableByteChannel.class);
        when(seekableByteChannel.size()).thenReturn(1L);
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(Collections.singletonList(seekableByteChannel));
        multiReadOnlySeekableByteChannel.position(0L);
        verify(seekableByteChannel).position(0L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition6_FeSG5() throws Exception {
        SeekableByteChannel seekableByteChannel = mock(SeekableByteChannel.class);
        when(seekableByteChannel.size()).thenReturn(1L);
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(Collections.singletonList(seekableByteChannel));
        multiReadOnlySeekableByteChannel.position(1L);
        verify(seekableByteChannel).position(1L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition7_xJTY6() throws Exception {
        SeekableByteChannel seekableByteChannel = mock(SeekableByteChannel.class);
        when(seekableByteChannel.size()).thenReturn(1L);
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(Collections.singletonList(seekableByteChannel));
        multiReadOnlySeekableByteChannel.position(2L);
        verify(seekableByteChannel).position(1L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition8_KPkW7() throws Exception {
        SeekableByteChannel seekableByteChannel = mock(SeekableByteChannel.class);
        when(seekableByteChannel.size()).thenReturn(1L);
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(Collections.singletonList(seekableByteChannel));
        multiReadOnlySeekableByteChannel.position(3L);
        verify(seekableByteChannel).position(2L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition9_xUkJ8() throws Exception {
        SeekableByteChannel seekableByteChannel = mock(SeekableByteChannel.class);
        when(seekableByteChannel.size()).thenReturn(1L);
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(Collections.singletonList(seekableByteChannel));
        multiReadOnlySeekableByteChannel.position(4L);
        verify(seekableByteChannel).position(3L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition10_JIJi9() throws Exception {
        SeekableByteChannel seekableByteChannel = mock(SeekableByteChannel.class);
        when(seekableByteChannel.size()).thenReturn(1L);
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(Collections.singletonList(seekableByteChannel));
        multiReadOnlySeekableByteChannel.position(5L);
        verify(seekableByteChannel).position(4L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_CNgb0() throws Exception {
        List<SeekableByteChannel> channels = new ArrayList<>();
        channels.add(mock(SeekableByteChannel.class));
        channels.add(mock(SeekableByteChannel.class));
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
        long position = multiReadOnlySeekableByteChannel.position();
        assertEquals(0, position);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithEmptyBuffer_tVNG0() throws IOException {
        List<SeekableByteChannel> channels = new ArrayList<>();
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
        ByteBuffer dst = ByteBuffer.allocate(0);
        int bytesRead = multiReadOnlySeekableByteChannel.read(dst);
        assert bytesRead == 0;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_urWz0() throws IOException {
        List<SeekableByteChannel> channels = new ArrayList<>();
        channels.add(mock(SeekableByteChannel.class));
        channels.add(mock(SeekableByteChannel.class));
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
        when(channels.get(0).size()).thenReturn(10L);
        when(channels.get(1).size()).thenReturn(20L);
        long size = multiReadOnlySeekableByteChannel.size();
        assertEquals(30L, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithEmptyChannels_NPRZ1() throws IOException {
        List<SeekableByteChannel> channels = new ArrayList<>();
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
        long size = multiReadOnlySeekableByteChannel.size();
        assertEquals(0L, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithOneChannel_ucIh2() throws IOException {
        List<SeekableByteChannel> channels = new ArrayList<>();
        channels.add(mock(SeekableByteChannel.class));
        MultiReadOnlySeekableByteChannel multiReadOnlySeekableByteChannel = new MultiReadOnlySeekableByteChannel(channels);
        when(channels.get(0).size()).thenReturn(10L);
        long size = multiReadOnlySeekableByteChannel.size();
        assertEquals(10L, size);
    }
}