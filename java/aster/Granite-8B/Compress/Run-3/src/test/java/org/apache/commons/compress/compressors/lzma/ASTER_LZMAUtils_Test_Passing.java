/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMAUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileName_BPSe0() throws Exception {
        String fileName = "example.txt";
        boolean result = LZMAUtils.isCompressedFileName(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileNameWithExtension_ucrm1() throws Exception {
        String fileName = "example.txt.lzma";
        boolean result = LZMAUtils.isCompressedFileName(fileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileNameWithInvalidExtension_KZcn2() throws Exception {
        String fileName = "example.txt.lzmb";
        boolean result = LZMAUtils.isCompressedFileName(fileName);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFileNameWithNoExtension_qGZX3() throws Exception {
        String fileName = "example";
        boolean result = LZMAUtils.isCompressedFileName(fileName);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testMatchesWithEmptySignature_ALLm0() throws Exception {
    byte[] signature = new byte[0];
    boolean result = LZMAUtils.matches(signature, 0);
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUncompressedFilename_QhRJ0() throws Exception {
        String fileName = "example.txt";
        String expected = "example.txt";
        String actual = LZMAUtils.getUncompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilename_RWdL0() throws Exception {
        String fileName = "example.txt.lzma";
        boolean expected = true;
        boolean actual = LZMAUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilenameWithNonCompressedFile_UxNq1() throws Exception {
        String fileName = "example.txt";
        boolean expected = false;
        boolean actual = LZMAUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilenameWithInvalidFileExtension_AzIb2() throws Exception {
        String fileName = "example.txt.zip";
        boolean expected = false;
        boolean actual = LZMAUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilenameWithNullFileName_GSID3() throws Exception {
        String fileName = null;
        boolean expected = false;
        boolean actual = LZMAUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCompressedFilenameWithEmptyFileName_kCIu4() throws Exception {
        String fileName = "";
        boolean expected = false;
        boolean actual = LZMAUtils.isCompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilename_kILe0() throws Exception {
        String fileName = "example.txt";
        String expected = "example.txt.lzma";
        String actual = LZMAUtils.getCompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLZMACompressionAvailable_UzQX0() throws Exception {
        boolean result = LZMAUtils.isLZMACompressionAvailable();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLZMACompressionAvailable2_sfpd1() throws Exception {
        boolean result = LZMAUtils.isLZMACompressionAvailable();
        assertFalse(result);
    }
}