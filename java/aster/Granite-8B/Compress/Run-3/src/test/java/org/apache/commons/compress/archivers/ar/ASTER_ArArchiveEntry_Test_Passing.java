/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.ar;
import java.io.File;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_BIQr0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        boolean result = entry.equals(null);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_uOEb1() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        boolean result = entry.equals(new Object());
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_iHGo2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        boolean result = entry.equals(entry);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameName_MxWk3() {
        ArArchiveEntry entry1 = new ArArchiveEntry("name", 10L);
        ArArchiveEntry entry2 = new ArArchiveEntry("name", 10L);
        boolean result = entry1.equals(entry2);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_AOqS4() {
        ArArchiveEntry entry1 = new ArArchiveEntry("name1", 10L);
        ArArchiveEntry entry2 = new ArArchiveEntry("name2", 10L);
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentLength_IeWe5() {
        ArArchiveEntry entry1 = new ArArchiveEntry("name", 10L);
        ArArchiveEntry entry2 = new ArArchiveEntry("name", 20L);
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentUserId_YIfl6() {
        ArArchiveEntry entry1 = new ArArchiveEntry("name", 10L, 100, 101, 102, 103L);
        ArArchiveEntry entry2 = new ArArchiveEntry("name", 10L, 200, 101, 102, 103L);
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentGroupId_mTUY7() {
        ArArchiveEntry entry1 = new ArArchiveEntry("name", 10L, 100, 101, 102, 103L);
        ArArchiveEntry entry2 = new ArArchiveEntry("name", 10L, 100, 201, 102, 103L);
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentMode_UuUT8() {
        ArArchiveEntry entry1 = new ArArchiveEntry("name", 10L, 100, 101, 102, 103L);
        ArArchiveEntry entry2 = new ArArchiveEntry("name", 10L, 100, 101, 202, 103L);
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentLastModified_vxnS9() {
        ArArchiveEntry entry1 = new ArArchiveEntry("name", 10L, 100, 101, 102, 103L);
        ArArchiveEntry entry2 = new ArArchiveEntry("name", 10L, 100, 101, 102, 203L);
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectory_GVxH0() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L);
    boolean isDirectory = entry.isDirectory();
    assertFalse(isDirectory);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryWithUserId_hAzS2() {
    ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L, 100, 100, 100, 100L);
    boolean isDirectory = entry.isDirectory();
    assertFalse(isDirectory);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsDirectoryWithFile_uBVd3() {
    File file = new File("test.txt");
    ArArchiveEntry entry = new ArArchiveEntry(file, "test.txt");
    boolean isDirectory = entry.isDirectory();
    assertFalse(isDirectory);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_uffU0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 100L);
        Date expectedDate = new Date(1000 * 100L);
        assertEquals(expectedDate, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_ITYe0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithUserId_DHZj2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 10, 20, 30, 40L);
        assertEquals(20, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupIdWithFile_uYUn3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("file"), "entryName");
        assertEquals(0, entry.getGroupId());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSize_OJBj0() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L);
        assertEquals(10L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithUserId_BTuH2() {
        ArArchiveEntry entry = new ArArchiveEntry("name", 10L, 100, 101, 102, 103L);
        assertEquals(10L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSizeWithFile_nyWh3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("input.txt"), "entryName");
        assertEquals(10L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testHashCode_NeWF0() {
		ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L);
		assertEquals(106273829, entry.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testHashCodeWithUserId_kTms2() {
		ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L, 100, 100, 100, 100L);
		assertEquals(106273829, entry.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testHashCodeWithFile_aKgU3() {
		File file = new File("test.txt");
		ArArchiveEntry entry = new ArArchiveEntry(file, "test.txt");
		assertEquals(106273829, entry.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ikad0() {
        ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithUserId_DsmP2() {
        ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100, 1000, 1001, 1002, 1003);
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithFile_dRbX3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("test.txt"), "test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArArchiveEntryGetLength_jdvN0() {
        ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L);
        assertEquals(100L, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArArchiveEntryGetLengthWithUserId_PXgT2() {
        ArArchiveEntry entry = new ArArchiveEntry("test.txt", 100L, 100, 100, 100, 100L);
        assertEquals(100L, entry.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArArchiveEntryGetLengthWithFile_GoJT3() {
        ArArchiveEntry entry = new ArArchiveEntry(new File("test.txt"), "test.txt");
        assertEquals(100L, entry.getLength());
    }
}