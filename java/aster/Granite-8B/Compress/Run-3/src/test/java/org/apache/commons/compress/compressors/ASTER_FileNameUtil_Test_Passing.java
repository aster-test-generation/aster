/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FileNameUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFileNameUtil_getUncompressedFilename_OdNd0() throws Exception {
        Map<String, String> uncompressSuffix = new HashMap<>();
        uncompressSuffix.put("zip", "txt");
        uncompressSuffix.put("jar", "txt");
        FileNameUtil fileNameUtil = new FileNameUtil(uncompressSuffix, "txt");
        String fileName = "example.zip";
        String expected = "example.txt";
        String actual = fileNameUtil.getUncompressedFilename(fileName);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsCompressedFilename_cPUN0() throws Exception {
		FileNameUtil fileNameUtil = new FileNameUtil(null, null);
		boolean result = fileNameUtil.isCompressedFilename("test.txt");
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsCompressedFilename_twqE1() throws Exception {
		FileNameUtil fileNameUtil = new FileNameUtil(null, null);
		boolean result = fileNameUtil.isCompressedFilename("test.txt.gz");
		assertFalse(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedFilename_TLaM0() throws Exception {
        FileNameUtil fileNameUtil = new FileNameUtil(new HashMap<String, String>(), "txt");
        String fileName = "example.pdf";
        String expected = "example.pdf";
        String actual = fileNameUtil.getCompressedFilename(fileName);
        assertEquals(expected, actual);
    }
}