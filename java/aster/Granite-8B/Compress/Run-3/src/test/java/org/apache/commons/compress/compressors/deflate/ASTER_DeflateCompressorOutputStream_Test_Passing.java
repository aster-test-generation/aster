/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.deflate;
import java.io.IOException;
import java.io.OutputStream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DeflateCompressorOutputStream_Test_Passing {
    private OutputStream outputStream;
    private DeflateParameters parameters;
    private DeflateCompressorOutputStream deflaterCompressorOutputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlush_xtBQ0() throws IOException {
        DeflateParameters parameters = new DeflateParameters();
        DeflateCompressorOutputStream deflateCompressorOutputStream = new DeflateCompressorOutputStream(System.out, parameters);
        deflateCompressorOutputStream.flush();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_orYR0() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        DeflateCompressorOutputStream deflateCompressorOutputStream = new DeflateCompressorOutputStream(mockOutputStream);
        deflateCompressorOutputStream.write(1);
        verify(mockOutputStream, times(1)).write(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFinishWithOutputStreamNull_bjXq2_1() {
        OutputStream outputStream = null;
        DeflateCompressorOutputStream deflateCompressorOutputStream = new DeflateCompressorOutputStream(outputStream);
        IOException exception = assertThrows(IOException.class, deflateCompressorOutputStream::finish);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_XqHr1() throws IOException {
        deflaterCompressorOutputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testFinishWithOutputStreamNull_bjXq2() {
        OutputStream outputStream = null;
        DeflateCompressorOutputStream deflateCompressorOutputStream = new DeflateCompressorOutputStream(outputStream);
        IOException exception = assertThrows(IOException.class, deflateCompressorOutputStream::finish);
        assertEquals("Output stream is null", exception.getMessage());
    }
}