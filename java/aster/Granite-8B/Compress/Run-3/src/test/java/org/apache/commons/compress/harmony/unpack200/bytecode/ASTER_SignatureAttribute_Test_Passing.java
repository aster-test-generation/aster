/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SignatureAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_ZMkB0() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("example");
        SignatureAttribute signatureAttribute = new SignatureAttribute(cputf8);
        assertEquals("Signature: example", signatureAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithGlobalIndex_ckNg1() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("example", 1);
        SignatureAttribute signatureAttribute = new SignatureAttribute(cputf8);
        assertEquals("Signature: example", signatureAttribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_xhyX0_1() throws Exception {
        CPUTF8 utf8 = new CPUTF8("UTF8");
        CPUTF8 signature = new CPUTF8("signature");
        SignatureAttribute attribute = new SignatureAttribute(utf8);
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(2, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_xhyX0_2() throws Exception {
        CPUTF8 utf8 = new CPUTF8("UTF8");
        CPUTF8 signature = new CPUTF8("signature");
        SignatureAttribute attribute = new SignatureAttribute(utf8);
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(utf8, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_xhyX0_3() throws Exception {
        CPUTF8 utf8 = new CPUTF8("UTF8");
        CPUTF8 signature = new CPUTF8("signature");
        SignatureAttribute attribute = new SignatureAttribute(utf8);
        ClassFileEntry[] entries = attribute.getNestedClassFileEntries();
        assertEquals(signature, entries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLength_mWht0() throws Exception {
		CPUTF8 utf8 = new CPUTF8("example");
		SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
		int length = signatureAttribute.getLength();
		assertEquals(2, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testLengthWithGlobalIndex_cZOw1() throws Exception {
		CPUTF8 utf8 = new CPUTF8("example", 10);
		SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
		int length = signatureAttribute.getLength();
		assertEquals(2, length);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_tHLw0_1() throws Exception {
        CPUTF8 utf8 = new CPUTF8("UTF8");
        ClassConstantPool pool = new ClassConstantPool();
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        signatureAttribute.resolve(pool);
        assertEquals(1, pool.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_tHLw0_2() throws Exception {
        CPUTF8 utf8 = new CPUTF8("UTF8");
        ClassConstantPool pool = new ClassConstantPool();
        SignatureAttribute signatureAttribute = new SignatureAttribute(utf8);
        signatureAttribute.resolve(pool);
        assertEquals(utf8, pool.get(0));}
}