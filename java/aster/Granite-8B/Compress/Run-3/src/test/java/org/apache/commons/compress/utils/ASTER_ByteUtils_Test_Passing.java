/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.DataInput;
import java.io.IOException;
import java.io.OutputStream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ByteUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromLittleEndian_DthM0() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04};
        long result = ByteUtils.fromLittleEndian(bytes, 0, 4);
        assertEquals(16909060L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian2_MZuE1() {
        byte[] b = new byte[4];
        ByteUtils.toLittleEndian(b, 0x12345678L, 0, 4);
        assert Arrays.equals(b, new byte[]{0x78, 0x56, 0x34, 0x12});
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian_MwKN0() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        long value = 1234567890L;
        int length = 8;
        ByteUtils.toLittleEndian(mockOutputStream, value, length);
        verify(mockOutputStream, times(8)).write(anyInt());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian2_fBbE1() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        long value = -1234567890L;
        int length = 8;
        ByteUtils.toLittleEndian(mockOutputStream, value, length);
        verify(mockOutputStream, times(8)).write(anyInt());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFromLittleEndian_mIOp0() {
        byte[] bytes = new byte[]{0x01, 0x02, 0x03, 0x04};
        long expected = 0x04030201L;
        long actual = ByteUtils.fromLittleEndian(bytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void accept(int value) {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFromLittleEndian1_mBMD0_RpmK0() throws IOException {
    DataInput in = mock(DataInput.class);
    int length = 1;
    when(in.readUnsignedByte()).thenReturn((int) (byte) 0);
    long result = ByteUtils.fromLittleEndian(in, length);
    assertEquals(0, result);
    verify(in, times(1)).readUnsignedByte();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToLittleEndian_XTCT0_KeKs0() {
        byte[] b = new byte[8];
        ByteUtils.toLittleEndian(b, 0x1234567890ABCDL, 0, 8);
        assert Arrays.equals(b, new byte[]{(byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0x78, (byte) 0x56, (byte) 0x34, (byte) 0x12, 0x00});
    }
}