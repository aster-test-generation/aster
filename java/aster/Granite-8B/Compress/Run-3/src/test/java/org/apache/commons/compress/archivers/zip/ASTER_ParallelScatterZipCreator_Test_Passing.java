/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.TimeUnit;
import org.apache.commons.compress.parallel.InputStreamSupplier;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParallelScatterZipCreator_Test_Passing {
@Mock
    private ZipArchiveEntry zipArchiveEntry;
@Mock
    private InputStreamSupplier source;
private ParallelScatterZipCreator parallelScatterZipCreator;
@Mock
    private DefaultBackingStoreSupplier backingStoreSupplier;
@Mock
    private ExecutorService executorService;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSubmit_dvOz0() {
        DefaultBackingStoreSupplier backingStoreSupplier = new DefaultBackingStoreSupplier(null);
        ParallelScatterZipCreator parallelScatterZipCreator = new ParallelScatterZipCreator(null, backingStoreSupplier, 0);
        Callable callable = () -> null;
        parallelScatterZipCreator.submit(callable);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddArchiveEntry() {
        parallelScatterZipCreator = new ParallelScatterZipCreator(executorService, backingStoreSupplier);
        parallelScatterZipCreator.addArchiveEntry(zipArchiveEntry, source);
        verify(executorService).submit(any(Callable.class));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetStatisticsMessage_fYvN0() {
        ParallelScatterZipCreator parallelScatterZipCreator = new ParallelScatterZipCreator();
        ScatterStatistics scatterStatistics = parallelScatterZipCreator.getStatisticsMessage();
        assertNotNull(scatterStatistics);
        assertEquals(0, scatterStatistics.getMergingElapsed());
        assertEquals(0, scatterStatistics.getCompressionElapsed());
    }
}