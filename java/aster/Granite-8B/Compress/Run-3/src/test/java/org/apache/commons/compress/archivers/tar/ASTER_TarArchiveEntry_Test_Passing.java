/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.File;
import java.io.IOException;
import java.nio.file.attribute.FileTime;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.InjectMocks;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveEntry_Test_Passing {
@Mock
    private Object it;
private TarArchiveEntry tarArchiveEntry;
@Mock
    private TarArchiveEntry desc;
@InjectMocks
    private TarArchiveEntry tararchiveentry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetModTime4_WlGD4() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetModTime5_zedK5() {
        String name = "";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetModTime7_neqV7() {
        String name = "";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetModTime9_trNh9() {
        File file = null;
        String fileName = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetModTime10_bndh10() {
        File file = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        Date modTime = tarArchiveEntry.getModTime();
        assertNotNull(modTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGlobalPaxHeaderWithFileName_cFof1() {
        TarArchiveEntry entry = new TarArchiveEntry("name", (byte) 0);
        entry.setName("PaxHeaders/PaxHeaders.xml");
        assertTrue(entry.isGlobalPaxHeader());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag5_ipWa4() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        byte linkFlag = tarArchiveEntry.getLinkFlag();
        assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag6_mXLS5() {
        String name = "";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        byte linkFlag2 = tarArchiveEntry.getLinkFlag();
        assertEquals((byte) 0, linkFlag2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag7_uvPw6() {
        String name = "";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        byte linkFlag2 = tarArchiveEntry.getLinkFlag();
        assertEquals((byte) 0, linkFlag2);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag9_TjEw8() {
        String name = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name);
        byte linkFlag = tarArchiveEntry.getLinkFlag();
        assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLinkFlag10_nUAB9() {
        String name = "";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        byte linkFlag = tarArchiveEntry.getLinkFlag();
        assertEquals((byte) 0, linkFlag);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate5_Zdxx4() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate6_xNTF5() {
        String name = "test.txt";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate7_SvIn6() {
        String name = "test.txt";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate9_MPfP8() {
        String name = "test.txt";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate11_jHER10() {
        File file = new File("test.txt");
        String fileName = "test.txt";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate12_jvmV11() {
        File file = new File("test.txt");
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        Date lastModifiedDate = tarArchiveEntry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongGroupId5_SZlV4() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        long longGroupId = tarArchiveEntry.getLongGroupId();
        assertEquals(0L, longGroupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongGroupId6_CRKu5() {
        String name = "";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        long longGroupId = tarArchiveEntry.getLongGroupId();
        assertEquals(0L, longGroupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongGroupId7_hoHS6() {
        String name = "";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        long longGroupId = tarArchiveEntry.getLongGroupId();
        assertEquals(0L, longGroupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongGroupId9_VAWD8() {
        String name = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name);
        long longGroupId = tarArchiveEntry.getLongGroupId();
        assertEquals(0L, longGroupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongGroupId10_KNHT9() {
        String name = "";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        long longGroupId = tarArchiveEntry.getLongGroupId();
        assertEquals(0L, longGroupId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongGroupId12_vznc11() {
        File file = null;
        String fileName = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        long longGroupId = tarArchiveEntry.getLongGroupId();
        assertEquals(0L, longGroupId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime4_weWX4() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime5_VXLV5() {
        String name = "name";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime6_Fjtk6() {
        String name = "name";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime8_BfuU8() {
        String name = "name";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime10_Bkni10() {
        File file = null;
        String fileName = "fileName";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationTime11_UlJq11() {
        File file = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        tarArchiveEntry.setCreationTime(FileTime.fromMillis(0L));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetOrderedSparseHeaders1_Gxpa0() throws IOException {
        final TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(null, null, null);
        final List<TarArchiveStructSparse> actualgetOrderedSparseHeadersResult = tarArchiveEntry.getOrderedSparseHeaders();
        final List<TarArchiveStructSparse> expectedgetOrderedSparseHeadersResult = Collections.emptyList();
        assertEquals(expectedgetOrderedSparseHeadersResult, actualgetOrderedSparseHeadersResult);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_yerV0() {
    TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt");
    assertEquals(tarArchiveEntry.getName().hashCode(), tarArchiveEntry.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDevice_OTWk0() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", (byte) 0);
        assertTrue(tarArchiveEntry.isCharacterDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCharacterDevice2_YSLi1() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("test.txt", (byte) 1);
        assertTrue(!tarArchiveEntry.isCharacterDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithString_gAPY4() {
        String name = "test.txt";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        tarArchiveEntry.setLastAccessTime(time);
        assertEquals(time, tarArchiveEntry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithStringAndBoolean_UBoZ5() {
        String name = "test.txt";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        tarArchiveEntry.setLastAccessTime(time);
        assertEquals(time, tarArchiveEntry.getLastAccessTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastAccessTimeWithFile_KTBK7() {
        File file = new File("test.txt");
        String fileName = "test.txt";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        tarArchiveEntry.setLastAccessTime(time);
        assertEquals(time, tarArchiveEntry.getLastAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateEntryFromPaxHeaders_RrRd0() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null);
        Map<String, String> headers = new HashMap<>();
        entry.updateEntryFromPaxHeaders(headers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateEntryFromPaxHeaders3_uVTI2() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null, false);
        Map<String, String> headers = new HashMap<>();
        entry.updateEntryFromPaxHeaders(headers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateEntryFromPaxHeaders4_obxI3() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry(null, null, null, false, 0L);
        Map<String, String> headers = new HashMap<>();
        entry.updateEntryFromPaxHeaders(headers);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongUserId5_INQT4() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        long longUserId = tarArchiveEntry.getLongUserId();
        assertEquals(0, longUserId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongUserId6_RCkF5() {
        String name = "name";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        long longUserId = tarArchiveEntry.getLongUserId();
        assertEquals(0, longUserId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongUserId7_oeJO6() {
        String name = "name";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        long longUserId = tarArchiveEntry.getLongUserId();
        assertEquals(0, longUserId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongUserId9_rmAC8() {
        String name = "name";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        long longUserId = tarArchiveEntry.getLongUserId();
        assertEquals(0, longUserId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongUserId11_hQCR10() {
        File file = null;
        String fileName = "fileName";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        long longUserId = tarArchiveEntry.getLongUserId();
        assertEquals(0, longUserId);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetLongUserId12_RvBM11() {
        File file = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        long longUserId = tarArchiveEntry.getLongUserId();
        assertEquals(0, longUserId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize4_FiQr4() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize5_PBiX5() {
        String name = "";
        byte linkFlag = 0;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize6_yaUU6() {
        String name = "";
        byte linkFlag = 0;
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize8_dLIB8() {
        String name = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize9_GAle9() {
        String name = "";
        boolean preserveAbsolutePath = false;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize11_UlSj11() {
        File file = null;
        String fileName = "";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTarArchiveEntryGetSize12_FXKS12() {
        File file = null;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        long size = tarArchiveEntry.getSize();
        assertEquals(0, size);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_rjxZ0() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file2", (byte) 0);
    TarArchiveEntry entry3 = new TarArchiveEntry("file1", (byte) 0);
    assertTrue(entry1.equals(entry1));
    assertFalse(entry1.equals(null));
    assertFalse(entry1.equals(new Object()));
    assertFalse(entry1.equals(entry2));
    assertTrue(entry1.equals(entry3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentLinkFlags_LhAW1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 1);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 2);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentModTimes_vRZM2() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry2.setModTime(new Date(System.currentTimeMillis() + 1000));
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentUserIds_eLDm3() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry2.setUserId(1000);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentGroupIds_JIYM4() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry2.setGroupId(1000);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentSizes_XYkC5() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry2.setSize(1000);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentLinkNames_kgCO8() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file1", (byte) 0);
    entry2.setLinkName("link2");
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithDifferentNames_aPha9() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file2", (byte) 0);
    assertFalse(entry1.equals(entry2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor5_GpvV5() {
        byte[] headerBuf = new byte[512];
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(headerBuf);
        assertNotNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor6_Zvyo6() {
        String name = "file.txt";
        byte linkFlag = '0';
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag);
        assertNotNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor7_zneZ7() {
        String name = "file.txt";
        byte linkFlag = '0';
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, linkFlag, preserveAbsolutePath);
        assertNotNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor9_DasH9() {
        String name = "file.txt";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name);
        assertNotNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor10_cyMZ10() {
        String name = "file.txt";
        boolean preserveAbsolutePath = true;
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(name, preserveAbsolutePath);
        assertNotNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor12_IsNm12() {
        File file = new File("path/to/file");
        String fileName = "file.txt";
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, fileName);
        assertNotNull(tarArchiveEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructor13_PuNY13() {
        File file = new File("path/to/file");
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file);
        assertNotNull(tarArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDevMinor5_YYbe5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("", (byte) 0);
        int result = tarArchiveEntry.getDevMinor();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDevMinor6_bsBq6() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("", (byte) 0, false);
        int result = tarArchiveEntry.getDevMinor();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUserName5_xsyS4() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("", (byte) 0);
        String userName = tarArchiveEntry.getUserName();
        assertEquals("", userName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUserName6_FfyI5() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("", (byte) 0, false);
        String userName = tarArchiveEntry.getUserName();
        assertEquals("", userName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUserName8_UZVE7() {
        TarArchiveEntry tarArchiveEntry = new TarArchiveEntry("", false);
        String userName = tarArchiveEntry.getUserName();
        assertEquals("", userName);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_rjxZ0_1() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file2", (byte) 0);
    TarArchiveEntry entry3 = new TarArchiveEntry("file1", (byte) 0);
    assertTrue(entry1.equals(entry1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_rjxZ0_2() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file2", (byte) 0);
    TarArchiveEntry entry3 = new TarArchiveEntry("file1", (byte) 0);
    assertFalse(entry1.equals(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_rjxZ0_3() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file2", (byte) 0);
    TarArchiveEntry entry3 = new TarArchiveEntry("file1", (byte) 0);
    assertFalse(entry1.equals(new Object()));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_rjxZ0_4() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file2", (byte) 0);
    TarArchiveEntry entry3 = new TarArchiveEntry("file1", (byte) 0);
    assertFalse(entry1.equals(entry2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_rjxZ0_5() {
    TarArchiveEntry entry1 = new TarArchiveEntry("file1", (byte) 0);
    TarArchiveEntry entry2 = new TarArchiveEntry("file2", (byte) 0);
    TarArchiveEntry entry3 = new TarArchiveEntry("file1", (byte) 0);
    assertTrue(entry1.equals(entry3));}
}