/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import org.apache.commons.compress.archivers.ArchiveEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ArchiveUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_pFZm0() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{1, 2, 3};
        int offset1 = 0;
        int offset2 = 0;
        int length1 = 3;
        int length2 = 3;
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2, ignoreTrailingNulls);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithDifferentBuffers_imNi1() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{4, 5, 6};
        int offset1 = 0;
        int offset2 = 0;
        int length1 = 3;
        int length2 = 3;
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2, ignoreTrailingNulls);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithDifferentLengths_sgVS2() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{1, 2};
        int offset1 = 0;
        int offset2 = 0;
        int length1 = 3;
        int length2 = 2;
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2, ignoreTrailingNulls);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithIgnoreTrailingNullsFalse_AEpL3() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{1, 2, 0};
        int offset1 = 0;
        int offset2 = 0;
        int length1 = 3;
        int length2 = 3;
        boolean ignoreTrailingNulls = false;
        boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2, ignoreTrailingNulls);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithIgnoreTrailingNullsTrue_uHxG4() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = new byte[]{1, 2, 0};
        int offset1 = 0;
        int offset2 = 0;
        int length1 = 3;
        int length2 = 3;
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2, ignoreTrailingNulls);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithNullBuffers_lMLy5() {
        byte[] buffer1 = null;
        byte[] buffer2 = null;
        int offset1 = 0;
        int offset2 = 0;
        int length1 = 0;
        int length2 = 0;
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2, ignoreTrailingNulls);
        assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithNullBuffer1_JKPj6() {
        byte[] buffer1 = null;
        byte[] buffer2 = new byte[]{1, 2, 3};
        int offset1 = 0;
        int offset2 = 0;
        int length1 = 0;
        int length2 = 3;
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2, ignoreTrailingNulls);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithNullBuffer2_bxtJ7() {
        byte[] buffer1 = new byte[]{1, 2, 3};
        byte[] buffer2 = null;
        int offset1 = 0;
        int offset2 = 0;
        int length1 = 3;
        int length2 = 0;
        boolean ignoreTrailingNulls = true;
        boolean result = ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2, ignoreTrailingNulls);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIsEqual_NVAs0() {
        byte[] buffer1 = { 1, 2, 3 };
        byte[] buffer2 = { 1, 2, 3 };
        assertEquals(true, ArchiveUtils.isEqual(buffer1, buffer2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitize1_MuEA0() {
        String s = "Hello, World!";
        String expected = "Hello, World!";
        String actual = ArchiveUtils.sanitize(s);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitize2_gbnM1() {
        String s = "Hello, World!@#$%^&*()";
        String expected = "Hello, World!@#$%^&*()";
        String actual = ArchiveUtils.sanitize(s);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitize3_ciew2() {
        String s = "Hello, World!@#$%^&*()_+";
        String expected = "Hello, World!@#$%^&*()_+";
        String actual = ArchiveUtils.sanitize(s);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSanitize4_DFQz3() {
        String s = "Hello, World!@#$%^&*()_+{}|\\][;:'\"<>,./?";
        String expected = "Hello, World!@#$%^&*()_+{}|\\][;:'\"<>,./?";
        String actual = ArchiveUtils.sanitize(s);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testIsEqual_IVYu0() {
		byte[] buffer1 = new byte[10];
		byte[] buffer2 = new byte[10];
		boolean ignoreTrailingNulls = true;
		boolean result = ArchiveUtils.isEqual(buffer1, buffer2, ignoreTrailingNulls);
		assertTrue(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisArrayZero_whenArrayIsAllZeros_returnsTrue_eLTv0() {
        byte[] array = new byte[10];
        assertTrue(ArchiveUtils.isArrayZero(array, array.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisArrayZero_whenArrayContainsNonZeroElement_returnsFalse_utyP1() {
        byte[] array = new byte[10];
        array[0] = 1;
        assertFalse(ArchiveUtils.isArrayZero(array, array.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisArrayZero_whenArrayIsEmpty_returnsTrue_xLBP2() {
        byte[] array = new byte[0];
        assertTrue(ArchiveUtils.isArrayZero(array, array.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_yWdr0() {
        byte[] inputBytes = { 65, 66, 67 };
        String expected = "ABC";
        String actual = ArchiveUtils.toAsciiString(inputBytes);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqual_pEAK0() {
        byte[] buffer1 = new byte[10];
        byte[] buffer2 = new byte[10];
        boolean result1 = ArchiveUtils.isEqual(buffer1, 0, 10, buffer2, 0, 10);
        assert result1;
        boolean result2 = ArchiveUtils.isEqual(buffer1, 1, 9, buffer2, 1, 9);
        assert !result2;
        boolean result3 = ArchiveUtils.isEqual(buffer1, 0, 0, buffer2, 0, 0);
        assert result3;
        boolean result4 = ArchiveUtils.isEqual(buffer1, 5, 5, buffer2, 5, 5);
        assert result4;
        boolean result5 = ArchiveUtils.isEqual(buffer1, 0, 10, buffer2, 0, 11);
        assert !result5;
        boolean result6 = ArchiveUtils.isEqual(buffer1, 0, 10, buffer2, 1, 10);
        assert !result6;
        boolean result7 = ArchiveUtils.isEqual(buffer1, 1, 9, buffer2, 0, 10);
        assert !result7;
        boolean result8 = ArchiveUtils.isEqual(buffer1, 0, 10, buffer2, 0, 9);
        assert !result8;
        boolean result9 = ArchiveUtils.isEqual(buffer1, 5, 5, buffer2, 5, 6);
        assert !result9;
        boolean result10 = ArchiveUtils.isEqual(buffer1, 5, 5, buffer2, 6, 5);
        assert !result10;
        boolean result11 = ArchiveUtils.isEqual(buffer1, 5, 6, buffer2, 5, 5);
        assert !result11;
        boolean result12 = ArchiveUtils.isEqual(buffer1, 5, 5, buffer2, 5, 5);
        assert result12;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBuffer_LbuJ0() {
        String expected = "expected";
        byte[] buffer = "buffer".getBytes();
        boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBufferWithOffset_CZLg1() {
        String expected = "expected";
        byte[] buffer = "offsetbuffer".getBytes();
        boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, 1, buffer.length - 1);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBufferWithDifferentLength_cGdZ2() {
        String expected = "expected";
        byte[] buffer = "differentlengthbuffer".getBytes();
        boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer, 0, 7);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBufferWithDifferentContent_cxfV3() {
        String expected = "different";
        byte[] buffer = "buffer".getBytes();
        boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBufferWithEmptyBuffer_lmkF4() {
        String expected = "";
        byte[] buffer = "".getBytes();
        boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBufferWithNullBuffer_pmRr5() {
        String expected = "expected";
        byte[] buffer = null;
        boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBufferWithEmptyExpected_UsMI6() {
        String expected = "";
        byte[] buffer = "buffer".getBytes();
        boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchAsciiBufferWithNullExpected_pQjs7() {
        String expected = null;
        byte[] buffer = "buffer".getBytes();
        boolean result = ArchiveUtils.matchAsciiBuffer(expected, buffer);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToAsciiString_sGUY0() {
        byte[] inputBytes = {65, 66, 67};
        int offset = 0;
        int length = 3;
        String expected = "ABC";
        String actual = ArchiveUtils.toAsciiString(inputBytes, offset, length);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithNull_rrMt0_1() {
        byte[] buffer1 = new byte[10];
        byte[] buffer2 = new byte[10];
        boolean result1 = ArchiveUtils.isEqualWithNull(null, 0, 0, null, 0, 0);
        buffer1[0] = 1;
        buffer2[0] = 2;
        boolean result2 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 2);
        buffer1[0] = 1;
        buffer2[0] = 1;
        boolean result3 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 1);
        buffer1[0] = 1;
        buffer2[0] = 2;
        boolean result4 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 1);
        assertTrue(result1);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithNull_rrMt0_2() {
        byte[] buffer1 = new byte[10];
        byte[] buffer2 = new byte[10];
        boolean result1 = ArchiveUtils.isEqualWithNull(null, 0, 0, null, 0, 0);
        buffer1[0] = 1;
        buffer2[0] = 2;
        boolean result2 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 2);
        buffer1[0] = 1;
        buffer2[0] = 1;
        boolean result3 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 1);
        buffer1[0] = 1;
        buffer2[0] = 2;
        boolean result4 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 1);
        assertFalse(result2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithNull_rrMt0_3() {
        byte[] buffer1 = new byte[10];
        byte[] buffer2 = new byte[10];
        boolean result1 = ArchiveUtils.isEqualWithNull(null, 0, 0, null, 0, 0);
        buffer1[0] = 1;
        buffer2[0] = 2;
        boolean result2 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 2);
        buffer1[0] = 1;
        buffer2[0] = 1;
        boolean result3 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 1);
        buffer1[0] = 1;
        buffer2[0] = 2;
        boolean result4 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 1);
        assertTrue(result3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithNull_rrMt0_4() {
        byte[] buffer1 = new byte[10];
        byte[] buffer2 = new byte[10];
        boolean result1 = ArchiveUtils.isEqualWithNull(null, 0, 0, null, 0, 0);
        buffer1[0] = 1;
        buffer2[0] = 2;
        boolean result2 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 2);
        buffer1[0] = 1;
        buffer2[0] = 1;
        boolean result3 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 1);
        buffer1[0] = 1;
        buffer2[0] = 2;
        boolean result4 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 1);
        assertFalse(result4);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_fSfI2_hhzb0() {
        ArchiveEntry entry = mock(ArchiveEntry.class);
        when(entry.getSize()).thenReturn(1024 * 1024L);
        String expected = "-    1048576 file";
        String actual = ArchiveUtils.toString(entry);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsEqualWithNull_rrMt0() {
        byte[] buffer1 = new byte[10];
        byte[] buffer2 = new byte[10];
        boolean result1 = ArchiveUtils.isEqualWithNull(null, 0, 0, null, 0, 0);
        assertTrue(result1);
        buffer1[0] = 1;
        buffer2[0] = 2;
        boolean result2 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 2);
        assertFalse(result2);
        buffer1[0] = 1;
        buffer2[0] = 1;
        boolean result3 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 1);
        assertTrue(result3);
        buffer1[0] = 1;
        buffer2[0] = 2;
        boolean result4 = ArchiveUtils.isEqualWithNull(buffer1, 0, 1, buffer2, 0, 1);
        assertFalse(result4);
    }
}