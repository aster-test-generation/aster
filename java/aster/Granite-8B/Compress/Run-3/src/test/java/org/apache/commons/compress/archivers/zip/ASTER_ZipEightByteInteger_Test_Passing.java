/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.math.BigInteger;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipEightByteInteger_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEqualsWithObject_mEhy0() {
    ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
    ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
    assertTrue(zipEightByteInteger1.equals(zipEightByteInteger2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValue_KswY0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        long longValue = ZipEightByteInteger.getLongValue(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        assertEquals(1, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValue2_wrRW1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, -1}, 0);
        long longValue = ZipEightByteInteger.getLongValue(new byte[]{0, 0, 0, 0, 0, 0, 0, -1}, 0);
        assertEquals(-1, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValue3_ZqOA2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{127, -1, -1, -1, -1, -1, -1, -1}, 0);
        long longValue = ZipEightByteInteger.getLongValue(new byte[]{127, -1, -1, -1, -1, -1, -1, -1}, 0);
        assertEquals(-1, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValue4_djQo3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{-128, 0, 0, 0, 0, 0, 0, 0}, 0);
        long longValue = ZipEightByteInteger.getLongValue(new byte[]{-128, 0, 0, 0, 0, 0, 0, 0}, 0);
        assertEquals(0, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValue5_xnjX4() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        long longValue = ZipEightByteInteger.getLongValue(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        assertEquals(0, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValue6_kIwr5() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{127, -1, -1, -1, -1, -1, -1, 1}, 0);
        long longValue = ZipEightByteInteger.getLongValue(new byte[]{127, -1, -1, -1, -1, -1, -1, 1}, 0);
        assertEquals(1, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValue7_Vijs6() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{-128, 0, 0, 0, 0, 0, 0, -1}, 0);
        long longValue = ZipEightByteInteger.getLongValue(new byte[]{-128, 0, 0, 0, 0, 0, 0, -1}, 0);
        assertEquals(-1, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValue8_zKFk7() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, -128}, 0);
        long longValue = ZipEightByteInteger.getLongValue(new byte[]{0, 0, 0, 0, 0, 0, 0, -128}, 0);
        assertEquals(-128, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLongValue9_zMpf8() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{127, -1, -1, -1, -1, -1, -1, -128}, 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_PBwX0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        String expected = "ZipEightByteInteger value: 12345678";
        assertEquals(expected, zipEightByteInteger.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_hSjq0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        BigInteger expectedValue = BigInteger.ZERO;
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_CSgk1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("12345678901234567890"));
        BigInteger expectedValue = new BigInteger("12345678901234567890");
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue3_Ieut2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1234567890123456789L);
        BigInteger expectedValue = BigInteger.valueOf(1234567890123456789L);
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue4_PSGz3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{12, 34, 56, 78, -12, -34, -56, -78});
        BigInteger expectedValue = new BigInteger("-8556097940179200000");
        BigInteger actualValue = zipEightByteInteger.getValue();
        assertEquals(expectedValue, actualValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLongValueTest_FinT0() {
        byte[] bytes = new byte[8];
        long expected = 0L;
        long actual = ZipEightByteInteger.getLongValue(bytes);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLongValueTest2_FIng1() {
        byte[] bytes = new byte[8];
        long expected = 0L;
        long actual = ZipEightByteInteger.getLongValue(bytes, 0);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_CtSS0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        byte[] bytes = zipEightByteInteger.getBytes();
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromBigInteger_YCbY1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(123456789012345678L));
        byte[] bytes = zipEightByteInteger.getBytes();
        assertArrayEquals(new byte[]{56, -86, 78, -106, 102, 58, -110, 26}, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromLong_rHMf2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(123456789012345678L);
        byte[] bytes = zipEightByteInteger.getBytes();
        assertArrayEquals(new byte[]{56, -86, 78, -106, 102, 58, -110, 26}, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesFromByteArray_xPXV3() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
        byte[] bytes = zipEightByteInteger.getBytes();
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, bytes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInt_HkgD0() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 1;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 2;
    BigInteger expected = BigInteger.valueOf(258L);
    BigInteger actual = ZipEightByteInteger.getValue(bytes, 4);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArray_vETB1() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 1;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 2;
    BigInteger expected = BigInteger.valueOf(258L);
    BigInteger actual = ZipEightByteInteger.getValue(bytes);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInt2_qcBK4() {
    byte[] bytes = new byte[8];
    bytes[0] = 0;
    bytes[1] = 0;
    bytes[2] = 0;
    bytes[3] = 1;
    bytes[4] = 0;
    bytes[5] = 0;
    bytes[6] = 0;
    bytes[7] = 2;
    BigInteger expected = BigInteger.valueOf(258L);
    BigInteger actual = ZipEightByteInteger.getValue(bytes, 0);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_Zani0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 1}, 0);
        long longValue = zipEightByteInteger.getLongValue();
        assertEquals(1L, longValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBytesFromBigIntegerValueWithLeftmostBitSet_hRCa4() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new BigInteger("9223372036854775808"));
        byte[] expected = new byte[]{(byte) 0x80, 0, 0, 0, 0, 0, 0, 0};
        byte[] actual = ZipEightByteInteger.getBytes(new BigInteger("9223372036854775808"));
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesLong_Ildo0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(1L);
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, 1};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesBigInteger_QkeI1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(BigInteger.valueOf(1L));
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, 1};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesByteArray_LOJN2() {
        byte[] bytes = {0, 0, 0, 0, 0, 0, 0, 1};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes);
        byte[] expected = {0, 0, 0, 0, 0, 0, 0, 1};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesByteArrayOffset_EpXp3() {
        byte[] bytes = {0, 0, 0, 0, 0, 0, 0, 1, 2, 3};
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(bytes, 7);
        byte[] expected = {1, 2, 3};
        assertArrayEquals(expected, zipEightByteInteger.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValueByteArrayInt_Qmef0() {
    byte[] bytes = new byte[9];
    int offset = 1;
    BigInteger expected = BigInteger.ZERO;
    BigInteger actual = ZipEightByteInteger.getValue(bytes, offset);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_Vxaj0_vkUz0_1() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new BigInteger("0").toByteArray(), 0);
        ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(0L);
        ZipEightByteInteger zipEightByteInteger4 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        int hashCode1 = zipEightByteInteger1.hashCode();
        int hashCode2 = zipEightByteInteger2.hashCode();
        int hashCode3 = zipEightByteInteger3.hashCode();
        int hashCode4 = zipEightByteInteger4.hashCode();
        assertEquals(hashCode1, hashCode2);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_Vxaj0_vkUz0_2() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new BigInteger("0").toByteArray(), 0);
        ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(0L);
        ZipEightByteInteger zipEightByteInteger4 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        int hashCode1 = zipEightByteInteger1.hashCode();
        int hashCode2 = zipEightByteInteger2.hashCode();
        int hashCode3 = zipEightByteInteger3.hashCode();
        int hashCode4 = zipEightByteInteger4.hashCode();
        assertEquals(hashCode1, hashCode3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_Vxaj0_vkUz0_3() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new BigInteger("0").toByteArray(), 0);
        ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(0L);
        ZipEightByteInteger zipEightByteInteger4 = new ZipEightByteInteger(new byte[]{0, 0, 0, 0, 0, 0, 0, 0});
        int hashCode1 = zipEightByteInteger1.hashCode();
        int hashCode2 = zipEightByteInteger2.hashCode();
        int hashCode3 = zipEightByteInteger3.hashCode();
        int hashCode4 = zipEightByteInteger4.hashCode();
        assertEquals(hashCode1, hashCode4);}
}