/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.MemoryLimitException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZCompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable_QCwj0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false, 1024);
        int available = xzCompressorInputStream.available();
        assertTrue(available >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable2_pLUF1() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false);
        int available = xzCompressorInputStream.available();
        assertTrue(available >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailable3_JbPx2() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream);
        int available = xzCompressorInputStream.available();
        assertTrue(available >= 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_KMZS0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false, 0);
        long n = 0;
        long result = xzCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip1_LSrr1() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false);
        long n = 0;
        long result = xzCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip2_iLzB2() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream);
        long n = 0;
        long result = xzCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip3_tYtB3() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false, 0);
        long n = 0;
        try {
            xzCompressorInputStream.skip(n);
            fail("Expected MemoryLimitException");
        } catch (MemoryLimitException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip4_qVqp4() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false);
        long n = 0;
        try {
            xzCompressorInputStream.skip(n);
            fail("Expected MemoryLimitException");
        } catch (MemoryLimitException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip5_AtWJ5() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream);
        long n = 0;
        try {
            xzCompressorInputStream.skip(n);
            fail("Expected MemoryLimitException");
        } catch (MemoryLimitException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead1_rZUT0() throws IOException {
        InputStream inputStream = null;
        boolean decompressConcatenated = false;
        int memoryLimitInKb = 0;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, decompressConcatenated, memoryLimitInKb);
        int ret = xzCompressorInputStream.read();
        assertEquals(-1, ret);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead2_TXOu1() throws IOException {
        InputStream inputStream = null;
        boolean decompressConcatenated = false;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, decompressConcatenated);
        int ret = xzCompressorInputStream.read();
        assertEquals(-1, ret);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead3_Zbzf2() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream);
        int ret = xzCompressorInputStream.read();
        assertEquals(-1, ret);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_XdaJ0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, true, 1024);
        byte[] buf = new byte[1024];
        int off = 0;
        int len = 1024;
        int ret = xzCompressorInputStream.read(buf, off, len);
        assertEquals(0, ret);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip_KMZS0_pNcu0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false, 0);
        long n = 0L;
        long result = xzCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip1_LSrr1_zNwQ0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false);
        long n = 0L;
        long result = xzCompressorInputStream.skip(n);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip3_tYtB3_ISza0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false, 0);
        long n = 0L;
        try {
            xzCompressorInputStream.skip(n);
            fail("Expected MemoryLimitException");
        } catch (MemoryLimitException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip4_qVqp4_OlRy0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, false);
        long n = 0L;
        try {
            xzCompressorInputStream.skip(n);
            fail("Expected MemoryLimitException");
        } catch (MemoryLimitException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead2_HbXb1_UwTi0() throws IOException {
        InputStream inputStream = null;
        XZCompressorInputStream xzCompressorInputStream = new XZCompressorInputStream(inputStream, true);
        byte[] buf = new byte[1024];
        int off = 0;
        int len = 1024;
        int ret = xzCompressorInputStream.read(buf, off, len);
        assertEquals(0, ret);
    }
}