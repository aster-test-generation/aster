/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CPMember_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentDescriptor_ZxuD9() {
		CPUTF8 utf81 = new CPUTF8("test");
		CPUTF8 utf82 = new CPUTF8("test2");
		CPMember member1 = new CPMember(utf81, utf81, 1, new ArrayList<>());
		CPMember member2 = new CPMember(utf82, utf82, 1, new ArrayList<>());
		assertFalse(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameDescriptor_Fexz10() {
		CPUTF8 utf8 = new CPUTF8("test");
		CPMember member1 = new CPMember(utf8, utf8, 1, new ArrayList<>());
		CPMember member2 = new CPMember(utf8, utf8, 1, new ArrayList<>());
		assertTrue(member1.equals(member2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentFlags_vHiB11() {
		CPUTF8 utf8 = new CPUTF8("test");
		CPMember member1 = new CPMember(utf8, utf8, 1, new ArrayList<>());
		CPMember member2 = new CPMember(utf8, utf8, 2, new ArrayList<>());
		assertFalse(member1.equals(member2));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_zmeq0() {
        CPUTF8 name = new CPUTF8("example");
        CPUTF8 descriptor = new CPUTF8("descriptor");
        List<Attribute> attributes = new ArrayList<>();
        CPMember cpMember = new CPMember(name, descriptor, 0, attributes);
        String expected = "CPMember: example(descriptor)";
        String actual = cpMember.toString();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNestedClassFileEntries_1_jzRs0_1() {
		CPUTF8 utf8 = new CPUTF8("string");
		CPMember cpMember = new CPMember(utf8, null, 0, null);
		ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
		assertEquals(1, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNestedClassFileEntries_1_jzRs0_2() {
		CPUTF8 utf8 = new CPUTF8("string");
		CPMember cpMember = new CPMember(utf8, null, 0, null);
		ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
		assertEquals(utf8, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNestedClassFileEntries_2_yXKP1_1() {
		CPUTF8 utf8 = new CPUTF8("string");
		CPUTF8 utf8_1 = new CPUTF8("utf8", 0);
		CPMember cpMember = new CPMember(utf8, utf8_1, 0, null);
		ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
		assertEquals(2, entries.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNestedClassFileEntries_2_yXKP1_2() {
		CPUTF8 utf8 = new CPUTF8("string");
		CPUTF8 utf8_1 = new CPUTF8("utf8", 0);
		CPMember cpMember = new CPMember(utf8, utf8_1, 0, null);
		ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
		assertEquals(utf8, entries[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNestedClassFileEntries_2_yXKP1_3() {
		CPUTF8 utf8 = new CPUTF8("string");
		CPUTF8 utf8_1 = new CPUTF8("utf8", 0);
		CPMember cpMember = new CPMember(utf8, utf8_1, 0, null);
		ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
		assertEquals(utf8_1, entries[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_eGHZ0() {
    CPUTF8 utf81 = new CPUTF8("string1");
    CPUTF8 utf82 = new CPUTF8("string2", 1);
    CPMember member1 = new CPMember(utf81, utf82, 1L, new ArrayList<>());
    CPMember member2 = new CPMember(utf81, utf82, 1L, new ArrayList<>());
    assertEquals(member1.hashCode(), member2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentString_acJJ3_pZAj0() {
		CPUTF8 utf81 = new CPUTF8("test1");
		CPUTF8 utf82 = new CPUTF8("test2");
		assertFalse(utf81.equals(utf82));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameString_QJqb4_MlHL0() {
		CPUTF8 utf81 = new CPUTF8("test");
		CPUTF8 utf82 = new CPUTF8("test");
		assertTrue(utf81.equals(utf82));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentGlobalIndex_vxsB5_ydaU0() {
		CPUTF8 utf81 = new CPUTF8("test", 1);
		CPUTF8 utf82 = new CPUTF8("test", 2);
		assertFalse(utf81.equals(utf82));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameGlobalIndex_sxrN6_vPEL0() {
		CPUTF8 utf81 = new CPUTF8("test", 1);
		CPUTF8 utf82 = new CPUTF8("test", 1);
		assertTrue(utf81.equals(utf82));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNestedClassFileEntries_1_jzRs0() {
		CPUTF8 utf8 = new CPUTF8("string");
		CPMember cpMember = new CPMember(utf8, null, 0, null);
		ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
		assertEquals(1, entries.length);
		assertEquals(utf8, entries[0]);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getNestedClassFileEntries_2_yXKP1() {
		CPUTF8 utf8 = new CPUTF8("string");
		CPUTF8 utf8_1 = new CPUTF8("utf8", 0);
		CPMember cpMember = new CPMember(utf8, utf8_1, 0, null);
		ClassFileEntry[] entries = cpMember.getNestedClassFileEntries();
		assertEquals(2, entries.length);
		assertEquals(utf8, entries[0]);
		assertEquals(utf8_1, entries[1]);
	}
}