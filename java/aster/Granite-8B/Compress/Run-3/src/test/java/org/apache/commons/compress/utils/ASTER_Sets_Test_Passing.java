/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.HashSet;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashSet;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Sets_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullElements_LxQr0() {
        HashSet<String> set = Sets.newHashSet((String) null);
        assertEquals(0, set.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithOneElement_WzcY1_1() {
        HashSet<Integer> set = Sets.newHashSet(1);
        assertEquals(1, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithOneElement_WzcY1_2() {
        HashSet<Integer> set = Sets.newHashSet(1);
        assertTrue(set.contains(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithMultipleElements_FCIE2_1() {
        HashSet<String> set = Sets.newHashSet("a", "b", "c");
        assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithMultipleElements_FCIE2_2() {
        HashSet<String> set = Sets.newHashSet("a", "b", "c");
        assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithMultipleElements_FCIE2_3() {
        HashSet<String> set = Sets.newHashSet("a", "b", "c");
        assertTrue(set.contains("b"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithMultipleElements_FCIE2_4() {
        HashSet<String> set = Sets.newHashSet("a", "b", "c");
        assertTrue(set.contains("c"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithDuplicates_fmHg3_1() {
        HashSet<Integer> set = Sets.newHashSet(1, 2, 1, 3, 2);
        assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithDuplicates_fmHg3_2() {
        HashSet<Integer> set = Sets.newHashSet(1, 2, 1, 3, 2);
        assertTrue(set.contains(1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithDuplicates_fmHg3_3() {
        HashSet<Integer> set = Sets.newHashSet(1, 2, 1, 3, 2);
        assertTrue(set.contains(2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithDuplicates_fmHg3_4() {
        HashSet<Integer> set = Sets.newHashSet(1, 2, 1, 3, 2);
        assertTrue(set.contains(3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithEmptyArray_bikj4() {
        HashSet<String> set = Sets.newHashSet();
        assertEquals(0, set.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullArray_rmBh5() {
        HashSet<String> set = Sets.newHashSet((String[]) null);
        assertEquals(0, set.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullArrayElement_WGIc6_1() {
        HashSet<String> set = Sets.newHashSet("a", null, "b");
        assertEquals(2, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullArrayElement_WGIc6_2() {
        HashSet<String> set = Sets.newHashSet("a", null, "b");
        assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullArrayElement_WGIc6_3() {
        HashSet<String> set = Sets.newHashSet("a", null, "b");
        assertTrue(set.contains("b"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullArrayElementAndDuplicates_hjEX7_1() {
        HashSet<String> set = Sets.newHashSet("a", null, "b", "a", null);
        assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullArrayElementAndDuplicates_hjEX7_2() {
        HashSet<String> set = Sets.newHashSet("a", null, "b", "a", null);
        assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullArrayElementAndDuplicates_hjEX7_3() {
        HashSet<String> set = Sets.newHashSet("a", null, "b", "a", null);
        assertTrue(set.contains("b"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullArrayElementAndDuplicatesAndNullElement_wEXn8_1() {
        HashSet<String> set = Sets.newHashSet("a", null, "b", "a", null, null);
        assertEquals(3, set.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullArrayElementAndDuplicatesAndNullElement_wEXn8_2() {
        HashSet<String> set = Sets.newHashSet("a", null, "b", "a", null, null);
        assertTrue(set.contains("a"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewHashSetWithNullArrayElementAndDuplicatesAndNullElement_wEXn8_3() {
        HashSet<String> set = Sets.newHashSet("a", null, "b", "a", null, null);
        assertTrue(set.contains("b"));}
}