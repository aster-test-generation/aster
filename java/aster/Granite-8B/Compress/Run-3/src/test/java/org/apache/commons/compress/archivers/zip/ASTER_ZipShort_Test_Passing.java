/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipShort_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObject_KgND0_1() throws Exception {
        ZipShort zipShort1 = new ZipShort(new byte[]{0x01, 0x02}, 0);
        ZipShort zipShort2 = new ZipShort(new byte[]{0x01, 0x02}, 0);
        ZipShort zipShort3 = new ZipShort(0x0102);
        assertTrue(zipShort1.equals(zipShort2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithObject_KgND0_2() throws Exception {
        ZipShort zipShort1 = new ZipShort(new byte[]{0x01, 0x02}, 0);
        ZipShort zipShort2 = new ZipShort(new byte[]{0x01, 0x02}, 0);
        ZipShort zipShort3 = new ZipShort(0x0102);
        assertFalse(zipShort1.equals(zipShort3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_nfSK1() throws Exception {
        ZipShort zipShort = new ZipShort(0x0102);
        assertFalse(zipShort.equals(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_YPNB2() throws Exception {
        ZipShort zipShort = new ZipShort(0x0102);
        assertFalse(zipShort.equals(new Object()));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_SOLW0() throws Exception {
        ZipShort zipShort = new ZipShort(10);
        assertEquals("ZipShort value: 10", zipShort.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_gDvR0_1() throws Exception {
        ZipShort zipShort = new ZipShort(new byte[]{0, 1}, 0);
        zipShort = new ZipShort(100);
        zipShort = new ZipShort(new byte[]{100, 0});
        assertEquals(256, zipShort.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_gDvR0_2() throws Exception {
        ZipShort zipShort = new ZipShort(new byte[]{0, 1}, 0);
        zipShort = new ZipShort(100);
        zipShort = new ZipShort(new byte[]{100, 0});
        assertEquals(100, zipShort.getValue());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_pFdy0_1() throws Exception {
        ZipShort zipShort = new ZipShort(10);
        byte[] result = zipShort.getBytes();
        assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_pFdy0_2() throws Exception {
        ZipShort zipShort = new ZipShort(10);
        byte[] result = zipShort.getBytes();
        assertEquals((byte) 10, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_pFdy0_3() throws Exception {
        ZipShort zipShort = new ZipShort(10);
        byte[] result = zipShort.getBytes();
        assertEquals((byte) 0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueByteArrayInt_LUcN0() throws Exception {
        byte[] bytes = new byte[2];
        bytes[0] = 0;
        bytes[1] = 1;
        int offset = 0;
        int expected = 256;
        int actual = ZipShort.getValue(bytes, offset);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueByteArray_nLXS1() throws Exception {
        byte[] bytes = new byte[2];
        bytes[0] = 0;
        bytes[1] = 1;
        int expected = 256;
        int actual = ZipShort.getValue(bytes);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_pAmu0_1() throws Exception {
        ZipShort zipShort1 = new ZipShort(new byte[]{0, 1}, 0);
        ZipShort zipShort2 = new ZipShort(1);
        ZipShort zipShort3 = new ZipShort(new byte[]{0, 1});
        assertEquals(zipShort1.hashCode(), zipShort2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_pAmu0_2() throws Exception {
        ZipShort zipShort1 = new ZipShort(new byte[]{0, 1}, 0);
        ZipShort zipShort2 = new ZipShort(1);
        ZipShort zipShort3 = new ZipShort(new byte[]{0, 1});
        assertNotEquals(zipShort1.hashCode(), zipShort3.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesInt_wLgj0() throws Exception {
    byte[] result = ZipShort.getBytes(Short.MIN_VALUE);
    byte[] expected = new byte[]{(byte) 0x00, (byte) 0x80};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesInt_akmP1() throws Exception {
    byte[] result = ZipShort.getBytes(Short.MAX_VALUE);
    byte[] expected = new byte[]{(byte) 0xFF, (byte) 0x7F};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesInt_KQAL2() throws Exception {
    byte[] result = ZipShort.getBytes(0);
    byte[] expected = new byte[]{0, 0};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesInt_QxcD3() throws Exception {
    byte[] result = ZipShort.getBytes(1);
    byte[] expected = new byte[]{0, 1};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesInt_XNPN4() throws Exception {
    byte[] result = ZipShort.getBytes(-1);
    byte[] expected = new byte[]{(byte) 0xFF, (byte) 0xFF};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesInt_XJSl5() throws Exception {
    byte[] result = ZipShort.getBytes(256);
    byte[] expected = new byte[]{0, 1};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesInt_Flti6() throws Exception {
    byte[] result = ZipShort.getBytes(-256);
    byte[] expected = new byte[]{(byte) 0xFF, 0};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesInt_fQSr7() throws Exception {
    byte[] result = ZipShort.getBytes(32767);
    byte[] expected = new byte[]{(byte) 0xFF, (byte) 0x7F};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesInt_cRYB8() throws Exception {
    byte[] result = ZipShort.getBytes(-32768);
    byte[] expected = new byte[]{0, (byte) 0x80};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesInt_FxuP9() throws Exception {
    byte[] result = ZipShort.getBytes(32768);
    byte[] expected = new byte[]{0, (byte) 0x80};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytesInt_TTkH10() throws Exception {
    byte[] result = ZipShort.getBytes(-32767);
    byte[] expected = new byte[]{(byte) 0xFF, (byte) 0x7F};
    assertArrayEquals(expected, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_MBtg0() throws Exception {
        ZipShort zipShort1 = new ZipShort(new byte[]{0x01, 0x02}, 0);
        ZipShort zipShort2 = (ZipShort) zipShort1.clone();
        assertEquals(zipShort1.getValue(), zipShort2.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone2_yMWc1() throws Exception {
        ZipShort zipShort1 = new ZipShort(0x0102);
        ZipShort zipShort2 = (ZipShort) zipShort1.clone();
        assertEquals(zipShort1.getValue(), zipShort2.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone3_jopX2() throws Exception {
        ZipShort zipShort1 = new ZipShort(new byte[]{0x01, 0x02});
        ZipShort zipShort2 = (ZipShort) zipShort1.clone();
        assertEquals(zipShort1.getValue(), zipShort2.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_nyNe0() throws Exception {
        byte[] bytes = new byte[2];
        int offset = 0;
        int expectedValue = 0;
        int actualValue = ZipShort.getValue(bytes, offset);
        assertEquals(expectedValue, actualValue);
    }
}