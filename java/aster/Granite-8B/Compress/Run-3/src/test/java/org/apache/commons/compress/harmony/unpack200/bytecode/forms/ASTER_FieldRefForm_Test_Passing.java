/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode.forms;
import org.apache.commons.compress.harmony.unpack200.SegmentConstantPool;
import org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FieldRefForm_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPoolID_oeaz0() throws Exception {
        FieldRefForm fieldRefForm = new FieldRefForm(0, "name", new int[]{});
        int actualPoolID = fieldRefForm.getPoolID();
        int expectedPoolID = SegmentConstantPool.CP_FIELD;
        assertEquals(expectedPoolID, actualPoolID);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextFieldRef_SxFD0() throws Exception {
        OperandManager operandManager = new OperandManager(new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1], new int[1]);
        FieldRefForm fieldRefForm = new FieldRefForm(0, "", new int[1]);
        assertEquals(0, fieldRefForm.getOffset(operandManager));
    }
}