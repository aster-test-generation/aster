/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.bzip2;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BZip2CompressorOutputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBlockSize_KZzw0() throws Exception {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(System.out);
        assertEquals(bzip2CompressorOutputStream.getBlockSize(), 9);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBlockSizeWithBlockSize_eApz1() throws Exception {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(System.out, 1);
        assertEquals(bzip2CompressorOutputStream.getBlockSize(), 1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBlockSizeWithBlockSize2_GicL2() throws Exception {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(System.out, 100);
        assertEquals(bzip2CompressorOutputStream.getBlockSize(), 100);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBlockSizeWithBlockSize3_iGeF3() throws Exception {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(System.out, 1000);
        assertEquals(bzip2CompressorOutputStream.getBlockSize(), 1000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBlockSizeWithBlockSize4_sYYm4() throws Exception {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(System.out, 100000);
        assertEquals(bzip2CompressorOutputStream.getBlockSize(), 100000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBlockSizeWithBlockSize5_FeBJ5() throws Exception {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(System.out, 1000000);
        assertEquals(bzip2CompressorOutputStream.getBlockSize(), 1000000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBlockSizeWithBlockSize6_psOJ6() throws Exception {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(System.out, 10000000);
        assertEquals(bzip2CompressorOutputStream.getBlockSize(), 10000000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBlockSizeWithBlockSize7_iayY7() throws Exception {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(System.out, 100000000);
        assertEquals(bzip2CompressorOutputStream.getBlockSize(), 100000000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBlockSizeWithBlockSize8_licE8() throws Exception {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(System.out, 1000000000);
        assertEquals(bzip2CompressorOutputStream.getBlockSize(), 1000000000);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_tQZu0() throws IOException {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(null);
        bzip2CompressorOutputStream.write(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite1_KKxK1() throws IOException {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(null, 0);
        bzip2CompressorOutputStream.write(new byte[0], 0, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite2_rarP2() throws IOException {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(null);
        bzip2CompressorOutputStream.write(new byte[0], 0, 0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite3_vvpd3() throws IOException {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(null);
        bzip2CompressorOutputStream.write(new byte[0]);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrite_CnLY2() throws IOException {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(null, 0);
        byte[] buf = new byte[10];
        bzip2CompressorOutputStream.write(buf, 0, 10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_qSKI0() throws IOException {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(System.out);
        bzip2CompressorOutputStream.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithBlockSize_SvLM1() throws IOException {
        BZip2CompressorOutputStream bzip2CompressorOutputStream = new BZip2CompressorOutputStream(System.out, 1024);
        bzip2CompressorOutputStream.finish();
    }
}