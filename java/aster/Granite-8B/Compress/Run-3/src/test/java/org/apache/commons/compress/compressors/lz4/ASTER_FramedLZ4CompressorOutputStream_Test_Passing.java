/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lz4;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.commons.compress.compressors.lz77support.Parameters;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_FramedLZ4CompressorOutputStream_Test_Passing {
private org.apache.commons.codec.digest.XXHash32 contentHash = new org.apache.commons.codec.digest.XXHash32();
private Parameters params;
private OutputStream out;
FramedLZ4CompressorOutputStream framedlz4compressoroutputstream;
private boolean finished;
private OutputStream mockOutputStream;
private FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish() throws Exception {
        mockOutputStream = mock(OutputStream.class);
        framedLZ4CompressorOutputStream = new FramedLZ4CompressorOutputStream(mockOutputStream);
        framedLZ4CompressorOutputStream.finish();
        verify(mockOutputStream, times(1)).flush();
        verify(mockOutputStream, times(1)).write(any(byte[].class), anyInt(), anyInt());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithoutParams_IKSX1() throws IOException {
        FramedLZ4CompressorOutputStream stream = new FramedLZ4CompressorOutputStream(new ByteArrayOutputStream());
        stream.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testclose() throws Exception {
        out = mockOutputStream;
        framedlz4compressoroutputstream = new FramedLZ4CompressorOutputStream(out);
        framedlz4compressoroutputstream.close();
        verify(out).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose2_EEuu1() throws IOException {
        OutputStream mockOut = mock(OutputStream.class);
        FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream = new FramedLZ4CompressorOutputStream(mockOut);
        framedLZ4CompressorOutputStream.close();
        verify(mockOut, times(1)).close();
    }
}