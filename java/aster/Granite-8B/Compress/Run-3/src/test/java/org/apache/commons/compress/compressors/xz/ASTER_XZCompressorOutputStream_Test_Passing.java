/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.xz;
import java.io.IOException;
import java.io.OutputStream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_XZCompressorOutputStream_Test_Passing {
    private XZCompressorOutputStream xzCompressorOutputStream;
    private OutputStream outputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWrite_gpQf0() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        XZCompressorOutputStream xzCompressorOutputStream = new XZCompressorOutputStream(mockOutputStream);
        byte[] buf = new byte[10];
        int off = 0;
        int len = 10;
        xzCompressorOutputStream.write(buf, off, len);
        verify(mockOutputStream).write(buf, off, len);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testWriteWithPreset_wSvd1() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        int preset = 1;
        XZCompressorOutputStream xzCompressorOutputStream = new XZCompressorOutputStream(mockOutputStream, preset);
        byte[] buf = new byte[10];
        int off = 0;
        int len = 10;
        xzCompressorOutputStream.write(buf, off, len);
        verify(mockOutputStream).write(buf, off, len);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_XzxS0() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        XZCompressorOutputStream xzCompressorOutputStream = new XZCompressorOutputStream(mockOutputStream);
        xzCompressorOutputStream.close();
        verify(mockOutputStream).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithPreset_khtb1() throws IOException {
        OutputStream mockOutputStream = mock(OutputStream.class);
        int preset = 1;
        XZCompressorOutputStream xzCompressorOutputStream = new XZCompressorOutputStream(mockOutputStream, preset);
        xzCompressorOutputStream.close();
        verify(mockOutputStream).close();
    }
}