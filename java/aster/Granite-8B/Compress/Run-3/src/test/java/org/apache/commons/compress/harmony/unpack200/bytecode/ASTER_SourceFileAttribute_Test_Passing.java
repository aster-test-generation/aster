/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.io.DataOutputStream;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SourceFileAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_TIYE0() throws Exception {
        CPUTF8 name = new CPUTF8("example.java");
        SourceFileAttribute attribute = new SourceFileAttribute(name);
        assertEquals("SourceFile: example.java", attribute.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNestedClassFileEntries_rmgH0() throws Exception {
        CPUTF8 utf8 = new CPUTF8("example");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(utf8);
        ClassFileEntry[] expected = { new CPUTF8("SourceFile"), utf8 };
        ClassFileEntry[] actual = sourceFileAttribute.getNestedClassFileEntries();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSourceFileAttribute_vhnh0() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("example");
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(cputf8);
        boolean result = sourceFileAttribute.isSourceFileAttribute();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSourceFileAttribute2_MXFP1() throws Exception {
        CPUTF8 cputf8 = new CPUTF8("example", 1);
        SourceFileAttribute sourceFileAttribute = new SourceFileAttribute(cputf8);
        boolean result = sourceFileAttribute.isSourceFileAttribute();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_HqUM0_1() throws Exception {
        CPUTF8 name = new CPUTF8("example");
        ClassConstantPool pool = new ClassConstantPool();
        SourceFileAttribute attribute = new SourceFileAttribute(name);
        attribute.resolve(pool);
        assertEquals(1, pool.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteBody_bBiV0() throws IOException {
        CPUTF8 name = new CPUTF8("example");
        SourceFileAttribute attribute = new SourceFileAttribute(name);
        DataOutputStream dos = new DataOutputStream(System.out);
        attribute.writeBody(dos);
        dos.flush();
    }
}