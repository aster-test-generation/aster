/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.SortedMap;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Set;
import java.util.SortedMap;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ArchiveStreamFactory_Test_Passing {
private volatile String entryEncoding;
private ArchiveStreamFactory archivestreamfactory;
@Mock
    private InputStream inputStream;
@Mock
	private InputStream in;
@Mock
	private ArchiveException archiveException;
    public void putAll(String[] archiveNames, ArchiveStreamProvider provider, SortedMap<String, ArchiveStreamProvider> map) {
        for (String archiveName : archiveNames) {
            map.put(archiveName, provider);
        }
    }
    private Iterable<ArchiveStreamProvider> archiveStreamProviderIterable() throws Exception {
        return null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        OutputStream mockOutputStream = mock(OutputStream.class);
        String archiverName = "testArchiver";
        archivestreamfactory.createArchiveOutputStream(archiverName, mockOutputStream);
        verify(mockOutputStream, times(1)).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveOutputStream_rjmy0() throws ArchiveException {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        OutputStream out = null;
        String archiverName = "jar";
        ArchiveOutputStream archiveOutputStream = factory.createArchiveOutputStream(archiverName, out);
        assert archiveOutputStream != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_withNullArchiverName_shouldThrowIllegalArgumentException() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        // Arrange
        String archiverName = null;
        String actualEncoding = "UTF-8";
        // Act & Assert
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            archivestreamfactory.createArchiveInputStream(archiverName, inputStream, actualEncoding);
        });
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_withNullInputStream_shouldThrowIllegalArgumentException() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        // Arrange
        String archiverName = "ZIP";
        String actualEncoding = "UTF-8";
        // Act & Assert
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            archivestreamfactory.createArchiveInputStream(archiverName, null, actualEncoding);
        });
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_withValidArchiverNameAndInputStream_shouldReturnValidArchiveInputStream() throws Exception {
        archivestreamfactory = new ArchiveStreamFactory();
        // Arrange
        String archiverName = "ZIP";
        String actualEncoding = "UTF-8";
        // Act
        ArchiveInputStream archiveInputStream = archivestreamfactory.createArchiveInputStream(archiverName, inputStream, actualEncoding);
        // Assert
        Assertions.assertNotNull(archiveInputStream);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateArchiveInputStream_TGDD0() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        InputStream in = new ByteArrayInputStream(new byte[0]);
        ArArchiveInputStream arArchiveInputStream = (ArArchiveInputStream) factory.createArchiveInputStream("ar", in);
        assert arArchiveInputStream != null;
        ArjArchiveInputStream arjArchiveInputStream = (ArjArchiveInputStream) factory.createArchiveInputStream("arj", in);
        assert arjArchiveInputStream != null;
        ZipArchiveInputStream zipArchiveInputStream = (ZipArchiveInputStream) factory.createArchiveInputStream("zip", in);
        assert zipArchiveInputStream != null;
        TarArchiveInputStream tarArchiveInputStream = (TarArchiveInputStream) factory.createArchiveInputStream("tar", in);
        assert tarArchiveInputStream != null;
        JarArchiveInputStream jarArchiveInputStream = (JarArchiveInputStream) factory.createArchiveInputStream("jar", in);
        assert jarArchiveInputStream != null;
        CpioArchiveInputStream cpioArchiveInputStream = (CpioArchiveInputStream) factory.createArchiveInputStream("cpio", in);
        assert cpioArchiveInputStream != null;
        DumpArchiveInputStream dumpArchiveInputStream = (DumpArchiveInputStream) factory.createArchiveInputStream("dump", in);
        assert dumpArchiveInputStream != null;
        Exception exception = assertThrows(ArchiveException.class, () -> {
            factory.createArchiveInputStream("non-existent", in);
        });
        assert exception.getMessage().equals("Archiver: non-existent not found.");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveInputStreamProviders_QjRp0_1() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveInputStreamProviders_QjRp0_2() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
        assertTrue(providers.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveInputStreamProvidersWithEncoding_PLVL1_1() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
        assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArchiveInputStreamProvidersWithEncoding_PLVL1_2() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveInputStreamProviders();
        assertTrue(providers.size() > 0);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testFindAvailableArchiveInputStreamProviders_deRC0() throws Exception {
		SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveInputStreamProviders();
		assertNotNull(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNames_yJVo0_1() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getOutputStreamArchiveNames();
        assertEquals(5, archiveNames.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNames_yJVo0_2() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getOutputStreamArchiveNames();
        assertTrue(archiveNames.contains("ar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNames_yJVo0_3() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getOutputStreamArchiveNames();
        assertTrue(archiveNames.contains("zip"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNames_yJVo0_4() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getOutputStreamArchiveNames();
        assertTrue(archiveNames.contains("tar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNames_yJVo0_5() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getOutputStreamArchiveNames();
        assertTrue(archiveNames.contains("jar"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStreamArchiveNames_yJVo0_6() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        Set<String> archiveNames = factory.getOutputStreamArchiveNames();
        assertTrue(archiveNames.contains("cpio"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullStream_XoMA0_1() throws Exception {
        final InputStream in = null;
        final ArchiveException exception =
            assertThrows(ArchiveException.class, () -> ArchiveStreamFactory.detect(in));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetArchiveOutputStreamProviders_fkHI0_1() throws Exception {
		ArchiveStreamFactory factory = new ArchiveStreamFactory();
		SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
		assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetArchiveOutputStreamProviders_fkHI0_2() throws Exception {
		ArchiveStreamFactory factory = new ArchiveStreamFactory();
		SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
		assertTrue(!providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetArchiveOutputStreamProviders2_ZDji1_1() throws Exception {
		ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
		SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
		assertNotNull(providers);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetArchiveOutputStreamProviders2_ZDji1_2() throws Exception {
		ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
		SortedMap<String, ArchiveStreamProvider> providers = factory.getArchiveOutputStreamProviders();
		assertTrue(!providers.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGettingEntryEncoding_IBdb0() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory("UTF-8");
        assertEquals("UTF-8", factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGettingEntryEncodingWithNoEncodingSet_Soql1() throws Exception {
        ArchiveStreamFactory factory = new ArchiveStreamFactory();
        assertEquals(null, factory.getEntryEncoding());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveOutputStreamProviders_FryL0_1() throws Exception {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindAvailableArchiveOutputStreamProviders_FryL0_2() throws Exception {
        SortedMap<String, ArchiveStreamProvider> result = ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        assertTrue(result.size() > 0);}
}