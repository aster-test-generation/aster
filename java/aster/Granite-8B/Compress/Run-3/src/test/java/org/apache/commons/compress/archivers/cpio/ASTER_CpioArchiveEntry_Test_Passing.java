/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.File;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.Date;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveEntry_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsBlockDeviceWithModeSetToNonC_ISBLKValue_dKuN1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(0);
        assertFalse(entry.isBlockDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum_UAGw0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1);
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum2_WOZb1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name", 10L);
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum3_spVo2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum6_ybFd5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "name");
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum7_XcQD6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, new File("inputFile"), "entryName");
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum8_EkGS7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 10L);
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetChksum9_IMJz8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0, entry.getChksum());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGID_MEhR0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(1L);
        assertEquals(1L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithNegativeValue_vkOp1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(-1L);
        assertEquals(-1L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithZeroValue_OuNc2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(0L);
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithMaxValue_anXf3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithMinValue_VCde4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithMaxValuePlusOne_cJNB5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(Long.MAX_VALUE + 1L);
        assertEquals(Long.MAX_VALUE + 1L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetGIDWithMinValueMinusOne_hPRw6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setGID(Long.MIN_VALUE - 1L);
        assertEquals(Long.MIN_VALUE - 1L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAlignmentBoundary_zimo0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(512, entry.getAlignmentBoundary());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_FVzk0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName3_lNCe2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName6_EzXd5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName7_IyCU6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals("entryName", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName8_sfHl7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals("name", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName9_tblH8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals("entryName", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNetworkWithModeSetToC_ISNWK_ytOB0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(CpioConstants.C_ISNWK);
        assertTrue(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNetworkWithModeSetToNonC_ISNWKValue_krNd1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(CpioConstants.C_ISFIFO);
        assertFalse(entry.isNetwork());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode_NIwb0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setInode(1L);
        assertEquals(1L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetInode2_DmLB1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setInode(2L);
        assertEquals(2L, entry.getInode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj_hjzJ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj2_nkrh1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj3_yJPT2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj6_CXBZ5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj7_pbCC6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj8_JysO7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMaj9_YATf8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        long result = entry.getRemoteDeviceMaj();
        assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMaj_sHFc0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMaj(1L);
        assertEquals(1L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMajWithNegativeNumber_wMlM1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMaj(-1L);
        assertEquals(-1L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMajWithZero_Halg2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMaj(0L);
        assertEquals(0L, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMajWithMaximumValue_cnLb3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMaj(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceMajWithMinimumValue_hLxh4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setRemoteDeviceMaj(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getRemoteDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_lbbV0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        boolean result = entry.equals(null);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass_VVMl1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        boolean result = entry.equals(new Object());
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_BRsD2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        boolean result = entry.equals(entry);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameName_CFcD3() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name", 0L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name", 0L);
        boolean result = entry1.equals(entry2);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_xKwX4() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name1", 0L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name2", 0L);
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNullName_wzDY5() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, null, 0L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, null, 0L);
        boolean result = entry1.equals(entry2);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentSize_wfMm6() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name", 10L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name", 20L);
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentFormat_EBRn7() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 1, "name", 0L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 2, "name", 0L);
        boolean result = entry1.equals(entry2);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectoryWithMode_CBqr0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(0100400);
        assertTrue(entry.isDirectory());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin_MvyN0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin2_TroY1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin3_EHPY2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin4_WDZf3() throws IOException {
        Path inputPath = null;
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, inputPath, "name", (LinkOption[]) null);
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin6_UDYt5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin7_wtcP6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("name"), "name");
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin8_KSLC7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDeviceMin9_CPrq8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("name"), "name");
        assertEquals(0, entry.getRemoteDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_cKtK0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        Date lastModified = entry.getLastModifiedDate();
        assertEquals(1000 * entry.getTime(), lastModified.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink_pSgZ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink2_Afoh1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink3_jMJM2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink4_eDQU3() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry(null, "entryName", (LinkOption[]) null);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink5_KkPZ4() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, null, "entryName", (LinkOption[]) null);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink6_uvmj5() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink7_oFdq6() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink8_Tiwi7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymbolicLink9_Defu8() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertFalse(entry.isSymbolicLink());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice_tBtd0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        long result = entry.getRemoteDevice();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice2_aDEp1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        long result = entry.getRemoteDevice();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice3_rUEe2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        long result = entry.getRemoteDevice();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice4_VVXz3() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry(null, "entryName", (LinkOption[]) null);
        long result = entry.getRemoteDevice();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice5_NBzG4() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, null, "entryName", (LinkOption[]) null);
        long result = entry.getRemoteDevice();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice6_nKgK5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        long result = entry.getRemoteDevice();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice7_ChpV6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        long result = entry.getRemoteDevice();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice8_QNFb7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        long result = entry.getRemoteDevice();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRemoteDevice9_CTSt8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        long result = entry.getRemoteDevice();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID_neOo0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID3_ODOF2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID6_yrdG5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID7_BRAS6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID8_YFmu7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUID9_Rrkf8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0L, entry.getUID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_QZBK0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    long result = entry.getDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_eazs1() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "", 0);
    long result = entry.getDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_zBdz2() {
    CpioArchiveEntry entry = new CpioArchiveEntry("");
    long result = entry.getDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_TCvU5() throws IOException {
    File inputFile = new File("");
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, inputFile, "");
    long result = entry.getDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetDeviceMaj_GRkC7() {
    File inputFile = new File("");
    CpioArchiveEntry entry = new CpioArchiveEntry("", 0);
    long result = entry.getDeviceMaj();
    assertEquals(0, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_1_vFKu0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals((short) 0, cpioArchiveEntry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_2_gZei1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals((short) 0, cpioArchiveEntry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_3_BBAL2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name");
        assertEquals((short) 0, cpioArchiveEntry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_4_SsOv3() throws IOException {
        Path inputPath = null;
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(inputPath, "entryName", (LinkOption[]) null);
        assertEquals((short) 0, cpioArchiveEntry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_5_UAyJ4() throws IOException {
        Path inputPath = null;
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, inputPath, "entryName", (LinkOption[]) null);
        assertEquals((short) 0, cpioArchiveEntry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_6_NWXN5() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, "name");
        assertEquals((short) 0, cpioArchiveEntry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_7_ivTT6() {
        File inputFile = null;
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0, inputFile, "entryName");
        assertEquals((short) 0, cpioArchiveEntry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_8_bsBH7() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry("name", 0L);
        assertEquals((short) 0, cpioArchiveEntry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getFormat_9_YmHl8() {
        File inputFile = null;
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry(inputFile, "entryName");
        assertEquals((short) 0, cpioArchiveEntry.getFormat());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testSetChksum_ipgC0() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		entry.setChksum(1L);
		assertEquals(1L, entry.getChksum());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testSetChksumWithNegativeValue_QLRI1() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		assertThrows(IllegalArgumentException.class, () -> entry.setChksum(-1L));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testSetChksumWithMaxValue_ALGN2() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		entry.setChksum(0xFFFFFFFFL);
		assertEquals(0xFFFFFFFFL, entry.getChksum());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	void testSetChksumWithMaxValuePlusOne_ckeL3() {
		CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
		assertThrows(IllegalArgumentException.class, () -> entry.setChksum(0x100000000L));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_with_format_and_name_and_size_WwbL0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt", 100L);
        long mode = entry.getMode();
        assertEquals(0100644L, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_with_format_and_name_PJzQ1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 1, "test.txt");
        long mode = entry.getMode();
        assertEquals(0100644L, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_with_name_osCj2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("test.txt");
        long mode = entry.getMode();
        assertEquals(0100644L, mode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevice_Edss0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        assertEquals(10L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevice3_huyf2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevice6_yDdc5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevice7_zdeA6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals(0L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevice8_qSAL7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 10L);
        assertEquals(10L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDevice9_UZnZ8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeviceMin_IFIa0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        assertEquals(0L, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount1_NTpY0() {
        CpioArchiveEntry cpe = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpe.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount2_Toci1() {
        CpioArchiveEntry cpe = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, cpe.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount3_RwRM2() {
        CpioArchiveEntry cpe = new CpioArchiveEntry("name");
        assertEquals(0, cpe.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount5_Jkty4() {
        CpioArchiveEntry cpe = new CpioArchiveEntry((short) 0, null, 0L);
        assertEquals(0, cpe.getHeaderPadCount(null));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPipeWithModeSetToFifo_ekGW0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(010000);
        assertTrue(entry.isPipe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPipeWithModeNotSetToFifo_lHrU1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setMode(010040);
        assertFalse(entry.isPipe());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMin_uewg0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDeviceMin(1L);
        assertEquals(1L, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinWithNegativeValue_mqPz1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDeviceMin(-1L);
        assertEquals(-1L, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinWithZeroValue_hUkY2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDeviceMin(0L);
        assertEquals(0L, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinWithMaxValue_Povr3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDeviceMin(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMinWithMinValue_vLRt4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDeviceMin(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getDeviceMin());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetName_JZUd0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setName("newName");
        assertEquals("newName", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile_GyHR0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile2_yXxy1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile3_dhMK2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile6_yqNc5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile7_VJUm6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile8_OBYK7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRegularFile9_BDiz8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertTrue(entry.isRegularFile());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithValidSize_zBlg0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        entry.setSize(50L);
        assertEquals(50L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSizeWithInvalidSize_gxEY1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        try {
            entry.setSize(-1L);
        } catch (IllegalArgumentException e) {
            assertEquals("Invalid entry size <-1>", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDevice_xisL0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(1L);
        assertEquals(1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithNegativeNumber_TGnJ1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(-1L);
        assertEquals(-1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithZero_KIhe2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(0L);
        assertEquals(0L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithMaximumNumber_frHG3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithMinimumNumber_DJfh4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithOverflowNumber_JSTb5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(Long.MAX_VALUE + 1L);
        assertEquals(Long.MAX_VALUE + 1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceWithUnderflowNumber_NNmG6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        entry.setDevice(Long.MIN_VALUE - 1L);
        assertEquals(Long.MIN_VALUE - 1L, entry.getDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSocketWithModeSocket_YjNP0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 012000);
        boolean result = entry.isSocket();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSocketWithModeNotSocket_Kctb1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 010000);
        boolean result = entry.isSocket();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode_aUCA0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        long inode = entry.getInode();
        assertEquals(0L, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode3_wjzR2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        long inode = entry.getInode();
        assertEquals(0L, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode6_ynzT5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        long inode = entry.getInode();
        assertEquals(0L, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode7_QhYy6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        long inode = entry.getInode();
        assertEquals(0L, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode8_Zfvk7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        long inode = entry.getInode();
        assertEquals(0L, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInode9_fdIi8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        long inode = entry.getInode();
        assertEquals(0L, inode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_INLz0_1() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name", 1L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name", 1L);
        CpioArchiveEntry entry3 = new CpioArchiveEntry((short) 0, "name2", 1L);
        CpioArchiveEntry entry4 = new CpioArchiveEntry((short) 0, "name", 2L);
        CpioArchiveEntry entry5 = new CpioArchiveEntry((short) 0, "name", 1L);
        assertEquals(entry1.hashCode(), entry2.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_INLz0_2() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name", 1L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name", 1L);
        CpioArchiveEntry entry3 = new CpioArchiveEntry((short) 0, "name2", 1L);
        CpioArchiveEntry entry4 = new CpioArchiveEntry((short) 0, "name", 2L);
        CpioArchiveEntry entry5 = new CpioArchiveEntry((short) 0, "name", 1L);
        assertNotEquals(entry1.hashCode(), entry3.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_INLz0_3() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name", 1L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name", 1L);
        CpioArchiveEntry entry3 = new CpioArchiveEntry((short) 0, "name2", 1L);
        CpioArchiveEntry entry4 = new CpioArchiveEntry((short) 0, "name", 2L);
        CpioArchiveEntry entry5 = new CpioArchiveEntry((short) 0, "name", 1L);
        assertNotEquals(entry1.hashCode(), entry4.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_INLz0_4() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name", 1L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name", 1L);
        CpioArchiveEntry entry3 = new CpioArchiveEntry((short) 0, "name2", 1L);
        CpioArchiveEntry entry4 = new CpioArchiveEntry((short) 0, "name", 2L);
        CpioArchiveEntry entry5 = new CpioArchiveEntry((short) 0, "name", 1L);
        assertEquals(entry2.hashCode(), entry5.hashCode());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTime_PABJ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setTime(1234567890L);
        assertEquals(1234567890L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithNegativeTime_pqwo1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setTime(-1234567890L);
        assertEquals(-1234567890L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithZeroTime_XkJV2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setTime(0L);
        assertEquals(0L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithMaxTime_NZgP3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setTime(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithMinTime_eZGm4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setTime(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithOverflowTime_GgRy5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setTime(Long.MAX_VALUE + 1L);
        assertEquals(Long.MAX_VALUE + 1L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTimeWithUnderflowTime_kklo6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        entry.setTime(Long.MIN_VALUE - 1L);
        assertEquals(Long.MIN_VALUE - 1L, entry.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAlignmentBoundaryZero_wktJ0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getDataPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemainderZero_KySq1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 100L);
        assertEquals(0, entry.getDataPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemainderNonZero_FxAu2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 101L);
        assertEquals(1, entry.getDataPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount1_IPtm0() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(0));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount2_cCgB1() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(1));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount3_BaxY2() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount4_fTYa3() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(3));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount5_FxTx4() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(4));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount6_Logp5() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(5));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount7_BBTN6() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(6));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount8_Ofts7() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(7));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount9_Nmpc8() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(8));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount10_IEJp9() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(9));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount11_YdQE10() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(10));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount12_nQYH11() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(11));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount13_uslL12() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(12));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount14_JzGE13() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(13));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount15_euQu14() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(14));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount16_dvKu15() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(15));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount17_REPC16() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(16));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount18_xUIq17() {
        CpioArchiveEntry cpioArchiveEntry = new CpioArchiveEntry((short) 0);
        assertEquals(0, cpioArchiveEntry.getHeaderPadCount(17));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount_HtLF0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount2_vjBN1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount3_UbsD2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount4_Ipzn3() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry(null, "entryName", (LinkOption[]) null);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount5_sDWW4() throws IOException {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, null, "entryName", (LinkOption[]) null);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount6_Ptsi5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount7_DQko6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount8_cxjs7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHeaderPadCount9_GQJQ8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0, entry.getHeaderPadCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDevice_NAfU0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setRemoteDevice(10L);
        assertEquals(10L, entry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceWithNegativeValue_xHQB1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        try {
            entry.setRemoteDevice(-10L);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertTrue(e.getMessage().contains("device"));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceWithMaxValue_apxK2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setRemoteDevice(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRemoteDeviceWithMinValue_fteU3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setRemoteDevice(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getRemoteDevice());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMaj_XqNe0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setDeviceMaj(100L);
        assertEquals(100L, entry.getDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMajWithNegativeNumber_mvTc1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setDeviceMaj(-100L);
        assertEquals(-100L, entry.getDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMajWithZero_ZYMR2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setDeviceMaj(0L);
        assertEquals(0L, entry.getDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMajWithMaximumValue_KDdL3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setDeviceMaj(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeviceMajWithMinimumValue_seNp4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setDeviceMaj(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getDeviceMaj());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode_TVtq0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setMode(0755L);
        assertEquals(0755L, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeInvalidMode_mEGy1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        try {
            entry.setMode(0123L);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Unknown mode. Full: 0123 Masked: 0123", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeDirectoryMode_FhAO2() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setMode(04000L);
        assertEquals(04000L, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeSymlinkMode_CmFV3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setMode(012000L);
        assertEquals(012000L, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeRegularMode_RuMD4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setMode(0100644L);
        assertEquals(0100644L, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeFifoMode_xQte5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setMode(010020L);
        assertEquals(010020L, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeCharacterMode_rFDV6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setMode(020000L);
        assertEquals(020000L, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeBlockMode_EekH7() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setMode(060000L);
        assertEquals(060000L, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeSocketMode_tfyK8() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setMode(014000L);
        assertEquals(014000L, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModeNetworkMode_GFLt9() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        entry.setMode(016000L);
        assertEquals(016000L, entry.getMode());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGID_Zjgk0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 0L);
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGID3_TuPC2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGID6_gkgN5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGID7_vJXK6() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("inputFile"), "entryName");
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGID8_CPIA7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 0L);
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetGID9_YKjl8() {
        CpioArchiveEntry entry = new CpioArchiveEntry(new File("inputFile"), "entryName");
        assertEquals(0L, entry.getGID());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_XjFy0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        assertEquals(10L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize2_qZQe1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 20L);
        assertEquals(20L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize3_YFRt2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 30L);
        assertEquals(30L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize4_RDGD3() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(0L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize5_WkfM4() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, new File("input.txt"), "entry");
        assertEquals(0L, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_BTyt0() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
        assertEquals(1, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_JBZu1() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name", 10L);
        assertEquals(1, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_rfIs2() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name");
        assertEquals(1, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_fxnd5() {
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, "name");
        assertEquals(1, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_UmDY6() {
        File file = new File("file");
        CpioArchiveEntry entry = new CpioArchiveEntry((short) 0, file, "entryName");
        assertEquals(1, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_hGIE7() {
        CpioArchiveEntry entry = new CpioArchiveEntry("name", 10L);
        assertEquals(1, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_szCM8() {
        File file = new File("file");
        CpioArchiveEntry entry = new CpioArchiveEntry(file, "entryName");
        assertEquals(1, entry.getNumberOfLinks());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetRemoteDeviceMin_HBje0() {
    CpioArchiveEntry entry = new CpioArchiveEntry((short) 0);
    entry.setRemoteDeviceMin(1L);
    assertEquals(1L, entry.getRemoteDeviceMin());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_INLz0() {
        CpioArchiveEntry entry1 = new CpioArchiveEntry((short) 0, "name", 1L);
        CpioArchiveEntry entry2 = new CpioArchiveEntry((short) 0, "name", 1L);
        CpioArchiveEntry entry3 = new CpioArchiveEntry((short) 0, "name2", 1L);
        CpioArchiveEntry entry4 = new CpioArchiveEntry((short) 0, "name", 2L);
        CpioArchiveEntry entry5 = new CpioArchiveEntry((short) 0, "name", 1L);
        assertEquals(entry1.hashCode(), entry2.hashCode());
        assertNotEquals(entry1.hashCode(), entry3.hashCode());
        assertNotEquals(entry1.hashCode(), entry4.hashCode());
        assertEquals(entry2.hashCode(), entry5.hashCode());
    }
}