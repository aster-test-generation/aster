/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTypeTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenumber1_KbDt0() throws Pack200Exception {
        LocalVariableTypeTableAttribute localVariableTypeTableAttribute = new LocalVariableTypeTableAttribute(0, new int[0], new int[0], new CPUTF8[0], new CPUTF8[0], new int[0]);
        List<Integer> byteCodeOffsets = new ArrayList<>();
        localVariableTypeTableAttribute.renumber(byteCodeOffsets);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_pruT0_VvPR0() {
        CPUTF8[] names = new CPUTF8[5];
        for (int i = 0; i < 5; i++) {
            names[i] = new CPUTF8("name" + (i + 1));
        }
        CPUTF8[] signatures = new CPUTF8[5];
        for (int i = 0; i < 5; i++) {
            signatures[i] = new CPUTF8("signature" + (i + 1));
        }
        LocalVariableTypeTableAttribute attribute = new LocalVariableTypeTableAttribute(5, new int[]{1, 2, 3, 4, 5}, new int[]{10, 11, 12, 13, 14}, names, signatures, new int[]{1, 2, 3, 4, 5});
        assertEquals(42, attribute.getLength());
    }
}