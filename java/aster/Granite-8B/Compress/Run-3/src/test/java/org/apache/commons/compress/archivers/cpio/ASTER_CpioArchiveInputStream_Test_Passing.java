/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioArchiveInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextCPIOEntry_uwSo3() throws IOException {
        CpioArchiveInputStream in = new CpioArchiveInputStream(null, 0, null);
        CpioArchiveEntry entry = in.getNextCPIOEntry();
        assertNotNull(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testRead_xNtr0() throws IOException {
		InputStream in = null;
		int blockSize = 0;
		String encoding = null;
		CpioArchiveInputStream cpioArchiveInputStream = new CpioArchiveInputStream(in, blockSize, encoding);
		byte[] b = new byte[0];
		int off = 0;
		int len = 0;
		int result = cpioArchiveInputStream.read(b, off, len);
		assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testRead2_uKQS1() throws IOException {
		InputStream in = null;
		int blockSize = 0;
		CpioArchiveInputStream cpioArchiveInputStream = new CpioArchiveInputStream(in, blockSize);
		byte[] b = new byte[0];
		int off = 0;
		int len = 0;
		int result = cpioArchiveInputStream.read(b, off, len);
		assertEquals(-1, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testRead3_TFmP2() throws IOException {
		InputStream in = null;
		CpioArchiveInputStream cpioArchiveInputStream = new CpioArchiveInputStream(in);
		byte[] b = new byte[0];
		int off = 0;
		int len = 0;
		int result = cpioArchiveInputStream.read(b, off, len);
		assertEquals(-1, result);
}
}