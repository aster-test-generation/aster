/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Path;
import java.util.Enumeration;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Enumeration;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mockito;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipFile_Test_Passing {
private static byte[] ONE_ZERO_BYTE = new byte[1];
private ZipFile zipfile;
private ZipArchiveEntry entry;
private InputStream inputStream;
private ZipEncoding zipEncoding;
private ZipFile zipFile;
private ZipArchiveOutputStream target;
private ZipArchiveEntryPredicate predicate;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetInputStream() throws Exception {
        zipfile = mock(ZipFile.class);
        entry = mock(ZipArchiveEntry.class);
        inputStream = mock(InputStream.class);
        when(zipfile.getInputStream(entry)).thenReturn(inputStream);
        ZipUtil.checkRequestedFeatures(entry);
        verify(zipfile, times(1)).getInputStream(entry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryEquals_zZSX0() throws ZipException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry();
    zipArchiveEntry.equals(zipArchiveEntry1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryGetVersionRequired_MJkI1() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.getVersionRequired();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntrySetGeneralPurposeBit_JfMd2() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    zipArchiveEntry.setGeneralPurposeBit(generalPurposeBit);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntrySetUnixMode_iKZk3() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setUnixMode(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryGetExternalAttributes_LdWa4() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.getExternalAttributes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryEquals2_JYrx5() throws ZipException {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    Object obj = new Object();
    zipArchiveEntry.equals(obj);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryGetLastModifiedDate_zVMP6() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.getLastModifiedDate();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryRemoveUnparseableExtraFieldData_oUav7() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.removeUnparseableExtraFieldData();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryGetInternalAttributes_BImC8() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.getInternalAttributes();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryGetRawFlag_fbda9() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.getRawFlag();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntrySetDiskNumberStart_wMQz11() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setDiskNumberStart(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryGetCommentSource_kfkq12() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.getCommentSource();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntrySetExtraFields_Xruc13() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    ZipExtraField[] fields = new ZipExtraField[0];
    zipArchiveEntry.setExtraFields(fields);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryGetUnparseableExtraFieldData_DutV15() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.getUnparseableExtraFieldData();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntrySetSize_GArS16() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setSize(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryIsStreamContiguous_DNqD17() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.isStreamContiguous();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryGetVersionMadeBy_EBQk18() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.getVersionMadeBy();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntrySetLocalHeaderOffset_UFsO19() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setLocalHeaderOffset(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntryGetNameSource_IzAG20() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.getNameSource();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntrySetExternalAttributes_irPQ21() {
    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry();
    zipArchiveEntry.setExternalAttributes(1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testZipArchiveEntrySetCentralDirectoryExtra_ejyZ22() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryData() throws Exception {
        zipfile = Mockito.mock(ZipFile.class);
        when(zipfile.canReadEntryData(entry)).thenReturn(true);
        assertTrue(zipfile.canReadEntryData(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanReadEntryData_vLzy0() throws IOException {
        ZipFile zipFile = new ZipFile(new File("test.zip"));
        ZipArchiveEntry entry = new ZipArchiveEntry("entry.txt");
        assertTrue(zipFile.canReadEntryData(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding_bYqu0() throws IOException {
        ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
        String encoding = zipFile.getEncoding();
        assertEquals("UTF-8", encoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding4_srZw3() throws IOException {
        ZipFile zipFile = new ZipFile(new File("test.zip"), "UTF-8", true, false);
        String encoding = zipFile.getEncoding();
        assertEquals("UTF-8", encoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding8_PXYe7() throws IOException {
        ZipFile zipFile = new ZipFile(new File("test.zip"));
        String encoding = zipFile.getEncoding();
        assertEquals("UTF-8", encoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSymlinkEntry_kXPt2() throws IOException {
        ZipFile zipFile = new ZipFile(new File("test.zip"));
        ZipArchiveEntry entry = new ZipArchiveEntry("test");
        entry.setUnixMode(012345);
        String symlink = zipFile.getUnixSymlink(entry);
        assertEquals("test", symlink);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_pVDe0() throws IOException {
        ZipFile zipFile = new ZipFile(new File("path"), "encoding", true);
        InputStream inputStream = zipFile.getContentBeforeFirstLocalFileHeader();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseQuietly_gidr0() {
    ZipFile zipFile = null;
    try {
        zipFile = new ZipFile("path");
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        ZipFile.closeQuietly(zipFile);
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCopyRawEntries() throws Exception {
        zipFile = Mockito.mock(ZipFile.class);
        target = Mockito.mock(ZipArchiveOutputStream.class);
        predicate = Mockito.mock(ZipArchiveEntryPredicate.class);
        Enumeration<ZipArchiveEntry> src = Mockito.mock(Enumeration.class);
        Mockito.when(zipFile.getEntriesInPhysicalOrder()).thenReturn(src);
        zipFile.copyRawEntries(target, predicate);
        Mockito.verify(zipFile).getEntriesInPhysicalOrder();
        Mockito.verify(target).addRawArchiveEntry(Mockito.any(), Mockito.any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEncoding3_eHnc2_LLyX0() throws IOException {
        Path path = mock(Path.class);
        ZipFile zipFile = new ZipFile(path, "UTF-8", true, false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntries_dyhL0_bGcX0() {
        ZipFile zipFile = null;
        try {
            zipFile = new ZipFile(new File("test.zip"), "UTF-8", true);
        } catch (IOException e) {
            e.printStackTrace();
        }
        Iterable<ZipArchiveEntry> entries = zipFile.getEntries("test.txt");
        assertNotNull(entries);
    }
}