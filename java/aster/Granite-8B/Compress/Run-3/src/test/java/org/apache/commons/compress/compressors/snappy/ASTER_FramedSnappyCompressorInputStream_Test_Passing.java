/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.snappy;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_FramedSnappyCompressorInputStream_Test_Passing {
    private FramedSnappyCompressorInputStream framedSnappyCompressorInputStream;
    private InputStream inputStream;
    private FramedSnappyDialect dialect;
    private int blockSize;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableWithInputStream_kNCo0() throws IOException {
        InputStream in = mock(InputStream.class);
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in);
        when(in.available()).thenReturn(10);
        assertEquals(10, framedSnappyCompressorInputStream.available());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableWithInputStreamAndDialect_iGfk1() throws IOException {
        InputStream in = mock(InputStream.class);
        FramedSnappyDialect dialect = FramedSnappyDialect.STANDARD;
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in, dialect);
        when(in.available()).thenReturn(10);
        assertEquals(10, framedSnappyCompressorInputStream.available());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAvailableWithInputStreamBlockSizeAndDialect_osoh2() throws IOException {
        InputStream in = mock(InputStream.class);
        int blockSize = 1024;
        FramedSnappyDialect dialect = FramedSnappyDialect.STANDARD;
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in, blockSize, dialect);
        when(in.available()).thenReturn(10);
        assertEquals(10, framedSnappyCompressorInputStream.available());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_CrJh1() throws IOException {
        inputStream = mock(InputStream.class);
        when(inputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(1);
        framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(inputStream);
        byte[] b = new byte[1];
        int off = 0;
        int len = 1;
        int read = framedSnappyCompressorInputStream.read(b, off, len);
        assertEquals(1, read);
        inputStream = mock(InputStream.class);
        when(inputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1);
        framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(inputStream);
        b = new byte[1];
        off = 0;
        len = 1;
        read = framedSnappyCompressorInputStream.read(b, off, len);
        assertEquals(-1, read);
        inputStream = mock(InputStream.class);
        when(inputStream.read(any(byte[].class), anyInt(), anyInt())).thenThrow(new IOException());
        framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(inputStream);
        b = new byte[1];
        off = 0;
        len = 1;
        try {
            framedSnappyCompressorInputStream.read(b, off, len);
            fail("Expected IOException");
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_WithEmptyBuffer_ReturnsZero_AEsJ0() throws IOException {
    byte[] b = new byte[0];
    int read = framedSnappyCompressorInputStream.read(b, 0, 0);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_WithNonEmptyBuffer_ReturnsCorrectValue_EHRj1() throws IOException {
    byte[] b = new byte[10];
    int read = framedSnappyCompressorInputStream.read(b, 0, 10);
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_WithOffsetAndLength_ReturnsCorrectValue_Trih2() throws IOException {
    byte[] b = new byte[10];
    int read = framedSnappyCompressorInputStream.read(b, 2, 6);
    assertEquals(6, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithValidArguments_vJfu0() throws Exception {
        InputStream in = mock(InputStream.class);
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in);
        int read = framedSnappyCompressorInputStream.read();
        verify(in, times(1)).read();
        assertEquals(1, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithInvalidArguments_IjBr1() throws Exception {
        InputStream in = mock(InputStream.class);
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in);
        int read = framedSnappyCompressorInputStream.read(new byte[10], 0, 10);
        verify(in, times(1)).read(any(byte[].class), anyInt(), anyInt());
        assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidArguments_roFe0_1() throws IOException {
    byte[] expected = new byte[10];
    new Random().nextBytes(expected);
    when(inputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(10);
    byte[] actual = new byte[10];
    int read = framedSnappyCompressorInputStream.read(actual, 0, 10);
    assertArrayEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidArguments_roFe0_2() throws IOException {
    byte[] expected = new byte[10];
    new Random().nextBytes(expected);
    when(inputStream.read(any(byte[].class), anyInt(), anyInt())).thenReturn(10);
    byte[] actual = new byte[10];
    int read = framedSnappyCompressorInputStream.read(actual, 0, 10);
    assertEquals(10, read);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidArguments_rYaD1() throws Exception {
    byte[] b = null;
    int off = 0;
    int len = 0;
    Exception exception = null;
    try {
        framedSnappyCompressorInputStream.read(b, off, len);
    } catch (Exception e) {
        exception = e;
    }
    assertNotNull(exception);
    assertTrue(exception instanceof NullPointerException);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithValidArguments_dYel0() throws IOException {
    byte[] b = new byte[10];
    int off = 0;
    int len = 10;
    int read = framedSnappyCompressorInputStream.read(b, off, len);
    assertEquals(10, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidArguments_xcri1() throws IOException {
    byte[] b = null;
    int off = 0;
    int len = 10;
    Exception exception = null;
    try {
        framedSnappyCompressorInputStream.read(b, off, len);
    } catch (Exception e) {
        exception = e;
    }
    assertNotNull(exception);
    assertTrue(exception instanceof NullPointerException);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithZeroLength_kOxs2() throws IOException {
    byte[] b = new byte[10];
    int off = 0;
    int len = 0;
    int read = framedSnappyCompressorInputStream.read(b, off, len);
    assertEquals(0, read);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithInvalidArguments_XYuJ1() throws Exception {
    byte[] b = null;
    int off = 0;
    int len = 10;
    try {
        framedSnappyCompressorInputStream.read(b, off, len);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testReadWithNegativeArguments_mgbd2() throws Exception {
    byte[] b = new byte[10];
    int off = -1;
    int len = 10;
    try {
        framedSnappyCompressorInputStream.read(b, off, len);
        fail("Expected IndexOutOfBoundsException");
    } catch (IndexOutOfBoundsException e) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUnmask_wSpT0() throws Exception {
    long x = 0; // Initialize x with a meaningful value
    long expected = 0; // Calculate the expected result
    long actual = FramedSnappyCompressorInputStream.unmask(x);
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithInputStream_FUxz0() throws IOException {
        InputStream in = mock(InputStream.class);
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in);
        framedSnappyCompressorInputStream.close();
        verify(in, times(1)).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithInputStreamAndDialect_Fyxa1() throws IOException {
        InputStream in = mock(InputStream.class);
        FramedSnappyDialect dialect = FramedSnappyDialect.STANDARD;
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in, dialect);
        framedSnappyCompressorInputStream.close();
        verify(in, times(1)).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithInputStreamBlockSizeAndDialect_hobi2() throws IOException {
        InputStream in = mock(InputStream.class);
        int blockSize = 1024;
        FramedSnappyDialect dialect = FramedSnappyDialect.STANDARD;
        FramedSnappyCompressorInputStream framedSnappyCompressorInputStream = new FramedSnappyCompressorInputStream(in, blockSize, dialect);
        framedSnappyCompressorInputStream.close();
        verify(in, times(1)).close();
    }
}