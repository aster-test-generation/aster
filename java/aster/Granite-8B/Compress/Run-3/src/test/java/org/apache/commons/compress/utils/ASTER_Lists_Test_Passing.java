/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.ArrayList;
import java.util.Iterator;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Lists_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_eTno0() throws Exception {
        ArrayList<Integer> list = new ArrayList<>();
        assertEquals(0, list.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_Mzsf1() throws Exception {
        ArrayList<String> list = new ArrayList<>();
        assertEquals(0, list.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_jzDI2() throws Exception {
        ArrayList<Boolean> list = new ArrayList<>();
        assertEquals(0, list.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_LBwi3() throws Exception {
        ArrayList<Character> list = new ArrayList<>();
        assertEquals(0, list.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_tAlp4() throws Exception {
        ArrayList<Float> list = new ArrayList<>();
        assertEquals(0, list.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_marO5() throws Exception {
        ArrayList<Double> list = new ArrayList<>();
        assertEquals(0, list.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_aufh6() throws Exception {
        ArrayList<Short> list = new ArrayList<>();
        assertEquals(0, list.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_AkQx7() throws Exception {
        ArrayList<Long> list = new ArrayList<>();
        assertEquals(0, list.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNewArrayList_PSwA8() throws Exception {
        ArrayList<Byte> list = new ArrayList<>();
        assertEquals(0, list.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNewArrayListWithEmptyIterator_uqqy0() throws Exception {
    Iterator<String> iterator = Collections.emptyIterator();
    List<String> list = Lists.newArrayList(iterator);
    assertTrue(list.isEmpty());
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNewArrayListWithSingleElementIterator_PzGE1_1() throws Exception {
    Iterator<String> iterator = Collections.singleton("element").iterator();
    List<String> list = Lists.newArrayList(iterator);
    assertEquals(1, list.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNewArrayListWithSingleElementIterator_PzGE1_2() throws Exception {
    Iterator<String> iterator = Collections.singleton("element").iterator();
    List<String> list = Lists.newArrayList(iterator);
    assertEquals("element", list.get(0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNewArrayListWithNullIterator_lUJh3() throws Exception {
    Iterator<String> iterator = null;
    List<String> list = Lists.newArrayList(iterator);
    assertTrue(list.isEmpty());
  }
}