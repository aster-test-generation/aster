/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.zstandard;
import java.io.IOException;
import java.io.InputStream;
import com.github.luben.zstd.BufferPool;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZstdCompressorInputStream_Test_Passing {
private BufferPool bufferPool;
    private ZstdCompressorInputStream zstdCompressorInputStream;
    private InputStream in;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMark_NPxK1() throws IOException {
        zstdCompressorInputStream.mark(10);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testReset_cwmF0() throws IOException {
        InputStream in = mock(InputStream.class);
        BufferPool bufferPool = mock(BufferPool.class);
        ZstdCompressorInputStream zs = new ZstdCompressorInputStream(in, bufferPool);
        zs.reset();
        verify(in).reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testResetWithNoArg_fEux1() throws IOException {
        InputStream in = mock(InputStream.class);
        ZstdCompressorInputStream zs = new ZstdCompressorInputStream(in);
        zs.reset();
        verify(in).reset();
    }
}