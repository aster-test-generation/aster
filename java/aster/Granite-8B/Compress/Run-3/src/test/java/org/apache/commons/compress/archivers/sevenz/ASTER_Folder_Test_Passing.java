/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.util.Collections;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Folder_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStream_pRfQ0() throws Exception {
        Folder folder = new Folder();
        int index = 0;
        int result = folder.findBindPairForInStream(index);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStreamWithNullBindPairs_AXAl1() throws Exception {
        Folder folder = new Folder();
        folder.bindPairs = null;
        int index = 0;
        int result = folder.findBindPairForInStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForInStreamWithEmptyBindPairs_mmEp2() throws Exception {
        Folder folder = new Folder();
        folder.bindPairs = new BindPair[0];
        int index = 0;
        int result = folder.findBindPairForInStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream_ccpz0() throws Exception {
        Folder folder = new Folder();
        int index = 0;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream2_xUPz1() throws Exception {
        Folder folder = new Folder();
        int index = 1;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream3_LJhx2() throws Exception {
        Folder folder = new Folder();
        int index = 2;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream4_suyT3() throws Exception {
        Folder folder = new Folder();
        int index = 3;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream5_Umkd4() throws Exception {
        Folder folder = new Folder();
        int index = 4;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream6_vWFX5() throws Exception {
        Folder folder = new Folder();
        int index = 5;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream7_OFNo6() throws Exception {
        Folder folder = new Folder();
        int index = 6;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream8_HxoK7() throws Exception {
        Folder folder = new Folder();
        int index = 7;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream9_kRLC8() throws Exception {
        Folder folder = new Folder();
        int index = 8;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindBindPairForOutStream10_ORFn9() throws Exception {
        Folder folder = new Folder();
        int index = 9;
        int result = folder.findBindPairForOutStream(index);
        assertEquals(-1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEmptyPackedStreams_CKub0() throws Exception {
    Folder folder = new Folder();
    folder.packedStreams = new long[0];
    folder.coders = new Coder[0];
    Iterable<Coder> coders = folder.getOrderedCoders();
    assertEquals(Collections.emptyList(), coders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEmptyCoders_BfEf1() throws Exception {
    Folder folder = new Folder();
    folder.packedStreams = new long[1];
    folder.coders = new Coder[0];
    Iterable<Coder> coders = folder.getOrderedCoders();
    assertEquals(Collections.emptyList(), coders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSingleCoder_GXUy2() throws Exception {
    Folder folder = new Folder();
    folder.packedStreams = new long[1];
    folder.coders = new Coder[1];
    Iterable<Coder> coders = folder.getOrderedCoders();
    assertEquals(Collections.singletonList(folder.coders[0]), coders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoop_xxyy3() throws Exception {
    Folder folder = new Folder();
    folder.packedStreams = new long[2];
    folder.coders = new Coder[2];
    folder.bindPairs = new BindPair[1];
    folder.bindPairs[0] = new BindPair(0, 1);
    Iterable<Coder> coders = folder.getOrderedCoders();
    assertEquals(Arrays.asList(folder.coders[0], folder.coders[1]), coders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoopWithDuplicates_aVwx4() throws Exception {
    Folder folder = new Folder();
    folder.packedStreams = new long[3];
    folder.coders = new Coder[3];
    folder.bindPairs = new BindPair[2];
    folder.bindPairs[0] = new BindPair(0, 1);
    folder.bindPairs[1] = new BindPair(1, 2);
    Iterable<Coder> coders = folder.getOrderedCoders();
    assertEquals(Arrays.asList(folder.coders[0], folder.coders[1], folder.coders[2]), coders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoopWithDuplicatesAndBacktrack_mZSi5() throws Exception {
    Folder folder = new Folder();
    folder.packedStreams = new long[4];
    folder.coders = new Coder[4];
    folder.bindPairs = new BindPair[3];
    folder.bindPairs[0] = new BindPair(0, 1);
    folder.bindPairs[1] = new BindPair(1, 2);
    folder.bindPairs[2] = new BindPair(2, 0);
    Iterable<Coder> coders = folder.getOrderedCoders();
    assertEquals(Arrays.asList(folder.coders[0], folder.coders[1], folder.coders[2], folder.coders[3]), coders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testLoopWithDuplicatesAndBacktrackAndCycle_dkUy6() throws Exception {
    Folder folder = new Folder();
    folder.packedStreams = new long[5];
    folder.coders = new Coder[5];
    folder.bindPairs = new BindPair[4];
    folder.bindPairs[0] = new BindPair(0, 1);
    folder.bindPairs[1] = new BindPair(1, 2);
    folder.bindPairs[2] = new BindPair(2, 3);
    folder.bindPairs[3] = new BindPair(3, 0);
    Iterable<Coder> coders = folder.getOrderedCoders();
    assertEquals(Arrays.asList(folder.coders[0], folder.coders[1], folder.coders[2], folder.coders[3], folder.coders[4]), coders);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_kpNg0() throws Exception {
        Folder folder = new Folder();
        folder.totalOutputStreams = 0;
        long result = folder.getUnpackSize();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_yIJK1() throws Exception {
        Folder folder = new Folder();
        folder.totalOutputStreams = 1;
        folder.findBindPairForOutStream(0);
        long result = folder.getUnpackSize();
        assertEquals(folder.unpackSizes[0], result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_ycOE2() throws Exception {
        Folder folder = new Folder();
        folder.totalOutputStreams = 2;
        folder.findBindPairForOutStream(0);
        folder.findBindPairForOutStream(1);
        long result = folder.getUnpackSize();
        assertEquals(folder.unpackSizes[1], result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_FfIX3() throws Exception {
        Folder folder = new Folder();
        folder.totalOutputStreams = 3;
        folder.findBindPairForOutStream(0);
        folder.findBindPairForOutStream(1);
        folder.findBindPairForOutStream(2);
        long result = folder.getUnpackSize();
        assertEquals(0, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_MOwl0() throws Exception {
    Folder folder = new Folder();
    String actual = folder.toString();
    String expected = "Folder with 0 coders, 0 input streams, 0 output streams, 0 bind pairs, 0 packed streams, 0 unpack sizes, without CRC and 0 unpack streams";
    assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToStringWithcoders_yNbj1() throws Exception {
    Folder folder = new Folder();
    folder.coders = new Coder[1];
    String actual = folder.toString();
    String expected = "Folder with 1 coders, 0 input streams, 0 output streams, 0 bind pairs, 0 packed streams, 0 unpack sizes, without CRC and 0 unpack streams";
    assertEquals(expected, actual);
}
}