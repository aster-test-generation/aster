/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.bzip2;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BZip2CompressorInputStream_Test_Passing {
    private int su_ch2;
    private int su_chPrev;
    private int su_i2;
    private int su_rNToGo;
    private int su_rTPos;
    private int su_tPos;
    private int blockRandomised;
    private int blockSize100k;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_wbRo0() throws Exception {
        byte[] signature = new byte[3];
        signature[0] = 'B';
        signature[1] = 'Z';
        signature[2] = 'h';
        assertTrue(BZip2CompressorInputStream.matches(signature, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithLengthLessThanThree_fojg3() throws Exception {
        byte[] signature = new byte[3];
        signature[0] = 'B';
        signature[1] = 'Z';
        signature[2] = 'h';
        assertFalse(BZip2CompressorInputStream.matches(signature, 2));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSignature_APiZ4() throws Exception {
        byte[] signature = new byte[3];
        signature[0] = 'X';
        signature[1] = 'Y';
        signature[2] = 'Z';
        assertFalse(BZip2CompressorInputStream.matches(signature, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_EvhE0() throws IOException {
        BZip2CompressorInputStream bzip2CompressorInputStream = new BZip2CompressorInputStream(null);
        int actual = bzip2CompressorInputStream.read();
        assertEquals(-1, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead1_RBAT1() throws IOException {
        BZip2CompressorInputStream bzip2CompressorInputStream = new BZip2CompressorInputStream(null, false);
        int actual = bzip2CompressorInputStream.read();
        assertEquals(-1, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead2_IbXc2() throws IOException {
        BZip2CompressorInputStream bzip2CompressorInputStream = new BZip2CompressorInputStream(null, false);
        int actual = bzip2CompressorInputStream.read(new byte[10]);
        assertEquals(-1, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead3_fRpW3() throws IOException {
        BZip2CompressorInputStream bzip2CompressorInputStream = new BZip2CompressorInputStream(null, false);
        int actual = bzip2CompressorInputStream.read(new byte[10], 0, 10);
        assertEquals(-1, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithDestNull_ZskL0() throws Exception {
        BZip2CompressorInputStream bzip2CompressorInputStream = new BZip2CompressorInputStream(null);
        try {
            bzip2CompressorInputStream.read(null, 0, 0);
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithDestOffsetNegative_zysu1() throws Exception {
        BZip2CompressorInputStream bzip2CompressorInputStream = new BZip2CompressorInputStream(null);
        try {
            bzip2CompressorInputStream.read(new byte[1], -1, 0);
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithDestLenNegative_ckkg2() throws Exception {
        BZip2CompressorInputStream bzip2CompressorInputStream = new BZip2CompressorInputStream(null);
        try {
            bzip2CompressorInputStream.read(new byte[1], 0, -1);
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithDestOffsetPlusLenExceedsDestLength_UwAW3() throws Exception {
        BZip2CompressorInputStream bzip2CompressorInputStream = new BZip2CompressorInputStream(null);
        try {
            bzip2CompressorInputStream.read(new byte[1], 0, 2);
        } catch (IndexOutOfBoundsException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithStreamClosed_hKDs4() throws Exception {
        BZip2CompressorInputStream bzip2CompressorInputStream = new BZip2CompressorInputStream(null);
        bzip2CompressorInputStream.close();
        try {
            bzip2CompressorInputStream.read(new byte[1], 0, 1);
        } catch (IOException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadWithLenZero_kJjM5() throws Exception {
        BZip2CompressorInputStream bzip2CompressorInputStream = new BZip2CompressorInputStream(null);
        assertEquals(0, bzip2CompressorInputStream.read(new byte[1], 0, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_AeHr6() throws IOException {
        BZip2CompressorInputStream bzip2CompressorInputStream = new BZip2CompressorInputStream(null);
        assertEquals(-1, bzip2CompressorInputStream.read(new byte[1], 0, 1));
    }
}