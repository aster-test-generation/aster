/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PopulationCodec_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDecode_hyjq0() throws IOException, Pack200Exception {
        RunCodec runCodec = new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1));
        PopulationCodec populationCodec = new PopulationCodec(runCodec, 1, runCodec);
        InputStream in = mock(InputStream.class);
        long last = 1;
        int actual = populationCodec.decode(in, last);
        assertEquals(0, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncode_qcyy0() throws Pack200Exception {
    RunCodec favouredCodec = new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1));
    RunCodec tokenCodec = new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1));
    RunCodec unfavouredCodec = new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1));
    PopulationCodec populationCodec = new PopulationCodec(favouredCodec, 1, unfavouredCodec);
    int[] favoured = {1, 2, 3};
    int[] tokens = {4, 5, 6};
    int[] unfavoured = {7, 8, 9};
    byte[] expected = new byte[15];
    byte[] actual = populationCodec.encode(favoured, tokens, unfavoured);
    assertArrayEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRunCodec_HEnS0() throws Exception {
        RunCodec runCodec = new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1));
        PopulationCodec populationCodec = new PopulationCodec(runCodec, 1, runCodec);
        Codec unfavouredCodec = populationCodec.getUnfavouredCodec();
        assertNotNull(unfavouredCodec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBHSDCodec_XlZk1() throws Exception {
        BHSDCodec bhsdCodec = new BHSDCodec(1, 1);
        PopulationCodec populationCodec = new PopulationCodec(new RunCodec(1, bhsdCodec, bhsdCodec), 1, new RunCodec(1, bhsdCodec, bhsdCodec));
        Codec unfavouredCodec = populationCodec.getUnfavouredCodec();
        assertNotNull(unfavouredCodec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeIntInt_lkno0() throws Exception {
        PopulationCodec populationCodec = new PopulationCodec(null, 0, null);
        try {
            byte[] encodedValue = populationCodec.encode(1, 2);
            assertNotNull(encodedValue);
            assertTrue(encodedValue.length > 0);
        } catch (Pack200Exception e) {
            fail("Unexpected Pack200Exception: " + e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFavoured_MwGM0() throws Exception {
        RunCodec favouredCodec = new RunCodec(1, new BHSDCodec(2, 3), new BHSDCodec(4, 5));
        RunCodec unfavouredCodec = new RunCodec(6, new BHSDCodec(7, 8), new BHSDCodec(9, 10));
        PopulationCodec populationCodec = new PopulationCodec(favouredCodec, 11, unfavouredCodec);
        int[] result = populationCodec.getFavoured();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_JGWk0() throws Exception {
        PopulationCodec populationCodec = new PopulationCodec(new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1)), 1, new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1)));
        byte[] encodedValue = populationCodec.encode(1);
        assertNotNull(encodedValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTokenCodec_ZhLE0() throws Exception {
        PopulationCodec populationCodec = new PopulationCodec(new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1)), 1, new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1)));
        Codec tokenCodec = populationCodec.getTokenCodec();
        assertNotNull(tokenCodec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetFavouredCodec_bJyt0() throws Exception {
    PopulationCodec populationCodec = new PopulationCodec(new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1)), 1, new RunCodec(1, new BHSDCodec(1, 1), new BHSDCodec(1, 1)));
    Codec favouredCodec = populationCodec.getFavouredCodec();
    assertNotNull(favouredCodec);
}
}