/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.SeekableByteChannel;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SeekableInMemoryByteChannel_Test_Passing {
    private SeekableInMemoryByteChannel channel;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_KWUv0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
        byte[] array = channel.array();
        assertNotNull(array);
        assertEquals(10, array.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithNoData_HvjE1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        byte[] array = channel.array();
        assertNotNull(array);
        assertEquals(0, array.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithNullData_hygF2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(null);
        byte[] array = channel.array();
        assertNotNull(array);
        assertEquals(0, array.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithEmptyData_ZuKr3() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[0]);
        byte[] array = channel.array();
        assertNotNull(array);
        assertEquals(0, array.length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeSmallerThanZero_eafL0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        try {
            channel.truncate(-1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Size has to be in range 0.. 2147483647", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeGreaterThanIntMax_DOtu1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        try {
            channel.truncate(Integer.MAX_VALUE + 1L);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Size has to be in range 0.. 2147483647", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpenWithOpenChannel_VUzM0() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    assertTrue(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIsOpenWithClosedChannel_IHHY1() {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
    channel.close();
    assertFalse(channel.isOpen());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_EgRi0() {
        channel = new SeekableInMemoryByteChannel();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithNewPositionInsideRange_kDCy1() throws IOException {
        long newPosition = 100;
        SeekableByteChannel result = channel.position(newPosition);
        assertEquals(result, channel);
        assertEquals(channel.position(), newPosition);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithNewPositionOutsideRange_oBzA2() {
        long newPosition = Integer.MAX_VALUE + 1L;
        try {
            channel.position(newPosition);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("Position has to be in range 0.. " + Integer.MAX_VALUE));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithNegativeNewPosition_HMvL3() {
        long newPosition = -1L;
        try {
            channel.position(newPosition);
            fail("Expected IOException");
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("Position has to be in range 0.. " + Integer.MAX_VALUE));
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_Qofq0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithConstructor_wkHt1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[100]);
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPositionWithArrayConstructor_qwtt2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[]{1, 2, 3});
        assertEquals(0, channel.position());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_EmptyBuffer_IDGY0() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    ByteBuffer buf = ByteBuffer.allocate(0);
    assertEquals(-1, channel.read(buf));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_FullBuffer_SnfR1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    ByteBuffer buf = ByteBuffer.allocate(10);
    assertEquals(10, channel.read(buf));
    assertArrayEquals(new byte[10], buf.array());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_PartialBuffer_BUJp2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    ByteBuffer buf = ByteBuffer.allocate(5);
    assertEquals(5, channel.read(buf));
    assertArrayEquals(new byte[5], buf.array());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_Jwgz0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        assertEquals(10, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithByteArray_yaWp1() {
        byte[] data = new byte[20];
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(data);
        assertEquals(20, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSizeWithNoArgs_EIzK2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        assertEquals(0, channel.size());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_KWUv0_1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
        byte[] array = channel.array();
        assertNotNull(array);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_KWUv0_2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
        byte[] array = channel.array();
        assertEquals(10, array.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithNoData_HvjE1_1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        byte[] array = channel.array();
        assertNotNull(array);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithNoData_HvjE1_2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel();
        byte[] array = channel.array();
        assertEquals(0, array.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithNullData_hygF2_1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(null);
        byte[] array = channel.array();
        assertNotNull(array);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithNullData_hygF2_2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(null);
        byte[] array = channel.array();
        assertEquals(0, array.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithEmptyData_ZuKr3_1() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[0]);
        byte[] array = channel.array();
        assertNotNull(array);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArrayWithEmptyData_ZuKr3_2() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[0]);
        byte[] array = channel.array();
        assertEquals(0, array.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_FullBuffer_SnfR1_1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    ByteBuffer buf = ByteBuffer.allocate(10);
    assertEquals(10, channel.read(buf));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_FullBuffer_SnfR1_2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    ByteBuffer buf = ByteBuffer.allocate(10);
    assertArrayEquals(new byte[10], buf.array());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_PartialBuffer_BUJp2_1() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    ByteBuffer buf = ByteBuffer.allocate(5);
    assertEquals(5, channel.read(buf));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRead_PartialBuffer_BUJp2_2() throws IOException {
    SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(new byte[10]);
    ByteBuffer buf = ByteBuffer.allocate(5);
    assertArrayEquals(new byte[5], buf.array());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeSmallerThanCurrentSize_wRHe2_FbHI0_1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        channel.position(50);
        SeekableByteChannel result = channel.truncate(20);
        assertEquals(20, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeSmallerThanCurrentSize_wRHe2_FbHI0_2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        channel.position(50);
        SeekableByteChannel result = channel.truncate(20);
        assertEquals(20, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeSmallerThanCurrentSize_wRHe2_FbHI0_3() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        channel.position(50);
        SeekableByteChannel result = channel.truncate(20);
        assertEquals(20, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeEqualToCurrentSize_GPuV3_lQWA0_1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        SeekableByteChannel result = channel.truncate(100);
        assertEquals(100, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeEqualToCurrentSize_GPuV3_lQWA0_2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        SeekableByteChannel result = channel.truncate(100);
        assertEquals(100, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeEqualToCurrentSize_GPuV3_lQWA0_3() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        SeekableByteChannel result = channel.truncate(100);
        assertEquals(100, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeGreaterThanCurrentSize_SGIU4_IQAp0_1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        SeekableByteChannel result = channel.truncate(200);
        assertEquals(200, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeGreaterThanCurrentSize_SGIU4_IQAp0_2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        SeekableByteChannel result = channel.truncate(200);
        assertEquals(200, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeGreaterThanCurrentSize_SGIU4_IQAp0_3() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        SeekableByteChannel result = channel.truncate(200);
        assertEquals(200, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeZero_IPck5_edTs0_1() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        SeekableByteChannel result = channel.truncate(0);
        assertEquals(0, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeZero_IPck5_edTs0_2() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        SeekableByteChannel result = channel.truncate(0);
        assertEquals(0, channel.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateWithNewSizeZero_IPck5_edTs0_3() throws IOException {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(100);
        SeekableByteChannel result = channel.truncate(0);
        assertEquals(0, channel.position());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteWithEmptyBuffer_XLET0_qIEH0() {
        SeekableInMemoryByteChannel channel = new SeekableInMemoryByteChannel(10);
        ByteBuffer b = ByteBuffer.allocate(0);
        try {
            assertEquals(0, channel.write(b));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}