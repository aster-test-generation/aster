/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.nio.file.attribute.FileTime;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_X000A_NTFS_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getModifyTime_QKuW0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipEightByteInteger zipEightByteInteger = x000A_NTFS.getModifyTime();
		assertNotNull(zipEightByteInteger);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryData_qqFY0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        byte[] actualCentralDirectoryData = x000A_NTFS.getCentralDirectoryData();
        byte[] expectedCentralDirectoryData = x000A_NTFS.getLocalFileDataData();
        assertArrayEquals(expectedCentralDirectoryData, actualCentralDirectoryData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessFileTime_oisb0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        FileTime time = FileTime.fromMillis(System.currentTimeMillis());
        x000A_NTFS.setAccessFileTime(time);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataLength_KhbH0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipShort localFileDataLength = x000A_NTFS.getLocalFileDataLength();
        assertEquals(22, localFileDataLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreateFileTime_cVCd0() {
        X000A_NTFS instance = new X000A_NTFS();
        ZipEightByteInteger z = new ZipEightByteInteger(1234567890L);
        FileTime result = instance.getCreateFileTime();
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetModifyFileTime_XDiO0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		FileTime result = x000A_NTFS.getModifyFileTime();
		assertNotNull(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessFileTime_uxgw0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        FileTime fileTime = x000A_NTFS.getAccessFileTime();
        assertNotNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateTimeWithZipEightByteInteger_zubq0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8], 0);
        X000A_NTFS x000ANTFS = new X000A_NTFS();
        x000ANTFS.setCreateTime(zipEightByteInteger);
        assertEquals(zipEightByteInteger, x000ANTFS.getCreateTime());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTime_TJUW0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date d = new Date();
        x000A_NTFS.setModifyJavaTime(d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetHeaderId_nbRW0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipShort zipShort = x000A_NTFS.getHeaderId();
		assertEquals(1, zipShort.getValue());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAccessJavaTime_oTRY0() {
        Date expected = FileTimes.ntfsTimeToDate(1234567890L);
        Date actual =new X000A_NTFS().getAccessJavaTime();
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEquals_cIFL0() {
	ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[8], 0);
	ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[8], 0);
	assertEquals(true, zipEightByteInteger1.equals(zipEightByteInteger2));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue_dSkD1() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8], 0);
	assertEquals(0L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testToString_POEn2() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8], 0);
	assertEquals("0", zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetLongValue2_FRmr4() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8]);
	assertEquals(0L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_PQqw5() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8], 0);
	assertEquals(new byte[8], zipEightByteInteger.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testHashCode_irac7() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8], 0);
	assertEquals(0, zipEightByteInteger.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes3_sYfA10() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(0L);
	assertEquals(new byte[8], zipEightByteInteger.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCreateTime_HNTG0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipEightByteInteger createTime = x000A_NTFS.getCreateTime();
        assertNotNull(createTime);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_SuUL1() {
        byte[] bytes = new byte[8];
        int offset = 0;
        long value = ZipEightByteInteger.getLongValue(bytes, offset);
        assertEquals(0L, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue1_YTaN4() {
        byte[] bytes = new byte[8];
        long value = ZipEightByteInteger.getLongValue(bytes);
        assertEquals(0L, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCreateJavaTime_qqbd0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date date = x000A_NTFS.getCreateJavaTime();
        assertNotNull(date);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FVhn0_1() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(new byte[]{9, 8, 7, 6, 5, 4, 3, 2}, 0);
        assertTrue(zipEightByteInteger1.equals(zipEightByteInteger2));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FVhn0_2() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(new byte[]{9, 8, 7, 6, 5, 4, 3, 2}, 0);
        assertFalse(zipEightByteInteger1.equals(zipEightByteInteger3));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue_NpTw1() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertEquals(12345678L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_uVyP2() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertEquals("12345678", zipEightByteInteger.toString());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongValue2_qnEd4() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
        assertEquals(12345678L, zipEightByteInteger.getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytes_YIAl5() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8});
        assertArrayEquals(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, zipEightByteInteger.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_tkDQ7() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        assertEquals(zipEightByteInteger1.hashCode(), zipEightByteInteger2.hashCode());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test_getAccessTime_AGLV0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		ZipEightByteInteger zipEightByteInteger = x000A_NTFS.getAccessTime();
		assertEquals(0, zipEightByteInteger.getLongValue());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getModifyJavaTime_oGap0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date modifyJavaTime = x000A_NTFS.getModifyJavaTime();
        assertNotNull(modifyJavaTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTime_qTIv0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Date d = new Date();
        x000A_NTFS.setAccessJavaTime(d);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreateTimeWithLong_SSUD3_gzFt0() {
        long value = 1234567890123456789L;
        X000A_NTFS x000ANTFS = new X000A_NTFS();
        x000ANTFS.setCreateTime(new ZipEightByteInteger(value));
        assertEquals(value, x000ANTFS.getCreateTime().getLongValue());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_EVLY0_fFgL0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        ZipShort zipShort = x000A_NTFS.getCentralDirectoryLength();
        assertEquals(0, zipShort.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetModifyFileTime_XDiO0_pgRg0() {
		X000A_NTFS x000A_NTFS = new X000A_NTFS();
		FileTime result = x000A_NTFS.getModifyFileTime();
		Assertions.assertNotNull(result);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessTimeWithZipEightByteInteger_zubq0_wICT0() {
        ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8], 0);
        X000A_NTFS x000ANTFS = new X000A_NTFS();
        x000ANTFS.setAccessTime(zipEightByteInteger);
        assertEquals(zipEightByteInteger, x000ANTFS.getAccessTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetModifyJavaTime_TJUW0_RZTB0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(new Date());
        x000A_NTFS.setModifyJavaTime(calendar.getTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetBytes_PQqw5_TttS0() {
	ZipEightByteInteger zipEightByteInteger = new ZipEightByteInteger(new byte[8], 0);
	byte[] expected = new byte[8];
	Arrays.fill(expected, (byte) 0);
	assertEquals(expected, zipEightByteInteger.getBytes());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FVhn0_idrP0_2() {
        ZipEightByteInteger zipEightByteInteger1 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        ZipEightByteInteger zipEightByteInteger2 = new ZipEightByteInteger(new byte[]{1, 2, 3, 4, 5, 6, 7, 8}, 0);
        ZipEightByteInteger zipEightByteInteger3 = new ZipEightByteInteger(new byte[]{9, 8, 7, 6, 5, 4, 3, 2}, 0);
        assertNotEquals(zipEightByteInteger1, zipEightByteInteger3);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getModifyJavaTime_oGap0_QPBE0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        x000A_NTFS.setAccessJavaTime(new Date());
        Date modifyJavaTime = x000A_NTFS.getModifyJavaTime();
        assertNotNull(modifyJavaTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessJavaTime_qTIv0_OJrs0() {
        X000A_NTFS x000A_NTFS = new X000A_NTFS();
        Calendar calendar = Calendar.getInstance();
        Date d = calendar.getTime();
        x000A_NTFS.setAccessJavaTime(d);
    }
}