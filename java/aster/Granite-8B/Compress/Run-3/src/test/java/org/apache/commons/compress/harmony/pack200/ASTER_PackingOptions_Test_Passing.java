/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.pack200;
import java.util.HashMap;
import java.util.Map;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PackingOptions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetModificationTime_dbPG0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String modificationTime = packingOptions.getModificationTime();
        assertNotNull(modificationTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsVerbose_ekxJ0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        boolean verbose = packingOptions.isVerbose();
        assertFalse(verbose);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFile_LaSQ0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "example.txt";
        boolean result = packingOptions.isPassFile(passFileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFileWithClassFile_AgfO1() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "example.class";
        boolean result = packingOptions.isPassFile(passFileName);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFileWithNoMatchingPassFile_lsUN2() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "example.zip";
        boolean result = packingOptions.isPassFile(passFileName);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsPassFileWithMatchingPassFileAndClassFile_zLFV4() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String passFileName = "example/Example.class";
        boolean result = packingOptions.isPassFile(passFileName);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLogFile_fJEe0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String logFile = packingOptions.getLogFile();
        assertNotNull(logFile);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStripDebug_MOFc0_1() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(true);
        packingOptions.setStripDebug(false);
        assertTrue(packingOptions.isStripDebug());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsStripDebug_MOFc0_2() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setStripDebug(true);
        packingOptions.setStripDebug(false);
        assertFalse(packingOptions.isStripDebug());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUnknownClassAttributeAction_GAYG0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        Map<String, String> map = new HashMap<>();
        String type = "type";
        String defaultValue = "defaultValue";
        String expected = "defaultValue";
        String actual = packingOptions.getUnknownClassAttributeAction(type);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetUnknownFieldAttributeAction_LHmM0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String type = "exampleType";
        String expected = "exampleAction";
        String actual = packingOptions.getUnknownFieldAttributeAction(type);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSegmentLimit_qVYL0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        long segmentLimit = packingOptions.getSegmentLimit();
        assertEquals(0, segmentLimit);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnknownAttributeAction_dkiE0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String actual = packingOptions.getUnknownAttributeAction();
        String expected = "";
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetEffort_eRvg0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setEffort(10);
        assertEquals(10, packingOptions.getEffort());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrder_xzZL0_1() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        packingOptions.setKeepFileOrder(false);
        assertTrue(packingOptions.isKeepFileOrder());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsKeepFileOrder_xzZL0_2() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setKeepFileOrder(true);
        packingOptions.setKeepFileOrder(false);
        assertFalse(packingOptions.isKeepFileOrder());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUnknownMethodAttributeAction_BpZE0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String type = "exampleType";
        String expected = "exampleAction";
        String actual = packingOptions.getUnknownMethodAttributeAction(type);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEffort_fgfy0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        int effort = packingOptions.getEffort();
        assertEquals(0, effort);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHint_Keep_cHJd0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("keep");
        assertEquals("keep", packingOptions.getDeflateHint());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHint_True_YRaF1() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("true");
        assertEquals("true", packingOptions.getDeflateHint());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDeflateHint_False_GxmH2() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setDeflateHint("false");
        assertEquals("false", packingOptions.getDeflateHint());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSegmentLimit_fCjD0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setSegmentLimit(100L);
        assertEquals(100L, packingOptions.getSegmentLimit());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGzip_cjjA0_1() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setGzip(true);
        packingOptions.setGzip(false);
        assertTrue(packingOptions.isGzip());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsGzip_cjjA0_2() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        packingOptions.setGzip(true);
        packingOptions.setGzip(false);
        assertFalse(packingOptions.isGzip());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDeflateHint_IzGQ0() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String deflateHint = packingOptions.getDeflateHint();
        assertNotNull(deflateHint);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDeflateHintWithDeflateHintNotSet_SYHn2() throws Exception {
        PackingOptions packingOptions = new PackingOptions();
        String deflateHint = packingOptions.getDeflateHint();
        assertEquals("", deflateHint);
    }
}