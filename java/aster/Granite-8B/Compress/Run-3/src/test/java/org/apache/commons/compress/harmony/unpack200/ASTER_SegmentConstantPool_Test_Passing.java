/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SegmentConstantPool_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatchesAll_rpGL0() {
    boolean result = SegmentConstantPool.regexMatches(SegmentConstantPool.REGEX_MATCH_ALL, "anystring");
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatchesInit_EyHV1() {
    boolean result = SegmentConstantPool.regexMatches(SegmentConstantPool.REGEX_MATCH_INIT, "INITSTRING");
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatchesInitWithLongerString_qukE2() {
    boolean result = SegmentConstantPool.regexMatches(SegmentConstantPool.REGEX_MATCH_INIT, "INITSTRING longerstring");
    assertTrue(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testRegexMatchesInitWithShorterString_UmtU3() {
    boolean result = SegmentConstantPool.regexMatches(SegmentConstantPool.REGEX_MATCH_INIT, "INIT");
    assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassPoolEntry2_jHXf1() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        ConstantPoolEntry constantPoolEntry = segmentConstantPool.getClassPoolEntry("exampleClass2");
        assertEquals(1, constantPoolEntry.getGlobalIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchSpecificPoolEntryIndex_jlNd0() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        String[] nameArray = new String[10];
        String compareString = "exampleString";
        int desiredIndex = 5;
        int expectedIndex = 5;
        int actualIndex = segmentConstantPool.matchSpecificPoolEntryIndex(nameArray, compareString, desiredIndex);
        assertEquals(expectedIndex, actualIndex);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetClassPoolEntry_Yfpc0() throws Exception {
        CpBands bands = mock(CpBands.class);
        SegmentConstantPool segmentconstantpool = new SegmentConstantPool(bands);
        when(bands.getCpClass()).thenReturn(new String[]{"class1", "class2"});
        ConstantPoolEntry result = segmentconstantpool.getClassPoolEntry("class1");
        assertNotNull(result);
        verify(bands).getCpClass();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassPoolEntry_irDI0_nWta0() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        ConstantPoolEntry constantPoolEntry = segmentConstantPool.getClassPoolEntry("exampleClass");
        assertEquals(0, constantPoolEntry.getGlobalIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetValueDefaultCase_XsIv3_cBIo0() {
		CpBands bands = new CpBands(new Segment());
		SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
		int cp = 10; // Replace with a cp value that is not covered in the test cases
		long value = 1;
		try {
			segmentConstantPool.getValue(cp, value);
		} catch (Pack200Exception e) {
		}
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitMethodPoolEntry_1_Ypdz0_xBfg0() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        ConstantPoolEntry constantPoolEntry = null;
        try {
            constantPoolEntry = segmentConstantPool.getInitMethodPoolEntry(1, 1L, "desiredClassName");
        } catch (Pack200Exception e) {
            e.printStackTrace();
        }
        assertNotNull(constantPoolEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitMethodPoolEntry_2_Aabp1_Kaef0() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        ConstantPoolEntry constantPoolEntry = null;
        try {
            constantPoolEntry = segmentConstantPool.getInitMethodPoolEntry(1, 1L, "desiredClassName");
        } catch (Pack200Exception e) {
            e.printStackTrace();
        }
        assertEquals(1, constantPoolEntry.getGlobalIndex());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getInitMethodPoolEntry_3_KDNk2_RJvf0() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(bands);
        try {
            ConstantPoolEntry constantPoolEntry = segmentConstantPool.getInitMethodPoolEntry(1, 1L, "desiredClassName");
            assertEquals(1, constantPoolEntry.getTag());
        } catch (Pack200Exception e) {
            e.printStackTrace();
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassSpecificPoolEntry_jQwL0_OaiD0() {
        CpBands bands = new CpBands(new Segment());
        SegmentConstantPool pool = new SegmentConstantPool(bands);
        ConstantPoolEntry entry = null;
        try {
            entry = pool.getClassSpecificPoolEntry(1, 1, "Test");
        } catch (Pack200Exception e) {
            e.printStackTrace();
        }
        assertNotNull(entry);
    }
}