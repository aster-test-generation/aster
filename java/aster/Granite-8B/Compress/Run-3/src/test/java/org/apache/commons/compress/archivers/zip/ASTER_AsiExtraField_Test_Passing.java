/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AsiExtraField_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLinkedFile_zkTr0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        String linkedFile = asiExtraField.getLinkedFile();
        assertNotNull(linkedFile);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDirectory_gDir0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        boolean isDirectory = asiExtraField.isDirectory();
        Assertions.assertFalse(isDirectory);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_withValidData_shouldNotThrowException_bxAb0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] data = new byte[100];
        int offset = 0;
        int length = 100;
        try {
            asiExtraField.parseFromLocalFileData(data, offset, length);
        } catch (ZipException e) {
            fail("parseFromLocalFileData should not throw exception with valid data");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_withInvalidLength_shouldThrowException_urjU1() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] data = new byte[100];
        int offset = 0;
        int length = 99;
        try {
            asiExtraField.parseFromLocalFileData(data, offset, length);
            fail("parseFromLocalFileData should throw exception with invalid length");
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_withInvalidChecksum_shouldThrowException_cGdC2() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] data = new byte[100];
        int offset = 0;
        int length = 100;
        try {
            asiExtraField.parseFromLocalFileData(data, offset, length);
            fail("parseFromLocalFileData should throw exception with invalid checksum");
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_withInvalidLinkArrayLength_shouldThrowException_ZCNO3() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] data = new byte[100];
        int offset = 0;
        int length = 100;
        try {
            asiExtraField.parseFromLocalFileData(data, offset, length);
            fail("parseFromLocalFileData should throw exception with invalid link array length");
        } catch (ZipException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromLocalFileData_withValidData_shouldSetDirectoryAndMode_ORXv4() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] data = new byte[100];
        int offset = 0;
        int length = 100;
        try {
            asiExtraField.parseFromLocalFileData(data, offset, length);
            assertTrue(asiExtraField.isDirectory());
            assertEquals(0777, asiExtraField.getMode());
        } catch (ZipException e) {
            fail("parseFromLocalFileData should not throw exception with valid data");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHeaderId_ckKa0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        ZipShort headerId = asiExtraField.getHeaderId();
        assertNotNull(headerId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetGroupId_KjpS0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        int groupId = asiExtraField.getGroupId();
        assertEquals(0, groupId);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_1_BGek0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        int result = asiExtraField.getMode(0);
        assertEquals(16384, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_2_OpLM1() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        int result = asiExtraField.getMode(1);
        assertEquals(16385, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getMode_3_nNqf2() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        int result = asiExtraField.getMode(2);
        assertEquals(16386, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetMode_PLgl0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setMode(1);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalFileDataLength_sdWE0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        ZipShort localFileDataLength = asiExtraField.getLocalFileDataLength();
        assertEquals(22, localFileDataLength.getValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCentralDirectoryLength_DuSr0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        ZipShort zipShort = asiExtraField.getCentralDirectoryLength();
        assertNotNull(zipShort);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseFromCentralDirectoryData_zwKD0() throws ZipException {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] buffer = new byte[10];
        int offset = 0;
        int length = 10;
        asiExtraField.parseFromCentralDirectoryData(buffer, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalFileDataData_FXPy0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        byte[] result = asiExtraField.getLocalFileDataData();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLink_QcIH0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        boolean result = asiExtraField.isLink();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLinkWithLinkedFile_Unhh1() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        asiExtraField.setLinkedFile("example.txt");
        boolean result = asiExtraField.isLink();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetMode_onyI0() throws Exception {
        AsiExtraField asiExtraField = new AsiExtraField();
        int mode = asiExtraField.getMode();
        assertEquals(0, mode);
    }
}