/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.concurrent.atomic.AtomicInteger;
import org.apache.commons.compress.parallel.ScatterGatherBackingStore;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DefaultBackingStoreSupplier_Test_Passing {
    private static final String PREFIX = "test";
    private Path dir;
    private AtomicInteger storeNum;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void get_ScatterGatherBackingStore_NotNull_LVmE0() throws IOException {
        dir = null;
        storeNum = new AtomicInteger();
        DefaultBackingStoreSupplier defaultBackingStoreSupplier = new DefaultBackingStoreSupplier(dir);
        ScatterGatherBackingStore scatterGatherBackingStore = defaultBackingStoreSupplier.get();
        assertNotNull(scatterGatherBackingStore);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void get_ScatterGatherBackingStore_NotNull_WithDir_mOlP1() throws IOException {
        dir = Files.createTempDirectory("test");
        storeNum = new AtomicInteger();
        DefaultBackingStoreSupplier defaultBackingStoreSupplier = new DefaultBackingStoreSupplier(dir);
        ScatterGatherBackingStore scatterGatherBackingStore = defaultBackingStoreSupplier.get();
        assertNotNull(scatterGatherBackingStore);
    }
}