/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.File;
import java.io.IOException;
import java.nio.channels.SeekableByteChannel;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ZipSplitReadOnlySeekableByteChannel_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_singleChannel_IiLe0() throws IOException {
        final SeekableByteChannel channel = mock(SeekableByteChannel.class);
        final SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel);
        assertEquals(channel, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_multipleChannels_kRGf1() throws IOException {
        final SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
        final SeekableByteChannel channel2 = mock(SeekableByteChannel.class);
        final SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, channel2);
        assertTrue(result instanceof ZipSplitReadOnlySeekableByteChannel);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_emptyChannels_vPmu3() throws IOException {
        final SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels();
        assertTrue(result instanceof ZipSplitReadOnlySeekableByteChannel);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuildFromLastSplitSegment_Kxsu0() throws IOException {
        List<SeekableByteChannel> channels = null; // initialize with correct type and values
        File lastSegmentFile = null; // initialize with correct type and values
        SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(lastSegmentFile);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForOrderedSeekableByteChannels_nullChannelInVarargs_VyMQ6_GYGk0() throws IOException {
        final SeekableByteChannel channel1 = mock(SeekableByteChannel.class);
        final SeekableByteChannel result = ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(channel1, null);
        assertTrue(result instanceof ZipSplitReadOnlySeekableByteChannel);
    }
}