/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountInvokeInterfaceArgs_DKMh0() {
        String descriptor = "()V";
        int expected = 0;
        int actual = SegmentUtils.countInvokeInterfaceArgs(descriptor);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0() {
        assertEquals(1, SegmentUtils.countArgs("()V"));
        assertEquals(1, SegmentUtils.countArgs("(I)V"));
        assertEquals(2, SegmentUtils.countArgs("(II)V"));
        assertEquals(1, SegmentUtils.countArgs("(I)I"));
        assertEquals(2, SegmentUtils.countArgs("(II)I"));
        assertEquals(3, SegmentUtils.countArgs("(III)I"));
        assertEquals(1, SegmentUtils.countArgs("(I)Z"));
        assertEquals(2, SegmentUtils.countArgs("(IZ)Z"));
        assertEquals(3, SegmentUtils.countArgs("(IZZ)Z"));
        assertEquals(1, SegmentUtils.countArgs("(I)Lorg/objectweb/asm/Type;"));
        assertEquals(2, SegmentUtils.countArgs("(ILorg/objectweb/asm/Type;)Lorg/objectweb/asm/Type;"));
        assertEquals(3, SegmentUtils.countArgs("(ILorg/objectweb/asm/Type;Lorg/objectweb/asm/Type;)Lorg/objectweb/asm/Type;"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_tIFI0() {
        long[] flags = {1L << 16, 0L, 1L << 15, 1L << 16};
        int expected = 2;
        int actual = SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16WithEmptyArray_QgUd1() {
        long[] flags = {};
        int expected = 0;
        int actual = SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16WithAllZeros_YXFI2() {
        long[] flags = {0L, 0L, 0L, 0L};
        int expected = 0;
        int actual = SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_QkvN0() {
        int[] flags = {1, 2, 4, 8, 16, 32, 64, 128};
        int expected = 1;
        int actual = SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16WithEmptyArray_eQik1() {
        int[] flags = {};
        int expected = 0;
        int actual = SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16WithNullArray_oZpI2() {
        int[] flags = null;
        int expected = 0;
        int actual = SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16_rOfW0() {
        long[][] flags = new long[2][2];
        flags[0][0] = 0b100000000000000;
        flags[0][1] = 0b010000000000000;
        flags[1][0] = 0b000000000000001;
        flags[1][1] = 0b000000000000000;
        int expected = 2;
        int actual = SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16WithEmptyFlags_BjAv1() {
        long[][] flags = new long[0][0];
        int expected = 0;
        int actual = SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16WithFlagsAllZeros_SbfH2() {
        long[][] flags = new long[2][2];
        flags[0][0] = 0b000000000000000;
        flags[0][1] = 0b000000000000000;
        flags[1][0] = 0b000000000000000;
        flags[1][1] = 0b000000000000000;
        int expected = 0;
        int actual = SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountBit16WithFlagsAllOnes_kLYT3() {
        long[][] flags = new long[2][2];
        flags[0][0] = 0b111111111111111;
        flags[0][1] = 0b111111111111111;
        flags[1][0] = 0b111111111111111;
        flags[1][1] = 0b111111111111111;
        int expected = 32;
        int actual = SegmentUtils.countBit16(flags);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_1() {
        assertEquals(1, SegmentUtils.countArgs("()V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_2() {
        assertEquals(1, SegmentUtils.countArgs("(I)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_3() {
        assertEquals(2, SegmentUtils.countArgs("(II)V"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_4() {
        assertEquals(1, SegmentUtils.countArgs("(I)I"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_5() {
        assertEquals(2, SegmentUtils.countArgs("(II)I"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_6() {
        assertEquals(3, SegmentUtils.countArgs("(III)I"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_7() {
        assertEquals(1, SegmentUtils.countArgs("(I)Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_8() {
        assertEquals(2, SegmentUtils.countArgs("(IZ)Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_9() {
        assertEquals(3, SegmentUtils.countArgs("(IZZ)Z"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_10() {
        assertEquals(1, SegmentUtils.countArgs("(I)Lorg/objectweb/asm/Type;"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_11() {
        assertEquals(2, SegmentUtils.countArgs("(ILorg/objectweb/asm/Type;)Lorg/objectweb/asm/Type;"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs_fTGa0_12() {
        assertEquals(3, SegmentUtils.countArgs("(ILorg/objectweb/asm/Type;Lorg/objectweb/asm/Type;)Lorg/objectweb/asm/Type;"));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs3_FetK2_Hjxp0() {
        String descriptor = "(II)I";
        int widthOfLongsAndDoubles = 2;
        int expected = 2;
        int actual = SegmentUtils.countArgs(descriptor, widthOfLongsAndDoubles);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs4_OXUY3_zeUm0() {
        String descriptor = "(III)I";
        int widthOfLongsAndDoubles = 2;
        int expected = 3;
        int actual = SegmentUtils.countArgs(descriptor, widthOfLongsAndDoubles);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs5_MhaD4_kwkP0() {
        String descriptor = "(IIII)I";
        int widthOfLongsAndDoubles = 2;
        int expected = 4;
        int actual = SegmentUtils.countArgs(descriptor, widthOfLongsAndDoubles);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs6_xoBi5_UYPG0() {
        String descriptor = "(IIIIII)I";
        int widthOfLongsAndDoubles = 2;
        int expected = 6;
        int actual = SegmentUtils.countArgs(descriptor, widthOfLongsAndDoubles);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs7_qYVP6_zQIt0() {
        String descriptor = "(IIIIIIII)I";
        int widthOfLongsAndDoubles = 2;
        int expected = 8;
        int actual = SegmentUtils.countArgs(descriptor, widthOfLongsAndDoubles);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs8_WIBd7_fVXQ0() {
        String descriptor = "(IIIIIIIIII)I";
        int widthOfLongsAndDoubles = 2;
        int expected = 10;
        int actual = SegmentUtils.countArgs(descriptor, widthOfLongsAndDoubles);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs9_KFuO8_dNCx0() {
        String descriptor = "(IIIIIIIIIIII)I";
        int widthOfLongsAndDoubles = 2;
        int expected = 12;
        int actual = SegmentUtils.countArgs(descriptor, widthOfLongsAndDoubles);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs10_AwDg9_hsJS0() {
        String descriptor = "(IIIIIIIIIIIIII)I";
        int widthOfLongsAndDoubles = 2;
        int expected = 14;
        int actual = SegmentUtils.countArgs(descriptor, widthOfLongsAndDoubles);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs11_waFq10_FBAu0() {
        String descriptor = "(IIIIIIIIIIIIIIII)I";
        int widthOfLongsAndDoubles = 2;
        int expected = 16;
        int actual = SegmentUtils.countArgs(descriptor, widthOfLongsAndDoubles);
        assertEquals(expected, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCountArgs12_lppg11_yWGT0() {
        String descriptor = "(IIIIIIIIIIIIIIIIII)I";
        int widthOfLongsAndDoubles = 2;
        int expected = 18;
        int actual = SegmentUtils.countArgs(descriptor, widthOfLongsAndDoubles);
        assertEquals(expected, actual);
}
}