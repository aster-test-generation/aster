/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.lzma;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LZMACompressorInputStream_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithNullSignature_vxIQ0() {
        assertFalse(LZMACompressorInputStream.matches(null, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithLengthLessThanThree_mdqA1_1() {
        assertFalse(LZMACompressorInputStream.matches(new byte[2], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithLengthLessThanThree_mdqA1_2() {
        assertFalse(LZMACompressorInputStream.matches(new byte[1], 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSignature_PCTo2_1() {
        assertFalse(LZMACompressorInputStream.matches(new byte[]{0, 0, 0}, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSignature_PCTo2_2() {
        assertFalse(LZMACompressorInputStream.matches(new byte[]{0, 0, 1}, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSignature_PCTo2_3() {
        assertFalse(LZMACompressorInputStream.matches(new byte[]{0, 1, 0}, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSignature_PCTo2_4() {
        assertFalse(LZMACompressorInputStream.matches(new byte[]{1, 0, 0}, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithValidSignature_LeDv3() {
        assertTrue(LZMACompressorInputStream.matches(new byte[]{0x5d, 0, 0}, 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithValidSignatureAndLength_nfJU4() {
        assertTrue(LZMACompressorInputStream.matches(new byte[]{0x5d, 0, 0}, 3));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithLengthLessThanThree_mdqA1() {
        assertFalse(LZMACompressorInputStream.matches(new byte[2], 0));
        assertFalse(LZMACompressorInputStream.matches(new byte[1], 0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithInvalidSignature_PCTo2() {
        assertFalse(LZMACompressorInputStream.matches(new byte[]{0, 0, 0}, 0));
        assertFalse(LZMACompressorInputStream.matches(new byte[]{0, 0, 1}, 0));
        assertFalse(LZMACompressorInputStream.matches(new byte[]{0, 1, 0}, 0));
        assertFalse(LZMACompressorInputStream.matches(new byte[]{1, 0, 0}, 0));
    }
}