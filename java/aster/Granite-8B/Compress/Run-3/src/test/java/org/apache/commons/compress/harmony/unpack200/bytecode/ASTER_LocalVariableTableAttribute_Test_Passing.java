/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_LocalVariableTableAttribute_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStartPCs_Ryib0() throws Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("test")}, new CPUTF8[]{new CPUTF8("int")}, new int[]{1});
        int[] startPcs = attribute.getStartPCs();
        assertArrayEquals(new int[]{1}, startPcs);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_gvVn0() throws Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(5, new int[]{1, 2, 3, 4, 5}, new int[]{10, 20, 30, 40, 50}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2"), new CPUTF8("name3"), new CPUTF8("name4"), new CPUTF8("name5")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2"), new CPUTF8("descriptor3"), new CPUTF8("descriptor4"), new CPUTF8("descriptor5")}, new int[]{1, 2, 3, 4, 5});
        assertEquals(110, attribute.getLength());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_vKRl0_3() throws Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("name")}, new CPUTF8[]{new CPUTF8("descriptor")}, new int[]{1});
        ClassConstantPool pool = new ClassConstantPool();
        attribute.resolve(pool);
        assertEquals(1, pool.indexOf(new CPUTF8("name")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_vKRl0_4() throws Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(1, new int[]{1}, new int[]{1}, new CPUTF8[]{new CPUTF8("name")}, new CPUTF8[]{new CPUTF8("descriptor")}, new int[]{1});
        ClassConstantPool pool = new ClassConstantPool();
        attribute.resolve(pool);
        assertEquals(1, pool.indexOf(new CPUTF8("descriptor")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve2_UEsd1_3() throws Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(2, new int[]{1, 2}, new int[]{1, 2}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2")}, new int[]{1, 2});
        ClassConstantPool pool = new ClassConstantPool();
        attribute.resolve(pool);
        assertEquals(1, pool.indexOf(new CPUTF8("name1")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve2_UEsd1_4() throws Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(2, new int[]{1, 2}, new int[]{1, 2}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2")}, new int[]{1, 2});
        ClassConstantPool pool = new ClassConstantPool();
        attribute.resolve(pool);
        assertEquals(1, pool.indexOf(new CPUTF8("name2")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve2_UEsd1_5() throws Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(2, new int[]{1, 2}, new int[]{1, 2}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2")}, new int[]{1, 2});
        ClassConstantPool pool = new ClassConstantPool();
        attribute.resolve(pool);
        assertEquals(2, pool.indexOf(new CPUTF8("descriptor1")));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve2_UEsd1_6() throws Exception {
        LocalVariableTableAttribute attribute = new LocalVariableTableAttribute(2, new int[]{1, 2}, new int[]{1, 2}, new CPUTF8[]{new CPUTF8("name1"), new CPUTF8("name2")}, new CPUTF8[]{new CPUTF8("descriptor1"), new CPUTF8("descriptor2")}, new int[]{1, 2});
        ClassConstantPool pool = new ClassConstantPool();
        attribute.resolve(pool);
        assertEquals(2, pool.indexOf(new CPUTF8("descriptor2")));}
}