/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.dump;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import org.apache.commons.compress.archivers.ArchiveException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DumpArchiveInputStream_Test_Passing {
private DumpArchiveInputStream dumpArchiveInputStream;
private InputStream inputStream;
private DumpArchiveEntry dumpArchiveEntry;
private Queue<DumpArchiveEntry> queue;
private DumpArchiveEntry active;
private byte[] readBuf;
private int readIdx;
private long entryOffset;
private int recordOffset;
    private long filepos;
    private boolean hasHitEOF;
    private final Map<Integer, Dirent> names = new HashMap<>();
    private long entrySize;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesBufferLengthLessThan32_jNzI0() {
        byte[] buffer = new byte[31];
        assertFalse(DumpArchiveInputStream.matches(buffer, buffer.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesBufferLengthEqualToTPSize_Mrnp1() {
        byte[] buffer = new byte[DumpArchiveConstants.TP_SIZE];
        assertTrue(DumpArchiveInputStream.matches(buffer, buffer.length));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNextEntry() throws Exception {
        inputStream = mock(InputStream.class);
        dumpArchiveInputStream = new DumpArchiveInputStream(inputStream);
        dumpArchiveEntry = mock(DumpArchiveEntry.class);
        queue = new LinkedList<>();
        queue.add(dumpArchiveEntry);
        active = mock(DumpArchiveEntry.class);
        readBuf = new byte[DumpArchiveConstants.TP_SIZE];
        readIdx = 0;
        entryOffset = 0;
        recordOffset = readBuf.length;
        when(dumpArchiveEntry.isSparseRecord(anyInt())).thenReturn(false);
        when(dumpArchiveEntry.isDirectory()).thenReturn(false);
        when(dumpArchiveEntry.getEntrySize()).thenReturn(100L);
        when(dumpArchiveEntry.getName()).thenReturn("test.txt");
        when(dumpArchiveEntry.getSimpleName()).thenReturn("test.txt");
        when(dumpArchiveEntry.getOffset()).thenReturn(100L);
        when(active.isSparseRecord(anyInt())).thenReturn(false);
        when(active.isDirectory()).thenReturn(false);
        when(active.getEntrySize()).thenReturn(100L);
        when(active.getName()).thenReturn("test.txt");
        when(active.getSimpleName()).thenReturn("test.txt");
        when(active.getOffset()).thenReturn(100L);
        when(dumpArchiveInputStream.getNextEntry()).thenReturn(dumpArchiveEntry);
        DumpArchiveEntry entry = dumpArchiveInputStream.getNextEntry();
        verify(dumpArchiveEntry, times(1)).isSparseRecord(anyInt());
        verify(dumpArchiveEntry, times(1)).isDirectory();
        verify(dumpArchiveEntry, times(1)).getEntrySize();
        verify(dumpArchiveEntry, times(1)).getName();
        verify(dumpArchiveEntry, times(1)).getSimpleName();
        verify(dumpArchiveEntry, times(1)).getOffset();
        verify(active, times(1)).isSparseRecord(anyInt());
        verify(active, times(1)).isDirectory();
        verify(active, times(1)).getEntrySize();
        verify(active, times(1)).getName();
        verify(active, times(1)).getSimpleName();
        verify(active, times(1)).getOffset();
        verify(dumpArchiveInputStream, times(1)).getNextEntry();
        assertEquals(entry, dumpArchiveEntry);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextDumpEntry() throws IOException {
        dumpArchiveInputStream = mock(DumpArchiveInputStream.class);
        dumpArchiveEntry = mock(DumpArchiveEntry.class);
        when(dumpArchiveInputStream.getNextDumpEntry()).thenReturn(dumpArchiveEntry);
        DumpArchiveEntry result = dumpArchiveInputStream.getNextDumpEntry();
        verify(dumpArchiveInputStream, times(1)).getNextDumpEntry();
        assertEquals(dumpArchiveEntry, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getSummary_VgEj0_xivk0() {
        DumpArchiveInputStream dumpArchiveInputStream = null;
        try {
            dumpArchiveInputStream = new DumpArchiveInputStream(null);
        } catch (ArchiveException e) {
            e.printStackTrace();
        }
        DumpArchiveSummary summary = dumpArchiveInputStream.getSummary();
        assertNotNull(summary);
    }
}