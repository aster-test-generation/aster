/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_SegmentOptions_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasFieldFlagsHi_JLCV0() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(1);
        boolean result = segmentOptions.hasFieldFlagsHi();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasFieldFlagsHiFalse_ZyRY1() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        boolean result = segmentOptions.hasFieldFlagsHi();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasCPNumberCountsFalse_LOlW1() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        boolean result = segmentOptions.hasCPNumberCounts();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasClassFlagsHi_udAZ0() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        boolean result = segmentOptions.hasClassFlagsHi();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasFileSizeHi_HxMa0() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(1);
        boolean result = segmentOptions.hasFileSizeHi();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasFileSizeHiFalse_LQDb1() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        boolean result = segmentOptions.hasFileSizeHi();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasCodeFlagsHi_UYQh0() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        boolean result = segmentOptions.hasCodeFlagsHi();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasSpecialFormats_HSHa0() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        boolean result = segmentOptions.hasSpecialFormats();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasSpecialFormats2_ITIT1() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(1);
        boolean result = segmentOptions.hasSpecialFormats();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArchiveFileCountsFalse_LWlc1() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        boolean result = segmentOptions.hasArchiveFileCounts();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasFileOptions_hClG0() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        boolean result = segmentOptions.hasFileOptions();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasFileOptions2_Mnuw1() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(1);
        boolean result = segmentOptions.hasFileOptions();
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testShouldNotDeflate_LDiR1() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        boolean result = segmentOptions.shouldDeflate();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasAllCodeFlagsFalse_beLx1() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        boolean result = segmentOptions.hasAllCodeFlags();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasFileModtimeFalse_ZARt1() throws Exception {
        SegmentOptions segmentOptions = new SegmentOptions(0);
        boolean result = segmentOptions.hasFileModtime();
        assertFalse(result);
    }
}