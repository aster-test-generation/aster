/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import java.io.IOException;
import java.io.InputStream;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.pack200.Pack200Exception;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_NewAttributeBands_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseAttributesWithNullSegment_hFNU1() throws Exception {
        Segment segment = null;
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        InputStream in = mock(InputStream.class);
        try {
            newAttributeBands.parseAttributes(in, 3);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Segment must not be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseAttributesWithNullAttributeLayout_EMDB2() throws Exception {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = null;
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        InputStream in = mock(InputStream.class);
        try {
            newAttributeBands.parseAttributes(in, 3);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Attribute layout must not be null", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseAttributesWithNegativeOccurrenceCount_WffB3() throws Exception {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        InputStream in = mock(InputStream.class);
        try {
            newAttributeBands.parseAttributes(in, -1);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Occurrence count must be positive", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls1_jfXu0() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(null, null);
        int[] backwardsCalls = new int[1];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls2_uMkm1() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(null, null);
        int[] backwardsCalls = new int[2];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls3_UcxH2() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(null, null);
        int[] backwardsCalls = new int[3];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls4_ArNN3() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(null, null);
        int[] backwardsCalls = new int[4];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetBackwardsCalls_cele0() throws IOException {
    NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
    int[] backwardsCalls = {1, 2, 3};
    newAttributeBands.setBackwardsCalls(backwardsCalls);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls_Xkfr0() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = {1, 2, 3, 4};
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithEmptyBackwardsCalls_CxXU1() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = {};
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithNullBackwardsCalls_ZZHZ2() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = null;
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCallsWithNegativeBackwardsCalls_ebbL3() throws IOException {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = {-1, -2, -3, -4};
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls_kzZh0() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[1];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls2_iRNe1() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[2];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls3_eFLW2() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[3];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetBackwardsCalls4_OvVO3() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int[] backwardsCalls = new int[4];
        newAttributeBands.setBackwardsCalls(backwardsCalls);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCodec1_aYbl0() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(null, null);
        BHSDCodec actualResult = newAttributeBands.getCodec("OS");
        BHSDCodec expectedResult = Codec.BRANCH5;
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCodec2_DCht1() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(null, null);
        BHSDCodec actualResult = newAttributeBands.getCodec("PS");
        BHSDCodec expectedResult = Codec.BCI5;
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCodec3_fpGX2() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(null, null);
        BHSDCodec actualResult = newAttributeBands.getCodec("SS");
        BHSDCodec expectedResult = Codec.SIGNED5;
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCodec4_DWAm3() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(null, null);
        BHSDCodec actualResult = newAttributeBands.getCodec("BS");
        BHSDCodec expectedResult = Codec.BYTE1;
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCodec5_ZIFr4() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(null, null);
        BHSDCodec actualResult = newAttributeBands.getCodec("IS");
        BHSDCodec expectedResult = Codec.UNSIGNED5;
        assertEquals(expectedResult, actualResult);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnpack_sAIS0() throws IOException, Pack200Exception {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        newAttributeBands.unpack();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_ZWsK0() throws IOException, Pack200Exception {
        Segment segment = new Segment();
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        NewAttributeBands newAttributeBands = new NewAttributeBands(segment, attributeLayout);
        InputStream in = mock(InputStream.class);
        newAttributeBands.read(in);
        verify(in, times(1)).read();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBackwardsCallCount_OZnL0() throws Exception {
        NewAttributeBands newAttributeBands = new NewAttributeBands(new Segment(), new AttributeLayout("name", 0, "layout", 0));
        int result = newAttributeBands.getBackwardsCallCount();
        assertEquals(0, result);
    }
}