/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.examples;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.Path;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.utils.InputStreamStatistics;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Expander_Test_Passing {
@Mock
    SevenZFile sevenZFile;
@Mock
    SevenZArchiveEntry entry;
@Mock
    Path targetDirectory;
@Mock
    InputStreamStatistics statistics;
@Mock
    SeekableByteChannel channel;
Expander expander;
@Mock
	private File archive;
@Mock
    private InputStream inputStream;
@Mock
    private CloseableConsumer closeableConsumer;
    private boolean prefersSeekableByteChannel(final String format) {
        return ArchiveStreamFactory.TAR.equalsIgnoreCase(format) || ArchiveStreamFactory.ZIP.equalsIgnoreCase(format) || ArchiveStreamFactory.SEVEN_Z.equalsIgnoreCase(format);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_RglY0() throws Exception {
        byte[] signature = new byte[6];
        signature[0] = '7';
        signature[1] = 'z';
        signature[2] = (byte) 0xBC;
        signature[3] = (byte) 0xAF;
        signature[4] = (byte) 0x27;
        signature[5] = (byte) 0x1C;
        assertTrue(SevenZFile.matches(signature, 6));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_DsXZ1() throws Exception {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        assertNotNull(sevenZFile.toString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStream_cpCV2() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        SevenZArchiveEntry entry = sevenZFile.getNextEntry();
        assertNotNull(sevenZFile.getInputStream(entry));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead_IPAV3() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        byte[] b = new byte[10];
        assertEquals(10, sevenZFile.read(b));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead2_LsjB4() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        byte[] b = new byte[10];
        assertEquals(10, sevenZFile.read(b, 0, 10));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNextEntry_LEFr5() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        assertNotNull(sevenZFile.getNextEntry());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetStatisticsForCurrentEntry_GydM6() throws Exception {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        assertNotNull(sevenZFile.getStatisticsForCurrentEntry());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead3_Sjbk7() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        assertEquals(-1, sevenZFile.read());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuilder_BCHn8() throws Exception {
        assertNotNull(SevenZFile.builder());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetEntries_dRyG9() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        assertNotNull(sevenZFile.getEntries());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClose_HRke10() throws IOException {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        sevenZFile.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDefaultName_lOmJ11() throws Exception {
        SevenZFile sevenZFile = new SevenZFile(new File("test.7z"), "password".toCharArray());
        assertNotNull(sevenZFile.getDefaultName());
    }
}