/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import javax.crypto.spec.SecretKeySpec;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AES256Options_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpec_gyvv0_1() {
    byte[] bytes = new byte[16]; // Generate random bytes for testing
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertNotNull(secretKeySpec);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpec_gyvv0_2() {
    byte[] bytes = new byte[16]; // Generate random bytes for testing
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertEquals("AES", secretKeySpec.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpec_gyvv0_3() {
    byte[] bytes = new byte[16]; // Generate random bytes for testing
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertArrayEquals(bytes, secretKeySpec.getEncoded());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithNullBytes_mCPy1_1() {
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(null);
    assertNotNull(secretKeySpec);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithNullBytes_mCPy1_2() {
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(null);
    assertEquals("AES", secretKeySpec.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithNullBytes_mCPy1_3() {
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(null);
    assertArrayEquals(new byte[0], secretKeySpec.getEncoded());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithEmptyBytes_pAgi2_1() {
    byte[] bytes = new byte[0];
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertNotNull(secretKeySpec);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithEmptyBytes_pAgi2_2() {
    byte[] bytes = new byte[0];
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertEquals("AES", secretKeySpec.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithEmptyBytes_pAgi2_3() {
    byte[] bytes = new byte[0];
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertArrayEquals(bytes, secretKeySpec.getEncoded());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithNegativeLengthBytes_HJNI3_1() {
    byte[] bytes = new byte[-1];
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertNotNull(secretKeySpec);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithNegativeLengthBytes_HJNI3_2() {
    byte[] bytes = new byte[-1];
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertEquals("AES", secretKeySpec.getAlgorithm());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithNegativeLengthBytes_HJNI3_3() {
    byte[] bytes = new byte[-1];
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertArrayEquals(new byte[0], secretKeySpec.getEncoded());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpec_gyvv0() {
    byte[] bytes = new byte[16]; // Generate random bytes for testing
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertNotNull(secretKeySpec);
    assertEquals("AES", secretKeySpec.getAlgorithm());
    assertArrayEquals(bytes, secretKeySpec.getEncoded());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithNullBytes_mCPy1() {
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(null);
    assertNotNull(secretKeySpec);
    assertEquals("AES", secretKeySpec.getAlgorithm());
    assertArrayEquals(new byte[0], secretKeySpec.getEncoded());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithEmptyBytes_pAgi2() {
    byte[] bytes = new byte[0];
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertNotNull(secretKeySpec);
    assertEquals("AES", secretKeySpec.getAlgorithm());
    assertArrayEquals(bytes, secretKeySpec.getEncoded());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithNegativeLengthBytes_HJNI3() {
    byte[] bytes = new byte[-1];
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertNotNull(secretKeySpec);
    assertEquals("AES", secretKeySpec.getAlgorithm());
    assertArrayEquals(new byte[0], secretKeySpec.getEncoded());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testNewSecretKeySpecWithLargeLengthBytes_qCOf5() {
    byte[] bytes = new byte[1024];
    SecretKeySpec secretKeySpec = AES256Options.newSecretKeySpec(bytes);
    assertNotNull(secretKeySpec);
    assertEquals("AES", secretKeySpec.getAlgorithm());
    assertArrayEquals(bytes, secretKeySpec.getEncoded());
}
}