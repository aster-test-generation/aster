/**
 * Generated by Aster
 */
package org.apache.commons.compress.compressors.pack200;
import java.io.File;
import java.io.IOException;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Pack200CompressorInputStream_Test_Passing {
    private Pack200CompressorInputStream pack200CompressorInputStream;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMark_IGDe1() {
        pack200CompressorInputStream.mark(1024);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead1_odOx1() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""));
        byte[] b = new byte[10];
        int result = pack200CompressorInputStream.read(b);
        assertEquals(10, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead3_wbzn3() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""), Pack200Strategy.IN_MEMORY, null);
        byte[] b = new byte[10];
        int result = pack200CompressorInputStream.read(b);
        assertEquals(10, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead6_GcXY6() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""), Pack200Strategy.IN_MEMORY);
        byte[] b = new byte[10];
        int result = pack200CompressorInputStream.read(b);
        assertEquals(10, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead2_PBqt1() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""));
        int actual = pack200CompressorInputStream.read();
        assertEquals(0, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead4_Tkjp3() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""), Pack200Strategy.IN_MEMORY, null);
        int actual = pack200CompressorInputStream.read();
        assertEquals(0, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRead7_Sckb6() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File(""), Pack200Strategy.IN_MEMORY);
        int actual = pack200CompressorInputStream.read();
        assertEquals(0, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFileAndMap_tOBm1() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), new HashMap<>());
        pack200CompressorInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFileAndStrategyAndMap_xtia2() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY, new HashMap<>());
        pack200CompressorInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFileAndStrategy_UHxH5() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"), Pack200Strategy.IN_MEMORY);
        pack200CompressorInputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseWithFile_ghCD6() throws IOException {
        Pack200CompressorInputStream pack200CompressorInputStream = new Pack200CompressorInputStream(new File("test.txt"));
        pack200CompressorInputStream.close();
    }
}