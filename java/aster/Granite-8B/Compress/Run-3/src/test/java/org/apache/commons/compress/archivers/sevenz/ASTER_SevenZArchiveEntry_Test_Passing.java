/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.sevenz;
import java.nio.file.attribute.FileTime;
import java.util.Collections;
import java.util.Date;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SevenZArchiveEntry_Test_Passing {
private Iterable<? extends SevenZMethodConfiguration> contentMethods;
private SevenZArchiveEntry sevenzarchiveentry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentMethodsWithIterableOfSevenZMethodConfiguration_ZDKk0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<SevenZMethodConfiguration> methods = null;
        entry.setContentMethods(methods);
        assertNull(entry.getContentMethods());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentMethodsWithIterableOfSevenZMethodConfiguration_DzFx1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<SevenZMethodConfiguration> methods = new ArrayList<>();
        entry.setContentMethods(methods);
        assertEquals(Collections.emptyList(), entry.getContentMethods());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContentMethods_yCii0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Iterable<? extends SevenZMethodConfiguration> methods = entry.getContentMethods();
        assertNotNull(methods);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_MQSt0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedDate(1234567890L);
        assertEquals(1234567890L, entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCrc_Nqst0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCreationDate_HwgB0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasCreationDateWithFalse_Iepf1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCreationDate(false);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCrcValue_zcLq0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long crcValue = entry.getCrcValue();
        assertEquals(0, crcValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_bchU0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName("test.txt");
        assertEquals("test.txt", entry.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCreationDate_zLsF0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = entry.getCreationDate();
        assertNotNull(creationDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToJavaTime_CmaJ0() {
        long ntfsTime = 1234567890L; // Replace with actual value
        Date expectedDate = FileTimes.ntfsTimeToDate(ntfsTime);
        Date actualDate = SevenZArchiveEntry.ntfsTimeToJavaTime(ntfsTime);
        assertEquals(expectedDate, actualDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasLastModifiedDate_vERE0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasLastModifiedDate(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHasLastModifiedDate_VPjj0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean hasLastModifiedDate = entry.getHasLastModifiedDate();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedDate_QslL0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date lastModifiedDate = entry.getLastModifiedDate();
        assertNotNull(lastModifiedDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItem_OHTh0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(true);
        assertTrue(entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAntiItemFalse_QSPp1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAntiItem(false);
        assertFalse(entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_fyid0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = new Date();
        entry.setCreationDate(creationDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateWithNullDate_sSiF1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCreationDate(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateWithNegativeDate_BVSZ2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = new Date(-1);
        entry.setCreationDate(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateWithZeroDate_VHTz3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = new Date(0);
        entry.setCreationDate(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateWithPositiveDate_Skiw4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = new Date(1);
        entry.setCreationDate(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateWithFutureDate_GXqQ5() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = new Date(Long.MAX_VALUE);
        entry.setCreationDate(creationDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDateWithPastDate_CURb6() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date creationDate = new Date(Long.MIN_VALUE);
        entry.setCreationDate(creationDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasStream_aMug0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.hasStream();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLastModifiedTime_QFEJ0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        FileTime lastModifiedTime = entry.getLastModifiedTime();
        assertNotNull(lastModifiedTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_cdFe3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(1024);
        assertEquals(1024, entry.getSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSize_nHmA4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(512);
        assertEquals(512, entry.getCompressedSize());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetHasStream_CcUC7() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasStream(true);
        assertTrue(entry.hasStream());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_EQGb9() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setLastModifiedDate(System.currentTimeMillis());
        assertNotNull(entry.getLastModifiedDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSize_GcTT0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(100L);
        assertEquals(100L, entry.getCompressedSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSizeZero_ETOG1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(0L);
        assertEquals(0L, entry.getCompressedSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSizeNegative_DkOd2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(-100L);
        assertEquals(-100L, entry.getCompressedSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSizeMax_NCSP3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(Long.MAX_VALUE);
        assertEquals(Long.MAX_VALUE, entry.getCompressedSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedSizeMin_DkKO4() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedSize(Long.MIN_VALUE);
        assertEquals(Long.MIN_VALUE, entry.getCompressedSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSize_aGNx0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setSize(100L);
        assertEquals(100L, entry.getSize());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_maGm0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        String name = "example.txt";
        entry.setName(name);
        int expectedHashCode = name.hashCode();
        int actualHashCode = entry.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithNullName_iMaA1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setName(null);
        int expectedHashCode = 0;
        int actualHashCode = entry.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJavaTimeToNtfsTime_XVaR0() {
        Date date = new Date();
        long ntfsTime = SevenZArchiveEntry.javaTimeToNtfsTime(date);
        long expectedNtfsTime = FileTimes.toNtfsTime(date);
        assertEquals(expectedNtfsTime, ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDate_NJMe0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date accessDate = new Date();
        entry.setAccessDate(accessDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDateWithNull_jxtu1() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAccessDate(null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDateWithFutureDate_rxcp2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date futureDate = new Date(System.currentTimeMillis() + 86400000);
        entry.setAccessDate(futureDate);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDateWithPastDate_dfiX3() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date pastDate = new Date(System.currentTimeMillis() - 86400000);
        entry.setAccessDate(pastDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHasCreationDate_tROK0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        boolean hasCreationDate = entry.getHasCreationDate();
        assertFalse(hasCreationDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLastModifiedDate_sSbP0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date lastModifiedDate = new Date();
        entry.setLastModifiedDate(lastModifiedDate);
        FileTime expectedFileTime = FileTimes.toFileTime(lastModifiedDate);
        FileTime actualFileTime = entry.getLastModifiedTime();
        assert expectedFileTime.equals(actualFileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAntiItemDefault_dezS2() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        assertFalse(entry.isAntiItem());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetHasCrc_lOHv0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setHasCrc(true);
        boolean hasCrc = entry.getHasCrc();
        assert hasCrc;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAccessDate_vmau0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        Date accessDate = entry.getAccessDate();
        assertNotNull(accessDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCrc_MRPP0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCrc(12345); // Use the correct method for the parameter
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetContentMethods() throws Exception {
        sevenzarchiveentry = new SevenZArchiveEntry();
        contentMethods = mock(Iterable.class);
        sevenzarchiveentry.setContentMethods(contentMethods);
        verify(sevenzarchiveentry).setContentMethods(contentMethods);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompressedCrcValue_mKkF0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        long compressedCrcValue = entry.getCompressedCrcValue();
        assertEquals(0, compressedCrcValue);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWindowsAttributes_TxXH0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int windowsAttributes = entry.getWindowsAttributes();
        assertEquals(0, windowsAttributes);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWindowsAttributes_oYmD0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setWindowsAttributes(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetAccessDate_TotD0_PBAv0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setAccessDate(1234567890L);
        assertEquals(1234567890L, entry.getAccessDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithRandomValue_hoAc4_ztbG0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int randomValue = (int) (Math.random() * Integer.MAX_VALUE);
        entry.setCompressedCrc(randomValue);
        assertEquals(randomValue, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithMaxValuePlusOne_JJRd8_ccyw0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MAX_VALUE + 1);
        assertEquals(Integer.MAX_VALUE + 1, entry.getCompressedCrc());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithMinValueMinusOne_MKsj9_Vixd0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrc(Integer.MIN_VALUE - 1);
        assertEquals(Integer.MIN_VALUE - 1, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcWithRandomValuePlusOne_iVBY10_ekXj0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        int randomValue = (int) (Math.random() * Integer.MAX_VALUE) + 1;
        entry.setCompressedCrc(randomValue);
        assertEquals(randomValue, entry.getCompressedCrc());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCompressedCrcValue_lKDB0_KWHS0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCompressedCrcValue(1234567890L);
        assertEquals(1234567890L, entry.getCompressedCrcValue());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetCreationDate_BHuM0_cSbE0() {
        SevenZArchiveEntry entry = new SevenZArchiveEntry();
        entry.setCreationDate(1234567890L);
        assertEquals(1234567890L, entry.getCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetHasWindowsAttributes_Cmon0() {
		SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();
		boolean hasWindowsAttributes = sevenZArchiveEntry.getHasWindowsAttributes();
		Assertions.assertTrue(hasWindowsAttributes);
	}
}