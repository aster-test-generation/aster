/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.util.Collection;
import java.util.Iterator;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_Iterators_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyCollection_VAIU1_1() {
        Collection<Integer> collection = new ArrayList<>();
        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();
        boolean wasModified = Iterators.addAll(collection, iterator);
        assertTrue(wasModified);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyCollection_VAIU1_2() {
        Collection<Integer> collection = new ArrayList<>();
        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();
        boolean wasModified = Iterators.addAll(collection, iterator);
        assertEquals(Arrays.asList(1, 2, 3), collection);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddAllWithNonEmptyCollection_VAIU1() {
        Collection<Integer> collection = new ArrayList<>();
        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();
        boolean wasModified = Iterators.addAll(collection, iterator);
        assertTrue(wasModified);
        assertEquals(Arrays.asList(1, 2, 3), collection);
    }
}