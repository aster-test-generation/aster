/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.channels.SeekableByteChannel;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.List;
import java.util.zip.Deflater;
import java.util.zip.ZipException;
import static org.junit.jupiter.api.Assertions.*;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ZipArchiveOutputStream_Test_Passing {
@Mock
    private StreamCompressor streamCompressor;
@Mock
    private OutputStream outputStream;
private ZipArchiveOutputStream ziparchiveoutputstream;
ZipArchiveEntry archiveEntry;
private long dataStart;
private long bytesRead;
private ZipArchiveOutputStream zipArchiveOutputStream;
@Mock
    private ZipArchiveEntry zipArchiveEntry;
@Mock
	ZipArchiveEntry ze;
private InputStream rawStream;
    private long cdLength;
    private final List<ZipArchiveEntry> entries = new LinkedList<>();
    private long eocdLength;
    private String comment = "";
    private long cdOffset;
    private long cdDiskNumberStart;
    private boolean hasZip64Extra(final ZipArchiveEntry ze) {
        return ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID) instanceof Zip64ExtendedInformationExtraField;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish() throws Exception {
        ziparchiveoutputstream = new ZipArchiveOutputStream(outputStream);
        when(streamCompressor.getTotalBytesWritten()).thenReturn(100L);
        ziparchiveoutputstream.finish();
        verify(streamCompressor).close();
        verify(outputStream).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish_rkYC0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.finish();
        assertTrue(zipArchiveOutputStream.finished);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithSeekableByteChannel_WcTh2() throws IOException {
        SeekableByteChannel seekableByteChannel = null;
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(seekableByteChannel);
        zipArchiveOutputStream.finish();
        assertTrue(zipArchiveOutputStream.finished);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithFileAndLong_FaCi3() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1000L);
        zipArchiveOutputStream.finish();
        assertTrue(zipArchiveOutputStream.finished);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithOutputStream_obOv5() throws IOException {
        OutputStream outputStream = null;
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(outputStream);
        zipArchiveOutputStream.finish();
        assertTrue(zipArchiveOutputStream.finished);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinish3_siua2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.finish();
        zipArchiveOutputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void finish_pUcf2() throws IOException {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
void testFinish_IyWp0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.finish();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
void testFinishWithEntries_VLFY1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.putArchiveEntry(new ZipArchiveEntry("test"));
    zos.write("test".getBytes());
    zos.closeArchiveEntry();
    zos.finish();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
void testFinishTwice_hWdA2() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.finish();
    zos.finish();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
void testFinishAfterClose_YsCu3() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    zos.close();
    zos.finish();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinish_ozHe0() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.finish();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFinishWithComment_EkKv1() throws IOException {
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("test.zip"));
    zos.setComment("This is a test comment");
    zos.finish();
    zos.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithSeekableByteChannel_tgYj1() throws IOException {
        SeekableByteChannel seekableByteChannel = mock(SeekableByteChannel.class);
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(seekableByteChannel);
        zipArchiveOutputStream.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithFileAndLong_VYRC2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 100L);
        zipArchiveOutputStream.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithOutputStream_lvCc4() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(mock(OutputStream.class));
        zipArchiveOutputStream.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFinishWithFile_GCiX5() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"));
        zipArchiveOutputStream.finish();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroy1_ypdz0() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream((Path) null, 0L);
    zipArchiveOutputStream.destroy();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroy2_TlaO1() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream((SeekableByteChannel) null);
    zipArchiveOutputStream.destroy();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroy3_UHHq2() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream((File) null, 0L);
    zipArchiveOutputStream.destroy();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroy4_eHys3() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream((Path) null, (OpenOption[]) null);
    zipArchiveOutputStream.destroy();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroy5_yWYL4() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream((OutputStream) null);
    zipArchiveOutputStream.destroy();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDestroy6_BuTh5() throws IOException {
    ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream((File) null);
    zipArchiveOutputStream.destroy();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPutArchiveEntry_iIhy0() throws IOException {
    ZipArchiveEntry entry = new ZipArchiveEntry("name");
    ZipArchiveOutputStream out = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    out.putArchiveEntry(entry);
    out.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCloseArchiveEntry_fogx0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.closeArchiveEntry();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntry_rPDy0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithPathAndLong_WOsM1() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip").toPath(), 1024L);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithSeekableByteChannel_xoXf2() throws IOException {
        SeekableByteChannel seekableByteChannel = null;
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(seekableByteChannel);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithFileAndLong_bIEn3() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024L);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithPathAndOpenOptionArray_OBQg4() throws IOException {
        Path path = null;
        OpenOption[] options = null;
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(path, options);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntryWithOutputStream_xQtd5() throws IOException {
        OutputStream outputStream = null;
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(outputStream);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseArchiveEntry_rhWk0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
        zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
        zipArchiveOutputStream.write("Hello, World!".getBytes());
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.close();
        assertTrue(true); // Placeholder for actual test assertion
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetUseLanguageEncodingFlagWithPathAndOpenOptionArray_KSzi3() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(null, (OpenOption[]) null);
        zipArchiveOutputStream.setUseLanguageEncodingFlag(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlushWithPathAndOpenOptionArray_CmpV3() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(null, (OpenOption[]) null);
        zipArchiveOutputStream.flush();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testWriteDataDescriptor_wxJy0() {
    ZipArchiveEntry ze = new ZipArchiveEntry("name");
    ze.setMethod(ZipArchiveEntry.DEFLATED);
    ze.setSize(100);
    ze.setCompressedSize(50);
    ze.setCrc(123456789L);
    ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new ByteArrayOutputStream());
    try {
        zos.writeDataDescriptor(ze);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBytesWritten_itBA0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        long bytesWritten = zipArchiveOutputStream.getBytesWritten();
        assertEquals(0, bytesWritten);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteByteArrayOffsetInt3_jCfB2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"), 1L);
        byte[] b = new byte[10];
        int offset = 0;
        int length = 10;
        zipArchiveOutputStream.write(b, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteByteArrayOffsetInt5_diZT4() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("path"));
        byte[] b = new byte[10];
        int offset = 0;
        int length = 10;
        zipArchiveOutputStream.write(b, offset, length);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDeflateWithNullPath_HfVD1_1() {
        IOException exception =
            assertThrows(IOException.class, () -> new ZipArchiveOutputStream((Path) null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDeflateWithNullOutputStream_HrSS2_1() {
        IOException exception =
            assertThrows(IOException.class, () -> new ZipArchiveOutputStream((OutputStream) null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDeflateWithNullChannel_NZev3_1() {
        IOException exception =
            assertThrows(IOException.class, () -> new ZipArchiveOutputStream((SeekableByteChannel) null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDeflateWithNullFile_uDfX4_1() {
        IOException exception =
            assertThrows(IOException.class, () -> new ZipArchiveOutputStream((File) null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteCentralFileHeader_jUbe0() throws IOException {
        ZipArchiveEntry ze = new ZipArchiveEntry("name");
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("file"));
        zos.writeCentralFileHeader(ze);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteCentralFileHeaderWithNullEntry_dXlB1_1() throws IOException {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("file"));
        IOException e = assertThrows(IOException.class, () -> zos.writeCentralFileHeader(null));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZipArchiveEntryWithZipArchiveEntry_QgzH0() throws ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new ZipArchiveEntry());
        assertEquals(0, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZipArchiveEntryWithJavaUtilZipZipEntry_VZJL2() throws ZipException {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new java.util.zip.ZipEntry(""));
        assertEquals(0, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZipArchiveEntryWithString_lGYa3() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("");
        assertEquals(0, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testZipArchiveEntryWithFileString_rYre4() {
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(new File(""), "");
        assertEquals(0, zipArchiveEntry.getVersionRequired());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteZip64CentralDirectory3_OaSu2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 100L);
        zipArchiveOutputStream.writeZip64CentralDirectory();
        zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteZip64CentralDirectory6_XHjM6() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.writeZip64CentralDirectory();
        zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLevelWithFileAndLong_DlUo2() throws IOException {
        File file = File.createTempFile("test", ".zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file, 1024L);
        zipArchiveOutputStream.setLevel(Deflater.DEFAULT_COMPRESSION);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLevelWithOutputStream_ipDK4() {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(System.out);
        zipArchiveOutputStream.setLevel(Deflater.DEFAULT_COMPRESSION);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLevelWithFile_DiSl5() throws IOException {
        File file = File.createTempFile("test", ".zip");
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(file);
        zipArchiveOutputStream.setLevel(Deflater.DEFAULT_COMPRESSION);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteCentralDirectoryEnd_DSJC0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.writeCentralDirectoryEnd();
        zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteCentralDirectoryEndWithSplitZip_YKUa1() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
        zipArchiveOutputStream.writeCentralDirectoryEnd();
        zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteCentralDirectoryEndWithZip64ModeAlways_ZgvS2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.setUseZip64(Zip64Mode.Always);
        zipArchiveOutputStream.writeCentralDirectoryEnd();
        zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteCentralDirectoryEndWithZip64ModeNever_oaoT4() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"));
        zipArchiveOutputStream.setUseZip64(Zip64Mode.Never);
        zipArchiveOutputStream.writeCentralDirectoryEnd();
        zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteCentralDirectoryEndWithSplitZipAndZip64ModeAlways_eHDL5() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
        zipArchiveOutputStream.setUseZip64(Zip64Mode.Always);
        zipArchiveOutputStream.writeCentralDirectoryEnd();
        zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteCentralDirectoryEndWithSplitZipAndZip64ModeNever_zxTj7() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("test.zip"), 1024);
        zipArchiveOutputStream.setUseZip64(Zip64Mode.Never);
        zipArchiveOutputStream.writeCentralDirectoryEnd();
        zipArchiveOutputStream.close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithNullPreamble_wVTI1_1() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(mock(Path.class), 0);
        IOException exception = assertThrows(IOException.class, () -> zipArchiveOutputStream.writePreamble(null, 0, 0));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithNegativeOffset_sjEk2_1() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(mock(Path.class), 0);
        IOException exception = assertThrows(IOException.class, () -> zipArchiveOutputStream.writePreamble(new byte[10], -1, 10));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithNegativeLength_HTuc3_1() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(mock(Path.class), 0);
        IOException exception = assertThrows(IOException.class, () -> zipArchiveOutputStream.writePreamble(new byte[10], 0, -1));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithOffsetGreaterThanPreambleLength_jfNv4_1() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(mock(Path.class), 0);
        IOException exception = assertThrows(IOException.class, () -> zipArchiveOutputStream.writePreamble(new byte[10], 10, 10));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getEncoding_3_okKP2_cWwS0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("file"), 1L);
        String encoding = zipArchiveOutputStream.getEncoding();
        assertEquals("UTF-8", encoding);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPutArchiveEntry_DjHn0() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(new File("output.zip"));
        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry("test.txt");
        zipArchiveOutputStream.putArchiveEntry(zipArchiveEntry);
        zipArchiveOutputStream.closeArchiveEntry();
        zipArchiveOutputStream.close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDeflateWithNullPath_HfVD1() {
        IOException exception =
            assertThrows(IOException.class, () -> new ZipArchiveOutputStream((Path) null));
        assertTrue(exception.getMessage().contains("path"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDeflateWithNullOutputStream_HrSS2() {
        IOException exception =
            assertThrows(IOException.class, () -> new ZipArchiveOutputStream((OutputStream) null));
        assertTrue(exception.getMessage().contains("output stream"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDeflateWithNullChannel_NZev3() {
        IOException exception =
            assertThrows(IOException.class, () -> new ZipArchiveOutputStream((SeekableByteChannel) null));
        assertTrue(exception.getMessage().contains("channel"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testDeflateWithNullFile_uDfX4() {
        IOException exception =
            assertThrows(IOException.class, () -> new ZipArchiveOutputStream((File) null));
        assertTrue(exception.getMessage().contains("file"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteCentralFileHeaderWithNullEntry_dXlB1() throws IOException {
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(new File("file"));
        IOException e = assertThrows(IOException.class, () -> zos.writeCentralFileHeader(null));
        assertEquals("entry must not be null", e.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithNullPreamble_wVTI1() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(mock(Path.class), 0);
        IOException exception = assertThrows(IOException.class, () -> zipArchiveOutputStream.writePreamble(null, 0, 0));
        assertEquals("preamble must not be null", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithNegativeOffset_sjEk2() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(mock(Path.class), 0);
        IOException exception = assertThrows(IOException.class, () -> zipArchiveOutputStream.writePreamble(new byte[10], -1, 10));
        assertEquals("offset must not be negative", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithNegativeLength_HTuc3() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(mock(Path.class), 0);
        IOException exception = assertThrows(IOException.class, () -> zipArchiveOutputStream.writePreamble(new byte[10], 0, -1));
        assertEquals("length must not be negative", exception.getMessage());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWritePreambleWithOffsetGreaterThanPreambleLength_jfNv4() throws IOException {
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(mock(Path.class), 0);
        IOException exception = assertThrows(IOException.class, () -> zipArchiveOutputStream.writePreamble(new byte[10], 10, 10));
        assertEquals("offset + length must not be greater than preamble.length", exception.getMessage());
    }
}