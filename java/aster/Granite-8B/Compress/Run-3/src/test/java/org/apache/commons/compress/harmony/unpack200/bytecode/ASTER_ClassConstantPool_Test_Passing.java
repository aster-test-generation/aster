/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200.bytecode;
import java.util.List;
import org.apache.commons.compress.harmony.unpack200.Segment;
import static org.junit.jupiter.api.Assertions.*;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ClassConstantPool_Test_Passing {
    private ClassConstantPool classConstantPool;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testIndexOfWithNullEntry_ivFx0() throws Exception {
    ClassConstantPool classConstantPool = new ClassConstantPool();
    int actual = classConstantPool.indexOf(null);
    assertEquals(-1, actual);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_xCHd0() throws Exception {
        classConstantPool = new ClassConstantPool();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEntries_vXkL1_1() throws Exception {
        List<ClassFileEntry> entries = classConstantPool.entries();
        assertNotNull(entries);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEntries_vXkL1_2() throws Exception {
        List<ClassFileEntry> entries = classConstantPool.entries();
        assertTrue(entries.isEmpty());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testResolve_NExj0() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        Segment segment = new Segment();
        classConstantPool.resolve(segment);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet_fxBR2() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotNull(classFileEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet2_YmEZ3() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotEquals(null, classFileEntry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet3_VNyf4() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertEquals(classFileEntry.getClass(), ClassFileEntry.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet4_AEvi5() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotEquals(classFileEntry.getClass(), Object.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet5_fSWS6() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotEquals(classFileEntry.getClass(), String.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet6_pcrB7() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotEquals(classFileEntry.getClass(), Integer.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet7_exdW8() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotEquals(classFileEntry.getClass(), Double.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet8_PaQb9() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotEquals(classFileEntry.getClass(), Float.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet9_Czpm10() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotEquals(classFileEntry.getClass(), Long.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet10_LolP11() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotEquals(classFileEntry.getClass(), Short.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet11_OAQH12() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotEquals(classFileEntry.getClass(), Byte.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet12_josc13() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotEquals(classFileEntry.getClass(), Boolean.class);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGet13_Ugex14() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int i = 1;
        ClassFileEntry classFileEntry = classConstantPool.get(i);
        assertNotEquals(classFileEntry.getClass(), Character.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testAddNestedEntries_bjqR0() throws Exception {
		ClassConstantPool classConstantPool = new ClassConstantPool();
		classConstantPool.addNestedEntries();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSize_XSDY0() throws Exception {
        ClassConstantPool classConstantPool = new ClassConstantPool();
        int size = classConstantPool.size();
        assertEquals(0, size);
    }
}