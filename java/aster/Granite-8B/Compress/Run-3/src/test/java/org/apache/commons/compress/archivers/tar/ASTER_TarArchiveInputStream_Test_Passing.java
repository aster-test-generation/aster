/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.tar;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TarArchiveInputStream_Test_Passing {
private TarArchiveEntry currEntry;
TarArchiveInputStream tararchiveinputstream;
    private static void generateNextTarEntryTestCases_FVDF2() {
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_xJkZ0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, "");
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_NHKS1() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_WjdF2() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0);
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_lLgk3() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, "", false);
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_EVlD4() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0);
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_ZGoi5() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, false);
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_byLF6() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, "");
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_LtCt7() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, "");
        byte[] longNameData = tarArchiveInputStream.getLongNameData();
        assertNull(longNameData);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMarkSupported_sCSs0() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        assertFalse(tarArchiveInputStream.markSupported());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOF_hYgN0() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOF2_ILGJ1() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOF3_ZCfE2() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, null, false);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOF4_OdUx3() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOF5_SUEP4() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, false);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOF6_FnUx5() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, 0, 0, null);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtEOF7_obux6() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null, null);
        boolean result = tarArchiveInputStream.isAtEOF();
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithFileInputStream_bnIQ1() throws IOException {
        InputStream inputStream = new FileInputStream("file.txt");
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, 1024, "UTF-8");
        long skipped = tarArchiveInputStream.skip(5);
        assertEquals(5, skipped);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip1_uMCC0() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"));
        tarArchiveInputStream.skip(10L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip2_mpIv1() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, "UTF-8");
        tarArchiveInputStream.skip(10L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip3_nBpL2() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024);
        tarArchiveInputStream.skip(10L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip4_cewI3() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, 512, "UTF-8", true);
        tarArchiveInputStream.skip(10L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip5_BAZW4() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, 512);
        tarArchiveInputStream.skip(10L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip6_QKIV5() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), true);
        tarArchiveInputStream.skip(10L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip7_zVlC6() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), 1024, 512, "UTF-8");
        tarArchiveInputStream.skip(10L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkip8_LXtL7() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("input.tar"), "UTF-8");
        tarArchiveInputStream.skip(10L);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadRecord_ZLwH0() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"));
		byte[] record = tarArchiveInputStream.readRecord();
		Assertions.assertNotNull(record);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testReadRecordWithBlockSize_kmtR1() throws IOException {
		TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(new FileInputStream("test.tar"), 1024);
		byte[] record = tarArchiveInputStream.readRecord();
		Assertions.assertNotNull(record);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithInputStream_vfGk0() throws IOException {
    InputStream inputStream = mock(InputStream.class);
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream);
    tarArchiveInputStream.close();
    verify(inputStream).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithInputStreamAndBlockSize_Kqan1() throws IOException {
    InputStream inputStream = mock(InputStream.class);
    int blockSize = 1024;
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize);
    tarArchiveInputStream.close();
    verify(inputStream).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCloseWithInputStreamAndBlockSizeAndRecordSizeAndEncodingAndLenient_xcwR2() throws IOException {
    InputStream inputStream = mock(InputStream.class);
    int blockSize = 1024;
    int recordSize = 512;
    String encoding = "UTF-8";
    boolean lenient = true;
    TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, blockSize, recordSize, encoding, lenient);
    tarArchiveInputStream.close();
    verify(inputStream).close();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMark_vuCF0() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        tarArchiveInputStream.mark(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetModTime_Hhpc0() {
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getNextTarEntry_ceFg2() throws IOException {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();
        assertNull(entry);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_pxAt0() {
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(null);
        tarArchiveInputStream.reset();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSkipWithFileInputStreamAndDirectory_AYaf3_AzxN0() throws IOException {
        InputStream inputStream = new FileInputStream("file.txt");
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(inputStream, 1024, "UTF-8");
        tarArchiveInputStream.getNextEntry();
        long skipped = tarArchiveInputStream.skip(5);
        assertEquals(0, skipped);
    }
}