/**
 * Generated by Aster
 */
package org.apache.commons.compress.utils;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.file.attribute.FileTimes;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TimeUtils_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToUnixTimeWithNullFileTime_xjMM0() {
        FileTime fileTime = null;
        long expected = 0;
        long actual = TimeUtils.toUnixTime(fileTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToUnixTimeWithNonNullFileTime_GMmV1() {
        FileTime fileTime = FileTime.fromMillis(System.currentTimeMillis());
        long expected = fileTime.to(TimeUnit.SECONDS);
        long actual = TimeUtils.toUnixTime(fileTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTime_VbXm0() {
        FileTime time = FileTime.fromMillis(0);
        boolean result = TimeUtils.isUnixTime(time);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeNegativeTime_OVis1() {
        FileTime time = FileTime.fromMillis(-1);
        boolean result = TimeUtils.isUnixTime(time);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTime_VwdL0_1() {
        long seconds = 0;
        boolean expected = true;
        boolean actual = TimeUtils.isUnixTime(seconds);
        seconds = Integer.MAX_VALUE;
        expected = true;
        actual = TimeUtils.isUnixTime(seconds);
        seconds = Integer.MIN_VALUE;
        expected = true;
        actual = TimeUtils.isUnixTime(seconds);
        assertEquals(expected, actual);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_kTwq0() {
        Date date = new Date();
        long ntfsTime = TimeUtils.toNtfsTime(date);
        long expectedNtfsTime = FileTimes.toNtfsTime(date);
        assertEquals(expectedNtfsTime, ntfsTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToFileTime_DLHQ0() {
        Date date = new Date();
        FileTime fileTime = TimeUtils.toFileTime(date);
        assert fileTime != null;
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToFileTime_DgZO0() {
        long ntfsTime = 1234567890L;
        FileTime fileTime = TimeUtils.ntfsTimeToFileTime(ntfsTime);
        assertNotNull(fileTime);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTruncateToHundredNanos_hpoK0() {
        final FileTime fileTime = FileTime.from(Instant.now());
        final FileTime expected = FileTime.from(Instant.ofEpochSecond(fileTime.toInstant().getEpochSecond(), fileTime.toInstant().getNano() / 100 * 100));
        final FileTime actual = TimeUtils.truncateToHundredNanos(fileTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixTimeToFileTime_hayd0_1() {
        long time = 1632448000L; // Example Unix time
        FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
        assertNotNull(fileTime);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixTimeToFileTime_hayd0_2() {
        long time = 1632448000L; // Example Unix time
        FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
        assertEquals(TimeUnit.SECONDS.toMillis(time), fileTime.toMillis());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToNtfsTime_eAJj0() {
        long javaTime = 1633396800000L; // 2021-10-08T00:00:00Z
        long expected = 116444736000000000L; // 2021-10-08T00:00:00Z in NTFS format
        long actual = TimeUtils.toNtfsTime(javaTime);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNtfsTimeToDate_AbYs0() {
        long ntfsTime = 163392000000L;
        Date expectedDate = new Date(ntfsTime);
        Date actualDate = TimeUtils.ntfsTimeToDate(ntfsTime);
        assertEquals(expectedDate, actualDate);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeGreaterThanMaxInt_CybI2_Fqjq0() {
        FileTime time = FileTime.fromMillis(2_147_483_647);
        boolean result = TimeUtils.isUnixTime(time);
        assertFalse(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTimeNotInteger_rTZx3_wQwH0() {
        FileTime time = FileTime.fromMillis(1);
        boolean result = TimeUtils.isUnixTime(time);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsUnixTime_VwdL0() {
        long seconds = 0;
        boolean expected = true;
        boolean actual = TimeUtils.isUnixTime(seconds);
        assertEquals(expected, actual);
        seconds = Integer.MAX_VALUE;
        expected = true;
        actual = TimeUtils.isUnixTime(seconds);
        assertEquals(expected, actual);
        seconds = Integer.MIN_VALUE;
        expected = true;
        actual = TimeUtils.isUnixTime(seconds);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnixTimeToFileTime_hayd0() {
        long time = 1632448000L; // Example Unix time
        FileTime fileTime = TimeUtils.unixTimeToFileTime(time);
        assertNotNull(fileTime);
        assertEquals(TimeUnit.SECONDS.toMillis(time), fileTime.toMillis());
    }
}