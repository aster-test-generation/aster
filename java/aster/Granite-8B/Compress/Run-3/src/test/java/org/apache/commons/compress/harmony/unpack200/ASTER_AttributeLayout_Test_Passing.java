/**
 * Generated by Aster
 */
package org.apache.commons.compress.harmony.unpack200;
import org.apache.commons.compress.harmony.pack200.Codec;
import org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry;
import org.apache.commons.compress.harmony.pack200.BHSDCodec;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.mockito.junit.jupiter.MockitoExtension;   
@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeLayout_Test_Passing {
private String layout;
private AttributeLayout attributelayout;
private SegmentConstantPool pool;
private ClassFileEntry classFileEntry;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatches_GjbR0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        boolean result = attributeLayout.matches(10L);
        assertTrue(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMatchesWithIsDefault_NGdF1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
        boolean result = attributeLayout.matches(10L);
        assertFalse(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLayout_HWEI0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
        assertEquals("layout", attributeLayout.getLayout());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLayoutWithIsDefault_xwFF1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
        assertEquals("layout", attributeLayout.getLayout());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDefaultLayout_nNbz0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
        boolean isDefaultLayout = attributeLayout.isDefaultLayout();
        assertTrue(isDefaultLayout);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumBackwardsCallables1_FHnO0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
        int result = attributeLayout.numBackwardsCallables();
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumBackwardsCallables2_fzUD1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0, true);
        int result = attributeLayout.numBackwardsCallables();
        assertEquals(1, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_mZOn0() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_oSxa1() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_Beyl2() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 2, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_YBFE3() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 3, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_XXgz4() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 4, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_cYtm5() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 5, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_Xcmp6() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 6, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_yJBm7() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 7, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_ysAn8() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 8, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_CFnG9() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 9, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_Atnf10() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 10, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_CdXp11() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 11, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_JwXC12() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 12, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_lZdW13() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 13, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testToString_JQXB14() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 14, "layout", 0);
		assertEquals("Context: name", attributeLayout.toString());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode1_dBqY0() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
		assertEquals(123, attributeLayout.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode2_FIlu1() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
		assertEquals(456, attributeLayout.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testHashCode3_XvgF2() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name2", 2, "layout2", 2);
		assertEquals(789, attributeLayout.hashCode());
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodec1_TNGD0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.BRANCH5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodec2_nBNc1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, true);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.BCI5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodec3_thDm2() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, false);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.UNSIGNED5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodec4_BVMN3() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, false);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.BYTE1, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodec5_jCpg4() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, false);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.SIGNED5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodec6_belu5() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, false);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.BRANCH5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCodec7_wfQw6() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 1, false);
        Codec codec = attributeLayout.getCodec();
        assertEquals(Codec.BCI5, codec);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_VxLC0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
        assertEquals("name", attributeLayout.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithIsDefault_CkRu1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0, true);
        assertEquals("name", attributeLayout.getName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetContext_QnXs0() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2);
		int actualContext = attributeLayout.getContext();
		int expectedContext = 1;
		assertEquals(expectedContext, actualContext);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetContext_uRkl1() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, true);
		int actualContext = attributeLayout.getContext();
		int expectedContext = 1;
		assertEquals(expectedContext, actualContext);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetContext_UKtq2() throws Exception {
		AttributeLayout attributeLayout = new AttributeLayout("name", 1, "layout", 2, false);
		int actualContext = attributeLayout.getContext();
		int expectedContext = 1;
		assertEquals(expectedContext, actualContext);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetIndex_mnXr0() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
        int index = attributeLayout.getIndex();
        assertEquals(0, index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetIndexWithIsDefault_IjiA1() throws Exception {
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0, true);
        int index = attributeLayout.getIndex();
        assertEquals(0, index);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ffOS0() throws Exception {
        CpBands cpBands = new CpBands(new Segment());
        SegmentConstantPool segmentConstantPool = new SegmentConstantPool(cpBands);
        AttributeLayout attributeLayout = new AttributeLayout("name", 0, "layout", 0);
        ClassFileEntry classFileEntry = attributeLayout.getValue(1, segmentConstantPool);
        assertNotNull(classFileEntry);
    }
}