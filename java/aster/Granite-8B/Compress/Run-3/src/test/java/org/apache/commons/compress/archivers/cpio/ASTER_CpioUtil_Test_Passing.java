/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.cpio;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CpioUtil_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void fileTypeTest_speL0() throws Exception {
        long mode = 100L;
        long result = CpioUtil.fileType(mode);
        assertEquals(100L, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray2long_yVOt0_1() throws Exception {
        assertEquals(1234567890L, CpioUtil.byteArray2long(new byte[]{(byte) 0x30, (byte) 0x39}, false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray2long_yVOt0_2() throws Exception {
        assertEquals(1234567890L, CpioUtil.byteArray2long(new byte[]{(byte) 0x39, (byte) 0x30}, true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray2long_yVOt0_3() throws Exception {
        assertEquals(0L, CpioUtil.byteArray2long(new byte[]{(byte) 0x00, (byte) 0x00}, false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray2long_yVOt0_4() throws Exception {
        assertEquals(0L, CpioUtil.byteArray2long(new byte[]{(byte) 0x00, (byte) 0x00}, true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray2long_yVOt0_5() throws Exception {
        assertEquals(4294967295L, CpioUtil.byteArray2long(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, false));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray2long_yVOt0_6() throws Exception {
        assertEquals(4294967295L, CpioUtil.byteArray2long(new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF}, true));}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testByteArray2longWithOddLength_cOGx1() throws Exception {
        try {
            CpioUtil.byteArray2long(new byte[]{(byte) 0x30}, false);
        } catch (UnsupportedOperationException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLong2ByteArray_eMPb0() throws Exception {
        long number = 1234567890L;
        int length = 8;
        boolean swapHalfWord = true;
        byte[] expected = { (byte) 0x90, (byte) 0x76, (byte) 0x54, (byte) 0x32, (byte) 0x10, (byte) 0xF0, (byte) 0xD0, (byte) 0xB0 };
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assert actual != null;
        assert actual.length == expected.length;
        for (int i = 0; i < actual.length; i++) {
            assert actual[i] == expected[i];
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLong2ByteArrayWithNegativeNumber_SaWz1() throws Exception {
        long number = -1234567890L;
        int length = 8;
        boolean swapHalfWord = true;
        byte[] expected = { (byte) 0x70, (byte) 0x89, (byte) 0xAB, (byte) 0xCD, (byte) 0xEF, (byte) 0x12, (byte) 0x34, (byte) 0x56 };
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assert actual != null;
        assert actual.length == expected.length;
        for (int i = 0; i < actual.length; i++) {
            assert actual[i] == expected[i];
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLong2ByteArrayWithZeroNumber_uVQs2() throws Exception {
        long number = 0L;
        int length = 8;
        boolean swapHalfWord = true;
        byte[] expected = { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 };
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assert actual != null;
        assert actual.length == expected.length;
        for (int i = 0; i < actual.length; i++) {
            assert actual[i] == expected[i];
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLong2ByteArrayWithInvalidLength_lWFu3() throws Exception {
        long number = 1234567890L;
        int length = 1;
        boolean swapHalfWord = true;
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> CpioUtil.long2byteArray(number, length, swapHalfWord));
        assert exception.getMessage().equals("Length must be even and greater than 1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLong2ByteArrayWithInvalidSwapHalfWord_TJTw4() throws Exception {
        long number = 1234567890L;
        int length = 8;
        boolean swapHalfWord = false;
        byte[] expected = { (byte) 0x90, (byte) 0x76, (byte) 0x54, (byte) 0x32, (byte) 0x10, (byte) 0xF0, (byte) 0xD0, (byte) 0xB0 };
        byte[] actual = CpioUtil.long2byteArray(number, length, swapHalfWord);
        assert actual != null;
        assert actual.length == expected.length;
        for (int i = 0; i < actual.length; i++) {
            assert actual[i] == expected[i];
        }
    }
}