/**
 * Generated by Aster
 */
package org.apache.commons.compress.archivers.zip;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_GeneralPurposeBit_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetSlidingDictionarySize_fKWW0() throws Exception {
		GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
		int slidingDictionarySize = generalPurposeBit.getSlidingDictionarySize();
		assertEquals(0, slidingDictionarySize);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithSameObject_Lfko0() throws Exception {
		GeneralPurposeBit g = new GeneralPurposeBit();
		assertTrue(g.equals(g));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithNull_mhbM1() throws Exception {
		GeneralPurposeBit g = new GeneralPurposeBit();
		assertFalse(g.equals(null));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testEqualsWithDifferentClass_MgAp2() throws Exception {
		GeneralPurposeBit g = new GeneralPurposeBit();
		assertFalse(g.equals(new Object()));
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testUsesEncryption_zRer0() throws Exception {
		GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
		boolean encryptionFlag = generalPurposeBit.usesEncryption();
		Assertions.assertTrue(encryptionFlag);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_TbqI0_5() throws Exception {
    byte[] data = new byte[4];
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParse_TbqI0_6() throws Exception {
    byte[] data = new byte[4];
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffset_kDAc1_5() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithOffset_kDAc1_6() throws Exception {
    byte[] data = new byte[4];
    int offset = 2;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithAllFlagsSet_jKdg2_5() throws Exception {
    byte[] data = new byte[4];
    data[0] = (byte) 0xFF;
    data[1] = (byte) 0xFF;
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(8192, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithAllFlagsSet_jKdg2_6() throws Exception {
    byte[] data = new byte[4];
    data[0] = (byte) 0xFF;
    data[1] = (byte) 0xFF;
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(3, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithAllFlagsSetAndOffset_vjDr3_5() throws Exception {
    byte[] data = new byte[4];
    data[2] = (byte) 0xFF;
    data[3] = (byte) 0xFF;
    int offset = 2;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(8192, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithAllFlagsSetAndOffset_vjDr3_6() throws Exception {
    byte[] data = new byte[4];
    data[2] = (byte) 0xFF;
    data[3] = (byte) 0xFF;
    int offset = 2;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(3, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithInvalidFlags_uJEa4_5() throws Exception {
    byte[] data = new byte[4];
    data[0] = (byte) 0xFF;
    data[1] = (byte) 0x0F;
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithInvalidFlags_uJEa4_6() throws Exception {
    byte[] data = new byte[4];
    data[0] = (byte) 0xFF;
    data[1] = (byte) 0x0F;
    int offset = 0;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithInvalidFlagsAndOffset_iHcG5_5() throws Exception {
    byte[] data = new byte[4];
    data[2] = (byte) 0xFF;
    data[3] = (byte) 0x0F;
    int offset = 2;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(4096, b.getSlidingDictionarySize());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testParseWithInvalidFlagsAndOffset_iHcG5_6() throws Exception {
    byte[] data = new byte[4];
    data[2] = (byte) 0xFF;
    data[3] = (byte) 0x0F;
    int offset = 2;
    GeneralPurposeBit b = GeneralPurposeBit.parse(data, offset);
    assertEquals(2, b.getNumberOfShannonFanoTrees());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumberOfShannonFanoTrees_HbPg0() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        int numberOfShannonFanoTrees = generalPurposeBit.getNumberOfShannonFanoTrees();
        assertEquals(0, numberOfShannonFanoTrees);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XkNY0_1() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] result = new byte[2];
        generalPurposeBit.encode(result, 0);
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_XkNY0_2() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] result = new byte[2];
        generalPurposeBit.encode(result, 0);
        assertEquals(2, result.length);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNullArray_GxdM1() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] result = null;
    generalPurposeBit.encode(result, 0);
    assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNegativeOffset_BgNt2_1() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] result = new byte[2];
    generalPurposeBit.encode(result, -1);
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithNegativeOffset_BgNt2_2() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] result = new byte[2];
    generalPurposeBit.encode(result, -1);
    assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithOffsetGreaterThanArrayLength_jLzm3_1() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] result = new byte[2];
    generalPurposeBit.encode(result, 3);
    assertEquals(0, result[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testEncodeWithOffsetGreaterThanArrayLength_jLzm3_2() throws Exception {
    GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
    byte[] result = new byte[2];
    generalPurposeBit.encode(result, 3);
    assertEquals(0, result[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_fnyQ0_1() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 0);
        assertEquals(0, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_fnyQ0_2() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 0);
        assertEquals(0, buf[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_fnyQ0_3() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 0);
        assertEquals(0, buf[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncode_fnyQ0_4() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[4];
        generalPurposeBit.encode(buf, 0);
        assertEquals(0, buf[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_gbrk1_1() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[8];
        generalPurposeBit.encode(buf, 4);
        assertEquals(0, buf[0]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_gbrk1_2() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[8];
        generalPurposeBit.encode(buf, 4);
        assertEquals(0, buf[1]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_gbrk1_3() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[8];
        generalPurposeBit.encode(buf, 4);
        assertEquals(0, buf[2]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_gbrk1_4() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[8];
        generalPurposeBit.encode(buf, 4);
        assertEquals(0, buf[3]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_gbrk1_5() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[8];
        generalPurposeBit.encode(buf, 4);
        assertEquals(0, buf[4]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_gbrk1_6() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[8];
        generalPurposeBit.encode(buf, 4);
        assertEquals(0, buf[5]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_gbrk1_7() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[8];
        generalPurposeBit.encode(buf, 4);
        assertEquals(0, buf[6]);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEncodeWithOffset_gbrk1_8() throws Exception {
        GeneralPurposeBit generalPurposeBit = new GeneralPurposeBit();
        byte[] buf = new byte[8];
        generalPurposeBit.encode(buf, 4);
        assertEquals(0, buf[7]);}
}