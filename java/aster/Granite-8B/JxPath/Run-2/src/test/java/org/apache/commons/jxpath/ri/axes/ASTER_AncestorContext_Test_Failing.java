/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AncestorContext_Test_Failing {
    private AncestorContext ancestorContext;
    private NamespaceContext namespaceContext;
    private NodeTypeTest nodeTypeTest;
    private boolean setStarted = false;
    private AncestorContext ancestorcontext;
    private NodePointer currentNodePointer;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    private boolean includeSelf;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition() {
        nodeTypeTest = mock(NodeTypeTest.class);
        namespaceContext = mock(NamespaceContext.class);
        ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        // arrange
        int position = 5;
        // act
        boolean result = ancestorContext.setPosition(position);
        // assert
        verify(ancestorContext, times(1)).getCurrentPosition();
        verify(ancestorContext, times(1)).nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_KnfV0() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, new NodeTypeTest(0));
        ancestorContext.setPosition(1);
        assert ancestorContext.getPosition() == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_AMqS1() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, new NodeTypeTest(0));
        ancestorContext.setPosition(2);
        assert ancestorContext.getPosition() == 2;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_Bxxq2() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, new NodeTypeTest(0));
        ancestorContext.setPosition(3);
        assert ancestorContext.getPosition() == 3;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition4_uQGd3() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, null), null), true, new NodeTypeTest(0));
        ancestorContext.setPosition(4);
        assert ancestorContext.getPosition() == 4;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() {
        ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        // Mock the getDocumentOrder method of the NamespaceContext object
        when(namespaceContext.getDocumentOrder()).thenReturn(-1);
        // Call the getDocumentOrder method of the AncestorContext object
        int documentOrder = ancestorContext.getDocumentOrder();
        // Assert that the returned value is -1
        assertEquals(-1, documentOrder);
        // Verify that the getDocumentOrder method of the NamespaceContext object was called once
        verify(namespaceContext, times(1)).getDocumentOrder();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer() {
        ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        currentNodePointer = mock(NodePointer.class);
        when(ancestorContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        assertEquals(currentNodePointer, ancestorContext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_kgHO0() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), null), true, new NodeTypeTest(2));
        NodePointer currentNodePointer = ancestorContext.getCurrentNodePointer();
        assertNotNull(currentNodePointer);
    }
}