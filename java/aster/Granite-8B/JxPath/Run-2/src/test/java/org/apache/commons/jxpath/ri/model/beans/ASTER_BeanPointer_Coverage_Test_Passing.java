/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;
import java.util.Locale;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_BeanPointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_NTxN0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        assertFalse(beanPointer.isCollection());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenValueIsAtomic_BSAg1() {
        Object value = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(value.getClass(), true);
        BeanPointer beanPointer = new BeanPointer(null, value, beanInfo, null);
        boolean isLeaf = beanPointer.isLeaf();
        assertFalse(isLeaf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenValueIsNotAtomic_uPfQ2() {
        Object value = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(value.getClass(), false);
        BeanPointer beanPointer = new BeanPointer(null, value, beanInfo, null);
        boolean isLeaf = beanPointer.isLeaf();
        assertFalse(isLeaf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_lGiN1() {
        BeanPointer beanPointer = new BeanPointer(null, new Object(), null, null);
        String result = beanPointer.asPath();
        assertEquals("/", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath7_Koix6() {
        BeanPointer beanPointer = new BeanPointer(null, new Boolean(true), null, null);
        String result = beanPointer.asPath();
        assertEquals("true()", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath8_lNeZ7() {
        BeanPointer beanPointer = new BeanPointer(null, new String(), null, null);
        String result = beanPointer.asPath();
        assertEquals("''", result);
}
}