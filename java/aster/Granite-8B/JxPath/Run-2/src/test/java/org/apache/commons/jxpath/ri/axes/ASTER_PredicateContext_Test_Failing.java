/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PredicateContext_Test_Failing {
    private Expression nameTestExpression;
    private PropertyPointer dynamicPropertyPointer;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private Constant constant;
    private boolean done = false;
    private NamespaceContext parentContext;
    private NodeTypeTest nodeTest;
    private Constant expression;
    private PredicateContext predicatecontext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private JXPathContext context;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset() throws Exception {
        parentContext = mock(NamespaceContext.class);
        nodeTest = mock(NodeTypeTest.class);
        expression = mock(Constant.class);
        predicatecontext = new PredicateContext(parentContext, expression);
        predicatecontext.reset();
        verify(parentContext, times(1)).reset();
        verify(predicatecontext, times(1)).reset();
        assertEquals(false, done);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet() {
        predicatecontext = new PredicateContext(parentContext, expression);
        // Mock the behavior of the parentContext's nextSet method
        when(parentContext.nextSet()).thenReturn(true);
        // Call the nextSet method on the predicatecontext object
        boolean result = predicatecontext.nextSet();
        // Verify that the result is true
        assertTrue(result);
        // Verify that the parentContext's nextSet method was called
        verify(parentContext).nextSet();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_Lsam0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(0));
        SelfContext selfContext = new SelfContext(namespaceContext, new NodeTypeTest(0));
        Constant expression = new Constant("test");
        PredicateContext predicateContext = new PredicateContext(selfContext, expression);
        boolean result = predicateContext.nextSet();
        assertTrue(result);
    }
}