/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationOr_Test_Passing {
    @Mock
    private EvalContext context;
    @Mock
    private Expression[] args;
    private CoreOperationOr coreoperationor;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_ElQA0() {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[]{});
        String symbol = coreOperationOr.getSymbol();
        assertEquals("or", symbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_1() throws Exception {
        coreoperationor = new CoreOperationOr(args);
        // Mock the behavior of the computeValue method for the first expression
        when(args[0].computeValue(context)).thenReturn(Boolean.TRUE);
        // Call the computeValue method on the coreoperationor object
        Object result = coreoperationor.computeValue(context);
        // Assert that the result is true
        // Verify that the computeValue method was called for the first expression
        verify(args[0]).computeValue(context);
        // Mock the behavior of the computeValue method for the second expression
        when(args[1].computeValue(context)).thenReturn(Boolean.FALSE);
        // Call the computeValue method on the coreoperationor object again
        result = coreoperationor.computeValue(context);
        // Assert that the result is true
        // Verify that the computeValue method was called for the second expression
        verify(args[1]).computeValue(context);
        assertEquals(Boolean.TRUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_TbrQ0() {
        CoreOperationOr coreOperationOr = new CoreOperationOr(new Expression[]{});
        boolean result = coreOperationOr.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        coreoperationor = new CoreOperationOr(args);
        // Mock the behavior of the computeValue method for the first expression
        when(args[0].computeValue(context)).thenReturn(Boolean.TRUE);
        // Call the computeValue method on the coreoperationor object
        Object result = coreoperationor.computeValue(context);
        // Assert that the result is true
        assertEquals(Boolean.TRUE, result);
        // Verify that the computeValue method was called for the first expression
        verify(args[0]).computeValue(context);
        // Mock the behavior of the computeValue method for the second expression
        when(args[1].computeValue(context)).thenReturn(Boolean.FALSE);
        // Call the computeValue method on the coreoperationor object again
        result = coreoperationor.computeValue(context);
        // Assert that the result is true
        assertEquals(Boolean.TRUE, result);
        // Verify that the computeValue method was called for the second expression
        verify(args[1]).computeValue(context);
    }
}