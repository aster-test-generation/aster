/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributePointer_Test_Failing {
    private DOMAttributePointer domattributepointer;
    private DOMNodePointer parent;
    private Attr attr;
    private NodeTest nodeTest;
    private QName qName;
    private KeywordVariables variables;
    private String keyword;
    private String qualifiedName;
    private String prefix;
    private String localName;
    private QName qname;
    private VariablePointer variablepointer;
    @Mock
    private Attr mockAttr;
    private QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        // Test when pointer1 and pointer2 are not null
        when(pointer1.getName()).thenReturn(new QName("name1"));
        when(pointer2.getName()).thenReturn(new QName("name2"));
        // Test when pointer1 is null
        // Test when pointer2 is null
        assertEquals(-1, domattributepointer.compareChildNodePointers(pointer1, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        // Test when pointer1 and pointer2 are not null
        when(pointer1.getName()).thenReturn(new QName("name1"));
        when(pointer2.getName()).thenReturn(new QName("name2"));
        // Test when pointer1 is null
        // Test when pointer2 is null
        assertEquals(1, domattributepointer.compareChildNodePointers(null, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_3() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        // Test when pointer1 and pointer2 are not null
        when(pointer1.getName()).thenReturn(new QName("name1"));
        when(pointer2.getName()).thenReturn(new QName("name2"));
        // Test when pointer1 is null
        // Test when pointer2 is null
        assertEquals(-1, domattributepointer.compareChildNodePointers(pointer1, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(null, attr);
        // Test when object is same as this
        // Test when object is not same as this and is not a DOMAttributePointer
        // Test when object is not same as this and is a DOMAttributePointer with different attr
        Attr differentAttr = mock(Attr.class);
        DOMAttributePointer differentDOMAttributePointer = new DOMAttributePointer(null, differentAttr);
        // Test when object is not same as this and is a DOMAttributePointer with same attr
        when(attr.equals(attr)).thenReturn(true);
        assertTrue(domattributepointer.equals(domattributepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(null, attr);
        // Test when object is same as this
        // Test when object is not same as this and is not a DOMAttributePointer
        // Test when object is not same as this and is a DOMAttributePointer with different attr
        Attr differentAttr = mock(Attr.class);
        DOMAttributePointer differentDOMAttributePointer = new DOMAttributePointer(null, differentAttr);
        // Test when object is not same as this and is a DOMAttributePointer with same attr
        when(attr.equals(attr)).thenReturn(true);
        assertFalse(domattributepointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(null, attr);
        // Test when object is same as this
        // Test when object is not same as this and is not a DOMAttributePointer
        // Test when object is not same as this and is a DOMAttributePointer with different attr
        Attr differentAttr = mock(Attr.class);
        DOMAttributePointer differentDOMAttributePointer = new DOMAttributePointer(null, differentAttr);
        // Test when object is not same as this and is a DOMAttributePointer with same attr
        when(attr.equals(attr)).thenReturn(true);
        assertFalse(domattributepointer.equals(differentDOMAttributePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(null, attr);
        // Test when object is same as this
        // Test when object is not same as this and is not a DOMAttributePointer
        // Test when object is not same as this and is a DOMAttributePointer with different attr
        Attr differentAttr = mock(Attr.class);
        DOMAttributePointer differentDOMAttributePointer = new DOMAttributePointer(null, differentAttr);
        // Test when object is not same as this and is a DOMAttributePointer with same attr
        when(attr.equals(attr)).thenReturn(true);
        assertTrue(domattributepointer.equals(new DOMAttributePointer(null, attr)));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_1() throws Exception {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(null, attr);
        when(attr.getValue()).thenReturn("testValue");
        when(attr.getValue()).thenReturn(null);
        when(attr.getSpecified()).thenReturn(true);
        assertEquals("testValue", domattributepointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_KnLq0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        domAttributePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove2_cmrw1() {
        VariablePointer variablePointer = new VariablePointer(null);
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(domNodePointer, null);
        domAttributePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_zbfH0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        QName name = domAttributePointer.getName();
        assertNotNull(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParent_pDxm0() {
        DOMAttributePointer pointer = new DOMAttributePointer(null, null);
        assertEquals("@null", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(null, attr);
        when(attr.getValue()).thenReturn("testValue");
        assertEquals("testValue", domattributepointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_fid1() throws Exception {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(null, attr);
        when(attr.getValue()).thenReturn("Mock for Attr, hashCode: 893222050");
        assertEquals("Mock for Attr, hashCode: 893222050", domattributepointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        // Test when pointer1 and pointer2 are not null
        when(pointer1.getName()).thenReturn(new QName("name1"));
        when(pointer2.getName()).thenReturn(new QName("name2"));
        assertEquals(-1, domattributepointer.compareChildNodePointers(pointer1, pointer2));
        // Test when pointer1 is null
        assertEquals(1, domattributepointer.compareChildNodePointers(null, pointer2));
        // Test when pointer2 is null
        assertEquals(-1, domattributepointer.compareChildNodePointers(pointer1, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(null, attr);
        // Test when object is same as this
        assertTrue(domattributepointer.equals(domattributepointer));
        // Test when object is not same as this and is not a DOMAttributePointer
        assertFalse(domattributepointer.equals(new Object()));
        // Test when object is not same as this and is a DOMAttributePointer with different attr
        Attr differentAttr = mock(Attr.class);
        DOMAttributePointer differentDOMAttributePointer = new DOMAttributePointer(null, differentAttr);
        assertFalse(domattributepointer.equals(differentDOMAttributePointer));
        // Test when object is not same as this and is a DOMAttributePointer with same attr
        when(attr.equals(attr)).thenReturn(true);
        assertTrue(domattributepointer.equals(new DOMAttributePointer(null, attr)));
    }
}