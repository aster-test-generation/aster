/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Failing {
    private CollectionPointer collectionPointer;
    private NodePointer pointer1;
    private NodePointer pointer2;
    private Object collection;
    private CollectionPointer collectionpointer;
    @Mock
    private NodeTest test;
    @Mock
    private Locale locale;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private QName name;
    @Mock
    private NodeIterator nodeIterator;
    private NodePointer valuePointer;
    @Mock
    private KeywordVariables variables;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private NodeIterator nodeIteratorMock;
    @Mock
    private VariablePointer variablePointerMock;
    @Mock
    private KeywordVariables keywordVariablesMock;
    @Mock
    private DOMNodePointer domNodePointerMock;
    @Mock
    private Locale localeMock;
    @Mock
    private Object collectionMock;
    @Mock
    private NodePointer nodePointer;
    private Object value;
    private int index;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithWholeCollectionAndParentNotNull_qJHx0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        collectionPointer.setValue(new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode() throws Exception {
        MockitoAnnotations.openMocks(this);
        collectionpointer = new CollectionPointer(collection, locale);
        Mockito.when(collectionpointer.testNode(test)).thenReturn(true);
        boolean result = collectionpointer.testNode(test);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        collectionpointer = new CollectionPointer(parent, collection);
        when(collectionpointer.isCollection()).thenReturn(true);
        assertTrue(collectionpointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        collection = mock(Object.class);
        locale = mock(Locale.class);
        collectionpointer = new CollectionPointer(collection, locale);
        when(collectionpointer.getImmediateNode()).thenReturn(ValueUtils.getValue(collection));
        assertEquals(ValueUtils.getValue(collection), collectionpointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() {
        collectionPointer = new CollectionPointer(collection, locale);
        when(collectionPointer.attributeIterator(name)).thenReturn(nodeIterator);
        NodeIterator result = collectionPointer.attributeIterator(name);
        assertEquals(nodeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator1_wZVP3() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        NodeIterator nodeIterator = domNodePointer.attributeIterator(new QName(""));
        Assertions.assertNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator3_qdHL5() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        NodeIterator nodeIterator = domNodePointer.attributeIterator(new QName("", ""));
        Assertions.assertNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator5_qtwv10() {
        QName qName = new QName("");
        String prefix = qName.getPrefix();
        Assertions.assertEquals("", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator8_Rwhp13() {
        QName qName = new QName("", "");
        String toString = qName.toString();
        Assertions.assertEquals("", toString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        MockitoAnnotations.openMocks(this);
        collectionpointer = new CollectionPointer(parent, collection);
        Mockito.when(ValueUtils.getLength(Mockito.any())).thenReturn(10);
        assertEquals(10, collectionpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_cetv0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        assertEquals(0, collectionPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithVariables_cUKE1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        CollectionPointer collectionPointer = new CollectionPointer(variables, new Locale("en"));
        assertEquals(0, collectionPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenValueIsNull() {
        collectionPointer = new CollectionPointer(collection, locale);
        when(collectionPointer.getNode()).thenReturn(null);
        boolean isLeaf = collectionPointer.isLeaf();
        assertTrue(isLeaf);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreatePath_Toaa0() {
        final Locale locale = Locale.getDefault();
        final Object collection = new Object();
        final CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        final JXPathContext context = JXPathContext.newContext(collectionPointer);
        final NodePointer ptr = collectionPointer.createPath(context, new Object());
        assertNotNull(ptr);
        assertTrue(ptr instanceof DOMNodePointer);
        assertEquals(collection, ptr.getNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() {
        collectionPointer = new CollectionPointer(parent, collection);
        when(collectionPointer.isContainer()).thenReturn(true);
        assertTrue(collectionPointer.isContainer());
        when(collectionPointer.isContainer()).thenReturn(false);
        assertFalse(collectionPointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer() {
        collectionPointer = new CollectionPointer(collection, locale);
        when(collectionPointer.getValuePointer()).thenReturn(valuePointer);
        when(valuePointer.namespacePointer("namespace")).thenReturn(null);
        NodePointer namespacePointer = collectionPointer.namespacePointer("namespace");
        verify(valuePointer).namespacePointer("namespace");
        assertNull(namespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        parent = mock(DOMNodePointer.class);
        locale = mock(Locale.class);
        collection = new Object();
        // Create a CollectionPointer with a parent and collection
        collectionpointer = new CollectionPointer(parent, collection);
        // Mock the behavior of the getImmediateParentPointer method
        when(parent.getImmediateParentPointer()).thenReturn(parent);
        // Mock the behavior of the getIndex method
        when(parent.getIndex()).thenReturn(1);
        // Call the asPath method on the collectionpointer
        String path = collectionpointer.asPath();
        // Assert that the path is correct
        assertEquals("/.1", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_bsQf0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        String actual = collectionPointer.asPath();
        String expected = "/.";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_JykC1() {
        CollectionPointer collectionPointer = new CollectionPointer(new DOMNodePointer(null, null, null), new Object());
        String actual = collectionPointer.asPath();
        String expected = "/.";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        collection = new Object();
        when(collectionpointer.getBaseValue()).thenReturn(collection);
        assertEquals(collection, collectionpointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreatePath_Toaa0_1() {
        final Locale locale = Locale.getDefault();
        final Object collection = new Object();
        final CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        final JXPathContext context = JXPathContext.newContext(collectionPointer);
        final NodePointer ptr = collectionPointer.createPath(context, new Object());
        assertNotNull(ptr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreatePath_Toaa0_2() {
        final Locale locale = Locale.getDefault();
        final Object collection = new Object();
        final CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        final JXPathContext context = JXPathContext.newContext(collectionPointer);
        final NodePointer ptr = collectionPointer.createPath(context, new Object());
        assertTrue(ptr instanceof DOMNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreatePath_Toaa0_3() {
        final Locale locale = Locale.getDefault();
        final Object collection = new Object();
        final CollectionPointer collectionPointer = new CollectionPointer(collection, locale);
        final JXPathContext context = JXPathContext.newContext(collectionPointer);
        final NodePointer ptr = collectionPointer.createPath(context, new Object());
        assertEquals(collection, ptr.getNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_1() {
        collectionPointer = new CollectionPointer(parent, collection);
        when(collectionPointer.isContainer()).thenReturn(true);
        when(collectionPointer.isContainer()).thenReturn(false);
        assertTrue(collectionPointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_2() {
        collectionPointer = new CollectionPointer(parent, collection);
        when(collectionPointer.isContainer()).thenReturn(true);
        when(collectionPointer.isContainer()).thenReturn(false);
        assertFalse(collectionPointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator1_wZVP3_fid2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        NodeIterator nodeIterator = domNodePointer.attributeIterator(new QName(""));
        Assertions.assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator3_qdHL5_fid2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        NodeIterator nodeIterator = domNodePointer.attributeIterator(new QName("", ""));
        Assertions.assertNotNull(nodeIterator);
    }
}