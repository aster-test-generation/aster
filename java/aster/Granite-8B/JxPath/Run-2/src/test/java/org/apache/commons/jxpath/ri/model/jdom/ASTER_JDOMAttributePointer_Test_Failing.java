/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.jdom.Attribute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMAttributePointer_Test_Failing {
    private JDOMAttributePointer fixture;
    private JDOMAttributePointer jdomattributepointer;
    private DOMNodePointer parent;
    private Attribute attr;
    @Mock
    private Attribute mockAttr;
    private QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        when(parent.isCollection()).thenReturn(true);
        when(attr.getValue()).thenReturn("value");
        boolean result = jdomattributepointer.isCollection();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        jdomattributepointer.remove();
        verify(attr).getParent().removeAttribute(attr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        when(attr.hashCode()).thenReturn(123);
        assertEquals(123, jdomattributepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        attr = mock(Attribute.class);
        name = mock(QName.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        when(attr.getName()).thenReturn("Mock for QName, hashCode: -947651431");
        when(name.getName()).thenReturn("Mock for QName, hashCode: -947651431");
        when(name.getPrefix()).thenReturn("attributePrefix");
        assertEquals(name, jdomattributepointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Mock the behavior of the parent object
        when(parent.getLength()).thenReturn(1);
        // Call the method under test
        int length = jdomattributepointer.getLength();
        // Assert that the method returns the expected value
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals3_wPsw2_fid1() {
        VariablePointer variablePointer1 = new VariablePointer(new KeywordVariables("keyword1", new Object()), new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword1", new Object()), new QName("name1"));
        boolean result = variablePointer1.equals(variablePointer2);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_EvlY1() {
        assertEquals("value", fixture.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_fid1() throws Exception {
        attr = mock(Attribute.class);
        name = mock(QName.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        when(attr.getName()).thenReturn("attributeName");
        when(name.getName()).thenReturn("attributeName");
        when(name.getPrefix()).thenReturn("attributePrefix");
        assertEquals(name, jdomattributepointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_fid1() {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        when(attr.getValue()).thenReturn("value");
        assertFalse(jdomattributepointer.isLeaf());
    }
}