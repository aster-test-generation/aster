/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Passing {
    @Mock
    private EvalContext context;
    private ExpressionPath expressionPath;
    @Mock
    Step[] steps;
    @Mock
    Expression[] predicates;
    @Mock
    Constant expression;
    private EvalContext evalContext;
    private boolean firstMatch;
    private ExpressionPath expressionpath;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() {
        expressionPath = new ExpressionPath(Mockito.mock(Constant.class), new Expression[0], new Step[0]);
        // Set up expectations
        when(context.getJXPathContext()).thenReturn(Mockito.mock(JXPathContext.class));
        // Call method under test
        Object result = expressionPath.computeValue(context);
        // Verify that the method behaves as expected
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompute() throws Exception {
        expressionPath = new ExpressionPath(expression, predicates, steps);
        // Set up expectations
        Mockito.when(context.getJXPathContext()).thenReturn(Mockito.mock(JXPathContext.class));
        Mockito.when(expressionPath.expressionPath(Mockito.any(), Mockito.anyBoolean())).thenReturn(Mockito.mock(Object.class));
        // Call the method under test
        Object result = expressionPath.compute(context);
        // Verify the behavior
        Mockito.verify(context).getJXPathContext();
        Mockito.verify(expressionPath).expressionPath(Mockito.any(), Mockito.anyBoolean());
        Mockito.verifyNoMoreInteractions(context, expressionPath);
        // Assert the expected result
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpression_wxax0() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        Expression result = expressionPath.getExpression();
        assertEquals(expression, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath_mskO0() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        boolean result = expressionPath.isSimpleExpressionPath();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath2_xGyT1() {
        Constant expression = new Constant(10);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        boolean result = expressionPath.isSimpleExpressionPath();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath3_YnBs2() {
        Constant expression = new Constant(10.5);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        boolean result = expressionPath.isSimpleExpressionPath();
        assertFalse(result);
    }
}