/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TypeUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrapPrimitive_kMWp0_1() {
        Class primitiveClass = java.lang.Integer.class;
        Class nonPrimitiveClass = Integer.class;
        Class wrappedPrimitiveClass = TypeUtils.wrapPrimitive(primitiveClass);
        Class wrappedNonPrimitiveClass = TypeUtils.wrapPrimitive(nonPrimitiveClass);
        assertEquals(int.class, wrappedPrimitiveClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrapPrimitiveWithNull_Sary1() {
        Class nullClass = null;
        Class wrappedNullClass = TypeUtils.wrapPrimitive(nullClass);
        assertEquals(null, wrappedNullClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrapPrimitive_kMWp0() {
        Class primitiveClass = int.class;
        Class nonPrimitiveClass = Integer.class;
        Class wrappedPrimitiveClass = TypeUtils.wrapPrimitive(primitiveClass);
        Class wrappedNonPrimitiveClass = TypeUtils.wrapPrimitive(nonPrimitiveClass);
        assertEquals(int.class, wrappedPrimitiveClass);
        assertEquals(Integer.class, wrappedNonPrimitiveClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrapPrimitive_kMWp0_1_fid3() {
        Class primitiveClass = int.class;
        Class nonPrimitiveClass = Integer.class;
        Class wrappedPrimitiveClass = TypeUtils.wrapPrimitive(primitiveClass);
        Class wrappedNonPrimitiveClass = TypeUtils.wrapPrimitive(nonPrimitiveClass);
        assertEquals(int.class, wrappedPrimitiveClass);
    }
}