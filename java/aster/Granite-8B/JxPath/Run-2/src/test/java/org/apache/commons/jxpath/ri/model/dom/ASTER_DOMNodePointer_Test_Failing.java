/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Failing {
    @Mock
    private Node node;
    @Mock
    private DOMNodePointer domnodepointer;
    @Mock
    private NodePointer nodepointer;
    @Mock
    private NamedNodeMap namednodemap;
    Attr attr;
    private Locale locale;
    private String id;
    private VariablePointer parent;
    private KeywordVariables variables;
    private QName name;
    Element element;
    private DOMNodePointer domNodePointer;
    private NodeIterator nodeIterator;
    private NodeTest test;
    private boolean reverse;
    private NodePointer startWith;
    private VariablePointer variablePointer;
    private KeywordVariables keywordVariables;
    private QName qName;
    @Mock
    private NodeList nodelist;
    private String defaultNamespace;
    private Document document;
    private Node parentNode;
    private NodeNameTest nodeNameTest;
    private NodeTypeTest nodeTypeTest;
    private ProcessingInstructionTest processingInstructionTest;
    private Map<String, String> namespaces;
    @Mock
    private Node nodeMock;
    private NamespaceResolver localNamespaceResolver;
    @Mock
    private NamespaceResolver namespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_1() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = mock(DOMNodePointer.class);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getFirstChild()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        when(namednodemap.item(any())).thenReturn(node);
        when(domnodepointer.getNode()).thenReturn(node);
        // Test case 1: node1 and node2 are the same node
        when(nodepointer.getBaseValue()).thenReturn(node);
        // Test case 2: node1 is an attribute node and node2 is not
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        // Test case 3: node1 is not an attribute node and node2 is
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        // Test case 4: node1 and node2 are both attribute nodes
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(namednodemap.item(any())).thenReturn(node);
        assertEquals(0, domnodepointer.compareChildNodePointers(nodepointer, nodepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_2() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = mock(DOMNodePointer.class);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getFirstChild()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        when(namednodemap.item(any())).thenReturn(node);
        when(domnodepointer.getNode()).thenReturn(node);
        // Test case 1: node1 and node2 are the same node
        when(nodepointer.getBaseValue()).thenReturn(node);
        // Test case 2: node1 is an attribute node and node2 is not
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        // Test case 3: node1 is not an attribute node and node2 is
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        // Test case 4: node1 and node2 are both attribute nodes
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(namednodemap.item(any())).thenReturn(node);
        assertEquals(-1, domnodepointer.compareChildNodePointers(nodepointer, nodepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_3() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = mock(DOMNodePointer.class);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getFirstChild()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        when(namednodemap.item(any())).thenReturn(node);
        when(domnodepointer.getNode()).thenReturn(node);
        // Test case 1: node1 and node2 are the same node
        when(nodepointer.getBaseValue()).thenReturn(node);
        // Test case 2: node1 is an attribute node and node2 is not
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        // Test case 3: node1 is not an attribute node and node2 is
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        // Test case 4: node1 and node2 are both attribute nodes
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(namednodemap.item(any())).thenReturn(node);
        assertEquals(1, domnodepointer.compareChildNodePointers(nodepointer, nodepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue2() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        id = "id";
        parent = mock(VariablePointer.class);
        variables = mock(KeywordVariables.class);
        name = mock(QName.class);
        domnodepointer = new DOMNodePointer(node, locale, id);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(node.getChildNodes()).thenReturn(nodelist);
        when(nodelist.getLength()).thenReturn(1);
        when(nodelist.item(0)).thenReturn(node);
        when(node.cloneNode(true)).thenReturn(node);
        when(node.appendChild(any(Node.class))).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        domnodepointer.setValue("value");
        verify(node, times(1)).appendChild(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue6() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        id = "id";
        parent = mock(VariablePointer.class);
        variables = mock(KeywordVariables.class);
        name = mock(QName.class);
        domnodepointer = new DOMNodePointer(node, locale, id);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(node.getChildNodes()).thenReturn(nodelist);
        when(nodelist.getLength()).thenReturn(1);
        when(nodelist.item(0)).thenReturn(node);
        when(node.cloneNode(true)).thenReturn(node);
        when(node.appendChild(any(Node.class))).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        domnodepointer.setValue(null);
        verify(node, times(1)).appendChild(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindEnclosingAttribute() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getParentNode()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttribute("attrName")).thenReturn("attrValue");
        when(node.getNodeValue()).thenReturn("nodeValue");
        String result = DOMNodePointer.findEnclosingAttribute(node, "attrName");
        assertEquals("attrValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        // Mock the hashCode method of the Node object
        when(node.hashCode()).thenReturn(123);
        // Call the hashCode method of the DOMNodePointer object
        int hashCode = domnodepointer.hashCode();
        // Assert that the hashCode value returned by the DOMNodePointer is equal to the mocked hashCode value
        assertEquals(123, hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getParentNode()).thenReturn(node);
        assertEquals(node.getNamespaceURI(), domnodepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURIWithNodeAndLocale_rjKH5() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale);
        assertEquals("namespaceURI", pointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURIWithNodeAndLocaleAndId_SvBd6() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale, id);
        assertEquals("namespaceURI", "expected_value", pointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator() {
        domNodePointer = new DOMNodePointer(Mockito.mock(Node.class), Locale.getDefault(), null);
        test = Mockito.mock(NodeTest.class);
        reverse = true;
        startWith = Mockito.mock(NodePointer.class);
        nodeIterator = Mockito.mock(NodeIterator.class);
        when(domNodePointer.childIterator(test, reverse, startWith)).thenReturn(nodeIterator);
        NodeIterator result = domNodePointer.childIterator(test, reverse, startWith);
        assertEquals(nodeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithKeywordVariables_fyTv2() {
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        assertEquals(1, domNodePointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithQName_kZRo3() {
        QName qName = new QName(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        assertEquals(1, domNodePointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURI1_XqAh0() {
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        Element element = mock(Element.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getPrefix()).thenReturn("prefix");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        when(node.getParentNode()).thenReturn(element);
        String actualNamespaceURI = DOMNodePointer.getNamespaceURI(node);
        String expectedNamespaceURI = "namespaceURI";
        assertEquals(expectedNamespaceURI, actualNamespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove1_eGsA0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        domNodePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove2_nROG1() {
        KeywordVariables keywordVariables = new KeywordVariables("", null);
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName(""));
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        domNodePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage1_NeZI0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        boolean result = variablePointer.isLanguage("en");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage2_Kucg1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("", null), new QName(""));
        boolean result = variablePointer.isLanguage("");
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage1_zriI5() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        boolean result = domNodePointer.isLanguage("en");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage3_aYJN7() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        boolean result = domNodePointer.isLanguage(null);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode() {
        node = mock(Node.class);
        parentNode = mock(Node.class);
        locale = mock(Locale.class);
        id = "id";
        parent = mock(VariablePointer.class);
        nodeNameTest = mock(NodeNameTest.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        processingInstructionTest = mock(ProcessingInstructionTest.class);
        domnodepointer = new DOMNodePointer(node, locale, id);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodeNameTest.getNodeName()).thenReturn(new QName("prefix", "localName"));
        when(nodeNameTest.getNamespaceURI()).thenReturn("namespaceURI");
        when(nodeNameTest.isWildcard()).thenReturn(true);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        when(node.getPrefix()).thenReturn("prefix");
        when(node.getParentNode()).thenReturn(parentNode);
        when(parentNode.getLocalName()).thenReturn("parentNodeLocalName");
        when(parentNode.getNamespaceURI()).thenReturn("parentNodeNamespaceURI");
        when(parentNode.getPrefix()).thenReturn("parentNodePrefix");
        boolean result = DOMNodePointer.testNode(node, nodeNameTest);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        node = nodeMock;
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(nodeMock.getNodeValue()).thenReturn("nodeMock");
        assertEquals("nodeMock", domnodepointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual2_sddf1() {
        VariablePointer variablePointer = new VariablePointer(null);
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        QName qName = new QName(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        boolean actual = domNodePointer.isActual();
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual3_NttE2() {
        VariablePointer variablePointer = new VariablePointer(null);
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        QName qName = new QName(null, null);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        boolean actual = domNodePointer.isActual();
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual4_HMDq3() {
        VariablePointer variablePointer = new VariablePointer(null);
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        QName qName = new QName(null, null);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        boolean actual = domNodePointer.isActual();
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver_1() throws Exception {
        domnodepointer = new DOMNodePointer(Mockito.mock(Node.class), Locale.getDefault(), null);
        when(domnodepointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        NamespaceResolver result = domnodepointer.getNamespaceResolver();
        verify(domnodepointer).getNamespaceResolver();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver_2() throws Exception {
        domnodepointer = new DOMNodePointer(Mockito.mock(Node.class), Locale.getDefault(), null);
        when(domnodepointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        NamespaceResolver result = domnodepointer.getNamespaceResolver();
        verify(domnodepointer).getNamespaceResolver();
        assertEquals(namespaceResolver, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_A_KZLM0() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getParentNode()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://www.example.com");
        assertEquals("http://www.example.com", DOMNodePointer.getNamespaceURI(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_NullString_uQqR5_zWFq0() {
        Node mockNode = mock(Node.class);
        DOMNodePointer pointer = new DOMNodePointer(mockNode, Locale.ENGLISH, "id");
        pointer.setValue(null);
        verify(mockNode).getParentNode().removeChild(mockNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithParent_OHDL1_MfXf0() {
        VariablePointer parent = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        DOMNodePointer pointer = new DOMNodePointer(parent, node);
        assertEquals(parent.asPath() + "/element[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_1_fid1() {
        node = mock(Node.class);
        locale = mock(Locale.class);
        id = "testId";
        parent = mock(VariablePointer.class);
        variables = mock(KeywordVariables.class);
        name = mock(QName.class);
        domnodepointer = new DOMNodePointer(node, locale, id);
        domnodepointer = new DOMNodePointer(parent, node);
        domnodepointer = new DOMNodePointer(node, locale);
        when(node.hasChildNodes()).thenReturn(true);
        when(node.hasChildNodes()).thenReturn(false);
        assertTrue(domnodepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURIWithNode_qHWU0_fid1() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale, id);
        assertEquals("namespaceURI", pointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURIWithParentAndNode_TKPS1_fid1() {
        VariablePointer parent = new VariablePointer(name);
        DOMNodePointer pointer = new DOMNodePointer(parent, node);
        assertEquals("namespaceURI", pointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_1_fid1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.hasChildNodes()).thenReturn(false);
        when(node.hasChildNodes()).thenReturn(true);
        assertTrue(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_1_fid1() {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getLocalName()).thenReturn(null);
        when(node.getNodeName()).thenReturn("nodeName");
        assertEquals("localName", DOMNodePointer.getLocalName(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage1_NeZI0_fid1() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        boolean result = variablePointer.isLanguage("");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage2_Kucg1_fid1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("", null), new QName(""));
        boolean result = variablePointer.isLanguage("");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage1_zriI5_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        boolean result = domNodePointer.isLanguage("");
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLanguage_fid1() {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getParentNode()).thenReturn(element);
        when(element.getAttribute("xml:lang")).thenReturn("en");
        assertEquals("en", domNodePointer.getLanguage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLanguage_zwcz0_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String language = domNodePointer.getLanguage();
        assertEquals("en", language);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLanguage2_FfoE1_fid1() {
        VariablePointer variablePointer = new VariablePointer(null);
        KeywordVariables keywordVariables = new KeywordVariables("", null);
        QName qName = new QName("");
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        DOMNodePointer domNodePointer2 = new DOMNodePointer(variablePointer, null);
        DOMNodePointer domNodePointer3 = new DOMNodePointer(null, null, "");
        String language = domNodePointer.getLanguage();
        assertEquals("en", language);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_fid1() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        assertEquals("id('')", domnodepointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithTextNode_EmIH2_fid1() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale);
        assertEquals("/text()[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithProcessingInstruction_CUvm3_fid1() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale);
        assertEquals("/processing-instruction('target')[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithDocumentNode_nZtx4_fid1() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale);
        assertEquals("/", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNamespaceURI_rWWt5_fid1() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale);
        assertEquals("/prefix:element[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithElementNodeAndNoNamespaceURI_ofwb6_fid1() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale);
        assertEquals("/element[1]", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_fid1() throws Exception {
        node = nodeMock;
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(nodeMock.getNodeValue()).thenReturn("Node Value");
        assertEquals("Node Value", domnodepointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = mock(DOMNodePointer.class);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getFirstChild()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        when(namednodemap.item(any())).thenReturn(node);
        when(domnodepointer.getNode()).thenReturn(node);
        // Test case 1: node1 and node2 are the same node
        when(nodepointer.getBaseValue()).thenReturn(node);
        assertEquals(0, domnodepointer.compareChildNodePointers(nodepointer, nodepointer));
        // Test case 2: node1 is an attribute node and node2 is not
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        assertEquals(-1, domnodepointer.compareChildNodePointers(nodepointer, nodepointer));
        // Test case 3: node1 is not an attribute node and node2 is
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        assertEquals(1, domnodepointer.compareChildNodePointers(nodepointer, nodepointer));
        // Test case 4: node1 and node2 are both attribute nodes
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(namednodemap.item(any())).thenReturn(node);
        assertEquals(-1, domnodepointer.compareChildNodePointers(nodepointer, nodepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        node = mock(Node.class);
        locale = mock(Locale.class);
        id = "testId";
        parent = mock(VariablePointer.class);
        variables = mock(KeywordVariables.class);
        name = mock(QName.class);
        domnodepointer = new DOMNodePointer(node, locale, id);
        domnodepointer = new DOMNodePointer(parent, node);
        domnodepointer = new DOMNodePointer(node, locale);
        when(node.hasChildNodes()).thenReturn(true);
        assertTrue(domnodepointer.isCollection());
        when(node.hasChildNodes()).thenReturn(false);
        assertFalse(domnodepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver() throws Exception {
        domnodepointer = new DOMNodePointer(Mockito.mock(Node.class), Locale.getDefault(), null);
        when(domnodepointer.getNamespaceResolver()).thenReturn(namespaceResolver);
        NamespaceResolver result = domnodepointer.getNamespaceResolver();
        verify(domnodepointer).getNamespaceResolver();
        assertNotNull(result);
        assertEquals(namespaceResolver, result);
    }
}