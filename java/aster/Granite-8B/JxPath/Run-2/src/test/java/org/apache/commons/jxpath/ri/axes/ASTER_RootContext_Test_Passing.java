/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Passing {
    @Mock
    private JXPathContextReferenceImpl jxpathContext;
    @Mock
    private DOMNodePointer pointer;
    private RootContext rootcontext;
    @Mock
    private Locale locale;
    @Mock
    private VariablePointer parent;
    @Mock
    private JXPathContextReferenceImpl parentContext;
    @Mock
    private Object contextBean;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private EvalContext evalContext;
    @Mock
    private RootContext rootContext;
    private static int MAX_REGISTER = 4;
    private int availableRegister = 0;
    private Object[] registers;
    @Mock
    private Object constant;
    @Mock
    private QName variableName;
    @Mock
    private QName functionName;
    @Mock
    private Object[] parameters;
    @Mock
    private Object registeredValue;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetJXPathContext() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        rootcontext = new RootContext(jxpathContext, null);
        JXPathContext actualJXPathContext = rootcontext.getJXPathContext();
        assertEquals(jxpathContext, actualJXPathContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAbsoluteRootContext() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        rootcontext = new RootContext(jxpathContext, null);
        EvalContext evalContext = mock(EvalContext.class);
        when(jxpathContext.getAbsoluteRootContext()).thenReturn(evalContext);
        EvalContext result = rootcontext.getAbsoluteRootContext();
        assertEquals(evalContext, result);
        verify(jxpathContext, times(1)).getAbsoluteRootContext();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullPointer_jBTV1() {
        RootContext rootContext = new RootContext(null, null);
        Object value = rootContext.getValue();
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor1_Uoqx0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor2_GVDQ1() {
        KeywordVariables keywordVariables = new KeywordVariables("", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName(""));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariablesConstructor_ObCF2() {
        KeywordVariables keywordVariables = new KeywordVariables("", new Object());
        assertNotNull(keywordVariables);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor1_nSaW11() {
        QName qName = new QName("");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor2_PiHk12() {
        QName qName = new QName("", "");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVariableContext() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        rootcontext = new RootContext(jxpathContext, jxpathContext.getVariablePointer(Mockito.any()));
        EvalContext evalContext = rootcontext.getVariableContext(Mockito.any());
        assertNotNull(evalContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFunction() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        rootcontext = new RootContext(jxpathContext, null);
        Function function = mock(Function.class);
        when(jxpathContext.getFunction(any(QName.class), any(Object[].class))).thenReturn(function);
        Function result = rootcontext.getFunction(new QName("test"), new Object[]{});
        assertEquals(function, result);
        verify(jxpathContext, times(1)).getFunction(any(QName.class), any(Object[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRegisteredValue_RFuT0() {
        RootContext rootContext = new RootContext(null, null);
        int result = rootContext.setRegisteredValue(new Object());
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRegisteredValueWithNull_qYou1() {
        RootContext rootContext = new RootContext(null, null);
        int result = rootContext.setRegisteredValue(null);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRegisteredValueWithUnknownValue_SKEB2() {
        RootContext rootContext = new RootContext(null, null);
        int result = rootContext.setRegisteredValue(RootContext.UNKNOWN_VALUE);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getCurrentNodePointerTest_RzRv0() {
        RootContext rootContext = new RootContext(null, null);
        NodePointer pointer = rootContext.getCurrentNodePointer();
        assertEquals(pointer.getClass(), DOMNodePointer.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValueWithIdGreaterThanMAX_REGISTER_jnXx0() {
        RootContext rootContext = new RootContext(null, null);
        Object result = rootContext.getRegisteredValue(10);
        assertEquals(RootContext.UNKNOWN_VALUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValueWithIdEqualToMAX_REGISTER_itOC1() {
        RootContext rootContext = new RootContext(null, null);
        Object result = rootContext.getRegisteredValue(9);
        assertEquals(RootContext.UNKNOWN_VALUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValueWithIdEqualToNegativeOne_ivoO2() {
        RootContext rootContext = new RootContext(null, null);
        Object result = rootContext.getRegisteredValue(-1);
        assertEquals(RootContext.UNKNOWN_VALUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValueWithIdLessThanMAX_REGISTER_xwoW3() {
        RootContext rootContext = new RootContext(null, null);
        Object result = rootContext.getRegisteredValue(0);
        assertEquals(RootContext.UNKNOWN_VALUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAbsoluteRootContext() {
        rootContext = new RootContext(jxpathContext, pointer);
        // Test the getAbsoluteRootContext method
        when(jxpathContext.getAbsoluteRootContext()).thenReturn(evalContext);
        assertEquals(evalContext, rootContext.getAbsoluteRootContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRootContext_jjMF0() {
        RootContext rootContext = new RootContext(null, null);
        assertEquals(rootContext, rootContext.getRootContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetConstantContextWithNodePointer_VolU0() {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        pointer = mock(DOMNodePointer.class);
        rootContext = mock(RootContext.class);
        when(rootContext.getJXPathContext()).thenReturn(jxpathContext);
        when(rootContext.getConstantContext(pointer)).thenReturn(evalContext);
        EvalContext actual = rootContext.getConstantContext(pointer);
        assertEquals(evalContext, actual);
        verify(rootContext, times(1)).getJXPathContext();
        verify(rootContext, times(1)).getConstantContext(pointer);
    }
}