/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.beanutils.DynaClass;
import org.apache.commons.beanutils.DynaProperty;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPropertyPointer_Test_Passing {
    private DynaBeanPropertyPointer dynabeanpropertypointer;
    private DOMNodePointer parent;
    private DynaBean dynaBean;
    private Locale locale;
    private KeywordVariables variables;
    private String[] names;
    @Mock
    private DynaBean dynaBeanMock;
    @Mock
    private DynaClass dynaclassMock;
    @Mock
    private DynaProperty dynapropertyMock;
    private static String CLASS = "class";
    @Mock
    private DynaProperty[] dynaProperties;
    @Mock
    private DynaProperty dynaProperty;
    @Mock
    private QName qName;
    private DOMNodePointer domNodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyName() throws Exception {
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        dynabeanpropertypointer.setPropertyName("test");
        verify(dynaBean, times(1)).set("test", null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_qpVR0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove2_pnaD1() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("name"));
        variablePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() {
        dynabeanpropertypointer = new DynaBeanPropertyPointer(parent, dynaBean);
        when(dynaBean.get(anyString())).thenReturn("value");
        boolean isContainer = dynabeanpropertypointer.isContainer();
        assertTrue(isContainer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        dynaBean = dynaBeanMock;
        dynabeanpropertypointer = new DynaBeanPropertyPointer(null, dynaBean);
        when(dynaBeanMock.get("propertyName")).thenReturn("expectedValue");
        assertEquals("expectedValue", dynabeanpropertypointer.getBaseValue());
    }
}