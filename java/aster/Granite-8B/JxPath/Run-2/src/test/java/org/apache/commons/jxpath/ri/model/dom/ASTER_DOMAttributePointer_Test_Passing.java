/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.util.TypeUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributePointer_Test_Passing {
    private DOMAttributePointer domattributepointer;
    private DOMNodePointer parent;
    private Attr attr;
    private NodeTest nodeTest;
    private QName qName;
    private KeywordVariables variables;
    private String keyword;
    private String qualifiedName;
    private String prefix;
    private String localName;
    private QName qname;
    private VariablePointer variablepointer;
    @Mock
    private Attr mockAttr;
    private QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_YGWc0() {
        DOMAttributePointer pointer1 = new DOMAttributePointer(new DOMNodePointer(null, null, null), null);
        DOMAttributePointer pointer2 = new DOMAttributePointer(new DOMNodePointer(null, null, null), null);
        int result = pointer1.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeNode_dVNY0()
    {
        final NodeTest nodeTest = null;
        final boolean actual = new DOMAttributePointer(null, null).testNode(nodeTest);
        assertEquals(true, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeText_vymo1()
    {
        final NodeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_TEXT);
        final boolean actual = new DOMAttributePointer(null, null).testNode(nodeTest);
        assertEquals(false, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_NodeTypeTest_NodeTypeComment_FCHm2()
    {
        final NodeTest nodeTest = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);
        final boolean actual = new DOMAttributePointer(null, null).testNode(nodeTest);
        assertEquals(false, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(null, attr);
        Object value = "new value";
        domattributepointer.setValue(value);
        verify(attr, times(1)).setValue((String) TypeUtils.convert(value, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_2() throws Exception {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(null, attr);
        when(attr.getValue()).thenReturn("testValue");
        when(attr.getValue()).thenReturn(null);
        when(attr.getSpecified()).thenReturn(true);
        assertEquals(null, domattributepointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        attr = mock(Attr.class);
        parent = mock(DOMNodePointer.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        when(attr.getName()).thenReturn("attributeName");
        when(parent.getNamespaceURI("prefix")).thenReturn("namespaceURI");
        when(attr.getPrefix()).thenReturn("prefix");
        assertEquals("namespaceURI", domattributepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        when(attr.getNodeValue()).thenReturn("value");
        assertTrue(domattributepointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_1_fid1() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        // Test when pointer1 and pointer2 are not null
        when(pointer1.getName()).thenReturn(new QName("name1"));
        when(pointer2.getName()).thenReturn(new QName("name2"));
        // Test when pointer1 is null
        // Test when pointer2 is null
        assertEquals(0, domattributepointer.compareChildNodePointers(pointer1, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_3_fid1() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(parent, attr);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        // Test when pointer1 and pointer2 are not null
        when(pointer1.getName()).thenReturn(new QName("name1"));
        when(pointer2.getName()).thenReturn(new QName("name2"));
        // Test when pointer1 is null
        // Test when pointer2 is null
        assertEquals(0, domattributepointer.compareChildNodePointers(pointer1, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue() throws Exception {
        attr = mock(Attr.class);
        domattributepointer = new DOMAttributePointer(null, attr);
        when(attr.getValue()).thenReturn("testValue");
        assertEquals("testValue", domattributepointer.getValue());
        when(attr.getValue()).thenReturn(null);
        when(attr.getSpecified()).thenReturn(true);
        assertEquals(null, domattributepointer.getValue());
    }
}