/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.jdom.Namespace;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNamespaceIterator_Test_Passing {
    private int position = 0;
    private JDOMNamespaceIterator jdomnamespaceiterator;
    private List namespaces;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Locale locale;
    @Mock
    private KeywordVariables variables;
    @Mock
    private QName name;
    @Mock
    private QName qualifiedName;
    @Mock
    private QName prefix;
    @Mock
    private QName localName;
    @Mock
    private Namespace ns;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPosition() {
        jdomnamespaceiterator = new JDOMNamespaceIterator(Mockito.mock(DOMNodePointer.class));
        // Mock the behavior of the getPosition method
        when(jdomnamespaceiterator.getPosition()).thenReturn(position);
        // Assert that the getPosition method returns the expected value
        assertEquals(position, jdomnamespaceiterator.getPosition());
    }
}