/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Container;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.xml.DocumentContainer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ContainerPointer_Test_Failing {
    ContainerPointer containerpointer;
    private Container container;
    @Mock
    private Container mockContainer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private DOMNodePointer domNodePointer;
    private ContainerPointer containerPointer;
    private NodePointer valuePointer;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Locale locale;
    @Mock
    private QName name;
    @Mock
    private NodeIterator mockNodeIterator;
    @Mock
    private VariablePointer mockVariablePointer;
    @Mock
    private DocumentContainer mockDocumentContainer;
    @Mock
    private Locale mockLocale;
    @Mock
    private QName mockQName;
    @Mock
    private DOMNodePointer mockDOMNodePointer;
    @Mock
    private DocumentContainer documentContainer;
    private VariablePointer variablePointer;
    private QName qName;
    @Mock
    private DOMNodePointer domNodePointerMock;
    @Mock
    private NodeIterator nodeIteratorMock;
    @Mock
    private VariablePointer variablePointerMock;
    @Mock
    private DocumentContainer documentContainerMock;
    @Mock
    private QName qNameMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        containerpointer = new ContainerPointer(Mockito.mock(DOMNodePointer.class), Mockito.mock(DocumentContainer.class));
        NodePointer pointer1 = Mockito.mock(NodePointer.class);
        NodePointer pointer2 = Mockito.mock(NodePointer.class);
        when(pointer1.getIndex()).thenReturn(1);
        when(pointer2.getIndex()).thenReturn(2);
        int actual = containerpointer.compareChildNodePointers(pointer1, pointer2);
        int expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals2_qQqv1() {
        VariablePointer variablePointer1 = new VariablePointer(new KeywordVariables("keyword1", "object1"), new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword1", "object1"), new QName("name1"));
        assertTrue(variablePointer1.equals(variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        containerpointer = new ContainerPointer(null, mockContainer);
        // Mock the behavior of the container object
        when(mockContainer.hashCode()).thenReturn(123);
        // Call the hashCode method on the container pointer
        int hashCode = containerpointer.hashCode();
        // Assert that the hashCode value returned by the container pointer matches the expected value
        assertEquals(123, hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() {
        containerPointer = new ContainerPointer(mockVariablePointer, mockDocumentContainer);
        when(mockVariablePointer.attributeIterator(mockQName)).thenReturn(mockNodeIterator);
        NodeIterator actualNodeIterator = containerPointer.attributeIterator(mockQName);
        assertEquals(mockNodeIterator, actualNodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer() {
        containerPointer = new ContainerPointer(mockDOMNodePointer, mockDocumentContainer);
        when(mockDOMNodePointer.getValuePointer()).thenReturn(mockDOMNodePointer);
        when(mockDOMNodePointer.namespacePointer("namespace")).thenReturn(mockDOMNodePointer);
        NodePointer namespacePointer = containerPointer.namespacePointer("namespace");
        verify(mockDOMNodePointer, times(1)).getValuePointer();
        verify(mockDOMNodePointer, times(1)).namespacePointer("namespace");
        assertEquals(mockDOMNodePointer, namespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() throws Exception {
        containerpointer = new ContainerPointer(Mockito.mock(DOMNodePointer.class), Mockito.mock(DocumentContainer.class));
        NodePointer nodePointer = Mockito.mock(NodePointer.class);
        NodeTest nodeTest = Mockito.mock(NodeTest.class);
        NodeIterator nodeIterator = containerpointer.childIterator(nodeTest, true, nodePointer);
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithParent_Nmyz0() {
        ContainerPointer containerPointer = new ContainerPointer(new DOMNodePointer(null, null, null), new DocumentContainer(null));
        assertEquals("/", containerPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParent_pMbF1() {
        ContainerPointer containerPointer = new ContainerPointer(null, new DocumentContainer(null));
        assertEquals("/", containerPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator() throws Exception {
        containerPointer = new ContainerPointer(variablePointerMock, documentContainerMock);
        when(variablePointerMock.getValuePointer()).thenReturn(domNodePointerMock);
        when(domNodePointerMock.namespaceIterator()).thenReturn(nodeIteratorMock);
        NodeIterator actualNodeIterator = containerPointer.namespaceIterator();
        assertEquals(nodeIteratorMock, actualNodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_fid1() throws Exception {
        containerPointer = new ContainerPointer(variablePointerMock, documentContainerMock);
        when(variablePointerMock.getValuePointer()).thenReturn(domNodePointerMock);
        when(domNodePointerMock.namespaceIterator()).thenReturn(nodeIteratorMock);
        NodeIterator actualNodeIterator = containerPointer.namespaceIterator();
        assertNull(nodeIteratorMock);
    }
}