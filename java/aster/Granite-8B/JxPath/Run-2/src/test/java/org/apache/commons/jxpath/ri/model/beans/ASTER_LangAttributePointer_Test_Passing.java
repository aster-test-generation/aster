/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LangAttributePointer_Test_Passing {
    private LangAttributePointer langattributepointer;
    private NodePointer parent;
    private NodePointer pointer1;
    private NodePointer pointer2;
    private LangAttributePointer otherLangattributepointer;
    private NodeTest test;
    private VariablePointer variablePointer;
    private KeywordVariables keywordVariables;
    private DOMNodePointer domNodePointer;
    private QName qName;
    private QName name;
    private KeywordVariables variables;
    private LangAttributePointer langAttributePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() {
        parent = mock(DOMNodePointer.class);
        pointer1 = mock(DOMNodePointer.class);
        pointer2 = mock(DOMNodePointer.class);
        langattributepointer = new LangAttributePointer(parent);
        // Set up expectations
        when(pointer1.getName()).thenReturn(new QName("name1"));
        when(pointer2.getName()).thenReturn(new QName("name2"));
        // Call the method under test
        int result = langattributepointer.compareChildNodePointers(pointer1, pointer2);
        // Verify the result
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject() {
        langattributepointer = new LangAttributePointer(Mockito.mock(DOMNodePointer.class));
        otherLangattributepointer = new LangAttributePointer(Mockito.mock(DOMNodePointer.class));
        assertTrue(langattributepointer.equals(langattributepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull() {
        langattributepointer = new LangAttributePointer(Mockito.mock(DOMNodePointer.class));
        otherLangattributepointer = new LangAttributePointer(Mockito.mock(DOMNodePointer.class));
        assertFalse(langattributepointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass() {
        langattributepointer = new LangAttributePointer(Mockito.mock(DOMNodePointer.class));
        otherLangattributepointer = new LangAttributePointer(Mockito.mock(DOMNodePointer.class));
        assertFalse(langattributepointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObject() {
        langattributepointer = new LangAttributePointer(Mockito.mock(DOMNodePointer.class));
        otherLangattributepointer = new LangAttributePointer(Mockito.mock(DOMNodePointer.class));
        assertTrue(langattributepointer.equals(otherLangattributepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testhashCode() throws Exception {
        langattributepointer = new LangAttributePointer(Mockito.mock(DOMNodePointer.class));
        assertEquals(0, langattributepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath() {
        parent = mock(DOMNodePointer.class);
        langAttributePointer = new LangAttributePointer(parent);
        when(parent.asPath()).thenReturn("/parent/path");
        assertEquals("/parent/path/@xml:lang", langAttributePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNullParent_oiGo0() {
        LangAttributePointer pointer = new LangAttributePointer(null);
        assertEquals("@xml:lang", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() {
        parent = mock(DOMNodePointer.class);
        when(parent.getLocale()).thenReturn(Locale.ENGLISH);
        langattributepointer = new LangAttributePointer(parent);
        assertEquals("en", langattributepointer.getBaseValue());
    }
}