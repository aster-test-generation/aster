/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.Enumeration;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletContext;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ServletContextHandler_Test_Failing {
    private static int DEFAULT_PROPERTY_COUNT = 16;
    private ServletContextHandler servletContextHandler;
    private ServletContext servletContext;
    ServletContextHandler servletcontexthandler;
    HashSet<String> set;
    Enumeration<String> enumeration;
    HttpSessionAndServletContext httpSessionAndServletContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_mCUC0() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        Object context = new Object(); // Assuming context is of type Object
        String[] propertyNames = servletContextHandler.getPropertyNames(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_LLLc0() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        ServletContext servletContext = new MockServletContext();
        String property = "testProperty";
        Object expected = "testValue";
        servletContext.setAttribute(property, expected);
        Object actual = servletContextHandler.getProperty(servletContext, property);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcollectPropertyNames() throws Exception {
        set = new HashSet<>();
        enumeration = mock(Enumeration.class);
        servletContext = mock(ServletContext.class);
        httpSessionAndServletContext = mock(HttpSessionAndServletContext.class);
        when(httpSessionAndServletContext.getServletContext()).thenReturn(servletContext);
        when(servletContext.getAttributeNames()).thenReturn(enumeration);
        servletContextHandler = new ServletContextHandler();
        servletContextHandler.collectPropertyNames(set, httpSessionAndServletContext);
        verify(servletContext).getAttributeNames();
        verify(set).add("attributeName");
    }
}