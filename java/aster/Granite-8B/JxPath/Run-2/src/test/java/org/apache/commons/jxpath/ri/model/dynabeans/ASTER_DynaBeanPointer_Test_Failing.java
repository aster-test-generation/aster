/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Failing {
    private QName name;
    private DynaBean dynaBean;
    private DynaBeanPointer dynabeanpointer;
    private Locale locale;
    private KeywordVariables variables;
    @Mock
    private DynaBean dynaBeanMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 1: Compare with null
        // Test case 2: Compare with different class
        // Test case 3: Compare with same object
        // Test case 4: Compare with equal object
        DynaBeanPointer other = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 5: Compare with different name
        QName otherName = mock(QName.class);
        when(otherName.equals(name)).thenReturn(false);
        DynaBeanPointer otherPointer = new DynaBeanPointer(otherName, dynaBean, Locale.getDefault());
        // Test case 6: Compare with different dynaBean
        DynaBean otherDynaBean = mock(DynaBean.class);
        when(otherDynaBean.equals(dynaBean)).thenReturn(false);
        DynaBeanPointer otherPointer2 = new DynaBeanPointer(name, otherDynaBean, Locale.getDefault());
        // Test case 7: Compare with different locale
        Locale otherLocale = Locale.CANADA_FRENCH;
        DynaBeanPointer otherPointer3 = new DynaBeanPointer(name, dynaBean, otherLocale);
        assertFalse(dynabeanpointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 1: Compare with null
        // Test case 2: Compare with different class
        // Test case 3: Compare with same object
        // Test case 4: Compare with equal object
        DynaBeanPointer other = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 5: Compare with different name
        QName otherName = mock(QName.class);
        when(otherName.equals(name)).thenReturn(false);
        DynaBeanPointer otherPointer = new DynaBeanPointer(otherName, dynaBean, Locale.getDefault());
        // Test case 6: Compare with different dynaBean
        DynaBean otherDynaBean = mock(DynaBean.class);
        when(otherDynaBean.equals(dynaBean)).thenReturn(false);
        DynaBeanPointer otherPointer2 = new DynaBeanPointer(name, otherDynaBean, Locale.getDefault());
        // Test case 7: Compare with different locale
        Locale otherLocale = Locale.CANADA_FRENCH;
        DynaBeanPointer otherPointer3 = new DynaBeanPointer(name, dynaBean, otherLocale);
        assertFalse(dynabeanpointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 1: Compare with null
        // Test case 2: Compare with different class
        // Test case 3: Compare with same object
        // Test case 4: Compare with equal object
        DynaBeanPointer other = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 5: Compare with different name
        QName otherName = mock(QName.class);
        when(otherName.equals(name)).thenReturn(false);
        DynaBeanPointer otherPointer = new DynaBeanPointer(otherName, dynaBean, Locale.getDefault());
        // Test case 6: Compare with different dynaBean
        DynaBean otherDynaBean = mock(DynaBean.class);
        when(otherDynaBean.equals(dynaBean)).thenReturn(false);
        DynaBeanPointer otherPointer2 = new DynaBeanPointer(name, otherDynaBean, Locale.getDefault());
        // Test case 7: Compare with different locale
        Locale otherLocale = Locale.CANADA_FRENCH;
        DynaBeanPointer otherPointer3 = new DynaBeanPointer(name, dynaBean, otherLocale);
        assertTrue(dynabeanpointer.equals(dynabeanpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 1: Compare with null
        // Test case 2: Compare with different class
        // Test case 3: Compare with same object
        // Test case 4: Compare with equal object
        DynaBeanPointer other = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 5: Compare with different name
        QName otherName = mock(QName.class);
        when(otherName.equals(name)).thenReturn(false);
        DynaBeanPointer otherPointer = new DynaBeanPointer(otherName, dynaBean, Locale.getDefault());
        // Test case 6: Compare with different dynaBean
        DynaBean otherDynaBean = mock(DynaBean.class);
        when(otherDynaBean.equals(dynaBean)).thenReturn(false);
        DynaBeanPointer otherPointer2 = new DynaBeanPointer(name, otherDynaBean, Locale.getDefault());
        // Test case 7: Compare with different locale
        Locale otherLocale = Locale.CANADA_FRENCH;
        DynaBeanPointer otherPointer3 = new DynaBeanPointer(name, dynaBean, otherLocale);
        assertTrue(dynabeanpointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_5() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 1: Compare with null
        // Test case 2: Compare with different class
        // Test case 3: Compare with same object
        // Test case 4: Compare with equal object
        DynaBeanPointer other = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 5: Compare with different name
        QName otherName = mock(QName.class);
        when(otherName.equals(name)).thenReturn(false);
        DynaBeanPointer otherPointer = new DynaBeanPointer(otherName, dynaBean, Locale.getDefault());
        // Test case 6: Compare with different dynaBean
        DynaBean otherDynaBean = mock(DynaBean.class);
        when(otherDynaBean.equals(dynaBean)).thenReturn(false);
        DynaBeanPointer otherPointer2 = new DynaBeanPointer(name, otherDynaBean, Locale.getDefault());
        // Test case 7: Compare with different locale
        Locale otherLocale = Locale.CANADA_FRENCH;
        DynaBeanPointer otherPointer3 = new DynaBeanPointer(name, dynaBean, otherLocale);
        assertFalse(dynabeanpointer.equals(otherPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_6() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 1: Compare with null
        // Test case 2: Compare with different class
        // Test case 3: Compare with same object
        // Test case 4: Compare with equal object
        DynaBeanPointer other = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 5: Compare with different name
        QName otherName = mock(QName.class);
        when(otherName.equals(name)).thenReturn(false);
        DynaBeanPointer otherPointer = new DynaBeanPointer(otherName, dynaBean, Locale.getDefault());
        // Test case 6: Compare with different dynaBean
        DynaBean otherDynaBean = mock(DynaBean.class);
        when(otherDynaBean.equals(dynaBean)).thenReturn(false);
        DynaBeanPointer otherPointer2 = new DynaBeanPointer(name, otherDynaBean, Locale.getDefault());
        // Test case 7: Compare with different locale
        Locale otherLocale = Locale.CANADA_FRENCH;
        DynaBeanPointer otherPointer3 = new DynaBeanPointer(name, dynaBean, otherLocale);
        assertFalse(dynabeanpointer.equals(otherPointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_7() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 1: Compare with null
        // Test case 2: Compare with different class
        // Test case 3: Compare with same object
        // Test case 4: Compare with equal object
        DynaBeanPointer other = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 5: Compare with different name
        QName otherName = mock(QName.class);
        when(otherName.equals(name)).thenReturn(false);
        DynaBeanPointer otherPointer = new DynaBeanPointer(otherName, dynaBean, Locale.getDefault());
        // Test case 6: Compare with different dynaBean
        DynaBean otherDynaBean = mock(DynaBean.class);
        when(otherDynaBean.equals(dynaBean)).thenReturn(false);
        DynaBeanPointer otherPointer2 = new DynaBeanPointer(name, otherDynaBean, Locale.getDefault());
        // Test case 7: Compare with different locale
        Locale otherLocale = Locale.CANADA_FRENCH;
        DynaBeanPointer otherPointer3 = new DynaBeanPointer(name, dynaBean, otherLocale);
        assertFalse(dynabeanpointer.equals(otherPointer3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals2_IOAE1() {
        VariablePointer variablePointer1 = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        assertTrue(variablePointer1.equals(variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        name = Mockito.mock(QName.class);
        dynaBean = Mockito.mock(DynaBean.class);
        locale = Locale.ENGLISH;
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        Mockito.when(name.hashCode()).thenReturn(123);
        assertEquals(123, dynabeanpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_bgRv0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        assertEquals(0, variablePointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_cZsy1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("", null), new QName(""));
        assertEquals(0, variablePointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_OGMt2() {
        KeywordVariables keywordVariables = new KeywordVariables("", null);
        assertEquals(0, keywordVariables.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_fYLW3() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        assertEquals(0, domNodePointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_avAd0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        assertEquals("/", variablePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_jmUS1() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("name"));
        assertEquals("/", variablePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        dynaBean = dynaBeanMock;
        dynabeanpointer = new DynaBeanPointer(new QName("name"), dynaBean, Locale.getDefault());
        when(dynaBeanMock.get("name")).thenReturn("value");
        assertEquals("value", dynabeanpointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerGetBaseValue_qIug0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        assertEquals(null, variablePointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        name = mock(QName.class);
        dynaBean = mock(DynaBean.class);
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        // Test case 1: Compare with null
        assertFalse(dynabeanpointer.equals(null));
        // Test case 2: Compare with different class
        assertFalse(dynabeanpointer.equals(new Object()));
        // Test case 3: Compare with same object
        assertTrue(dynabeanpointer.equals(dynabeanpointer));
        // Test case 4: Compare with equal object
        DynaBeanPointer other = new DynaBeanPointer(name, dynaBean, Locale.getDefault());
        assertTrue(dynabeanpointer.equals(other));
        // Test case 5: Compare with different name
        QName otherName = mock(QName.class);
        when(otherName.equals(name)).thenReturn(false);
        DynaBeanPointer otherPointer = new DynaBeanPointer(otherName, dynaBean, Locale.getDefault());
        assertFalse(dynabeanpointer.equals(otherPointer));
        // Test case 6: Compare with different dynaBean
        DynaBean otherDynaBean = mock(DynaBean.class);
        when(otherDynaBean.equals(dynaBean)).thenReturn(false);
        DynaBeanPointer otherPointer2 = new DynaBeanPointer(name, otherDynaBean, Locale.getDefault());
        assertFalse(dynabeanpointer.equals(otherPointer2));
        // Test case 7: Compare with different locale
        Locale otherLocale = Locale.CANADA_FRENCH;
        DynaBeanPointer otherPointer3 = new DynaBeanPointer(name, dynaBean, otherLocale);
        assertFalse(dynabeanpointer.equals(otherPointer3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_cZsy1_fid2() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("", null), new QName(""));
        assertEquals(-1677302088, variablePointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_OGMt2_fid2() {
        KeywordVariables keywordVariables = new KeywordVariables("", null);
        assertEquals(1982965764, keywordVariables.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerGetBaseValue_qIug0_fid2() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        variablePointer.getBaseValue();
    }
}