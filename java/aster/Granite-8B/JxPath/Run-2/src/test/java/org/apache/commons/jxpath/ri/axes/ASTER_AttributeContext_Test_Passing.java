/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeContext_Test_Passing {
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    private AttributeContext attributecontext;
    private NodeIterator iterator;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    @Mock
    private NodePointer rootNode;
    @Mock
    private Locale locale;
    @Mock
    private JXPathContext context;
    @Mock
    private Pointer pointer;
    @Mock
    private Pointer pointer1;
    @Mock
    private Pointer pointer2;
    @Mock
    private Pointer pointer3;
    @Mock
    private Pointer pointer4;
    @Mock
    private Pointer pointer5;
    @Mock
    private Pointer pointer6;
    @Mock
    private Pointer pointer7;
    @Mock
    private Pointer pointer8;
    @Mock
    private Pointer pointer9;
    @Mock
    private Pointer pointer10;
    @Mock
    private Pointer pointer11;
    @Mock
    private Pointer pointer12;
    @Mock
    private Pointer pointer13;
    @Mock
    private Pointer pointer14;
    @Mock
    private Pointer pointer15;
    @Mock
    private Pointer pointer16;
    @Mock
    private Pointer pointer17;
    @Mock
    private Pointer pointer18;
    @Mock
    private Pointer pointer19;
    @Mock
    private Pointer pointer20;
    @Mock
    private Pointer pointer21;
    @Mock
    private Pointer pointer22;
    @Mock
    private Pointer pointer23;
    @Mock
    private Pointer pointer24;
    @Mock
    private Pointer pointer25;
    @Mock
    private Pointer pointer26;
    @Mock
    private Pointer pointer27;
    @Mock
    private Pointer pointer28;
    @Mock
    private Pointer pointer29;
    @Mock
    private Pointer pointer30;
    @Mock
    private Pointer pointer31;
    @Mock
    private Pointer pointer32;
    @Mock
    private Pointer pointer33;
    @Mock
    private Pointer pointer34;
    @Mock
    private Pointer pointer35;
    @Mock
    private Pointer pointer36;
    @Mock
    private Pointer pointer37;
    @Mock
    private Pointer pointer38;
    @Mock
    private Pointer pointer39;
    @Mock
    private Pointer pointer40;
    @Mock
    private Pointer pointer41;
    @Mock
    private Pointer pointer42;
    @Mock
    private Pointer pointer43;
    @Mock
    private Pointer pointer44;
    @Mock
    private Pointer pointer45;
    @Mock
    private Pointer pointer46;
    @Mock
    private Pointer pointer47;
    @Mock
    private Pointer pointer48;
    @Mock
    private Pointer pointer49;
    @Mock
    private Pointer pointer50;
    @Mock
    private Pointer pointer51;
    @Mock
    private Pointer pointer52;
    @Mock
    private Pointer pointer53;
    @Mock
    private Pointer pointer54;
    @Mock
    private Pointer pointer55;
    @Mock
    private Pointer pointer56;
    @Mock
    private Pointer pointer57;
    @Mock
    private Pointer pointer58;
    @Mock
    private Pointer pointer59;
    @Mock
    private Pointer pointer60;
    @Mock
    private Pointer pointer61;
    @Mock
    private Pointer pointer62;
    @Mock
    private Pointer pointer63;
    @Mock
    private Pointer pointer64;
    @Mock
    private Pointer pointer65;
    @Mock
    private Pointer pointer66;
    @Mock
    private Pointer pointer67;
    @Mock
    private Pointer pointer68;
    @Mock
    private Pointer pointer69;
    @Mock
    private Pointer pointer70;
    @Mock
    private Pointer pointer71;
    @Mock
    private Pointer pointer72;
    @Mock
    private Pointer pointer73;
    @Mock
    private Pointer pointer74;
    @Mock
    private Pointer pointer75;
    @Mock
    private Pointer pointer76;
    @Mock
    private Pointer pointer77;
    @Mock
    private Pointer pointer78;
    @Mock
    private Pointer pointer79;
    @Mock
    private Pointer pointer80;
    @Mock
    private Pointer pointer81;
    @Mock
    private Pointer pointer82;
    @Mock
    private Pointer pointer83;
    @Mock
    private Pointer pointer84;
    @Mock
    private Pointer pointer85;
    @Mock
    private Pointer pointer86;
    @Mock
    private Pointer pointer87;
    @Mock
    private Pointer pointer88;
    @Mock
    private Pointer pointer89;
    @Mock
    private Pointer pointer90;
    @Mock
    private Pointer pointer91;
    @Mock
    private Pointer pointer92;
    @Mock
    private Pointer pointer93;
    @Mock
    private Pointer pointer94;
    private static QName WILDCARD = new QName(null, "*");
    private SelfContext selfContext;
    @Mock
    private NodePointer nodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_PRoX0() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = attributeContext.setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_KNjB1() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = attributeContext.setPosition(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_YTzb2() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = attributeContext.setPosition(3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition4_tyAm3() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = attributeContext.setPosition(4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_kLaT0() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        attributeContext.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_nQVw0() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = attributeContext.nextNode();
    }
}