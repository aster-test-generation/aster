/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationNegate_Test_Passing {
    @Mock
    private Constant arg;
    @Mock
    private EvalContext context;
    private CoreOperationNegate coreoperationnegate;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_LrvM0() {
        Constant constant = new Constant("string");
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        String expectedSymbol = "-";
        String actualSymbol = coreOperationNegate.getSymbol();
        assertEquals(expectedSymbol, actualSymbol);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        coreoperationnegate = new CoreOperationNegate(arg);
        final double a = 10.5;
        Mockito.when(arg.computeValue(context)).thenReturn(Double.valueOf(a));
        final Object result = coreoperationnegate.computeValue(context);
        Mockito.verify(arg, Mockito.times(1)).computeValue(context);
        Mockito.verifyNoMoreInteractions(arg);
        Assertions.assertEquals(-a, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_jQBB0() {
        Constant constant = new Constant("string");
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        boolean result = coreOperationNegate.isSymmetric();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetricWithNumber_HKQt1() {
        Constant constant = new Constant(1);
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        boolean result = coreOperationNegate.isSymmetric();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 6, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_adgq0() {
        Constant constant = new Constant("string");
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(constant);
        int expected = 6;
        int actual = coreOperationNegate.getPrecedence();
        assertEquals(expected, actual);
    }
}