/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Collections;
import java.util.Iterator;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.*;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.TreeCompiler;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.NodePointerFactory;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathContextReferenceImpl_Test_Passing {
    @Mock
    private NodePointer contextPointer;
    @Mock
    private Locale locale;
    @Mock
    private KeywordVariables variables;
    @Mock
    private QName name;
    @Mock
    private JXPathContext parentContext;
    @Mock
    private Object contextBean;
    private JXPathContextReferenceImpl jxpathcontextreferenceimpl;
    @Mock
    private Pointer pointer;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private QName qName;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private EvalContext evalContext;
    @Mock
    private Expression expr;
    @Mock
    private EvalContext ctx;
    @Mock
    private NodePointer result;
    @Mock
    private NodePointer ctxResult;
    @Mock
    private NodePointer ctxResultValuePointer;
    @Mock
    private NodePointer ctxResultValuePointerValue;
    @Mock
    private NodePointer ctxResultValuePointerValuePointer;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private NodePointer ctxResultValuePointerValuePointerParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParentParent;
    @Mock
    private EvalContext context;
    @Mock
    private Iterator iterator;
    private static Vector nodeFactories = new Vector();
    private static NodePointerFactory[] nodeFactoryArray = null;
    DOMNodePointer domNodePointer;
    @Mock
    private NodePointerFactory nodePointerFactory;
    @Mock
    private String xpath;
    @Mock
    private String qualifiedName;
    @Mock
    private String prefix;
    @Mock
    private String localName;
    @Mock
    private Expression expression;
    @Mock
    private NamespaceResolver namespaceResolver;
    @Mock
    private Expression compiledExpression;
    private Pointer rootPointer;
    private ExceptionHandler exceptionHandler;
    private static Compiler COMPILER = new TreeCompiler();
    @Mock
    private Functions functions;
    @Mock
    private QName functionName;
    @Mock
    private Iterator it;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePath_aqZk0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.removePath("xpath", null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratePointers_XfPu0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "some xpath";
        Iterator iterator = jxpathContextReferenceImpl.iteratePointers(xpath);
        assertNotNull(iterator);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiterate() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        Expression expr = mock(Expression.class);
        when(expr.iterate(any(EvalContext.class))).thenReturn(Collections.emptyList().iterator());
        Iterator iterator = jxpathcontextreferenceimpl.iterate("xpath", expr);
        assertEquals(Collections.emptyList().iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate() {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(parentContext, contextBean, contextPointer);
        // Mock the expected behavior of the iterate method
        Iterator iterator = mock(Iterator.class);
        when(jxpathcontextreferenceimpl.iterate("xpath")).thenReturn(iterator);
        // Call the iterate method and verify the result
        assertEquals(iterator, jxpathcontextreferenceimpl.iterate("xpath"));
        // Verify that the iterate method was called with the correct arguments
        verify(jxpathcontextreferenceimpl).iterate("xpath", any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateConditionally_KXlL0() {
        String className = "com.example.ClassName";
        String existenceCheckClassName = "com.example.ExistenceCheckClassName";
        Object result = JXPathContextReferenceImpl.allocateConditionally(className, existenceCheckClassName);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointerFactories() {
        nodeFactoryArray = new NodePointerFactory[1];
        nodeFactoryArray[0] = nodePointerFactory;
        when(jxpathcontextreferenceimpl.getNodePointerFactories()).thenReturn(nodeFactoryArray);
        NodePointerFactory[] result = jxpathcontextreferenceimpl.getNodePointerFactories();
        assertEquals(1, result.length);
        assertEquals(nodePointerFactory, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointer_KOkY0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = jxpathContextReferenceImpl.getPointer("xpath");
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix() {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        when(namespaceResolver.getPrefix("namespaceURI")).thenReturn("prefix");
        String prefix = jxpathcontextreferenceimpl.getPrefix("namespaceURI");
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_jGmB0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String namespaceURI = "namespaceURI";
        String prefix = jxpathContextReferenceImpl.getPrefix(namespaceURI);
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceContextPointer() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        jxpathcontextreferenceimpl.namespaceResolver = mock(NamespaceResolver.class);
        Pointer pointer = jxpathcontextreferenceimpl.getNamespaceContextPointer();
        verify(jxpathcontextreferenceimpl.namespaceResolver).getNamespaceContextPointer();
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceContextPointer_AxCL0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Pointer namespaceContextPointer = jxpathContextReferenceImpl.getNamespaceContextPointer();
        assertNotNull(namespaceContextPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePath_hdUU0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.removePath("xpath");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContextPointer_UMiO0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Pointer contextPointer = jxpathContextReferenceImpl.getContextPointer();
        assertNotNull(contextPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContextPointerWithContextBean_Eglt2() {
        Object contextBean = new Object();
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, contextBean);
        Pointer contextPointer = jxpathContextReferenceImpl.getContextPointer();
        assertNotNull(contextPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_oeNd0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = jxpathContextReferenceImpl.createPath("xpath");
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointerDOMNodePointer_NMor1() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        jxpathContextReferenceImpl.setNamespaceContextPointer(domNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointerVariablePointer_VUGw2() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        VariablePointer variablePointer = new VariablePointer(null, null);
        jxpathContextReferenceImpl.setNamespaceContextPointer(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_PmQJ0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "xpath";
        Object value = new Object();
        jxpathContextReferenceImpl.setValue(xpath, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetExceptionHandlerWithNullExceptionHandler_yXcO1() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        ExceptionHandler exceptionHandler = null;
        assertThrows(IllegalArgumentException.class, () -> jxpathContextReferenceImpl.setExceptionHandler(exceptionHandler));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompiler() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(jxpathcontextreferenceimpl.getCompiler()).thenReturn(COMPILER);
        assertEquals(COMPILER, jxpathcontextreferenceimpl.getCompiler());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCompiler_qGZs0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Compiler compiler = jxpathContextReferenceImpl.getCompiler();
        assertNotNull(compiler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRelativeContext() {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        when(pointer.getNode()).thenReturn(new Object());
        JXPathContext jxpathContext = jxpathcontextreferenceimpl.getRelativeContext(pointer);
        assertNotNull(jxpathContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFunction() throws Exception {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(parentContext, null, contextPointer);
        when(parentContext.getFunctions()).thenReturn(functions);
        when(functionName.getPrefix()).thenReturn("prefix");
        when(functionName.getName()).thenReturn("name");
        Function func = jxpathcontextreferenceimpl.getFunction(functionName, new Object[0]);
        verify(functions).getFunction("prefix", "name", new Object[0]);
        assertNotNull(func);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction1_NTHf0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("namespace", "name");
        Object[] parameters = new Object[0];
        Function function = jxpathContextReferenceImpl.getFunction(functionName, parameters);
        assertNotNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction4_UoZG3() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        QName functionName = new QName("namespace", "name");
        Object[] parameters = new Object[0];
        Function function = jxpathContextReferenceImpl.getFunction(functionName, parameters);
        assertNotEquals(null, function.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVariablePointer_aWvV0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        QName name = new QName("name");
        NodePointer variablePointer = jxpathContextReferenceImpl.getVariablePointer(name);
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithPrefixAndNamespaceURI_ZpyD0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.registerNamespace("prefix", "namespaceURI");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithPrefixAndNamespaceURI2_rXTx1() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.registerNamespace("prefix2", "namespaceURI2");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithPrefixAndNamespaceURI3_mFHQ2() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.registerNamespace("prefix3", "namespaceURI3");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithPrefixAndNamespaceURI4_fEEu3() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.registerNamespace("prefix4", "namespaceURI4");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithPrefixAndNamespaceURI5_XKQL4() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.registerNamespace("prefix5", "namespaceURI5");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithPrefixAndNamespaceURI6_xkII5() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.registerNamespace("prefix6", "namespaceURI6");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithPrefixAndNamespaceURI7_CRwh6() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.registerNamespace("prefix7", "namespaceURI7");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithPrefixAndNamespaceURI8_gHUO7() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.registerNamespace("prefix8", "namespaceURI8");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithPrefixAndNamespaceURI9_hhBf8() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.registerNamespace("prefix9", "namespaceURI9");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithPrefixAndNamespaceURI10_pDUD9() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.registerNamespace("prefix10", "namespaceURI10");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_nRqw0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "xpath";
        Object value = jxpathContextReferenceImpl.getValue(xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURI_htMY0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String prefix = "prefix";
        String namespaceURI = jxpathContextReferenceImpl.getNamespaceURI(prefix);
        assertNotNull(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver() {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        when(namespaceResolver.getPrefix(any())).thenReturn("prefix");
        when(namespaceResolver.getNamespaceURI(any())).thenReturn("namespaceURI");
        NamespaceResolver result = jxpathcontextreferenceimpl.getNamespaceResolver();
        assertEquals("prefix", result.getPrefix("namespaceURI"));
        assertEquals("namespaceURI", result.getNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceResolver_bYIq0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        NamespaceResolver namespaceResolver = jxpathContextReferenceImpl.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceResolverWithContextBean_adfo2() {
        Object contextBean = new Object();
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, contextBean);
        NamespaceResolver namespaceResolver = jxpathContextReferenceImpl.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratePointers_XfPu0_1() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "some xpath";
        Iterator iterator = jxpathContextReferenceImpl.iteratePointers(xpath);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratePointers_XfPu0_2() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "some xpath";
        Iterator iterator = jxpathContextReferenceImpl.iteratePointers(xpath);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointerFactories_1() {
        nodeFactoryArray = new NodePointerFactory[1];
        nodeFactoryArray[0] = nodePointerFactory;
        when(jxpathcontextreferenceimpl.getNodePointerFactories()).thenReturn(nodeFactoryArray);
        NodePointerFactory[] result = jxpathcontextreferenceimpl.getNodePointerFactories();
        assertEquals(1, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointerFactories_2() {
        nodeFactoryArray = new NodePointerFactory[1];
        nodeFactoryArray[0] = nodePointerFactory;
        when(jxpathcontextreferenceimpl.getNodePointerFactories()).thenReturn(nodeFactoryArray);
        NodePointerFactory[] result = jxpathcontextreferenceimpl.getNodePointerFactories();
        assertEquals(nodePointerFactory, result[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver_1() {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        when(namespaceResolver.getPrefix(any())).thenReturn("prefix");
        when(namespaceResolver.getNamespaceURI(any())).thenReturn("namespaceURI");
        NamespaceResolver result = jxpathcontextreferenceimpl.getNamespaceResolver();
        assertEquals("prefix", result.getPrefix("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver_2() {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null, null);
        when(namespaceResolver.getPrefix(any())).thenReturn("prefix");
        when(namespaceResolver.getNamespaceURI(any())).thenReturn("namespaceURI");
        NamespaceResolver result = jxpathcontextreferenceimpl.getNamespaceResolver();
        assertEquals("namespaceURI", result.getNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePathAndSetValue_W_BaxV0() {
        jxpathcontextreferenceimpl = new JXPathContextReferenceImpl(null, null);
        when(jxpathcontextreferenceimpl.createPathAndSetValue("xpath", expr, "value")).thenReturn(pointer);
        Pointer result = jxpathcontextreferenceimpl.createPathAndSetValue("xpath", expr, "value");
        verify(jxpathcontextreferenceimpl, times(1)).createPathAndSetValue("xpath", expr, "value");
        assertEquals(pointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetContextPointerWithParentContextAndContextBean_vlml3_BGIP0() {
        JXPathContext parentContext = new JXPathContextReferenceImpl(null, null);
        Object contextBean = new Object();
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(parentContext, contextBean);
        Pointer contextPointer = jxpathContextReferenceImpl.getContextPointer();
        assertNotNull(contextPointer);
    }
}