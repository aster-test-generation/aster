/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InitialContext_Test_Failing {
    private NodePointer nodePointer;
    private boolean collection;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    @Mock
    private SelfContext selfContext;
    @Mock
    private Pointer pointer;
    private InitialContext initialcontext;
    private boolean started = false;
    private NamespaceContext namespaceContext;
    private NodeTypeTest nodeTypeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_HUYY0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)));
        boolean result = initialContext.setPosition(1);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_zhrj1() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)));
        boolean result = initialContext.setPosition(0);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_HkXg2() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)));
        boolean result = initialContext.setPosition(2);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition4_RjoC3() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)));
        boolean result = initialContext.setPosition(-1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition5_tBAH4() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)));
        boolean result = initialContext.setPosition(100);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSingleNodePointer_zgVv0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)));
        Pointer nodePointer = initialContext.getSingleNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_Gazk0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), null));
        NodePointer nodePointer = initialContext.getCurrentNodePointer();
        assertEquals(NodePointer.class, nodePointer.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() {
        initialcontext = new InitialContext(parentContext);
        // Mock the behavior of the nextNode method
        when(initialcontext.nextNode()).thenReturn(true);
        // Call the nextNode method and assert the expected behavior
        assertTrue(initialcontext.nextNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_Hwfr0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)));
        boolean result = initialContext.nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_AVMW0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), null));
        Object value = initialContext.getValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_lZce0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)));
        boolean result = initialContext.nextSet();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet2_HBxC1() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)));
        boolean result = initialContext.nextSet();
        assertFalse(result);
    }
}