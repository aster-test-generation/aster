/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Passing {
    private NamespaceResolver namespaceresolver;
    private NamespaceResolver parent;
    private NodePointer pointer;
    private Locale locale;
    private String namespaceURI;
    private boolean sealed;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointerWithNull_nFMf1() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.setNamespaceContextPointer(null);
        assertNull(resolver.pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullPointer_XBHY0() {
        assertNull(NamespaceResolver.getPrefix(null, "namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNoNamespaceURI_iFPs1() {
        final VariablePointer variablePointer = new VariablePointer(new QName("name"));
        assertNull(NamespaceResolver.getPrefix(variablePointer, null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNoNamespaceFound_KbxN2() {
        final VariablePointer variablePointer = new VariablePointer(new QName("name"));
        assertNull(NamespaceResolver.getPrefix(variablePointer, "namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_ecZi0() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", resolver.namespaceMap.get("prefix"));
        assertEquals("prefix", resolver.reverseMap.get("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithSealedResolver_TvpH1() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        resolver.seal();
        try {
            resolver.registerNamespace("prefix", "namespaceURI");
            fail("Expected IllegalStateException");
        } catch (IllegalStateException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_iGtv1() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        Pointer pointer = resolver.getNamespaceContextPointer();
        assertNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealed_TQCf0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        boolean result = namespaceResolver.isSealed();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealedWithParent_ewaI1() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
        boolean result = namespaceResolver.isSealed();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSeal_fid1() {
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        namespaceresolver.seal();
        verify(parent, times(1)).seal();
        assertFalse(sealed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredPrefix_1_UXKV0_fid1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String namespaceURI = "namespaceURI";
        String prefix = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_ecZi0_1() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", resolver.namespaceMap.get("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_ecZi0_2() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("prefix", resolver.reverseMap.get("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_RKwW0_fid1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = namespaceResolver.getExternallyRegisteredNamespaceURI(prefix);
        assertNull(uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrefix_0_glaG0_fid1() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        String namespaceURI = "namespaceURI";
        String prefix = resolver.getPrefix(namespaceURI);
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceResolverGetNamespaceURI_mkaD0_fid1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = namespaceResolver.getNamespaceURI(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceResolverGetNamespaceURI2_tvar1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = namespaceResolver.getNamespaceURI(prefix);
        assertNull(uri);
    }
}