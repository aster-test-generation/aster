/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PrecedingOrFollowingContext_Test_Passing {
    PrecedingOrFollowingContext precedingorfollowingcontext;
    NamespaceContext namespaceContext;
    NodeTypeTest nodeTypeTest;
    private boolean reverse;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private NodePointer currentRootLocation;
    private Stack stack = null;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeIterator nodeIterator;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_myqk1() {
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)), new NodeTypeTest(0), true);
        boolean result = context.setPosition(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDocumentOrderForPositiveInput_pKCU0() {
        SelfContext parentContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, new NodeTypeTest(2));
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(3), false);
        assertEquals(1, precedingOrFollowingContext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDocumentOrderForNegativeInput_acfv1() {
        SelfContext parentContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(parentContext, new NodeTypeTest(2));
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(3), true);
        assertEquals(-1, precedingOrFollowingContext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_zPwJ0() {
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0), false);
        precedingOrFollowingContext.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_LAVM0() {
        SelfContext selfContext = new SelfContext(null, null);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, false);
        NodePointer currentNodePointer = precedingOrFollowingContext.getCurrentNodePointer();
        assertEquals(null, currentNodePointer);
    }
}