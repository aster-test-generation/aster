/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Passing {
    private VariablePointer variablePointer;
    private NodePointer pointer1;
    private NodePointer pointer2;
    private JXPathContext context;
    private KeywordVariables variables;
    private QName name;
    private boolean actual;
    private NodePointer valuePointer;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private QName qName;
    @Mock
    private NodeTest test;
    @Mock
    private NodePointer startWith;
    @Mock
    private NamespaceResolver namespaceResolver;
    VariablePointer variablepointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() {
        variablePointer = new VariablePointer(Mockito.mock(QName.class));
        pointer1 = Mockito.mock(NodePointer.class);
        pointer2 = Mockito.mock(NodePointer.class);
        Mockito.when(pointer1.getIndex()).thenReturn(1);
        Mockito.when(pointer2.getIndex()).thenReturn(2);
        int result = variablePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_ewYs0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        NodeIterator nodeIterator = variablePointer.attributeIterator(new QName("attributeName"));
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_WyPN0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        variablePointer.setIndex(0);
        assert variablePointer.getIndex() == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithVariables_PEbX1() {
        KeywordVariables variables = new KeywordVariables("", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, new QName(""));
        variablePointer.setIndex(0);
        assert variablePointer.getIndex() == 0;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_VIHg0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        boolean result = variablePointer.isContainer();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerWithVariables_heMi1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, new QName("prefix", "localName"));
        boolean result = variablePointer.isContainer();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValueWithKeywordVariables_NFWN1() {
        KeywordVariables variables = new KeywordVariables("example", new Object());
        QName name = new QName("example");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        Object baseValue = variablePointer.getBaseValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_ZgJe0_1_fid1() {
        VariablePointer variablePointer1 = new VariablePointer(new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new QName("name2"));
        assertEquals(0, variablePointer1.compareChildNodePointers(variablePointer1, variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthWithActualFalse_rVOV1_fid1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("", new Object()), new QName(""));
        int length = variablePointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_lVok0_fid1() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        boolean actual = variablePointer.isActual();
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualWithVariables_PAkc1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, new QName("prefix", "localName"));
        boolean actual = variablePointer.isActual();
        assertTrue(actual);
    }
}