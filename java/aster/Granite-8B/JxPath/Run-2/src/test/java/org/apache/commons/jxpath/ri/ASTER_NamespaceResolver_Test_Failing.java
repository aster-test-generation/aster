/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.HashMap;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Failing {
    private NamespaceResolver namespaceresolver;
    private NamespaceResolver parent;
    private NodePointer pointer;
    private Locale locale;
    private String namespaceURI;
    private boolean sealed;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix() {
        pointer = mock(NodePointer.class);
        locale = Locale.getDefault();
        namespaceURI = "http://example.com";
        when(pointer.getParent()).thenReturn(null);
        String prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        assertEquals("", prefix);
        when(pointer.getParent()).thenReturn(mock(NodePointer.class));
        prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        assertEquals("", prefix);
        NodeIterator ni = mock(NodeIterator.class);
        when(pointer.namespaceIterator()).thenReturn(ni);
        when(ni.getPosition()).thenReturn(1);
        NodePointer nsPointer = mock(NodePointer.class);
        when(nsPointer.getNamespaceURI()).thenReturn(namespaceURI);
        when(nsPointer.getName()).thenReturn(new QName("prefix"));
        when(ni.getNodePointer()).thenReturn(nsPointer);
        prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSeal() {
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        namespaceresolver.seal();
        verify(parent, times(1)).seal();
        assertTrue(sealed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetNamespaceContextPointer() throws Exception {
        namespaceresolver = new NamespaceResolver();
        NodePointer pointer = mock(NodePointer.class);
        namespaceresolver.setNamespaceContextPointer(pointer);
        verify(namespaceresolver).setNamespaceContextPointer(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredPrefix() {
        namespaceresolver = new NamespaceResolver(parent);
        String namespaceURI = "test";
        String prefix = "testPrefix";
        when(parent.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(prefix);
        String result = namespaceresolver.getExternallyRegisteredPrefix(namespaceURI);
        assertEquals(prefix, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredPrefix_1_UXKV0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String namespaceURI = "namespaceURI";
        String prefix = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI() {
        MockitoAnnotations.openMocks(this);
        // given
        String prefix = "prefix";
        String uri = "uri";
        when(namespaceresolver.namespaceMap.get(prefix)).thenReturn(uri);
        // when
        String result = namespaceresolver.getExternallyRegisteredNamespaceURI(prefix);
        // then
        assertEquals(uri, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURIWithNullUri() {
        MockitoAnnotations.openMocks(this);
        // given
        String prefix = "prefix";
        when(namespaceresolver.namespaceMap.get(prefix)).thenReturn(null);
        when(parent.getExternallyRegisteredNamespaceURI(prefix)).thenReturn("parentUri");
        // when
        String result = namespaceresolver.getExternallyRegisteredNamespaceURI(prefix);
        // then
        assertEquals("parentUri", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_RKwW0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = namespaceResolver.getExternallyRegisteredNamespaceURI(prefix);
        assertEquals("uri", uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrefix_0_glaG0() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        String namespaceURI = "namespaceURI";
        String prefix = resolver.getPrefix(namespaceURI);
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() {
        namespaceresolver = new NamespaceResolver(parent);
        // arrange
        final String prefix = "prefix";
        final String expectedUri = "uri";
        // mock the parent's getNamespaceURI method
        when(parent.getNamespaceURI(prefix)).thenReturn(expectedUri);
        // act
        final String actualUri = namespaceresolver.getNamespaceURI(prefix);
        // assert
        assertEquals(expectedUri, actualUri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceResolverGetNamespaceURI_mkaD0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = namespaceResolver.getNamespaceURI(prefix);
        assertEquals("uri", uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceContextPointer() throws Exception {
        namespaceresolver = new NamespaceResolver(parent);
        Pointer pointerMock = mock(Pointer.class);
        when(parent.getNamespaceContextPointer()).thenReturn(pointerMock);
        Pointer result = namespaceresolver.getNamespaceContextPointer();
        verify(parent, times(1)).getNamespaceContextPointer();
        assertEquals(pointerMock, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_Fouc0() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        Pointer pointer = resolver.getNamespaceContextPointer();
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_sXhc2() {
        NamespaceResolver resolver = new NamespaceResolver(new NamespaceResolver(null));
        Pointer pointer = resolver.getNamespaceContextPointer();
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisSealed() throws Exception {
        sealed = false;
        namespaceresolver = new NamespaceResolver(null);
        when(namespaceresolver.isSealed()).thenReturn(sealed);
        assertEquals(sealed, namespaceresolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_Q_iWZD0() {
        namespaceresolver = new NamespaceResolver(parent);
        when(parent.getPrefix(anyString())).thenReturn("prefix");
        String namespaceURI = "namespaceURI";
        String prefix = namespaceresolver.getPrefix(namespaceURI);
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_1() {
        pointer = mock(NodePointer.class);
        locale = Locale.getDefault();
        namespaceURI = "http://example.com";
        when(pointer.getParent()).thenReturn(null);
        String prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        when(pointer.getParent()).thenReturn(mock(NodePointer.class));
        prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        NodeIterator ni = mock(NodeIterator.class);
        when(pointer.namespaceIterator()).thenReturn(ni);
        when(ni.getPosition()).thenReturn(1);
        NodePointer nsPointer = mock(NodePointer.class);
        when(nsPointer.getNamespaceURI()).thenReturn(namespaceURI);
        when(nsPointer.getName()).thenReturn(new QName("prefix"));
        when(ni.getNodePointer()).thenReturn(nsPointer);
        prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        assertEquals("", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_3() {
        pointer = mock(NodePointer.class);
        locale = Locale.getDefault();
        namespaceURI = "http://example.com";
        when(pointer.getParent()).thenReturn(null);
        String prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        when(pointer.getParent()).thenReturn(mock(NodePointer.class));
        prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        NodeIterator ni = mock(NodeIterator.class);
        when(pointer.namespaceIterator()).thenReturn(ni);
        when(ni.getPosition()).thenReturn(1);
        NodePointer nsPointer = mock(NodePointer.class);
        when(nsPointer.getNamespaceURI()).thenReturn(namespaceURI);
        when(nsPointer.getName()).thenReturn(new QName("prefix"));
        when(ni.getNodePointer()).thenReturn(nsPointer);
        prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        assertEquals("prefix", prefix);
    }
}