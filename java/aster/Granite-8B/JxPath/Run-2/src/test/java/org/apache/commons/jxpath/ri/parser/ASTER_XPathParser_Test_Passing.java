/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Passing {
    private int[] jj_la1 = new int[39];
    private Compiler compiler;
    private int jj_gen;
    XPathParser xpathparser;
    @Mock
    SimpleCharStream simpleCharStream;
    private int jj_endpos;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    private int jj_kind = -1;
    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    static private int[] jj_la1_0;
    private Token jj_scanpos, jj_lastpos;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.InputStream stream) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final SimpleCharStream stream) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final SimpleCharStream stream, final int lexState) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.InputStream stream, final int lexState) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final XPathParserTokenManager tm) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public final void ReInit(final java.io.Reader stream) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.Reader dstream, final int startLine, final int startColumn, final int bufferSize) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.InputStream dstream, final int startLine, final int startColumn, final int bufferSize) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.InputStream dstream, final int startLine, final int startColumn) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.Reader dstream, final int startLine, final int startColumn) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_BVYJ2() {
        new ParseException().getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseException_CxRC2() {
        new ParseException("").getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException_XPEu0() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(System.in));
        XPathParser parser = new XPathParser(tokenManager);
        parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAbbreviatedAxisSpecifier() throws Exception {
        xpathparser = Mockito.mock(XPathParser.class);
        when(xpathparser.AbbreviatedAxisSpecifier()).thenReturn(Compiler.AXIS_CHILD);
        assertEquals(Compiler.AXIS_CHILD, xpathparser.AbbreviatedAxisSpecifier());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit2_hHPE1_JKuG0() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1));
        XPathParser parser = new XPathParser(tokenManager);
        tokenManager.ReInit(new SimpleCharStream(new java.io.StringReader(""), 1, 1));
        assertEquals(tokenManager.getNextToken().kind, 0);
    }
}