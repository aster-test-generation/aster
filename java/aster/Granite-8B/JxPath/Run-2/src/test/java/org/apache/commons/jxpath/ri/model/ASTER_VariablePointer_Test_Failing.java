/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Failing {
    private VariablePointer variablePointer;
    private NodePointer pointer1;
    private NodePointer pointer2;
    private JXPathContext context;
    private KeywordVariables variables;
    private QName name;
    private boolean actual;
    private NodePointer valuePointer;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private QName qName;
    @Mock
    private NodeTest test;
    @Mock
    private NodePointer startWith;
    @Mock
    private NamespaceResolver namespaceResolver;
    VariablePointer variablepointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_ZgJe0_1() {
        VariablePointer variablePointer1 = new VariablePointer(new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new QName("name2"));
        assertEquals(-1, variablePointer1.compareChildNodePointers(variablePointer1, variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_ZgJe0_2() {
        VariablePointer variablePointer1 = new VariablePointer(new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new QName("name2"));
        assertEquals(1, variablePointer2.compareChildNodePointers(variablePointer1, variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindVariables() throws Exception {
        variablepointer = new VariablePointer(qName);
        when(context.getVariables()).thenReturn(variables);
        when(variables.isDeclaredVariable(qName.toString())).thenReturn(true);
        variablepointer.findVariables(context);
        verify(context, times(1)).getVariables();
        verify(variables, times(1)).isDeclaredVariable(qName.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() {
        variablePointer = new VariablePointer(Mockito.mock(KeywordVariables.class), Mockito.mock(QName.class));
        Mockito.when(variablePointer.getValuePointer()).thenReturn(valuePointer);
        NodeIterator nodeIterator = variablePointer.childIterator(test, false, startWith);
        Mockito.verify(valuePointer).childIterator(test, false, startWith);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthWithActualTrue_sZVA0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        int length = variablePointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthWithActualFalse_rVOV1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("", new Object()), new QName(""));
        int length = variablePointer.getLength();
        assertEquals(0, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthWithNullObject_FXJd2() {
        VariablePointer variablePointer = new VariablePointer(null, new QName(""));
        int length = variablePointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        variablepointer = new VariablePointer(Mockito.mock(QName.class));
        NodePointer ptr = variablepointer.createPath(Mockito.mock(JXPathContext.class), Mockito.mock(Object.class));
        assertEquals(ptr.getClass(), NodePointer.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValueWithQName_TyBo0() {
        QName name = new QName("example");
        VariablePointer variablePointer = new VariablePointer(name);
        Object baseValue = variablePointer.getBaseValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_lVok0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        boolean actual = variablePointer.isActual();
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath1_lXnX0_avvQ1() {
        final VariablePointer variablePointer = new VariablePointer(new QName(""));
        final NodePointer nodePointer = variablePointer.createPath(Mockito.mock(JXPathContext.class));
        assertEquals(NodePointer.class, nodePointer.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_FulW0_Cxwm0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        JXPathContext context = JXPathContext.newContext(null, null);
        QName name = new QName("");
        int index = 0;
        Object value = new Object();
        NodePointer nodePointer = variablePointer.createChild(context, name, index, value);
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_ZgJe0() {
        VariablePointer variablePointer1 = new VariablePointer(new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new QName("name2"));
        assertEquals(-1, variablePointer1.compareChildNodePointers(variablePointer1, variablePointer2));
        assertEquals(1, variablePointer2.compareChildNodePointers(variablePointer1, variablePointer2));
    }
}