/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LocationPath_Test_Passing {
    private LocationPath locationPath;
    private EvalContext context;
    private SelfContext selfContext;
    private NamespaceContext namespaceContext;
    private NodeTypeTest nodeTypeTest;
    @Mock
    EvalContext rootContext;
    @Mock
    Step[] steps;
    LocationPath locationpath;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue() {
        selfContext = mock(SelfContext.class);
        namespaceContext = mock(NamespaceContext.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        context = mock(EvalContext.class);
        locationPath = new LocationPath(true, new Step[]{});
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getJXPathContext()).thenReturn(mock(JXPathContext.class));
        when(context.getCurrentNodePointer()).thenReturn(mock(NodePointer.class));
        when(context.getCurrentPosition()).thenReturn(1);
        when(context.getDocumentOrder()).thenReturn(1);
        when(context.getContextNodeList()).thenReturn(Collections.singletonList(mock(NodePointer.class)));
        when(context.isChildOrderingRequired()).thenReturn(true);
        when(context.getSingleNodePointer()).thenReturn(mock(NodePointer.class));
        when(context.getRootContext().getAbsoluteRootContext()).thenReturn(context);
        when(context.getRootContext().getJXPathContext()).thenReturn(mock(JXPathContext.class));
        when(context.getRootContext().getCurrentNodePointer()).thenReturn(mock(NodePointer.class));
        when(context.getRootContext().getCurrentPosition()).thenReturn(1);
        when(context.getRootContext().getDocumentOrder()).thenReturn(1);
        when(context.getRootContext().getContextNodeList()).thenReturn(Collections.singletonList(mock(NodePointer.class)));
        when(context.getRootContext().isChildOrderingRequired()).thenReturn(true);
        when(context.getRootContext().getSingleNodePointer()).thenReturn(mock(NodePointer.class));
        Object result = locationPath.computeValue(context);
        verify(context).getRootContext();
        verify(context).getJXPathContext();
        verify(context).getCurrentNodePointer();
        verify(context).getCurrentPosition();
        verify(context).getDocumentOrder();
        verify(context).getContextNodeList();
        verify(context).isChildOrderingRequired();
        verify(context).getSingleNodePointer();
        verify(context.getRootContext()).getAbsoluteRootContext();
        verify(context.getRootContext()).getJXPathContext();
        verify(context.getRootContext()).getCurrentNodePointer();
        verify(context.getRootContext()).getCurrentPosition();
        verify(context.getRootContext()).getDocumentOrder();
        verify(context.getRootContext()).getContextNodeList();
        verify(context.getRootContext()).isChildOrderingRequired();
        verify(context.getRootContext()).getSingleNodePointer();
        // Add assertions here to test the computeValue method
        // For example:
        // assertNotNull(result);
        // assertEquals(expectedResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent1_DloQ0() {
        LocationPath locationPath = new LocationPath(true, new Step[0]);
        boolean result = locationPath.computeContextDependent();
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent2_ohLl1() {
        LocationPath locationPath = new LocationPath(false, new Step[0]);
        boolean result = locationPath.computeContextDependent();
        boolean expected = false;
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAbsolute_cIJG0() {
        LocationPath locationPath = new LocationPath(true, new Step[0]);
        assertTrue(locationPath.isAbsolute());
    }
}