/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPropertyPointer_Test_Passing {
    private Object value = UNINITIALIZED;
    private DOMNodePointer parent;
    private JXPathBasicBeanInfo beanInfo;
    private PropertyDescriptor pd;
    private Object bean;
    private int index;
    private String propertyName;
    private BeanPropertyPointer beanpropertypointer;
    @Mock
    private IndexedPropertyDescriptor indexedPropertyDescriptor;
    @Mock
    private Locale locale;
    @Mock
    private KeywordVariables variables;
    @Mock
    private QName name;
    private Object baseValue = UNINITIALIZED;
    private static Object UNINITIALIZED = new Object();
    private JXPathContext context;
    private KeywordVariables keywordVariables;
    private VariablePointer variablePointer;
    private Class clazz;
    private Class dynamicPropertyHandlerClass;
    private String id;
    private boolean atomic;
    private DOMNodePointer domNodePointer;
    private static final int WHOLE_COLLECTION = -1;
    private static final int INDEX = 0;
    private BeanPropertyPointer beanPropertyPointer;
    private transient PropertyDescriptor[] propertyDescriptors;
    @Mock
    private PropertyDescriptor[] propertyDescriptorsMock;
    private transient String[] names;
    @Mock
    private PropertyDescriptor[] pds;
    private transient PropertyDescriptor propertyDescriptor;
    private JXPathBasicBeanInfo jxpathBasicBeanInfo;
    private String qualifiedName;
    private String prefix;
    private String localName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor1_jsdT0() {
        final QName name = new QName("name");
        final VariablePointer variablePointer = new VariablePointer(name);
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor2_KIPB1() {
        final KeywordVariables variables = new KeywordVariables("keyword", new Object());
        final QName name = new QName("name");
        final VariablePointer variablePointer = new VariablePointer(variables, name);
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariablesConstructor1_iqxf2() {
        final String keyword = "keyword";
        final Object object = new Object();
        final KeywordVariables keywordVariables = new KeywordVariables(keyword, object);
        assertNotNull(keywordVariables);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor1_RrDY6() {
        final String qualifiedName = "qualifiedName";
        final QName qName = new QName(qualifiedName);
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor2_vSLk7() {
        final String prefix = "prefix";
        final String localName = "localName";
        final QName qName = new QName(prefix, localName);
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_1() throws Exception {
        parent = mock(DOMNodePointer.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        context = mock(JXPathContext.class);
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        when(parent.getImmediateNode()).thenReturn(null);
        NodePointer result = beanpropertypointer.createPath(context);
        verify(parent).createPath(context);
        assertEquals(beanpropertypointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_2() throws Exception {
        parent = mock(DOMNodePointer.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        context = mock(JXPathContext.class);
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        when(parent.getImmediateNode()).thenReturn(null);
        NodePointer result = beanpropertypointer.createPath(context);
        verify(parent).createPath(context);
        assertEquals(UNINITIALIZED, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_3() throws Exception {
        parent = mock(DOMNodePointer.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        context = mock(JXPathContext.class);
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        when(parent.getImmediateNode()).thenReturn(null);
        NodePointer result = beanpropertypointer.createPath(context);
        verify(parent).createPath(context);
        assertEquals(UNINITIALIZED, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove1_XyCh0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        variablePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove2_GKbS1() {
        KeywordVariables keywordVariables = new KeywordVariables("", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName(""));
        variablePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyDescriptors() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        when(beanInfo.getPropertyDescriptors()).thenReturn(propertyDescriptorsMock);
        PropertyDescriptor[] result = beanpropertypointer.getPropertyDescriptors();
        verify(beanInfo, times(1)).getPropertyDescriptors();
        assertEquals(propertyDescriptorsMock, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyNames() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        when(beanInfo.getPropertyDescriptors()).thenReturn(pds);
        when(pd.getName()).thenReturn("name");
        names = new String[1];
        names[0] = "name";
        when(beanInfo.getPropertyDescriptors()).thenReturn(pds);
        when(pd.getName()).thenReturn("name");
        names = new String[1];
        names[0] = "name";
        assertArrayEquals(names, beanpropertypointer.getPropertyNames());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor1_vmmN0() {
        final QName name = new QName("name");
        final VariablePointer variablePointer = new VariablePointer(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor2_vCau1() {
        final KeywordVariables variables = new KeywordVariables("keyword", new Object());
        final QName name = new QName("name");
        final VariablePointer variablePointer = new VariablePointer(variables, name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariablesConstructor_xjnK2() {
        final String keyword = "keyword";
        final Object object = new Object();
        final KeywordVariables keywordVariables = new KeywordVariables(keyword, object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor1_ejcw6() {
        final String qualifiedName = "qualifiedName";
        final QName qName = new QName(qualifiedName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor2_xVDe7() {
        final String prefix = "prefix";
        final String localName = "localName";
        final QName qName = new QName(prefix, localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyIndex() throws Exception {
        parent = mock(DOMNodePointer.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        // Set up the expected behavior of the mock objects
        when(beanInfo.getPropertyDescriptor("propertyName")).thenReturn(new PropertyDescriptor("propertyName", Object.class));
        // Call the method under test
        beanpropertypointer.setPropertyIndex(0);
        // Verify that the expected method calls were made
        verify(beanInfo, times(1)).getPropertyDescriptor("propertyName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor1_EvWj0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor2_CnMI1() {
        KeywordVariables keywordVariables = new KeywordVariables("", null);
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName(""));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariablesConstructor1_OAla2() {
        KeywordVariables keywordVariables = new KeywordVariables("", null);
        assertNotNull(keywordVariables);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor1_TjTU6() {
        QName qName = new QName("");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor2_TdwF7() {
        QName qName = new QName("", "");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfoConstructor1_QbHM8_uYRr0() {
        final Class clazz = Object.class;
        final boolean atomic = true;
        final JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz, atomic);
        assertNotNull(jXPathBasicBeanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfoConstructor3_dbbM10_wJmS0() {
        final Class clazz = Object.class;
        final Class dynamicPropertyHandlerClass = null;
        final JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz, dynamicPropertyHandlerClass);
        assertNotNull(jXPathBasicBeanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfoConstructor1_qhHS8_BXKL0() {
        final Class clazz = Object.class;
        final boolean atomic = true;
        final JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz, atomic);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfoConstructor3_cibn10_YWlb0() {
        Class clazz = null;
        Class dynamicPropertyHandlerClass = null;
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz, dynamicPropertyHandlerClass);
        assertNotNull(jXPathBasicBeanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        parent = mock(DOMNodePointer.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        context = mock(JXPathContext.class);
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        when(parent.getImmediateNode()).thenReturn(null);
        NodePointer result = beanpropertypointer.createPath(context);
        verify(parent).createPath(context);
        assertEquals(beanpropertypointer, result);
        assertEquals(UNINITIALIZED, baseValue);
        assertEquals(UNINITIALIZED, value);
    }
}