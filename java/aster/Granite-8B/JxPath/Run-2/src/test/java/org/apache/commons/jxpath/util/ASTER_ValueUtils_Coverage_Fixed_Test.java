/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;
import java.beans.PropertyDescriptor;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_ValueUtils_Coverage_Fixed_Test {


        @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue1_mbyH0() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        int index = 0;
        Object result = ValueUtils.getValue(bean, propertyDescriptor, index);
    
}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_LDrD1() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        int index = 0;
        Object result = ValueUtils.getValue(bean, propertyDescriptor, index);
    
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue1_PrPa0() {
    Object collection = null;
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue2_vSZg1() {
    Object collection = new Object();
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(collection, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue3_osBD2() {
    Object collection = new Object[0];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue4_cCbz3() {
    Object collection = new Object[1];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue5_tqDE4() {
    Object collection = new Object[2];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue6_LbiN5() {
    Object collection = new Object[3];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue7_kioO6() {
    Object collection = new Object[4];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8() {
    Object collection = new Object[6];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9() {
    Object collection = new Object[7];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue11_rNqD10() {
    Object collection = new Object[8];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11() {
    Object collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue13_cCfV12() {
    Object collection = new Object[10];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);

}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue14_Kjxk13() {
    Object collection = new Object[11];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}


    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithList_jfGK0() {
        List<Object> list = new ArrayList<>();
        int index = 0;
        Object value = new Object();
        ValueUtils.setValue(list, index, value);
        assertEquals(value, list.get(index));
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithCollection_Ijxg1() {
        Collection<Object> collection = new ArrayList<>();
        int index = 0;
        Object value = new Object();
        ValueUtils.setValue(collection, index, value);
        assertEquals(value, ((List) collection).get(index));
    }


    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullCollection_cEHO0_1() {
        Object collection = null;
        Iterator iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullCollection_cEHO0_2() {
        Object collection = null;
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_ZVEW1_1() {
        Object collection = new Object[0];
        Iterator iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_ZVEW1_2() {
        Object collection = new Object[0];
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_1() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_2() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_3() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(array[0], iterator.next());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_4() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_5() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(array[1], iterator.next());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_6() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_7() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(array[2], iterator.next());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_8() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_1() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_2() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_3() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(collection.get(0), iterator.next());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_4() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_5() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(collection.get(1), iterator.next());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_6() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_7() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(collection.get(2), iterator.next());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_8() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_FLCE4_1() {
        Object element = new Object();
        Collection<Object> collection = Collections.singletonList(element);
        Iterator iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_FLCE4_2() {
        Object element = new Object();
        Collection<Object> collection = Collections.singletonList(element);
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_FLCE4_3() {
        Object element = new Object();
        Collection<Object> collection = Collections.singletonList(element);
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(element, iterator.next());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_FLCE4_4() {
        Object element = new Object();
        Collection<Object> collection = Collections.singletonList(element);
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_Nbzm6_1() {
        Collection<Object> collection = new ArrayList<>();
        Iterator iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);}
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_Nbzm6_2() {
        Collection<Object> collection = new ArrayList<>();
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}



    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue1_yzIc0() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_oVHU1() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue3_XZbj2() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue4_cNEa3() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue5_qWgV4() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue6_JPQn5() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue7_CNaN6() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue8_rkRA7() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue9_qxnq8() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
    }



    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_1_INev0() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_2_utyY1() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_3_XoRK2() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_4_THsS3() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_5_QfpO4() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_6_yOYs5() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_7_mLkH6() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_8_utyX7() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_9_QPsd8() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_10_dGku9() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_11_VENK10() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_12_wxDe11() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_13_Jlfk12() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_14_nDQa13() {
    }
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_15_LzIp14() {
    }





@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullElementCollection_nhez5_snoe0_1() {
        Collection<Object> collection = new ArrayList<>();
        collection.add(null);
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullElementCollection_nhez5_snoe0_2() {
        Collection<Object> collection = new ArrayList<>();
        collection.add(null);
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullElementCollection_nhez5_snoe0_3() {
        Collection<Object> collection = new ArrayList<>();
        collection.add(null);
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(null, iterator.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullElementCollection_nhez5_snoe0_4() {
        Collection<Object> collection = new ArrayList<>();
        collection.add(null);
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullElementCollection_nhez5_snoe0_5() {
        Collection<Object> collection = new ArrayList<>();
        collection.add(null);
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(new Object(), iterator.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullElementCollection_nhez5_snoe0_6() {
        Collection<Object> collection = new ArrayList<>();
        collection.add(null);
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}











@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue5_tqDE4_UzLs0() {
    Object collection = new Object[2];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue5_tqDE4_bMlf1() {
    Object collection = new Object[2];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}





@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getAccessibleMethod_1_INev0_hwRq0() {
        fail("Not yet implemented");
    }

@Test
public void testExpandCollection_aOPu0() {
    Object collection = null;
    int size = 0;
    Object bigger = ValueUtils.expandCollection(collection, size);
    assertEquals(null, bigger);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_zcLF0() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_BAZg1() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_mQTP2() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_zytE3() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_iryW4() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_yjTh5() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_Aabh6() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_MBkr7() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_doRX8() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_wsmG9() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_ZZpx10() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue8_OqjE7_UJYh11() {
    Object collection = new Object[5];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue2_vSZg1_xolm0() {
    Object collection = new Object();
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_bjud0() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_rTtI1() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_eOPc2() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_ZQnv3() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_Ubri4() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_MtJS5() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_czNZ6() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_SQFl7() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_OwwX8() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_yyiQ9() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_PhAe10() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue12_teNZ11_GOfp11() {
    Object[] collection = new Object[9];
    final int index = 0;
    Object value = ValueUtils.getValue(collection, index);
    assertEquals(null, value);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullCollection_cEHO0_DyUH1() {
        Object collection = null;
        Iterator<Object> iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testExpandCollection_Lapq0() {
    Object collection = null;
    int size = 0;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testExpandCollection_ZRgp1() {
    Object collection = new Object();
    int size = 0;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_ZVEW1_eMKw0_1() {
        Object[] collection = new Object[0];
        Iterator iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_ZVEW1_eMKw0_2() {
        Object[] collection = new Object[0];
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testExpandCollection_oqnY0() {
    Object collection = null;
    int size = 0;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testExpandCollection_xLRw1() {
    Object collection = new Object();
    int size = 0;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}












@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_Nbzm6_dFiA0_1() {
        Collection<Object> collection = new ArrayList<>();
        Iterator iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_Nbzm6_dFiA0_2() {
        Collection<Object> collection = new ArrayList<>();
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_ibSH0() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_kJzg1() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_Umfg2() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_ZjJp3() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_XivM4() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_vLhu5() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_enfN6() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_HxNb7() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_ysoU8() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_QJHY9() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_QMBa10() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_rsys11() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue9_ryJk8_MdML12() {
    Object collection = new Object[6];
    Object value = ValueUtils.getValue(collection, 0);
    assertEquals(null, value);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_FLCE4_Ifba0_1() {
        Object element = new Object();
        Collection<Object> collection = Collections.singletonList(element);
        Iterator iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_FLCE4_Ifba0_2() {
        Object element = new Object();
        Collection<Object> collection = Collections.singletonList(element);
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_FLCE4_Ifba0_3() {
        Object element = new Object();
        Collection<Object> collection = Collections.singletonList(element);
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(element, iterator.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithSingletonCollection_FLCE4_Ifba0_4() {
        Object element = new Object();
        Collection<Object> collection = Collections.singletonList(element);
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}



@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testExpandCollection_bDjP0() {
    Object collection = null;
    int size = 0;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testExpandCollection_CUzJ1() {
    Object collection = new Object();
    int size = 0;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testExpandCollection_vRAv3() {
    Object collection = new Object();
    int size = -1;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testExpandCollection_hecO7() {
    Object collection = new Object[1];
    int size = -1;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS)
public void testExpandCollection_NoAc11() {
    Object collection = new ArrayList<>();
    int size = -1;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithCollection_Ijxg1_PohY0_1() {
        Collection<Object> collection = new ArrayList<>();
        Object bigger = ValueUtils.expandCollection(collection, 1);
        assertEquals(1, collection.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithCollection_Ijxg1_PohY0_2() {
        Collection<Object> collection = new ArrayList<>();
        Object bigger = ValueUtils.expandCollection(collection, 1);
        assertEquals(null, collection.iterator().next());}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_mkIf0_1() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_mkIf0_2() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(array[0], iterator.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_mkIf0_3() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_mkIf0_4() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(array[1], iterator.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_mkIf0_5() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_mkIf0_6() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(array[2], iterator.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyArray_Ozwo2_mkIf0_7() {
        Object[] array = new Object[3];
        array[0] = new Object();
        array[1] = new Object();
        array[2] = new Object();
        Object collection = array;
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_SAQT0_1() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertNotNull(iterator);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_SAQT0_2() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_SAQT0_3() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(collection.get(0), iterator.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_SAQT0_4() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_SAQT0_5() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(collection.get(1), iterator.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_SAQT0_6() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_SAQT0_7() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(collection.get(2), iterator.next());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonEmptyCollection_HFLZ3_SAQT0_8() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        collection.add(new Object());
        collection.add(new Object());
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_hwrR0() {
    Object collection = null;
    int size = 0;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_NCDL1() {
    Object collection = new Object();
    int size = 0;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_twRI2() {
    Object collection = new Object();
    int size = -1;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_wuHQ3() {
    Object collection = new Object();
    int size = 1;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_Nfhb4() {
    Object collection = new Object[0];
    int size = 0;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_IJZl5() {
    Object collection = new Object[0];
    int size = -1;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_Rwbi6() {
    Object collection = new Object[0];
    int size = 1;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_aCMY7() {
    Object collection = new Object[1];
    int size = 0;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_UBmt8() {
    Object collection = new Object[1];
    int size = -1;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_OuSS9() {
    Object collection = new Object[1];
    int size = 1;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_cYQx10() {
    Object collection = new Object[1];
    int size = 2;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetValue10_Pxll9_vSnu11() {
    Object collection = new Object[2];
    int size = 0;
    Object result = ValueUtils.expandCollection(collection, size);
    assertEquals(null, result);
}


}