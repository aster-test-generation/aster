/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.beans.PropertyDescriptor;
import java.lang.reflect.Array;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullIndex_yWHP7() {
        Object collection = new ArrayList<>(Arrays.asList("a", "b", "c"));
        Object value = ValueUtils.getValue(collection, null);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullPropertyDescriptor_xmkh5() {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = null;
        int index = 0;
        Object actualValue = ValueUtils.getValue(bean, propertyDescriptor, index);
        assertNull(actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromInvalidIndex_YjGz5() {
        String[] array = {"a", "b", "c"};
        try {
            ValueUtils.remove(array, 3);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromNullArray_vcTh6() {
        try {
            ValueUtils.remove(null, 0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromNegativeIndex_FsBV9() {
        try {
            ValueUtils.remove(new Object(), -1);
            fail("Expected IndexOutOfBoundsException");
        } catch (IndexOutOfBoundsException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Object_ReturnsNullForNonContainerObject_XkKn2() {
        Object object = new Object();
        Object expectedValue = null;
        Object actualValue = ValueUtils.getValue(object);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueForList_NTXy1() {
        List collection = new ArrayList<>();
        ValueUtils.setValue(collection, 1, "test");
        assertEquals("test", collection.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueForCollection_TOJI2() {
        Collection collection = new HashSet<>();
        ValueUtils.setValue(collection, 1, "test");
        assertEquals(1, collection.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueForNullIndex_xawh4() {
        Object collection = new Object[3];
        ValueUtils.setValue(collection, null, "test");
        assertEquals("test", collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDynamicPropertyHandler_jOEL0() {
        DynamicPropertyHandler dynamicPropertyHandler = ValueUtils.getDynamicPropertyHandler(DynamicPropertyHandler.class);
        assertNotNull(dynamicPropertyHandler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArraySizeGreaterThanSize_TjJG5() {
        Object collection = new Object[3];
        int size = 1;
        Object result = ValueUtils.expandCollection(collection, size);
        assertTrue(result.getClass().isArray());
        assertEquals(1, Array.getLength(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArraySizeGreaterThanSize_TjJG5_1() {
        Object collection = new Object[3];
        int size = 1;
        Object result = ValueUtils.expandCollection(collection, size);
        assertTrue(result.getClass().isArray());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArraySizeGreaterThanSize_TjJG5_2() {
        Object collection = new Object[3];
        int size = 1;
        Object result = ValueUtils.expandCollection(collection, size);
        assertEquals(1, Array.getLength(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromList_QsEX1_gukc0_1() {
        List<String> list = Arrays.asList("a", "b", "c");
        Object result = ValueUtils.remove(list, 1);
        List<String> expected = Arrays.asList("a", "c");
        assertEquals(2, ((List<?>) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromList_QsEX1_gukc0_2() {
        List<String> list = Arrays.asList("a", "b", "c");
        Object result = ValueUtils.remove(list, 1);
        List<String> expected = Arrays.asList("a", "c");
        assertTrue(result instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromList_QsEX1_gukc0_3() {
        List<String> list = Arrays.asList("a", "b", "c");
        Object result = ValueUtils.remove(list, 1);
        List<String> expected = Arrays.asList("a", "c");
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromCollection_hGln2_jFtH0_1() {
        Collection<String> collection = Arrays.asList("a", "b", "c");
        Object result = ValueUtils.remove(collection, 1);
        Collection<String> expected = Arrays.asList("a", "c");
        assertEquals(2, ((Collection<?>) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromCollection_hGln2_jFtH0_2() {
        Collection<String> collection = Arrays.asList("a", "b", "c");
        Object result = ValueUtils.remove(collection, 1);
        Collection<String> expected = Arrays.asList("a", "c");
        assertTrue(result instanceof Collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromCollection_hGln2_jFtH0_3() {
        Collection<String> collection = Arrays.asList("a", "b", "c");
        Object result = ValueUtils.remove(collection, 1);
        Collection<String> expected = Arrays.asList("a", "c");
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromEmptyCollection_IANn4_sQZO0_1() {
        List<String> list = new ArrayList<>();
        Object result = ValueUtils.remove(list, 0);
        List<String> expected = new ArrayList<>();
        assertEquals(0, ((List<?>) result).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromEmptyCollection_IANn4_sQZO0_2() {
        List<String> list = new ArrayList<>();
        Object result = ValueUtils.remove(list, 0);
        List<String> expected = new ArrayList<>();
        assertTrue(result instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromEmptyCollection_IANn4_sQZO0_3() {
        List<String> list = new ArrayList<>();
        Object result = ValueUtils.remove(list, 0);
        List<String> expected = new ArrayList<>();
        assertEquals(expected, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueForList_NTXy1_fid2() {
        List collection = new ArrayList<>();
        collection.add(null);
        ValueUtils.setValue(collection, 1, "test");
        assertEquals("test", collection.get(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueForNullIndex_xawh4_fid2() {
        Object collection = new Object[3];
        Object[] array = (Object[]) collection;
        array[0] = "test";
        assertEquals("test", collection);
    }
}