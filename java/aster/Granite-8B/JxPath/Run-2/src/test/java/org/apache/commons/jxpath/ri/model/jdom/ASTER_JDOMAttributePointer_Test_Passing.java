/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.jdom.Attribute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMAttributePointer_Test_Passing {
    private JDOMAttributePointer fixture;
    private JDOMAttributePointer jdomattributepointer;
    private DOMNodePointer parent;
    private Attribute attr;
    @Mock
    private Attribute mockAttr;
    private QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        NodePointer pointer1 = mock(NodePointer.class);
        NodePointer pointer2 = mock(NodePointer.class);
        // Perform the test
        int result = jdomattributepointer.compareChildNodePointers(pointer1, pointer2);
        // Assert the result
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when object is the same instance
        // Test when object is not null and is an instance of JDOMAttributePointer
        JDOMAttributePointer otherJDOMAttributePointer = new JDOMAttributePointer(null, attr);
        // Test when object is not null and is not an instance of JDOMAttributePointer
        // Test when object is null
        assertTrue(jdomattributepointer.equals(jdomattributepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when object is the same instance
        // Test when object is not null and is an instance of JDOMAttributePointer
        JDOMAttributePointer otherJDOMAttributePointer = new JDOMAttributePointer(null, attr);
        // Test when object is not null and is not an instance of JDOMAttributePointer
        // Test when object is null
        assertTrue(jdomattributepointer.equals(otherJDOMAttributePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when object is the same instance
        // Test when object is not null and is an instance of JDOMAttributePointer
        JDOMAttributePointer otherJDOMAttributePointer = new JDOMAttributePointer(null, attr);
        // Test when object is not null and is not an instance of JDOMAttributePointer
        // Test when object is null
        assertFalse(jdomattributepointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when object is the same instance
        // Test when object is not null and is an instance of JDOMAttributePointer
        JDOMAttributePointer otherJDOMAttributePointer = new JDOMAttributePointer(null, attr);
        // Test when object is not null and is not an instance of JDOMAttributePointer
        // Test when object is null
        assertFalse(jdomattributepointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals1_hKyf0() {
        VariablePointer variablePointer1 = new VariablePointer(new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new QName("name2"));
        boolean result = variablePointer1.equals(variablePointer2);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals2_JjmU1() {
        VariablePointer variablePointer1 = new VariablePointer(new KeywordVariables("keyword1", new Object()), new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword2", new Object()), new QName("name2"));
        boolean result = variablePointer1.equals(variablePointer2);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals3_wPsw2() {
        VariablePointer variablePointer1 = new VariablePointer(new KeywordVariables("keyword1", new Object()), new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword1", new Object()), new QName("name1"));
        boolean result = variablePointer1.equals(variablePointer2);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals4_NiLj3() {
        VariablePointer variablePointer1 = new VariablePointer(new KeywordVariables("keyword1", new Object()), new QName("name1"));
        Object object = new Object();
        boolean result = variablePointer1.equals(object);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        jdomattributepointer.setValue("test");
        verify(attr).setValue("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue() throws Exception {
        attr = mock(Attribute.class);
        when(attr.getValue()).thenReturn("attributeValue");
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        assertEquals("attributeValue", jdomattributepointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        assertEquals(attr, jdomattributepointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        when(attr.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals("namespaceURI", jdomattributepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath() {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        when(parent.asPath()).thenReturn("/parent/path");
        when(attr.getName()).thenReturn("attributeName");
        String path = jdomattributepointer.asPath();
        assertEquals("/parent/path/@attributeName", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        Object baseValue = jdomattributepointer.getBaseValue();
        assertEquals(attr, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        when(attr.getValue()).thenReturn("value");
        assertTrue(jdomattributepointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        when(attr.getValue()).thenReturn("value");
        assertTrue(jdomattributepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when object is the same instance
        assertTrue(jdomattributepointer.equals(jdomattributepointer));
        // Test when object is not null and is an instance of JDOMAttributePointer
        JDOMAttributePointer otherJDOMAttributePointer = new JDOMAttributePointer(null, attr);
        assertTrue(jdomattributepointer.equals(otherJDOMAttributePointer));
        // Test when object is not null and is not an instance of JDOMAttributePointer
        assertFalse(jdomattributepointer.equals(new Object()));
        // Test when object is null
        assertFalse(jdomattributepointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_hOdA0() {
        fixture = new JDOMAttributePointer(null, new Attribute("name", "value"));
    }
}