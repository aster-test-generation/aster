/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Passing {
    private QName name;
    private DynaBean dynaBean;
    private DynaBeanPointer dynabeanpointer;
    private Locale locale;
    private KeywordVariables variables;
    @Mock
    private DynaBean dynaBeanMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals1_RQua0() {
        VariablePointer variablePointer1 = new VariablePointer(new QName("name"));
        VariablePointer variablePointer2 = new VariablePointer(new QName("name"));
        assertTrue(variablePointer1.equals(variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals6_eVdp5() {
        VariablePointer variablePointer1 = new VariablePointer(new QName("prefix", "localName"));
        VariablePointer variablePointer2 = new VariablePointer(new QName("prefix", "localName"));
        assertTrue(variablePointer1.equals(variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Prwd0() {
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(new QName("name"), null, null);
        assertFalse(dynaBeanPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        dynaBean = dynaBeanMock;
        dynabeanpointer = new DynaBeanPointer(new QName("name"), dynaBean, Locale.getDefault());
        // Act
        Object immediateNode = dynabeanpointer.getImmediateNode();
        // Assert
        assertEquals(dynaBean, immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_sOMH6() {
        QName qName = new QName("");
        assertEquals(0, qName.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_vJIn7() {
        QName qName = new QName("", "");
        assertEquals(0, qName.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_YMcB8() {
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(new QName(""), null, null);
        assertEquals(0, dynaBeanPointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_SDVy9() {
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(null, new QName(""), null);
        assertEquals(0, dynaBeanPointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        name = Mockito.mock(QName.class);
        dynabeanpointer = new DynaBeanPointer(name, null, null);
        Mockito.when(name.getName()).thenReturn("expectedName");
        assertEquals("expectedName", dynabeanpointer.getName().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerGetBaseValue2_qONM1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("", null), new QName(""));
        assertEquals(null, variablePointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDOMNodePointerGetBaseValue_zDVw2() {
        DOMNodePointer dOMNodePointer = new DOMNodePointer(null, null, "");
        assertEquals(null, dOMNodePointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDOMNodePointerGetBaseValue4_VSZi5() {
        DOMNodePointer dOMNodePointer = new DOMNodePointer(new VariablePointer(new QName("")), null);
        assertEquals(null, dOMNodePointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDynaBeanPointerGetBaseValue_KOBx6() {
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(new QName(""), null, null);
        assertEquals(null, dynaBeanPointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDynaBeanPointerGetBaseValue2_CpiE7() {
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(new VariablePointer(new QName("")), null, null);
        assertEquals(null, dynaBeanPointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals2_IOAE1_fid2() {
        VariablePointer variablePointer1 = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        assertFalse(variablePointer1.equals(variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_avAd0_fid2() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        assertEquals("$name", variablePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_jmUS1_fid2() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("name"));
        assertEquals("$name", variablePointer.asPath());
    }
}