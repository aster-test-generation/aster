/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private QName qName;
    private DynamicPointer dynamicPointer;
    private Object bean;
    private QName name;
    @Mock
    private QName nameMock;
    @Mock
    private Object beanMock;
    @Mock
    private PageContextHandler handlerMock;
    @Mock
    private Locale localeMock;
    @Mock
    private VariablePointer parentMock;
    @Mock
    private KeywordVariables variablesMock;
    private DynamicPointer dynamicpointer;
    @Mock
    private PageContextHandler handler;
    @Mock
    private Locale locale;
    @Mock
    private VariablePointer parent;
    @Mock
    private KeywordVariables variables;
    @Mock
    private QName mockName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicPropertyDeclarationSupported_YwVD0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        boolean result = dynamicPointer.isDynamicPropertyDeclarationSupported();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() {
        dynamicpointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        // Test when object is null
        // Test when object is not DynamicPointer
        // Test when object is DynamicPointer with different bean
        DynamicPointer differentBeanDynamicPointer = new DynamicPointer(nameMock, new Object(), handlerMock, localeMock);
        // Test when object is DynamicPointer with different name
        DynamicPointer differentNameDynamicPointer = new DynamicPointer(new QName("differentName"), beanMock, handlerMock, localeMock);
        // Test when object is DynamicPointer with same bean and name
        DynamicPointer sameBeanAndNameDynamicPointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        assertFalse(dynamicpointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() {
        dynamicpointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        // Test when object is null
        // Test when object is not DynamicPointer
        // Test when object is DynamicPointer with different bean
        DynamicPointer differentBeanDynamicPointer = new DynamicPointer(nameMock, new Object(), handlerMock, localeMock);
        // Test when object is DynamicPointer with different name
        DynamicPointer differentNameDynamicPointer = new DynamicPointer(new QName("differentName"), beanMock, handlerMock, localeMock);
        // Test when object is DynamicPointer with same bean and name
        DynamicPointer sameBeanAndNameDynamicPointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        assertFalse(dynamicpointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() {
        dynamicpointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        // Test when object is null
        // Test when object is not DynamicPointer
        // Test when object is DynamicPointer with different bean
        DynamicPointer differentBeanDynamicPointer = new DynamicPointer(nameMock, new Object(), handlerMock, localeMock);
        // Test when object is DynamicPointer with different name
        DynamicPointer differentNameDynamicPointer = new DynamicPointer(new QName("differentName"), beanMock, handlerMock, localeMock);
        // Test when object is DynamicPointer with same bean and name
        DynamicPointer sameBeanAndNameDynamicPointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        assertFalse(dynamicpointer.equals(differentBeanDynamicPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() {
        dynamicpointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        // Test when object is null
        // Test when object is not DynamicPointer
        // Test when object is DynamicPointer with different bean
        DynamicPointer differentBeanDynamicPointer = new DynamicPointer(nameMock, new Object(), handlerMock, localeMock);
        // Test when object is DynamicPointer with different name
        DynamicPointer differentNameDynamicPointer = new DynamicPointer(new QName("differentName"), beanMock, handlerMock, localeMock);
        // Test when object is DynamicPointer with same bean and name
        DynamicPointer sameBeanAndNameDynamicPointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        assertFalse(dynamicpointer.equals(differentNameDynamicPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_5() {
        dynamicpointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        // Test when object is null
        // Test when object is not DynamicPointer
        // Test when object is DynamicPointer with different bean
        DynamicPointer differentBeanDynamicPointer = new DynamicPointer(nameMock, new Object(), handlerMock, localeMock);
        // Test when object is DynamicPointer with different name
        DynamicPointer differentNameDynamicPointer = new DynamicPointer(new QName("differentName"), beanMock, handlerMock, localeMock);
        // Test when object is DynamicPointer with same bean and name
        DynamicPointer sameBeanAndNameDynamicPointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        assertTrue(dynamicpointer.equals(sameBeanAndNameDynamicPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator_1() throws Exception {
        name = Mockito.mock(QName.class);
        dynamicpointer = new DynamicPointer(name, null, null, null);
        NodeIterator result = dynamicpointer.attributeIterator(name);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator_2() throws Exception {
        name = Mockito.mock(QName.class);
        dynamicpointer = new DynamicPointer(name, null, null, null);
        NodeIterator result = dynamicpointer.attributeIterator(name);
        assertTrue(result instanceof DynamicAttributeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_DTrV0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        NodeIterator nodeIterator = dynamicPointer.attributeIterator(new QName("attributeName"));
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodeIterator_SaHQ0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.getDefault());
        NodeIterator nodeIterator = dynamicPointer.createNodeIterator("property", true, null);
        assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_1() {
        name = new QName("prefix", "localName");
        dynamicpointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.getDefault());
        when(mockName.getName()).thenReturn("localName");
        when(mockName.getPrefix()).thenReturn("expectedPrefix");
        assertEquals("localName", dynamicpointer.getName().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_2() {
        name = new QName("prefix", "localName");
        dynamicpointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.getDefault());
        when(mockName.getName()).thenReturn("expectedName");
        when(mockName.getPrefix()).thenReturn("prefix");
        assertEquals("prefix", dynamicpointer.getName().getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_MCpj0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        assertEquals("name", dynamicPointer.getName().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_uJuo0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("en"));
        assertEquals(1, dynamicPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() {
        dynamicpointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        // Test when object is null
        assertFalse(dynamicpointer.equals(null));
        // Test when object is not DynamicPointer
        assertFalse(dynamicpointer.equals(new Object()));
        // Test when object is DynamicPointer with different bean
        DynamicPointer differentBeanDynamicPointer = new DynamicPointer(nameMock, new Object(), handlerMock, localeMock);
        assertFalse(dynamicpointer.equals(differentBeanDynamicPointer));
        // Test when object is DynamicPointer with different name
        DynamicPointer differentNameDynamicPointer = new DynamicPointer(new QName("differentName"), beanMock, handlerMock, localeMock);
        assertFalse(dynamicpointer.equals(differentNameDynamicPointer));
        // Test when object is DynamicPointer with same bean and name
        DynamicPointer sameBeanAndNameDynamicPointer = new DynamicPointer(nameMock, beanMock, handlerMock, localeMock);
        assertTrue(dynamicpointer.equals(sameBeanAndNameDynamicPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator() throws Exception {
        name = Mockito.mock(QName.class);
        dynamicpointer = new DynamicPointer(name, null, null, null);
        NodeIterator result = dynamicpointer.attributeIterator(name);
        assertNotNull(result);
        assertTrue(result instanceof DynamicAttributeIterator);
    }
}