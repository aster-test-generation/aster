/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NodeNameTest_Test_Failing {
    private NodeNameTest node;
    private QName qname;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcardWithNamespaceURI_NPis0() {
        qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, "namespaceURI");
        assertTrue(nodeNameTest.isWildcard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcardWithoutNamespaceURI_UbmU1() {
        qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        assertTrue(nodeNameTest.isWildcard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcardWithNullNamespaceURI_wCGK2() {
        qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, null);
        assertTrue(nodeNameTest.isWildcard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcardWithEmptyNamespaceURI_fsDn3() {
        qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, "");
        assertTrue(nodeNameTest.isWildcard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcardWithTabNamespaceURI_BxFo5() {
        qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, "\t");
        assertTrue(nodeNameTest.isWildcard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcardWithNewlineNamespaceURI_jNew6() {
        qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, "\n");
        assertTrue(nodeNameTest.isWildcard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcardWithCarriageReturnNamespaceURI_eBXc7() {
        qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, "\r");
        assertTrue(nodeNameTest.isWildcard());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_BmXf0_1() {
        node = new NodeNameTest(new QName("prefix", "localName"), "namespaceURI");
        node = new NodeNameTest(new QName("prefix", "localName"));
        assertEquals("namespaceURI", node.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_BmXf0_2() {
        node = new NodeNameTest(new QName("prefix", "localName"), "namespaceURI");
        node = new NodeNameTest(new QName("prefix", "localName"));
        assertEquals("", node.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_BMXf0_OkXO0_1() {
        node = new NodeNameTest(new QName("prefix", "localName"), "namespaceURI");
        node = new NodeNameTest(new QName("prefix", "localName"), "");
        assertEquals("namespaceURI", node.getNamespaceURI());
    }
}