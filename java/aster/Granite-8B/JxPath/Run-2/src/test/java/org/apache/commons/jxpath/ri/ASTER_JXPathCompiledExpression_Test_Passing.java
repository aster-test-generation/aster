/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Passing {
    private Expression expression;
    private String xpath;
    private JXPathCompiledExpression jxpathcompiledexpression;
    private JXPathContext context;
    @Mock
    private Class requiredType;
    @Mock
    private Pointer pointer;
    @Mock
    private JXPathContextReferenceImpl contextReference;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPath_SkIy0() {
        Constant constant = new Constant("string");
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", constant);
        String actualXPath = jXPathCompiledExpression.getXPath();
        assertEquals("xpath", actualXPath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_fpsQ0() {
        Constant constant = new Constant("string");
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", constant);
        assertEquals("xpath", jXPathCompiledExpression.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_mlgt0() {
        Constant expression = new Constant("test");
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("test", expression);
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = compiledExpression.createPath(context);
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExpression_MDzs0() {
        Constant constant = new Constant("test");
        JXPathCompiledExpression jxpathCompiledExpression = new JXPathCompiledExpression("test", constant);
        Expression expression = jxpathCompiledExpression.getExpression();
        assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_iyAb0() {
        Constant expression = new Constant("test");
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("test", expression);
        Object result = compiledExpression.getValue(context);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratePointers_cTdm0() {
        Constant expression = new Constant("example");
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("example", expression);
        Iterator iterator = compiledExpression.iteratePointers(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate_gGGE0() {
        Constant expression = new Constant("test");
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        Iterator iterator = new JXPathCompiledExpression("test", expression).iterate(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremovePath_pOcU0() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        context = mock(JXPathContext.class);
        jxpathcompiledexpression.removePath(context);
        verify(context).removePath(xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_WXfr0() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        context = mock(JXPathContext.class);
        Pointer pointer = jxpathcompiledexpression.createPath(context);
        verify(context, times(1)).createPath(xpath);
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremoveAll_qaNf0() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        JXPathContext context = mock(JXPathContext.class);
        jxpathcompiledexpression.removeAll(context);
        verify(context).removeAll(xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll_Jkhv0_hKFF0() {
        Constant expression = new Constant("test");
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("test", expression);
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        compiledExpression.removeAll(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_DbSB0_wonK0() {
        Constant expression = new Constant("test");
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("test", expression);
        Object result = compiledExpression.getValue(context, String.class);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetValue_YiTx0() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        JXPathContext context = mock(JXPathContext.class);
        when(context.getValue(xpath, (Class) null)).thenReturn("value");
        assertEquals("value", jxpathcompiledexpression.getValue(context));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointer_swvX0_VMob0() {
        Constant expression = new Constant("expression");
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", expression);
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = jXPathCompiledExpression.getPointer(context, "xpath");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate_fnIx0() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        context = mock(JXPathContext.class);
        Iterator iterator = jxpathcompiledexpression.iterate(context);
        verify(context).iteratePointers(xpath);
    }
}