/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationAnd_Test_Passing {
    @Mock
    private EvalContext context;
    @Mock
    private Expression[] args;
    private CoreOperationAnd coreOperationAnd;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_OnxW0() {
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(new Expression[]{});
        String expected = "and";
        String actual = coreOperationAnd.getSymbol();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue() {
        coreOperationAnd = new CoreOperationAnd(args);
        // Mock the behavior of the computeValue method for the first argument
        when(args[0].computeValue(context)).thenReturn(Boolean.TRUE);
        // Mock the behavior of the computeValue method for the second argument
        when(args[1].computeValue(context)).thenReturn(Boolean.FALSE);
        // Call the computeValue method on the coreOperationAnd object
        Object result = coreOperationAnd.computeValue(context);
        // Assert that the result is equal to Boolean.FALSE
        assertEquals(Boolean.FALSE, result);
        // Verify that the computeValue method was called twice
        verify(args[0], times(1)).computeValue(context);
        verify(args[1], times(1)).computeValue(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_Pwiu0() {
        CoreOperationAnd coreOperationAnd = new CoreOperationAnd(new Expression[]{});
        int expectedPrecedence = 1;
        int actualPrecedence = coreOperationAnd.getPrecedence();
        assertEquals(expectedPrecedence, actualPrecedence);
    }
}