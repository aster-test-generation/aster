/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Passing {
    private Object bean;
    private QName name;
    private Locale locale;
    private JXPathBasicBeanInfo beanInfo;
    private BeanPointer beanpointer;
    private BeanPointer otherBeanpointer;
    private DOMNodePointer parent;
    private PropertyPointer propertyPointer;
    private BeanPointer beanPointer;
    @Mock
    private KeywordVariables variables;
    @Mock
    private Class clazz;
    @Mock
    private Class dynamicPropertyHandlerClass;
    private KeywordVariables keywordVariables;
    private VariablePointer variablePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        name = Mockito.mock(QName.class);
        locale = Locale.getDefault();
        beanInfo = Mockito.mock(JXPathBasicBeanInfo.class);
        bean = new Object();
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        Mockito.when(name.getName()).thenReturn("expectedName");
        assertEquals("expectedName", beanpointer.getName().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ZhRn0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        assertEquals("name", beanPointer.getName().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_JBsa0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), Locale.getDefault());
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertNotNull(propertyPointer);
        assertEquals(BeanPropertyPointer.class, propertyPointer.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath() {
        bean = new Object();
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        when(parent.asPath()).thenReturn("parentPath");
        when(beanInfo.isAtomic()).thenReturn(true);
        when(bean.toString()).thenReturn("beanString");
        assertEquals("beanString", beanpointer.asPath());
        when(beanInfo.isAtomic()).thenReturn(false);
        assertEquals("/parentPath/beanString", beanpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_KYtt0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        String actual = variablePointer.asPath();
        String expected = "/name";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_SmsU1() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("name"));
        String actual = variablePointer.asPath();
        String expected = "/keyword/name";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath6_zxOO5() {
        String qualifiedName = "qualifiedName";
        QName qName = new QName(qualifiedName);
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class);
        Locale locale = new Locale("en", "US");
        BeanPointer beanPointer = new BeanPointer(qName, new Object(), jXPathBasicBeanInfo, locale);
        String actual = beanPointer.asPath();
        String expected = "/qualifiedName";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath7_BJGb6() {
        String prefix = "prefix";
        String localName = "localName";
        QName qName = new QName(prefix, localName);
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class);
        Locale locale = new Locale("en", "US");
        BeanPointer beanPointer = new BeanPointer(qName, new Object(), jXPathBasicBeanInfo, locale);
        String actual = beanPointer.asPath();
        String expected = "/prefix:localName";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLength_CbDW0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        assertEquals(1, beanPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_HfEg0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.getDefault());
        assertFalse(beanPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        name = mock(QName.class);
        locale = mock(Locale.class);
        bean = mock(Object.class);
        beanInfo = mock(JXPathBasicBeanInfo.class);
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        when(name.hashCode()).thenReturn(123);
        assertEquals(123, beanpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_JBsa0_1() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), Locale.getDefault());
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_JBsa0_2() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), Locale.getDefault());
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertEquals(BeanPropertyPointer.class, propertyPointer.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_1() {
        bean = new Object();
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        when(parent.asPath()).thenReturn("parentPath");
        when(beanInfo.isAtomic()).thenReturn(true);
        when(bean.toString()).thenReturn("beanString");
        when(beanInfo.isAtomic()).thenReturn(false);
        assertEquals("beanString", beanpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_2() {
        bean = new Object();
        beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        when(parent.asPath()).thenReturn("parentPath");
        when(beanInfo.isAtomic()).thenReturn(true);
        when(bean.toString()).thenReturn("beanString");
        when(beanInfo.isAtomic()).thenReturn(false);
        assertEquals("/parentPath/beanString", beanpointer.asPath());
    }
}