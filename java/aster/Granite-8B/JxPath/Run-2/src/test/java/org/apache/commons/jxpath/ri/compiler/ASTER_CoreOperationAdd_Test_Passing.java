/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationAdd_Test_Passing {
    @Mock
    private Expression[] args;
    @Mock
    private EvalContext context;
    private CoreOperationAdd coreOperationAdd;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_vKfF0() {
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(new Expression[]{});
        assertEquals("+", coreOperationAdd.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue() {
        coreOperationAdd = new CoreOperationAdd(args);
        // Mock the behavior of the computeValue method
        when(args[0].computeValue(context)).thenReturn(1.0);
        when(args[1].computeValue(context)).thenReturn(2.0);
        // Call the computeValue method and assert the result
        assertEquals(3.0, coreOperationAdd.computeValue(context));
        // Verify that the computeValue method was called twice
        verify(args[0], times(1)).computeValue(context);
        verify(args[1], times(1)).computeValue(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_Bghd0() {
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(new Expression[0]);
        assertTrue(coreOperationAdd.isSymmetric());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrecedence_gJVW0() {
        CoreOperationAdd coreOperationAdd = new CoreOperationAdd(new Expression[]{});
        int expected = 1;
        int actual = coreOperationAdd.getPrecedence();
        assertEquals(expected, actual);
    }
}