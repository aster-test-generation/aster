/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Failing {
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private QName qName;
    private DynamicPointer dynamicPointer;
    private Object bean;
    private QName name;
    @Mock
    private QName nameMock;
    @Mock
    private Object beanMock;
    @Mock
    private PageContextHandler handlerMock;
    @Mock
    private Locale localeMock;
    @Mock
    private VariablePointer parentMock;
    @Mock
    private KeywordVariables variablesMock;
    private DynamicPointer dynamicpointer;
    @Mock
    private PageContextHandler handler;
    @Mock
    private Locale locale;
    @Mock
    private VariablePointer parent;
    @Mock
    private KeywordVariables variables;
    @Mock
    private QName mockName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        bean = new Object();
        name = new QName("name");
        dynamicpointer = new DynamicPointer(qName, bean, pageContextHandler, locale);
        when(qName.hashCode()).thenReturn(1);
        when(bean.hashCode()).thenReturn(2);
        when(pageContextHandler.hashCode()).thenReturn(3);
        when(locale.hashCode()).thenReturn(4);
        assertEquals(10, dynamicpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        bean = mock(Object.class);
        dynamicpointer = new DynamicPointer(null, null, null, Locale.getDefault());
        when(dynamicpointer.getBaseValue()).thenReturn(bean);
        assertEquals(bean, dynamicpointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() {
        name = new QName("prefix", "localName");
        dynamicpointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.getDefault());
        when(mockName.getName()).thenReturn("expectedName");
        when(mockName.getPrefix()).thenReturn("expectedPrefix");
        assertEquals("expectedName", dynamicpointer.getName().getName());
        assertEquals("expectedPrefix", dynamicpointer.getName().getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_1_fid2() {
        name = new QName("prefix", "localName");
        dynamicpointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.getDefault());
        when(mockName.getName()).thenReturn("expectedName");
        when(mockName.getPrefix()).thenReturn("expectedPrefix");
        assertEquals("expectedName", dynamicpointer.getName().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName_2_fid2() {
        name = new QName("prefix", "localName");
        dynamicpointer = new DynamicPointer(name, new Object(), new PageContextHandler(), Locale.getDefault());
        when(mockName.getName()).thenReturn("expectedName");
        when(mockName.getPrefix()).thenReturn("expectedPrefix");
        assertEquals("expectedPrefix", dynamicpointer.getName().getPrefix());
    }
}