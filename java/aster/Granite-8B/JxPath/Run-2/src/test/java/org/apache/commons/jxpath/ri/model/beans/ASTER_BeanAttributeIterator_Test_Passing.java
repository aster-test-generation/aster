/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanAttributeIterator_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition_uMhO0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), Locale.getDefault());
        BeanAttributeIterator beanAttributeIterator = new BeanAttributeIterator(beanPointer, new QName("name"));
        int position = beanAttributeIterator.getPosition();
        assertEquals(0, position);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition2_pGzT1() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Class.class), Locale.getDefault());
        BeanAttributeIterator beanAttributeIterator = new BeanAttributeIterator(beanPointer, new QName("name"));
        int position = beanAttributeIterator.getPosition();
        assertEquals(0, position);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition6_fvci5() {
        Class clazz = Class.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz, true);
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), jXPathBasicBeanInfo, Locale.getDefault());
        BeanAttributeIterator beanAttributeIterator = new BeanAttributeIterator(beanPointer, new QName("name"));
        int position = beanAttributeIterator.getPosition();
        assertEquals(0, position);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition7_ZBAq6() {
        Class clazz = Class.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz);
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), jXPathBasicBeanInfo, Locale.getDefault());
        BeanAttributeIterator beanAttributeIterator = new BeanAttributeIterator(beanPointer, new QName("name"));
        int position = beanAttributeIterator.getPosition();
        assertEquals(0, position);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition8_youy7() {
        Class clazz = Class.class;
        Class dynamicPropertyHandlerClass = Class.class;
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz, dynamicPropertyHandlerClass);
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), jXPathBasicBeanInfo, Locale.getDefault());
        BeanAttributeIterator beanAttributeIterator = new BeanAttributeIterator(beanPointer, new QName("name"));
        int position = beanAttributeIterator.getPosition();
        assertEquals(0, position);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor1_LjRM0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor2_wVEq1() {
        KeywordVariables keywordVariables = new KeywordVariables("", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName(""));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariablesConstructor_NyaW4() {
        KeywordVariables keywordVariables = new KeywordVariables("", new Object());
        assertNotNull(keywordVariables);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor1_ofqk8() {
        QName qName = new QName("");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor2_DmDA9() {
        String prefix = "";
        String localName = "";
        QName qName = new QName(prefix, localName);
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor2_mhpJ9() {
        QName qName = new QName("", "");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfoConstructor2_wurE11_dacd0() {
        Class clazz = null;
        try {
            clazz = Class.forName("java.lang.Class");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz);
        assertNotNull(jXPathBasicBeanInfo);
    }
}