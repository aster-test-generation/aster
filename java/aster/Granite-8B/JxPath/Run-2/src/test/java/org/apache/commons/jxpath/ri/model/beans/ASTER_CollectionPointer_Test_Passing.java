/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Passing {
    private CollectionPointer collectionPointer;
    private NodePointer pointer1;
    private NodePointer pointer2;
    private Object collection;
    private CollectionPointer collectionpointer;
    @Mock
    private NodeTest test;
    @Mock
    private Locale locale;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private QName name;
    @Mock
    private NodeIterator nodeIterator;
    private NodePointer valuePointer;
    @Mock
    private KeywordVariables variables;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private NodeIterator nodeIteratorMock;
    @Mock
    private VariablePointer variablePointerMock;
    @Mock
    private KeywordVariables keywordVariablesMock;
    @Mock
    private DOMNodePointer domNodePointerMock;
    @Mock
    private Locale localeMock;
    @Mock
    private Object collectionMock;
    @Mock
    private NodePointer nodePointer;
    private Object value;
    private int index;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() {
        collectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        pointer1 = mock(NodePointer.class);
        when(pointer1.getIndex()).thenReturn(1);
        pointer2 = mock(NodePointer.class);
        when(pointer2.getIndex()).thenReturn(2);
        int result = collectionPointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithVariablePointer_YrNp0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        CollectionPointer collectionPointer = new CollectionPointer(variablePointer, new Object());
        assertTrue(collectionPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithKeywordVariables_wdYL1() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        CollectionPointer collectionPointer = new CollectionPointer(keywordVariables, new Locale("en"));
        assertTrue(collectionPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode1_lsYc0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale(""));
        Object immediateNode = collectionPointer.getImmediateNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator1_kmDz0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        NodeIterator nodeIterator = variablePointer.attributeIterator(new QName(""));
        Assertions.assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator2_fLXt1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("", null), new QName(""));
        NodeIterator nodeIterator = variablePointer.attributeIterator(new QName(""));
        Assertions.assertNotNull(nodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator1_IRuJ6() {
        QName qName = new QName("");
        boolean equals = qName.equals(null);
        Assertions.assertFalse(equals);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator2_QUHH7() {
        QName qName = new QName("", "");
        boolean equals = qName.equals(null);
        Assertions.assertFalse(equals);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator3_hFXs8() {
        QName qName = new QName("");
        String name = qName.getName();
        Assertions.assertEquals("", name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator4_kXtN9() {
        QName qName = new QName("", "");
        String name = qName.getName();
        Assertions.assertEquals("", name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator6_RmDv11() {
        QName qName = new QName("", "");
        String prefix = qName.getPrefix();
        Assertions.assertEquals("", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator7_kEnj12() {
        QName qName = new QName("");
        String toString = qName.toString();
        Assertions.assertEquals("", toString);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator9_xrXr14() {
        QName qName = new QName("");
        int hashCode = qName.hashCode();
        Assertions.assertEquals(0, hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator10_weNm15() {
        QName qName = new QName("", "");
        int hashCode = qName.hashCode();
        Assertions.assertEquals(0, hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndex_nBur0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        collectionPointer.setIndex(0);
        assertEquals(0, collectionPointer.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithNegativeIndex_rqEF1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        collectionPointer.setIndex(-1);
        assertEquals(-1, collectionPointer.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetIndexWithLargeIndex_EHfk2() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        collectionPointer.setIndex(1000);
        assertEquals(1000, collectionPointer.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() throws Exception {
        collectionpointer = new CollectionPointer(Mockito.mock(Object.class), Mockito.mock(Locale.class));
        NodeTest test = Mockito.mock(NodeTest.class);
        boolean reverse = true;
        NodePointer startWith = Mockito.mock(NodePointer.class);
        NodeIterator result = collectionpointer.childIterator(test, reverse, startWith);
        assertEquals(result.getClass(), CollectionChildNodeIterator.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithAtomicValue_fruX1() {
        Object value = "Atomic Value";
        CollectionPointer collectionPointer = new CollectionPointer(value, Locale.getDefault());
        boolean isLeaf = collectionPointer.isLeaf();
        Assertions.assertTrue(isLeaf);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWithNonAtomicValue_ayCX2() {
        Object value = new Object();
        CollectionPointer collectionPointer = new CollectionPointer(value, Locale.getDefault());
        boolean isLeaf = collectionPointer.isLeaf();
        Assertions.assertFalse(isLeaf);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator1_oedV0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        NodeIterator nodeIterator = variablePointer.namespaceIterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator2_qSxd1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        NodeIterator nodeIterator = variablePointer.namespaceIterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator1_PRdG8() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("locale"));
        NodeIterator nodeIterator = collectionPointer.namespaceIterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_jFJH0_1() throws Exception {
        collection = mock(Object.class);
        collectionpointer = new CollectionPointer(null, collection);
        CollectionPointer other = new CollectionPointer(null, collection);
        assertTrue(collectionpointer.equals(collectionpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_jFJH0_2() throws Exception {
        collection = mock(Object.class);
        collectionpointer = new CollectionPointer(null, collection);
        CollectionPointer other = new CollectionPointer(null, collection);
        assertTrue(collectionpointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_jFJH0_3() throws Exception {
        collection = mock(Object.class);
        collectionpointer = new CollectionPointer(null, collection);
        CollectionPointer other = new CollectionPointer(null, collection);
        assertFalse(collectionpointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator5_qtwv10_fid2() {
        QName qName = new QName("");
        String prefix = qName.getPrefix();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_cetv1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), new Locale("en"));
        assertEquals(1, collectionPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithVariables_cUKE1_fid2() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        CollectionPointer collectionPointer = new CollectionPointer(variables, new Locale("en"));
        assertEquals(1, collectionPointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_fid2() throws Exception {
        parent = mock(DOMNodePointer.class);
        locale = mock(Locale.class);
        collection = new Object();
        // Create a CollectionPointer with a parent and collection
        collectionpointer = new CollectionPointer(parent, collection);
        // Mock the behavior of the getImmediateParentPointer method
        when(parent.getImmediateParentPointer()).thenReturn(parent);
        // Mock the behavior of the getIndex method
        when(parent.getIndex()).thenReturn(1);
        // Call the asPath method on the collectionpointer
        String path = collectionpointer.asPath();
        // Assert that the path is correct
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_bsQf0_fid2() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.getDefault());
        String actual = collectionPointer.asPath();
        String expected = "/";
        assertEquals(expected, actual);
    }
}