/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationMultiply_Test_Passing {
    @Mock
    private EvalContext context;
    @Mock
    private Constant arg1;
    @Mock
    private Constant arg2;
    private CoreOperationMultiply coreoperationmultiply;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_lSbQ0() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("1"), new Constant("2"));
        assertEquals("*", coreOperationMultiply.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() {
        coreoperationmultiply = new CoreOperationMultiply(arg1, arg2);
        // Set up expectations
        when(arg1.computeValue(context)).thenReturn(1.0);
        when(arg2.computeValue(context)).thenReturn(2.0);
        // Call the method under test
        Object result = coreoperationmultiply.computeValue(context);
        // Verify the result
        assertEquals(2.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_dQTp0() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("string"), new Constant(1));
        boolean result = coreOperationMultiply.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_lTcS1() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant(1), new Constant(1));
        boolean result = coreOperationMultiply.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_FqKZ2() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant(1), new Constant("string"));
        boolean result = coreOperationMultiply.isSymmetric();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_hKoO3() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("string"), new Constant("string"));
        boolean result = coreOperationMultiply.isSymmetric();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_ogwS5() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant(1), new Constant("string"));
        boolean result = coreOperationMultiply.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_gtGz9() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("string"), new Constant("string"));
        boolean result = coreOperationMultiply.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_ksID17() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant(1), new Constant("string"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrecedence_Ugff0() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("string"), new Constant(10));
        int expected = 5;
        int actual = coreOperationMultiply.getPrecedence();
        assertEquals(expected, actual);
    }
}