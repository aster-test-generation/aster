/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ClassLoaderUtil_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_withValidClassName_returnsClass_ICUD0() throws ClassNotFoundException {
        final String className = "java.lang.String";
        final boolean initialize = true;
        final Class expectedClass = String.class;
        final Class actualClass = ClassLoaderUtil.getClass(className, initialize);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_withInvalidClassName_throwsClassNotFoundException_vMYq1() {
        final String className = "InvalidClassName";
        final boolean initialize = true;
        try {
            ClassLoaderUtil.getClass(className, initialize);
            fail("Expected ClassNotFoundException");
        } catch (final ClassNotFoundException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_nkgB0() throws ClassNotFoundException {
        ClassLoader classLoader = new ClassLoader() {
        };
        String className = "java.lang.String";
        Class<?> expectedClass = String.class;
        Class<?> actualClass = ClassLoaderUtil.getClass(classLoader, className);
        assertEquals(expectedClass, actualClass);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_ScCg0() {
        ClassLoaderUtil classLoaderUtil = new ClassLoaderUtil();
        String className = "java.lang.String";
        Class clazz = null;
        try {
            clazz = classLoaderUtil.getClass(className);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        assertNotNull(clazz);
        assertEquals(String.class, clazz);
    }
}