/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceContext_Test_Passing {
    NamespaceContext namespacecontext;
    SelfContext selfContext;
    NodeTypeTest nodeTypeTest;
    private NodeIterator iterator;
    private boolean setStarted = false;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    private NodePointer currentNodePointer;
    @Mock
    private NamespaceContext parentNamespaceContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodeNameTest nodeNameTest;
    @Mock
    private QName testName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithNegativePosition_QXai0() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = namespaceContext.setPosition(-1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithZeroPosition_sORm1() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = namespaceContext.setPosition(0);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithPositivePosition_SlMx2() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = namespaceContext.setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithLargePosition_UjgG3() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = namespaceContext.setPosition(1000);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_oFsq0() {
        NamespaceContext namespaceContext = new NamespaceContext(null, null);
        namespaceContext.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_wIEM0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSelfContext_tLDg1() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceContext_qIUD2() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_dhlr3() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(0));
        boolean result = namespaceContext.nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode2_RYnR4() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(0));
        namespaceContext.nextNode();
        boolean result = namespaceContext.nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode3_xvUt5() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(0));
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        boolean result = namespaceContext.nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode4_lDcR6() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(0));
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        boolean result = namespaceContext.nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode5_JRuQ7() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(0));
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        boolean result = namespaceContext.nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode6_hOLu8() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(0));
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        boolean result = namespaceContext.nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode7_gooY9() {
        NamespaceContext namespaceContext = new NamespaceContext(null, new NodeTypeTest(0));
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        namespaceContext.nextNode();
        boolean result = namespaceContext.nextNode();
    }
}