/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Passing {
    @Mock
    private Node node;
    @Mock
    private DOMNodePointer domnodepointer;
    @Mock
    private NodePointer nodepointer;
    @Mock
    private NamedNodeMap namednodemap;
    Attr attr;
    private Locale locale;
    private String id;
    private VariablePointer parent;
    private KeywordVariables variables;
    private QName name;
    Element element;
    private DOMNodePointer domNodePointer;
    private NodeIterator nodeIterator;
    private NodeTest test;
    private boolean reverse;
    private NodePointer startWith;
    private VariablePointer variablePointer;
    private KeywordVariables keywordVariables;
    private QName qName;
    @Mock
    private NodeList nodelist;
    private String defaultNamespace;
    private Document document;
    private Node parentNode;
    private NodeNameTest nodeNameTest;
    private NodeTypeTest nodeTypeTest;
    private ProcessingInstructionTest processingInstructionTest;
    private Map<String, String> namespaces;
    @Mock
    private Node nodeMock;
    private NamespaceResolver localNamespaceResolver;
    @Mock
    private NamespaceResolver namespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getParentNode()).thenReturn(node);
        boolean result = domnodepointer.testNode(null);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue4() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        id = "id";
        parent = mock(VariablePointer.class);
        variables = mock(KeywordVariables.class);
        name = mock(QName.class);
        domnodepointer = new DOMNodePointer(node, locale, id);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        when(node.getChildNodes()).thenReturn(nodelist);
        when(nodelist.getLength()).thenReturn(1);
        when(nodelist.item(0)).thenReturn(node);
        when(node.cloneNode(true)).thenReturn(node);
        when(node.appendChild(any(Node.class))).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        domnodepointer.setValue(node);
        verify(node, times(1)).appendChild(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_1() {
        node = mock(Node.class);
        locale = mock(Locale.class);
        id = "testId";
        parent = mock(VariablePointer.class);
        variables = mock(KeywordVariables.class);
        name = mock(QName.class);
        domnodepointer = new DOMNodePointer(node, locale, id);
        domnodepointer = new DOMNodePointer(parent, node);
        domnodepointer = new DOMNodePointer(node, locale);
        when(node.hasChildNodes()).thenReturn(true);
        when(node.hasChildNodes()).thenReturn(false);
        assertFalse(domnodepointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        Object immediateNode = domnodepointer.getImmediateNode();
        assertEquals(node, immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute1_VocT0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String attrName = "attrName";
        String actual = DOMNodePointer.findEnclosingAttribute(null, attrName);
        assertEquals(null, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() {
        name = new QName("name");
        nodeIterator = mock(NodeIterator.class);
        domNodePointer = new DOMNodePointer(null, null, null) {
            @Override
            public NodeIterator attributeIterator(QName name) {
                return nodeIterator;
            }
        };
        NodeIterator result = domNodePointer.attributeIterator(name);
        assertEquals(nodeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURIWithNode_qHWU0() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale, id);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURIWithParentAndNode_TKPS1() {
        VariablePointer parent = new VariablePointer(name);
        DOMNodePointer pointer = new DOMNodePointer(parent, node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURIWithNodeAndLocale_CZIg2() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() {
        node = mock(Node.class);
        locale = mock(Locale.class);
        id = "testId";
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        qName = mock(QName.class);
        domNodePointer = new DOMNodePointer(node, locale, id);
        when(node.getTextContent()).thenReturn("testText");
        assertEquals(1, domNodePointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_GEMx0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        assertEquals(1, domNodePointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithVariablePointer_NZEl1() {
        VariablePointer variablePointer = new VariablePointer(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        assertEquals(1, domNodePointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator() {
        domNodePointer = mock(DOMNodePointer.class);
        nodeIterator = mock(NodeIterator.class);
        when(domNodePointer.namespaceIterator()).thenReturn(nodeIterator);
        // Call the method under test
        NodeIterator result = domNodePointer.namespaceIterator();
        // Verify that the correct object was returned
        assertEquals(nodeIterator, result);
        // Verify that the method was called once
        verify(domNodePointer, times(1)).namespaceIterator();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.hasChildNodes()).thenReturn(false);
        when(node.hasChildNodes()).thenReturn(true);
        assertFalse(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        // Test when object is equal to itself
        // Test when object is not equal to null
        // Test when object is not equal to a different type
        // Test when object is equal to a mock Node
        DOMNodePointer mockDOMNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        assertTrue(domnodepointer.equals(domnodepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        // Test when object is equal to itself
        // Test when object is not equal to null
        // Test when object is not equal to a different type
        // Test when object is equal to a mock Node
        DOMNodePointer mockDOMNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        assertFalse(domnodepointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        // Test when object is equal to itself
        // Test when object is not equal to null
        // Test when object is not equal to a different type
        // Test when object is equal to a mock Node
        DOMNodePointer mockDOMNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        assertFalse(domnodepointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        // Test when object is equal to itself
        // Test when object is not equal to null
        // Test when object is not equal to a different type
        // Test when object is equal to a mock Node
        DOMNodePointer mockDOMNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        assertTrue(domnodepointer.equals(mockDOMNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_1() {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getLocalName()).thenReturn("nodeName");
        when(node.getLocalName()).thenReturn(null);
        when(node.getNodeName()).thenReturn("nodeName");
        assertEquals("nodeName", DOMNodePointer.getLocalName(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_2() {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getLocalName()).thenReturn(null);
        when(node.getNodeName()).thenReturn("nodeName");
        assertEquals("nodeName", DOMNodePointer.getLocalName(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocalNameWithNodeLocalName_jwFD0() {
        Node mockNode = mock(Node.class);
        when(mockNode.getLocalName()).thenReturn("localName");
        assertEquals("localName", DOMNodePointer.getLocalName(mockNode));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocalNameWithNodeNodeName_fpQw1() {
        Node mockNode = mock(Node.class);
        when(mockNode.getLocalName()).thenReturn(null);
        when(mockNode.getNodeName()).thenReturn("prefix:localName");
        assertEquals("localName", DOMNodePointer.getLocalName(mockNode));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove() throws Exception {
        node = mock(Node.class);
        locale = mock(Locale.class);
        id = "id";
        parent = mock(VariablePointer.class);
        domnodepointer = new DOMNodePointer(node, locale, id);
        when(node.getParentNode()).thenReturn(node);
        when(node.removeChild(any(Node.class))).thenReturn(node);
        domnodepointer.remove();
        verify(node, times(1)).getParentNode();
        verify(node, times(1)).removeChild(any(Node.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer_jjWy0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_kHbt1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariables_IMFh2() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        assertNotNull(keywordVariables);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_Swtk3() {
        QName qName = new QName("qualifiedName");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName2_qwRf4() {
        QName qName = new QName("prefix", "localName");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDOMNodePointer_hPjb12() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "id");
        assertNotNull(domNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer() {
        node = mock(Node.class);
        locale = Locale.getDefault();
        id = "test_id";
        domNodePointer = new DOMNodePointer(node, locale, id);
        String prefix = "test_prefix";
        NodePointer namespacePointer = domNodePointer.namespacePointer(prefix);
        NamespacePointer expectedNamespacePointer = new NamespacePointer(domNodePointer, prefix);
        assertEquals(expectedNamespacePointer, namespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLanguage() {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getParentNode()).thenReturn(element);
        when(element.getAttribute("xml:lang")).thenReturn("en");
        assertNull(domNodePointer.getLanguage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLanguage_zwcz0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String language = domNodePointer.getLanguage();
        assertNull(language);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLanguage2_FfoE1() {
        VariablePointer variablePointer = new VariablePointer(null);
        KeywordVariables keywordVariables = new KeywordVariables("", null);
        QName qName = new QName("");
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, "");
        DOMNodePointer domNodePointer2 = new DOMNodePointer(variablePointer, null);
        DOMNodePointer domNodePointer3 = new DOMNodePointer(null, null, "");
        String language = domNodePointer.getLanguage();
        assertNull(language);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getPreviousSibling()).thenReturn(node);
        when(node.getParentNode()).thenReturn(node);
        assertEquals("", domnodepointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithId_jGAv0() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale, "id");
        assertEquals("id('id')", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithDocumentNode_nZtx4() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale);
        assertEquals("", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor2_Jqle1() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("name"));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor1_VCkn0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor2_iPPU1() {
        KeywordVariables keywordVariables = new KeywordVariables("", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName(""));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor1_YxZe2() {
        QName qName = new QName("");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor2_HKlw3() {
        QName qName = new QName("", "");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_heTj0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        boolean actual = domNodePointer.isActual();
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_xPUT0_XHnw0_1() {
        Locale locale = new Locale("en", "US");
        String id = "123";
        Node node = Mockito.mock(Node.class);
        VariablePointer parent = new VariablePointer(new QName("prefix", "localName"));
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale, id);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(node, locale);
        assertEquals(node, domNodePointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_xPUT0_XHnw0_2() {
        Locale locale = new Locale("en", "US");
        String id = "123";
        Node node = Mockito.mock(Node.class);
        VariablePointer parent = new VariablePointer(new QName("prefix", "localName"));
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale, id);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(node, locale);
        assertEquals(node, domNodePointer1.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_xPUT0_XHnw0_3() {
        Locale locale = new Locale("en", "US");
        String id = "123";
        Node node = Mockito.mock(Node.class);
        VariablePointer parent = new VariablePointer(new QName("prefix", "localName"));
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale, id);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(node, locale);
        assertEquals(node, domNodePointer2.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_MIbH0_kFOH0() {
        Node node = mock(Node.class); // Initialize node object
        Locale locale = Locale.getDefault(); // Initialize locale object
        String id = "id"; // Initialize id variable
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, id);
        int expectedHashCode = node.hashCode();
        int actualHashCode = domNodePointer.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithNodeAndLocale_fqhS5_tMUe0() {
        Node node = mock(Node.class);
        Locale locale = new Locale("en", "US");
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, null);
        assertEquals(1, domNodePointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_YcBS0() {
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        Mockito.when(nodelist.item(Mockito.anyInt())).thenReturn(node);
        Mockito.when(node.getChildNodes()).thenReturn(nodelist);
        Mockito.when(node.getParentNode()).thenReturn(node);
        assertEquals("", domNodePointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodePointer_rgbt9_dtee0() {
        NodePointer nodePointer = new DOMNodePointer(null, null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrefix_node_has_no_prefix_bUjp1_jzyk0() {
        Node node = mock(Node.class);
        when(node.getPrefix()).thenReturn(null);
        when(node.getNodeName()).thenReturn("node");
        assertEquals(null, DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrefix_node_has_prefix_in_name_GvFg2_jsHk0() {
        Node node = mock(Node.class);
        when(node.getPrefix()).thenReturn(null);
        when(node.getNodeName()).thenReturn("prefix:node");
        assertEquals("prefix", DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolver2_iBBd1_NdNf0() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        NamespaceResolver namespaceResolver = domNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.hasChildNodes()).thenReturn(false);
        assertTrue(domnodepointer.isLeaf());
        when(node.hasChildNodes()).thenReturn(true);
        assertFalse(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        // Test when object is equal to itself
        assertTrue(domnodepointer.equals(domnodepointer));
        // Test when object is not equal to null
        assertFalse(domnodepointer.equals(null));
        // Test when object is not equal to a different type
        assertFalse(domnodepointer.equals(new Object()));
        // Test when object is equal to a mock Node
        DOMNodePointer mockDOMNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        assertTrue(domnodepointer.equals(mockDOMNodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName() {
        node = mock(Node.class);
        domNodePointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getLocalName()).thenReturn("localName");
        assertEquals("localName", DOMNodePointer.getLocalName(node));
        when(node.getLocalName()).thenReturn(null);
        when(node.getNodeName()).thenReturn("nodeName");
        assertEquals("nodeName", DOMNodePointer.getLocalName(node));
    }
}