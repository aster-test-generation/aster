/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathException;
import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.Text;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Locale;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_JDOMNodePointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName1_iAxE0() {
	JDOMNodePointer pointer = new JDOMNodePointer(new Element("test"), Locale.ENGLISH);
	pointer.getName();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetName2_qncD1() {
	JDOMNodePointer pointer = new JDOMNodePointer(new Element("test"), Locale.ENGLISH, "id");
	pointer.getName();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForEmptyElementNode_Dowa1() {
        Element element = new Element("root");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        boolean isLeaf = pointer.isLeaf();
        assertTrue(isLeaf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForDocumentNode_OJgd2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Document(new Element("root")), Locale.getDefault());
        boolean isLeaf = pointer.isLeaf();
        assertFalse(isLeaf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForOtherNodes_DeUF4() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("text"), Locale.getDefault());
        boolean isLeaf = pointer.isLeaf();
        assertTrue(isLeaf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode_tGYr1() throws Exception{
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Mtrh0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.getDefault());
        try {
            pointer.remove();
        } catch (JXPathException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithParent_DALW1() {
        Element element = new Element("parent");
        JDOMNodePointer pointer = new JDOMNodePointer(element, Locale.getDefault());
        try {
            pointer.remove();
        } catch (JXPathException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithNullNode_yeJP3() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.getDefault(), "id");
        try {
            pointer.remove();
        } catch (JXPathException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithNullLocale_SDau4() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), null);
        try {
            pointer.remove();
        } catch (JXPathException e) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocalNameForElementNode_spZD0() {
        Object node = new Element("example");
        String expected = "example";
        String actual = JDOMNodePointer.getLocalName(node);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocalNameForAttributeNode_wndA1() {
        Object node = new Attribute("example", "value");
        String expected = "example";
        String actual = JDOMNodePointer.getLocalName(node);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocalNameForNullNode_skRN2() {
        Object node = null;
        String expected = null;
        String actual = JDOMNodePointer.getLocalName(node);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocalNameForOtherNode_Ldkv3() {
        Object node = new Text("example");
        String expected = null;
        String actual = JDOMNodePointer.getLocalName(node);
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute1_KkIa0() {
        Object n = new Object();
        String attrName = "attr";
        Namespace ns = Namespace.getNamespace("ns");
        String attr = JDOMNodePointer.findEnclosingAttribute(n, attrName, ns);
        assertEquals(null, attr);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_deHU0_fid2() {
        Object node = new Element("test");
        String prefix = JDOMNodePointer.getPrefix(node);
    assertNull(prefix);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForElementNode_JRXS0_fid2() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Element("root"), Locale.getDefault());
        boolean isLeaf = pointer.isLeaf();
        assertTrue(isLeaf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForEmptyDocumentNode_CDpH3_fid2() {
        Document document = new Document(new Element("root"));
        JDOMNodePointer pointer = new JDOMNodePointer(document, Locale.getDefault());
        boolean isLeaf = pointer.isLeaf();
        assertFalse(isLeaf);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute2_NbOQ1_fid2() {
        Object n = new Element("e", "ns");
        String attrName = "attr";
        Namespace ns = Namespace.getNamespace("ns");
        String attr = JDOMNodePointer.findEnclosingAttribute(n, attrName, ns);
    assertNull(attr);
    }
}