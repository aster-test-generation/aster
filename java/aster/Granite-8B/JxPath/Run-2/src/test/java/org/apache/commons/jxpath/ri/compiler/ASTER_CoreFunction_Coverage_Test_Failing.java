/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreFunction_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_pBZy1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        coreFunction.getArg1().computeValue(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionLang_iuYU4() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        coreFunction.functionLang(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValue_bepe1() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        Object result = coreFunction.functionNot(null);
        assertEquals(Boolean.FALSE, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBooleanValueWithFalse_exfu3() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        Object result = coreFunction.functionNot(null);
        assertEquals(Boolean.TRUE, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testAssertArgCount0_zglx0() {
    CoreFunction fixture = new CoreFunction(0, null);
    try {
        fixture.functionLast(null);
    } catch (IllegalArgumentException ex) {
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullArgs_wAGN0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String actual = coreFunction.toString();
        String expected = "toString(0, null)";
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyArgs_DjpH1() {
        Expression[] args = new Expression[0];
        CoreFunction coreFunction = new CoreFunction(0, args);
        String actual = coreFunction.toString();
        String expected = "toString(0, [])";
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testInfoSetUtilDoubleValue_zWAu1() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    assertEquals(Double.NaN, InfoSetUtil.doubleValue(null));
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testFunctionCeiling_iwSR3() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    assertEquals(Double.NaN, coreFunction.functionCeiling(null));
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute_SGmD2() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        coreFunction.getArg2().compute(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent1_CLwf0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertTrue(coreFunction.computeContextDependent());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAssertArgCount_fcJg0() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[2]);
        try {
            coreFunction.functionSubstringAfter(null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Function requires 2 arguments", e.getMessage());
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionName1_dDKI0_sUmd0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
    String actual = (String) coreFunction.functionSubstring(null);
    String expected = "";
    assertEquals(expected, actual);
}
}