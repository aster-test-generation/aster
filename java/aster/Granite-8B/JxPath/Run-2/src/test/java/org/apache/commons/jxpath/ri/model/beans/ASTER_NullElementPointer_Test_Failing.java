/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullElementPointer_Test_Failing {
    @Mock
    DOMNodePointer parentPointer;
    @Mock
    NullElementPointer nullelementpointer;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Locale locale;
    @Mock
    private KeywordVariables variables;
    @Mock
    private QName name;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private Pointer pointer;
    @Mock
    private JXPathContext context;
    @Mock
    private Object value;
    @Mock
    private QName qName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 0);
        NodePointer result = nullelementpointer.createPath(context, value);
        verify(parent).createChild(context, null, 0, value);
        assertEquals(result, nullelementpointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 0);
        nullelementpointer.setValue("test");
        verify(parent, times(1)).setValue("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 1);
        when(parent.hashCode()).thenReturn(10);
        assertEquals(10 + 1, nullelementpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() {
        nullelementpointer = new NullElementPointer(domNodePointer, 0);
        when(nullelementpointer.getName()).thenReturn(qName);
        when(qName.getName()).thenReturn("testName");
        assertEquals("testName", nullelementpointer.getName().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 0);
        when(parent.asPath()).thenReturn("parentPath");
        when(parent.getImmediateParentPointer()).thenReturn(null);
        when(parent.getIndex()).thenReturn(0);
        String path = nullelementpointer.asPath();
        assertEquals("parentPath/.", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() {
        nullelementpointer = new NullElementPointer(parent, 0);
        when(parent.getLength()).thenReturn(10);
        assertEquals(10, nullelementpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() {
        nullelementpointer = new NullElementPointer(parent, 0);
        when(parent.getBaseValue()).thenReturn(new Object());
        Object baseValue = nullelementpointer.getBaseValue();
        verify(parent).getBaseValue();
        assertNotNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() {
        nullelementpointer = new NullElementPointer(parent, 0);
        when(parent.isActual()).thenReturn(true);
        assertTrue(nullelementpointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_fid1() {
        nullelementpointer = new NullElementPointer(parent, 0);
        when(parent.getBaseValue()).thenReturn(new Object());
        Object baseValue = nullelementpointer.getBaseValue();
        verify(parent, times(1)).getBaseValue();
        assertNotNull(baseValue);
    }
}