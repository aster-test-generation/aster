/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_MnPw0_1() {
        MethodLookupUtils methodLookupUtils = new MethodLookupUtils();
        Method method = methodLookupUtils.lookupStaticMethod(null, null, null);
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, null});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", null});
        Assertions.assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_MnPw0_2() {
        MethodLookupUtils methodLookupUtils = new MethodLookupUtils();
        Method method = methodLookupUtils.lookupStaticMethod(null, null, null);
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, null});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", null});
        Assertions.assertEquals("java.lang.String", method.getDeclaringClass().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_MnPw0_3() {
        MethodLookupUtils methodLookupUtils = new MethodLookupUtils();
        Method method = methodLookupUtils.lookupStaticMethod(null, null, null);
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, null});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", null});
        Assertions.assertEquals("concat", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod_MnPw0_4() {
        MethodLookupUtils methodLookupUtils = new MethodLookupUtils();
        Method method = methodLookupUtils.lookupStaticMethod(null, null, null);
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, null});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", null});
        Assertions.assertArrayEquals(new Class[]{String.class, String.class}, method.getParameterTypes());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod2_nyjk1_1() {
        MethodLookupUtils methodLookupUtils = new MethodLookupUtils();
        Method method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, null});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", null});
        Assertions.assertEquals("java.lang.String", method.getDeclaringClass().getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod2_nyjk1_2() {
        MethodLookupUtils methodLookupUtils = new MethodLookupUtils();
        Method method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, null});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", null});
        Assertions.assertEquals("concat", method.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethod2_nyjk1_3() {
        MethodLookupUtils methodLookupUtils = new MethodLookupUtils();
        Method method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, null});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null, "b"});
        method = methodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", null});
        Assertions.assertArrayEquals(new Class[]{String.class, String.class}, method.getParameterTypes());
    }
}