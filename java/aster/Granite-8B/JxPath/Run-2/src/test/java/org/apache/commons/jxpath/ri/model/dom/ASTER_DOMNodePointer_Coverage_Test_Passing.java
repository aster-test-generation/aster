/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;
import org.w3c.dom.Node;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DOMNodePointer_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValue_NodeTypeIsCDATASectionNode_QtMc1() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.CDATA_SECTION_NODE);
    domNodePointer.setValue(null);
    verify(node, times(1)).setNodeValue(anyString());
    verify(node, times(1)).getParentNode().removeChild(node);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValue_NodeTypeIsNotTextNodeOrCDATASectionNode_Sktr2() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    Node node = mock(Node.class);
    when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
    domNodePointer.setValue(null);
    verify(node, times(0)).setNodeValue(anyString());
    verify(node, times(0)).getParentNode().removeChild(node);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testSetValue_ValueIsNode_ByrV3() {
    DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    Node node = mock(Node.class);
    Node valueNode = mock(Node.class);
    domNodePointer.setValue(valueNode);
    verify(node, times(0)).setNodeValue(anyString());
    verify(node, times(0)).getParentNode().removeChild(node);
    verify(valueNode, times(1)).cloneNode(true);
    verify(node, times(1)).appendChild(any(Node.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_bCDh0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String actual = domNodePointer.getDefaultNamespaceURI();
        String expected = null;
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testgetNamespaceResolver_LDrf0() {
		DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
		domNodePointer.getNamespaceResolver();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_qZpI1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespace = domNodePointer.getNamespaceURI("");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_uYmc2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespace = domNodePointer.getNamespaceURI("xml");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_VpkU3() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespace = domNodePointer.getNamespaceURI("xmlns");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_gkmc0_TELG0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespace = domNodePointer.getNamespaceResolver().getNamespaceURI(null);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_gkmc0_XRIG1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespace = domNodePointer.getNamespaceResolver().getNamespaceURI("prefix");
    }
}