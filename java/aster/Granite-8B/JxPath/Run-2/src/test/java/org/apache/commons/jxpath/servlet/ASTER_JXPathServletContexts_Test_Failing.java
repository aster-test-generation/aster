/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletContext;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathServletContexts_Test_Failing {
    private static JXPathContextFactory factory;
    JXPathServletContexts jxpathservletcontexts;
    ServletContext servletcontext;
    private JXPathServletContexts jxpathServletContexts;
    private ServletContext servletContext;
    private HttpSession httpSession;
    private PageContext pageContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testApplicationContext() throws Exception {
        servletcontext = mock(ServletContext.class);
        jxpathservletcontexts = new JXPathServletContexts();
        JXPathContext context = (JXPathContext) servletcontext.getAttribute(Constants.JXPATH_CONTEXT);
        when(servletcontext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        JXPathContext newContext = factory.newContext(null, servletContext);
        newContext.setVariables(new KeywordVariables(Constants.APPLICATION_SCOPE, servletContext));
        when(servletcontext.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(newContext);
        JXPathContext result = JXPathServletContexts.getApplicationContext(servletcontext);
        assertEquals(newContext, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetApplicationContext_bice0() {
        ServletContext servletContext = new MockServletContext();
        JXPathContext context = JXPathServletContexts.getApplicationContext(servletContext);
        assertNotNull(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSessionContext() throws Exception {
        servletContext = mock(ServletContext.class);
        httpSession = mock(HttpSession.class);
        jxpathServletContexts = new JXPathServletContexts();
        // Mock the behavior of getSessionContext method
        when(httpSession.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(null);
        when(jxpathServletContexts.getApplicationContext(servletContext)).thenReturn(mock(JXPathContext.class));
        when(factory.newContext(any(JXPathContext.class), any(HttpSessionAndServletContext.class))).thenReturn(mock(JXPathContext.class));
        // Call the method under test
        JXPathContext context = JXPathServletContexts.getSessionContext(httpSession, servletContext);
        // Verify the behavior of the method
        verify(httpSession).getAttribute(Constants.JXPATH_CONTEXT);
        verify(jxpathServletContexts).getApplicationContext(servletContext);
        verify(factory).newContext(any(JXPathContext.class), any(HttpSessionAndServletContext.class));
        assertNotNull(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPageContext() throws Exception {
        servletContext = mock(ServletContext.class);
        pageContext = mock(PageContext.class);
        httpSession = mock(HttpSession.class);
        jxpathServletContexts = new JXPathServletContexts();
        when(pageContext.getServletContext()).thenReturn(servletContext);
        JXPathContext context = JXPathServletContexts.getPageContext(pageContext);
        verify(pageContext, times(1)).getServletContext();
        assertNotNull(context);
    }
}