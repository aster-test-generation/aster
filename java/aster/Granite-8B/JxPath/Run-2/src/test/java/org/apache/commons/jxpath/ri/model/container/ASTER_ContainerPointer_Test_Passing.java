/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Container;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.xml.DocumentContainer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ContainerPointer_Test_Passing {
    ContainerPointer containerpointer;
    private Container container;
    @Mock
    private Container mockContainer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private DOMNodePointer domNodePointer;
    private ContainerPointer containerPointer;
    private NodePointer valuePointer;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Locale locale;
    @Mock
    private QName name;
    @Mock
    private NodeIterator mockNodeIterator;
    @Mock
    private VariablePointer mockVariablePointer;
    @Mock
    private DocumentContainer mockDocumentContainer;
    @Mock
    private Locale mockLocale;
    @Mock
    private QName mockQName;
    @Mock
    private DOMNodePointer mockDOMNodePointer;
    @Mock
    private DocumentContainer documentContainer;
    private VariablePointer variablePointer;
    private QName qName;
    @Mock
    private DOMNodePointer domNodePointerMock;
    @Mock
    private NodeIterator nodeIteratorMock;
    @Mock
    private VariablePointer variablePointerMock;
    @Mock
    private DocumentContainer documentContainerMock;
    @Mock
    private QName qNameMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() {
        container = mock(Container.class);
        containerpointer = new ContainerPointer(null, container);
        ContainerPointer other = new ContainerPointer(null, container);
        assertTrue(containerpointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentContainer() {
        container = mock(Container.class);
        containerpointer = new ContainerPointer(null, container);
        Container otherContainer = mock(Container.class);
        ContainerPointer other = new ContainerPointer(null, otherContainer);
        assertFalse(containerpointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObjectTypes() {
        container = mock(Container.class);
        containerpointer = new ContainerPointer(null, container);
        assertFalse(containerpointer.equals("not a ContainerPointer"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull() {
        container = mock(Container.class);
        containerpointer = new ContainerPointer(null, container);
        assertFalse(containerpointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals1_AwYh0() {
        VariablePointer variablePointer1 = new VariablePointer(new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new QName("name1"));
        assertTrue(variablePointer1.equals(variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals3_yVRp2() {
        VariablePointer variablePointer1 = new VariablePointer(new KeywordVariables("keyword1", "object1"), new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword2", "object1"), new QName("name1"));
        assertFalse(variablePointer1.equals(variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals4_aDEW3() {
        VariablePointer variablePointer1 = new VariablePointer(new KeywordVariables("keyword1", "object1"), new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword1", "object2"), new QName("name1"));
        assertFalse(variablePointer1.equals(variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals5_PJTY4() {
        VariablePointer variablePointer1 = new VariablePointer(new KeywordVariables("keyword1", "object1"), new QName("name1"));
        Object object = new Object();
        assertFalse(variablePointer1.equals(object));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        container = mock(Container.class);
        containerpointer = new ContainerPointer(null, container);
        Object value = new Object();
        containerpointer.setValue(value);
        verify(container, times(1)).setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor1_TErd0() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor2_jjFY1() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("name"));
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariablesConstructor_RmBM2() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        assertNotNull(keywordVariables);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor1_RvNQ8() {
        String qualifiedName = "qualifiedName";
        QName qName = new QName(qualifiedName);
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor2_PDEO9() {
        String prefix = "prefix";
        String localName = "localName";
        QName qName = new QName(prefix, localName);
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath() {
        containerPointer = new ContainerPointer(parent, container);
        when(parent.asPath()).thenReturn("/parentPath");
        assertEquals("/parentPath", containerPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        container = mock(Container.class);
        containerpointer = new ContainerPointer(null, container);
        Object baseValue = containerpointer.getBaseValue();
        assertEquals(container, baseValue);
    }

    @Test
    @Timeout(value = -1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_fid1() throws Exception {
        containerpointer = new ContainerPointer(Mockito.mock(DOMNodePointer.class), Mockito.mock(DocumentContainer.class));
        NodePointer pointer1 = Mockito.mock(NodePointer.class);
        NodePointer pointer2 = Mockito.mock(NodePointer.class);
        when(pointer1.getIndex()).thenReturn(1);
        when(pointer2.getIndex()).thenReturn(2);
        int actual = containerpointer.compareChildNodePointers(pointer1, pointer2);
        int expected = -1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals2_qQqv1_fid1() {
        VariablePointer variablePointer1 = new VariablePointer(new KeywordVariables("keyword1", "object1"), new QName("name1"));
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword1", "object1"), new QName("name1"));
        assertFalse(variablePointer1.equals(variablePointer2));
    }
}