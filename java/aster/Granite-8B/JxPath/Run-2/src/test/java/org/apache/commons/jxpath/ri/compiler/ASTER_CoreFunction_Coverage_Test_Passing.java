/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_CoreFunction_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_EARo1() throws Exception{
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullArgs_fMNQ0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertEquals(0, coreFunction.getArgumentCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyArgs_twKN1() {
        Expression[] args = {};
        CoreFunction coreFunction = new CoreFunction(0, args);
        assertEquals(0, coreFunction.getArgumentCount());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringLength_HVEF0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING_LENGTH, null);
        assertEquals("string-length", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeSpace_MDur1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NORMALIZE_SPACE, null);
        assertEquals("normalize-space", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranslate_ennP2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRANSLATE, null);
        assertEquals("translate", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBoolean_XsUN3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
        assertEquals("boolean", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNot_KZTm4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NOT, null);
        assertEquals("not", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrue_FTSF5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRUE, null);
        assertEquals("true", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFalse_ZXGD6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FALSE, null);
        assertEquals("false", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLang_nyNi7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LANG, null);
        assertEquals("lang", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_dKkZ8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NUMBER, null);
        assertEquals("number", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_Pyuh9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUM, null);
        assertEquals("sum", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFloor_LgKx10() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FLOOR, null);
        assertEquals("floor", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCeiling_agPO11() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CEILING, null);
        assertEquals("ceiling", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRound_ILke12() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ROUND, null);
        assertEquals("round", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKey_xjbZ13() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_KEY, null);
        assertEquals("key", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatNumber_RZwI14() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, null);
        assertEquals("format-number", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLast_JnPS15() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LAST, null);
        assertEquals("last", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition_feSh16() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_POSITION, null);
        assertEquals("position", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCount_lFUs17() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_COUNT, null);
        assertEquals("count", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testId_AtpO18() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ID, null);
        assertEquals("id", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocalName_lNFe19() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LOCAL_NAME, null);
        assertEquals("local-name", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceUri_QzxU20() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAMESPACE_URI, null);
        assertEquals("namespace-uri", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testName_FMXO21() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NAME, null);
        assertEquals("name", coreFunction.getFunctionName());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testString_hJOv22() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING, null);
        assertEquals("string", coreFunction.getFunctionName());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testFunctionBooleanWithFalseValue_iQdV3_pgaf0() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    EvalContext context = mock(EvalContext.class);
    when(coreFunction.getArg1().computeValue(context)).thenReturn(false);
    assertEquals(false, coreFunction.functionBoolean(context));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNullArgs_wAGN0_fid1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String actual = coreFunction.toString();
        String expected = "unknownFunction0()()";
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyArgs_DjpH1_fid1() {
        Expression[] args = new Expression[0];
        CoreFunction coreFunction = new CoreFunction(0, args);
        String actual = coreFunction.toString();
        String expected = "unknownFunction0()()";
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testInfoSetUtilDoubleValue_zWAu1_fid1() {
    CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
  }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent1_CLwf0_fid1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertFalse(coreFunction.computeContextDependent());
    }
}