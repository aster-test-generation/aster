/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Failing {
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    private ParentContext parentcontext;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private JXPathContext context;
    @Mock
    private NodeTypeTest nodeTypeTest;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() {
        parentcontext = new ParentContext(parentContext, nodeTest);
        // Mock the setPosition method of the ParentContext class
        when(parentcontext.setPosition(1)).thenReturn(true);
        // Call the setPosition method with an argument of 1
        boolean result = parentcontext.setPosition(1);
        // Assert that the result is true
        assertTrue(result);
        // Verify that the setPosition method was called with the expected argument
        verify(parentcontext).setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset() throws Exception {
        NamespaceContext mockNamespaceContext = mock(NamespaceContext.class);
        NodeTypeTest mockNodeTypeTest = mock(NodeTypeTest.class);
        parentcontext = new ParentContext(mockNamespaceContext, mockNodeTypeTest);
        parentcontext.reset();
        verify(parentcontext, times(1)).reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCurrentNodePointer() throws Exception {
        parentcontext = new ParentContext(parentContext, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        assertEquals(nodePointer, parentcontext.getCurrentNodePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_yvbG0() {
        ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), null), new NodeTypeTest(0));
        NodePointer currentNodePointer = parentContext.getCurrentNodePointer();
        assertNotNull(currentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_fid2() {
        parentcontext = new ParentContext(parentContext, nodeTest);
        // Mock the setPosition method of the ParentContext class
        when(parentcontext.setPosition(anyInt())).thenReturn(true);
        // Call the setPosition method with an argument of 1
        boolean result = parentcontext.setPosition(1);
        // Assert that the result is true
        assertTrue(result);
        // Verify that the setPosition method was called with the expected argument
        verify(parentcontext).setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCurrentNodePointer_fid2() throws Exception {
        parentcontext = new ParentContext(parentContext, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        assertNull(nodePointer);
    }
}