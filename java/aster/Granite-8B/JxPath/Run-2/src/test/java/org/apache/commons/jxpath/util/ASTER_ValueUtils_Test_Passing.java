/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Array;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithArray_bTyB0() {
        Object collection = new Object[]{"a", "b", "c"};
        Object value = ValueUtils.getValue(collection, 1);
        assertEquals("b", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithList_fTkt1() {
        Object collection = Arrays.asList("a", "b", "c");
        Object value = ValueUtils.getValue(collection, 2);
        assertEquals("c", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithCollection_EnPg2() {
        Object collection = new ArrayList<>(Arrays.asList("a", "b", "c"));
        Object value = ValueUtils.getValue(collection, 0);
        assertEquals("a", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullCollection_rxXO3() {
        Object collection = null;
        Object value = ValueUtils.getValue(collection, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNegativeIndex_LyUK4() {
        Object collection = new ArrayList<>(Arrays.asList("a", "b", "c"));
        Object value = ValueUtils.getValue(collection, -1);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithIndexGreaterThanCollectionSize_ztHv5() {
        Object collection = new ArrayList<>(Arrays.asList("a", "b", "c"));
        Object value = ValueUtils.getValue(collection, 3);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyCollection_kfVv6() {
        Object collection = new ArrayList<>();
        Object value = ValueUtils.getValue(collection, 0);
        assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithNull_TzAp0() {
        Object value = null;
        boolean expected = false;
        boolean actual = ValueUtils.isCollection(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithArray_lOIo1() {
        Object value = new Object[0];
        boolean expected = true;
        boolean actual = ValueUtils.isCollection(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithCollection_iXYo2() {
        Object value = new ArrayList<>();
        boolean expected = true;
        boolean actual = ValueUtils.isCollection(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromNullCollection_eKZi3() {
        Object result = ValueUtils.remove(null, 1);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromInvalidType_aGmN7() {
        try {
            ValueUtils.remove(new Object(), 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromNullObject_Rnpf11() {
        Object result = ValueUtils.remove(null, 0);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIterateWithNullCollection_ezwv0() {
        Iterator iterator = ValueUtils.iterate(null);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIterateWithEmptyArray_RmXs4() {
        Integer[] array = {};
        Iterator iterator = ValueUtils.iterate(array);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testIterateWithEmptyCollection_kbwm5() {
        Collection collection = Collections.emptyList();
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithArrayClass_tfUk0() {
        Class arrayClass = int[].class;
        int result = ValueUtils.getCollectionHint(arrayClass);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithCollectionClass_RRsd1() {
        Class collectionClass = List.class;
        int result = ValueUtils.getCollectionHint(collectionClass);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithPrimitiveClass_NtPJ2() {
        Class primitiveClass = int.class;
        int result = ValueUtils.getCollectionHint(primitiveClass);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithInterfaceClass_MImK3() {
        Class interfaceClass = Runnable.class;
        int result = ValueUtils.getCollectionHint(interfaceClass);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithFinalClass_qxXs4() {
        Class finalClass = String.class;
        int result = ValueUtils.getCollectionHint(finalClass);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCollectionHintWithObjectClass_CjLG5() {
        Class objectClass = Object.class;
        int result = ValueUtils.getCollectionHint(objectClass);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueForArray_RkBm0() {
        Object collection = new Object[3];
        ValueUtils.setValue(collection, 1, "test");
        assertEquals("test", Array.get(collection, 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueForNullCollection_bgRV3() {
        Object collection = null;
        ValueUtils.setValue(collection, 1, "test");
        assertNull(collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthOfNull_BMFW0() {
        int actual = ValueUtils.getLength(null);
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthOfArray_UuZk1() {
        int[] array = new int[5];
        int actual = ValueUtils.getLength(array);
        int expected = 5;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthOfCollection_anaQ2() {
        List<String> list = new ArrayList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        int actual = ValueUtils.getLength(list);
        int expected = 3;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthOfOtherObject_vbyb3() {
        Object obj = new Object();
        int actual = ValueUtils.getLength(obj);
        int expected = 1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithNullCollection_DOwU0() {
        Object collection = null;
        int size = 5;
        Object result = ValueUtils.expandCollection(collection, size);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArraySizeSmallerThanSize_PnJX2() {
        Object collection = new Object[3];
        int size = 5;
        Object result = ValueUtils.expandCollection(collection, size);
        assertTrue(result.getClass().isArray());
        assertEquals(5, Array.getLength(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArraySizeEqualSize_xmIq4() {
        Object collection = new Object[3];
        int size = 3;
        Object result = ValueUtils.expandCollection(collection, size);
        assertTrue(result.getClass().isArray());
        assertEquals(3, Array.getLength(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArraySizeSmallerThanSize_PnJX2_1() {
        Object collection = new Object[3];
        int size = 5;
        Object result = ValueUtils.expandCollection(collection, size);
        assertTrue(result.getClass().isArray());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArraySizeSmallerThanSize_PnJX2_2() {
        Object collection = new Object[3];
        int size = 5;
        Object result = ValueUtils.expandCollection(collection, size);
        assertEquals(5, Array.getLength(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArraySizeEqualSize_xmIq4_1() {
        Object collection = new Object[3];
        int size = 3;
        Object result = ValueUtils.expandCollection(collection, size);
        assertTrue(result.getClass().isArray());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArraySizeEqualSize_xmIq4_2() {
        Object collection = new Object[3];
        int size = 3;
        Object result = ValueUtils.expandCollection(collection, size);
        assertEquals(3, Array.getLength(result));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArray_YxsC0_Shww0_1() {
        String[] array = {"a", "b", "c"};
        Object result = ValueUtils.remove(array, 1);
        String[] expected = {"a", "c"};
        assertEquals(2, ((String[]) result).length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArray_YxsC0_Shww0_2() {
        String[] array = {"a", "b", "c"};
        Object result = ValueUtils.remove(array, 1);
        String[] expected = {"a", "c"};
        assertTrue(result instanceof String[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFromArray_YxsC0_Shww0_3() {
        String[] array = {"a", "b", "c"};
        Object result = ValueUtils.remove(array, 1);
        String[] expected = {"a", "c"};
        assertArrayEquals(expected, (String[]) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Object_ReturnsNullForNonContainerObject_XkKn2_fid2() {
        Object object = new Object();
        Object expectedValue = null;
        Object actualValue = ValueUtils.getValue(object);
        assertNull(expectedValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueForCollection_TOJI2_fid2() {
        Collection collection = new HashSet<>();
        collection.add("test");
        assertEquals(1, collection.size());
    }
}