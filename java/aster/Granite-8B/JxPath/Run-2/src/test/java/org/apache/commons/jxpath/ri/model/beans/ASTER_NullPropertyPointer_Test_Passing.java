/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPropertyPointer_Test_Passing {
    private String propertyName = "*";
    @Mock
    private DOMNodePointer parent;
    @Mock
    private PropertyOwnerPointer propertyOwnerPointer;
    @Mock
    private PropertyPointer propertyPointer;
    private NullPropertyPointer nullpropertypointer;
    @Mock
    private Locale locale;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    @Mock
    private NodePointer nodePointer3;
    @Mock
    private NodePointer nodePointer4;
    @Mock
    private NodePointer nodePointer5;
    @Mock
    private NodePointer nodePointer6;
    @Mock
    private NodePointer nodePointer7;
    @Mock
    private NodePointer nodePointer8;
    @Mock
    private NodePointer nodePointer9;
    @Mock
    private NodePointer nodePointer10;
    @Mock
    private NodePointer nodePointer11;
    @Mock
    private NodePointer nodePointer12;
    @Mock
    private NodePointer nodePointer13;
    @Mock
    private NodePointer nodePointer14;
    @Mock
    private NodePointer nodePointer15;
    @Mock
    private NodePointer nodePointer16;
    @Mock
    private NodePointer nodePointer17;
    @Mock
    private NodePointer nodePointer18;
    @Mock
    private NodePointer nodePointer19;
    @Mock
    private NodePointer nodePointer20;
    @Mock
    private NodePointer nodePointer21;
    @Mock
    private NodePointer nodePointer22;
    @Mock
    private NodePointer nodePointer23;
    @Mock
    private NodePointer nodePointer24;
    @Mock
    private NodePointer nodePointer25;
    @Mock
    private NodePointer nodePointer26;
    @Mock
    private NodePointer nodePointer27;
    @Mock
    private NodePointer nodePointer28;
    @Mock
    private NodePointer nodePointer29;
    @Mock
    private NodePointer nodePointer30;
    @Mock
    private NodePointer nodePointer31;
    @Mock
    private NodePointer nodePointer32;
    @Mock
    private NodePointer nodePointer33;
    @Mock
    private NodePointer nodePointer34;
    @Mock
    private NodePointer nodePointer35;
    @Mock
    private NodePointer nodePointer36;
    @Mock
    private NodePointer nodePointer37;
    @Mock
    private NodePointer nodePointer38;
    @Mock
    private NodePointer nodePointer39;
    @Mock
    private NodePointer nodePointer40;
    @Mock
    private NodePointer nodePointer41;
    @Mock
    private NodePointer nodePointer42;
    @Mock
    private NodePointer nodePointer43;
    @Mock
    private NodePointer nodePointer44;
    @Mock
    private NodePointer nodePointer45;
    @Mock
    private NodePointer nodePointer46;
    @Mock
    private NodePointer nodePointer47;
    @Mock
    private NodePointer nodePointer48;
    @Mock
    private NodePointer nodePointer49;
    @Mock
    private NodePointer nodePointer50;
    @Mock
    private NodePointer nodePointer51;
    @Mock
    private NodePointer nodePointer52;
    @Mock
    private NodePointer nodePointer53;
    @Mock
    private NodePointer nodePointer54;
    @Mock
    private NodePointer nodePointer55;
    @Mock
    private NodePointer nodePointer56;
    @Mock
    private NodePointer nodePointer57;
    @Mock
    private NodePointer nodePointer58;
    @Mock
    private NodePointer nodePointer59;
    @Mock
    private NodePointer nodePointer60;
    @Mock
    private NodePointer nodePointer61;
    @Mock
    private NodePointer nodePointer62;
    @Mock
    private NodePointer nodePointer63;
    @Mock
    private NodePointer nodePointer64;
    @Mock
    private NodePointer nodePointer65;
    @Mock
    private NodePointer nodePointer66;
    @Mock
    private NodePointer nodePointer67;
    @Mock
    private NodePointer nodePointer68;
    @Mock
    private NodePointer nodePointer69;
    @Mock
    private NodePointer nodePointer70;
    @Mock
    private NodePointer nodePointer71;
    @Mock
    private NodePointer nodePointer72;
    @Mock
    private NodePointer nodePointer73;
    @Mock
    private NodePointer nodePointer74;
    @Mock
    private NodePointer nodePointer75;
    @Mock
    private NodePointer nodePointer76;
    @Mock
    private NodePointer nodePointer77;
    @Mock
    private NodePointer nodePointer78;
    @Mock
    private NodePointer nodePointer79;
    @Mock
    private JXPathContext context;
    @Mock
    private NodePointer newParent;
    @Mock
    private NodePointer pointer;
    private static final Locale LOCALE = Locale.getDefault();
    private static final String KEY = "key";
    private static final String VALUE = "value";
    private static final String XPATH = "xpath";
    private static final String LOCALE_STRING = "localeString";
    private static final String PREFIX = "prefix";
    private static final String NAMESPACE_URI = "namespaceURI";
    private static final String NAME = "name";
    private static final String QUALIFIED_NAME = "qualifiedName";
    private static final KeywordVariables KEYWORD_VARIABLES = mock(KeywordVariables.class);
    private static final Locale LOCALE_1 = mock(Locale.class);
    private KeywordVariables variables;
    private QName name;
    private DOMNodePointer domNodePointer;
    private VariablePointer variablePointer;
    private KeywordVariables keywordVariables;
    private NullPropertyPointer nullPropertyPointer;
    private boolean byNameAttribute = false;
    private QName qName;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() {
        nullPropertyPointer = new NullPropertyPointer(parent);
        when(parent.isContainer()).thenReturn(true);
        assertTrue(nullPropertyPointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() {
        nullpropertypointer = new NullPropertyPointer(parent);
        Mockito.when(parent.getBaseValue()).thenReturn(null);
        assertEquals(null, nullpropertypointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        nullpropertypointer = new NullPropertyPointer(parent);
        when(parent.isLeaf()).thenReturn(true);
        assertTrue(nullpropertypointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setByNameAttribute(boolean byNameAttribute) {
    }
}