/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.ArrayList;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Failing {
    private int[] jj_la1 = new int[39];
    private Compiler compiler;
    private int jj_gen;
    XPathParser xpathparser;
    @Mock
    SimpleCharStream simpleCharStream;
    private int jj_endpos;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    private int jj_kind = -1;
    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    static private int[] jj_la1_0;
    private Token jj_scanpos, jj_lastpos;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.InputStream stream) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final SimpleCharStream stream) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final SimpleCharStream stream, final int lexState) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.InputStream stream, final int lexState) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final XPathParserTokenManager tm) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public final void ReInit(final java.io.Reader stream) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.Reader dstream, final int startLine, final int startColumn, final int bufferSize) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.InputStream dstream, final int startLine, final int startColumn, final int bufferSize) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.InputStream dstream, final int startLine, final int startColumn) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrExpr() throws Exception {
        xpathparser = Mockito.mock(XPathParser.class);
        compiler = Mockito.mock(Compiler.class);
        Object ex = new Object();
        Object r = new Object();
        ArrayList list = new ArrayList();
        list.add(ex);
        list.add(r);
        Mockito.when(xpathparser.AndExpr()).thenReturn(ex, r);
        Mockito.when(compiler.or(Mockito.any())).thenReturn(ex);
        Object result = xpathparser.OrExpr();
        Mockito.verify(xpathparser, Mockito.times(2)).AndExpr();
        Mockito.verify(compiler).or(Mockito.any());
        assertEquals(ex, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgenerateParseException() throws Exception {
        xpathparser = Mockito.mock(XPathParser.class);
        Mockito.when(xpathparser.generateParseException()).thenCallRealMethod();
        ParseException exception = xpathparser.generateParseException();
        assertNotNull(exception);
        assertEquals("Token, line 1, column 0", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_aypp2() {
        ParseException exception = new ParseException(new Token(), new int[][]{}, new String[]{});
        assertNotNull(exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException1_hwGb1() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(null, 0);
        XPathParser xpathParser = new XPathParser(tokenManager);
        xpathParser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testAndExprWithNullStream_htqq2() {
        XPathParser xpathParser = new XPathParser((java.io.Reader) null);
        assertThrows(ParseException.class, xpathParser::AndExpr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgenerateParseException_1() throws Exception {
        xpathparser = Mockito.mock(XPathParser.class);
        Mockito.when(xpathparser.generateParseException()).thenCallRealMethod();
        ParseException exception = xpathparser.generateParseException();
        assertNotNull(exception);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgenerateParseException_2() throws Exception {
        xpathparser = Mockito.mock(XPathParser.class);
        Mockito.when(xpathparser.generateParseException()).thenCallRealMethod();
        ParseException exception = xpathparser.generateParseException();
        assertEquals("Token, line 1, column 0", exception.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException_IrjV0_fMCz0() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1), 1);
        XPathParser parser = new XPathParser(tokenManager);
        parser.generateParseException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInit1_FSUE0_HUXL0() {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(new SimpleCharStream(new java.io.StringReader(""), 1, 1), 1);
        XPathParser parser = new XPathParser(tokenManager);
        tokenManager.ReInit(new SimpleCharStream(new java.io.StringReader(""), 1, 1), 1);
        assertEquals(tokenManager.getNextToken().kind, 0);
    }
}