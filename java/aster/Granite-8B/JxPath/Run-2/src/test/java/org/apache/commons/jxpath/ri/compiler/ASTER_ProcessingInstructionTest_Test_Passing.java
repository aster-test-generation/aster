/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ProcessingInstructionTest_Test_Passing {
    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_sJUW0() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target");
        assertEquals("target", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_rESY1() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target2");
        assertEquals("target2", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_XgEd2() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target3");
        assertEquals("target3", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_pAuv3() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target4");
        assertEquals("target4", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_OMuU4() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target5");
        assertEquals("target5", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test6_JEzB5() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target6");
        assertEquals("target6", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test7_akjE6() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target7");
        assertEquals("target7", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test8_yqcm7() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target8");
        assertEquals("target8", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test9_QTLx8() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target9");
        assertEquals("target9", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test10_TKoh9() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target10");
        assertEquals("target10", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test11_qjJP10() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target11");
        assertEquals("target11", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test12_MEbr11() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target12");
        assertEquals("target12", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test13_uWrK12() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target13");
        assertEquals("target13", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test14_dIiQ13() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target14");
        assertEquals("target14", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test15_JhGz14() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target15");
        assertEquals("target15", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test16_acNT15() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target16");
        assertEquals("target16", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test17_oEEr16() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target17");
        assertEquals("target17", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test18_CYWF17() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target18");
        assertEquals("target18", processingInstructionTest.getTarget());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test19_HVzf18() {
        ProcessingInstructionTest processingInstructionTest = new ProcessingInstructionTest("target19");
        assertEquals("target19", processingInstructionTest.getTarget());
    }
}