/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;
import java.util.Arrays;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DynamicPropertyPointer_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPropertyNameNull_siQu0() {
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
    String propertyName = dynamicPropertyPointer.getPropertyName();
    assertEquals("*", propertyName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPropertyNameNotnull_Eosb1() {
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
    String[] names = {"name1", "name2"};
    String propertyName = dynamicPropertyPointer.getPropertyName();
    assertEquals("name1", propertyName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testPropertyNameIndexOutofRange_XxBD3() {
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
    String[] names = {"name1", "name2"};
    String propertyName = dynamicPropertyPointer.getPropertyName();
    assertEquals("*", propertyName);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testCreatePath1_gvnD0() {
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
    dynamicPropertyPointer.createPath(null, null);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetValueWithNullObject_bunw4() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        NullPointerException exception = assertThrows(NullPointerException.class, () -> dynamicPropertyPointer.setValue("value"));
        assertEquals("Object cannot be null", exception.getMessage());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_iOZC0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        Object value = dynamicPropertyPointer.getImmediateNode();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreatePath_RYlW0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        Object collection = dynamicPropertyPointer.getBaseValue();
        assertEquals(null, collection);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreatePath2_INgg1() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        Object collection = dynamicPropertyPointer.getBaseValue();
        if (collection == null) {
            throw new IllegalStateException("Collection should not be null");
        }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyIndex1_FQwu0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        int result = dynamicPropertyPointer.getPropertyIndex();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void test1_KCSk0() {
		DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
		dynamicPropertyPointer.getBaseValue();
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
	public void testGetPropertyCount_rfia0() {
		DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
		int propertyCount = dynamicPropertyPointer.getPropertyCount();
		assertEquals(0, propertyCount);
	}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_names_is_null_ambn0() {
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
    String[] result = dynamicPropertyPointer.getPropertyNames();
    Assertions.assertNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_allNames_is_not_null_twEh1() {
    KeywordVariables keywordVariables = new KeywordVariables("", null);
    PageContextHandler pageContextHandler = new PageContextHandler();
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, pageContextHandler);
    String[] result = dynamicPropertyPointer.getPropertyNames();
    Assertions.assertNotNull(result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_names_is_sorted_URcu3() {
    KeywordVariables keywordVariables = new KeywordVariables("", null);
    PageContextHandler pageContextHandler = new PageContextHandler();
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, pageContextHandler);
    String[] result = dynamicPropertyPointer.getPropertyNames();
    Arrays.sort(result);
    Assertions.assertTrue(Arrays.equals(result, result));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_inx_is_less_than_zero_clcr5() {
    KeywordVariables keywordVariables = new KeywordVariables("", null);
    PageContextHandler pageContextHandler = new PageContextHandler();
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, pageContextHandler);
    String[] result = dynamicPropertyPointer.getPropertyNames();
    Assertions.assertTrue(Arrays.binarySearch(result, "test") < 0);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_allNames_is_equal_to_names_auGP6() {
    KeywordVariables keywordVariables = new KeywordVariables("", null);
    PageContextHandler pageContextHandler = new PageContextHandler();
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, pageContextHandler);
    String[] result = dynamicPropertyPointer.getPropertyNames();
    Assertions.assertTrue(Arrays.equals(result, result));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetPropertyNames_names_is_not_equal_to_allNames_Rahh7() {
    KeywordVariables keywordVariables = new KeywordVariables("", null);
    PageContextHandler pageContextHandler = new PageContextHandler();
    DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, pageContextHandler);
    String[] result = dynamicPropertyPointer.getPropertyNames();
    Assertions.assertFalse(Arrays.equals(result, result));
}
}