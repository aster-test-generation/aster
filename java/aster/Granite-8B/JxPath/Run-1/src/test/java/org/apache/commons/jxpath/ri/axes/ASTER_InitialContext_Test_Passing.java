/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InitialContext_Test_Passing {
    @Mock
    private NodePointer nodePointer;
    private boolean collection;
    @InjectMocks
    private InitialContext initialcontext;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private SelfContext selfContext;
    private InitialContext initialContext;
    private boolean started = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        collection = false;
        // Arrange
        when(nodePointer.getLength()).thenReturn(5);
        // Act
        boolean result = initialcontext.setPosition(3);
        // Assert
        verify(nodePointer).setIndex(2);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithinRange_yZyn0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        boolean result = initialContext.setPosition(2);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionAboveRange_bTDs1() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        boolean result = initialContext.setPosition(5);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionBelowRange_JIOx2() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        boolean result = initialContext.setPosition(0);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionEqualRange_wVuQ3() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        boolean result = initialContext.setPosition(1);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithoutCollection_KXBF4() {
        InitialContext initialContext = new InitialContext(null);
        boolean result = initialContext.setPosition(1);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSingleNodePointer() {
        initialContext = new InitialContext(namespaceContext);
        Mockito.when(initialContext.getSingleNodePointer()).thenReturn(nodePointer);
        Pointer pointer = initialContext.getSingleNodePointer();
        Mockito.verify(initialContext).getSingleNodePointer();
        Assertions.assertEquals(nodePointer, pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_NAIF0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        Pointer pointer = initialContext.getSingleNodePointer();
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_USfd0() {
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTypeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        NodePointer result = initialContext.getCurrentNodePointer();
        assertEquals(NodePointer.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode() throws Exception {
        InitialContext initialContext = new InitialContext(namespaceContext);
        initialcontext = initialContext;
        // Arrange
        when(namespaceContext.getPosition()).thenReturn(0);
        boolean expectedResult = true;
        // Act
        boolean result = initialcontext.nextNode();
        // Assert
        assertEquals(expectedResult, result);
        verify(namespaceContext, times(1)).setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_OxCS0() {
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        boolean result = initialContext.nextNode();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Meae0() {
        SelfContext selfContext = new SelfContext(null, null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTypeTest);
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object result = initialContext.getValue();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet_1() throws Exception {
        initialcontext = new InitialContext(namespaceContext);
        // Act
        boolean result = initialcontext.nextSet();
        // Assert
        Mockito.verify(initialcontext, Mockito.times(1)).nextSet();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet_2() throws Exception {
        initialcontext = new InitialContext(namespaceContext);
        // Act
        boolean result = initialcontext.nextSet();
        // Assert
        Mockito.verify(initialcontext, Mockito.times(1)).nextSet();
        Assertions.assertTrue(started);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetTrue_vDrn0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        boolean result = initialContext.nextSet();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSetFalse_BXpg1() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, null), null));
        initialContext.nextSet();
        boolean result = initialContext.nextSet();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet() throws Exception {
        initialcontext = new InitialContext(namespaceContext);
        // Act
        boolean result = initialcontext.nextSet();
        // Assert
        Mockito.verify(initialcontext, Mockito.times(1)).nextSet();
        Assertions.assertTrue(result);
        Assertions.assertTrue(started);
    }
}