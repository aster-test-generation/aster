/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Constant_Test_Passing {
    private Object value;
    @Mock
    private EvalContext evalContext;
    @Mock
    private EvalContext mockEvalContext;
    @Mock
    private EvalContext evalContext2;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private SelfContext selfContext;
    @Mock
    private NamespaceContext namespaceContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentString_TnyY0() {
        Constant constant = new Constant("test");
        assertFalse(constant.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentNumber_ujVh1() {
        Constant constant = new Constant(1);
        assertFalse(constant.isContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNumber_udva0() {
        Constant constant = new Constant(10);
        assertEquals("10", constant.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNumber_LhRO2() {
        Constant constant = new Constant(10);
        assertEquals(InfoSetUtil.stringValue(10), constant.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithString_OebR3() {
        Constant constant = new Constant("Hello");
        assertEquals("'" + "Hello" + "'", constant.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentString_HTkD0() {
        Constant constant = new Constant("test");
        boolean result = constant.computeContextDependent();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentNumber_SXMv1() {
        Constant constant = new Constant(10);
        boolean result = constant.computeContextDependent();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute_rkpw0() throws Exception {
        String value = "testValue";
        Constant constant = new Constant(value);
        when(evalContext.getPosition()).thenReturn(1);
        when(evalContext.getValue()).thenReturn(value);
        Object result = constant.compute(evalContext);
        assertEquals(value, result);
    }
}