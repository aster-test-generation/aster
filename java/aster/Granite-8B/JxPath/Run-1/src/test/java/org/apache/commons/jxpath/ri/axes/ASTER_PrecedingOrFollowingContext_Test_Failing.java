/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PrecedingOrFollowingContext_Test_Failing {
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private SelfContext selfContext;
    private PrecedingOrFollowingContext precedingorfollowingcontext;
    private boolean reverse;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    @Mock
    private NodePointer currentRootLocation;
    @Mock
    private Stack stack;
    @Mock
    private NodePointer currentNodePointer;
    private boolean setStarted = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        precedingorfollowingcontext = new PrecedingOrFollowingContext(selfContext, nodeTypeTest, false);
        // Set the position to 5
        precedingorfollowingcontext.setPosition(5);
        // Verify that reset() was called
        Mockito.verify(selfContext, Mockito.times(1)).reset();
        // Set the position to 3
        precedingorfollowingcontext.setPosition(3);
        // Verify that nextNode() was called 2 times
        Mockito.verify(selfContext, Mockito.times(2)).nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_VUau0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext parentContext = new NamespaceContext(new SelfContext(null, nodeTest), nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(parentContext, nodeTest, false);
        NodePointer result = context.getCurrentNodePointer();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_InitialCall_OVAR0() {
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(new NamespaceContext(new SelfContext(null, null), null), new NodeTypeTest(0), false);
        boolean result = context.nextNode();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionEqualToCurrentPosition_mPSX1_BAeJ1() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, nodeTest), nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, false);
        context.setPosition(1);
        assert context.setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionGreaterThanCurrentPosition_ddCa2_gikl0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, false);
        context.setPosition(2);
        assert context.nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionBeyondLastNode_KtPI3_IMch0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(null, nodeTest);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, nodeTest);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(namespaceContext, nodeTest, false);
        context.setPosition(3);
        assert !context.nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextNode_GrVn0_1() throws Exception {
        precedingorfollowingcontext = new PrecedingOrFollowingContext(parentContext, nodeTest, false);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentRootLocation);
        when(currentRootLocation.getParent()).thenReturn(currentRootLocation);
        when(stack.isEmpty()).thenReturn(true);
        when(stack.pop()).thenReturn(null);
        when(stack.peek()).thenReturn(null);
        when(currentRootLocation.isRoot()).thenReturn(true);
        boolean result = precedingorfollowingcontext.nextNode();
        when(stack.isEmpty()).thenReturn(false);
        when(stack.pop()).thenReturn(null);
        when(stack.peek()).thenReturn(null);
        when(currentRootLocation.isRoot()).thenReturn(false);
        result = precedingorfollowingcontext.nextNode();
        when(stack.isEmpty()).thenReturn(false);
        when(stack.pop()).thenReturn(null);
        when(stack.peek()).thenReturn(null);
        when(currentRootLocation.isRoot()).thenReturn(false);
        result = precedingorfollowingcontext.nextNode();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_EmptyStack_Lpsc1_gRhI0() {
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(new NamespaceContext(new SelfContext(null, null), null), new NodeTypeTest(0), false);
        context.nextNode();
        boolean result = !context.nextNode();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NullStack_Byfx2_BFQJ0() {
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(new NamespaceContext(new SelfContext(null, null), null), new NodeTypeTest(0), false);
        context.nextNode(); // Set setStarted to true internally
        boolean result = context.nextNode();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_ClearStack_tGDE3_oiiD0() {
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(new NamespaceContext(new SelfContext(null, null), null), new NodeTypeTest(0), false);
        context.nextNode();
        boolean result = context.nextNode();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_SetPosition_EbvQ9_XqFh0() {
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(new NamespaceContext(new SelfContext(null, null), null), new NodeTypeTest(0), false);
        context.nextNode(); // Set setStarted to true internally
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder_1_fid2() throws Exception {
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, reverse);
        // Set the reverse flag to true
        reverse = true;
        // Act
        int documentOrder = precedingorfollowingcontext.getDocumentOrder();
        // Assert
        // Set the reverse flag to false
        reverse = false;
        // Act
        documentOrder = precedingorfollowingcontext.getDocumentOrder();
        // Assert
        assertEquals(-1, documentOrder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_fid2() {
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, false);
        // Set the started flag to true
        setStarted = true;
        // Call the reset method
        precedingorfollowingcontext.reset();
        // Assert that the started flag is reset to false
        Assertions.assertFalse(setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, reverse);
        // Set the reverse flag to true
        reverse = true;
        // Act
        int documentOrder = precedingorfollowingcontext.getDocumentOrder();
        // Assert
        assertEquals(-1, documentOrder);
        // Set the reverse flag to false
        reverse = false;
        // Act
        documentOrder = precedingorfollowingcontext.getDocumentOrder();
        // Assert
        assertEquals(1, documentOrder);
    }
}