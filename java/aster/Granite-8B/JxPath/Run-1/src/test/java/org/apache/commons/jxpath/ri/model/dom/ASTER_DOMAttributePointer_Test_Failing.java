/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.util.TypeUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributePointer_Test_Failing {
    @Mock
    private Locale locale;
    @Mock
    private QName qname;
    private Attr attr;
    private DOMAttributePointer domAttributePointer;
    private DOMAttributePointer anotherDomAttributePointer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private TypeUtils typeUtils;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private QName qName;
    @Mock
    private DOMNodePointer dOMNodePointer;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private QName name;
    private DOMAttributePointer domattributepointer;
    @Mock
    private Attr mockAttr;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() {
        domAttributePointer = new DOMAttributePointer(null, attr);
        String value = "testValue";
        domAttributePointer.setValue(value);
        verify(typeUtils).convert(value, String.class);
        assertEquals(value, attr.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(attr.getValue()).thenReturn("some value");
        when(attr.getSpecified()).thenReturn(true);
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        Object value = domAttributePointer.getValue();
        assertEquals("some value", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() {
        domAttributePointer = new DOMAttributePointer(domNodePointer, attr);
        // Arrange
        String expectedPrefix = "expectedPrefix";
        String expectedLocalName = "expectedLocalName";
        when(domNodePointer.getPrefix(attr)).thenReturn(expectedPrefix);
        when(domNodePointer.getLocalName(attr)).thenReturn(expectedLocalName);
        // Act
        QName actual = domAttributePointer.getName();
        // Assert
        assertEquals(new QName(expectedPrefix, expectedLocalName), actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        when(parent.asPath()).thenReturn("path");
        domattributepointer = new DOMAttributePointer(parent, mock(Attr.class));
        String expectedPath = "path/@name";
        String actualPath = domattributepointer.asPath();
        assertEquals(expectedPath, actualPath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullParent_HyNP0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        String result = domAttributePointer.asPath();
        Assertions.assertEquals("@", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathEmptyParent_cIzU1() {
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "id");
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, null);
        String result = domAttributePointer.asPath();
        Assertions.assertEquals("@", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNonEmptyParent_BCEH2() {
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "id");
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, null);
        String result = domAttributePointer.asPath();
        Assertions.assertEquals("/@", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue() {
        MockitoAnnotations.initMocks(this);
        attr = mockAttr;
        domAttributePointer = new DOMAttributePointer(parent, attr);
        // Act
        Object baseValue = domAttributePointer.getBaseValue();
        // Assert
        Mockito.verify(attr).getValue();
        assertEquals(attr, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_flPD0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        when(attr.getName()).thenReturn("Expected Immediate Node");
        Object immediateNode = domAttributePointer.getImmediateNode();
        assertEquals("Expected Immediate Node", immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_tYAC0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, attr);
        String value = "testValue";
        domAttributePointer.setValue(value);
        Mockito.verify(typeUtils).convert(value, String.class);
        assertEquals(value, attr.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNonEmptyParentWithSlash_MOcd3_fid1() {
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "id");
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, null);
        String result = domAttributePointer.asPath();
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_flPD0_fid1() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        when(attr.getName()).thenReturn(null);
        Object immediateNode = domAttributePointer.getImmediateNode();
        assertNull(immediateNode);
    }
}