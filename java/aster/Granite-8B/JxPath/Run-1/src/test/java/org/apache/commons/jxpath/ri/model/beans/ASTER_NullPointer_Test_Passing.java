/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Iterator;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.*;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Passing {
    @Mock
    private QName name;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private AbstractFactory abstractFactory;
    @Mock
    private Variables variables;
    @Mock
    private Pointer pointer;
    NullPointer nullpointer;
    @Mock
    private Locale locale;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private JXPathContext context;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private Iterator iterator;
    @Mock
    private KeyManager keyManager;
    @Mock
    private IdentityManager identityManager;
    @Mock
    private ExceptionHandler exceptionHandler;
    @Mock
    private Functions functions;
    @Mock
    private NamespaceResolver namespaceResolver;
    @Mock
    private JXPathContextReferenceImpl jXPathContextReferenceImpl;
    @Mock
    private QName qName;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private NullPointer nullPointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull() {
        name = Mockito.mock(QName.class);
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        NullPointer other = null;
        assertEquals(false, nullPointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_IWHq0() {
        NullPointer pointer = new NullPointer(new Locale("en", "US"), "id");
        boolean result = pointer.equals(pointer);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_Hbhs2() {
        NullPointer pointer = new NullPointer(new Locale("en", "US"), "id");
        boolean result = pointer.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameName_anHN4() {
        NullPointer pointer1 = new NullPointer(new Locale("en", "US"), "id");
        NullPointer pointer2 = new NullPointer(new Locale("en", "US"), "id");
        boolean result = pointer1.equals(pointer2);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_hszT1() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NullPointer nullPointer = new NullPointer(variablePointer, qName);
        boolean result = nullPointer.isCollection();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeNullName_FYiH0() {
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        int result = nullPointer.hashCode();
        Assertions.assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeNotNullName_JlTg1() {
        QName name = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(name, new Locale("en", "US"));
        int result = nullPointer.hashCode();
        Assertions.assertEquals(name.hashCode(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_lzAl0() {
        QName name = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        QName result = nullPointer.getName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_zioL0() {
        Locale locale = new Locale("en", "US");
        String id = "testId";
        NullPointer nullPointer = new NullPointer(locale, id);
        PropertyPointer propertyPointer = nullPointer.getPropertyPointer();
        assert propertyPointer instanceof NullPropertyPointer;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer3_EbTM2() {
        Locale locale = new Locale("en", "US");
        QName name = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(name, locale);
        PropertyPointer propertyPointer = nullPointer.getPropertyPointer();
        assert propertyPointer instanceof NullPropertyPointer;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer4_efNj3() {
        Locale locale = new Locale("en", "US");
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        NullPointer nullPointer = new NullPointer(parent, name);
        PropertyPointer propertyPointer = nullPointer.getPropertyPointer();
        assert propertyPointer instanceof NullPropertyPointer;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithId_DONs0() {
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        String result = nullPointer.asPath();
        assertEquals("id(id)", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_tffy0() {
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        boolean result = nullPointer.isActual();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual2_QMPy1() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        NullPointer nullPointer = new NullPointer(variablePointer, new QName("name"));
        boolean result = nullPointer.isActual();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual3_muBv2() {
        NullPointer nullPointer = new NullPointer(new QName("name"), new Locale("en", "US"));
        boolean result = nullPointer.isActual();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() {
        nullpointer = Mockito.mock(NullPointer.class);
        // Arrange
        Mockito.when(nullpointer.isLeaf()).thenReturn(true);
        // Act
        boolean result = nullpointer.isLeaf();
        // Assert
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_FxwS0() {
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        boolean result = nullPointer.isLeaf();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection_mnbB0() throws Exception {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        NullPointer nullpointer = new NullPointer(variablePointer, new QName("name"));
        Locale locale = Locale.US;
        QName name = new QName("name");
        boolean result = nullpointer.isLeaf();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_DVWr0_1() throws Exception {
        QName name = new QName("prefix", "localName");
        Locale locale = Locale.US;
        NullPointer nullpointer = new NullPointer(name, locale);
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        Assertions.assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_DVWr0_2() throws Exception {
        QName name = new QName("prefix", "localName");
        Locale locale = Locale.US;
        NullPointer nullpointer = new NullPointer(name, locale);
        PropertyPointer propertyPointer = nullpointer.getPropertyPointer();
        Assertions.assertTrue(propertyPointer instanceof NullPropertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithoutParent_SbST2_aSOa0() {
        QName qName = new QName("name");
        NullPointer nullPointer = new NullPointer(qName, Locale.US);
        String result = nullPointer.asPath();
        assertEquals("null()", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength_EHka0() throws Exception {
        QName name = new QName("prefix", "localName");
        Locale locale = Locale.US;
        VariablePointer variablePointer = new VariablePointer(name);
        NullPointer nullpointer = new NullPointer(variablePointer, name);
        int expectedLength = 0;
        int actualLength = nullpointer.getLength();
        assertEquals(expectedLength, actualLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual_bHJz0() throws Exception {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        NullPointer nullpointer = new NullPointer(Locale.US, "name");
        boolean result = nullpointer.isActual();
        Assertions.assertFalse(result);
    }
}