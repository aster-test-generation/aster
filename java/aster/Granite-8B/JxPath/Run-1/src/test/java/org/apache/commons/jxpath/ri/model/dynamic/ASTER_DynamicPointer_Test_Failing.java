/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Failing {
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private Locale locale;
    private Object bean;
    private QName name;
    private DynamicPointer dynamicpointer;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private DynamicAttributeIterator dynamicAttributeIterator;
    private DynamicPointer dynamicPointer;
    @Mock
    private QName qName;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private DynamicPropertyHandler handler;
    @Mock
    private DynamicPointer parent;
    @Mock
    private Object node;
    @Mock
    private JXPathIntrospector jXPathIntrospector;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameBeanAndName_CPMD5() {
        DynamicPointer dp = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        DynamicPointer dp2 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        boolean result = !dp.equals(dp2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        dynamicpointer = new DynamicPointer(name, bean, new PageContextHandler(), Locale.US);
        // Arrange
        when(name.hashCode()).thenReturn(10);
        when(bean).thenReturn("bean");
        // Act
        int result = dynamicpointer.hashCode();
        // Assert
        assertEquals(11, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() {
        name = new QName("testName");
        dynamicPointer = new DynamicPointer(name, null, pageContextHandler, locale);
        // Arrange
        when(dynamicPointer.attributeIterator(name)).thenReturn(dynamicAttributeIterator);
        // Act
        NodeIterator actual = dynamicPointer.attributeIterator(name);
        // Assert
        assertEquals(dynamicAttributeIterator, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodeIterator() throws Exception {
        MockitoAnnotations.initMocks(this);
        dynamicpointer = new DynamicPointer(qName, "bean", pageContextHandler, locale);
        // Arrange
        String property = "property";
        boolean reverse = true;
        NodePointer startWith = nodePointer;
        // Act
        NodeIterator nodeIterator = dynamicpointer.createNodeIterator(property, reverse, startWith);
        // Assert
        Mockito.verify(dynamicpointer).createNodeIterator(property, reverse, startWith);
        Mockito.verifyNoMoreInteractions(dynamicpointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() {
        MockitoAnnotations.initMocks(this);
        dynamicpointer = new DynamicPointer(name, null, null, null);
        // Arrange
        QName expectedName = new QName("expectedName");
        // Act
        QName actualName = dynamicpointer.getName();
        // Assert
        Mockito.verify(name).getName();
        assertEquals(expectedName, actualName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() {
        dynamicpointer = new DynamicPointer(parent, new QName("name"), new Object(), new PageContextHandler());
        // Arrange
        when(parent.asPath()).thenReturn("/parent/name");
        // Act
        String result = dynamicpointer.asPath();
        // Assert
        assertEquals("/parent/name", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNotNullParent_wGmI1_Kzyh0() {
        DOMNodePointer parent = new DOMNodePointer(null, new Locale("locale"), "id");
        DynamicPointer dynamicPointer = new DynamicPointer(parent, new QName("name"), new Object(), new PageContextHandler());
        String result = dynamicPointer.asPath();
        assertEquals(parent.asPath(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        bean = new Object();
        name = new QName("testName");
        dynamicpointer = new DynamicPointer(name, bean, pageContextHandler, Locale.US);
        // Test with same object
        assertEquals(dynamicpointer, dynamicpointer);
        // Test with different bean
        DynamicPointer other = new DynamicPointer(name, new Object(), pageContextHandler, Locale.US);
        assertNotEquals(dynamicpointer, other);
        // Test with different name
        other = new DynamicPointer(new QName("otherName"), bean, pageContextHandler, Locale.US);
        assertNotEquals(dynamicpointer, other);
        // Test with null bean
        other = new DynamicPointer(name, null, pageContextHandler, Locale.US);
        assertNotEquals(dynamicpointer, other);
        // Test with null name
        other = new DynamicPointer(null, bean, pageContextHandler, Locale.US);
        assertNotEquals(dynamicpointer, other);
        // Test with different locale
        other = new DynamicPointer(name, bean, pageContextHandler, Locale.FRANCE);
        assertNotEquals(dynamicpointer, other);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameBeanAndName_CPMD5_fid1() {
        DynamicPointer dp = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        DynamicPointer dp2 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        boolean result = dp.equals(dp2);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_fid1() {
        dynamicpointer = new DynamicPointer(parent, new QName("name"), new Object(), new PageContextHandler());
        // Arrange
        when(parent.asPath()).thenReturn("/parent");
        // Act
        String result = dynamicpointer.asPath();
        // Assert
        assertEquals("/parent", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        bean = new Object();
        name = new QName("testName");
        dynamicpointer = new DynamicPointer(name, bean, pageContextHandler, Locale.US);
        // Test with same object
        // Test with different bean
        DynamicPointer other = new DynamicPointer(name, new Object(), pageContextHandler, Locale.US);
        // Test with different name
        other = new DynamicPointer(new QName("otherName"), bean, pageContextHandler, Locale.US);
        // Test with null bean
        other = new DynamicPointer(name, null, pageContextHandler, Locale.US);
        // Test with null name
        other = new DynamicPointer(null, bean, pageContextHandler, Locale.US);
        // Test with different locale
        other = new DynamicPointer(name, bean, pageContextHandler, Locale.FRANCE);
        assertNotEquals(dynamicpointer, other);
    }
}