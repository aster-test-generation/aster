/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PrecedingOrFollowingContext_Test_Passing {
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private SelfContext selfContext;
    private PrecedingOrFollowingContext precedingorfollowingcontext;
    private boolean reverse;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    @Mock
    private NodePointer currentRootLocation;
    @Mock
    private Stack stack;
    @Mock
    private NodePointer currentNodePointer;
    private boolean setStarted = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder_1() throws Exception {
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, reverse);
        // Set the reverse flag to true
        reverse = true;
        // Act
        int documentOrder = precedingorfollowingcontext.getDocumentOrder();
        // Assert
        // Set the reverse flag to false
        reverse = false;
        // Act
        documentOrder = precedingorfollowingcontext.getDocumentOrder();
        // Assert
        assertEquals(1, documentOrder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() {
        precedingorfollowingcontext = new PrecedingOrFollowingContext(namespaceContext, nodeTypeTest, false);
        // Set the started flag to true
        setStarted = true;
        // Call the reset method
        precedingorfollowingcontext.reset();
        // Assert that the started flag is reset to false
        Assertions.assertTrue(setStarted);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrderFalse_ESjS1_zZAs1() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(new SelfContext(null, nodeTest), nodeTest, false);
        assertEquals(1, context.getDocumentOrder());
    }
}