/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ChildContext_Test_Passing {
    @Mock
    private NodeIterator iterator;
    @Mock
    private ChildContext childContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    @InjectMocks
    private ChildContext childcontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_StartFromParentLocationTrue_JfcF0() {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(null, null), null), new NodeTypeTest(0), true, false);
        childContext.setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_StartFromParentLocationFalse_ChDG1() {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(null, null), null), new NodeTypeTest(0), false, false);
        childContext.setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() {
        childContext = new ChildContext(null, null, false, false);
        // Act
        childContext.reset();
        // Assert
        Mockito.verify(childContext).reset();
        Mockito.verifyNoMoreInteractions(childContext);
        Assertions.assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_Position0AndSetPositionFailed_ReturnsNull_QrKP0() {
        SelfContext selfContext = new SelfContext(null, null);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, false, false);
        NodePointer result = childContext.getCurrentNodePointer();
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionNot0_ReturnsNodePointer_gLjk1() {
        SelfContext selfContext = new SelfContext(null, null);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, false, false);
        NodePointer result = childContext.getCurrentNodePointer();
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_Position0AndSetPositionSucceeded_ReturnsNodePointer_JFwp2() {
        SelfContext selfContext = new SelfContext(null, null);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        ChildContext childContext = new ChildContext(namespaceContext, nodeTypeTest, false, false);
        childContext.setPosition(1);
        NodePointer result = childContext.getCurrentNodePointer();
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_Position0_ReturnsSingleNodePointer_MYAO0() {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(null, null), null), null, true, false);
        Pointer result = childContext.getSingleNodePointer();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_Position0_ReturnsNull_VJOV1() {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(null, null), null), null, true, false);
        childContext.setPosition(0);
        Pointer result = childContext.getSingleNodePointer();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_PositionGreaterThan0_ReturnsCurrentNodePointer_ElNw2() {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(null, null), null), null, true, false);
        childContext.setPosition(1);
        Pointer result = childContext.getSingleNodePointer();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_PositionGreaterThan0_ReturnsNull_GWnn3() {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(null, null), null), null, true, false);
        childContext.setPosition(1);
        Pointer result = childContext.getSingleNodePointer();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_Position0_ReturnsNull_mdUb4() {
        ChildContext childContext = new ChildContext(new NamespaceContext(new SelfContext(null, null), null), null, true, false);
        Pointer result = childContext.getSingleNodePointer();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Given
        boolean startPosition = true;
        boolean reverse = false;
        boolean startFromParentLocation = true;
        int nodeType = 1;
        NodeTypeTest nodeTypeTest = Mockito.mock(NodeTypeTest.class);
        NamespaceContext namespaceContext = Mockito.mock(NamespaceContext.class);
        SelfContext selfContext = Mockito.mock(SelfContext.class);
        ChildContext childContext = new ChildContext(selfContext, nodeTypeTest, startFromParentLocation, reverse);
        // When
        boolean result = childContext.nextNode();
        // Then
        Mockito.verify(childContext, Mockito.times(1)).setPosition(Mockito.anyInt());
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_PfGN0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new ChildContext(null, null, false, false), null), null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        ChildContext childContext = new ChildContext(new NamespaceContext(selfContext, nodeTypeTest), nodeTypeTest, false, false);
        boolean result = childContext.nextNode();
        assert result;
    }
}