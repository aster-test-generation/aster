/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributeIterator_Test_Failing {
    private int position = 0;
    @Mock
    private Node node;
    @Mock
    private Attr attr;
    @Mock
    private NamedNodeMap namednodemap;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private DOMAttributeIterator domattributeiterator;
    private NodePointer parent;
    @Mock
    private List list;
    @Mock
    private QName qname;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_dIwV0() throws Exception {
        java.util.ArrayList<Attr> attributes = new java.util.ArrayList<>();
        Attr attr = mock(Attr.class);
        attributes.add(attr);
        NodePointer parent = mock(NodePointer.class);
        when(node.getAttributes()).thenReturn(namednodemap);
        when(namednodemap.getLength()).thenReturn(1);
        when(namednodemap.item(0)).thenReturn(attr);
        when(list.get(0)).thenReturn(attr);
        when(node.getNodeType()).thenReturn(Node.ATTRIBUTE_NODE);
        DOMAttributeIterator domattributeiterator = new DOMAttributeIterator(parent, qname);
        NodePointer result = domattributeiterator.getNodePointer();
        assertEquals(attr, result.getNode());
        verify(node).getAttributes();
        verify(namednodemap).item(0);
        verify(list).get(0);
    }
}