/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_SelfContext_Test_Failing {
    @Mock
    private NodeTest nodeTest;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private SelfContext selfcontext;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private Pointer pointer;
    @Mock
    private SelfContext selfContext;
    private boolean startedSet = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() {
        selfcontext = new SelfContext(parentContext, nodeTypeTest);
        // Arrange
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(nodeTest)).thenReturn(true);
        // Act
        boolean result = selfcontext.setPosition(1);
        // Assert
        assertEquals(true, result);
        verify(parentContext).getCurrentNodePointer();
        verify(nodePointer).testNode(nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition1_Ttzc0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(1)), new NodeTypeTest(1));
        boolean result = selfContext.setPosition(1);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition1NullNodeTest_ZFhR2() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(1)), null);
        boolean result = selfContext.setPosition(1);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_1() throws Exception {
        selfcontext = new SelfContext(null, null);
        // Verify that startedSet is initially false
        // Call reset method
        selfcontext.reset();
        // Verify that startedSet is set to false after reset
        // Verify that super.reset() is called
        verify(selfcontext, times(1)).reset();
        assertFalse(startedSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSingleNodePointer_hOyA0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)), new NodeTypeTest(0));
        Pointer result = selfContext.getSingleNodePointer();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_PositionNot0_SetPositionTrue_ReturnsNodePointer_zmcD1() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)), new NodeTypeTest(0));
        selfContext.setPosition(1);
        NodePointer result = selfContext.getCurrentNodePointer();
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() throws Exception {
        selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        // Given
        boolean expectedResult = true;
        when(selfContext.getCurrentPosition()).thenReturn(0);
        // When
        boolean result = selfContext.nextNode();
        // Then
        assertEquals(expectedResult, result);
        verify(selfContext).setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_pfGa0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), null), null);
        boolean result = selfContext.nextNode();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPosition1StartedSet_tbxu5_ViMy0() {
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(1)), new NodeTypeTest(1));
        selfContext.nextNode(); // Fix: Call the method under test
        boolean result = selfContext.setPosition(1);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_fid1() {
        selfcontext = new SelfContext(parentContext, nodeTypeTest);
        // Arrange
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(nodeTest)).thenReturn(false);
        // Act
        boolean result = selfcontext.setPosition(1);
        // Assert
        assertEquals(false, result);
        verify(parentContext).getCurrentNodePointer();
        verify(nodePointer).testNode(nodeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset() throws Exception {
        selfcontext = new SelfContext(null, null);
        // Verify that startedSet is initially false
        assertFalse(startedSet);
        // Call reset method
        selfcontext.reset();
        // Verify that startedSet is set to false after reset
        assertFalse(startedSet);
        // Verify that super.reset() is called
        verify(selfcontext, times(1)).reset();
    }
}