/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CollectionPointer_Test_Passing {
    private NodePointer valuePointer;
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    private CollectionPointer collectionPointer;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private ValueUtils valueUtils;
    private Object collection;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private QName name;
    @Mock
    private CollectionAttributeNodeIterator iterator;
    @Mock
    private QName qName;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private DOMNodePointer domNodePointer;
    private CollectionPointer collectionPointerObject;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private JXPathIntrospector jXPathIntrospector;
    @Mock
    private Locale locale;
    @Mock
    private CollectionPointer collectionpointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() {
        collectionPointer = new CollectionPointer(new Object(), Locale.US);
        when(nodePointer1.getIndex()).thenReturn(1);
        when(nodePointer2.getIndex()).thenReturn(2);
        int result = collectionPointer.compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_SMVX0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), null);
        assertTrue(collectionPointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNodeWholeCollection_uxCo0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        Object immediateNode = collectionPointer.getImmediateNode();
        assertNotNull(immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_NBWG1() {
        CollectionPointer pointer = new CollectionPointer(new Integer(1), Locale.US);
        boolean result = pointer.isLeaf();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNonAtomicValue_FptP2() {
        CollectionPointer pointer = new CollectionPointer(new ArrayList(), Locale.US);
        boolean result = pointer.isLeaf();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_tcJL0() {
        CollectionPointer pointer = new CollectionPointer(new Object(), Locale.US);
        boolean result = pointer.equals(pointer);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_GQEV1() {
        CollectionPointer pointer1 = new CollectionPointer(new Object(), Locale.US);
        CollectionPointer pointer2 = new CollectionPointer(new Object(), Locale.US);
        boolean result = pointer1.equals(pointer2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_MBlF2() {
        CollectionPointer pointer = new CollectionPointer(new Object(), Locale.US);
        boolean result = pointer.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_wJlU3() {
        CollectionPointer pointer = new CollectionPointer(new Object(), Locale.US);
        boolean result = pointer.equals("String");
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointerWholeCollection_nIuF0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        NodePointer result = collectionPointer.getValuePointer();
        assertEquals(collectionPointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerTrue_REah0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        collectionPointer.setIndex(1);
        boolean result = collectionPointer.isContainer();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerFalse_Wsxs1() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        collectionPointer.setIndex(CollectionPointer.WHOLE_COLLECTION);
        boolean result = collectionPointer.isContainer();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointerNull_XfRd0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        NodePointer nodePointer = collectionPointer.namespacePointer("namespace");
        Assertions.assertNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWholeCollection_OhLX0() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        String result = collectionPointer.asPath();
        assertEquals("/", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_oHRB0() {
        Locale locale = new Locale("en", "US");
        Object collection = new Object();
        CollectionPointer pointer = new CollectionPointer(collection, locale);
        Object result = pointer.getBaseValue();
        assertEquals(collection, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullTest_pXek0_IjEj0() {
        CollectionPointer pointer = new CollectionPointer(new Object(), Locale.US);
        boolean result = pointer.testNode(null);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullTestWithWholeCollection_IqRj5_tlNq0() {
        CollectionPointer pointer = new CollectionPointer(new Object(), Locale.US);
        pointer.setIndex(CollectionPointer.WHOLE_COLLECTION);
        boolean result = pointer.testNode(null);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullTestWithWholeCollection_IqRj5_mmqg1() {
        CollectionPointer pointer = new CollectionPointer(new Object(), Locale.US);
        int wholeCollection = CollectionPointer.WHOLE_COLLECTION;
        pointer.setIndex(wholeCollection);
        boolean result = pointer.testNode(null);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObjectDifferentState_gaHO4_vzkD0() {
        CollectionPointer pointer1 = new CollectionPointer(new Object(), Locale.US);
        CollectionPointer pointer2 = new CollectionPointer(new Object(), Locale.US);
        pointer2 = new CollectionPointer(new Object(), Locale.US);
        boolean result = pointer1.equals(pointer2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_VIDp0() throws Exception {
        MockitoAnnotations.initMocks(this);
        collectionpointer = new CollectionPointer(nodePointer, collection);
        Variables variables = mock(Variables.class);
        when(jXPathContext.getVariables()).thenReturn(variables);
        when(nodePointer.getBaseValue()).thenReturn(collection);
        when(nodePointer.getIndex()).thenReturn(1);
        NodePointer result = collectionpointer.createPath(jXPathContext);
        assertEquals(collectionpointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer_GeNB0() {
        CollectionPointer collectionpointer = Mockito.mock(CollectionPointer.class);
        Mockito.when(collectionpointer.getBaseValue()).thenReturn(null);
        boolean result = collectionpointer.isContainer();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIteratorWholeCollection_ugvo0_fid2() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        NodeIterator result = collectionPointer.attributeIterator(new QName("attributeName"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIteratorTrue_Ckik0_fid2() {
        CollectionPointer collectionPointer = new CollectionPointer(new Object(), Locale.US);
        NodeIterator result = collectionPointer.namespaceIterator();
        Assertions.assertNull(result);
    }
}