/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Passing {
    @Mock
    private JXPathContextReferenceImpl jxpathContext;
    @Mock
    private JXPathContext jxpathContext1;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private QName qName;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private DOMNodePointer dOMNodePointer;
    @Mock
    private JXPathContext jxpathContextObject;
    @Mock
    private DOMNodePointer pointer;
    private RootContext rootcontext;
    @Mock
    private EvalContext evalContext;
    @Mock
    private Locale locale;
    @Mock
    private QName name;
    @Mock
    private JXPathContextReferenceImpl parentContext;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private QName variableName;
    @Mock
    private RootContext rootContext;
    @Mock
    private Function function;
    private static int MAX_REGISTER = 4;
    private int availableRegister = 0;
    private Object[] registers;
    @Mock
    private JXPathContext jxpathContextReference;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private JXPathContextReferenceImpl jxpathContextReferenceImpl;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAbsoluteRootContext() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(jxpathContext.getAbsoluteRootContext()).thenReturn(evalContext);
        RootContext rootContext = new RootContext(jxpathContext, null);
        EvalContext actual = rootContext.getAbsoluteRootContext();
        assertEquals(evalContext, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction() throws Exception {
        rootContext = new RootContext(jxpathContext, null);
        QName functionName = new QName("functionName");
        Object[] parameters = new Object[]{};
        when(jxpathContext.getFunction(functionName, parameters)).thenReturn(function);
        Function result = rootContext.getFunction(functionName, parameters);
        assertEquals(function, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRootContext() throws Exception {
        RootContext rootcontext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        RootContext rootContext = new RootContext(jxpathContextReferenceImpl, domNodePointer);
        RootContext expected = rootContext;
        assertEquals(expected, rootContext.getRootContext());
    }
}