/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Passing {
    @Mock
    private NamespaceResolver parent;
    private boolean sealed;
    NamespaceResolver namespaceResolver;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private Map<String, String> namespaceMap;
    @Mock
    private Map<String, String> reverseMap;
    @Spy
    private NamespaceResolver namespaceresolver;
    @Mock
    private NamespaceResolver pointer;
    @Mock
    private Object mockSuper;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWhenParentIsNull_ysSe0() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.seal();
        assertEquals(true, resolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWhenParentIsNotNull_maeS1() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertEquals(true, resolver.isSealed());
        assertEquals(true, parent.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefix_NullPrefix() throws Exception {
        namespaceResolver = new NamespaceResolver(parent);
        // Arrange
        String namespaceURI = "testNamespace";
        Map<String, String> reverseMap = new HashMap<>();
        when(parent.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(null);
        // Act
        String result = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
        // Assert
        assertEquals(parent.getExternallyRegisteredPrefix(namespaceURI), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefix_ParentFound() throws Exception {
        namespaceResolver = new NamespaceResolver(parent);
        // Arrange
        String namespaceURI = "testNamespace";
        String prefix = "testPrefix";
        Map<String, String> reverseMap = new HashMap<>();
        when(parent.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(prefix);
        // Act
        String result = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
        // Assert
        assertEquals(prefix, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixNull_HcLm0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        String result = namespaceResolver.getExternallyRegisteredPrefix(null);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixNotRegistered_xxhl1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        String result = namespaceResolver.getExternallyRegisteredPrefix("http://example.com");
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefixRegistered_kWOV2() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver());
        namespaceResolver.reverseMap.put("http://example.com", "prefix");
        String result = namespaceResolver.getExternallyRegisteredPrefix("http://example.com");
        Assertions.assertEquals("prefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_PrefixExists_LJNj0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        namespaceResolver.namespaceMap.put("prefix", "uri");
        assertEquals("uri", namespaceResolver.getExternallyRegisteredNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_PrefixDoesNotExist_yIgz1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        assertNull(namespaceResolver.getExternallyRegisteredNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredNamespaceURI_PrefixDoesNotExistAndParentExists_dFld2() {
        NamespaceResolver parent = new NamespaceResolver(null);
        parent.namespaceMap.put("prefix", "uri");
        NamespaceResolver namespaceResolver = new NamespaceResolver(parent);
        assertEquals("uri", namespaceResolver.getExternallyRegisteredNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixExternallyRegisteredPrefixNull_QMPZ1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String namespaceURI = "testNamespaceURI";
        String prefix = namespaceResolver.getPrefix(namespaceURI);
        Assertions.assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIExternallyRegisteredNamespaceURINull_HTHz1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String uri = namespaceResolver.getNamespaceURI("prefix");
        Assertions.assertNull(uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_NullPointer_ogUv0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
        Pointer pointer = namespaceResolver.getNamespaceContextPointer();
        assertNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceContextPointer_NullParent_yVBk2() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        Pointer pointer = namespaceResolver.getNamespaceContextPointer();
        assertNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealed_iAvz0() {
        NamespaceResolver resolver = new NamespaceResolver(new NamespaceResolver(null));
        boolean result = resolver.isSealed();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testseal_fid1() throws Exception {
        sealed = false;
        namespaceresolver = new NamespaceResolver(parent);
        namespaceresolver.seal();
        Assertions.assertFalse(sealed);
        Mockito.verify(parent).seal();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWhenParentIsNotNull_maeS1_1() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertEquals(true, resolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSealWhenParentIsNotNull_maeS1_2() {
        NamespaceResolver parent = new NamespaceResolver();
        NamespaceResolver resolver = new NamespaceResolver(parent);
        resolver.seal();
        assertEquals(true, parent.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_fid1() {
        namespaceresolver = new NamespaceResolver(parent);
        // Mock the getExternallyRegisteredNamespaceURI method
        when(namespaceresolver.getExternallyRegisteredNamespaceURI("prefix")).thenReturn(null);
        // Mock the getNamespaceURI method of the parent
        when(parent.getNamespaceURI("prefix")).thenReturn("uri");
        // Call the getNamespaceURI method
        String result = namespaceresolver.getNamespaceURI("prefix");
        // Assert the result
    assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointer_VFhS0() throws Exception {
        namespaceResolver = new NamespaceResolver();
        NodePointer nodePointer = Mockito.mock(NodePointer.class);
        namespaceResolver.setNamespaceContextPointer(nodePointer);
        assertEquals(nodePointer, namespaceResolver.getNamespaceContextPointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_u_nisq0() throws Exception {
        MockitoAnnotations.initMocks(this);
        namespaceresolver = new NamespaceResolver(parent);
        String namespaceURI = "testNamespace";
        String prefix = "testPrefix";
        when(parent.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(prefix);
        assertEquals(prefix, namespaceresolver.getPrefix(namespaceURI));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_foundInMap_HJrt0() throws Exception {
        NamespaceResolver namespaceresolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = "uri";
        when(namespaceMap.get(prefix)).thenReturn(uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_notFoundInMapNorParent_ULaN0() throws Exception {
        NamespaceResolver namespaceresolver = new NamespaceResolver(null);
        assertNull(namespaceresolver.getExternallyRegisteredNamespaceURI("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceContextPointer_JqSb0() {
        namespaceresolver = new NamespaceResolver(parent);
        Pointer result = Mockito.mock(Pointer.class);
        Mockito.when(parent.getNamespaceContextPointer()).thenReturn(result);
        Pointer result2 = namespaceresolver.getNamespaceContextPointer();
        Mockito.verify(parent, Mockito.times(1)).getNamespaceContextPointer();
        assertEquals(result, result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_buiE0_vmnk1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        NamespaceResolver clonedNamespaceResolver = (NamespaceResolver) namespaceResolver.clone();
        assert clonedNamespaceResolver != null;
        assert namespaceResolver != clonedNamespaceResolver;
    }
}