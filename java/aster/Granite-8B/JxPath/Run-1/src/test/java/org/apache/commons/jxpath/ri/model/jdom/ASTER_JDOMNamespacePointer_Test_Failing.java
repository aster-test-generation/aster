/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNamespacePointer_Test_Failing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    private JDOMNamespacePointer jdomnamespacepointer;
    private String prefix;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private QName name;
    private String namespaceURI;
    @Mock
    private Locale locale;
    @Mock
    private VariablePointer variablePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        jdomnamespacepointer = Mockito.mock(JDOMNamespacePointer.class);
        // Arrange
        String expected = "expectedNamespaceURI";
        Mockito.when(jdomnamespacepointer.getNamespaceURI()).thenReturn(expected);
        // Act
        Object actual = jdomnamespacepointer.getImmediateNode();
        // Assert
        Mockito.verify(jdomnamespacepointer, Mockito.times(1)).getNamespaceURI();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        prefix = "prefix";
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        // Arrange
        when(parent.hashCode()).thenReturn(1);
        // Act
        int result = jdomnamespacepointer.hashCode();
        // Assert
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNonNullParent_apkL1() {
        JDOMNamespacePointer parent = new JDOMNamespacePointer(null, "parentPrefix");
        JDOMNamespacePointer jdomNamespacePointer = new JDOMNamespacePointer(parent, "prefix");
        String result = jdomNamespacePointer.asPath();
        Assertions.assertEquals("parentPrefix/namespace::prefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        jdomnamespacepointer = Mockito.mock(JDOMNamespacePointer.class);
        Mockito.when(jdomnamespacepointer.getParent()).thenReturn(parent);
        int length = jdomnamespacepointer.getLength();
        Mockito.verify(jdomnamespacepointer).getParent();
        Assertions.assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        // Arrange
        when(jdomnamespacepointer.isLeaf()).thenReturn(true);
        // Act
        boolean result = jdomnamespacepointer.isLeaf();
        // Assert
        assertEquals(true, result);
    }
}