/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Iterator;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.*;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Failing {
    @Mock
    private QName name;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private AbstractFactory abstractFactory;
    @Mock
    private Variables variables;
    @Mock
    private Pointer pointer;
    NullPointer nullpointer;
    @Mock
    private Locale locale;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private JXPathContext context;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private Iterator iterator;
    @Mock
    private KeyManager keyManager;
    @Mock
    private IdentityManager identityManager;
    @Mock
    private ExceptionHandler exceptionHandler;
    @Mock
    private Functions functions;
    @Mock
    private NamespaceResolver namespaceResolver;
    @Mock
    private JXPathContextReferenceImpl jXPathContextReferenceImpl;
    @Mock
    private QName qName;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private NullPointer nullPointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() {
        name = Mockito.mock(QName.class);
        NullPointer nullPointer = new NullPointer(Locale.US, "id");
        NullPointer other = new NullPointer(Locale.US, "id");
        Mockito.when(name.equals(name)).thenReturn(true);
        assertEquals(true, nullPointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_mtLa1() {
        NullPointer pointer1 = new NullPointer(new Locale("en", "US"), "id");
        NullPointer pointer2 = new NullPointer(new Locale("fr", "FR"), "id");
        boolean result = pointer1.equals(pointer2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentName_yRAE3() {
        NullPointer pointer1 = new NullPointer(new Locale("en", "US"), "id");
        NullPointer pointer2 = new NullPointer(new Locale("en", "US"), "otherId");
        boolean result = pointer1.equals(pointer2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameNameNull_EEKi5() {
        NullPointer pointer1 = new NullPointer(new Locale("en", "US"), "id");
        NullPointer pointer2 = new NullPointer(null, "id");
        boolean result = pointer1.equals(pointer2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithoutParent_teih1() {
        JXPathContext context = JXPathContext.newContext(null, null);
        NullPointer parent = null;
        try {
            parent.createPath(context, null);
            Assertions.fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            Assertions.assertTrue(true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithoutParent_uxwN1() {
        JXPathContext context = JXPathContext.newContext(null, null);
        NullPointer parent = null;
        try {
            parent.createPath(context);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            assertEquals("Cannot create the root object: ", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_1() throws Exception {
        nullpointer = new NullPointer(name, Locale.US);
        // Test when name is null
        when(name.hashCode()).thenReturn(1);
        // Test when name is not null
        when(name.hashCode()).thenReturn(2);
        assertEquals(0, nullpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_2() throws Exception {
        nullpointer = new NullPointer(name, Locale.US);
        // Test when name is null
        when(name.hashCode()).thenReturn(1);
        // Test when name is not null
        when(name.hashCode()).thenReturn(2);
        assertEquals(2, nullpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() {
        MockitoAnnotations.initMocks(this);
        name = Mockito.mock(QName.class);
        // Arrange
        Mockito.when(name.getName()).thenReturn("Test Name");
        // Act
        QName result = nullpointer.getName();
        // Assert
        Mockito.verify(name, Mockito.times(1)).getName();
        assertEquals("Test Name", result.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        nullpointer = new NullPointer(Locale.US, "id");
        // Arrange
        when(nullpointer.getBaseValue()).thenReturn("baseValue");
        // Act
        Object baseValue = nullpointer.getBaseValue();
        // Assert
        assertEquals("baseValue", baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithParent_QwJE0_GDMM0() {
        JXPathContext context = JXPathContext.newContext(null, null);
        QName qName = new QName("prefix", "localName");
        NullPointer parent = new NullPointer(null, qName);
        NodePointer result = parent.createPath(context, null);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild2_QqEP1_BHgR0() {
        NullPointer nullPointer = new NullPointer(new QName("name"), new Locale("en", "US"));
        JXPathContext context = JXPathContext.newContext(null);
        QName name = new QName("prefix", "localName");
        NodePointer result = nullPointer.createChild(context, name, 0);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithParent_ekqB0_vDvA0() {
        JXPathContext context = JXPathContext.newContext(null, null);
        QName qName = new QName("prefix", "localName");
        NullPointer parent = new NullPointer(null, qName);
        NodePointer result = parent.createPath(context);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_iZhl0_ajfb0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("name", "localName");
        NullPointer nullPointer = new NullPointer(null, name);
        NodePointer nodePointer = nullPointer.createChild(context, name, 0, "value");
        assert nodePointer != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild2_VhYd1_dGxK0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("name", "localName");
        NullPointer nullPointer = new NullPointer(name, null);
        NodePointer nodePointer = nullPointer.createChild(context, name, 0, "value");
        assert nodePointer != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_lzAl0_fid1() {
        QName name = new QName("prefix", "localName");
        NullPointer nullPointer = new NullPointer(new Locale("en", "US"), "id");
        QName result = nullPointer.getName();
        assertEquals(name, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        nullpointer = new NullPointer(name, Locale.US);
        // Test when name is null
        when(name.hashCode()).thenReturn(1);
        assertEquals(0, nullpointer.hashCode());
        // Test when name is not null
        when(name.hashCode()).thenReturn(2);
        assertEquals(2, nullpointer.hashCode());
    }
}