/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodeIterator_Test_Passing {
    private int position = 0;
    @Mock
    private Node node;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NodePointer parent;
    @Mock
    private NodePointer nodepointer;
    @Mock
    private DOMNodePointer domnodepointer;
    @Mock
    private DOMNodePointer parentpointer;
    @Mock
    private NodeTypeTest nodetest;
    @Mock
    private QName qname;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition_DrcY0() {
        node = mock(Node.class);
        nodePointer = mock(NodePointer.class);
        domNodePointer = mock(DOMNodePointer.class);
        nodeTypeTest = mock(NodeTypeTest.class);
        when(domNodePointer.getNode()).thenReturn(node);
        when(nodePointer.getNode()).thenReturn(node);
        DOMNodeIterator domNodeIterator = new DOMNodeIterator(domNodePointer, nodeTypeTest, false, nodePointer);
        int actualPosition = domNodeIterator.getPosition();
        assertEquals(0, actualPosition);
    }
}