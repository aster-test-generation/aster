/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DescendantContext_Test_Passing {
    @Mock
    private NodeTypeTest nodeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    private DescendantContext descendantContext;
    @Mock
    private Object superObject;
    private boolean setStarted = false;
    @Mock
    private DescendantContext descendantcontext;
    private NodePointer currentNodePointer = null;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private Stack stack = null;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionMoreThanCurrentPosition_CtMp2() {
        DescendantContext descendantContext = new DescendantContext(new SelfContext(new NamespaceContext(new SelfContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        descendantContext.setPosition(2);
        assertFalse(descendantContext.setPosition(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionNoMoreNodes_ELwl3() {
        DescendantContext descendantContext = new DescendantContext(new SelfContext(new NamespaceContext(new SelfContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1)), true, new NodeTypeTest(1));
        while (descendantContext.nextNode()) {
            descendantContext.setPosition(2);
        }
        assertFalse(descendantContext.setPosition(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_Position0_ReturnsNull_skmQ0() {
        DescendantContext descendantContext = new DescendantContext(new NamespaceContext(new SelfContext(null, null), null), true, new NodeTypeTest(0));
        NodePointer result = descendantContext.getCurrentNodePointer();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_InitialCall_KNvG0() {
        DescendantContext descendantContext = new DescendantContext(new NamespaceContext(new SelfContext(null, null), null), true, new NodeTypeTest(1));
        boolean result = descendantContext.nextNode();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisChildOrderingRequired() {
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        this.descendantcontext = descendantContext;
        // Arrange
        when(namespaceContext.isChildOrderingRequired()).thenReturn(true);
        // Act
        boolean result = descendantcontext.isChildOrderingRequired();
        // Assert
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsChildOrderingRequired_uRDU0() {
        SelfContext selfContext = new SelfContext(null, null);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, nodeTypeTest);
        assertTrue(descendantContext.isChildOrderingRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_GFrk0_fmNJ0() {
        DescendantContext descendantContext = new DescendantContext(new NamespaceContext(new SelfContext(null, null), null), true, new NodeTypeTest(0));
        descendantContext.reset();
    }
}