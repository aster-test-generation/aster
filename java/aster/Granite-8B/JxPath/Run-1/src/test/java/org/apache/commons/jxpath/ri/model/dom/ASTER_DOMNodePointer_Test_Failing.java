/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.util.TypeUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Failing {
    private Node node;
    private DOMNodePointer domnodepointer;
    private NodePointer nodepointer;
    private NamedNodeMap namednodemap;
    private NodeTest nodeTest;
    private Attr attr;
    private NodeList nodelist;
    private Document document;
    private DOMNodePointer domNodePointer;
    private JXPathContext jXPathContext;
    private QName qName;
    private AbstractFactory abstractFactory;
    @Mock
    private Element element;
    @Mock
    private Locale locale;
    @Mock
    private QName name;
    @Mock
    private DOMAttributeIterator iterator;
    @Mock
    private QName qname;
    @Mock
    private VariablePointer variablePointer;
    private String defaultNamespace;
    private Node parent;
    private String id;
    private NodeTest test;
    private Object value;
    @Mock
    private NamespaceResolver superNamespaceResolver;
    @Mock
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_1() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = new DOMNodePointer(node, Locale.US);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        int result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node.getParentNode());
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node.getParentNode());
        when(nodepointer.getBaseValue()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(null);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(null);
        when(node.getNextSibling()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_2() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = new DOMNodePointer(node, Locale.US);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        int result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node.getParentNode());
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node.getParentNode());
        when(nodepointer.getBaseValue()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(null);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(null);
        when(node.getNextSibling()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_3() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = new DOMNodePointer(node, Locale.US);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        int result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node.getParentNode());
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node.getParentNode());
        when(nodepointer.getBaseValue()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(null);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(null);
        when(node.getNextSibling()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_textNode() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("value");
        domnodepointer.setValue("value");
        verify(node).setNodeValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_textNode_emptyValue() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("");
        domnodepointer.setValue("");
        verify(node).setNodeValue("");
        verify(node.getParentNode(), times(1)).removeChild(node);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_elementNode() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("value");
        domnodepointer.setValue("value");
        verify(node).appendChild(any(Node.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_cdataSectionNode() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.CDATA_SECTION_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("value");
        domnodepointer.setValue("value");
        verify(node).setNodeValue("value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_nodeList() throws Exception {
        node = mock(Node.class);
        nodelist = mock(NodeList.class);
        document = mock(Document.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(TypeUtils.convert(any(), eq(String.class))).thenReturn("value");
        domnodepointer.setValue(node);
        verify(node).appendChild(any(Node.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild() throws Exception {
        node = mock(Node.class);
        jXPathContext = mock(JXPathContext.class);
        qName = mock(QName.class);
        abstractFactory = mock(AbstractFactory.class);
        domNodePointer = new DOMNodePointer(node, Locale.US);
        when(abstractFactory.createObject(any(JXPathContext.class), any(DOMNodePointer.class), any(Node.class), anyString(), anyInt())).thenReturn(true);
        when(jXPathContext.getNamespaceURI(anyString())).thenReturn("namespaceURI");
        when(qName.getPrefix()).thenReturn("prefix");
        when(qName.toString()).thenReturn("prefix:localName");
        domNodePointer.createChild(jXPathContext, qName, 0);
        verify(abstractFactory).createObject(jXPathContext, domNodePointer, node, qName.toString(), 0);
        verify(jXPathContext).getNamespaceURI("prefix");
        verify(qName).getPrefix();
        verify(qName).toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindEnclosingAttribute() throws Exception {
        node = mock(Node.class);
        element = mock(Element.class);
        domNodePointer = mock(DOMNodePointer.class);
        when(node.getParentNode()).thenReturn(node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(element.getAttribute("attrName")).thenReturn("attributeValue");
        String result = DOMNodePointer.findEnclosingAttribute(node, "attrName");
        assertEquals("attributeValue", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_ProcessingInstructionNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(((ProcessingInstruction) node).getTarget()).thenReturn("target");
        QName expected = new QName(null, "target");
        QName actual = domnodepointer.getName();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_OtherNodeType() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        QName expected = new QName(null, null);
        QName actual = domnodepointer.getName();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        assertEquals("namespaceURI", domnodepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, "id");
        // Arrange
        NodeIterator expected = mock(NodeIterator.class);
        // Act
        NodeIterator actual = domnodepointer.namespaceIterator();
        // Assert
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_EPEP0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        NodeIterator nodeIterator = domNodePointer.namespaceIterator();
        assert nodeIterator instanceof NodeIterator;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(element.getNamespaceURI()).thenReturn("namespaceURI");
        when(node instanceof Document).thenReturn(true);
        when(node.getParentNode()).thenReturn(node);
        String result = DOMNodePointer.getNamespaceURI(node);
        assertEquals("namespaceURI", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_NullURI() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(element.getNamespaceURI()).thenReturn(null);
        when(node instanceof Document).thenReturn(true);
        when(node.getParentNode()).thenReturn(node);
        String result = DOMNodePointer.getNamespaceURI(node);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_AttributeFound() throws Exception {
        element = mock(Element.class);
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(element.getNamespaceURI()).thenReturn(null);
        when(node instanceof Document).thenReturn(true);
        when(node.getParentNode()).thenReturn(node);
        when(element.getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("namespaceURI");
        String result = DOMNodePointer.getNamespaceURI(node);
        assertEquals("namespaceURI", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has local name
        when(node.getLocalName()).thenReturn("localName");
        // Test case 2: Node does not have local name
        when(node.getLocalName()).thenReturn(null);
        assertEquals("localName", DOMNodePointer.getLocalName(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_2() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has local name
        when(node.getLocalName()).thenReturn("localName");
        // Test case 2: Node does not have local name
        when(node.getLocalName()).thenReturn(null);
        assertEquals("node", DOMNodePointer.getLocalName(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_CommentNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.COMMENT_NODE);
        when(((Comment) node).getData()).thenReturn("   comment text   ");
        assertEquals("comment text", domnodepointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ElementNode() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getNodeName()).thenReturn("elementName");
        when(node.getTextContent()).thenReturn("element text");
        assertEquals("element text", domnodepointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI_ElementNode() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://example.com");
        String result = domnodepointer.getDefaultNamespaceURI();
        assertEquals("http://example.com", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI_NullAttr() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(((Element) node).getAttributeNode("xmlns")).thenReturn(null);
        String result = domnodepointer.getDefaultNamespaceURI();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_NullLanguage_ReturnsSuperIsLanguage() {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        // Act
        boolean result = domNodePointer.isLanguage(null);
        // Assert
        verify(domNodePointer).isLanguage(null);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_EmptyLanguage_ReturnsSuperIsLanguage() {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        // Act
        boolean result = domNodePointer.isLanguage("");
        // Assert
        verify(domNodePointer).isLanguage("");
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_LanguageNotStartingWith_ReturnsFalse() {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        // Arrange
        when(domNodePointer.getLanguage()).thenReturn("en-US");
        // Act
        boolean result = domNodePointer.isLanguage("fr");
        // Assert
        verify(domNodePointer).getLanguage();
        verify(domNodePointer).isLanguage("fr");
        assertEquals(false, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguage_LanguageStartingWith_ReturnsTrue() {
        domNodePointer = new DOMNodePointer(node, locale, "id");
        // Arrange
        when(domNodePointer.getLanguage()).thenReturn("en-US");
        // Act
        boolean result = domNodePointer.isLanguage("en");
        // Assert
        verify(domNodePointer).getLanguage();
        verify(domNodePointer).isLanguage("en");
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_1() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, id);
        // Arrange
        String prefix = "prefix";
        // Act
        NodePointer result = domnodepointer.namespacePointer(prefix);
        // Assert
        Mockito.verify(domnodepointer, Mockito.times(1)).namespacePointer(prefix);
        Mockito.verifyNoMoreInteractions(domnodepointer);
        Mockito.verifyNoMoreInteractions(node);
        Mockito.verifyNoMoreInteractions(locale);
        Mockito.verifyNoMoreInteractions(id);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer_2() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, id);
        // Arrange
        String prefix = "prefix";
        // Act
        NodePointer result = domnodepointer.namespacePointer(prefix);
        // Assert
        Mockito.verify(domnodepointer, Mockito.times(1)).namespacePointer(prefix);
        Mockito.verifyNoMoreInteractions(domnodepointer);
        Mockito.verifyNoMoreInteractions(node);
        Mockito.verifyNoMoreInteractions(locale);
        Mockito.verifyNoMoreInteractions(id);
        Assertions.assertTrue(result instanceof NamespacePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_QEAA0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
        String result = domNodePointer.asPath();
        assertEquals("/prefix:localName[1]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ProcessingInstructionNode_mEMM3() {
        QName qName = new QName("target");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
        String result = domNodePointer.asPath();
        assertEquals("/processing-instruction('target')[1]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_PI_CAde2() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.PROCESSING_INSTRUCTION_NODE);
        when(((ProcessingInstruction) node).getTarget()).thenReturn("target");
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/processing-instruction('target')[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefix() {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getParentNode()).thenReturn(node);
        when(((Element) node).getAttributeNode("xmlns:custom")).thenReturn(attr);
        when(attr.getValue()).thenReturn("http://custom.com");
        String namespace = domnodepointer.getNamespaceURI("custom");
        assertEquals("http://custom.com", namespace);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWholeCollection_NBzf0_lQht0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("name");
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, null);
        NodePointer result = nodePointer.createChild(context, name, DOMNodePointer.WHOLE_COLLECTION);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildValidName_buJd1_RJVx0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName("name", "namespace");
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, null);
        NodePointer result = nodePointer.createChild(context, name, 0);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildInvalidName_fhmQ2_Mpds0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        QName name = new QName(null, "namespace");
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, null);
        try {
            nodePointer.createChild(context, name, 0);
            fail("Expected JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
            assertEquals("Factory could not create a child node for path: " + nodePointer.asPath() + "/" + name + "[1]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildInvalidIndex_yqlH3_yCcy0() {
        JXPathContext context = JXPathContext.newContext(null);
        QName name = new QName("name", "namespace");
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, null);
        try {
            nodePointer.createChild(context, name, -1);
            fail("Expected JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
            assertEquals("Factory could not create a child node for path: " + nodePointer.asPath() + "/" + name + "[-1]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointerByID_NullNode_ReturnsNullPointer_jRxY2_hlfJ1() {
        JXPathContext context = JXPathContext.newContext(null);
        Pointer result = context.getPointer("id");
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NodeTypeTest_WZST0() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        NodeTypeTest test = mock(NodeTypeTest.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        when(test instanceof NodeTypeTest).thenReturn(true);
        when(((NodeTypeTest) test).getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        assertTrue(DOMNodePointer.testNode(node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NodeTypeTest_False_WqPE0() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        NodeTypeTest test = mock(NodeTypeTest.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        when(test instanceof NodeTypeTest).thenReturn(true);
        when(((NodeTypeTest) test).getNodeType()).thenReturn(Compiler.NODE_TYPE_COMMENT);
        assertFalse(DOMNodePointer.testNode(node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NodeNameTest_KCVF0() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        NodeNameTest test = mock(NodeNameTest.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        when(test instanceof NodeNameTest).thenReturn(true);
        when(((NodeNameTest) test).getNodeName()).thenReturn(new QName("prefix", "localName"));
        when(((NodeNameTest) test).getNamespaceURI()).thenReturn("namespaceURI");
        assertTrue(DOMNodePointer.testNode(node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode_NodeNameTest_False_tURq0() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        NodeNameTest test = mock(NodeNameTest.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("localName");
        when(node.getNamespaceURI()).thenReturn("namespaceURI");
        when(test instanceof NodeNameTest).thenReturn(true);
        when(((NodeNameTest) test).getNodeName()).thenReturn(new QName("prefix", "localName"));
        when(((NodeNameTest) test).getNamespaceURI()).thenReturn("wrongNamespaceURI");
        assertFalse(DOMNodePointer.testNode(node, test));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_OUAb0_wSBU0() {
        JXPathContext context = JXPathContext.newContext(null);
        QName name = new QName("qualifiedName");
        DOMNodePointer ptr = new DOMNodePointer(null, null, null);
        NodePointer result = ptr.createChild(context, name, 0, "value");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildNullContext_NthY4_fid1() {
        QName name = new QName("name", "namespace");
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, null);
        try {
            nodePointer.createChild(null, name, 0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("context", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_VariablePointer_gBfh1_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(name);
        String result = variablePointer.getNamespaceURI();
        assertEquals("expected result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_1_fid1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test when node has no child nodes
        when(node.hasChildNodes()).thenReturn(false);
        // Test when node has child nodes
        when(node.hasChildNodes()).thenReturn(true);
        assertTrue(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_TextNode_fid1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        when(node.getTextContent()).thenReturn("text content");
        assertEquals("text content", domnodepointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDefaultNamespaceURI_DocumentNode_fid1() throws Exception {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        String result = domnodepointer.getDefaultNamespaceURI();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDefaultNamespaceURI_NullNode_yNII7_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, "id");
        String result = domNodePointer.getDefaultNamespaceURI();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test with prefix
        when(node.getPrefix()).thenReturn("prefix");
        // Test without prefix
        when(node.getPrefix()).thenReturn(null);
        // Test with colon in node name
        when(node.getNodeName()).thenReturn("namespace:element");
        // Test without colon in node name
        when(node.getNodeName()).thenReturn("element");
        assertEquals("prefix", DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_2() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test with prefix
        when(node.getPrefix()).thenReturn("prefix");
        // Test without prefix
        when(node.getPrefix()).thenReturn(null);
        // Test with colon in node name
        when(node.getNodeName()).thenReturn("namespace:element");
        // Test without colon in node name
        when(node.getNodeName()).thenReturn("element");
        assertEquals("namespace", DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_NoPrefix_kFHj1() {
        QName qName = new QName("localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, node);
        String result = domNodePointer.asPath();
        assertEquals("/localName[1]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_TextNode_YqDJ2_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(node, Locale.US, "id");
        String result = domNodePointer.asPath();
        assertEquals("/text()[1]", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_sKeN0_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/prefix:localName[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_NoPrefix_WxqG1_fid1() {
        QName name = new QName("localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/localName[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_NoNamespace_Qfsk7_fid1() {
        QName name = new QName(null, "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/localName[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_TextNode_TxTT1_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/text()[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_DocumentNode_ZAfn3() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_NoPrefix_sPDB4_fid1() {
        QName name = new QName("localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("localName[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_PVEl0_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPreviousSibling()).thenReturn(null);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/prefix:localName[1]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_PreviousSibling_DxoE1_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        Node previousSibling = mock(Node.class);
        when(previousSibling.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getPreviousSibling()).thenReturn(previousSibling);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/prefix:localName[2]", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefix_najz4() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String result = domNodePointer.getNamespaceURI("custom");
        Assertions.assertEquals(NodePointer.UNKNOWN_NAMESPACE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_CustomPrefixWithNamespace_cdHg5() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        domNodePointer.getNamespaceURI("custom");
        String result = domNodePointer.getNamespaceURI("custom");
        Assertions.assertEquals(NodePointer.UNKNOWN_NAMESPACE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildNullName_jrPx5_UJLO0_fid1() {
        JXPathContext context = JXPathContext.newContext(new Object());
        DOMNodePointer nodePointer = new DOMNodePointer(null, Locale.US, null);
        try {
            nodePointer.createChild(context, null, 0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertEquals("name", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_ElementNode_kPRT0_fid1() throws Exception {
        Node node = mock(Node.class);
        String id = "someId";
        Locale locale = Locale.US;
        QName qname = new QName("somePrefix", "someLocalName");
        VariablePointer variablePointer = new VariablePointer(qname);
        DOMNodePointer domnodepointer = new DOMNodePointer(variablePointer, node);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("someLocalName");
        when(node.getNamespaceURI()).thenReturn("someNamespaceURI");
        when(node.getPrefix()).thenReturn("somePrefix");
        String expectedPath = "/somePrefix:someLocalName[1]";
        String actualPath = domnodepointer.asPath();
        assertEquals(expectedPath, actualPath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_TextNode_BPym0_fid1() throws Exception {
        Node node = mock(Node.class);
        String id = "someId";
        DOMNodePointer domnodepointer = new DOMNodePointer(node, null, id);
        when(node.getNodeType()).thenReturn(Node.TEXT_NODE);
        String expectedPath = "/text()[1]";
        String actualPath = domnodepointer.asPath();
        assertEquals(expectedPath, actualPath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_DocumentNode_lfBK0() throws Exception {
        Node node = mock(Node.class);
        String id = "someId";
        DOMNodePointer domnodepointer = new DOMNodePointer(node, null, id);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(node.getLocalName()).thenReturn("someLocalName");
        when(node.getNamespaceURI()).thenReturn("someNamespaceURI");
        when(node.getPrefix()).thenReturn("somePrefix");
        when(node.getNodeType()).thenReturn(Node.DOCUMENT_NODE);
        String expectedPath = "";
        String actualPath = domnodepointer.asPath();
        assertEquals(expectedPath, actualPath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNode_RelativePosition_nrVE5_kZdH0_fid1() {
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(name);
        Node node = mock(Node.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        DOMNodePointer domNodePointer = new DOMNodePointer(parent, node);
        assertEquals("/prefix:localName", domNodePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        domnodepointer = new DOMNodePointer(node, Locale.US);
        namednodemap = mock(NamedNodeMap.class);
        when(node.getNodeType()).thenReturn(Node.ELEMENT_NODE);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        int result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(0, result);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node.getParentNode());
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(-1, result);
        when(nodepointer.getBaseValue()).thenReturn(node.getParentNode());
        when(nodepointer.getBaseValue()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(1, result);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(null);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(0, result);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(-1, result);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(nodepointer.getBaseValue()).thenReturn(node);
        when(node.getNextSibling()).thenReturn(null);
        when(node.getNextSibling()).thenReturn(node);
        result = domnodepointer.compareChildNodePointers(nodepointer, nodepointer);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test case 1: Node has local name
        when(node.getLocalName()).thenReturn("localName");
        assertEquals("localName", DOMNodePointer.getLocalName(node));
        // Test case 2: Node does not have local name
        when(node.getLocalName()).thenReturn(null);
        assertEquals("node", DOMNodePointer.getLocalName(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.US, "id");
        // Test with prefix
        when(node.getPrefix()).thenReturn("prefix");
        assertEquals("prefix", DOMNodePointer.getPrefix(node));
        // Test without prefix
        when(node.getPrefix()).thenReturn(null);
        assertEquals("namespace", DOMNodePointer.getPrefix(node));
        // Test with colon in node name
        when(node.getNodeName()).thenReturn("namespace:element");
        assertEquals("namespace", DOMNodePointer.getPrefix(node));
        // Test without colon in node name
        when(node.getNodeName()).thenReturn("element");
        assertEquals(null, DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespacePointer() throws Exception {
        domnodepointer = new DOMNodePointer(node, locale, id);
        // Arrange
        String prefix = "prefix";
        // Act
        NodePointer result = domnodepointer.namespacePointer(prefix);
        // Assert
        Mockito.verify(domnodepointer, Mockito.times(1)).namespacePointer(prefix);
        Mockito.verifyNoMoreInteractions(domnodepointer);
        Mockito.verifyNoMoreInteractions(node);
        Mockito.verifyNoMoreInteractions(locale);
        Mockito.verifyNoMoreInteractions(id);
        Assertions.assertNotNull(result);
        Assertions.assertTrue(result instanceof NamespacePointer);
    }
}