/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PropertyIterator_Test_Passing {
    @Mock
    private BeanPointer beanPointer;
    @Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private QName qName;
    @Mock
    private String name;
    @Mock
    private PropertyIterator propertyIterator;
    @Mock
    private Locale locale;
    @Mock
    private DOMNodePointer dOMNodePointer;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private PropertyPointer propertyNodePointer;
    private boolean includeStart = false;
    private int startIndex = 0;
    private boolean targetReady = false;
    private boolean empty = false;
    private boolean reverse;
    private int startPropertyIndex;
    private PropertyIterator propertyiterator;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition() throws Exception {
        propertyiterator = new PropertyIterator(beanPointer, "name", false, domNodePointer);
        // Arrange
        propertyiterator.setPosition(5);
        // Act
        int result = propertyiterator.getPosition();
        // Assert
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition_vtxu0() {
        QName qName = new QName("name", "localName");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(PropertyIterator.class, true);
        Object bean = new PropertyIterator(null, null, false, null);
        BeanPointer beanPointer = new BeanPointer(qName, bean, beanInfo, null);
        VariablePointer variablePointer = new VariablePointer(qName);
        PropertyIterator propertyIterator = new PropertyIterator(beanPointer, "name", true, null);
        int position = propertyIterator.getPosition();
        assertEquals(0, position);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionAllProperties_CFiI0() {
        PropertyIterator propertyIterator = new PropertyIterator(new BeanPointer(new QName("name"), null, new JXPathBasicBeanInfo(null, false), Locale.US), "name", false, new DOMNodePointer(null, Locale.US, "id"));
        boolean result = propertyIterator.setPosition(1);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() throws Exception {
        MockitoAnnotations.initMocks(this);
        propertyiterator = new PropertyIterator(beanPointer, "name", false, domNodePointer);
        Mockito.when(propertyiterator.getPropertyPointer()).thenReturn(propertyNodePointer);
        NodePointer actual = propertyiterator.getPropertyPointer();
        Mockito.verify(propertyiterator, Mockito.times(1)).getPropertyPointer();
        Assertions.assertEquals(propertyNodePointer, actual);
    }
}