/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.Collections;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ClassFunctions_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNullNamespace_Zsjd0() {
        ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
        Function function = classFunctions.getFunction(null, "name", new Object[]{});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionDifferentNamespace_YUii1() {
        ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
        Function function = classFunctions.getFunction("differentNamespace", "name", new Object[]{});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionNoMethod_NXZU6() {
        ClassFunctions classFunctions = new ClassFunctions(Function.class, "namespace");
        Function function = classFunctions.getFunction("namespace", "nonExistingMethod", new Object[]{});
        Assertions.assertNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetUsedNamespaces_WuVw0() {
        Class functionClass = String.class;
        String namespace = "testNamespace";
        ClassFunctions classFunctions = new ClassFunctions(functionClass, namespace);
        Set<String> usedNamespaces = classFunctions.getUsedNamespaces();
        Set<String> expected = Collections.singleton(namespace);
        assert expected.equals(usedNamespaces);
    }
}