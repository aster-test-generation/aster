/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationNegate_Test_Passing {
    @Mock
    private Constant arg;
    @Mock
    private EvalContext context;
    private CoreOperationNegate coreoperationnegate;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_SZaM0() {
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(new Constant(1));
        assertEquals("-", coreOperationNegate.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_PojN0() {
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(new Constant("test"));
        boolean result = coreOperationNegate.isSymmetric();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getPrecedence_rTSW0() {
        CoreOperationNegate coreOperationNegate = new CoreOperationNegate(new Constant(1));
        assertEquals(CoreOperationNegate.NEGATE_PRECEDENCE, coreOperationNegate.getPrecedence());
    }
}