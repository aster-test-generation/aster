/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPointer_Test_Passing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private JXPathBasicBeanInfo beanInfo;
    @Mock
    private QName name;
    private Object bean;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullParent_oEEk0() {
        BeanPointer beanPointer = new BeanPointer(null, new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertEquals("/", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullBean_ysRC1() {
        BeanPointer beanPointer = new BeanPointer(null, null, new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertEquals("null()", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNumber_ULtA2() {
        BeanPointer beanPointer = new BeanPointer(null, 123.45, new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertEquals("123.45", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathBooleanTrue_PPwQ3() {
        BeanPointer beanPointer = new BeanPointer(null, Boolean.TRUE, new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertEquals("true()", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathBooleanFalse_pFGU4() {
        BeanPointer beanPointer = new BeanPointer(null, Boolean.FALSE, new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertEquals("false()", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathString_zMhL5() {
        BeanPointer beanPointer = new BeanPointer(null, "hello", new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertEquals("'hello'", beanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_mcfL0() {
        QName name = new QName("name", "localName");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(BeanPointer.class, true);
        Object bean = new Object();
        Locale locale = new Locale("en", "US");
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        int length = beanPointer.getLength();
        assert length == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_vzNR0() {
        QName name = new QName("name");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, true);
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        Object result = beanPointer.getBaseValue();
        assertEquals(bean, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafFalse_UJlw1() {
        QName name = new QName("test");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(bean.getClass());
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        boolean result = beanPointer.isLeaf();
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNull_NtvG2() {
        QName name = new QName("test");
        Object bean = null;
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class);
        Locale locale = Locale.US;
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        boolean result = beanPointer.isLeaf();
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_xmkU1_gwIS0() {
        BeanPointer beanPointer = new BeanPointer(new QName("name"), new Object(), new JXPathBasicBeanInfo(Object.class), Locale.US);
        assertEquals(false, beanPointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_FXOt0_rrci0() {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(new Object().getClass(), true);
        BeanPointer beanPointer = new BeanPointer(new QName("name", "localName"), new Object(), beanInfo, Locale.US);
        PropertyPointer propertyPointer = beanPointer.getPropertyPointer();
        assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_NameNotNull_UkhU0_sjbO0() {
        QName name = new QName("prefix", "localName");
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(bean.getClass(), true);
        Locale locale = new Locale("en", "US");
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        int result = beanPointer.hashCode();
        assertEquals(name.hashCode(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_NameNull_szEZ1_LklX0() {
        QName name = null;
        Object bean = new Object();
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(bean.getClass(), true);
        Locale locale = new Locale("en", "US");
        BeanPointer beanPointer = new BeanPointer(name, bean, beanInfo, locale);
        int result = beanPointer.hashCode();
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_NonNullNode_ReturnsFalse_dOwJ0() {
        QName name = new QName("test");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(Object.class, false);
        Locale locale = Locale.US;
        DOMNodePointer parent = new DOMNodePointer(null, locale, null);
        Object bean = new Object();
        BeanPointer beanpointer = new BeanPointer(name, bean, beanInfo, locale);
        assertFalse(beanpointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_BrkR0() {
        QName name = new QName("expectedName");
        BeanPointer beanpointer = new BeanPointer(name, null, null, null);
        QName actualName = beanpointer.getName();
        assertEquals("expectedName", actualName.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_AtomicBean_ReturnsTrue_KqBc0_fid2() {
        QName name = new QName("name");
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(null, true);
        Locale locale = Locale.US;
        Object bean = new Object();
        DOMNodePointer parent = new DOMNodePointer(null, locale, null);
        BeanPointer beanpointer = new BeanPointer(parent, name, bean, beanInfo);
    }
}