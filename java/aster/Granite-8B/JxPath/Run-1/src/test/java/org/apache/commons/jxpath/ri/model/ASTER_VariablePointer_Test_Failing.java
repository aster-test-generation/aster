/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Failing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    private VariablePointer variablepointer;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private AbstractFactory abstractFactory;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private Variables variables;
    @Mock
    private JXPathContextReferenceImpl jXPathContextReferenceImpl;
    @Mock
    private QName qName;
    @Mock
    private NodeIterator nodeIterator;
    private boolean actual;
    @Mock
    private VariablePointer variablePointer;
    private NodePointer valuePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testfindVariables() throws Exception {
        variablepointer = new VariablePointer(variables, qName);
        when(jXPathContext.getVariables()).thenReturn(variables);
        when(jXPathContext.getParentContext()).thenReturn(jXPathContextReferenceImpl);
        when(jXPathContextReferenceImpl.getParentContext()).thenReturn(null);
        variablepointer.findVariables(jXPathContext);
        verify(variables, times(1)).isDeclaredVariable(qName.toString());
        verify(jXPathContext, times(1)).getParentContext();
        verify(jXPathContextReferenceImpl, times(1)).getParentContext();
        assertEquals(true, variablepointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindVariables_redc0_VFju0() {
        JXPathContext context = JXPathContext.newContext(new Object());
        VariablePointer variablePointer = new VariablePointer(new QName("variableName"));
        variablePointer.findVariables(context);
        assertEquals(true, variablePointer.isActual());
    }
}