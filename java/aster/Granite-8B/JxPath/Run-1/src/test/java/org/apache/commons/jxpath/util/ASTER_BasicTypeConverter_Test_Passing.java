/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathInvalidAccessException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNull_vMGW0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(null, String.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertString_drRo1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert("test", String.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertBoolean_bZJq2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(true, Boolean.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertNumber_LEoL3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(1, Integer.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertArray_oHKE4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Object[]{1, 2, 3}, Object[].class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertCollection_RCOM5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(Arrays.asList(1, 2, 3), List.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertPrimitive_ZrEP8() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(1, int.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertWrapper_AwjF9() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new Integer(1), Integer.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToBoolean_CcuY10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert("true", Boolean.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToNumber_jDKn11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert("1", Integer.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToArray_OrNx12() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new String[]{"1", "2", "3"}, String[].class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToCollection_yRgu13() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(Arrays.asList("1", "2", "3"), List.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertStringToPrimitive_XoKH16() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert("1", int.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertBooleanToArray_Ryof18() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(new boolean[]{true, false}, boolean[].class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertBooleanToCollection_DjoW19() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(Arrays.asList(true, false), List.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvertBooleanToPrimitive_eNQD22() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canConvert(true, boolean.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForConcreteClass_JZYa0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForAbstractClass_Svmg1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertFalse(converter.canCreateCollection(AbstractCollection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForList_hQqG3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(List.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForCollection_Rffv4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Collection.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionForSet_wtPQ5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        assertTrue(converter.canCreateCollection(Set.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForConcreteClass_sgzT0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(ArrayList.class);
        Assertions.assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForAbstractClass_mMdB2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.allocateCollection(AbstractCollection.class);
            Assertions.fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForListClass_sFEn3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(List.class);
        Assertions.assertTrue(collection instanceof ArrayList);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForSetClass_fXRS4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection collection = converter.allocateCollection(Set.class);
        Assertions.assertTrue(collection instanceof HashSet);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollectionForUnknownClass_Mhbh5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        try {
            converter.allocateCollection(Object.class);
            Assertions.fail("Expected JXPathInvalidAccessException");
        } catch (JXPathInvalidAccessException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateByte_PmRE0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.0);
        Assertions.assertEquals(Byte.valueOf((byte) 10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateShort_oNiB1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.0);
        Assertions.assertEquals(Short.valueOf((short) 10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateInteger_fWVi2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.0);
        Assertions.assertEquals(Integer.valueOf((int) 10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateLong_uBZK3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.0);
        Assertions.assertEquals(Long.valueOf((long) 10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateFloat_bYqF4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.0);
        Assertions.assertEquals(Float.valueOf((float) 10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateDouble_ixzv5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.0);
        Assertions.assertEquals(Double.valueOf(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateBigInteger_tumK6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.0);
        Assertions.assertEquals(BigInteger.valueOf((long) 10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateBigDecimal_nYbk7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10.0);
        Assertions.assertEquals(new BigDecimal(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateInvalidType_oSvX10() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(String.class, 10.0);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateInvalidValue_WLOY11() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.5);
        Assertions.assertEquals(Integer.valueOf((int) 10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToInt_QGfb4_jTsn0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("123", int.class);
        Assertions.assertEquals(123, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertBooleanToBoolean_RSoK6_LBrx0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        Assertions.assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateAtomicInteger_GPuI8_Vzay1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("10", Integer.class);
        Assertions.assertEquals(Integer.valueOf(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateAtomicLong_MDor9_GWfE0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("10", Long.class);
        Assertions.assertEquals(Long.valueOf(10), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToBoolean_qpHV0_MJnY1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "true";
        Class toType = Boolean.class;
        Object result = converter.convertStringToPrimitive(object, toType);
        assertEquals(Boolean.TRUE, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToByte_Momf2_mnRO0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "1";
        Class toType = Byte.class;
        Object result = converter.convertStringToPrimitive(object, toType);
        assertEquals(Byte.parseByte((String) object), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToShort_dUpZ3_gXHH0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "1";
        Class toType = Short.class;
        Object result = converter.convertStringToPrimitive(object, toType);
        assertEquals(Short.parseShort((String) object), (short) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToInt_MRbd4_YPFg1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "1";
        Class toType = Integer.class;
        Object result = converter.convertStringToPrimitive(object, toType);
        assertEquals(Integer.valueOf(1), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToLong_JwGt5_NMfH0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "1";
        Class toType = Long.class;
        Object result = converter.convertStringToPrimitive(object, toType);
        assertEquals(Long.valueOf(1), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToDouble_yhfI7_fhZH1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "1.0";
        Class toType = Double.class;
        Object result = converter.convertStringToPrimitive(object, toType);
        assertEquals(1.0d, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToInvalidType_Itnh8_LmbC0_fid1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object object = "1";
        Class toType = String.class;
        Object result = converter.convertStringToPrimitive(object, Integer.class);
        assertNull(null);
    }
}