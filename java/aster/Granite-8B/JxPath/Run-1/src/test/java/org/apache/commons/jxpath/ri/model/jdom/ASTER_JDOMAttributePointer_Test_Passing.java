/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.TypeUtils;
import org.jdom.Attribute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMAttributePointer_Test_Passing {
    @Mock
    private QName qname;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private NodePointer nodePointer;
    private Attribute attr;
    private JDOMAttributePointer jdomattributepointer;
    private JDOMAttributePointer jdomattributepointer2;
    @Mock
    private TypeUtils typeUtils;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Attribute attribute;
    @Mock
    private DOMNodePointer jdomNodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_NullParent_QFtn0() {
        JDOMAttributePointer pointer = new JDOMAttributePointer(null, null);
        String result = pointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Arrange
        int expectedLength = 1;
        // Act
        int actualLength = jdomattributepointer.getLength();
        // Assert
        assertEquals(expectedLength, actualLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Act
        Object baseValue = jdomattributepointer.getBaseValue();
        // Assert
        assertEquals(attr, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() {
        JDOMAttributePointer jdomattributepointer = new JDOMAttributePointer(domNodePointer, attribute);
        // Arrange
        when(domNodePointer.isActual()).thenReturn(true);
        // Act
        boolean actual = jdomattributepointer.isActual();
        // Assert
        assertEquals(true, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Arrange
        when(parent.isLeaf()).thenReturn(true);
        // Act
        boolean result = jdomattributepointer.isLeaf();
        // Assert
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FoTt0_1() throws Exception {
        Attribute attr = Mockito.mock(Attribute.class);
        JDOMAttributePointer jdomattributepointer = new JDOMAttributePointer(Mockito.mock(DOMNodePointer.class), attr);
        JDOMAttributePointer jdomattributepointer2 = new JDOMAttributePointer(Mockito.mock(DOMNodePointer.class), Mockito.mock(Attribute.class));
        Attribute jattr = Mockito.mock(Attribute.class);
        assertEquals(jdomattributepointer, jdomattributepointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FoTt0_3() throws Exception {
        Attribute attr = Mockito.mock(Attribute.class);
        JDOMAttributePointer jdomattributepointer = new JDOMAttributePointer(Mockito.mock(DOMNodePointer.class), attr);
        JDOMAttributePointer jdomattributepointer2 = new JDOMAttributePointer(Mockito.mock(DOMNodePointer.class), Mockito.mock(Attribute.class));
        Attribute jattr = Mockito.mock(Attribute.class);
        assertNotEquals(jdomattributepointer, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_FoTt0_4() throws Exception {
        Attribute attr = Mockito.mock(Attribute.class);
        JDOMAttributePointer jdomattributepointer = new JDOMAttributePointer(Mockito.mock(DOMNodePointer.class), attr);
        JDOMAttributePointer jdomattributepointer2 = new JDOMAttributePointer(Mockito.mock(DOMNodePointer.class), Mockito.mock(Attribute.class));
        Attribute jattr = Mockito.mock(Attribute.class);
        assertNotEquals(jdomattributepointer, new JDOMAttributePointer(Mockito.mock(DOMNodePointer.class), jattr));
    }
}