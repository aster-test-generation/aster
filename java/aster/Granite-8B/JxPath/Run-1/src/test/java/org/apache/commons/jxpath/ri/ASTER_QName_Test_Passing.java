/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QName_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_PchC0() {
        QName qName1 = new QName("prefix", "localName");
        QName qName2 = qName1;
        boolean result = qName1.equals(qName2);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_xFEb1() {
        QName qName1 = new QName("prefix", "localName");
        QName qName2 = new QName("prefix", "localName");
        boolean result = qName1.equals(qName2);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_nrVD2() {
        QName qName = new QName("prefix", "localName");
        boolean result = qName.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_QualifiedName_MMvz0() {
        QName qName = new QName("prefix", "localName");
        String prefix = qName.getPrefix();
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefix_QualifiedNameOnly_BgMD2() {
        QName qName = new QName("qualifiedName");
        String prefix = qName.getPrefix();
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithQualifiedName_mHGJ0() {
        QName qName = new QName("qualifiedName");
        String result = qName.toString();
        assert result.equals("qualifiedName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithPrefixAndLocalName_gJVU1() {
        QName qName = new QName("prefix", "localName");
        String result = qName.toString();
        assert result.equals("prefix:localName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithQualifiedName_RAju0_XTxZ0() {
        QName qName = new QName("qualifiedName");
        String result = qName.getName();
        org.junit.Assert.assertEquals("qualifiedName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNameWithPrefixAndLocalName_VGnG1_XRPb0_1() {
        QName qName = new QName("prefix", "localName");
        String result = qName.toString();
        org.junit.Assert.assertEquals("prefix:localName", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_QualifiedName_PoJV0_xhSr1() {
        QName qName = new QName("qualifiedName");
        int result = qName.hashCode();
        org.junit.Assert.assertEquals(qName.hashCode(), qName.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_PrefixLocalName_yEnX1_NsAz1() {
        QName qName = new QName("prefix", "localName");
        int result = qName.hashCode();
        org.junit.Assert.assertEquals(result, result);
    }
}