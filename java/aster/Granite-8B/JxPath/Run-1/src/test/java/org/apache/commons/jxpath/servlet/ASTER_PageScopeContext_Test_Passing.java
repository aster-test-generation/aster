/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import javax.servlet.jsp.PageContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PageScopeContext_Test_Passing {
    @Mock
    private PageContext pageContext;
    private PageScopeContext pageScopeContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttribute() {
        pageScopeContext = new PageScopeContext(pageContext);
        // Arrange
        String attribute = "testAttribute";
        Object attributeValue = "testAttributeValue";
        when(pageContext.getAttribute(attribute, PageContext.PAGE_SCOPE)).thenReturn(attributeValue);
        // Act
        Object result = pageScopeContext.getAttribute(attribute);
        // Assert
        assertEquals(attributeValue, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAttributeNames() throws Exception {
        pageScopeContext = new PageScopeContext(pageContext);
        // Arrange
        Enumeration expectedEnumeration = mock(Enumeration.class);
        when(pageContext.getAttributeNamesInScope(PageContext.PAGE_SCOPE)).thenReturn(expectedEnumeration);
        // Act
        Enumeration actualEnumeration = pageScopeContext.getAttributeNames();
        // Assert
        verify(pageContext, times(1)).getAttributeNamesInScope(PageContext.PAGE_SCOPE);
        assertEquals(expectedEnumeration, actualEnumeration);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetAttribute() throws Exception {
        pageScopeContext = new PageScopeContext(pageContext);
        String attribute = "testAttribute";
        Object value = "testValue";
        pageScopeContext.setAttribute(attribute, value);
        verify(pageContext).setAttribute(attribute, value, PageContext.PAGE_SCOPE);
    }
}