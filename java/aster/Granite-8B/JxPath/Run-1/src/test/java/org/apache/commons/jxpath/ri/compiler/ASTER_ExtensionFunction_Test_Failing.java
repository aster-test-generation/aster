/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExtensionFunction_Test_Failing {
    private QName functionName;
    private EvalContext evalContext;
    private Expression[] args;
    private ExtensionFunction extensionFunction;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_kFmQ0() throws Exception {
        functionName = new QName("functionName");
        args = new Expression[1];
        args[0] = mock(Expression.class);
        evalContext = mock(EvalContext.class);
        extensionFunction = new ExtensionFunction(functionName, args);
        Object[] parameters = new Object[1];
        when(args[0].compute(evalContext)).thenReturn("parameter");
        Function function = mock(Function.class);
        when(evalContext.getRootContext().getFunction(functionName, parameters)).thenReturn(function);
        Object result = extensionFunction.compute(evalContext);
        verify(function, times(1)).invoke(evalContext, parameters);
        assertEquals("result", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithNoFunctionNameAndNoArgs_xXNf3() {
        QName functionName = new QName("", "");
        ExtensionFunction extensionFunction = new ExtensionFunction(functionName, null);
        assertEquals("()", extensionFunction.toString());
    }
}