/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TypeUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_kVTP0() {
        TypeUtils typeUtils = new TypeUtils();
        assertTrue(typeUtils.canConvert("Hello", String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanNotConvert_gKrA1() {
        TypeUtils typeUtils = new TypeUtils();
        assertTrue(typeUtils.canConvert(new Integer(1), String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetTypeConverter_PUAq0() {
        TypeConverter typeConverter = TypeUtils.getTypeConverter();
        assertNotNull(typeConverter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_rvch1() {
        Object object = new Integer(1);
        Object result = TypeUtils.convert(object, Integer.class);
        assertEquals(object, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrapPrimitiveNonPrimitive_dWAy1() {
        Class nonPrimitiveClass = String.class;
        Class result = TypeUtils.wrapPrimitive(nonPrimitiveClass);
        Assertions.assertEquals(nonPrimitiveClass, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrapPrimitivePrimitive_FCSL0_nvAm0() {
        Class primitiveClass = int.class;
        Class result = TypeUtils.wrapPrimitive(primitiveClass);
        Assertions.assertEquals(Integer.class, result);
    }
}