/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Failing {
    @Mock
    private JXPathContextReferenceImpl jxpathContext;
    @Mock
    private JXPathContext jxpathContext1;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private QName qName;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private DOMNodePointer dOMNodePointer;
    @Mock
    private JXPathContext jxpathContextObject;
    @Mock
    private DOMNodePointer pointer;
    private RootContext rootcontext;
    @Mock
    private EvalContext evalContext;
    @Mock
    private Locale locale;
    @Mock
    private QName name;
    @Mock
    private JXPathContextReferenceImpl parentContext;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private QName variableName;
    @Mock
    private RootContext rootContext;
    @Mock
    private Function function;
    private static int MAX_REGISTER = 4;
    private int availableRegister = 0;
    private Object[] registers;
    @Mock
    private JXPathContext jxpathContextReference;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private JXPathContextReferenceImpl jxpathContextReferenceImpl;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Initialize the mocks as needed
        // Arrange
        RootContext rootcontext = new RootContext(jxpathContext, dOMNodePointer);
        int position = 1;
        // Act
        boolean result = rootcontext.setPosition(position);
        // Assert
        Mockito.verify(rootcontext, Mockito.times(1)).setPosition(position);
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetConstantContext_1() throws Exception {
        rootcontext = new RootContext(jxpathContext, pointer);
        // Test when constant is NodeSet
        EvalContext expected = new NodeSetContext(new RootContext(jxpathContext, null), nodeSet);
        // Test when constant is NodePointer
        NodePointer nodePointer = Mockito.mock(NodePointer.class);
        EvalContext expected2 = new InitialContext(new RootContext(jxpathContext, nodePointer));
        // Test when constant is not NodeSet or NodePointer
        Object constant = new Object();
        EvalContext expected3 = new InitialContext(new RootContext(jxpathContext, NodePointer.newNodePointer(new QName(null, ""), constant, null)));
        assertEquals(expected, rootcontext.getConstantContext(nodeSet));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetConstantContext_2() throws Exception {
        rootcontext = new RootContext(jxpathContext, pointer);
        // Test when constant is NodeSet
        EvalContext expected = new NodeSetContext(new RootContext(jxpathContext, null), nodeSet);
        // Test when constant is NodePointer
        NodePointer nodePointer = Mockito.mock(NodePointer.class);
        EvalContext expected2 = new InitialContext(new RootContext(jxpathContext, nodePointer));
        // Test when constant is not NodeSet or NodePointer
        Object constant = new Object();
        EvalContext expected3 = new InitialContext(new RootContext(jxpathContext, NodePointer.newNodePointer(new QName(null, ""), constant, null)));
        assertEquals(expected2, rootcontext.getConstantContext(nodePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetConstantContext_3() throws Exception {
        rootcontext = new RootContext(jxpathContext, pointer);
        // Test when constant is NodeSet
        EvalContext expected = new NodeSetContext(new RootContext(jxpathContext, null), nodeSet);
        // Test when constant is NodePointer
        NodePointer nodePointer = Mockito.mock(NodePointer.class);
        EvalContext expected2 = new InitialContext(new RootContext(jxpathContext, nodePointer));
        // Test when constant is not NodeSet or NodePointer
        Object constant = new Object();
        EvalContext expected3 = new InitialContext(new RootContext(jxpathContext, NodePointer.newNodePointer(new QName(null, ""), constant, null)));
        assertEquals(expected3, rootcontext.getConstantContext(constant));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_1() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = new Object();
        }
        Mockito.when(rootcontext.getRegisteredValue(Mockito.anyInt())).thenReturn(registers[0]);
        // Test with valid id
        // Test with id greater than MAX_REGISTER
        // Test with id equal to -1
        // Test with id equal to 0 and return value is not the same as the first registered value
        Mockito.when(rootcontext.getRegisteredValue(Mockito.anyInt())).thenReturn(new Object());
        assertEquals(registers[0], rootcontext.getRegisteredValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_2() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = new Object();
        }
        Mockito.when(rootcontext.getRegisteredValue(Mockito.anyInt())).thenReturn(registers[0]);
        // Test with valid id
        // Test with id greater than MAX_REGISTER
        // Test with id equal to -1
        // Test with id equal to 0 and return value is not the same as the first registered value
        Mockito.when(rootcontext.getRegisteredValue(Mockito.anyInt())).thenReturn(new Object());
        assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(MAX_REGISTER + 1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_3() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = new Object();
        }
        Mockito.when(rootcontext.getRegisteredValue(Mockito.anyInt())).thenReturn(registers[0]);
        // Test with valid id
        // Test with id greater than MAX_REGISTER
        // Test with id equal to -1
        // Test with id equal to 0 and return value is not the same as the first registered value
        Mockito.when(rootcontext.getRegisteredValue(Mockito.anyInt())).thenReturn(new Object());
        assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(-1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_4() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = new Object();
        }
        Mockito.when(rootcontext.getRegisteredValue(Mockito.anyInt())).thenReturn(registers[0]);
        // Test with valid id
        // Test with id greater than MAX_REGISTER
        // Test with id equal to -1
        // Test with id equal to 0 and return value is not the same as the first registered value
        Mockito.when(rootcontext.getRegisteredValue(Mockito.anyInt())).thenReturn(new Object());
        assertEquals(new Object(), rootcontext.getRegisteredValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_WReu0() {
        NodePointer pointer = Mockito.mock(NodePointer.class);
        RootContext rootContext = new RootContext(null, pointer);
        Object result = rootContext.getValue();
        Mockito.verify(pointer).getValue();
        Assertions.assertEquals(pointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetVariableContext_TFKz0() throws Exception {
        rootcontext = new RootContext(jxpathContext, jxpathContext.getVariablePointer(variableName));
        QName qname = new QName("variableName");
        VariablePointer variablePointer = new VariablePointer(qname);
        when(jxpathContext.getVariablePointer(variableName)).thenReturn(variablePointer);
        EvalContext actual = rootcontext.getVariableContext(variableName);
        assertEquals(evalContext, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetConstantContext() throws Exception {
        rootcontext = new RootContext(jxpathContext, pointer);
        // Test when constant is NodeSet
        EvalContext expected = new NodeSetContext(new RootContext(jxpathContext, null), nodeSet);
        assertEquals(expected, rootcontext.getConstantContext(nodeSet));
        // Test when constant is NodePointer
        NodePointer nodePointer = Mockito.mock(NodePointer.class);
        EvalContext expected2 = new InitialContext(new RootContext(jxpathContext, nodePointer));
        assertEquals(expected2, rootcontext.getConstantContext(nodePointer));
        // Test when constant is not NodeSet or NodePointer
        Object constant = new Object();
        EvalContext expected3 = new InitialContext(new RootContext(jxpathContext, NodePointer.newNodePointer(new QName(null, ""), constant, null)));
        assertEquals(expected3, rootcontext.getConstantContext(constant));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue() throws Exception {
        registers = new Object[MAX_REGISTER];
        for (int i = 0;i < MAX_REGISTER;i++) {
            registers[i] = new Object();
        }
        Mockito.when(rootcontext.getRegisteredValue(Mockito.anyInt())).thenReturn(registers[0]);
        // Test with valid id
        assertEquals(registers[0], rootcontext.getRegisteredValue(0));
        // Test with id greater than MAX_REGISTER
        assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(MAX_REGISTER + 1));
        // Test with id equal to -1
        assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(-1));
        // Test with id equal to 0 and return value is not the same as the first registered value
        Mockito.when(rootcontext.getRegisteredValue(Mockito.anyInt())).thenReturn(new Object());
        assertEquals(new Object(), rootcontext.getRegisteredValue(0));
    }
}