/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Passing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private Element element;
    @Mock
    private Attribute attribute;
    @Mock
    private List list;
    @Mock
    private Object node1;
    @Mock
    private Object node2;
    private JDOMNodePointer jdomnodepointer;
    private Object node;
    private NodeTest nodeTest;
    private JXPathContext jxpathcontext;
    private AbstractFactory abstractFactory;
    private JDOMAttributeIterator attributeIterator;
    @Mock
    private ProcessingInstruction processingInstruction;
    @Mock
    private NodePointer startWith;
    @Mock
    private QName qName;
    @Mock
    private DOMNodePointer dOMNodePointer;
    @Mock
    private Locale locale;
    @Mock
    private JDOMNamespaceIterator jdomNamespaceIterator;
    @Mock
    private Document document;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private NamespaceResolver namespaceResolver;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodeIterator nodeIteratorMock;
    @Mock
    private NodePointer nodePointerMock;
    private Element parent;
    @Mock
    private JDOMNodePointer jdomnodepointerParent;
    @Mock
    private Namespace namespace;
    private String id;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueText_qlfr0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue("New Text");
        assertEquals("New Text", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextWithId_xoMX3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US, "id");
        jdn.setValue("New Text");
        assertEquals("New Text", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithNullContext_tShs2() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        QName name = new QName("test", "test");
        try {
            jdn.createChild(null, name, 0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        node = new Object();
        jdomnodepointer = Mockito.mock(JDOMNodePointer.class);
        Mockito.when(jdomnodepointer.getImmediateNode()).thenReturn(node);
        assertEquals(node, jdomnodepointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        node = new Object(); // replace with a real object
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        int expectedHashCode = node.hashCode();
        int actualHashCode = jdomnodepointer.hashCode();
        assertEquals(expectedHashCode, actualHashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_ppSK0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        QName qname = new QName("prefix", "localName");
        NodeIterator result = jdn.attributeIterator(qname);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator2_JhPy1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US, "id");
        QName qname = new QName("prefix", "localName");
        NodeIterator result = jdn.attributeIterator(qname);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator4_rwko3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        QName qname = new QName("qualifiedName");
        NodeIterator result = jdn.attributeIterator(qname);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_XIZv0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        String result = jdn.getNamespaceURI();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_Element() throws Exception {
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Given
        when(element.getNamespacePrefix()).thenReturn("prefix");
        // When
        String prefix = JDOMNodePointer.getPrefix(element);
        // Then
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_Attribute() throws Exception {
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Given
        when(attribute.getNamespacePrefix()).thenReturn("prefix");
        // When
        String prefix = JDOMNodePointer.getPrefix(attribute);
        // Then
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixOther_SYhk4() {
        String prefix = JDOMNodePointer.getPrefix("other");
        assert prefix == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixOtherNull_hTdV5() {
        String prefix = JDOMNodePointer.getPrefix(null);
        assert prefix == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixOtherEmpty_RDve6() {
        String prefix = JDOMNodePointer.getPrefix("");
        assert prefix == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_JvZl0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        NodeIterator result = jdn.namespaceIterator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_Default() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Act
        boolean result = jdomnodepointer.isLeaf();
        // Assert
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForTextNode_FrKJ2() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("root"), Locale.US);
        boolean result = jdn.isLeaf();
        assert (true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Test equals with same object
        // Test equals with different object
        JDOMNodePointer jdomnodepointer2 = new JDOMNodePointer(node, Locale.US);
        // Test equals with null
        // Test equals with different node
        JDOMNodePointer jdomnodepointer3 = new JDOMNodePointer(new Object(), Locale.US);
        assertEquals(jdomnodepointer, jdomnodepointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Test equals with same object
        // Test equals with different object
        JDOMNodePointer jdomnodepointer2 = new JDOMNodePointer(node, Locale.US);
        // Test equals with null
        // Test equals with different node
        JDOMNodePointer jdomnodepointer3 = new JDOMNodePointer(new Object(), Locale.US);
        assertNotEquals(null, jdomnodepointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Test equals with same object
        // Test equals with different object
        JDOMNodePointer jdomnodepointer2 = new JDOMNodePointer(node, Locale.US);
        // Test equals with null
        // Test equals with different node
        JDOMNodePointer jdomnodepointer3 = new JDOMNodePointer(new Object(), Locale.US);
        assertNotEquals(jdomnodepointer, jdomnodepointer3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_DPZL0() {
        JDOMNodePointer obj = new JDOMNodePointer(new Object(), Locale.US);
        boolean result = obj.equals(obj);
        assert(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentObject_zoli1() {
        JDOMNodePointer obj1 = new JDOMNodePointer(new Object(), Locale.US);
        JDOMNodePointer obj2 = new JDOMNodePointer(new Object(), Locale.US);
        boolean result = obj1.equals(obj2);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_OghI2() {
        JDOMNodePointer obj = new JDOMNodePointer(new Object(), Locale.US);
        boolean result = obj.equals(null);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_QsvK3() {
        JDOMNodePointer obj = new JDOMNodePointer(new Object(), Locale.US);
        Object obj2 = new QName("prefix", "localName");
        boolean result = obj.equals(obj2);
        assert(!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Element_yNVE0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        Object result = jdn.getValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Comment_bjVt1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Comment("comment"), Locale.US);
        Object result = jdn.getValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_Text_OWXw2() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("text"), Locale.US);
        Object result = jdn.getValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ProcessingInstruction_tsjn3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new ProcessingInstruction("pi", "data"), Locale.US);
        Object result = jdn.getValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_dSTl0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), new Locale("en", "US"));
        NodePointer np = jdn.namespacePointer("prefix");
        assertEquals(JDOMNamespacePointer.class, np.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_Element() throws Exception {
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        String localName = JDOMNodePointer.getLocalName(node);
        assertNull(localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_Attribute() throws Exception {
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        node = attribute;
        String localName = JDOMNodePointer.getLocalName(node);
        assertNull(localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_Null() throws Exception {
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        node = null;
        String localName = JDOMNodePointer.getLocalName(node);
        assertNull(localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameElement_UUVT0() {
        Element element = new Element("test");
        assertEquals("test", JDOMNodePointer.getLocalName(element));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameNull_JgtY2() {
        Object node = null;
        assertEquals(null, JDOMNodePointer.getLocalName(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_IdNotNull_RHYj0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US, "id");
        String result = jdn.asPath();
        assertEquals("id('id')", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_IdNull_Gmxm1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        String result = jdn.asPath();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_xml() throws Exception {
        node = document;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Arrange
        when(document.getRootElement()).thenReturn(element);
        when(element.getNamespace("xml")).thenReturn(namespace);
        when(namespace.getURI()).thenReturn("http://www.w3.org/XML/1998/namespace");
        // Act
        String result = jdomnodepointer.getNamespaceURI("xml");
        // Assert
        assertEquals("http://www.w3.org/XML/1998/namespace", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_non_xml() throws Exception {
        node = document;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Arrange
        when(document.getRootElement()).thenReturn(element);
        when(element.getNamespace("non-xml")).thenReturn(null);
        // Act
        String result = jdomnodepointer.getNamespaceURI("non-xml");
        // Assert
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_xmlPrefix_OWRk0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        String result = jdn.getNamespaceURI("xml");
        assertEquals(Namespace.XML_NAMESPACE.getURI(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_nonXmlPrefixNull_ioKC2() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        String result = jdn.getNamespaceURI("test");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        node = new Object();
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Act
        Object baseValue = jdomnodepointer.getBaseValue();
        // Assert
        assertEquals(node, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_ElementWithAttribute_uVpP0() {
        Element e = new Element("root", "http://example.com");
        e.setAttribute("attr", "value");
        String attr = JDOMNodePointer.findEnclosingAttribute(e, "attr", Namespace.getNamespace("http://example.com"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_ElementWithoutAttribute_NCMV1() {
        Element e = new Element("root", "http://example.com");
        String attr = JDOMNodePointer.findEnclosingAttribute(e, "attr", Namespace.getNamespace("http://example.com"));
        Assertions.assertNull(attr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_TextNode_rfsQ2() {
        Text text = new Text("Hello");
        String attr = JDOMNodePointer.findEnclosingAttribute(text, "attr", Namespace.getNamespace("http://example.com"));
        Assertions.assertNull(attr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_NullNode_yABp3() {
        String attr = JDOMNodePointer.findEnclosingAttribute(null, "attr", Namespace.getNamespace("http://example.com"));
        Assertions.assertNull(attr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_ElementWithNoMatchingAttribute_EWmY4() {
        Element e = new Element("root", "http://example.com");
        e.setAttribute("otherAttr", "value");
        String attr = JDOMNodePointer.findEnclosingAttribute(e, "attr", Namespace.getNamespace("http://example.com"));
        Assertions.assertNull(attr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolverNotNull_ybQT1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        jdn.getNamespaceResolver();
        NamespaceResolver resolver = jdn.getNamespaceResolver();
        Assertions.assertNotNull(resolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersSameTypeDifferentValues_nOzK14_MDCa0() {
        JDOMNodePointer pointer1 = new JDOMNodePointer(new Object(), Locale.US);
        JDOMNodePointer pointer2 = new JDOMNodePointer(new Object(), Locale.US);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNode_aeYe0_CsgO0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        boolean result = jdn.testNode(null);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullNode_YEQL3_MgYq0() {
        JDOMNodePointer jdn = new JDOMNodePointer(null, Locale.US, "");
        try {
            jdn.getName();
            assert true;
        } catch (NullPointerException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ElementWithNullNode_xhSV11_FSaA0() {
        JDOMNodePointer jdn = new JDOMNodePointer(null, Locale.US, null);
        Object result = jdn.getValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguageNull_hqdc0_blWv0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new DOMNodePointer(new VariablePointer(new QName("")), null), new Locale("en"), "id");
        boolean result = jdn.isLanguage("en");
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameAttribute_vNrn1_wiQZ0() {
        QName attribute = new QName("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNodeWithNamespace_LUDD3_xCqn0() {
        Element jdn = new Element("namespace", "node");
        String result = new JDOMNodePointer(jdn, Locale.US).asPath();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ProcessingInstructionWithParent_XYVS10_Vhng0() {
        JDOMNodePointer parent = new JDOMNodePointer(new Object(), Locale.US);
        JDOMNodePointer jdn = new JDOMNodePointer(parent, new ProcessingInstruction("target", "content"));
        String result = jdn.asPath();
        assertEquals(parent.asPath() + "/processing-instruction('target')[1]", result);
    }
}