/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPropertyPointer_Test_Passing {
    private String propertyName = "*";
    @Mock
    private DOMNodePointer parent;
    @Mock
    private PropertyOwnerPointer propertyOwnerPointer;
    @Mock
    private PropertyPointer propertyPointer;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private QName qName;
    @Mock
    private NullPropertyPointer nullpropertypointer;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private QName qname;
    @Mock
    private DOMNodePointer immediateParentPointer;
    @Mock
    private NullPropertyPointer nullPropertyPointer;
    @Mock
    private DOMNodePointer domNodePointer;
    private boolean byNameAttribute = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyName() throws Exception {
        nullpropertypointer = new NullPropertyPointer(null);
        // Act
        String result = nullpropertypointer.getPropertyName();
        // Assert
        assertEquals(propertyName, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() {
        NullPropertyPointer nullpropertypointer = new NullPropertyPointer(parent);
        when(parent.getIndex()).thenReturn(1);
        this.nullpropertypointer = nullpropertypointer;
        boolean result = nullpropertypointer.isCollection();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        MockitoAnnotations.initMocks(this);
        nullpropertypointer = new NullPropertyPointer(parent);
        // Act
        Object immediateNode = nullpropertypointer.getImmediateNode();
        // Assert
        Assertions.assertNull(immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_TvWJ0() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        Object immediateNode = nullPropertyPointer.getImmediateNode();
        assertEquals(null, immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyName() {
        nullpropertypointer = new NullPropertyPointer(null);
        String newPropertyName = "newProperty";
        nullpropertypointer.setPropertyName(newPropertyName);
        assertEquals(newPropertyName, nullpropertypointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() {
        NullPropertyPointer nullpropertypointer = new NullPropertyPointer(parent);
        // Arrange
        boolean expected = true;
        // Act
        boolean actual = nullpropertypointer.isContainer();
        // Assert
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() {
        MockitoAnnotations.initMocks(this);
        nullpropertypointer = new NullPropertyPointer(parent);
        QName expected = new QName(propertyName);
        QName actual = nullpropertypointer.getName();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() {
        when(immediateParentPointer.asPath()).thenReturn("parentPath");
        nullpropertypointer = new NullPropertyPointer(immediateParentPointer);
        byNameAttribute = true;
        String expectedPath = "parentPath/*";
        String actualPath = nullpropertypointer.asPath();
        assertEquals(expectedPath, actualPath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() {
        nullpropertypointer = new NullPropertyPointer(parent);
        // Arrange
        int expectedLength = 0;
        // Act
        int actualLength = nullpropertypointer.getLength();
        // Assert
        assertEquals(expectedLength, actualLength);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames() {
        nullpropertypointer = new NullPropertyPointer(parent);
        String[] expected = new String[0];
        String[] actual = nullpropertypointer.getPropertyNames();
        assertArrayEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() {
        nullpropertypointer = new NullPropertyPointer(domNodePointer);
        // Arrange
        Mockito.when(domNodePointer.getBaseValue()).thenReturn("Mocked Base Value");
        // Act
        Object baseValue = nullpropertypointer.getBaseValue();
        // Assert
    assertNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_KgNI0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        Object result = nullPropertyPointer.getBaseValue();
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisActual() throws Exception {
        MockitoAnnotations.initMocks(this);
        nullpropertypointer = new NullPropertyPointer(parent);
        // Arrange
        // Act
        boolean result = nullpropertypointer.isActual();
        // Assert
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf() throws Exception {
        nullpropertypointer = new NullPropertyPointer(parent);
        // Arrange
        boolean expected = true;
        // Act
        boolean actual = nullpropertypointer.isLeaf();
        // Assert
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_UHch0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        boolean result = nullPropertyPointer.isLeaf();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualProperty() {
        nullpropertypointer = new NullPropertyPointer(parent);
        // Arrange
        boolean expected = false;
        // Act
        boolean actual = nullpropertypointer.isActualProperty();
        // Assert
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualProperty_cLQg0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        boolean result = nullPropertyPointer.isActualProperty();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount() throws Exception {
        MockitoAnnotations.initMocks(this);
        nullpropertypointer = new NullPropertyPointer(parent);
        int propertyCount = nullpropertypointer.getPropertyCount();
        Assertions.assertEquals(0, propertyCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueNonDynamicProperty_dOyo1_NaQk0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(variablePointer);
        int propertyCount = nullPropertyPointer.getPropertyCount();
        assertEquals(0, propertyCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_T_uyMv0() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(parent.createPath(jXPathContext)).thenReturn(parent);
        when(parent.createPath(jXPathContext)).thenReturn(parent);
        NodePointer result = nullpropertypointer.createPath(jXPathContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithNullParent_whtT2_eVRk0() {
        JXPathContext context = JXPathContext.newContext(null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        NodePointer newParent = null;
        Object value = "testValue";
        try {
            nullPropertyPointer.createPath(context, value);
            Assertions.fail("Expected exception");
        } catch (Exception e) {
            Assertions.assertTrue(e instanceof Exception);
        }
    }
}