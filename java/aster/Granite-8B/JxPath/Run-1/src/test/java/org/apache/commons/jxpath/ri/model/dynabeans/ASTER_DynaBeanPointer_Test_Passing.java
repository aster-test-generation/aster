/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Passing {
    @Mock
    private QName name;
    @Mock
    private DynaBean dynaBean;
    @Mock
    private DynaBeanPointer parent;
    private DynaBeanPointer dynabeanpointer;
    @Mock
    private QName mockQName;
    @Mock
    private Locale locale;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeNotNullName_JTYL1() {
        QName name = new QName("test");
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(name, null, null);
        int result = dynaBeanPointer.hashCode();
        Assertions.assertEquals(name.hashCode(), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() {
        name = mockQName;
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        // Act
        QName result = dynabeanpointer.getName();
        // Assert
        assertEquals(name, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeNullName_Xbbe0_BWps1() {
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(null, new QName("", ""), null);
        int result = dynaBeanPointer.hashCode();
        Assertions.assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_facv0() {
        DynaBean dynaBean = mock(DynaBean.class);
        QName qName = new QName("name");
        Locale locale = Locale.US;
        DynaBeanPointer dynabeanpointer = new DynaBeanPointer(qName, dynaBean, locale);
        PropertyPointer propertyPointer = dynabeanpointer.getPropertyPointer();
        assertEquals(DynaBeanPropertyPointer.class, propertyPointer.getClass());
        verify(dynaBean).getClass();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_zAZb0_EnTl0() {
        QName name = new QName("name");
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(name, dynaBean, null);
        assertEquals(dynaBean, dynaBeanPointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_NbiH0() throws Exception {
        DynaBean dynaBean = mock(DynaBean.class);
        DynaBeanPointer dynabeanpointer = new DynaBeanPointer(new QName("name"), dynaBean, Locale.US);
        boolean result = dynabeanpointer.isLeaf();
        Assertions.assertFalse(result);
    }
}