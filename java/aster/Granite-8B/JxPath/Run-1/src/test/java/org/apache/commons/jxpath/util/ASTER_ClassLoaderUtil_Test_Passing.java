/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ClassLoaderUtil_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithContextClassLoader_Lumk0() throws ClassNotFoundException {
        String className = "java.lang.String";
        boolean initialize = true;
        Class<?> clazz = ClassLoaderUtil.getClass(className, initialize);
        assertNotNull(clazz);
        assertEquals(String.class, clazz);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithCurrentClassLoader_kLIc1() throws ClassNotFoundException {
        String className = "java.lang.Integer";
        boolean initialize = false;
        Class<?> clazz = ClassLoaderUtil.getClass(className, initialize);
        assertNotNull(clazz);
        assertEquals(Integer.class, clazz);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_lXGl1() throws ClassNotFoundException {
        ClassLoader classLoader = this.getClass().getClassLoader();
        Class<?> clazz = ClassLoaderUtil.getClass(classLoader, "java.lang.String");
        assertNotNull(clazz);
        assertEquals("java.lang.String", clazz.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassNonExistingClass_VbzJ4() {
        ClassLoader classLoader = this.getClass().getClassLoader();
        try {
            Class<?> clazz = ClassLoaderUtil.getClass(classLoader, "NonExistingClass");
            assertEquals(false, true);
        } catch (ClassNotFoundException e) {
            assertEquals(true, true);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_XKBV1() throws ClassNotFoundException {
        Class<?> clazz = ClassLoaderUtil.getClass("java.lang.String");
        assertNotNull(clazz);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithContextClassLoader_Lumk0_1() throws ClassNotFoundException {
        String className = "java.lang.String";
        boolean initialize = true;
        Class<?> clazz = ClassLoaderUtil.getClass(className, initialize);
        assertNotNull(clazz);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithContextClassLoader_Lumk0_2() throws ClassNotFoundException {
        String className = "java.lang.String";
        boolean initialize = true;
        Class<?> clazz = ClassLoaderUtil.getClass(className, initialize);
        assertEquals(String.class, clazz);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithCurrentClassLoader_kLIc1_1() throws ClassNotFoundException {
        String className = "java.lang.Integer";
        boolean initialize = false;
        Class<?> clazz = ClassLoaderUtil.getClass(className, initialize);
        assertNotNull(clazz);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClassWithCurrentClassLoader_kLIc1_2() throws ClassNotFoundException {
        String className = "java.lang.Integer";
        boolean initialize = false;
        Class<?> clazz = ClassLoaderUtil.getClass(className, initialize);
        assertEquals(Integer.class, clazz);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_lXGl1_1() throws ClassNotFoundException {
        ClassLoader classLoader = this.getClass().getClassLoader();
        Class<?> clazz = ClassLoaderUtil.getClass(classLoader, "java.lang.String");
        assertNotNull(clazz);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClass_lXGl1_2() throws ClassNotFoundException {
        ClassLoader classLoader = this.getClass().getClassLoader();
        Class<?> clazz = ClassLoaderUtil.getClass(classLoader, "java.lang.String");
        assertEquals("java.lang.String", clazz.getName());
    }
}