/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathServletContexts_Test_Passing {
    private static JXPathContextFactory factory;
    @Mock
    private ServletContext servletContext;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private JXPathContext parentContext;
    @Mock
    private HttpSession session;
    @Mock
    private HttpSessionAndServletContext handle;
    @Mock
    private KeywordVariables keywordVariables;
    private JXPathServletContexts jxpathservletcontexts;
    @Mock
    private PageContext pageContext;
    @Mock
    private ServletRequest servletRequest;
    @Mock
    private HttpSession httpSession;
    @Mock
    private HttpServletRequest httpServletRequest;
    @Mock
    private ServletRequestAndContext servletRequestAndContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRequestContext() throws Exception {
        factory = mock(JXPathContextFactory.class);
        jxpathservletcontexts = new JXPathServletContexts();
        when(factory.newContext(any(JXPathContext.class), any(ServletRequestAndContext.class))).thenReturn(jxpathContext);
        when(servletRequest.getAttribute(Constants.JXPATH_CONTEXT)).thenReturn(jxpathContext);
        when(servletRequestAndContext.getServletRequest()).thenReturn(servletRequest);
        when(servletRequestAndContext.getServletContext()).thenReturn(servletContext);
        when(httpServletRequest.getSession(false)).thenReturn(httpSession);
        when(httpSession.getAttribute(any(String.class))).thenReturn(jxpathContext);
        when(jxpathContext.getContextBean()).thenReturn(servletRequestAndContext);
        JXPathContext result = jxpathservletcontexts.getRequestContext(servletRequest, servletContext);
        assertEquals(jxpathContext, result);
    }
}