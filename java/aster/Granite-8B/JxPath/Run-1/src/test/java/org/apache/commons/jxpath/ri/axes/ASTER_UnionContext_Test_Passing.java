/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_UnionContext_Test_Passing {
    @Mock
    private EvalContext[] contexts;
    @Mock
    private EvalContext evalContext;
    @Mock
    private BasicNodeSet nodeSet;
    @Mock
    private Iterator iterator;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    private UnionContext unioncontext;
    @Mock
    private UnionContext superUnionContext;
    private EvalContext[] superContexts;
    private boolean prepared;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_PositionZero_tbrI2_sDPB0() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(null, null), null), new EvalContext[]{null});
        unionContext.setPosition(0);
        assertEquals(0, unionContext.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_PreparedFalse_PositionZero_tOyK4_MZUu0() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(null, null), null), new EvalContext[]{new EvalContext[]{null, null}[0]});
        unionContext.setPosition(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder_LduA0() {
        UnionContext unioncontext = new UnionContext(null, contexts);
        EvalContext[] superContexts = new EvalContext[1];
        superContexts[0] = new SelfContext(null, new NodeTypeTest(1));
        UnionContext superUnionContext = new UnionContext(null, superContexts);
        when(contexts.length).thenReturn(2);
        assertEquals(1, unioncontext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrderSingleContext_hiZS0() {
        unioncontext = new UnionContext(null, contexts);
        superContexts = new EvalContext[1];
        superContexts[0] = new SelfContext(null, new NodeTypeTest(0));
        superUnionContext = new UnionContext(null, superContexts);
        when(contexts.length).thenReturn(1);
        assertEquals(superUnionContext.getDocumentOrder(), unioncontext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrderWithSingleContext_mpNr1_Ohjv0() {
        UnionContext unionContext = new UnionContext(new NamespaceContext(new SelfContext(null, null), null), new EvalContext[1]);
        assertEquals(0, unionContext.getDocumentOrder());
    }
}