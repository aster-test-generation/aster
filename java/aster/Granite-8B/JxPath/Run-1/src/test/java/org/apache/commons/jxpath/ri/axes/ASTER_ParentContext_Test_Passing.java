/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Passing {
    @Mock
    private Object superObject;
    ParentContext parentcontext;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private SelfContext selfContext;
    @Mock
    private ParentContext parentContext;
    private boolean setStarted = false;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeTypeTest nodeTest;
    private NodePointer currentNodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() throws Exception {
        MockitoAnnotations.initMocks(this);
        parentContext = Mockito.mock(ParentContext.class);
        Mockito.when(parentContext.getDocumentOrder()).thenReturn(1);
        int result = parentContext.getDocumentOrder();
        Mockito.verify(parentContext).getDocumentOrder();
        Assertions.assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDocumentOrder_rcmB0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, nodeTest), nodeTest);
        ParentContext parentContext = new ParentContext(new NamespaceContext(null, nodeTest), nodeTest);
        int result = parentContext.getDocumentOrder();
        assert result == -1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentPosition_Dwlk0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTest), nodeTest), nodeTest), nodeTest);
        ParentContext parentContext = new ParentContext(new NamespaceContext(selfContext, nodeTest), nodeTest);
        assertEquals(1, parentContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_dEej0() {
        ParentContext parentContext = new ParentContext(null, null);
        NodePointer expectedNodePointer = null;
        NodePointer actualNodePointer = parentContext.getCurrentNodePointer();
        assertEquals(expectedNodePointer, actualNodePointer);
    }
}