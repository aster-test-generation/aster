/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ParseException_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage2_phQw1() {
        ParseException parseException = new ParseException();
        String result = parseException.getMessage();
        assertEquals("message", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage3_UPmv2() {
        ParseException parseException = new ParseException(new Token(), new int[][]{{1, 2}}, new String[]{"a", "b"});
        String result = parseException.getMessage();
        assertEquals("message", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage4_YLBS3() {
        ParseException parseException = new ParseException(new Token(), new int[][]{{1}}, new String[]{"a"});
        String result = parseException.getMessage();
        assertEquals("message", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage5_DDiu4() {
        ParseException parseException = new ParseException(new Token(), new int[][]{{1, 2, 3}}, new String[]{"a", "b", "c"});
        String result = parseException.getMessage();
        assertEquals("message", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage6_krbn5() {
        ParseException parseException = new ParseException(new Token(), new int[][]{{1, 2, 3, 4}}, new String[]{"a", "b", "c", "d"});
        String result = parseException.getMessage();
        assertEquals("message", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage9_sAbH8() {
        ParseException parseException = new ParseException(new Token(), new int[][]{{1, 2, 3, 4, 5}}, new String[]{"a", "b", "c", "d", "e"});
        String result = parseException.getMessage();
        assertEquals("message", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage10_EumF9() {
        ParseException parseException = new ParseException(new Token(), new int[][]{{1, 2, 3, 4, 5, 6}}, new String[]{"a", "b", "c", "d", "e", "f"});
        String result = parseException.getMessage();
        assertEquals("message", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesNull_OZmD0() {
        ParseException parser = new ParseException();
        String result = parser.add_escapes(null);
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesSpecialCharacters_qNVD3() {
        ParseException parser = new ParseException();
        String result = parser.add_escapes("Hello\\nWorld");
        assertEquals("Hello\\nWorld", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddEscapesSpecialCharacters_qNVD3_fid1() {
        ParseException parser = new ParseException();
        String result = parser.add_escapes("Hello\nWorld");
        assertEquals("Hello\nWorld", result);
    }
}