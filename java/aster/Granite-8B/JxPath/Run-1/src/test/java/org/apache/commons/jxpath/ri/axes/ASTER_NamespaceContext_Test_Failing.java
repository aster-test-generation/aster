/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceContext_Test_Failing {
    @Mock
    SelfContext parentContext;
    @Mock
    NodeTypeTest nodeTest;
    NamespaceContext namespacecontext;
    private NodeIterator iterator;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    @Mock
    private SelfContext selfContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NodeNameTest nodeNameTest;
    @Mock
    private QName testName;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeIterator nodeIterator;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        namespacecontext = new NamespaceContext(parentContext, nodeTest);
        // arrange
        int position = 10;
        // act
        boolean result = namespacecontext.setPosition(position);
        // assert
        verify(parentContext, times(1)).setPosition(position);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCurrentNodePointer() throws Exception {
        currentNodePointer = mock(NodePointer.class);
        namespacecontext = new NamespaceContext(null, null);
        when(namespacecontext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NodePointer actualCurrentNodePointer = namespacecontext.getCurrentNodePointer();
        assertEquals(currentNodePointer, actualCurrentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_mbtp0() {
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1));
        NodePointer currentNodePointer = namespaceContext.getCurrentNodePointer();
        assertNotNull(currentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset_WeGF0_1() throws Exception {
        iterator = mock(NodeIterator.class);
        namespacecontext = new NamespaceContext(null, null);
        setStarted = false;
        namespacecontext.reset();
        verify(namespacecontext, times(1)).reset();
        assertEquals(setStarted, false);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset_WeGF0_2() throws Exception {
        iterator = mock(NodeIterator.class);
        namespacecontext = new NamespaceContext(null, null);
        setStarted = false;
        namespacecontext.reset();
        verify(namespacecontext, times(1)).reset();
        assertNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithNegativePosition_TqyK0_fid2() {
        NamespaceContext namespaceContext = new NamespaceContext(null, null);
        boolean result = namespaceContext.setPosition(-1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithPositivePosition_SaBu2_fid2() {
        NamespaceContext namespaceContext = new NamespaceContext(null, null);
        boolean result = namespaceContext.setPosition(1);
        assertTrue(result);
    }
}