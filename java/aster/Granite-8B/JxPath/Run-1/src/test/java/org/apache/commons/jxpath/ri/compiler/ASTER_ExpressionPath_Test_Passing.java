/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Passing {
    @Mock
    EvalContext evalContext;
    @Mock
    Constant expression;
    @Mock
    Expression[] predicates;
    @Mock
    Step[] steps;
    ExpressionPath expressionpath;
    private ExpressionPath expressionPath;
    @Mock
    private Constant constant;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringConstantExpression_vDyM0() {
        Constant constant = new Constant("test");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        String result = expressionPath.toString();
        assert result.equals("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringConstantNumberExpression_PzwX1() {
        Constant constant = new Constant(1);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        String result = expressionPath.toString();
        assert result.equals("1");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringConstantStringExpressionWithPredicates_SrLJ2() {
        Constant constant = new Constant("test");
        Expression[] predicates = new Expression[]{new Constant("predicate")};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        String result = expressionPath.toString();
        assert result.equals("(test)[predicate]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringConstantNumberExpressionWithPredicates_ZiBT3() {
        Constant constant = new Constant(1);
        Expression[] predicates = new Expression[]{new Constant(2)};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        String result = expressionPath.toString();
        assert result.equals("1[2]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPredicates_vPmC0() {
        Constant constant = new Constant("test");
        Expression[] predicates = new Expression[]{new Constant("test")};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        Expression[] result = expressionPath.getPredicates();
        assertSame(predicates, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentConstantTrue_YFGR0() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.computeContextDependent();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentConstantFalse_ebVM1() {
        Constant constant = new Constant(1);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.computeContextDependent();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentPredicateTrue_TYBp2() {
        Constant constant = new Constant("string");
        Expression predicate = new Constant("string");
        Expression[] predicates = new Expression[]{predicate};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.computeContextDependent();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentPredicateFalse_nwuM3() {
        Constant constant = new Constant("string");
        Expression predicate = new Constant(1);
        Expression[] predicates = new Expression[]{predicate};
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.computeContextDependent();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependentNoPredicate_UcTq4() {
        Constant constant = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        boolean result = expressionPath.computeContextDependent();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute() throws Exception {
        expressionPath = new ExpressionPath(expression, predicates, steps);
        // Arrange
        when(evalContext.getPosition()).thenReturn(0);
        when(evalContext.hasNext()).thenReturn(true);
        when(evalContext.nextNode()).thenReturn(true);
        // Act
        Object result = expressionPath.compute(evalContext);
        // Assert
        verify(evalContext, times(1)).getPosition();
        verify(evalContext, times(1)).hasNext();
        verify(evalContext, times(1)).nextNode();
        assertEquals(expression, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionConstantString_CsvA0() {
        Constant constant = new Constant("Hello");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertEquals(constant, expressionPath.getExpression());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExpressionConstantNumber_rsKD1() {
        Constant constant = new Constant(123);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertEquals(constant, expressionPath.getExpression());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPathConstantExpression_CnxS0() {
        Constant constant = new Constant("test");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertTrue(expressionPath.isSimpleExpressionPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPathNumberExpression_eaSo1() {
        Constant constant = new Constant(10);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(constant, predicates, steps);
        assertTrue(expressionPath.isSimpleExpressionPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValue_jQES0_izss0() {
        Constant constant = new Constant("test");
        NodeTypeTest nodeTypeTest = new NodeTypeTest(1);
        NamespaceContext namespaceContext = new NamespaceContext(new SelfContext(new NamespaceContext(null, nodeTypeTest), nodeTypeTest), nodeTypeTest);
        SelfContext selfContext = new SelfContext(namespaceContext, nodeTypeTest);
        ExpressionPath expressionPath = new ExpressionPath(constant, new Expression[0], new Step[0]);
        Object result = expressionPath.expressionPath(evalContext, true);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testexpressionPath_iLQU0() throws Exception {
        expressionpath = new ExpressionPath(constant, predicates, steps);
        when(expression.compute(evalContext)).thenReturn("value");
        when(evalContext.getSingleNodePointer()).thenReturn(Mockito.mock(NodePointer.class));
        Object result = expressionpath.expressionPath(evalContext, true);
        assertEquals("value", result);
    }
}