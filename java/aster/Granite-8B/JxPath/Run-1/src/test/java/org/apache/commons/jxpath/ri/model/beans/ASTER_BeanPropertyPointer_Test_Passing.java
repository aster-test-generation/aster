/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathBeanInfo;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPropertyPointer_Test_Passing {
    @Mock
    private PropertyDescriptor propertyDescriptor;
    @Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private QName qName;
    @Mock
    private VariablePointer variablePointer;
    private String propertyName;
    @Mock
    private BeanPropertyPointer beanPropertyPointer;
    @Mock
    private IndexedPropertyDescriptor indexedPropertyDescriptor;
    @Mock
    private ValueUtils valueUtils;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private JXPathBasicBeanInfo jxpathBasicBeanInfo;
    @Mock
    private DOMNodePointer dOMNodePointer;
    @Mock
    private JXPathBeanInfo beanInfo;
    @Mock
    private PropertyDescriptor[] propertyDescriptors;
    private transient String[] names;
    private Object value = UNINITIALIZED;
    private static final Object UNINITIALIZED = new Object();
    private Object baseValue = UNINITIALIZED;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyName() throws Exception {
        MockitoAnnotations.initMocks(this);
        beanPropertyPointer = new BeanPropertyPointer(null, null);
        when(propertyDescriptor.getName()).thenReturn("testProperty");
        assertEquals("testProperty", beanPropertyPointer.getPropertyName());
        verify(propertyDescriptor).getName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_bTwX0() {
        JXPathContext context = JXPathContext.newContext(null, null);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(new DOMNodePointer(null, Locale.US, null), new JXPathBasicBeanInfo(null, true));
        NodePointer result = beanPropertyPointer.createPath(context);
        Assertions.assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathNullContext_kMkt1() {
        JXPathContext context = null;
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(new DOMNodePointer(null, Locale.US, null), new JXPathBasicBeanInfo(null, true));
        NodePointer result = beanPropertyPointer.createPath(context);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_1() {
        names = new String[0];
        when(beanPropertyPointer.getPropertyDescriptors()).thenReturn(propertyDescriptors);
        PropertyDescriptor propertyDescriptor1 = mock(PropertyDescriptor.class);
        PropertyDescriptor propertyDescriptor2 = mock(PropertyDescriptor.class);
        when(propertyDescriptor1.getName()).thenReturn("property1");
        when(propertyDescriptor2.getName()).thenReturn("property2");
        when(beanPropertyPointer.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[]{propertyDescriptor1, propertyDescriptor2});
        String[] result = beanPropertyPointer.getPropertyNames();
        assertEquals(2, result.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_2() {
        names = new String[0];
        when(beanPropertyPointer.getPropertyDescriptors()).thenReturn(propertyDescriptors);
        PropertyDescriptor propertyDescriptor1 = mock(PropertyDescriptor.class);
        PropertyDescriptor propertyDescriptor2 = mock(PropertyDescriptor.class);
        when(propertyDescriptor1.getName()).thenReturn("property1");
        when(propertyDescriptor2.getName()).thenReturn("property2");
        when(beanPropertyPointer.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[]{propertyDescriptor1, propertyDescriptor2});
        String[] result = beanPropertyPointer.getPropertyNames();
        assertArrayEquals(new String[]{"property1", "property2"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount() throws Exception {
        when(jXPathBasicBeanInfo.isAtomic()).thenReturn(true);
        BeanPropertyPointer beanpropertypointer = new BeanPropertyPointer(null, jXPathBasicBeanInfo);
        assertEquals(0, beanpropertypointer.getPropertyCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer_jqMz0() {
        JXPathBasicBeanInfo jxpathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, true);
        DOMNodePointer domNodePointer = new DOMNodePointer(null, Locale.US, null);
        BeanPropertyPointer beanpropertypointer = new BeanPropertyPointer(domNodePointer, jxpathBasicBeanInfo);
        int propertyCount = beanpropertypointer.getPropertyCount();
        Assertions.assertEquals(0, propertyCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetIndex_qPch0() throws Exception {
        BeanPropertyPointer beanpropertypointer = Mockito.mock(BeanPropertyPointer.class);
        beanpropertypointer.getPropertyCount();
        Mockito.verify(beanpropertypointer).getPropertyCount();
        beanpropertypointer.getPropertyCount();
        Mockito.verify(beanpropertypointer).getPropertyCount();
        Mockito.verify(beanpropertypointer, Mockito.times(3)).getPropertyCount();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors_Zfcs0() {
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(null, new JXPathBasicBeanInfo(new Object().getClass(), false));
        when(beanInfo.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[0]);
        int result = beanPropertyPointer.getPropertyCount();
        assertEquals(0, result);
        verify(beanInfo).getPropertyDescriptors();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_JhRn0() throws Exception {
        JXPathBasicBeanInfo beanInfo = new JXPathBasicBeanInfo(null, true);
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, null);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(parent, beanInfo);
        int propertyCount = beanPropertyPointer.getPropertyCount();
        assertEquals(0, propertyCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames() {
        names = new String[0];
        when(beanPropertyPointer.getPropertyDescriptors()).thenReturn(propertyDescriptors);
        PropertyDescriptor propertyDescriptor1 = mock(PropertyDescriptor.class);
        PropertyDescriptor propertyDescriptor2 = mock(PropertyDescriptor.class);
        when(propertyDescriptor1.getName()).thenReturn("property1");
        when(propertyDescriptor2.getName()).thenReturn("property2");
        when(beanPropertyPointer.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[]{propertyDescriptor1, propertyDescriptor2});
        String[] result = beanPropertyPointer.getPropertyNames();
        assertEquals(2, result.length);
        assertArrayEquals(new String[]{"property1", "property2"}, result);
    }
}