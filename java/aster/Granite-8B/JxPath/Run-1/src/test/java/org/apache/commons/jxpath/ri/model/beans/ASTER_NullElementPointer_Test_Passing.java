/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullElementPointer_Test_Passing {
    @Mock
    private DOMNodePointer immediateParentPointer;
    @Mock
    private QName name;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private Locale locale;
    @Mock
    private DOMNodePointer parentPointer;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private VariablePointer variablePointer;
    @Mock
    private QName qName;
    NullElementPointer nullelementpointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        nullelementpointer = new NullElementPointer(immediateParentPointer, 1);
        // Arrange
        NullElementPointer other = new NullElementPointer(immediateParentPointer, 1);
        // Act
        boolean result = nullelementpointer.equals(other);
        // Assert
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_TlmI0() {
        QName name = new QName("prefix", "localName");
        DOMNodePointer parent = new DOMNodePointer(null, Locale.US, "id");
        NullElementPointer nullElementPointer = new NullElementPointer(parent, 0);
        NodePointer result = nullElementPointer.getValuePointer();
        assert result instanceof NullPointer;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 0);
        // Arrange
        // Act
        boolean result = nullelementpointer.isCollection();
        // Assert
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() {
        nullelementpointer = new NullElementPointer(parent, 0);
        // Arrange
        when(parent.isContainer()).thenReturn(true);
        // Act
        boolean result = nullelementpointer.isContainer();
        // Assert
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_fKOy0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
        boolean result = nullElementPointer.isContainer();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer() {
        nullelementpointer = new NullElementPointer(parent, 0);
        PropertyPointer propertyPointer = nullelementpointer.getPropertyPointer();
        Assertions.assertNotNull(propertyPointer);
        Assertions.assertTrue(propertyPointer instanceof NullPropertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWholeCollection_DZEq1() {
        NullElementPointer nullElementPointer = new NullElementPointer(null, NullElementPointer.WHOLE_COLLECTION);
        assertEquals("", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathIndex0_nMTy2() {
        NullElementPointer nullElementPointer = new NullElementPointer(null, 0);
        assertEquals("[1]", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathIndex1_LXbV3() {
        NullElementPointer nullElementPointer = new NullElementPointer(null, 1);
        assertEquals("[2]", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 0);
        // Act
        int length = nullelementpointer.getLength();
        // Assert
        assertEquals(0, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        MockitoAnnotations.initMocks(this);
        nullelementpointer = new NullElementPointer(parent, 0);
        // Act
        Object baseValue = nullelementpointer.getBaseValue();
        // Assert
        Assertions.assertNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_fOeB0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
        Object result = nullElementPointer.getBaseValue();
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_zIpQ0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
        boolean result = nullElementPointer.isLeaf();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_rKhD0_2() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        NullElementPointer nullElementPointer = new NullElementPointer(parent, 0);
        Object immediateNode = nullElementPointer.getImmediateNode();
        assertEquals(null, immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_1() {
        nullelementpointer = new NullElementPointer(parent, 0);
        PropertyPointer propertyPointer = nullelementpointer.getPropertyPointer();
        Assertions.assertNotNull(propertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_2() {
        nullelementpointer = new NullElementPointer(parent, 0);
        PropertyPointer propertyPointer = nullelementpointer.getPropertyPointer();
        Assertions.assertTrue(propertyPointer instanceof NullPropertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisLeaf_LNVP0() throws Exception {
        MockitoAnnotations.initMocks(this);
        NullElementPointer nullelementpointer = new NullElementPointer(null, 0);
        boolean result = nullelementpointer.isLeaf();
        Assertions.assertTrue(result);
    }
}