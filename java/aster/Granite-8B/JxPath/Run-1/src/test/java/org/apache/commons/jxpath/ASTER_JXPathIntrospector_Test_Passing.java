/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathIntrospector_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfoWithJXPathBeanInfo_dykd0() {
        JXPathIntrospector.getBeanInfo(JXPathBeanInfo.class);
        assert true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfoWithoutJXPathBeanInfo_akvX1() {
        JXPathIntrospector.getBeanInfo(String.class);
        assert true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfoWithDynamicBeanInfo_ILaI2() {
        JXPathIntrospector.getBeanInfo(Object.class);
        assert true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfoWithoutInformant_MGsb3() {
        JXPathIntrospector.getBeanInfo(Integer.class);
        assert true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfoClass_ktwu1() {
        JXPathIntrospector introspector = new JXPathIntrospector();
        Class beanClass = String.class;
        JXPathBeanInfo beanInfo = introspector.getBeanInfo(beanClass);
        assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfoWithClass_Ynxv0_mHtv0() {
        JXPathIntrospector.registerAtomicClass(Class.class);
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(Class.class);
        assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfoWithJXPathBeanInfo_yGdl1_sEEA0() {
        JXPathIntrospector.registerAtomicClass(JXPathIntrospector.class);
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(JXPathIntrospector.class);
        assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfoWithOtherClass_pdeH2_edST0() {
        JXPathIntrospector.registerAtomicClass(String.class);
        JXPathBeanInfo beanInfo = JXPathIntrospector.getBeanInfo(String.class);
        assertNotNull(beanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBeanInfoDynamicClass_pOYp2_ptfu0() {
        JXPathIntrospector introspector = new JXPathIntrospector();
        Class beanClass = Object.class;
        JXPathBeanInfo beanInfo = introspector.getBeanInfo(beanClass);
        assertNotNull(beanInfo);
    }
}