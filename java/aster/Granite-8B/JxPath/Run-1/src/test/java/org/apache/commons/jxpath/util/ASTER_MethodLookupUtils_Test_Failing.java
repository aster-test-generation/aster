/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNoMatch_iGjI1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{1});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNullParameter_gMpk3() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{null});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorExactMatchWithNullParameter_BIwk6() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{null});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorMatchParameterTypesWithMultipleParameters_tQxo9() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"hello", "world"});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorMatchParameterTypesWithMultipleNullParameters_EtVZ10() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{null, null});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorExactMatch_wvQO0() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Object.class, new Object[]{null});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorApproximateMatch_nKDD1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Object.class, new Object[]{new Integer(1)});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorAmbiguous_VChr3() {
        try {
            MethodLookupUtils.lookupConstructor(Object.class, new Object[]{new Integer(1), new Integer(2)});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous constructor [1, 2]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNullParameter_fLBn4() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Object.class, new Object[]{null, null});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorMultipleConstructors_SNfo5() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Constructor.class, new Object[]{new Class[]{}});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNoConstructors_UbaY6() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Object.class, new Object[]{});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorApproximateMatchWithNullParameter_SFDP8() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Object.class, new Object[]{new Integer(1), null});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorAmbiguousWithNullParameter_CaJF10() {
        try {
            MethodLookupUtils.lookupConstructor(Object.class, new Object[]{new Integer(1), null});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
            assertEquals("Ambiguous constructor [1, null]", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullParameters_kUge2() {
        try {
            MethodLookupUtils.lookupStaticMethod(Class.class, "testMethod", null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodAmbiguousMethod_Efeh5() {
        try {
            MethodLookupUtils.lookupStaticMethod(Class.class, "testMethod", new Object[0]);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullParameter_NcMm8() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getMethods", new Object[]{null});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodMultipleParameters_TfqY9() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getMethods", new Object[]{null, Integer.valueOf(0)});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodMultipleParametersWithNull_GEvn10() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getMethods", new Object[]{null, Integer.valueOf(0), null});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodMultipleParametersWithNullAndNonNull_qpfM11() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getMethods", new Object[]{null, Integer.valueOf(0), "test"});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodMultipleParametersWithNullAndNonNullAndNull_uwVD12() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getMethods", new Object[]{null, Integer.valueOf(0), "test", null});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodMultipleParametersWithNullAndNonNullAndNonNull_AufB13() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getMethods", new Object[]{null, Integer.valueOf(0), "test", Integer.valueOf(1)});
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodAmbiguous_oGxW5() {
        try {
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodMultipleMethods_EkWf9() {
        Method method = MethodLookupUtils.lookupMethod(Object.class, "toString", new Object[]{});
        assertNotNull(method);
    }
}