/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Failing {
    @Mock
    private NamespaceResolver parent;
    private boolean sealed;
    NamespaceResolver namespaceResolver;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private Map<String, String> namespaceMap;
    @Mock
    private Map<String, String> reverseMap;
    @Spy
    private NamespaceResolver namespaceresolver;
    @Mock
    private NamespaceResolver pointer;
    @Mock
    private Object mockSuper;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Arrange
        String namespaceURI = "http://example.com";
        String prefix = "prefix";
        when(nodePointer.namespaceIterator()).thenReturn(nodeIterator);
        when(nodeIterator.getNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getNamespaceURI()).thenReturn(namespaceURI);
        when(nodePointer.getName()).thenReturn(new QName(prefix, "localName"));
        // Act
        String result = NamespaceResolver.getPrefix(nodePointer, namespaceURI);
        // Assert
        assertEquals(prefix, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testseal() throws Exception {
        sealed = false;
        namespaceresolver = new NamespaceResolver(parent);
        namespaceresolver.seal();
        Assertions.assertTrue(sealed);
        Mockito.verify(parent).seal();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefix_PrefixFound() throws Exception {
        namespaceResolver = new NamespaceResolver(parent);
        // Arrange
        String namespaceURI = "testNamespace";
        String prefix = "testPrefix";
        Map<String, String> reverseMap = new HashMap<>();
        reverseMap.put(namespaceURI, prefix);
        when(parent.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(null);
        // Act
        String result = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
        // Assert
        assertEquals(prefix, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testregisterNamespace() throws Exception {
        namespaceresolver = new NamespaceResolver();
        MockitoAnnotations.initMocks(this);
        String prefix = "prefix";
        String namespaceURI = "namespaceURI";
        namespaceresolver.registerNamespace(prefix, namespaceURI);
        Mockito.verify(namespaceMap).put(prefix, namespaceURI);
        Mockito.verify(reverseMap).put(namespaceURI, prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixExternallyRegisteredPrefixNotNull_gmpk0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
        String namespaceURI = "testNamespaceURI";
        String prefix = namespaceResolver.getPrefix(namespaceURI);
        Assertions.assertNotNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixPointerNotNull_KMzo2() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String namespaceURI = "testNamespaceURI";
        String prefix = namespaceResolver.getPrefix(namespaceURI);
        Assertions.assertNotNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() {
        namespaceresolver = new NamespaceResolver(parent);
        // Mock the getExternallyRegisteredNamespaceURI method
        when(namespaceresolver.getExternallyRegisteredNamespaceURI("prefix")).thenReturn(null);
        // Mock the getNamespaceURI method of the parent
        when(parent.getNamespaceURI("prefix")).thenReturn("uri");
        // Call the getNamespaceURI method
        String result = namespaceresolver.getNamespaceURI("prefix");
        // Assert the result
        assertEquals("uri", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURIExternallyRegisteredNamespaceURINotNull_THkd0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(new NamespaceResolver(null));
        String uri = namespaceResolver.getNamespaceURI("prefix");
        Assertions.assertNotNull(uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_fid1() throws Exception {
        MockitoAnnotations.initMocks(this);
        // Arrange
        String namespaceURI = "http://example.com";
        String prefix = "prefix";
        when(nodePointer.namespaceIterator()).thenReturn(nodeIterator);
        when(nodeIterator.getNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getNamespaceURI()).thenReturn(namespaceURI);
        when(nodePointer.getName()).thenReturn(new QName(prefix, "localName"));
        // Act
        String result = NamespaceResolver.getPrefix(nodePointer, namespaceURI);
        // Assert
    assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetExternallyRegisteredPrefix_PrefixFound_fid1() throws Exception {
        namespaceResolver = new NamespaceResolver(parent);
        // Arrange
        String namespaceURI = "testNamespace";
        String prefix = "testPrefix";
        Map<String, String> reverseMap = new HashMap<>();
        reverseMap.put(namespaceURI, prefix);
        when(parent.getExternallyRegisteredPrefix(namespaceURI)).thenReturn(null);
        // Act
        String result = namespaceResolver.getExternallyRegisteredPrefix(namespaceURI);
        // Assert
    assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_foundInParent_Dkuf0() throws Exception {
        NamespaceResolver namespaceresolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = "uri";
        when(namespaceresolver.getExternallyRegisteredNamespaceURI(prefix)).thenReturn(uri);
        assertEquals(uri, namespaceresolver.getExternallyRegisteredNamespaceURI(prefix));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_foundInMap_HJrt0_fid2() throws Exception {
        NamespaceResolver namespaceresolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = "uri";
        when(namespaceMap.get(prefix)).thenReturn(uri);
        assertEquals(uri, namespaceresolver.getExternallyRegisteredNamespaceURI(prefix));
    }
}