/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeContext_Test_Failing {
    @Mock
    private NodeTypeTest nodeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    @Mock
    private AttributeContext attributeContext;
    @Mock
    private NodeIterator iterator;
    private NodePointer currentNodePointer;
    @Mock
    private NodePointer nodePointer;
    @InjectMocks
    private AttributeContext attributecontext;
    @Mock
    private NamespaceContext parentContext;
    private boolean setStarted = false;
    private static final QName WILDCARD = new QName(null, "*");

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        MockitoAnnotations.initMocks(this);
        attributecontext = new AttributeContext(namespaceContext, nodeTest);
        // Arrange
        int position = 5;
        int currentPosition = 3;
        // Act
        when(attributeContext.getCurrentPosition()).thenReturn(currentPosition);
        boolean result = attributecontext.setPosition(position);
        // Assert
        verify(attributeContext, times(1)).reset();
        verify(attributeContext, times(position - currentPosition)).nextNode();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ptPA0() {
        NodeTypeTest nodeTest = new NodeTypeTest(1);
        SelfContext selfContext = new SelfContext(new NamespaceContext(null, nodeTest), nodeTest);
        AttributeContext attributeContext = new AttributeContext(selfContext, nodeTest);
        NodePointer result = attributeContext.getCurrentNodePointer();
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_GucT0() throws Exception {
        attributeContext = new AttributeContext(parentContext, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(iterator.setPosition(anyInt())).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTest).thenReturn(nodeTypeTest);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        boolean result = attributeContext.nextNode();
        assertTrue(result);
        verify(iterator, times(1)).setPosition(anyInt());
        verify(parentContext, times(1)).setPosition(anyInt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_GucT0_fid2() throws Exception {
        attributeContext = new AttributeContext(parentContext, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        when(iterator.setPosition(anyInt())).thenReturn(true);
        when(iterator.getNodePointer()).thenReturn(currentNodePointer);
        NodeTypeTest nodeTypeTest = mock(NodeTypeTest.class);
        when(nodeTypeTest.getNodeType()).thenReturn(Compiler.NODE_TYPE_NODE);
        when(nodeTest).thenReturn(nodeTypeTest);
        boolean result = attributeContext.nextNode();
        assertTrue(result);
        verify(iterator, times(1)).setPosition(anyInt());
        verify(parentContext, times(1)).setPosition(anyInt());
    }
}