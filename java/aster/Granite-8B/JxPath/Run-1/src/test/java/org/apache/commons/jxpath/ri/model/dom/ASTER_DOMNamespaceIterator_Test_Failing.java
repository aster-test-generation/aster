/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNamespaceIterator_Test_Failing {
    private int position = 0;
    @Mock
    private Node node;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private DOMNamespaceIterator domNamespaceIterator;
    private List<String> attributes = new ArrayList<>();
    @Mock
    private DOMNamespaceIterator domnamespaceiterator;
    private Attr attr;
    private List<Attr> list;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_Position0_ReturnsNull_uZDf0() {
        DOMNamespaceIterator iterator = new DOMNamespaceIterator(new DOMNodePointer(null, null, null));
        NodePointer result = iterator.getNodePointer();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_Position1_ReturnsNodePointer_engb1() {
        DOMNamespaceIterator iterator = new DOMNamespaceIterator(new DOMNodePointer(null, null, null));
        iterator.setPosition(1);
        NodePointer result = iterator.getNodePointer();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodePointer_PositionGreaterThan1_ReturnsNodePointer_zWcC5() {
        DOMNamespaceIterator iterator = new DOMNamespaceIterator(new DOMNodePointer(null, null, null));
        iterator.setPosition(2);
        NodePointer result = iterator.getNodePointer();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNodePointer_nUtR0() throws Exception {
        node = mock(Node.class);
        attributes = mock(List.class);
        attr = mock(Attr.class);
        list = mock(List.class);
        domnamespaceiterator = new DOMNamespaceIterator(new DOMNodePointer(node, Locale.US, "id"));
        when(list.get(0)).thenReturn(attr);
        when(attr.getPrefix()).thenReturn("xmlns");
        when(attr.getValue()).thenReturn("http://www.example.com");
        NodePointer result = domnamespaceiterator.getNodePointer();
        assertEquals(new DOMNodePointer(node, Locale.US, "id"), result);
    }
}