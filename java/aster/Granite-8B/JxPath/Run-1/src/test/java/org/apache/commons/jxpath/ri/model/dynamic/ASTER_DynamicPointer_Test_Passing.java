/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private Locale locale;
    private Object bean;
    private QName name;
    private DynamicPointer dynamicpointer;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private DynamicAttributeIterator dynamicAttributeIterator;
    private DynamicPointer dynamicPointer;
    @Mock
    private QName qName;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private DynamicPropertyHandler handler;
    @Mock
    private DynamicPointer parent;
    @Mock
    private Object node;
    @Mock
    private JXPathIntrospector jXPathIntrospector;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisDynamicPropertyDeclarationSupported() throws Exception {
        dynamicpointer = new DynamicPointer(new QName("name"), new Object(), pageContextHandler, locale);
        // Act
        boolean result = dynamicpointer.isDynamicPropertyDeclarationSupported();
        // Assert
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicPropertyDeclarationSupported_pijD0() {
        PageContextHandler pageContextHandler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        QName qName = new QName("qualifiedName");
        Object bean = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, pageContextHandler, locale);
        boolean result = dynamicPointer.isDynamicPropertyDeclarationSupported();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        bean = new Object();
        name = new QName("testName");
        dynamicpointer = new DynamicPointer(name, bean, pageContextHandler, Locale.US);
        // Test with same object
        // Test with different bean
        DynamicPointer other = new DynamicPointer(name, new Object(), pageContextHandler, Locale.US);
        // Test with different name
        other = new DynamicPointer(new QName("otherName"), bean, pageContextHandler, Locale.US);
        // Test with null bean
        other = new DynamicPointer(name, null, pageContextHandler, Locale.US);
        // Test with null name
        other = new DynamicPointer(null, bean, pageContextHandler, Locale.US);
        // Test with different locale
        other = new DynamicPointer(name, bean, pageContextHandler, Locale.FRANCE);
        assertEquals(dynamicpointer, dynamicpointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameObject_qvWo0() {
        DynamicPointer dp = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        boolean result = dp.equals(dp);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsNull_ekgg1() {
        DynamicPointer dp = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        boolean result = dp.equals(null);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentClass_zThy2() {
        DynamicPointer dp = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        boolean result = dp.equals(new Object());
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentName_WFxR4() {
        DynamicPointer dp = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        DynamicPointer dp2 = new DynamicPointer(new QName("otherName"), new Object(), new PageContextHandler(), new Locale("locale"));
        boolean result = dp.equals(dp2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection() throws Exception {
        dynamicpointer = new DynamicPointer(new QName("name"), new Object(), pageContextHandler, locale);
        // Arrange
        boolean expected = false;
        // Act
        boolean actual = dynamicpointer.isCollection();
        // Assert
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_oTnx0() {
        QName qName = new QName("qualifiedName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
        boolean result = dynamicPointer.isCollection();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithBeanAndName_yuhu0() {
        QName name = new QName("qualifiedName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int hashCode = dynamicPointer.hashCode();
        assertEquals(System.identityHashCode(bean) + (name == null ? 0 : name.hashCode()), hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeWithoutName_pGCN1() {
        QName name = null;
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = Locale.US;
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, locale);
        int hashCode = dynamicPointer.hashCode();
        assertEquals(System.identityHashCode(bean), hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator_pkkV0() {
        PageContextHandler pageContextHandler = new PageContextHandler();
        Locale locale = Locale.US;
        QName qName = new QName("prefix", "localName");
        DynamicPointer dynamicPointer = new DynamicPointer(qName, new Object(), pageContextHandler, locale);
        NodeIterator nodeIterator = dynamicPointer.attributeIterator(qName);
        assert nodeIterator != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateNodeIteratorNullStartWith_EiEM1() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("qualifiedName"), new Object(), new PageContextHandler(), new Locale("en", "US"));
        NodeIterator nodeIterator = dynamicPointer.createNodeIterator("property", true, null);
        assert nodeIterator != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyPointer_PLjY0() {
        PageContextHandler handler = new PageContextHandler();
        QName name = new QName("qualifiedName");
        Object bean = new Object();
        DynamicPointer dynamicPointer = new DynamicPointer(name, bean, handler, new Locale("en", "US"));
        PropertyPointer propertyPointer = dynamicPointer.getPropertyPointer();
        assert propertyPointer instanceof DynamicPropertyPointer;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullParent_MWon0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        String result = dynamicPointer.asPath();
        assertEquals("/", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() throws Exception {
        dynamicpointer = new DynamicPointer(new QName("test"), new Object(), pageContextHandler, locale);
        // Act
        int length = dynamicpointer.getLength();
        // Assert
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        bean = new Object();
        dynamicpointer = new DynamicPointer(new QName("test"), bean, pageContextHandler, Locale.US);
        // Act
        Object baseValue = dynamicpointer.getBaseValue();
        // Assert
        assertEquals(bean, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_tktt0() {
        QName qName = new QName("qualifiedName");
        Object bean = "beanValue";
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
        assertEquals(bean, dynamicPointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafNullValue_GZsP0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), null, new PageContextHandler(), Locale.US);
        boolean result = dynamicPointer.isLeaf();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafAtomicValue_bztq1() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), "value", new PageContextHandler(), Locale.US);
        boolean result = dynamicPointer.isLeaf();
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafComplexValue_Pwob2() {
        DynamicPointer dynamicPointer = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), Locale.US);
        boolean result = dynamicPointer.isLeaf();
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsDifferentBean_hYJa3_XLlE0() {
        DynamicPointer dp = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        DynamicPointer dp2 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        boolean result = dp.equals(dp2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsSameBeanAndDifferentName_GNUE6_AHJs0() {
        DynamicPointer dp = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        DynamicPointer dp2 = new DynamicPointer(new QName("name"), new Object(), new PageContextHandler(), new Locale("locale"));
        dp2 = new DynamicPointer(new QName("otherName"), new Object(), new PageContextHandler(), new Locale("locale"));
        boolean result = dp.equals(dp2);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection2_AqBs1_AZvv0() {
        QName qName = new QName("qualifiedName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, handler, locale);
        boolean result = dynamicPointer.isLeaf();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection3_iSSe2_pjEf0() {
        QName qName = new QName("qualifiedName");
        Object bean = new Object();
        PageContextHandler handler = new PageContextHandler();
        Locale locale = new Locale("en", "US");
        VariablePointer variablePointer = new VariablePointer(qName);
        DynamicPointer dynamicPointer = new DynamicPointer(variablePointer, qName, bean, handler);
        boolean result = dynamicPointer.isLeaf();
        assert (!result);
    }
}