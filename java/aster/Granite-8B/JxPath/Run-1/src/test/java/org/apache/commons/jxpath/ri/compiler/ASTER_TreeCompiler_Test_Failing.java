/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrNull_lXke1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = null;
        Object result = treeCompiler.or(arguments);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOrEmptyArray_LGnf2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[0];
        Object result = treeCompiler.or(arguments);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_EzNF0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2};
        Object result = treeCompiler.and(arguments);
        assert result != null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_yXXc0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.function(1, new Object[]{"a", 2, 3.4});
        assert result instanceof CoreFunction;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStep_srpc0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.step(1, new Object(), new Object[]{});
        assertEquals("Step", result.getClass().getSimpleName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStep2_ZhIV1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.step(1, new Object(), new Object[]{"a", "b", "c"});
        assertEquals("Step", result.getClass().getSimpleName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_DNOQ0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[]{1, 2, 3};
        Object result = treeCompiler.sum(arguments);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_lfSp0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] steps = new Object[]{"step1", "step2", "step3"};
        Object result = treeCompiler.locationPath(true, steps);
        assertEquals("LocationPath(true, [step1, step2, step3])", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_YEQq0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("test");
        assertEquals("ProcessingInstructionTest(test)", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_YEQq0_fid1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("test");
        assertEquals("processing-instruction('test')", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMultiply_iPRP0_PoYB0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String instruction = "2*3";
        Object result = treeCompiler.processingInstructionTest(instruction);
        assertEquals(CoreOperationMultiply.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_LVmt1_RZrn0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Object();
        Object right = new Object();
        Object result = treeCompiler.processingInstructionTest("minus(" + left + "," + right + ")");
        assertEquals(Object.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGreaterThan_DvOE0_hrVn0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = treeCompiler.processingInstructionTest("5");
        Object right = treeCompiler.processingInstructionTest("3");
        Object result = treeCompiler.processingInstructionTest("> 5 3");
        assertEquals(CoreOperationGreaterThan.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_hHSS0_mTBL0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        QName qName = new QName("test");
        Object[] args = new Object[]{"arg1", "arg2"};
        Object result = treeCompiler.processingInstructionTest("arg1");
        assertEquals(new ProcessingInstructionTest("arg1"), result);
    }
}