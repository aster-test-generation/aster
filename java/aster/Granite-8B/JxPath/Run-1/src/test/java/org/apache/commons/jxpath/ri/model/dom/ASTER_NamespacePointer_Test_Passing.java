/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespacePointer_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathNullParent_GImL0() {
        NamespacePointer namespacePointer = new NamespacePointer(null, "prefix");
        assertEquals("namespace::prefix", namespacePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_OIbb0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        NamespacePointer namespacePointer = new NamespacePointer(domNodePointer, "prefix");
        int length = namespacePointer.getLength();
        assert length == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_RojS0() {
        QName qName = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(qName);
        NamespacePointer namespacePointer = new NamespacePointer(variablePointer, "prefix");
        Object result = namespacePointer.getBaseValue();
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_pBuq0() throws Exception {
        DOMNodePointer nodePointer1 = mock(DOMNodePointer.class);
        DOMNodePointer nodePointer2 = mock(DOMNodePointer.class);
        when(nodePointer1.getName()).thenReturn(new QName("name1"));
        when(nodePointer2.getName()).thenReturn(new QName("name2"));
        int result = ((DOMNodePointer) nodePointer1).compareChildNodePointers(nodePointer1, nodePointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection_gTwB0() {
        NamespacePointer namespacepointer = Mockito.mock(NamespacePointer.class);
        Mockito.when(namespacepointer.isLeaf()).thenReturn(true);
        boolean result = namespacepointer.isLeaf();
        Mockito.verify(namespacepointer, Mockito.times(1)).isLeaf();
        Assertions.assertTrue(result);
    }
}