/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorExactMatch_DPNi0() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"hello"});
        assertEquals(Constructor.class, constructor.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorAmbiguous_DfZG2() {
        try {
            MethodLookupUtils.lookupConstructor(String.class, new Object[]{"hello", "world"});
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNoConstructors_viLI5() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Object.class, new Object[]{"hello"});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNoMatch_bftO2() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Object.class, new Object[]{new String("test")});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNoMatchWithNullParameter_mhoj9() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Object.class, new Object[]{new String("test"), null});
        assertNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullClass_bGhv0() {
        try {
            MethodLookupUtils.lookupStaticMethod(null, "testMethod", new Object[0]);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNullMethodName_zRdP1() {
        try {
            MethodLookupUtils.lookupStaticMethod(Class.class, null, new Object[0]);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodFoundMethod_ljNw3() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "getMethods", new Object[0]);
        assertNotNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupStaticMethodNotFoundMethod_jIlh4() {
        Method method = MethodLookupUtils.lookupStaticMethod(Class.class, "testMethod", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNullParameters_PQkt0() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getMethod", null);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodEmptyParameters_aQML1() {
        Method method = MethodLookupUtils.lookupMethod(Class.class, "getMethod", new Object[0]);
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNoMethod_pNWX8() {
        Method method = MethodLookupUtils.lookupMethod(Object.class, "nonExistingMethod", new Object[]{});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodNoMethodWithStaticMethod_ifwv14() {
        Method method = MethodLookupUtils.lookupMethod(Object.class, "nonExistingStaticMethod", new Object[]{});
        assertNull(method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNullParameter_fLBn4_fid1() {
        Constructor constructor = MethodLookupUtils.lookupConstructor(Object.class, new Object[]{null, null});
    }
}