/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_NodeNameTest_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_QNameWithNamespaceURI_Awfs0() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, "namespaceURI");
        String namespaceURI = nodeNameTest.getNamespaceURI();
        assertEquals("namespaceURI", namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_QNameWithoutNamespaceURI_ZxUN1() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        String namespaceURI = nodeNameTest.getNamespaceURI();
        assertEquals(null, namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QNameWithPrefixAndLocalName_MJUt0() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        assertEquals("prefix:localName", nodeNameTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QNameWithQualifiedName_ihvn1() {
        QName qname = new QName("qualifiedName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        assertEquals("qualifiedName", nodeNameTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_QNameWithPrefixAndLocalNameAndNamespaceURI_gSTQ2() {
        QName qname = new QName("prefix", "localName");
        String namespaceURI = "namespaceURI";
        NodeNameTest nodeNameTest = new NodeNameTest(qname, namespaceURI);
        assertEquals("prefix:localName", nodeNameTest.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNodeNameWithNamespaceURI_GAbG1() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname, "namespaceURI");
        QName result = nodeNameTest.getNodeName();
        assertEquals(qname, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcard_QNameWithPrefixAndLocalName_iLJk0() {
        QName qname = new QName("prefix", "localName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        boolean result = nodeNameTest.isWildcard();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcard_QNameWithoutPrefixAndLocalName_UbOb1() {
        QName qname = new QName("qualifiedName");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        boolean result = nodeNameTest.isWildcard();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsWildcard_QNameWildcard_RAMw2() {
        QName qname = new QName("*");
        NodeNameTest nodeNameTest = new NodeNameTest(qname);
        boolean result = nodeNameTest.isWildcard();
        assert (result);
    }
}