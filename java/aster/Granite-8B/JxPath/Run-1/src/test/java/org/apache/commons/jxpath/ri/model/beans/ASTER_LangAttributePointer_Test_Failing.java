/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LangAttributePointer_Test_Failing {
    LangAttributePointer langattributepointer;
    LangAttributePointer anotherLangAttributePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        langattributepointer = Mockito.mock(LangAttributePointer.class);
        anotherLangAttributePointer = Mockito.mock(LangAttributePointer.class);
        // Arrange
        Mockito.when(langattributepointer.equals(anotherLangAttributePointer)).thenReturn(true);
        // Act
        boolean result = langattributepointer.equals(anotherLangAttributePointer);
        // Assert
        Mockito.verify(langattributepointer, Mockito.times(1)).equals(anotherLangAttributePointer);
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_EmptyParent_PYWu1() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        LangAttributePointer langAttributePointer = new LangAttributePointer(parent);
        assertEquals("@xml:lang", langAttributePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_OKQt0() throws Exception {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        LangAttributePointer langAttributePointer = new LangAttributePointer(domNodePointer);
        when(langAttributePointer.getNamespaceURI()).thenReturn("http://example.com");
        assertEquals("http://example.com", langAttributePointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_fHmH0() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(new DOMNodePointer(null, null, null));
        Object value = "Test Value";
        DOMNodePointer parent = Mockito.mock(DOMNodePointer.class);
        Mockito.when(langAttributePointer.getParent()).thenReturn(parent);
        langAttributePointer.isLeaf(); // No setValue method found, so calling isLeaf method instead
        Mockito.verifyNoMoreInteractions(parent);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_VJvr0_fid2() throws Exception {
        DOMNodePointer parent = Mockito.mock(DOMNodePointer.class);
        QName name = new QName("xml", "lang");
        LangAttributePointer langAttributePointer = new LangAttributePointer(parent);
        Mockito.when(parent.asPath()).thenReturn("/path");
        assertEquals("/path@xml:lang", langAttributePointer.asPath());
    }
}