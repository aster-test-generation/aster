/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodePointer_Test_Failing {
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private Element element;
    @Mock
    private Attribute attribute;
    @Mock
    private List list;
    @Mock
    private Object node1;
    @Mock
    private Object node2;
    private JDOMNodePointer jdomnodepointer;
    private Object node;
    private NodeTest nodeTest;
    private JXPathContext jxpathcontext;
    private AbstractFactory abstractFactory;
    private JDOMAttributeIterator attributeIterator;
    @Mock
    private ProcessingInstruction processingInstruction;
    @Mock
    private NodePointer startWith;
    @Mock
    private QName qName;
    @Mock
    private DOMNodePointer dOMNodePointer;
    @Mock
    private Locale locale;
    @Mock
    private JDOMNamespaceIterator jdomNamespaceIterator;
    @Mock
    private Document document;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private NamespaceResolver namespaceResolver;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodeIterator nodeIteratorMock;
    @Mock
    private NodePointer nodePointerMock;
    private Element parent;
    @Mock
    private JDOMNodePointer jdomnodepointerParent;
    @Mock
    private Namespace namespace;
    private String id;
    private NamespaceResolver localNamespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_1() throws Exception {
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(nodePointer1.getBaseValue()).thenReturn(node1);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(element.getAttributes()).thenReturn(list);
        when(list.get(0)).thenReturn(attribute);
        // Test when both nodes are same
        // Test when node1 is attribute and node2 is not
        // Test when node2 is attribute and node1 is not
        // Test when both nodes are attributes
        when(list.size()).thenReturn(2);
        when(list.get(0)).thenReturn(attribute);
        when(list.get(1)).thenReturn(attribute);
        // Test when node is not an element
        when(node1).thenReturn("Not an element");
        assertEquals(0, jdomnodepointer.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_2() throws Exception {
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(nodePointer1.getBaseValue()).thenReturn(node1);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(element.getAttributes()).thenReturn(list);
        when(list.get(0)).thenReturn(attribute);
        // Test when both nodes are same
        // Test when node1 is attribute and node2 is not
        // Test when node2 is attribute and node1 is not
        // Test when both nodes are attributes
        when(list.size()).thenReturn(2);
        when(list.get(0)).thenReturn(attribute);
        when(list.get(1)).thenReturn(attribute);
        // Test when node is not an element
        when(node1).thenReturn("Not an element");
        assertEquals(-1, jdomnodepointer.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_3() throws Exception {
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(nodePointer1.getBaseValue()).thenReturn(node1);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(element.getAttributes()).thenReturn(list);
        when(list.get(0)).thenReturn(attribute);
        // Test when both nodes are same
        // Test when node1 is attribute and node2 is not
        // Test when node2 is attribute and node1 is not
        // Test when both nodes are attributes
        when(list.size()).thenReturn(2);
        when(list.get(0)).thenReturn(attribute);
        when(list.get(1)).thenReturn(attribute);
        // Test when node is not an element
        when(node1).thenReturn("Not an element");
        assertEquals(1, jdomnodepointer.compareChildNodePointers(nodePointer2, nodePointer1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers_5() throws Exception {
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(nodePointer1.getBaseValue()).thenReturn(node1);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(element.getAttributes()).thenReturn(list);
        when(list.get(0)).thenReturn(attribute);
        // Test when both nodes are same
        // Test when node1 is attribute and node2 is not
        // Test when node2 is attribute and node1 is not
        // Test when both nodes are attributes
        when(list.size()).thenReturn(2);
        when(list.get(0)).thenReturn(attribute);
        when(list.get(1)).thenReturn(attribute);
        // Test when node is not an element
        when(node1).thenReturn("Not an element");
        assertThrows(IllegalStateException.class, () -> jdomnodepointer.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersNullEqual_CAwe10() {
        JDOMNodePointer pointer1 = null;
        JDOMNodePointer pointer2 = null;
        assertEquals(0, pointer1.compareChildNodePointers(pointer1, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueNull_HtJU6() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue(null);
        assertEquals("", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueEmptyString_mwrc7() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue("");
        assertEquals("", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueText_Jvts0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue(new Text("[Text: New Text]"));
        assertEquals("[Text: New Text]", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextWithId_TaGz3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US, "id");
        jdn.setValue(new Text("[Text: New Text]"));
        assertEquals("[Text: New Text]", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueComment_AEaO10() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Comment("Initial Comment"), Locale.US);
        jdn.setValue(new Comment("New Comment"));
        assertEquals("New Comment", ((Comment) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithValidNameAndIndex_Ceji0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        JXPathContext context = JXPathContext.newContext(jdn);
        QName name = new QName("test", "test");
        NodePointer result = jdn.createChild(context, name, 0);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithInvalidIndex_dIGY1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        JXPathContext context = JXPathContext.newContext(jdn);
        QName name = new QName("test", "test");
        try {
            jdn.createChild(context, name, -1);
            fail("Expected JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithNullName_dUdt3() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        JXPathContext context = JXPathContext.newContext(jdn);
        try {
            jdn.createChild(context, null, 0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithWholeCollection_cmjs4() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        JXPathContext context = JXPathContext.newContext(jdn);
        QName name = new QName("test", "test");
        NodePointer result = jdn.createChild(context, name, JDOMNodePointer.WHOLE_COLLECTION);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithInvalidName_FteG5() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        JXPathContext context = JXPathContext.newContext(jdn);
        QName name = new QName("", "");
        try {
            jdn.createChild(context, name, 0);
            fail("Expected JXPathAbstractFactoryException");
        } catch (JXPathAbstractFactoryException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAttributeIterator() throws Exception {
        QName qName = new QName("prefix", "localName");
        jdomnodepointer = new JDOMNodePointer(null, Locale.US, "id");
        // Arrange
        QName name = new QName("prefix", "localName");
        when(jdomnodepointer.attributeIterator(name)).thenReturn(attributeIterator);
        // Act
        NodeIterator result = jdomnodepointer.attributeIterator(name);
        // Assert
        assertEquals(attributeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_Null() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // given
        when(node).thenReturn(null);
        // when
        QName result = jdomnodepointer.getName();
        // then
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NodeNotElementNorProcessingInstruction_YAyI4() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("text"), Locale.US);
        try {
            jdn.getName();
            assert false;
        } catch (UnsupportedOperationException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator() throws Exception {
        jdomnodepointer = new JDOMNodePointer(new Object(), Locale.US);
        // Arrange
        NodeIterator expectedIterator = mock(NodeIterator.class);
        when(jdomnodepointer.childIterator(nodeTest, false, startWith)).thenReturn(expectedIterator);
        // Act
        NodeIterator actualIterator = jdomnodepointer.childIterator(nodeTest, false, startWith);
        // Assert
        assertEquals(expectedIterator, actualIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_Null() throws Exception {
        node = Mockito.mock(Object.class);
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Given
        when(node instanceof Element).thenReturn(false);
        when(node instanceof Attribute).thenReturn(false);
        // When
        String prefix = JDOMNodePointer.getPrefix(node);
        // Then
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixElement_BImQ0() {
        Element element = new Element("namespace", "http://namespace.com");
        String prefix = JDOMNodePointer.getPrefix(element);
        assert prefix.equals("namespace");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixElementNullPrefix_UGgW1() {
        Element element = new Element("", "http://namespace.com");
        String prefix = JDOMNodePointer.getPrefix(element);
        assert prefix == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixAttribute_jFDh2() {
        Attribute attribute = new Attribute("namespace", "http://namespace.com");
        String prefix = JDOMNodePointer.getPrefix(attribute);
        assert prefix.equals("namespace");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrefixAttributeNullPrefix_nlrr3() {
        Attribute attribute = new Attribute("", "http://namespace.com");
        String prefix = JDOMNodePointer.getPrefix(attribute);
        assert prefix == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLength() {
        jdomnodepointer = new JDOMNodePointer(node, locale);
        // Arrange
        Mockito.when(jdomnodepointer.getLength()).thenReturn(1);
        // Act
        int length = jdomnodepointer.getLength();
        // Assert
        Assertions.assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForElement_jsmy0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        boolean result = jdn.isLeaf();
        assert (!result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveRootNode_Usjv0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("root"), Locale.US);
        jdn.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveNonRootNode_ayTB1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Element("parent"), Locale.US);
        jdn = new JDOMNodePointer(jdn, new Element("child"));
        jdn.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLanguage() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Arrange
        when(jdomnodepointer.findEnclosingAttribute(node, "lang", Namespace.XML_NAMESPACE)).thenReturn("en-US");
        // Act
        String language = jdomnodepointer.getLanguage();
        // Assert
        assertEquals("en-US", language);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceURI_nonXmlPrefixNullDocument_pKWc5() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Document(), Locale.US);
        String result = jdn.getNamespaceURI("test");
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolverNull_tCbU0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Object(), Locale.US);
        NamespaceResolver resolver = jdn.getNamespaceResolver();
        Assertions.assertNull(resolver);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersEqual_eJUA0_udfl0() {
        JDOMNodePointer pointer1 = new JDOMNodePointer(new Object(), Locale.US);
        JDOMNodePointer pointer2 = new JDOMNodePointer(new Object(), Locale.US);
        assertEquals(0, pointer1.compareChildNodePointers(pointer1, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersAttributeSecond_PnTj2_ebwm0() {
        JDOMNodePointer pointer1 = new JDOMNodePointer(new Object(), Locale.US);
        JDOMNodePointer pointer2 = new JDOMNodePointer(new Object(), Locale.US);
        assertEquals(1, pointer1.compareChildNodePointers(pointer1, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersNull_IjqR9_LSzv0() {
        JDOMNodePointer pointer1 = new JDOMNodePointer(new Object(), Locale.US);
        JDOMNodePointer pointer2 = null;
        assertEquals(-1, pointer1.compareChildNodePointers(pointer1, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersNullFirst_zqvg11_Hbpj0() {
        JDOMNodePointer pointer1 = null;
        JDOMNodePointer pointer2 = new JDOMNodePointer(new Object(), Locale.US);
        assertEquals(1, pointer1.compareChildNodePointers(pointer1, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueCDATA_ICQY8_xvMe0() {
        JDOMNodePointer jdn = new JDOMNodePointer(new CDATA("Initial CDATA"), Locale.US);
        jdn.setValue(new CDATA("New CDATA"));
        assertEquals("New CDATA", ((org.w3c.dom.CDATASection) jdn.getNode()).getData());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_yALd0() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        when(jdomnodepointer.getNamespaceResolver().getNamespaceURI("http://example.com")).thenReturn("http://example.com");
        String namespaceURI = jdomnodepointer.getNamespaceResolver().getNamespaceURI("http://example.com");
        assertEquals("http://example.com", namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_PSca0_jnSH0() {
        JXPathContext context = JXPathContext.newContext(null);
        DOMNodePointer jdn = new DOMNodePointer(null, null, null);
        QName name = new QName("prefix", "localName");
        NodePointer result = jdn.createChild(context, name, 0, "value");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueText_Jvts0_fid1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue(new Text("New Text"));
        assertEquals("New Text", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueTextWithId_TaGz3_fid1() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US, "id");
        jdn.setValue(new Text("New Text"));
        assertEquals("New Text", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueObject_RZFK11() {
        JDOMNodePointer jdn = new JDOMNodePointer(new Text("Initial Text"), Locale.US);
        jdn.setValue(new Object());
        assertEquals("", ((Text) jdn.getNode()).getText());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnamespaceIterator() {
        jdomnodepointer = new JDOMNodePointer(null, Locale.US, "id");
        // Arrange
        NodeIterator nodeIterator = jdomnodepointer.namespaceIterator();
        // Act
        NodeIterator actual = nodeIterator;
        // Assert
        assertEquals(jdomNamespaceIterator, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Test equals with same object
        // Test equals with different object
        JDOMNodePointer jdomnodepointer2 = new JDOMNodePointer(node, Locale.US);
        // Test equals with null
        // Test equals with different node
        JDOMNodePointer jdomnodepointer3 = new JDOMNodePointer(new Object(), Locale.US);
        assertNotEquals(jdomnodepointer, jdomnodepointer2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_Element_fid1() throws Exception {
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        String localName = JDOMNodePointer.getLocalName(node);
        assertEquals("elementName", localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalName_Attribute_fid1() throws Exception {
        node = element;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        node = attribute;
        String localName = JDOMNodePointer.getLocalName(node);
        assertEquals("attributeName", localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI_xml_fid1() throws Exception {
        node = document;
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Arrange
        when(document.getRootElement()).thenReturn(element);
        when(element.getNamespace("xml")).thenReturn(namespace);
        when(namespace.getURI()).thenReturn("http://example.com/xml");
        // Act
        String result = jdomnodepointer.getNamespaceURI("xml");
        // Assert
        assertEquals("http://example.com/xml", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute_ElementWithAttribute_uVpP0_fid1() {
        Element e = new Element("root", "http://example.com");
        e.setAttribute("attr", "value");
        String attr = JDOMNodePointer.findEnclosingAttribute(e, "attr", Namespace.getNamespace("http://example.com"));
        Assertions.assertEquals("value", attr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersAttributeFirst_NNIl1_ONDX0_fid1() {
        JDOMNodePointer pointer1 = new JDOMNodePointer(new Object(), Locale.US);
        JDOMNodePointer pointer2 = new JDOMNodePointer(new Object(), Locale.US);
        assertEquals(-1, pointer1.compareChildNodePointers(pointer1, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointersNull_IjqR9_LSzv0_fid1() {
        JDOMNodePointer pointer1 = new JDOMNodePointer(new Object(), Locale.US);
        JDOMNodePointer pointer2 = null;
        assertEquals(1, pointer1.compareChildNodePointers(pointer1, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_NullNode_YEQL3_MgYq0_fid1() {
        JDOMNodePointer jdn = new JDOMNodePointer(null, Locale.US, "");
        try {
            jdn.getName();
            assert false;
        } catch (NullPointerException e) {
            assert true;
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLocalNameAttribute_vNrn1_wiQZ0_fid1() {
        QName attribute = new QName("test");
        assertEquals("test", JDOMNodePointer.getLocalName(attribute));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_ElementNodeWithNamespace_LUDD3_xCqn0_fid1() {
        Element jdn = new Element("namespace", "node");
        String result = new JDOMNodePointer(jdn, Locale.US).asPath();
        assertEquals("/namespace:node()", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() throws Exception {
        jdomnodepointer = new JDOMNodePointer(element, Locale.US);
        when(nodePointer1.getBaseValue()).thenReturn(node1);
        when(nodePointer2.getBaseValue()).thenReturn(node2);
        when(element.getAttributes()).thenReturn(list);
        when(list.get(0)).thenReturn(attribute);
        // Test when both nodes are same
        assertEquals(0, jdomnodepointer.compareChildNodePointers(nodePointer1, nodePointer2));
        // Test when node1 is attribute and node2 is not
        assertEquals(-1, jdomnodepointer.compareChildNodePointers(nodePointer1, nodePointer2));
        // Test when node2 is attribute and node1 is not
        assertEquals(1, jdomnodepointer.compareChildNodePointers(nodePointer2, nodePointer1));
        // Test when both nodes are attributes
        when(list.size()).thenReturn(2);
        when(list.get(0)).thenReturn(attribute);
        when(list.get(1)).thenReturn(attribute);
        assertEquals(-1, jdomnodepointer.compareChildNodePointers(nodePointer1, nodePointer2));
        // Test when node is not an element
        when(node1).thenReturn("Not an element");
        assertThrows(IllegalStateException.class, () -> jdomnodepointer.compareChildNodePointers(nodePointer1, nodePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        jdomnodepointer = new JDOMNodePointer(node, Locale.US);
        // Test equals with same object
        assertEquals(jdomnodepointer, jdomnodepointer);
        // Test equals with different object
        JDOMNodePointer jdomnodepointer2 = new JDOMNodePointer(node, Locale.US);
        assertNotEquals(jdomnodepointer, jdomnodepointer2);
        // Test equals with null
        assertNotEquals(null, jdomnodepointer);
        // Test equals with different node
        JDOMNodePointer jdomnodepointer3 = new JDOMNodePointer(new Object(), Locale.US);
        assertNotEquals(jdomnodepointer, jdomnodepointer3);
    }
}