/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationMultiply_Test_Passing {
    @Mock
    private EvalContext evalContext;
    @Mock
    private Constant constant1;
    @Mock
    private Constant constant2;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_fGpG0() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("1"), new Constant("2"));
        String symbol = coreOperationMultiply.getSymbol();
        assert symbol.equals("*");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(constant1.computeValue(evalContext)).thenReturn(10.0);
        when(constant2.computeValue(evalContext)).thenReturn(20.0);
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(constant1, constant2);
        Object result = coreOperationMultiply.computeValue(evalContext);
        assertEquals(200.0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_EkgI0() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("1"), new Constant("2"));
        assertTrue(coreOperationMultiply.isSymmetric());
    }
}