/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPropertyPointer_Test_Failing {
    private String propertyName = "*";
    @Mock
    private DOMNodePointer parent;
    @Mock
    private PropertyOwnerPointer propertyOwnerPointer;
    @Mock
    private PropertyPointer propertyPointer;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private QName qName;
    @Mock
    private NullPropertyPointer nullpropertypointer;
    @Mock
    private JXPathContext jxpathContext;
    @Mock
    private QName qname;
    @Mock
    private DOMNodePointer immediateParentPointer;
    @Mock
    private NullPropertyPointer nullPropertyPointer;
    @Mock
    private DOMNodePointer domNodePointer;
    private boolean byNameAttribute = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(parent.isContainer()).thenReturn(true);
        when(parent.isContainer()).thenReturn(false);
        when(propertyOwnerPointer.isDynamicPropertyDeclarationSupported()).thenReturn(true);
        when(propertyOwnerPointer.getPropertyPointer()).thenReturn(propertyPointer);
        Object value = "testValue";
        nullpropertypointer = new NullPropertyPointer(parent);
        nullpropertypointer.setValue(value);
        verify(propertyPointer).setPropertyName(propertyName);
        verify(propertyPointer).setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_EwUJ0() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        QName result = nullPropertyPointer.getName();
        QName expected = new QName("propertyName");
        assert result.equals(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild() throws Exception {
        MockitoAnnotations.initMocks(this);
        nullpropertypointer = new NullPropertyPointer(nodePointer);
        // Arrange
        when(jxpathContext.createPath(anyString())).thenReturn(nodePointer);
        when(qname.getName()).thenReturn("testName");
        when(qname.getPrefix()).thenReturn("testPrefix");
        // Act
        NodePointer child = nullpropertypointer.createChild(jxpathContext, qname, 0, "testValue");
        // Assert
        verify(jxpathContext).createPath(anyString());
        verify(nodePointer).createChild(jxpathContext, qname, 0, "testValue");
        assertNotNull(child);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_jmqJ0() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        JXPathContext context = JXPathContext.newContext(null, null);
        QName name = new QName("name");
        int index = 0;
        Object value = "value";
        NodePointer result = nullPropertyPointer.createChild(context, name, index, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild2_Nbmi1() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        JXPathContext context = JXPathContext.newContext(null, null);
        QName name = new QName("name", "prefix");
        int index = 1;
        Object value = new Object();
        NodePointer result = nullPropertyPointer.createChild(context, name, index, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithAttribute_teIO0_xYZs0() {
        JXPathContext context = JXPathContext.newContext(null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        NodePointer newParent = nullPropertyPointer.createPath(context);
        Object value = "testValue";
        NodePointer result = nullPropertyPointer.createPath(context, value);
        Assertions.assertTrue(result instanceof NodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithSameParent_Usxe3_JYww0() {
        JXPathContext context = JXPathContext.newContext(null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        NodePointer newParent = nullPropertyPointer.createPath(context);
        Object value = "testValue";
        try {
            nullPropertyPointer.createPath(context, value);
            Assertions.fail("Expected exception");
        } catch (Exception e) {
            Assertions.assertTrue(e instanceof Exception);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild_cmAG0_qfDV0() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        JXPathContext context = JXPathContext.newContext(null);
        QName name = new QName("name", "localName");
        NodePointer result = nullPropertyPointer.createChild(context, name, 0);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_uTys0() {
        when(immediateParentPointer.asPath()).thenReturn("parentPath/*");
        NullPropertyPointer nullpropertypointer = new NullPropertyPointer(immediateParentPointer);
        boolean byNameAttribute = false; // declare the variable
        String expectedPath = "parentPath/*";
        String actualPath = nullpropertypointer.asPath();
        assertEquals(expectedPath, actualPath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisCollection_fid2() {
        NullPropertyPointer nullpropertypointer = new NullPropertyPointer(parent);
        when(parent.getIndex()).thenReturn(1);
        this.nullpropertypointer = nullpropertypointer;
        boolean result = nullpropertypointer.isCollection();
        Assertions.assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_fid2() {
        when(immediateParentPointer.asPath()).thenReturn("parentPath");
        nullpropertypointer = new NullPropertyPointer(immediateParentPointer);
        byNameAttribute = true;
        String expectedPath = "parentPath[@name='propertyName'][1]";
        String actualPath = nullpropertypointer.asPath();
        assertEquals(expectedPath, actualPath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue_fid2() {
        nullpropertypointer = new NullPropertyPointer(domNodePointer);
        // Arrange
        Mockito.when(domNodePointer.getBaseValue()).thenReturn("Mocked Base Value");
        // Act
        Object baseValue = nullpropertypointer.getBaseValue();
        // Assert
        assertEquals("Mocked Base Value", baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_T_uyMv0_fid2() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(parent.createPath(jXPathContext)).thenReturn(parent);
        when(parent.createPath(jXPathContext)).thenReturn(parent);
        NodePointer result = nullpropertypointer.createPath(jXPathContext);
        assertEquals(parent, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_uTys0_fid2() {
        when(immediateParentPointer.asPath()).thenReturn("parentPath");
        NullPropertyPointer nullpropertypointer = new NullPropertyPointer(immediateParentPointer);
        boolean byNameAttribute = false; // declare the variable
        String expectedPath = "parentPath";
        String actualPath = nullpropertypointer.asPath();
        assertEquals(expectedPath, actualPath);
    }
}