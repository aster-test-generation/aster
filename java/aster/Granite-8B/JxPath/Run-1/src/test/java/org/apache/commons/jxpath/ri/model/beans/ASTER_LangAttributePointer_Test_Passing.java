/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LangAttributePointer_Test_Passing {
    LangAttributePointer langattributepointer;
    LangAttributePointer anotherLangAttributePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers() throws Exception {
        langattributepointer = Mockito.mock(LangAttributePointer.class);
        NodePointer pointer1 = Mockito.mock(NodePointer.class);
        NodePointer pointer2 = Mockito.mock(NodePointer.class);
        Mockito.when(langattributepointer.compareChildNodePointers(pointer1, pointer2)).thenReturn(0);
        assertEquals(0, langattributepointer.compareChildNodePointers(pointer1, pointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_XFAJ0() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(new DOMNodePointer(null, null, null));
        QName result = langAttributePointer.getName();
        assertEquals(new QName("xml", "lang"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_NullParent_usfk0() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(null);
        assertEquals("@xml:lang", langAttributePointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath_VJvr0() throws Exception {
        DOMNodePointer parent = Mockito.mock(DOMNodePointer.class);
        QName name = new QName("xml", "lang");
        LangAttributePointer langAttributePointer = new LangAttributePointer(parent);
        Mockito.when(parent.asPath()).thenReturn("/path");
    }
}