/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationUnion_Test_Passing {
    @Mock
    private EvalContext evalContext;
    @Mock
    private Expression[] expressions;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_PcXT0() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(new Expression[0]);
        String symbol = coreOperationUnion.getSymbol();
        assert symbol.equals("|");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(expressions[0].compute(evalContext)).thenReturn(evalContext);
        when(expressions[1].compute(evalContext)).thenReturn("some value");
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(expressions);
        Object result = coreOperationUnion.computeValue(evalContext);
        Assertions.assertTrue(result instanceof UnionContext);
        verify(evalContext, times(2)).getRootContext();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPrecedence_kgoO0_XvWS0() {
        CoreOperationUnion coreOperationUnion = new CoreOperationUnion(new Expression[0]);
        int result = coreOperationUnion.getPrecedence();
        assertEquals(1, result);
    }
}