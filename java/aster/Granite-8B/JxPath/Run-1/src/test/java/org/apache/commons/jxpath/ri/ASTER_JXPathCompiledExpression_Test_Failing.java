/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Failing {
    private Expression expression;
    private String xpath;
    @Mock
    private JXPathContext jxpathcontext;
    @Mock
    private JXPathContextReferenceImpl jxpathcontextreferenceimpl;
    private JXPathCompiledExpression jxpathcompiledexpression;
    @Mock
    private Iterator iterator;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        when(jxpathcontextreferenceimpl.createPath(anyString(), any(Expression.class))).thenReturn(mock(Pointer.class));
        Pointer pointer = jxpathcompiledexpression.createPath(jxpathcontext);
        verify(jxpathcontextreferenceimpl).createPath(xpath, expression);
        assertEquals(mock(Pointer.class), pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathNullContext_FWnL1() {
        JXPathCompiledExpression jxpathCompiledExpression = new JXPathCompiledExpression("xpath", new Constant("expression"));
        Pointer pointer = jxpathCompiledExpression.createPath(null);
        assert pointer == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePathAndSetValue() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        // Arrange
        Object value = "value";
        // Act
        Pointer result = jxpathcompiledexpression.createPathAndSetValue(jxpathcontext, value);
        // Assert
        verify(jxpathcontextreferenceimpl).createPathAndSetValue(xpath, expression, value);
        assertEquals(result, jxpathcontextreferenceimpl.createPathAndSetValue(xpath, expression, value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        when(jxpathcontextreferenceimpl.getValue(xpath, expression, any(Class.class))).thenReturn("value");
        assertEquals("value", jxpathcompiledexpression.getValue(jxpathcontext, String.class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointer() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        when(jxpathcontextreferenceimpl.getPointer(anyString(), any(Expression.class))).thenReturn(mock(Pointer.class));
        Pointer pointer = jxpathcompiledexpression.getPointer(jxpathcontext, xpath);
        verify(jxpathcontextreferenceimpl).getPointer(xpath, expression);
        assertEquals(mock(Pointer.class), pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointerNullContext_gDtV1() {
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("constant"));
        Pointer result = expression.getPointer(null, "xpath");
        assert result == null;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiteratePointers() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        when(jxpathcontextreferenceimpl.iteratePointers(anyString(), any(Expression.class))).thenReturn(mock(Iterator.class));
        Iterator iterator = jxpathcompiledexpression.iteratePointers(jxpathcontext);
        verify(jxpathcontextreferenceimpl).iteratePointers(xpath, expression);
        assertNotNull(iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiterate() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        when(jxpathcontextreferenceimpl.iterate(xpath, expression)).thenReturn(iterator);
        Iterator result = jxpathcompiledexpression.iterate(jxpathcontext);
        assertEquals(iterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiterate_VSug0() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcontext = mock(JXPathContext.class);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, new Constant("constant"));
        jxpathcompiledexpression.iterate(jxpathcontext);
        verify(jxpathcontext, times(1)).iteratePointers(xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void remove_tcKQ1() {
        throw new UnsupportedOperationException();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPointerNullXpath_ZomT2_QuUU0() {
        JXPathContextReferenceImpl contextReference = new JXPathContextReferenceImpl(null, null);
        JXPathContext context = JXPathContext.newContext(contextReference, null);
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", new Constant("constant"));
        Iterator result = expression.iterate(context);
        assert result == null;
    }
}