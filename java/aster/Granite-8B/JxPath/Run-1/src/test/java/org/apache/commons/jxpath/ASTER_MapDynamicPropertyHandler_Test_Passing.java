/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MapDynamicPropertyHandler_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_NgJQ0() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        String[] result = handler.getPropertyNames(map);
        String[] expected = new String[]{"key1", "key2"};
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNamesEmptyMap_CwPC1() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map<String, String> map = new HashMap<>();
        String[] result = handler.getPropertyNames(map);
        String[] expected = new String[0];
        assert Arrays.equals(result, expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_BNBl1() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map<String, Object> map = new HashMap<>();
        map.put("name", "John");
        Object result = handler.getProperty(map, "name");
        assert result.equals("John");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_dfeq0() {
        MapDynamicPropertyHandler handler = new MapDynamicPropertyHandler();
        Map map = new HashMap<>();
        Object object = map;
        handler.setProperty(object, "key", "value");
        assertEquals("value", ((Map) object).get("key"));
    }
}