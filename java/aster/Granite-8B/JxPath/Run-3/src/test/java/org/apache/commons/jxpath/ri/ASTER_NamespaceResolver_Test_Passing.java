/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NamespaceResolver_Test_Passing {
    private boolean sealed;
    private NamespaceResolver namespaceresolver;
    private NamespaceResolver parent;
    NodePointer pointer;
    private Map<String, String> reverseMap;
    private Map<String, String> namespaceMap;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSeal() {
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        namespaceresolver.seal();
        verify(parent, times(1)).seal();
        assertTrue(sealed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetNamespaceContextPointer() throws Exception {
        namespaceresolver = new NamespaceResolver();
        pointer = mock(NodePointer.class);
        namespaceresolver.setNamespaceContextPointer(pointer);
        verify(namespaceresolver).setNamespaceContextPointer(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix() throws Exception {
        namespaceresolver = new NamespaceResolver();
        NodePointer pointer = mock(NodePointer.class);
        String namespaceURI = "namespaceURI";
        when(pointer.getNamespaceURI()).thenReturn(namespaceURI);
        String prefix = NamespaceResolver.getPrefix(pointer, namespaceURI);
        assertEquals("", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNamespaceContextPointerWithNull_TXOf1() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.setNamespaceContextPointer(null);
        assertNull(resolver.pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredPrefix() {
        reverseMap = new HashMap<>();
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        reverseMap.put("namespaceURI", "prefix");
        when(parent.getExternallyRegisteredPrefix("namespaceURI")).thenReturn("parentPrefix");
        String prefix = namespaceresolver.getExternallyRegisteredPrefix("namespaceURI");
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredPrefixWhenNull() {
        reverseMap = new HashMap<>();
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        reverseMap.put("namespaceURI", null);
        when(parent.getExternallyRegisteredPrefix("namespaceURI")).thenReturn("parentPrefix");
        String prefix = namespaceresolver.getExternallyRegisteredPrefix("namespaceURI");
        assertEquals("parentPrefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredPrefixWhenNullAndParentReturnsNull() {
        reverseMap = new HashMap<>();
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        reverseMap.put("namespaceURI", null);
        when(parent.getExternallyRegisteredPrefix("namespaceURI")).thenReturn(null);
        String prefix = namespaceresolver.getExternallyRegisteredPrefix("namespaceURI");
        assertNull(prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace() throws Exception {
        namespaceresolver = new NamespaceResolver(parent);
        // Set up mock behavior
        when(parent.isSealed()).thenReturn(false);
        // Call the method under test
        namespaceresolver.registerNamespace("prefix", "namespaceURI");
        // Verify that the method was called with the expected arguments
        verify(parent).registerNamespace("prefix", "namespaceURI");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullNamespaceURI_WdGx0() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        String prefix = resolver.getExternallyRegisteredPrefix(null);
        assertEquals(null, prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonExistentNamespaceURI_gAHL1() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        String prefix = resolver.getExternallyRegisteredPrefix("non-existent-uri");
        assertEquals(null, prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExistentNamespaceURI_ZEcM2() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        resolver.reverseMap.put("existent-uri", "existent-prefix");
        String prefix = resolver.getExternallyRegisteredPrefix("existent-uri");
        assertEquals("existent-prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI() throws Exception {
        namespaceMap = new HashMap<>();
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        // arrange
        String prefix = "prefix";
        String uri = "uri";
        namespaceMap.put(prefix, uri);
        // act
        String result = namespaceresolver.getExternallyRegisteredNamespaceURI(prefix);
        // assert
        assertEquals(uri, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_NullPrefix() throws Exception {
        namespaceMap = new HashMap<>();
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        // arrange
        String prefix = null;
        String uri = "uri";
        namespaceMap.put(prefix, uri);
        // act
        String result = namespaceresolver.getExternallyRegisteredNamespaceURI(prefix);
        // assert
        assertEquals(uri, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_NullParent() throws Exception {
        namespaceMap = new HashMap<>();
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        // arrange
        namespaceresolver = new NamespaceResolver(null);
        String prefix = "prefix";
        String uri = "uri";
        namespaceMap.put(prefix, uri);
        // act
        String result = namespaceresolver.getExternallyRegisteredNamespaceURI(prefix);
        // assert
        assertEquals(uri, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExternallyRegisteredNamespaceURI_NullPrefixAndParent() throws Exception {
        namespaceMap = new HashMap<>();
        parent = mock(NamespaceResolver.class);
        namespaceresolver = new NamespaceResolver(parent);
        // arrange
        namespaceresolver = new NamespaceResolver(null);
        String prefix = null;
        String uri = "uri";
        namespaceMap.put(prefix, uri);
        // act
        String result = namespaceresolver.getExternallyRegisteredNamespaceURI(prefix);
        // assert
        assertEquals(uri, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_bMvP0_1() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", resolver.namespaceMap.get("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_bMvP0_2() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("prefix", resolver.reverseMap.get("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithSealedResolver_fooG1_1() {
        NamespaceResolver resolver = new NamespaceResolver(new NamespaceResolver());
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", resolver.namespaceMap.get("prefix"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithSealedResolver_fooG1_2() {
        NamespaceResolver resolver = new NamespaceResolver(new NamespaceResolver());
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("prefix", resolver.reverseMap.get("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullPointer_Hvuu0() {
        NamespaceResolver resolver = new NamespaceResolver();
        assertNull(resolver.getPrefix(null, "http://www.example.com"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullPrefix_MxnR0() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        String uri = resolver.getExternallyRegisteredNamespaceURI(null);
        assertEquals(null, uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyPrefix_kJfD1() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        String uri = resolver.getExternallyRegisteredNamespaceURI("");
        assertEquals(null, uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonEmptyPrefix_ezdS2() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        String uri = resolver.getExternallyRegisteredNamespaceURI("prefix");
        assertEquals(null, uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNonNullParent_hnkq4() {
        NamespaceResolver parent = new NamespaceResolver(null);
        NamespaceResolver resolver = new NamespaceResolver(parent);
        String uri = resolver.getExternallyRegisteredNamespaceURI("prefix");
        assertEquals(null, uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() {
        namespaceresolver = new NamespaceResolver(parent);
        // Set up mock behavior
        when(parent.getNamespaceURI("prefix")).thenReturn("uri");
        // Call the method under test
        String result = namespaceresolver.getNamespaceURI("prefix");
        // Assert the result
        assertEquals("uri", result);
        // Verify that the mock was called
        verify(parent).getNamespaceURI("prefix");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix1_Gsha0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String namespaceURI = "namespaceURI";
        String prefix = namespaceResolver.getPrefix(namespaceURI);
        assertEquals("prefix", prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceContextPointer_whenPointerIsNullAndParentHasNoPointer_shouldReturnNull() {
        MockitoAnnotations.openMocks(this);
        when(parent.getNamespaceContextPointer()).thenReturn(null);
        Pointer result = namespaceresolver.getNamespaceContextPointer();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_FAkQ0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String prefix = "prefix1";
        String uri = namespaceResolver.getNamespaceURI(prefix);
        assertEquals("uri1", uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_apRW1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String prefix = "prefix2";
        String uri = namespaceResolver.getNamespaceURI(prefix);
        assertEquals("uri2", uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_OJxG2() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        String prefix = "prefix3";
        String uri = namespaceResolver.getNamespaceURI(prefix);
        assertEquals("uri3", uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealed() {
        namespaceresolver = new NamespaceResolver(parent);
        sealed = false;
        when(parent.isSealed()).thenReturn(sealed);
        assertEquals(sealed, namespaceresolver.isSealed());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceContextPointer_NullPointer_XRHw0() {
        NamespaceResolver resolver = new NamespaceResolver(null);
        Pointer pointer = resolver.getNamespaceContextPointer();
        assertEquals(null, pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceContextPointer_NoParent_QUtt2() {
        NamespaceResolver resolver = new NamespaceResolver();
        Pointer pointer = resolver.getNamespaceContextPointer();
        assertEquals(null, pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealed_fCqf0() {
        NamespaceResolver namespaceResolver = new NamespaceResolver();
        boolean sealed = namespaceResolver.isSealed();
        assertTrue(sealed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSealed_gThb1() {
        NamespaceResolver namespaceResolver = new NamespaceResolver(null);
        boolean sealed = namespaceResolver.isSealed();
        assertFalse(sealed);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testClone_Bqnk0_ikmz0() {
        NamespaceResolver parent = new NamespaceResolver(null);
        NamespaceResolver resolver = new NamespaceResolver(parent);
        NamespaceResolver clonedResolver = (NamespaceResolver) resolver.clone();
        assert clonedResolver != resolver;
        assert clonedResolver.isSealed() == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespace_bMvP0() {
        NamespaceResolver resolver = new NamespaceResolver();
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", resolver.namespaceMap.get("prefix"));
        assertEquals("prefix", resolver.reverseMap.get("namespaceURI"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRegisterNamespaceWithSealedResolver_fooG1() {
        NamespaceResolver resolver = new NamespaceResolver(new NamespaceResolver());
        resolver.registerNamespace("prefix", "namespaceURI");
        assertEquals("namespaceURI", resolver.namespaceMap.get("prefix"));
        assertEquals("prefix", resolver.reverseMap.get("namespaceURI"));
    }
}