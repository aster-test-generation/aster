/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AncestorContext_Test_Passing {
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    private AncestorContext ancestorContext;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;
    @Mock
    private NodeTypeTest nodeTypeTest;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private AncestorContext ancestorcontext;
    private boolean includeSelf;
    @Mock
    private NodePointer nodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition() {
        ancestorContext = new AncestorContext(parentContext, true, nodeTest);
        // arrange
        int position = 5;
        // act
        boolean result = ancestorContext.setPosition(position);
        // assert
        verify(ancestorContext, times(1)).getCurrentPosition();
        verify(ancestorContext, times(1)).nextNode();
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() {
        ancestorContext = new AncestorContext(namespaceContext, true, nodeTypeTest);
        // Mock the behavior of the getDocumentOrder method
        when(ancestorContext.getDocumentOrder()).thenReturn(-1);
        // Assert that the getDocumentOrder method returns the expected value
        assertEquals(-1, ancestorContext.getDocumentOrder());
        // Verify that the getDocumentOrder method was called once
        verify(ancestorContext, times(1)).getDocumentOrder();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder_CYkk0() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(null, null), true, new NodeTypeTest(1));
        int documentOrder = ancestorContext.getDocumentOrder();
        assertEquals(-1, documentOrder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_WmAw0() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(null, null), true, new NodeTypeTest(0));
        ancestorContext.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_1() {
        ancestorContext = new AncestorContext(parentContext, includeSelf, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(nodeTest)).thenReturn(true);
        // Test when setStarted is false
        setStarted = false;
        boolean result = ancestorContext.nextNode();
        verify(parentContext, times(1)).getCurrentNodePointer();
        verify(nodePointer, times(1)).testNode(nodeTest);
        // Test when setStarted is true and includeSelf is true
        setStarted = true;
        includeSelf = true;
        result = ancestorContext.nextNode();
        verify(parentContext, times(2)).getCurrentNodePointer();
        verify(nodePointer, times(2)).testNode(nodeTest);
        // Test when setStarted is true and includeSelf is false
        setStarted = true;
        includeSelf = false;
        result = ancestorContext.nextNode();
        verify(parentContext, times(3)).getCurrentNodePointer();
        verify(nodePointer, times(3)).testNode(nodeTest);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_sVWN0() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(null, null), true, new NodeTypeTest(1));
        NodePointer currentNodePointer = ancestorContext.getCurrentNodePointer();
        assertNotNull(currentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_WDvr0() {
        AncestorContext ancestorContext = new AncestorContext(new NamespaceContext(null, null), true, new NodeTypeTest(0));
        boolean result = ancestorContext.nextNode();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() {
        ancestorContext = new AncestorContext(parentContext, includeSelf, nodeTest);
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.testNode(nodeTest)).thenReturn(true);
        // Test when setStarted is false
        setStarted = false;
        boolean result = ancestorContext.nextNode();
        assertTrue(result);
        verify(parentContext, times(1)).getCurrentNodePointer();
        verify(nodePointer, times(1)).testNode(nodeTest);
        // Test when setStarted is true and includeSelf is true
        setStarted = true;
        includeSelf = true;
        result = ancestorContext.nextNode();
        assertTrue(result);
        verify(parentContext, times(2)).getCurrentNodePointer();
        verify(nodePointer, times(2)).testNode(nodeTest);
        // Test when setStarted is true and includeSelf is false
        setStarted = true;
        includeSelf = false;
        result = ancestorContext.nextNode();
        assertTrue(result);
        verify(parentContext, times(3)).getCurrentNodePointer();
        verify(nodePointer, times(3)).testNode(nodeTest);
    }
}