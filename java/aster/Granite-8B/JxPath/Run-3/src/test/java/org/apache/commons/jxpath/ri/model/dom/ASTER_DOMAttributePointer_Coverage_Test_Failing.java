/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DOMAttributePointer_Coverage_Test_Failing {
    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue1_riiF0()
    {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        domAttributePointer.setValue(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue1_dGtR0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        Object value = domAttributePointer.getValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_HKmC0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        String result = domAttributePointer.getNamespaceURI();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_TXro1() {
        DOMNodePointer parent = null;
        Attr attr = null;
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        String result = domAttributePointer.getNamespaceURI();
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName1_driS0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        QName name = domAttributePointer.getName();
        assertNotNull(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_FtmV0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        domAttributePointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_Kazv1() {
        DOMNodePointer parent = null;
        Attr attr = null;
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(parent, attr);
        domAttributePointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode1_Zzjb0_fid3() {
        DOMAttributePointer DOMAttributePointer = new DOMAttributePointer(null, null);
        boolean actual = DOMAttributePointer.testNode(null);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_gQCF1_UXjD2_fid3() {
        DOMAttributePointer DOMAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), null);
        boolean actual = DOMAttributePointer.isLeaf();
        boolean expected = false;
        assertEquals(expected, actual);
    }
}