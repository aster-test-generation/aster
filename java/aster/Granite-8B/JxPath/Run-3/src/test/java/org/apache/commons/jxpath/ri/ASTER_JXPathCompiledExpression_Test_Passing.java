/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.Collections;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JXPathCompiledExpression_Test_Passing {
    private Expression expression;
    private String xpath;
    @Mock
    private JXPathContext context;
    @Mock
    private JXPathContextReferenceImpl contextReference;
    @Mock
    private Object value;
    @Mock
    private Pointer pointer;
    JXPathCompiledExpression jxpathcompiledexpression;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetXPath_uaTr0() {
        Constant constant = new Constant("xpath");
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", constant);
        assertEquals("xpath", jXPathCompiledExpression.getXPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_lDre0() {
        Constant expression = new Constant("test");
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("test", expression);
        compiledExpression.setValue(context, "new value");
        assertEquals("new value", context.getValue("test"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_rnvQ0() {
        Constant constant = new Constant("example");
        JXPathCompiledExpression expression = new JXPathCompiledExpression("xpath", constant);
        assertEquals("xpath", expression.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_HEhr0() {
        Constant expression = new Constant("test");
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("test", expression);
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = compiledExpression.createPath(context);
        assertEquals("test", pointer.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValue_Eyzw0() {
        Constant constant = new Constant("test");
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("/test", constant);
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = compiledExpression.createPathAndSetValue(context, "value");
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetValueWithRequiredType_vUcy0() {
        Constant expression = new Constant("test");
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        Object result = new JXPathCompiledExpression("test", expression).getValue(context, String.class);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetValueWithoutRequiredType_BPkJ1() {
        Constant expression = new Constant("test");
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        Object result = new JXPathCompiledExpression("test", expression).getValue(context);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetValueWithNullContext_kIWw2() {
        Constant expression = new Constant("test");
        JXPathContext context = null;
        Object result = new JXPathCompiledExpression("test", expression).getValue(context);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExpression_ktZD0() {
        Constant constant = new Constant("string");
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", constant);
        Expression expression = jXPathCompiledExpression.getExpression();
        assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExpression2_kFXS1() {
        Constant constant = new Constant(10);
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", constant);
        Expression expression = jXPathCompiledExpression.getExpression();
        assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExpression3_IsaT2() {
        Constant constant = new Constant(10.5);
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", constant);
        Expression expression = jXPathCompiledExpression.getExpression();
        assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_wVYp0() {
        Constant expression = new Constant("test");
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("test", expression);
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        Object result = compiledExpression.getValue(context);
        assertEquals("test", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testGetPointer_crPZ0() {
        JXPathContext context = mock(JXPathContext.class);
        Constant expression = mock(Constant.class);
        String xpath = "some xpath";
        Pointer pointer = new JXPathCompiledExpression(xpath, expression).getPointer(context, xpath);
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIteratePointers_WlVu0() {
        Constant expression = new Constant("expression");
        JXPathContext context = new JXPathContextReferenceImpl(null, null);
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("xpath", expression);
        Iterator iterator = compiledExpression.iteratePointers(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremovePath_kZAT0() throws Exception {
        expression = mock(Expression.class);
        xpath = "some xpath";
        when(context.getContextBean()).thenReturn(new Object());
        when(context.getParentContext()).thenReturn(contextReference);
        doNothing().when(contextReference).removePath(xpath, expression);
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        jxpathcompiledexpression.removePath(context);
        verify(contextReference, times(1)).removePath(xpath, expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath_hROT0() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        when(context.createPath(xpath)).thenReturn(pointer);
        Pointer result = jxpathcompiledexpression.createPath(context);
        assertEquals(pointer, result);
        verify(context, times(1)).createPath(xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremoveAll_ikDE0() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        JXPathContext context = mock(JXPathContext.class);
        jxpathcompiledexpression.removeAll(context);
        verify(context).removeAll(xpath);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExpression4_Zqnf3_LuVQ0() {
        Constant constant = new Constant(String.valueOf(true));
        JXPathCompiledExpression jXPathCompiledExpression = new JXPathCompiledExpression("xpath", constant);
        Expression expression = jXPathCompiledExpression.getExpression();
        assertNotNull(expression);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testiteratePointers_vlyH0() throws Exception {
        expression = mock(Expression.class);
        xpath = "xpath";
        jxpathcompiledexpression = new JXPathCompiledExpression(xpath, expression);
        context = mock(JXPathContext.class);
        when(context.iteratePointers(xpath)).thenReturn(Collections.emptyList().iterator());
        Iterator iterator = jxpathcompiledexpression.iteratePointers(context);
        assertEquals(Collections.emptyList().iterator(), iterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterate_LYjS0_mNSv0() {
        Constant constant = new Constant("test");
        JXPathCompiledExpression compiledExpression = new JXPathCompiledExpression("test", constant);
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Iterator iterator = compiledExpression.iterate(context);
    }
}