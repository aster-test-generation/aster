/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void nodeNameTest_Yayr0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qname = new Object(); // Replace with actual parameter value
        Object expectedResult = new Object(); // Replace with expected result
        Object actualResult = treeCompiler.nodeNameTest(qname);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testAnd_BNoA0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[2];
        arguments[0] = "value1";
        arguments[1] = "value2";
        Object result = treeCompiler.and(arguments);
        assertEquals("value1 && value2", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_zGtf0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object argument = new Object(); // Replace with the correct type
        Object expectedResult = new CoreOperationNegate((Expression) argument);
        Object actualResult = treeCompiler.minus(argument);
        assertEquals(expectedResult, actualResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_juVf0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        int nodeType = 0; // Replace with the desired value
        Object result = treeCompiler.nodeTypeTest(nodeType);
        assertNotNull(result);
        assertTrue(result instanceof NodeTypeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQname_XOkS0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        String prefix = "prefix";
        String name = "name";
        Object expected = new QName(prefix, name);
        Object actual = treeCompiler.qname(prefix, name);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_oZTg0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[1];
        Object[] steps = new Object[1];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_KWFu0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] args = new Object[0];
        Object result = treeCompiler.function(0, args);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLiteral_nAGy0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.literal("example");
        assertEquals(new Constant("example"), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_qxai0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Integer(5);
        Object right = new Integer(3);
        Object result = treeCompiler.minus(left, right);
        assertEquals(2, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_bRQJ0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qName = new Object(); // Replace with actual value
        Object result = treeCompiler.variableReference(qName);
        assertNotNull(result);
        assertEquals(VariableReference.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationPath_AkTW0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        boolean absolute = true;
        Object[] steps = new Object[0];
        Object result = treeCompiler.locationPath(absolute, steps);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSum_sCWl0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = {1, 2, 3};
        Object result = treeCompiler.sum(arguments);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSumWithEmptyArray_cTkN1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = {};
        Object result = treeCompiler.sum(arguments);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSumWithOneElementArray_SocD2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = {5};
        Object result = treeCompiler.sum(arguments);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSumWithNegativeNumbers_lyxq3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = {-1, -2, -3};
        Object result = treeCompiler.sum(arguments);
        assertEquals(-6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSumWithFloatingPointNumbers_CnBX4() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = {1.5, 2.5, 3.5};
        Object result = treeCompiler.sum(arguments);
        assertEquals(7.5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSumWithStrings_dbua5() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = {"a", "b", "c"};
        Object result = treeCompiler.sum(arguments);
        assertEquals("abc", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSumWithNullValues_VbkI6() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = {null, null, null};
        Object result = treeCompiler.sum(arguments);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThan_vxNY0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Integer(10);
        Object right = new Integer(20);
        Object result = treeCompiler.lessThan(left, right);
        Assertions.assertTrue(result instanceof CoreOperationLessThan);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanWithNullLeft_fAKm1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = null;
        Object right = new Integer(20);
        Object result = treeCompiler.lessThan(left, right);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanWithNullRight_bFJb2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Integer(10);
        Object right = null;
        Object result = treeCompiler.lessThan(left, right);
        Assertions.assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanWithSameValues_Flqp3() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Integer(10);
        Object right = new Integer(10);
        Object result = treeCompiler.lessThan(left, right);
        Assertions.assertFalse((boolean) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLessThanWithLeftGreaterThanRight_iqWR4() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object left = new Integer(20);
        Object right = new Integer(10);
        Object result = treeCompiler.lessThan(left, right);
        Assertions.assertTrue((boolean) result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_FChx0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.number("10");
        assertEquals(new Constant(Double.valueOf("10")), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunction_Tdhw0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object name = new Object();
        Object[] args = new Object[0];
        Object result = treeCompiler.function(name, args);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_juVf0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        int nodeType = 0; // Replace with the desired value
        Object result = treeCompiler.nodeTypeTest(nodeType);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNodeTypeTest_juVf0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        int nodeType = 0; // Replace with the desired value
        Object result = treeCompiler.nodeTypeTest(nodeType);
        assertTrue(result instanceof NodeTypeTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_bRQJ0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qName = new Object(); // Replace with actual value
        Object result = treeCompiler.variableReference(qName);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariableReference_bRQJ0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object qName = new Object(); // Replace with actual value
        Object result = treeCompiler.variableReference(qName);
        assertEquals(VariableReference.class, result.getClass());
    }
}