/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PredicateContext_Test_Passing {
    private Expression nameTestExpression;
    private PropertyPointer dynamicPropertyPointer;
    @Mock
    private Expression mockNameTestExpression;
    @Mock
    private PropertyPointer mockDynamicPropertyPointer;
    private boolean done = false;
    private NamespaceContext parentContext;
    private NodeTypeTest nodeTest;
    private Constant expression;
    private PredicateContext predicatecontext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testreset() throws Exception {
        parentContext = mock(NamespaceContext.class);
        nodeTest = mock(NodeTypeTest.class);
        expression = mock(Constant.class);
        predicatecontext = new PredicateContext(parentContext, expression);
        predicatecontext.reset();
        verify(parentContext, times(1)).reset();
        verify(predicatecontext, times(1)).reset();
        assertEquals(false, done);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() throws Exception {
        predicatecontext = new PredicateContext(parentContext, expression);
        when(parentContext.nextNode()).thenReturn(true, false);
        when(expression.computeValue(parentContext)).thenReturn(true);
        assertTrue(predicatecontext.nextNode());
        verify(parentContext, times(1)).nextNode();
        verify(expression, times(1)).computeValue(parentContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_XLMi0() {
        PredicateContext predicateContext = new PredicateContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new Constant(""));
        boolean result = predicateContext.setPosition(0);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_ehne1() {
        PredicateContext predicateContext = new PredicateContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new Constant(""));
        boolean result = predicateContext.setPosition(1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_RHyD2() {
        PredicateContext predicateContext = new PredicateContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new Constant(""));
        boolean result = predicateContext.setPosition(100);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition4_fBQJ3() {
        PredicateContext predicateContext = new PredicateContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new Constant(""));
        boolean result = predicateContext.setPosition(-1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_Daks0() {
        PredicateContext predicateContext = new PredicateContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new Constant(""));
        predicateContext.setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCurrentNodePointer() throws Exception {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        NodeTypeTest nodeTest = mock(NodeTypeTest.class);
        Constant expression = mock(Constant.class);
        predicatecontext = new PredicateContext(parentContext, expression);
        when(parentContext.getCurrentNodePointer()).thenReturn(mock(NodePointer.class));
        NodePointer currentNodePointer = predicatecontext.getCurrentNodePointer();
        assertNotNull(currentNodePointer);
        verify(parentContext, times(1)).getCurrentNodePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_tQtq0() {
        SelfContext selfContext = new SelfContext(null, null);
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        Constant expression = new Constant("string");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        boolean result = predicateContext.nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode2_WWFd1() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet() throws Exception {
        predicatecontext = new PredicateContext(parentContext, expression);
        // Mock the behavior of the parentContext.nextSet() method
        when(parentContext.nextSet()).thenReturn(true);
        // Call the nextSet() method on the predicatecontext object
        boolean result = predicatecontext.nextSet();
        // Verify that the result is true
        assertTrue(result);
        // Verify that the parentContext.nextSet() method was called
        verify(parentContext).nextSet();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextSet_vXxH0() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(0));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(0));
        Constant expression = new Constant("expression");
        PredicateContext predicateContext = new PredicateContext(namespaceContext, expression);
        boolean result = predicateContext.nextSet();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_NoDynamicPropertyPointer_NoParentContext_pYQt0() {
        PredicateContext context = new PredicateContext(null, null);
        NodePointer nodePointer = mock(NodePointer.class);
        when(nodePointer.getImmediateNode()).thenReturn(new Object());
        NodePointer result = context.getCurrentNodePointer();
        assertEquals(nodePointer, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_NoDynamicPropertyPointer_WithParentContext_KiiI1() {
        NamespaceContext parentContext = mock(NamespaceContext.class);
        PredicateContext context = new PredicateContext(parentContext, null);
        NodePointer nodePointer = mock(NodePointer.class);
        when(nodePointer.getImmediateNode()).thenReturn(new Object());
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        NodePointer result = context.getCurrentNodePointer();
        assertEquals(nodePointer, result);
    }
}