/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.jdom.Namespace;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNamespaceIterator_Test_Passing {
    private int position = 0;
    private JDOMNamespaceIterator jdomnamespaceiterator;
    @Mock
    private List namespaces;
    @Mock
    private NodePointer parent;
    @Mock
    private Namespace namespace;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPosition() throws Exception {
        jdomnamespaceiterator = new JDOMNamespaceIterator(Mockito.mock(DOMNodePointer.class));
        // Arrange
        int expectedPosition = 0;
        // Act
        int actualPosition = jdomnamespaceiterator.getPosition();
        // Assert
        assertEquals(expectedPosition, actualPosition);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition_IsGp0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        JDOMNamespaceIterator iterator = new JDOMNamespaceIterator(parent);
        assertEquals(0, iterator.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_GeoN0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        JDOMNamespaceIterator jDOMNamespaceIterator = new JDOMNamespaceIterator(domNodePointer);
        boolean result = jDOMNamespaceIterator.setPosition(0);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_iEQs1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        JDOMNamespaceIterator jDOMNamespaceIterator = new JDOMNamespaceIterator(domNodePointer);
        boolean result = jDOMNamespaceIterator.setPosition(1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_Jsjd2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        JDOMNamespaceIterator jDOMNamespaceIterator = new JDOMNamespaceIterator(domNodePointer);
        boolean result = jDOMNamespaceIterator.setPosition(-1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition4_Caxu3() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        JDOMNamespaceIterator jDOMNamespaceIterator = new JDOMNamespaceIterator(domNodePointer);
        boolean result = jDOMNamespaceIterator.setPosition(10);
        assertFalse(result);
    }
}