/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Function;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RootContext_Test_Passing {
    @Mock
    private DOMNodePointer pointer;
    @Mock
    private JXPathContextReferenceImpl jxpathContext;
    private RootContext rootcontext;
    @Mock
    private Locale locale;
    @Mock
    private VariablePointer parent;
    @Mock
    private KeywordVariables variables;
    @Mock
    private JXPathContextReferenceImpl parentContext;
    @Mock
    private Object contextBean;
    @Mock
    private NodePointer contextPointer;
    @Mock
    private QName name;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private EvalContext evalContext;
    @Mock
    private RootContext rootContext;
    @Mock
    private KeywordVariables keywordVariables;
    private static int MAX_REGISTER = 4;
    private int availableRegister = 0;
    private Object[] registers;
    @Mock
    private QName variableName;
    @Mock
    private Object constant;
    @Mock
    private Object object;
    @Mock
    private EvalContext absoluteRootContext;
    @Mock
    private EvalContext variableContext;
    @Mock
    private Function function;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private JXPathContextReferenceImpl jxpathContextReferenceImpl;
    @Mock
    private QName qName;
    @Mock
    private VariablePointer variablePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetAbsoluteRootContext() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        rootcontext = new RootContext(jxpathContext, null);
        EvalContext evalContext = mock(EvalContext.class);
        when(jxpathContext.getAbsoluteRootContext()).thenReturn(evalContext);
        EvalContext result = rootcontext.getAbsoluteRootContext();
        verify(jxpathContext, times(1)).getAbsoluteRootContext();
        assertEquals(evalContext, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_NqZQ0() {
        RootContext rootContext = new RootContext(null, null);
        boolean result = rootContext.nextNode();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_ZQCF0() {
        RootContext rootContext = new RootContext(null, null);
        Object value = rootContext.getValue();
        assertNotNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetFunction() throws Exception {
        jxpathContext = mock(JXPathContextReferenceImpl.class);
        rootcontext = new RootContext(jxpathContext, null);
        Function function = mock(Function.class);
        when(jxpathContext.getFunction(any(QName.class), any(Object[].class))).thenReturn(function);
        Function result = rootcontext.getFunction(null, null);
        assertEquals(function, result);
        verify(jxpathContext, times(1)).getFunction(any(QName.class), any(Object[].class));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetVariableContext_JBCW0() {
        RootContext rootContext = new RootContext(null, null);
        EvalContext evalContext = rootContext.getVariableContext(null);
        assertNotNull(evalContext);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction_XGUi0() {
        RootContext rootContext = new RootContext(null, null);
        QName functionName = new QName("functionName");
        Object[] parameters = new Object[0];
        Function function = rootContext.getFunction(functionName, parameters);
        assertNotNull(function);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor1_dRuo3() {
        QName qName = new QName("qualifiedName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor2_tWKX4() {
        QName qName = new QName("prefix", "localName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor1_aBwo9() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor2_eRWI10() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariablesConstructor1_Ytuq12() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRegisteredValue_LuvX0() {
        RootContext rootContext = new RootContext(null, null);
        assertEquals(0, rootContext.setRegisteredValue(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRegisteredValue1_HoNH1() {
        RootContext rootContext = new RootContext(null, null);
        assertEquals(1, rootContext.setRegisteredValue(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRegisteredValue2_rBnk2() {
        RootContext rootContext = new RootContext(null, null);
        assertEquals(2, rootContext.setRegisteredValue(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRegisteredValue3_zZLF3() {
        RootContext rootContext = new RootContext(null, null);
        assertEquals(3, rootContext.setRegisteredValue(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue_3() throws Exception {
        rootcontext = new RootContext(Mockito.mock(JXPathContextReferenceImpl.class), Mockito.mock(DOMNodePointer.class));
        registers = new Object[MAX_REGISTER];
        registers[0] = new Object();
        registers[1] = new Object();
        registers[2] = new Object();
        registers[3] = new Object();
        // Test when id is within the range of registered values
        for (int i = 0;i < MAX_REGISTER;i++) {
        }
        // Test when id is out of range
        for (int i = MAX_REGISTER;i < MAX_REGISTER * 2;i++) {
        }
        // Test when id is -1
        assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(-1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_hSHU0() {
        RootContext rootContext = new RootContext(null, new DOMNodePointer(null, null, null));
        NodePointer currentNodePointer = rootContext.getCurrentNodePointer();
        assertNotNull(currentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetJXPathContext() {
        rootContext = new RootContext(jxpathContext, pointer);
        // Test the getJXPathContext method
        when(jxpathContext.getParentContext()).thenReturn(null);
        assertEquals(jxpathContext, rootContext.getJXPathContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAbsoluteRootContext() {
        rootContext = new RootContext(jxpathContext, pointer);
        // Test the getAbsoluteRootContext method
        when(rootContext.getJXPathContext()).thenReturn(jxpathContext);
        when(jxpathContext.getAbsoluteRootContext()).thenReturn(absoluteRootContext);
        assertEquals(absoluteRootContext, rootContext.getAbsoluteRootContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunction() {
        rootContext = new RootContext(jxpathContext, pointer);
        // Test the getFunction method
        when(rootContext.getJXPathContext()).thenReturn(jxpathContext);
        when(jxpathContext.getFunction(Mockito.any(), Mockito.any())).thenReturn(function);
        assertEquals(function, rootContext.getFunction(Mockito.any(), Mockito.any()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRootContext_dGFk0() {
        RootContext rootContext = new RootContext(null, null);
        assertEquals(rootContext, rootContext.getRootContext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentPosition_wSLu0() {
        RootContext rootContext = new RootContext(null, null);
        int currentPosition = rootContext.getCurrentPosition();
        assertEquals(0, currentPosition);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDOMNodePointerConstructor1_jFJz0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor1_nGBV3() {
        QName qName = new QName(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQNameConstructor2_XRNM4() {
        QName qName = new QName(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathContextReferenceImplConstructor2_RetV8() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor1_kaTy9() {
        VariablePointer variablePointer = new VariablePointer(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointerConstructor2_yCQE10() {
        VariablePointer variablePointer = new VariablePointer(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariablesConstructor1_AWHN12() {
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRootContextConstructor1_Sktp13() {
        RootContext rootContext = new RootContext(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetRegisteredValue() throws Exception {
        rootcontext = new RootContext(Mockito.mock(JXPathContextReferenceImpl.class), Mockito.mock(DOMNodePointer.class));
        registers = new Object[MAX_REGISTER];
        registers[0] = new Object();
        registers[1] = new Object();
        registers[2] = new Object();
        registers[3] = new Object();
        // Test when id is within the range of registered values
        for (int i = 0;i < MAX_REGISTER;i++) {
            assertEquals(registers[i], rootcontext.getRegisteredValue(i));
        }
        // Test when id is out of range
        for (int i = MAX_REGISTER;i < MAX_REGISTER * 2;i++) {
            assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(i));
        }
        // Test when id is -1
        assertEquals(RootContext.UNKNOWN_VALUE, rootcontext.getRegisteredValue(-1));
    }
}