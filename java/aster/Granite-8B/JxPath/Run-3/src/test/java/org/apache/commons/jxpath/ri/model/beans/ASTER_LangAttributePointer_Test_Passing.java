/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_LangAttributePointer_Test_Passing {
    private LangAttributePointer langattributepointer;
    private NodePointer parent;
    private NodePointer pointer1;
    private NodePointer pointer2;
    DOMNodePointer domNodePointer;
    QName qName;
    VariablePointer variablePointer;
    KeywordVariables keywordVariables;
    @Mock
    private Locale locale;
    @Mock
    private KeywordVariables variables;
    private QName name;
    private LangAttributePointer langAttributePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() {
        domNodePointer = mock(DOMNodePointer.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        langattributepointer = new LangAttributePointer(domNodePointer);
        // Test when object is not an instance of LangAttributePointer
        // Test when object is an instance of LangAttributePointer
        LangAttributePointer langattributepointer2 = new LangAttributePointer(domNodePointer);
        // Test when object is an instance of LangAttributePointer with different parent
        LangAttributePointer langattributepointer3 = new LangAttributePointer(mock(DOMNodePointer.class));
        assertFalse(langattributepointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() {
        domNodePointer = mock(DOMNodePointer.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        langattributepointer = new LangAttributePointer(domNodePointer);
        // Test when object is not an instance of LangAttributePointer
        // Test when object is an instance of LangAttributePointer
        LangAttributePointer langattributepointer2 = new LangAttributePointer(domNodePointer);
        // Test when object is an instance of LangAttributePointer with different parent
        LangAttributePointer langattributepointer3 = new LangAttributePointer(mock(DOMNodePointer.class));
        assertTrue(langattributepointer.equals(langattributepointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() {
        domNodePointer = mock(DOMNodePointer.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        langattributepointer = new LangAttributePointer(domNodePointer);
        // Test when object is not an instance of LangAttributePointer
        // Test when object is an instance of LangAttributePointer
        LangAttributePointer langattributepointer2 = new LangAttributePointer(domNodePointer);
        // Test when object is an instance of LangAttributePointer with different parent
        LangAttributePointer langattributepointer3 = new LangAttributePointer(mock(DOMNodePointer.class));
        assertFalse(langattributepointer.equals(langattributepointer3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() throws Exception {
        langattributepointer = new LangAttributePointer(parent);
        // Mock the behavior of the setValue method
        doNothing().when(langattributepointer).setValue(any());
        // Call the setValue method with a mock value
        langattributepointer.setValue(locale);
        // Verify that the setValue method was called with the expected value
        verify(langattributepointer).setValue(locale);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_OWDk0() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(new DOMNodePointer(null, null, null));
        boolean result = langAttributePointer.isCollection();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName() {
        langAttributePointer = new LangAttributePointer(parent);
        when(parent.getName()).thenReturn(new QName("xml", "lang"));
        assertEquals(new QName("xml", "lang"), langAttributePointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath() {
        langattributepointer = new LangAttributePointer(parent);
        when(parent.asPath()).thenReturn("/parent/path");
        assertEquals("/parent/path/@xml:lang", langattributepointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLangAttributePointerGetNamespaceURI2_cXQx1() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(new VariablePointer(new QName("name")));
        String namespaceURI = langAttributePointer.getNamespaceURI();
        assertNotNull(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLangAttributePointerGetNamespaceURI3_anip2() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name")));
        String namespaceURI = langAttributePointer.getNamespaceURI();
        assertNotNull(namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_PFUq0() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(new DOMNodePointer(null, null, null));
        String path = langAttributePointer.asPath();
        assert path.equals("@xml:lang");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValueWithKeywordVariables_aOxv3() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        LangAttributePointer langAttributePointer = new LangAttributePointer(new VariablePointer(keywordVariables, new QName("name")));
        assertEquals("keyword", langAttributePointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValueWithPrefixAndLocalName_QSrP4() {
        LangAttributePointer langAttributePointer = new LangAttributePointer(new VariablePointer(new QName("prefix", "localName")));
        assertEquals("prefix_localName", langAttributePointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() {
        parent = mock(DOMNodePointer.class);
        pointer1 = mock(NodePointer.class);
        pointer2 = mock(NodePointer.class);
        langattributepointer = new LangAttributePointer(parent);
        when(pointer1.getName()).thenReturn(new QName("name1"));
        when(pointer2.getName()).thenReturn(new QName("name2"));
        int result = langattributepointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() {
        domNodePointer = mock(DOMNodePointer.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        langattributepointer = new LangAttributePointer(domNodePointer);
        // Test when object is not an instance of LangAttributePointer
        assertFalse(langattributepointer.equals(new Object()));
        // Test when object is an instance of LangAttributePointer
        LangAttributePointer langattributepointer2 = new LangAttributePointer(domNodePointer);
        assertTrue(langattributepointer.equals(langattributepointer2));
        // Test when object is an instance of LangAttributePointer with different parent
        LangAttributePointer langattributepointer3 = new LangAttributePointer(mock(DOMNodePointer.class));
        assertFalse(langattributepointer.equals(langattributepointer3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        parent = mock(DOMNodePointer.class);
        locale = mock(Locale.class);
        when(locale.toString()).thenReturn("en_US");
        when(parent.getLocale()).thenReturn(locale);
        langattributepointer = new LangAttributePointer(parent);
        String expected = "en-US";
        String actual = (String) langattributepointer.getBaseValue();
        assertEquals(expected, actual);
    }
}