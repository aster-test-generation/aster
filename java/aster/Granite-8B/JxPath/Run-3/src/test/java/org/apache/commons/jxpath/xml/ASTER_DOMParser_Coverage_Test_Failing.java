/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.xml;

import java.io.InputStream;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DOMParser_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithValidatingTrue_QckA0() {
        DOMParser domParser = new DOMParser();
        domParser.setValidating(true);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithValidatingFalse_fiSx1() {
        DOMParser domParser = new DOMParser();
        domParser.setValidating(false);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithNamespaceAwareTrue_gGXF2() {
        DOMParser domParser = new DOMParser();
        domParser.setNamespaceAware(true);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithNamespaceAwareFalse_cDbn3() {
        DOMParser domParser = new DOMParser();
        domParser.setNamespaceAware(false);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithIgnoringElementContentWhitespaceTrue_TCUQ4() {
        DOMParser domParser = new DOMParser();
        domParser.setIgnoringElementContentWhitespace(true);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithIgnoringElementContentWhitespaceFalse_DbLn5() {
        DOMParser domParser = new DOMParser();
        domParser.setIgnoringElementContentWhitespace(false);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithExpandEntityReferencesTrue_knbY6() {
        DOMParser domParser = new DOMParser();
        domParser.setExpandEntityReferences(true);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithExpandEntityReferencesFalse_DxBU7() {
        DOMParser domParser = new DOMParser();
        domParser.setExpandEntityReferences(false);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithIgnoringCommentsTrue_psUU8() {
        DOMParser domParser = new DOMParser();
        domParser.setIgnoringComments(true);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithIgnoringCommentsFalse_ebxp9() {
        DOMParser domParser = new DOMParser();
        domParser.setIgnoringComments(false);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithCoalescingTrue_SlOQ10() {
        DOMParser domParser = new DOMParser();
        domParser.setCoalescing(true);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithCoalescingFalse_ubxg11() {
        DOMParser domParser = new DOMParser();
        domParser.setCoalescing(false);
        InputStream stream = null;
        domParser.parseXML(stream);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLWithInputStream_sXwb12() {
        DOMParser domParser = new DOMParser();
        InputStream stream = null;
        domParser.parseXML(stream);
    }
}