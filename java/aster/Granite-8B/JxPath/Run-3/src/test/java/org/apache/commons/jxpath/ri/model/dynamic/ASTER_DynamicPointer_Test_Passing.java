/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPointer_Test_Passing {
    private static final Locale LOCALE = Locale.getDefault();
    private static final String KEYWORD = "keyword";
    private static final Object BEAN = new Object();
    private static final PageContextHandler HANDLER = new PageContextHandler();
    private static final QName NAME = new QName("name");
    private DynamicPointer dynamicpointer;
    private Object bean;
    private QName name;
    @Mock
    private QName mockName;
    @Mock
    private QName nameMock;
    @Mock
    private Object beanMock;
    @Mock
    private PageContextHandler handlerMock;
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private Locale locale;
    private DynamicPointer dynamicPointer;
    @Mock
    private KeywordVariables variables;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicPropertyDeclarationSupported() {
        dynamicpointer = new DynamicPointer(NAME, BEAN, HANDLER, LOCALE);
        boolean result = dynamicpointer.isDynamicPropertyDeclarationSupported();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        dynamicpointer = new DynamicPointer(nameMock, beanMock, handlerMock, Locale.getDefault());
        when(nameMock.hashCode()).thenReturn(1);
        when(beanMock.hashCode()).thenReturn(2);
        int hashCode = dynamicpointer.hashCode();
        assertEquals(3, hashCode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_aYPL0() {
        DynamicPointer dynamicPointer = new DynamicPointer(new DOMNodePointer(null, null, null), null, null, null);
        int result = dynamicPointer.hashCode();
        assertEquals(System.identityHashCode(null), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateNodeIterator() throws Exception {
        dynamicpointer = new DynamicPointer(Mockito.mock(QName.class), Mockito.mock(Object.class), Mockito.mock(PageContextHandler.class), Mockito.mock(Locale.class));
        NodeIterator actualCreateNodeIteratorResult = dynamicpointer.createNodeIterator("testString", true, Mockito.mock(NodePointer.class));
        NodeIterator expectedCreateNodeIteratorResult = new PropertyIterator(dynamicpointer, "testString", true, Mockito.mock(NodePointer.class));
        assertEquals(expectedCreateNodeIteratorResult, actualCreateNodeIteratorResult);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_IwhH0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String actual = domNodePointer.asPath();
        assertEquals("/", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName1_QqyS2() {
        QName qName = new QName("test");
        assertEquals("test", qName.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName2_VIIs3() {
        QName qName = new QName("prefix", "test");
        assertEquals("{prefix}test", qName.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer1_POME5() {
        QName qName = new QName("test");
        VariablePointer variablePointer = new VariablePointer(qName);
        assertEquals("test", variablePointer.getName().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_rwFM6() {
        KeywordVariables keywordVariables = new KeywordVariables("test", null);
        QName qName = new QName("test");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        assertEquals("test", variablePointer.getName().toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPagehandler1_JHad7() {
        PageContextHandler pageContextHandler = new PageContextHandler();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDynamicPointer1_sFNG8() {
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler pageContextHandler = new PageContextHandler();
        Locale locale = Locale.getDefault();
        DynamicPointer dynamicPointer = new DynamicPointer(qName, bean, pageContextHandler, locale);
        assertEquals("/", dynamicPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDynamicPointer2_uwvm9() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        QName qName = new QName("test");
        Object bean = new Object();
        PageContextHandler pageContextHandler = new PageContextHandler();
        DynamicPointer dynamicPointer = new DynamicPointer(domNodePointer, qName, bean, pageContextHandler);
        assertEquals("/", dynamicPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_wcaO0_fixed_YeCy1() {
        NodePointer parent = new DOMNodePointer(null, null, null);
        DynamicPointer dynamicPointer = new DynamicPointer(parent, null, null, null);
        int length = dynamicPointer.getLength();
        assertEquals(1, length);
    }
}