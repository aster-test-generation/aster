/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.servlet;

import java.util.Enumeration;
import java.util.HashSet;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletContext;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ServletContextHandler_Test_Passing {
    private static int DEFAULT_PROPERTY_COUNT = 16;
    private ServletContextHandler servletContextHandler;
    private ServletContext servletContext;
    ServletContextHandler servletcontexthandler;
    HashSet<String> set;
    Enumeration<String> e;
    HttpSessionAndServletContext httpSessionAndServletContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_BoGL0() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        Object context = new Object();
        String[] propertyNames = servletContextHandler.getPropertyNames(context);
        assertNotNull(propertyNames);
        assertNotEquals(0, propertyNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetProperty_DUpo0() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        String property = "exampleProperty";
        Object expected = "exampleValue";
        Object actual = servletContextHandler.getProperty(expected, property);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetProperty() throws Exception {
        servletContext = mock(ServletContext.class);
        servletcontexthandler = new ServletContextHandler();
        servletcontexthandler.setProperty(servletContext, "property", "value");
        verify(servletContext, times(1)).setAttribute("property", "value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcollectPropertyNames() throws Exception {
        set = new HashSet<>();
        servletContext = mock(ServletContext.class);
        httpSessionAndServletContext = mock(HttpSessionAndServletContext.class);
        when(httpSessionAndServletContext.getServletContext()).thenReturn(servletContext);
        servletContextHandler = new ServletContextHandler();
        when(servletContext.getAttributeNames()).thenReturn(e);
        servletContextHandler.collectPropertyNames(set, httpSessionAndServletContext);
        verify(servletContext, times(1)).getAttributeNames();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_BoGL0_1() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        Object context = new Object();
        String[] propertyNames = servletContextHandler.getPropertyNames(context);
        assertNotNull(propertyNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_BoGL0_2() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        Object context = new Object();
        String[] propertyNames = servletContextHandler.getPropertyNames(context);
        assertNotEquals(0, propertyNames.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetProperty_chcq0_BMbW0() {
        ServletContextHandler servletContextHandler = new ServletContextHandler();
        String property = "testProperty";
        String value = "testValue";
        servletContextHandler.setProperty(Mockito.mock(ServletContext.class), property, value);
        assertEquals("testValue", ((ServletContext) new MockServletContext()).getAttribute(property));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void collectPropertyNames(final HashSet set, Object bean)
    {
        if (bean instanceof HttpSessionAndServletContext) {
            bean = ((HttpSessionAndServletContext) bean).getServletContext();
        }
        final Enumeration e = ((ServletContext) bean).getAttributeNames();
        while (e.hasMoreElements()) {
            set.add(e.nextElement());
        }
    }
}