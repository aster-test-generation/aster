/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreFunction_Coverage_Test_Failing {
    public void testAssertArgCount_eGdJ0() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
        try {
        } catch (Exception e) {
        }
    }

    public void testStringValue_VTxD1() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    }

    public void testGetSingleNodePointer_ABcr2() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    }

    public void testIsLanguage_sxim3() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    }

    public void testFunctionLang_kKov4() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    }

    public void testFunctionName1_KayY0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName2_JmYY1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
    }

    public void testFunctionName3_AxoD2() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName4_iJiU3() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName5_HQul4() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName6_AQCa5() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName7_QDCS6() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName8_MbGp7() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName9_vGUE8() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName10_WGfC9() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName11_iroB10() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionSum1_OHFD0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
    }

    public void testFunctionSum2_PQde1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        assertNotEquals(null, result);
    }

    public void testFunctionSum3_fHhF2() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        assertTrue(result instanceof EvalContext);
    }

    public void testFunctionSum4_TKGe3() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum5_zyzv4() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertNotEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum6_sAku5() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertTrue(result instanceof Double);
    }

    public void testFunctionSum7_lrIR6() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum8_eviY7() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertNotEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum9_YUPR8() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertTrue(result instanceof Double);
    }

    public void testFunctionSum10_OCNY9() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum11_vtkc10() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertNotEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum12_eNxK11() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNot1_zLrE0() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[]{});
        assertEquals(Boolean.FALSE, coreFunction.functionNot(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionNot2_gCCV1() {
        CoreFunction coreFunction = new CoreFunction(1, new Expression[]{});
        assertEquals(Boolean.TRUE, coreFunction.functionNot(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_FxtN0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String actual = coreFunction.toString();
        String expected = "toString()";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInfoSetUtilDoubleValue_jEtE1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        try {
            coreFunction.getArg1().computeValue(null);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsNan_VYMF2() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        try {
            coreFunction.functionCeiling(null);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringValue_rHAp1() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        Object arg1 = new Object();
        Object value = coreFunction.getArg1().computeValue(null);
        String s = InfoSetUtil.stringValue(value);
        assert s.equals(arg1.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToCharArray_rITI2() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        Object arg1 = new Object();
        Object value = coreFunction.getArg1().computeValue(null);
        String s = InfoSetUtil.stringValue(value);
        char[] chars = s.toCharArray();
        assert chars.length == arg1.toString().length();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOut_eaeK3() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        Object arg1 = new Object();
        Object value = coreFunction.getArg1().computeValue(null);
        String s = InfoSetUtil.stringValue(value);
        char[] chars = s.toCharArray();
        int out = 0;
        for (int in = 0;in < chars.length;in++) {
            out++;
        }
        assert out == arg1.toString().length();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPhase_VpVE4() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        Object arg1 = new Object();
        Object value = coreFunction.getArg1().computeValue(null);
        String s = InfoSetUtil.stringValue(value);
        char[] chars = s.toCharArray();
        int phase = 0;
        for (int in = 0;in < chars.length;in++) {
            if (chars[in] != ' ') {
                phase = 1;
            }
        }
        assert phase == 1 || phase == 2;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testForLoop_Fhiz5() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        Object arg1 = new Object();
        Object value = coreFunction.getArg1().computeValue(null);
        String s = InfoSetUtil.stringValue(value);
        char[] chars = s.toCharArray();
        int out = 0;
        int phase = 0;
        for (int in = 0;in < chars.length;in++) {
            if (chars[in] != ' ') {
                phase = 1;
            }
            if (phase == 1) {
                out++;
            }
        }
        assert out == arg1.toString().length();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchCase_pBAE6() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        Object arg1 = new Object();
        Object value = coreFunction.getArg1().computeValue(null);
        String s = InfoSetUtil.stringValue(value);
        char[] chars = s.toCharArray();
        int out = 0;
        int phase = 0;
        for (int in = 0;in < chars.length;in++) {
            switch (chars[in]) {
                case ' ':
                case '\t':
                case '\r':
                case '\n':
                    if (phase == 1) {
                        phase = 2;
                        chars[out++] = ' ';
                    }
                    break;
                default:
                    chars[out++] = chars[in];
                    phase = 1;
            }
        }
        assert phase == 2 || phase == 1;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent1_OaGH0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent4_qwCX3() {
        CoreFunction coreFunction = new CoreFunction(3, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent5_vYpN4() {
        CoreFunction coreFunction = new CoreFunction(4, null);
        assertTrue(coreFunction.computeContextDependent());
    }
}