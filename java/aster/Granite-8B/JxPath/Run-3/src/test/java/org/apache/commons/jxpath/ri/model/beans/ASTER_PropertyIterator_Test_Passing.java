/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.*;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PropertyIterator_Test_Passing {
    private int position = 0;
    private PropertyIterator propertyiterator;
    private DOMNodePointer parent;
    private KeywordVariables variables;
    private Locale locale;
    private Class clazz;
    private Class dynamicPropertyHandlerClass;
    private String qualifiedName;
    private String prefix;
    private String localName;
    private String keyword;
    private Object object;
    private String name;
    private boolean reverse;
    private DOMNodePointer startWith;
    private QName qName;
    private Object bean;
    private JXPathBasicBeanInfo beanInfo;
    @Mock
    private BeanPointer beanPointer;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;
    @Mock
    private DOMNodePointer domNodePointer;
    private boolean targetReady = false;
    @Mock
    private VariablePointer variablePointer;
    private PropertyPointer propertyNodePointer;
    private boolean includeStart = false;
    private int startIndex = 0;
    private boolean empty = false;
    private int startPropertyIndex;
    @Mock
    private PropertyPointer propertyNodePointerMock;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private Pointer pointer;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private AbstractFactory abstractFactory;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionAllProperties_EcPg2() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        boolean result = propertyIterator.setPosition(1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionAllProperties2_ESkk3() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        boolean result = propertyIterator.setPosition(0);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_sEtu1() {
        QName qName = new QName("qualifiedName");
        qName = new QName("prefix", "localName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer_fzLU2() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariables_VkQk4() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testprepareForIndividualProperty() {
        propertyiterator = new PropertyIterator(null, null, false, null);
        name = "testName";
        includeStart = false;
        propertyNodePointer = propertyNodePointerMock;
        startIndex = 0;
        targetReady = false;
        empty = false;
        reverse = false;
        startPropertyIndex = 0;
        // Mock the behavior of the propertyNodePointer
        when(propertyNodePointerMock.getPropertyNames()).thenReturn(new String[]{"testName", "otherName"});
        // Call the method under test
        propertyiterator.prepareForIndividualProperty(name);
        // Verify the behavior of the method
        verify(propertyNodePointerMock, times(1)).setPropertyIndex(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition_UJoF0() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_rVWP1() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_bXnD2() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition4_rkDs3() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(3);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition5_aONy4() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(4);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition6_yJil5() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(5);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition7_Vlhd6() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(6);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition8_pGOG7() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(7);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition9_HinN8() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(8);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition10_ygyi9() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(9);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition11_CMOK10() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(10);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition12_MTCy11() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(11);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition13_SxKp12() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(12);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition14_hzny13() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(13);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition15_eyfN14() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(14);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition16_klwY15() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(15);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition17_ZtIR16() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(16);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition18_ekrt17() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(17);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition19_EhdA18() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(18);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition20_nQDf19() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(19);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition21_WJrS20() {
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.setPosition(20);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrepareForIndividualProperty1_Uoqr0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        PropertyIterator propertyIterator = new PropertyIterator(null, null, false, null);
        propertyIterator.prepareForIndividualProperty("name");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrepareForIndividualProperty2_eKNP1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        PropertyIterator propertyIterator = new PropertyIterator(null, null, true, null);
        propertyIterator.prepareForIndividualProperty("name");
    }
}