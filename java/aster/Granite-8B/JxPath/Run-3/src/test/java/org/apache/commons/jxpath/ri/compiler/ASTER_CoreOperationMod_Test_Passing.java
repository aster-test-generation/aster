/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CoreOperationMod_Test_Passing {
    @Mock
    private EvalContext context;
    @Mock
    private Constant arg1;
    @Mock
    private Constant arg2;
    private CoreOperationMod coreoperationmod;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() {
        coreoperationmod = new CoreOperationMod(arg1, arg2);
        // Mock the behavior of the computeValue method
        when(arg1.computeValue(context)).thenReturn(10.0);
        when(arg2.computeValue(context)).thenReturn(3.0);
        // Call the computeValue method and assert the result
        assertEquals(1.0, coreoperationmod.computeValue(context));
        // Verify that the computeValue method was called with the correct arguments
        verify(arg1).computeValue(context);
        verify(arg2).computeValue(context);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSymbol_FkDw0() {
        CoreOperationMod coreOperationMod = new CoreOperationMod(new Constant("string"), new Constant(1));
        String result = coreOperationMod.getSymbol();
        assertEquals("mod", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrecedence_Odlc0() {
        CoreOperationMod coreOperationMod = new CoreOperationMod(new Constant("string"), new Constant(1));
        int result = coreOperationMod.getPrecedence();
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric_CIcP0() {
        CoreOperationMod coreOperationMod = new CoreOperationMod(new Constant("string"), new Constant(1));
        boolean result = coreOperationMod.isSymmetric();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric2_dMkZ1() {
        CoreOperationMod coreOperationMod = new CoreOperationMod(new Constant(1), new Constant(1));
        boolean result = coreOperationMod.isSymmetric();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric3_GicD2() {
        CoreOperationMod coreOperationMod = new CoreOperationMod(new Constant(1), new Constant("string"));
        boolean result = coreOperationMod.isSymmetric();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSymmetric4_cdTq3() {
        CoreOperationMod coreOperationMod = new CoreOperationMod(new Constant("string"), new Constant("string"));
        boolean result = coreOperationMod.isSymmetric();
        assertTrue(result);
    }
}