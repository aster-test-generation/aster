/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DOMNodePointer_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers1_qzOs0() {
        DOMNodePointer pointer1 = new DOMNodePointer(null, null, null);
        DOMNodePointer pointer2 = new DOMNodePointer(null, null, null);
        int actual = pointer1.compareChildNodePointers(pointer2, pointer2);
        assertEquals(0, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers2_XIHh1() {
        DOMNodePointer pointer1 = new DOMNodePointer(null, null, null);
        DOMNodePointer pointer2 = new DOMNodePointer(null, null, null);
        int actual = pointer1.compareChildNodePointers(pointer1, pointer2);
        assertEquals(0, actual);
    }

    @Test
    @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers3_tcQn2() {
        DOMNodePointer pointer1 = new DOMNodePointer(null, null, null);
        DOMNodePointer pointer2 = new DOMNodePointer(null, null, null);
        int actual = pointer1.compareChildNodePointers(pointer2, pointer1);
        assertEquals(1, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers4_jHKh3() {
        DOMNodePointer pointer1 = new DOMNodePointer(null, null, null);
        DOMNodePointer pointer2 = new DOMNodePointer(null, null, null);
        int actual = pointer1.compareChildNodePointers(pointer1, pointer1);
        assertEquals(0, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute1_bvDe0() {
        Node n = null;
        String attrName = "";
        String result = DOMNodePointer.findEnclosingAttribute(n, attrName);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceResolver_HCyZ0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        domNodePointer.getNamespaceResolver();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test3_OKBO2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = domNodePointer.getNamespaceURI("xml");
        assertEquals(DOMNodePointer.XML_NAMESPACE_URI, namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test4_LDTF3() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = domNodePointer.getNamespaceURI("xmlns");
        assertEquals(DOMNodePointer.XMLNS_NAMESPACE_URI, namespaceURI);
    }
}