/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.jdom.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JDOMNodePointer_Coverage_Test_Passing {
    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue_dYDz1() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName2_wBLx1() {
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(null, null, "");
        jDOMNodePointer.getName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullPrefix_YTjJ0() {
        final Object node = new Element("element");
        final String prefix = JDOMNodePointer.getPrefix(node);
        assertEquals(null, prefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForElementNode_uHjL0() {
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(new Element("root"), Locale.ENGLISH);
        boolean isLeaf = jDOMNodePointer.isLeaf();
        assertTrue(isLeaf);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForDocumentNode_ixQG1() {
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(new Document(new Element("root")), Locale.ENGLISH);
        boolean isLeaf = jDOMNodePointer.isLeaf();
        assertFalse(isLeaf);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafForNonElementNode_vbjl4() {
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(new Text("text"), Locale.ENGLISH);
        boolean isLeaf = jDOMNodePointer.isLeaf();
        assertTrue(isLeaf);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_mCwe0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.getDefault());
        try {
            pointer.remove();
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithNode_kwWu1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), Locale.getDefault(), "id");
        try {
            pointer.remove();
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithParent_BHtW2() {
        JDOMNodePointer parent = new JDOMNodePointer(new Object(), Locale.getDefault());
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Object());
        try {
            pointer.remove();
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveWithParentAndNode_BzPG3() {
        JDOMNodePointer parent = new JDOMNodePointer(new Object(), Locale.getDefault(), "id");
        JDOMNodePointer pointer = new JDOMNodePointer(parent, new Object());
        try {
            pointer.remove();
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocalNameForElement_gyCR0() {
        Element element = new Element("example");
        String localName = JDOMNodePointer.getLocalName(element);
        assertEquals("example", localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocalNameForAttribute_QOpK1() {
        Attribute attribute = new Attribute("example", "value");
        String localName = JDOMNodePointer.getLocalName(attribute);
        assertEquals("example", localName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_FzDQ0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        String result = pointer.getNamespaceURI("xml");
        assertEquals("http://www.w3.org/XML/1998/namespace", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_ZQNf1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Object(), new Locale("en"));
        String result = pointer.getNamespaceURI("test");
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute1_pqyv0() {
        final Object n = null;
        final String attrName = "";
        final Namespace ns = null;
        final String attr = JDOMNodePointer.findEnclosingAttribute(n, attrName, ns);
        assertEquals(null, attr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindEnclosingAttribute2_yjmP1() {
        final Object n = new Object();
        final String attrName = "";
        final Namespace ns = null;
        final String attr = JDOMNodePointer.findEnclosingAttribute(n, attrName, ns);
        assertEquals(null, attr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_UKyf1() {
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(null, null, null);
        jDOMNodePointer.asPath();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testChildIterator_DGbE0_Rgvm0() {
        JDOMNodePointer nodePointer = new JDOMNodePointer(null, null, null);
        NodeIterator iterator = nodePointer.childIterator(null, false, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueForCommentNode_MqCv1_kNrv0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Comment("comment"), Locale.getDefault());
        String result = (String) pointer.getValue();
        assertEquals("comment", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueForProcessingInstructionNode_QNGj2_frqj0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new ProcessingInstruction("target", "data"), Locale.getDefault());
        String result = (String) pointer.getValue();
        assertEquals("data", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueForTextNode_GGxx3_HEKy0() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("text"), Locale.getDefault());
        String result = (String) pointer.getValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueForTextNode_GGxx3_HStN1() {
        JDOMNodePointer pointer = new JDOMNodePointer(new Text("text"), Locale.getDefault());
        String result = (String) pointer.getValue();
        assertEquals("text", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueForDocumentNode_LISe7_veHL7() {
        Document document = new Document(new Element("root"));
        JDOMNodePointer pointer = new JDOMNodePointer(document, Locale.getDefault());
        String result = (String) pointer.getValue();
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamespaceResolverForDocumentNode_ixQG1_ixyn0() {
        JDOMNodePointer jDOMNodePointer = new JDOMNodePointer(new Document(new Element("root")), Locale.ENGLISH);
        NamespaceResolver namespaceResolver = jDOMNodePointer.getNamespaceResolver();
        assertNotNull(namespaceResolver);
    }
}