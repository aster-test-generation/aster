/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullElementPointer_Test_Passing {
    @Mock
    private DOMNodePointer parent;
    @Mock
    private KeywordVariables variables;
    @Mock
    private QName name;
    private NullElementPointer nullelementpointer;
    @Mock
    private Locale locale;
    private static final Locale LOCALE = Locale.getDefault();
    private static final String QUALIFIED_NAME = "qualifiedName";
    private static final String PREFIX = "prefix";
    private static final String LOCAL_NAME = "localName";
    private static final String KEYWORD = "keyword";
    private static final Object OBJECT = new Object();
    private static final String XPATH = "xpath";
    private static final Object VALUE = new Object();
    private static final String ID = "id";
    private static final String KEY = "key";
    private static final String VALUE_2 = "value2";
    private static final Class REQUIRED_TYPE = String.class;
    private static final String NAMESPACE_URI = "namespaceURI";
    private static final String PREFIX_1 = "prefix1";
    private static final String NAMESPACE_URI_1 = "namespaceURI1";
    private DOMNodePointer parentPointer;
    @Mock
    private PropertyPointer propertyPointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() {
        nullelementpointer = new NullElementPointer(parent, 0);
        // Test when object is same
        // Test when object is not same but has same parent and index
        NullElementPointer other = new NullElementPointer(parent, 0);
        // Test when object is not same but has different parent and index
        NullElementPointer differentParent = new NullElementPointer(null, 1);
        // Test when object is not same but has same parent and different index
        NullElementPointer differentIndex = new NullElementPointer(parent, 1);
        // Test when object is not same and is not instanceof NullElementPointer
        assertTrue(nullelementpointer.equals(nullelementpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() {
        nullelementpointer = new NullElementPointer(parent, 0);
        // Test when object is same
        // Test when object is not same but has same parent and index
        NullElementPointer other = new NullElementPointer(parent, 0);
        // Test when object is not same but has different parent and index
        NullElementPointer differentParent = new NullElementPointer(null, 1);
        // Test when object is not same but has same parent and different index
        NullElementPointer differentIndex = new NullElementPointer(parent, 1);
        // Test when object is not same and is not instanceof NullElementPointer
        assertTrue(nullelementpointer.equals(other));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() {
        nullelementpointer = new NullElementPointer(parent, 0);
        // Test when object is same
        // Test when object is not same but has same parent and index
        NullElementPointer other = new NullElementPointer(parent, 0);
        // Test when object is not same but has different parent and index
        NullElementPointer differentParent = new NullElementPointer(null, 1);
        // Test when object is not same but has same parent and different index
        NullElementPointer differentIndex = new NullElementPointer(parent, 1);
        // Test when object is not same and is not instanceof NullElementPointer
        assertFalse(nullelementpointer.equals(differentParent));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() {
        nullelementpointer = new NullElementPointer(parent, 0);
        // Test when object is same
        // Test when object is not same but has same parent and index
        NullElementPointer other = new NullElementPointer(parent, 0);
        // Test when object is not same but has different parent and index
        NullElementPointer differentParent = new NullElementPointer(null, 1);
        // Test when object is not same but has same parent and different index
        NullElementPointer differentIndex = new NullElementPointer(parent, 1);
        // Test when object is not same and is not instanceof NullElementPointer
        assertFalse(nullelementpointer.equals(differentIndex));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_5() {
        nullelementpointer = new NullElementPointer(parent, 0);
        // Test when object is same
        // Test when object is not same but has same parent and index
        NullElementPointer other = new NullElementPointer(parent, 0);
        // Test when object is not same but has different parent and index
        NullElementPointer differentParent = new NullElementPointer(null, 1);
        // Test when object is not same but has same parent and different index
        NullElementPointer differentIndex = new NullElementPointer(parent, 1);
        // Test when object is not same and is not instanceof NullElementPointer
        assertFalse(nullelementpointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() {
        nullelementpointer = new NullElementPointer(parent, 0);
        // Mock the behavior of the setValue method
        doNothing().when(nullelementpointer).setValue(Mockito.any());
        // Call the setValue method and verify that it throws UnsupportedOperationException
        Assertions.assertThrows(UnsupportedOperationException.class, () -> nullelementpointer.setValue("test"));
        verify(nullelementpointer).setValue("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 0);
        when(parent.getValuePointer()).thenReturn(new NullPointer(parent, name));
        NodePointer valuePointer = nullelementpointer.getValuePointer();
        assertEquals(new NullPointer(parent, name), valuePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_fYzC0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 0;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        Object value = new Object();
        try {
            nullElementPointer.setValue(value);
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            assertEquals("Collection element does not exist: " + nullElementPointer, e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuePointer_iuTT0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
        NodePointer valuePointer = nullElementPointer.getValuePointer();
        assertNotNull(valuePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        nullelementpointer = new NullElementPointer(parent, 0);
        when(parent.isCollection()).thenReturn(true);
        assertTrue(nullelementpointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Zehf0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 0;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        boolean result = nullElementPointer.isCollection();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 0);
        Mockito.when(nullelementpointer.getImmediateNode()).thenReturn(null);
        Assertions.assertNull(nullelementpointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullElementPointerGetImmediateNode_vGDx0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 0;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        Object immediateNode = nullElementPointer.getImmediateNode();
        assertNull(immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testisContainer() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 0);
        when(parent.isContainer()).thenReturn(true);
        assertTrue(nullelementpointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_owvr0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 0;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        boolean result = nullElementPointer.isContainer();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() {
        nullelementpointer = new NullElementPointer(parentPointer, 0);
        when(parentPointer.hashCode()).thenReturn(123);
        assertEquals(123, nullelementpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_fxbu0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 0;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        QName name = nullElementPointer.getName();
        assertNull(name);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        nullelementpointer = new NullElementPointer(parent, 0);
        // Assert that the getLength method returns 0
        assertEquals(0, nullelementpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_OLbh0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 0;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        assertEquals("", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_vJVh1() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 1;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        assertEquals("[2]", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath3_vhCv2() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 2;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        assertEquals("[3]", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath4_ZEaO3() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 3;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        assertEquals("[4]", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath5_aaYe4() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 4;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        assertEquals("[5]", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath6_xqWZ5() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 5;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        assertEquals("[6]", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath7_PnFA6() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 6;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        assertEquals("[7]", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath8_RAmP7() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 7;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        assertEquals("[8]", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath9_DxPL8() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 8;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        assertEquals("[9]", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath10_QwFw9() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        int index = 9;
        NullElementPointer nullElementPointer = new NullElementPointer(parent, index);
        assertEquals("[10]", nullElementPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        nullelementpointer = new NullElementPointer(parent, 0);
        when(parent.isLeaf()).thenReturn(true);
        assertTrue(nullelementpointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_maki0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
        boolean actual = nullElementPointer.isActual();
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_OGdP0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NullElementPointer nullElementPointer = new NullElementPointer(domNodePointer, 0);
        boolean isLeaf = nullElementPointer.isLeaf();
        assertTrue(isLeaf);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() {
        nullelementpointer = new NullElementPointer(parent, 0);
        // Test when object is same
        assertTrue(nullelementpointer.equals(nullelementpointer));
        // Test when object is not same but has same parent and index
        NullElementPointer other = new NullElementPointer(parent, 0);
        assertTrue(nullelementpointer.equals(other));
        // Test when object is not same but has different parent and index
        NullElementPointer differentParent = new NullElementPointer(null, 1);
        assertFalse(nullelementpointer.equals(differentParent));
        // Test when object is not same but has same parent and different index
        NullElementPointer differentIndex = new NullElementPointer(parent, 1);
        assertFalse(nullelementpointer.equals(differentIndex));
        // Test when object is not same and is not instanceof NullElementPointer
        assertFalse(nullelementpointer.equals(new Object()));
    }
}