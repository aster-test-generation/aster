/**
 * Generated by Aster
 */
package org.apache.commons.jxpath;

import java.beans.PropertyDescriptor;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathBasicBeanInfo_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomic_YjMD0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, true);
        boolean result = jXPathBasicBeanInfo.isAtomic();
        assert result == true;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomicWithFalse_aAqj1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, false);
        boolean result = jXPathBasicBeanInfo.isAtomic();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsAtomicWithNull_OfoI2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, null);
        boolean result = jXPathBasicBeanInfo.isAtomic();
        assert result == false;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDynamicPropertyHandlerClass_NeDN0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, true);
        Class actual = jXPathBasicBeanInfo.getDynamicPropertyHandlerClass();
        Class expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDynamicPropertyHandlerClass2_YJTE1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, false);
        Class actual = jXPathBasicBeanInfo.getDynamicPropertyHandlerClass();
        Class expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDynamicPropertyHandlerClass3_aoye2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class);
        Class actual = jXPathBasicBeanInfo.getDynamicPropertyHandlerClass();
        Class expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDynamicPropertyHandlerClass4_acUy3() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
        Class actual = jXPathBasicBeanInfo.getDynamicPropertyHandlerClass();
        Class expected = null;
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_Ezip0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(String.class, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString2_cyvQ1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Integer.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString3_dlfb2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Float.class, Float.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_LkZZ3() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Double.class, Boolean.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicWithDynamicPropertyHandlerClassNotNull_Zutk0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, String.class);
        boolean actual = jXPathBasicBeanInfo.isDynamic();
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDynamicWithDynamicPropertyHandlerClassNull_xXSY1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class);
        boolean actual = jXPathBasicBeanInfo.isDynamic();
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors_xeuL0_1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, false);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class);
        propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
        propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors_xeuL0_2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, false);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class);
        propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
        propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertEquals(0, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithEmptyArray_rCJD2_1() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, false);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithEmptyArray_rCJD2_2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, false);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertEquals(0, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptors_xeuL0() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, false);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
        assertEquals(0, propertyDescriptors.length);
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class);
        propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
        assertEquals(0, propertyDescriptors.length);
        jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, Object.class);
        propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
        assertEquals(0, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyDescriptorsWithEmptyArray_rCJD2() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Object.class, false);
        PropertyDescriptor[] propertyDescriptors = jXPathBasicBeanInfo.getPropertyDescriptors();
        assertNotNull(propertyDescriptors);
        assertEquals(0, propertyDescriptors.length);
    }
}