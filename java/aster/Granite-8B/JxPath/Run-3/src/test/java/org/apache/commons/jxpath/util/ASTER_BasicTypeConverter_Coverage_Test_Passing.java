/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_BasicTypeConverter_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection1_MKSt0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class type = List.class;
        Collection actual = converter.allocateCollection(type);
        Collection expected = new ArrayList();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateCollection2_cbxF1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Class type = Set.class;
        Collection actual = converter.allocateCollection(type);
        Collection expected = new HashSet();
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithAbstractClass_ZpXL1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canCreateCollection(AbstractList.class);
        assert !result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithClassWithNoArgConstructor_yINQ2() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canCreateCollection(ArrayList.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithClassWithPrivateArgConstructor_jJRT3() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canCreateCollection(LinkedList.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithClassWithProtectedArgConstructor_KdYq4() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canCreateCollection(Vector.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithClassWithPackageArgConstructor_dvdI5() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canCreateCollection(Stack.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithClassWithPublicArgConstructor_Gkaj6() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canCreateCollection(HashSet.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithClassWithMultipleArgConstructors_tdUn7() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canCreateCollection(TreeSet.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanCreateCollectionWithClassWithNoArgConstructorAndOtherConstructors_Refc8() throws Exception {
        BasicTypeConverter converter = new BasicTypeConverter();
        boolean result = converter.canCreateCollection(HashMap.class);
        assert result;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvertStringToPrimitive_YmVC0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Object result = converter.convertStringToPrimitive("true", Boolean.class);
        assertEquals(true, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert1_GZrx0() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(null, null);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert3_NdYE2() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert("", String.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert4_RBVJ3() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(true, Boolean.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert5_bbum4() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(1, Number.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert6_VzHB5() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(1, Byte.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert7_RFYc6() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(new Object(), Object.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert8_HARp7() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(new Object(), String.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert9_iRAg8() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(new Object(), Boolean.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert10_efnS9() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(new Object(), Character.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert11_GYEM10() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(new Object(), Byte.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert12_DVuz11() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(new Object(), Short.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert13_xVeQ12() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(new Object(), Integer.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert14_RCTx13() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(new Object(), Long.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert15_loVj14() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(new Object(), Float.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert16_WYpF15() {
        BasicTypeConverter instance = new BasicTypeConverter();
        boolean expResult = true;
        boolean result = instance.canConvert(new Object(), Double.class);
        assertEquals(expResult, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberByte_dUwD0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.5);
        assertEquals(Byte.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberByte_dUwD0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.5);
        assertEquals((byte) 10, result.byteValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_toKd1_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.5);
        assertEquals(Short.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_toKd1_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.5);
        assertEquals((short) 10, result.shortValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_FncC2_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.5);
        assertEquals(Integer.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_FncC2_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.5);
        assertEquals(10, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_ZuzB3_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.5);
        assertEquals(Long.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_ZuzB3_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.5);
        assertEquals(10L, result.longValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_UzBD4_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.5);
        assertEquals(Float.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_UzBD4_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.5);
        assertEquals(10.5f, result.floatValue(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_TfAc5_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.5);
        assertEquals(Double.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_TfAc5_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.5);
        assertEquals(10.5, result.doubleValue(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_Zqet6_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.5);
        assertEquals(BigInteger.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_Zqet6_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.5);
        assertEquals(BigInteger.valueOf(10L), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_HHGS7_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10.5);
        assertEquals(BigDecimal.class, result.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_HHGS7_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10.5);
        assertEquals(BigDecimal.valueOf(10.5), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionCollection_QYuo3_SUms0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertTrue(unmodifiableCollection instanceof Collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionCollection_QYuo3_SUms0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> collection = new ArrayList<>();
        collection.add("a");
        collection.add("b");
        collection.add("c");
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(collection);
        assertTrue(unmodifiableCollection instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionEmpty_nKkz5_droR0_1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> emptyCollection = new ArrayList<>();
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(emptyCollection);
        assertTrue(unmodifiableCollection instanceof Collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnmodifiableCollectionEmpty_nKkz5_droR0_2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Collection<String> emptyCollection = new ArrayList<>();
        Collection<String> unmodifiableCollection = converter.unmodifiableCollection(emptyCollection);
        assertTrue(unmodifiableCollection instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberByte_dUwD0() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Byte.class, 10.5);
        assertEquals(Byte.class, result.getClass());
        assertEquals((byte) 10, result.byteValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberShort_toKd1() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Short.class, 10.5);
        assertEquals(Short.class, result.getClass());
        assertEquals((short) 10, result.shortValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberInteger_FncC2() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Integer.class, 10.5);
        assertEquals(Integer.class, result.getClass());
        assertEquals(10, result.intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberLong_ZuzB3() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Long.class, 10.5);
        assertEquals(Long.class, result.getClass());
        assertEquals(10L, result.longValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberFloat_UzBD4() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Float.class, 10.5);
        assertEquals(Float.class, result.getClass());
        assertEquals(10.5f, result.floatValue(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberDouble_TfAc5() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(Double.class, 10.5);
        assertEquals(Double.class, result.getClass());
        assertEquals(10.5, result.doubleValue(), 0.001);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigInteger_Zqet6() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigInteger.class, 10.5);
        assertEquals(BigInteger.class, result.getClass());
        assertEquals(BigInteger.valueOf(10L), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAllocateNumberBigDecimal_HHGS7() {
        BasicTypeConverter converter = new BasicTypeConverter();
        Number result = converter.allocateNumber(BigDecimal.class, 10.5);
        assertEquals(BigDecimal.class, result.getClass());
        assertEquals(BigDecimal.valueOf(10.5), result);
    }
}