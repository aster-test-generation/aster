/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreOperationMultiply_Coverage_Test_Passing {
    {
    }

    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSymbol_RGXa0() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("string"), new Constant(1));
        assertEquals("*", coreOperationMultiply.getSymbol());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithZeroLeftArgument_EZim0() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant(0), new Constant(1));
        assertEquals(0.0, coreOperationMultiply.computeValue(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithZeroRightArgument_fofL1() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant(1), new Constant(0));
        assertEquals(0.0, coreOperationMultiply.computeValue(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeValueWithNonZeroArguments_dvpq2() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant(2), new Constant(3));
        assertEquals(6.0, coreOperationMultiply.computeValue(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrecedence_LctQ0_fid1() {
        CoreOperationMultiply coreOperationMultiply = new CoreOperationMultiply(new Constant("string"), new Constant(10));
    }
}