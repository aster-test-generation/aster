/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MethodLookupUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testMatchParameterTypes1_sSkw0() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorExactMatch_vsPg10_1() {
        Constructor<String> constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"test"});
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorExactMatch_vsPg10_2() {
        Constructor<String> constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"test"});
        assertEquals(String.class, constructor.getParameterTypes()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorNullActualType_XbzJ14_1() {
        Constructor<String> constructor = MethodLookupUtils.lookupConstructor(String.class, null);
        assertNotNull(constructor);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullParameters_kmJd0() {
        Method method = MethodLookupUtils.lookupMethod(null, "test", null);
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullTargetClass_ZCtb1() {
        Method method = MethodLookupUtils.lookupMethod(null, "test", new Object[]{});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullMethodName_ARsO2() {
        Method method = MethodLookupUtils.lookupMethod(String.class, null, new Object[]{});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithEmptyMethodName_tvdA3() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "", new Object[]{});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullParametersArray_BIxZ4() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "test", null);
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithEmptyParametersArray_evuf5() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "test", new Object[]{});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullFirstParameter_Qdvs6() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "test", new Object[]{null});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullSecondParameter_fjsW7() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "test", new Object[]{"", null});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNullThirdParameter_FeEj8() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "test", new Object[]{"", "", null});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupMethodWithNoMatchingMethod_bqpC9() {
        Method method = MethodLookupUtils.lookupMethod(String.class, "test", new Object[]{"", "", ""});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLookupStaticMethod3_mXWO2() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "concat", null);
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLookupStaticMethod4_HBaJ3() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{null});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLookupStaticMethod5_tueT4() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"", null});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLookupStaticMethod6_Sxyk5() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"", ""});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLookupStaticMethod7_oHaP6() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"", "a"});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLookupStaticMethod8_mgcZ7() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", ""});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testLookupStaticMethod9_KIxe8() {
        Method method = MethodLookupUtils.lookupStaticMethod(String.class, "concat", new Object[]{"a", "b"});
        assertEquals(null, method);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLookupConstructorExactMatch_vsPg10() {
        Constructor<String> constructor = MethodLookupUtils.lookupConstructor(String.class, new Object[]{"test"});
        assertNotNull(constructor);
        assertEquals(String.class, constructor.getParameterTypes()[0]);
    }
}