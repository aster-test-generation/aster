/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.w3c.dom.Attr;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_DOMAttributePointer_Coverage_Test_Passing {
    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers_ebCz0() {
        DOMAttributePointer DOMAttributePointer = new DOMAttributePointer(null, null);
        int actual = DOMAttributePointer.compareChildNodePointers(null, null);
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode1_Zzjb0() {
        DOMAttributePointer DOMAttributePointer = new DOMAttributePointer(null, null);
        boolean actual = DOMAttributePointer.testNode(null);
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_gQCF0() {
        DOMAttributePointer DOMAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), null);
        DOMAttributePointer.hashCode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_CYnS0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        boolean actual = domAttributePointer.isActual();
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode2_Zqen1_Sdmn0() {
        DOMAttributePointer DOMAttributePointer = new DOMAttributePointer(null, null);
        NodeTypeTest nodeTypeTest = new NodeTypeTest(0);
        boolean actual = DOMAttributePointer.testNode(nodeTypeTest);
        boolean expected = false;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf1_Zzjb0_vstC0() {
        DOMAttributePointer DOMAttributePointer = new DOMAttributePointer(null, null);
        boolean actual = DOMAttributePointer.isLeaf();
        boolean expected = true;
        Assertions.assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue1_dGtR0_eTQI0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        Attr attr = mock(Attr.class);
        when(attr.getNodeValue()).thenReturn("test");
        DOMNodePointer parent = mock(DOMNodePointer.class);
        when(parent.getNode()).thenReturn(attr);
        domAttributePointer = new DOMAttributePointer(parent, attr);
        Object value = domAttributePointer.getValue();
        assertEquals("test", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_qskY0_jEht0() {
        DOMAttributePointer DOMAttributePointer = new DOMAttributePointer(null, null);
        boolean leaf = DOMAttributePointer.isLeaf();
        assertTrue(leaf);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_CYnS0_QtAh0() {
        DOMAttributePointer domAttributePointer = new DOMAttributePointer(null, null);
        boolean actual = domAttributePointer.isLeaf();
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_gQCF0_Patw0() {
        DOMAttributePointer DOMAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), null);
        int actual = DOMAttributePointer.hashCode();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_gQCF0_lZOS1() {
        DOMAttributePointer DOMAttributePointer = new DOMAttributePointer(new DOMNodePointer(null, null, null), null);
        boolean actual = DOMAttributePointer.isLeaf();
        boolean expected = true;
        assertEquals(expected, actual);
    }
}