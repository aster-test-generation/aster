/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AttributeContext_Test_Passing {
    AttributeContext attributecontext;
    NamespaceContext namespaceContext;
    NodeTypeTest nodeTypeTest;
    private NodeIterator iterator;
    private boolean setStarted = false;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    private NodePointer currentNodePointer;
    @Mock
    private NodePointer rootNode;
    @Mock
    private Locale locale;
    @Mock
    private JXPathContext context;
    @Mock
    private Pointer pointer;
    @Mock
    private NodeSet nodeSet;
    @Mock
    private Object value;
    @Mock
    private String key;
    @Mock
    private String value1;
    @Mock
    private String prefix;
    @Mock
    private String id;
    @Mock
    private String namespaceURI;
    @Mock
    private String namespaceURI1;
    @Mock
    private String namespaceURI2;
    @Mock
    private String namespaceURI3;
    @Mock
    private String namespaceURI4;
    @Mock
    private String namespaceURI5;
    @Mock
    private String namespaceURI6;
    @Mock
    private String namespaceURI7;
    @Mock
    private String namespaceURI8;
    @Mock
    private String namespaceURI9;
    @Mock
    private String namespaceURI10;
    @Mock
    private String namespaceURI11;
    @Mock
    private String namespaceURI12;
    @Mock
    private String namespaceURI13;
    @Mock
    private String namespaceURI14;
    @Mock
    private String namespaceURI15;
    @Mock
    private String namespaceURI16;
    @Mock
    private String namespaceURI17;
    @Mock
    private String namespaceURI18;
    @Mock
    private String namespaceURI19;
    @Mock
    private String namespaceURI20;
    @Mock
    private String namespaceURI21;
    @Mock
    private String namespaceURI22;
    @Mock
    private String namespaceURI23;
    @Mock
    private String namespaceURI24;
    @Mock
    private String namespaceURI25;
    @Mock
    private String namespaceURI26;
    @Mock
    private String namespaceURI27;
    @Mock
    private String namespaceURI28;
    @Mock
    private String namespaceURI29;
    @Mock
    private String namespaceURI30;
    @Mock
    private String namespaceURI31;
    @Mock
    private String namespaceURI32;
    @Mock
    private String namespaceURI33;
    @Mock
    private String namespaceURI34;
    @Mock
    private String namespaceURI35;
    @Mock
    private String namespaceURI36;
    @Mock
    private String namespaceURI37;
    @Mock
    private String namespaceURI38;
    @Mock
    private String namespaceURI39;
    @Mock
    private String namespaceURI40;
    @Mock
    private String namespaceURI41;
    @Mock
    private String namespaceURI42;
    @Mock
    private String namespaceURI43;
    @Mock
    private String namespaceURI44;
    @Mock
    private String namespaceURI45;
    @Mock
    private String namespaceURI46;
    @Mock
    private String namespaceURI47;
    @Mock
    private String namespaceURI48;
    @Mock
    private String namespaceURI49;
    @Mock
    private String namespaceURI50;
    @Mock
    private String namespaceURI51;
    @Mock
    private String namespaceURI52;
    @Mock
    private String namespaceURI53;
    @Mock
    private String namespaceURI54;
    @Mock
    private String namespaceURI55;
    @Mock
    private String namespaceURI56;
    @Mock
    private String namespaceURI57;
    @Mock
    private String namespaceURI58;
    @Mock
    private String namespaceURI59;
    @Mock
    private String namespaceURI60;
    @Mock
    private String namespaceURI61;
    @Mock
    private String namespaceURI62;
    @Mock
    private String namespaceURI63;
    @Mock
    private String namespaceURI64;
    @Mock
    private String namespaceURI65;
    @Mock
    private String namespaceURI66;
    @Mock
    private String namespaceURI67;
    @Mock
    private String namespaceURI68;
    @Mock
    private String namespaceURI69;
    @Mock
    private String namespaceURI70;
    @Mock
    private String namespaceURI71;
    @Mock
    private String namespaceURI72;
    @Mock
    private String namespaceURI73;
    @Mock
    private String namespaceURI74;
    @Mock
    private String namespaceURI75;
    @Mock
    private String namespaceURI76;
    @Mock
    private String namespaceURI77;
    private static QName WILDCARD = new QName(null, "*");

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_1() throws Exception {
        nodeTypeTest = mock(NodeTypeTest.class);
        namespaceContext = mock(NamespaceContext.class);
        attributecontext = new AttributeContext(namespaceContext, nodeTypeTest);
        // Test when position is less than current position
        when(attributecontext.getCurrentPosition()).thenReturn(5);
        boolean result = attributecontext.setPosition(3);
        verify(attributecontext, times(1)).reset();
        // Test when position is greater than current position
        reset(attributecontext);
        when(attributecontext.getCurrentPosition()).thenReturn(5);
        when(attributecontext.nextNode()).thenReturn(true, true, true, false);
        boolean result2 = attributecontext.setPosition(10);
        verify(attributecontext, times(5)).nextNode();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition_2() throws Exception {
        nodeTypeTest = mock(NodeTypeTest.class);
        namespaceContext = mock(NamespaceContext.class);
        attributecontext = new AttributeContext(namespaceContext, nodeTypeTest);
        // Test when position is less than current position
        when(attributecontext.getCurrentPosition()).thenReturn(5);
        boolean result = attributecontext.setPosition(3);
        verify(attributecontext, times(1)).reset();
        // Test when position is greater than current position
        reset(attributecontext);
        when(attributecontext.getCurrentPosition()).thenReturn(5);
        when(attributecontext.nextNode()).thenReturn(true, true, true, false);
        boolean result2 = attributecontext.setPosition(10);
        verify(attributecontext, times(5)).nextNode();
        assertTrue(result2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_WNJZ0() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = attributeContext.setPosition(1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_HOEr1() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(null, null), new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = attributeContext.setPosition(0);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_zLSH0() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        attributeContext.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_tcmQ0() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(null, new NodeTypeTest(0)), new NodeTypeTest(0));
        NodePointer currentNodePointer = attributeContext.getCurrentNodePointer();
        assertNotNull(currentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_LIaw0() {
        AttributeContext attributeContext = new AttributeContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = attributeContext.nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        nodeTypeTest = mock(NodeTypeTest.class);
        namespaceContext = mock(NamespaceContext.class);
        attributecontext = new AttributeContext(namespaceContext, nodeTypeTest);
        // Test when position is less than current position
        when(attributecontext.getCurrentPosition()).thenReturn(5);
        boolean result = attributecontext.setPosition(3);
        verify(attributecontext, times(1)).reset();
        assertFalse(result);
        // Test when position is greater than current position
        reset(attributecontext);
        when(attributecontext.getCurrentPosition()).thenReturn(5);
        when(attributecontext.nextNode()).thenReturn(true, true, true, false);
        boolean result2 = attributecontext.setPosition(10);
        verify(attributecontext, times(5)).nextNode();
        assertTrue(result2);
    }
}