/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ExpressionPath_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_aGDk0() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), null, null);
        String result = expressionPath.toString();
        assertEquals("string", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString6_oqAq5() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], null);
        String result = expressionPath.toString();
        assertEquals("(string)", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString7_DWpr6() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(10), new Expression[0], null);
        String result = expressionPath.toString();
        assertEquals("(10)", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString11_isne10() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), new Expression[0], new Step[0]);
        String result = expressionPath.toString();
        assertEquals("(string)", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString12_IrXP11() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(10), new Expression[0], new Step[0]);
        String result = expressionPath.toString();
        assertEquals("(10)", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString1_aGDk0_fid1() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("'string'"), null, null);
        String result = expressionPath.toString();
        assertEquals("'string'", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_ifog3_PTlA0_fid2() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant("string"), null, null);
        String result = expressionPath.toString();
        assertEquals("((Constant)string)", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString4_ifog3_Kjxx1_fid2() {
        ExpressionPath expressionPath = new ExpressionPath(new Constant(1), null, null);
        String result = expressionPath.toString();
        assertEquals("((Constant)1)", result);
    }
}