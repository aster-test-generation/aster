/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynamicPropertyPointer_Test_Failing {
    private DynamicPropertyHandler handler;
    private DynamicPropertyPointer dynamicpropertypointer;
    private String[] names;
    private String name;
    private JXPathContext context;
    private Object value;
    private String requiredPropertyName;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private KeywordVariables variables;
    @Mock
    private QName nameMock;
    @Mock
    private QName prefixMock;
    @Mock
    private Locale locale;
    private String id;
    private PageContextHandler handler1;
    @Mock
    private QName name1;
    @Mock
    private QName name2;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private PageContextHandler pageContextHandler;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private QName qName;
    private DynamicPropertyPointer dynamicPropertyPointer;
    @Mock
    private DynamicPropertyHandler handlerMock;
    @Mock
    private Object beanMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(null, handler);
        Object value = new Object();
        dynamicpropertypointer.setValue(value);
        verify(handler, times(1)).setProperty(any(), anyString(), eq(value));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithWholeCollectionIndex_aRKT0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(parent, handler);
        Object value = new Object();
        dynamicPropertyPointer.setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithSpecificIndex_gYOt1() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(parent, handler);
        Object value = new Object();
        int index = 0;
        dynamicPropertyPointer.setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        handler = mock(DynamicPropertyHandler.class);
        dynamicpropertypointer = new DynamicPropertyPointer(null, handler);
        when(handler.getProperty(any(), anyString())).thenReturn("expectedValue");
        Object value = dynamicpropertypointer.getImmediateNode();
        assertEquals("expectedValue", value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode_TSQv0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(parent, handler);
        Object value = dynamicPropertyPointer.getImmediateNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() {
        dynamicpropertypointer = new DynamicPropertyPointer(parent, handler);
        // Mock the behavior of the isContainer method
        when(parent.isContainer()).thenReturn(true);
        // Call the method under test
        boolean result = dynamicpropertypointer.isContainer();
        // Verify that the method returns the expected result
        assertTrue(result);
        // Verify that the isContainer method was called on the parent object
        verify(parent).isContainer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_dYvi0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        PageContextHandler pageContextHandler = new PageContextHandler();
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        dynamicPropertyPointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove2_lAYB1() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        PageContextHandler pageContextHandler = new PageContextHandler();
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(variablePointer, pageContextHandler);
        dynamicPropertyPointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyNames() throws Exception {
        dynamicpropertypointer = new DynamicPropertyPointer(null, handlerMock);
        requiredPropertyName = "requiredProperty";
        names = new String[]{"property1", "property2", "property3"};
        when(handlerMock.getPropertyNames(beanMock)).thenReturn(names);
        String[] result = dynamicpropertypointer.getPropertyNames();
        assertArrayEquals(names, result);
        verify(handlerMock, times(1)).getPropertyNames(beanMock);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath_HMgc0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(parent, handler);
        assertEquals("", dynamicPropertyPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_wCtP0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        VariablePointer variablePointer = new VariablePointer(null, null);
        PageContextHandler pageContextHandler = new PageContextHandler();
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        Object baseValue = dynamicPropertyPointer.getBaseValue();
        assertNotNull(baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualProperty_vLPo0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        VariablePointer variablePointer = new VariablePointer(null, null);
        PageContextHandler pageContextHandler = new PageContextHandler();
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        boolean actual = dynamicPropertyPointer.isActualProperty();
        assert actual;
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames1_KEuW0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        VariablePointer variablePointer = new VariablePointer(null, null);
        PageContextHandler pageContextHandler = new PageContextHandler();
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        String[] result = dynamicPropertyPointer.getPropertyNames();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_NbjW0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        VariablePointer variablePointer = new VariablePointer(null, null);
        PageContextHandler pageContextHandler = new PageContextHandler();
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(domNodePointer, pageContextHandler);
        int propertyCount = dynamicPropertyPointer.getPropertyCount();
        assertEquals(0, propertyCount);
    }
}