/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.container;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.Container;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.xml.DocumentContainer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ContainerPointer_Test_Passing {
    private ContainerPointer containerpointer;
    private NodePointer pointer1;
    private NodePointer pointer2;
    private Container container;
    @Mock
    private Container mockContainer;
    @Mock
    private NodeTest nodeTest;
    @Mock
    private DOMNodePointer domNodePointer;
    @Mock
    private DocumentContainer documentContainer;
    @Mock
    private QName qName;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private VariablePointer variablePointer;
    private ContainerPointer containerPointer;
    private NodePointer valuePointer;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Locale locale;
    @Mock
    private QName name;
    @Mock
    private KeywordVariables variables;
    @Mock
    private JXPathContext context;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodePointer startWith;
    @Mock
    private DOMNodePointer domNodePointerMock;
    @Mock
    private DocumentContainer documentContainerMock;
    @Mock
    private QName qNameMock;
    @Mock
    private VariablePointer variablePointerMock;
    @Mock
    private KeywordVariables keywordVariablesMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        containerpointer = new ContainerPointer(null, container);
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        assertTrue(containerpointer.equals(containerpointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        containerpointer = new ContainerPointer(null, container);
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        assertTrue(containerpointer.equals(new ContainerPointer(null, container)));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        containerpointer = new ContainerPointer(null, container);
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        assertFalse(containerpointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() throws Exception {
        containerpointer = new ContainerPointer(null, container);
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        // Test when object is same as itself
        // Test when object is not null and is same type
        // Test when object is not null and is different type
        // Test when object is null
        assertFalse(containerpointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        container = mock(Container.class);
        containerpointer = new ContainerPointer(null, container);
        Object value = new Object();
        containerpointer.setValue(value);
        verify(container).setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testtestNode() {
        containerPointer = new ContainerPointer(domNodePointer, documentContainer);
        when(domNodePointer.testNode(nodeTest)).thenReturn(true);
        boolean result = containerPointer.testNode(nodeTest);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_uEhC0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        DocumentContainer documentContainer = new DocumentContainer(null);
        ContainerPointer containerPointer = new ContainerPointer(domNodePointer, documentContainer);
        Object value = new Object();
        containerPointer.setValue(value);
        assertEquals(value, documentContainer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithKeywordVariables_VmYQ1() {
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        QName qName = new QName(null, null);
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        DocumentContainer documentContainer = new DocumentContainer(null);
        ContainerPointer containerPointer = new ContainerPointer(variablePointer, documentContainer);
        Object value = new Object();
        containerPointer.setValue(value);
        assertEquals(value, documentContainer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithLocale_dtTU2() {
        Locale locale = new Locale(null, null);
        DocumentContainer documentContainer = new DocumentContainer(null, null);
        ContainerPointer containerPointer = new ContainerPointer(null, documentContainer);
        Object value = new Object();
        containerPointer.setValue(value);
        assertEquals(value, documentContainer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        domNodePointer = mock(DOMNodePointer.class);
        documentContainer = mock(DocumentContainer.class);
        qName = mock(QName.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        containerPointer = new ContainerPointer(domNodePointer, documentContainer);
        // Mock the behavior of the getImmediateNode method
        when(domNodePointer.getImmediateNode()).thenReturn(new Object());
        // Call the method under test
        Object result = containerPointer.getImmediateNode();
        // Verify that the method returns the expected result
        assertEquals(new Object(), result);
        // Verify that the getImmediateNode method was called on the domNodePointer object
        verify(domNodePointer).getImmediateNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection1_ArgD0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        ContainerPointer containerPointer = new ContainerPointer(domNodePointer, null);
        boolean result = containerPointer.isCollection();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection2_PQNG1() {
        DocumentContainer documentContainer = new DocumentContainer(null);
        ContainerPointer containerPointer = new ContainerPointer(null, documentContainer);
        boolean result = containerPointer.isCollection();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        containerpointer = new ContainerPointer(null, mockContainer);
        when(mockContainer.hashCode()).thenReturn(123);
        assertEquals(123, containerpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator_1() {
        MockitoAnnotations.openMocks(this);
        when(containerpointer.attributeIterator(qName)).thenReturn(nodeIterator);
        // Test the attributeIterator method
        NodeIterator result = containerpointer.attributeIterator(qName);
        // Assert that the result is not null
        // Assert that the result is equal to the mock nodeIterator
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator_2() {
        MockitoAnnotations.openMocks(this);
        when(containerpointer.attributeIterator(qName)).thenReturn(nodeIterator);
        // Test the attributeIterator method
        NodeIterator result = containerpointer.attributeIterator(qName);
        // Assert that the result is not null
        // Assert that the result is equal to the mock nodeIterator
        assertEquals(nodeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() {
        containerPointer = new ContainerPointer(nodePointer, container);
        NodeIterator nodeIterator = containerPointer.childIterator(nodeTest, true, startWith);
        // Add assertions here to verify the behavior of the childIterator method
        // For example:
        // assertNotNull(nodeIterator);
        // verify(nodePointer).childIterator(nodeTest, true, startWith);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath() {
        containerpointer = new ContainerPointer(parent, container);
        when(parent.asPath()).thenReturn("/parent");
        assertEquals("/parent", containerpointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_1() {
        containerPointer = new ContainerPointer(domNodePointerMock, documentContainerMock);
        when(domNodePointerMock.isLeaf()).thenReturn(true);
        when(domNodePointerMock.isLeaf()).thenReturn(false);
        assertTrue(containerPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_2() {
        containerPointer = new ContainerPointer(domNodePointerMock, documentContainerMock);
        when(domNodePointerMock.isLeaf()).thenReturn(true);
        when(domNodePointerMock.isLeaf()).thenReturn(false);
        assertFalse(containerPointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_jWTu0() {
        containerPointer = new ContainerPointer(parent, container);
        when(parent.getValuePointer()).thenReturn(nodePointer);
        when(nodePointer.namespacePointer("namespace")).thenReturn(mock(NodePointer.class));
        NodePointer result = containerPointer.namespacePointer("namespace");
        verify(parent).getValuePointer();
        verify(nodePointer).namespacePointer("namespace");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        containerpointer = new ContainerPointer(null, container);
        // Test when object is same as itself
        assertTrue(containerpointer.equals(containerpointer));
        // Test when object is not null and is same type
        assertTrue(containerpointer.equals(new ContainerPointer(null, container)));
        // Test when object is not null and is different type
        assertFalse(containerpointer.equals(new Object()));
        // Test when object is null
        assertFalse(containerpointer.equals(null));
        // Test when object is same as itself
        assertTrue(containerpointer.equals(containerpointer));
        // Test when object is not null and is same type
        assertTrue(containerpointer.equals(new ContainerPointer(null, container)));
        // Test when object is not null and is different type
        assertFalse(containerpointer.equals(new Object()));
        // Test when object is null
        assertFalse(containerpointer.equals(null));
        // Test when object is same as itself
        assertTrue(containerpointer.equals(containerpointer));
        // Test when object is not null and is same type
        assertTrue(containerpointer.equals(new ContainerPointer(null, container)));
        // Test when object is not null and is different type
        assertFalse(containerpointer.equals(new Object()));
        // Test when object is null
        assertFalse(containerpointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testattributeIterator() {
        MockitoAnnotations.openMocks(this);
        when(containerpointer.attributeIterator(qName)).thenReturn(nodeIterator);
        // Test the attributeIterator method
        NodeIterator result = containerpointer.attributeIterator(qName);
        // Assert that the result is not null
        assertNotNull(result);
        // Assert that the result is equal to the mock nodeIterator
        assertEquals(nodeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        containerPointer = new ContainerPointer(domNodePointerMock, documentContainerMock);
        when(domNodePointerMock.isLeaf()).thenReturn(true);
        assertTrue(containerPointer.isLeaf());
        when(domNodePointerMock.isLeaf()).thenReturn(false);
        assertFalse(containerPointer.isLeaf());
    }
}