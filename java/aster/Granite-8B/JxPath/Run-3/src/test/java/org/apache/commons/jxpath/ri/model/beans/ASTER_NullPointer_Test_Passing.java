/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.*;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPointer_Test_Passing {
    private QName name;
    private Locale locale;
    private String id;
    private VariablePointer parent;
    private KeywordVariables variables;
    private QName otherName;
    private NullPointer nullpointer;
    private static final Locale LOCALE = Locale.getDefault();
    private static final String ID = "id";
    private static final String KEY = "key";
    private static final String VALUE = "value";
    private static final String XPATH = "xpath";
    private static final Class REQUIRED_TYPE = String.class;
    private static final Functions FUNCTIONS = mock(Functions.class);
    private static final Variables VARIABLES = mock(Variables.class);
    private static final IdentityManager IDENTITY_MANAGER = mock(IdentityManager.class);
    private static final KeyManager KEY_MANAGER = mock(KeyManager.class);
    private static final NamespaceResolver NAMESPACE_RESOLVER = mock(NamespaceResolver.class);
    private static final ExceptionHandler EXCEPTION_HANDLER = mock(ExceptionHandler.class);
    private static final CompiledExpression COMPILED_EXPRESSION = mock(CompiledExpression.class);
    private NodePointer result;
    @Mock
    private QName mockName;
    @Mock
    private QName prefix;
    @Mock
    private String localName;
    @Mock
    private static final String QUALIFIED_NAME = "qualifiedName";
    private static final String PREFIX = "prefix";
    private static final String LOCAL_NAME = "localName";
    private static final String KEYWORD = "keyword";
    private static final Object OBJECT = new Object();
    private static final int PROPERTY_INDEX = 1;
    private static final String[] PROPERTY_NAMES = {"property1", "property2"};
    private static final int PROPERTY_COUNT = PROPERTY_NAMES.length;
    private QName NAME;
    private KeywordVariables KEYWORD_VARIABLES;
    private PropertyPointer PROPERTY_POINTER;
    private NullPointer NULL_POINTER;
    private Pointer pointer;
    private Functions functions;
    private ExceptionHandler exceptionHandler;
    private KeyManager keyManager;
    private IdentityManager idManager;
    private NodePointer namespaceContextPointer;
    private Pointer contextPointer;
    private Variables vars;
    private CompiledExpression xpath;
    private Object contextBean;
    private JXPathContextReferenceImpl parentContext;
    private Object value;
    private Object requiredType;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject() {
        name = mock(QName.class);
        locale = mock(Locale.class);
        id = "id";
        parent = mock(VariablePointer.class);
        variables = mock(KeywordVariables.class);
        otherName = mock(QName.class);
        nullpointer = new NullPointer(locale, id);
        boolean result = nullpointer.equals(nullpointer);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClass() {
        name = mock(QName.class);
        locale = mock(Locale.class);
        id = "id";
        parent = mock(VariablePointer.class);
        variables = mock(KeywordVariables.class);
        otherName = mock(QName.class);
        nullpointer = new NullPointer(locale, id);
        boolean result = nullpointer.equals(new Object());
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull() {
        name = mock(QName.class);
        locale = mock(Locale.class);
        id = "id";
        parent = mock(VariablePointer.class);
        variables = mock(KeywordVariables.class);
        otherName = mock(QName.class);
        nullpointer = new NullPointer(locale, id);
        boolean result = nullpointer.equals(null);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateChild_ggVz0() {
        Locale locale = new Locale("en");
        String id = "123";
        DOMNodePointer parent = new DOMNodePointer(null, locale, id);
        QName name = new QName("name");
        int index = 0;
        NullPointer nullPointer = new NullPointer(parent, name);
        NodePointer result = nullPointer.createChild(null, name, index);
        assertNotNull(result);
        assertTrue(result instanceof NodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        nullpointer = new NullPointer(Mockito.mock(Locale.class), Mockito.mock(String.class));
        NodePointer nodePointer = nullpointer.createPath(Mockito.mock(JXPathContext.class));
        Assertions.assertEquals(nodePointer.getClass(), NullPointer.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_KctL0() {
        NullPointer nullPointer = new NullPointer(new Locale("en"), "id");
        boolean result = nullPointer.isCollection();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        name = new QName("prefix", "localName");
        nullpointer = new NullPointer(name, Locale.ENGLISH);
        when(mockName.hashCode()).thenReturn(123);
        NullPointer nullPointerWithMockName = new NullPointer(mockName, Locale.ENGLISH);
        assertEquals(123, nullPointerWithMockName.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_jOOk0() {
        DOMNodePointer nullPointer = new DOMNodePointer(null, null, null);
        int actual = nullPointer.hashCode();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_UvWP1() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        int actual = variablePointer.hashCode();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_qquG2() {
        QName qName = new QName(null);
        int actual = qName.hashCode();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_OlHS3() {
        QName qName = new QName(null, null);
        int actual = qName.hashCode();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_bjot4() {
        QName qName = new QName(null);
        VariablePointer variablePointer = new VariablePointer(qName);
        int actual = variablePointer.hashCode();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode2_lRzO5() {
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        QName qName = new QName(null);
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        int actual = variablePointer.hashCode();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_jECa6() {
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        int actual = keywordVariables.hashCode();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode1_VyDq7() {
        Locale locale = null;
        String id = null;
        NullPointer nullPointer = new NullPointer(locale, id);
        int actual = nullPointer.hashCode();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() {
        nullpointer = new NullPointer(locale, id);
        when(nullpointer.getLength()).thenReturn(0);
        assertEquals(0, nullpointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLength_Iirv0() {
        NullPointer nullPointer = new NullPointer(new Locale("en"), "id");
        int length = nullPointer.getLength();
        assertEquals(0, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        nullpointer = new NullPointer(locale, id);
        Mockito.when(nullpointer.getBaseValue()).thenReturn(null);
        Assertions.assertNull(nullpointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() {
        nullpointer = new NullPointer(locale, id);
        assertFalse(nullpointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getBaseValueTest_Epnc0() {
        NullPointer nullPointer = new NullPointer(new Locale("en"), "id");
        assertEquals(null, nullPointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_xoZa0() {
        NullPointer nullPointer = new NullPointer(new Locale("en"), "id");
        boolean actual = nullPointer.isActual();
        assertFalse(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_xLzg0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        boolean result = domNodePointer.isLeaf();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf2_rTqE1() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        boolean result = domNodePointer.isLeaf();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf3_DhIk2() {
        Locale locale = new Locale("");
        DOMNodePointer domNodePointer = new DOMNodePointer(null, locale, null);
        boolean result = domNodePointer.isLeaf();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf4_GVeP3() {
        Locale locale = new Locale("");
        DOMNodePointer domNodePointer = new DOMNodePointer(null, locale);
        boolean result = domNodePointer.isLeaf();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf5_szAd4() {
        Locale locale = new Locale("");
        String id = "";
        DOMNodePointer domNodePointer = new DOMNodePointer(null, locale, id);
        boolean result = domNodePointer.isLeaf();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateChild_ggVz0_1() {
        Locale locale = new Locale("en");
        String id = "123";
        DOMNodePointer parent = new DOMNodePointer(null, locale, id);
        QName name = new QName("name");
        int index = 0;
        NullPointer nullPointer = new NullPointer(parent, name);
        NodePointer result = nullPointer.createChild(null, name, index);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testCreateChild_ggVz0_2() {
        Locale locale = new Locale("en");
        String id = "123";
        DOMNodePointer parent = new DOMNodePointer(null, locale, id);
        QName name = new QName("name");
        int index = 0;
        NullPointer nullPointer = new NullPointer(parent, name);
        NodePointer result = nullPointer.createChild(null, name, index);
        assertTrue(result instanceof NodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentName_NGPa0() {
        name = mock(QName.class);
        locale = mock(Locale.class);
        id = "id";
        parent = mock(VariablePointer.class);
        variables = mock(KeywordVariables.class);
        otherName = mock(QName.class);
        nullpointer = new NullPointer(locale, id);
        when(name.equals(otherName)).thenReturn(false);
        NullPointer otherNullpointer = new NullPointer(parent, otherName);
        boolean result = nullpointer.equals(otherNullpointer);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_iGpy0() {
        nullpointer = new NullPointer(locale, id);
        when(locale.toString()).thenReturn("en");
        when(id.toString()).thenReturn("1");
        when(parent.toString()).thenReturn("parent");
        when(name.toString()).thenReturn("name");
        when(variables.toString()).thenReturn("variables");
        boolean isLeaf = nullpointer.isLeaf();
        assertTrue(isLeaf);
    }
}