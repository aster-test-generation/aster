/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.InfoSetUtil;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CoreFunction_Coverage_Test_Passing {
    public void testAssertArgCount_eGdJ0() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
        try {
        } catch (Exception e) {
        }
    }

    public void testStringValue_VTxD1() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    }

    public void testGetSingleNodePointer_ABcr2() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    }

    public void testIsLanguage_sxim3() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    }

    public void testFunctionLang_kKov4() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[1]);
    }

    public void testFunctionName1_KayY0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName2_JmYY1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
    }

    public void testFunctionName3_AxoD2() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName4_iJiU3() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName5_HQul4() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName6_AQCa5() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName7_QDCS6() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName8_MbGp7() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName9_vGUE8() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName10_WGfC9() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionName11_iroB10() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        String expected = "";
    }

    public void testFunctionSum1_OHFD0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
    }

    public void testFunctionSum2_PQde1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        assertNotEquals(null, result);
    }

    public void testFunctionSum3_fHhF2() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        assertTrue(result instanceof EvalContext);
    }

    public void testFunctionSum4_TKGe3() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum5_zyzv4() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertNotEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum6_sAku5() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertTrue(result instanceof Double);
    }

    public void testFunctionSum7_lrIR6() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum8_eviY7() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertNotEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum9_YUPR8() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertTrue(result instanceof Double);
    }

    public void testFunctionSum10_OCNY9() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum11_vtkc10() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        Object result = coreFunction.functionSum(null);
        double sum = 0.0;
        EvalContext ctx = (EvalContext) result;
        while (ctx.hasNext()) {
            NodePointer ptr = (NodePointer) ctx.next();
            sum += InfoSetUtil.doubleValue(ptr);
        }
        assertNotEquals(Double.valueOf(sum), result);
    }

    public void testFunctionSum12_eNxK11() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue_kZdf1() throws Exception {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStringLength_zgnb0() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_STRING_LENGTH, null);
        assertEquals("string-length", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNormalizeSpace_rbhJ1() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NORMALIZE_SPACE, null);
        assertEquals("normalize-space", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTranslate_vQMu2() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRANSLATE, null);
        assertEquals("translate", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBoolean_txvD3() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_BOOLEAN, null);
        assertEquals("boolean", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNot_kBWd4() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NOT, null);
        assertEquals("not", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTrue_zPCM5() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_TRUE, null);
        assertEquals("true", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFalse_rDxH6() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FALSE, null);
        assertEquals("false", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLang_guiv7() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_LANG, null);
        assertEquals("lang", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNumber_sEmf8() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_NUMBER, null);
        assertEquals("number", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSum_lbHz9() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_SUM, null);
        assertEquals("sum", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFloor_KQfi10() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FLOOR, null);
        assertEquals("floor", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCeiling_HUFY11() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_CEILING, null);
        assertEquals("ceiling", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRound_vbAU12() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_ROUND, null);
        assertEquals("round", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKey_Bnxj13() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_KEY, null);
        assertEquals("key", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFormatNumber_Xwgy14() {
        CoreFunction coreFunction = new CoreFunction(Compiler.FUNCTION_FORMAT_NUMBER, null);
        assertEquals("format-number", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnknownFunction_xeTH15() {
        CoreFunction coreFunction = new CoreFunction(33, null);
        assertEquals("unknownFunction33()", coreFunction.getFunctionName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAssertArgCount0_dNQS0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        try {
            coreFunction.functionLast(null);
        } catch (Exception e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullArgs_hNgT0() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertEquals(0, coreFunction.getArgumentCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEmptyArgs_TgxJ1() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        assertEquals(0, coreFunction.getArgumentCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToString_MElz6() {
        CoreFunction coreFunction = new CoreFunction(0, new Expression[0]);
        coreFunction.toString();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent2_UsiS1() {
        CoreFunction coreFunction = new CoreFunction(1, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent3_weiV2() {
        CoreFunction coreFunction = new CoreFunction(2, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent6_ZoEc5() {
        CoreFunction coreFunction = new CoreFunction(5, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent7_PYQA6() {
        CoreFunction coreFunction = new CoreFunction(6, null);
        assertTrue(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFunctionSubstring22_iMqZ21() {
        CoreFunction function = new CoreFunction(0, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent1_OaGH0_fid1() {
        CoreFunction coreFunction = new CoreFunction(0, null);
        assertFalse(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent4_qwCX3_fid1() {
        CoreFunction coreFunction = new CoreFunction(3, null);
        assertFalse(coreFunction.computeContextDependent());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent5_vYpN4_fid1() {
        CoreFunction coreFunction = new CoreFunction(4, null);
        assertFalse(coreFunction.computeContextDependent());
    }
}