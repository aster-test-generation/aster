/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JXPathContextReferenceImpl_Coverage_Test_Failing {
    {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathAndSetValue_ugrH0()
    {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = jxpathContextReferenceImpl.createPathAndSetValue("xpath", null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePath_tYCc0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "";
        Expression expr = null;
        try {
            NodePointer pointer = (NodePointer) jxpathContextReferenceImpl.getPointer(xpath, expr);
            if (pointer != null) {
                pointer.remove();
            }
        } catch (Throwable ex) {
            throw new JXPathException("Exception trying to remove xpath " + xpath, ex);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPointer_bbAG0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = context.getPointer("xpath");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemovePathWithStringAndExpression_oqTi0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.removePath("xpath", null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_QQLT0() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Pointer pointer = context.createPath("xpath");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithValidArguments_RnWM0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.setValue("xpath", null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithInvalidArguments_KfiF1() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.setValue(null, null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithoutExpression_lpoW1() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        String xpath = "xpath";
        Class requiredType = String.class;
        jxpathContextReferenceImpl.getValue(xpath, null, requiredType);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullRequiredType_kthw4() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Object value = context.getValue("xpath", null, null);
        Assertions.assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonNullRequiredType_vybN5() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Object value = context.getValue("xpath", null, String.class);
        Assertions.assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonNullValueAndNonNullRequiredTypeButTypeConversionException_wojv8() {
        JXPathContextReferenceImpl context = new JXPathContextReferenceImpl(null, null);
        Object value = context.getValue("xpath", null, Integer.class);
        Assertions.assertNull(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveAll1_sKqK0() {
        JXPathContextReferenceImpl jxpathContextReferenceImpl = new JXPathContextReferenceImpl(null, null);
        jxpathContextReferenceImpl.removeAll("", null);
    }
}