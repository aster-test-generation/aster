/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExpressionPath_Test_Passing {
    @Mock
    EvalContext context;
    @Mock
    Constant expression;
    @Mock
    Expression[] predicates;
    @Mock
    Step[] steps;
    ExpressionPath expressionPath;
    private EvalContext evalContext;
    private boolean firstMatch;
    private ExpressionPath expressionpath;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcomputeValue() throws Exception {
        expressionPath = new ExpressionPath(expression, predicates, steps);
        // Set up expectations for the mock objects
        Mockito.when(context.getJXPathContext()).thenReturn(Mockito.mock(JXPathContext.class));
        Mockito.when(expressionPath.expressionPath(context, true)).thenReturn(Mockito.mock(Object.class));
        // Call the method under test
        Object result = expressionPath.computeValue(context);
        // Verify that the method was called with the correct arguments
        Mockito.verify(expressionPath).expressionPath(context, true);
        // Assert that the result is as expected
        Mockito.verify(context).getJXPathContext();
        Mockito.verify(expressionPath).expressionPath(context, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstant_JYCH0_1() {
        Constant constant = new Constant("string");
        constant = new Constant(10);
        assertEquals("string", constant.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstant_JYCH0_2() {
        Constant constant = new Constant("string");
        constant = new Constant(10);
        assertEquals("10", constant.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_PdDP1_1() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[2];
        Step[] steps = new Step[2];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        expression = new Constant(10);
        expressionPath = new ExpressionPath(expression, predicates, steps);
        assertEquals("(string)", expressionPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_PdDP1_2() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[2];
        Step[] steps = new Step[2];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        expression = new Constant(10);
        expressionPath = new ExpressionPath(expression, predicates, steps);
        assertEquals("10", expressionPath.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute() {
        expressionPath = new ExpressionPath(expression, predicates, steps);
        // Set up expectations
        when(context.getJXPathContext()).thenReturn(Mockito.mock(JXPathContext.class));
        when(context.hasNext()).thenReturn(true);
        when(context.nextNode()).thenReturn(true);
        when(context.nextSet()).thenReturn(true);
        when(context.getCurrentNodePointer()).thenReturn(Mockito.mock(NodePointer.class));
        when(context.getRootContext()).thenReturn(Mockito.mock(RootContext.class));
        when(context.getCurrentPosition()).thenReturn(1);
        when(context.isChildOrderingRequired()).thenReturn(true);
        // Call the method under test
        Object result = expressionPath.compute(context);
        // Verify the expected behavior
        verify(context, times(1)).getJXPathContext();
        verify(context, times(1)).hasNext();
        verify(context, times(1)).nextNode();
        verify(context, times(1)).nextSet();
        verify(context, times(1)).getCurrentNodePointer();
        verify(context, times(1)).getRootContext();
        verify(context, times(1)).getCurrentPosition();
        verify(context, times(1)).isChildOrderingRequired();
        // Add meaningful assertions here
        assertNotNull(result);
        // Add more assertions as needed
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetExpression_zZwu0() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        Expression result = expressionPath.getExpression();
        assertEquals(expression, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath1_Mfsw0() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        boolean result = expressionPath.isSimpleExpressionPath();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath2_iPUy1() {
        Constant expression = new Constant(10);
        Expression[] predicates = new Expression[0];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        boolean result = expressionPath.isSimpleExpressionPath();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsSimpleExpressionPath3_ICxq2() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[1];
        Step[] steps = new Step[0];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        boolean result = expressionPath.isSimpleExpressionPath();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstant_JYCH0() {
        Constant constant = new Constant("string");
        assertEquals("string", constant.toString());
        constant = new Constant(10);
        assertEquals("10", constant.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_PdDP1() {
        Constant expression = new Constant("string");
        Expression[] predicates = new Expression[2];
        Step[] steps = new Step[2];
        ExpressionPath expressionPath = new ExpressionPath(expression, predicates, steps);
        assertEquals("(string)", expressionPath.toString());
        expression = new Constant(10);
        expressionPath = new ExpressionPath(expression, predicates, steps);
        assertEquals("10", expressionPath.toString());
    }
}