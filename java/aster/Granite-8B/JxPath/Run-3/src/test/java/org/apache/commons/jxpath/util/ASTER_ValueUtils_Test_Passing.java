/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Array;
import java.util.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithArray_fqTj0() throws Exception {
        Object collection = new Integer[]{1, 2, 3};
        int index = 1;
        Object expected = 2;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithList_UrGj1() throws Exception {
        Object collection = new ArrayList<>(Arrays.asList(1, 2, 3));
        int index = 2;
        Object expected = 3;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithCollection_HEWi2() throws Exception {
        Object collection = new HashSet<>(Arrays.asList(1, 2, 3));
        int index = 0;
        Object expected = 1;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithInvalidIndex_tdyx3() throws Exception {
        Object collection = new ArrayList<>(Arrays.asList(1, 2, 3));
        int index = 3;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullCollection_TZGu4() throws Exception {
        Object collection = null;
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyCollection_ZCpT5() throws Exception {
        Object collection = new ArrayList<>();
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithNull_oVfo0() throws Exception {
        Object value = null;
        boolean expected = false;
        boolean actual = ValueUtils.isCollection(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithArray_ByuS1() throws Exception {
        Object value = new Object[0];
        boolean expected = true;
        boolean actual = ValueUtils.isCollection(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithCollection_YyVW2() throws Exception {
        Object value = new ArrayList<>();
        boolean expected = true;
        boolean actual = ValueUtils.isCollection(value);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNullIndexedPropertyDescriptor_wIvH1() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = null;
        int index = 0;
        Object expected = new Object();
        Object actual = ValueUtils.getValue(bean, propertyDescriptor, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonContainerObject_zCTQ1() throws Exception {
        Object object = ValueUtils.getValue("value");
        assertEquals("value", object);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getIndexedPropertyLength_with_non_null_object_and_null_pd_sMtY1() throws Exception {
        Object object = new Object();
        IndexedPropertyDescriptor pd = null;
        int result = ValueUtils.getIndexedPropertyLength(object, pd);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNullCollection_vbrZ0() throws Exception {
        Iterator iterator = ValueUtils.iterate(null);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithArray_wvhl1() throws Exception {
        Integer[] array = {1, 2, 3};
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
        assertEquals(1, iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(2, iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(3, iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithCollection_XJWM2() throws Exception {
        List<Integer> collection = Arrays.asList(1, 2, 3);
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
        assertEquals(1, iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(2, iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(3, iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonCollectionObject_iVOt3() throws Exception {
        Integer object = 42;
        Iterator iterator = ValueUtils.iterate(object);
        assertTrue(iterator.hasNext());
        assertEquals(42, iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyArray_nvOO4() throws Exception {
        Integer[] array = {};
        Iterator iterator = ValueUtils.iterate(array);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithEmptyCollection_ZuOE5() throws Exception {
        List<Integer> collection = Collections.emptyList();
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_1_Zmzt0() throws Exception {
        Class clazz = String.class;
        int result = ValueUtils.getCollectionHint(clazz);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_2_dOUC1() throws Exception {
        Class clazz = int.class;
        int result = ValueUtils.getCollectionHint(clazz);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_3_YTQU2() throws Exception {
        Class clazz = List.class;
        int result = ValueUtils.getCollectionHint(clazz);
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_4_xcmI3() throws Exception {
        Class clazz = Integer.class;
        int result = ValueUtils.getCollectionHint(clazz);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_5_LHXS4() throws Exception {
        Class clazz = Object.class;
        int result = ValueUtils.getCollectionHint(clazz);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_getCollectionHint_6_lNGe5() throws Exception {
        Class clazz = null;
        int result = ValueUtils.getCollectionHint(clazz);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithNullPropertyDescriptor_yONG2() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = null;
        Object value = new Object();
        ValueUtils.setValue(bean, propertyDescriptor, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArray_aaoW0() throws Exception {
        Object collection = new Object[0];
        Object smaller = ValueUtils.remove(collection, 0);
        assertTrue(smaller.getClass().isArray());
        assertEquals(0, Array.getLength(smaller));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_OehH1() throws Exception {
        List<Object> collection = new ArrayList<>();
        Object smaller = ValueUtils.remove(collection, 0);
        assertTrue(smaller instanceof List);
        assertEquals(0, ((List) smaller).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollection_ZWHI2() throws Exception {
        Collection<Object> collection = new ArrayList<>();
        Object smaller = ValueUtils.remove(collection, 0);
        assertTrue(smaller instanceof Collection);
        Iterator<Object> it = ((Collection) smaller).iterator();
        assertFalse(it.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveInvalidCollection_pWdJ3() throws Exception {
        Object collection = new Object();
        try {
            ValueUtils.remove(collection, 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveInvalidIndex_xCfD4() throws Exception {
        List<Object> collection = new ArrayList<>();
        try {
            ValueUtils.remove(collection, 0);
            fail("Expected JXPathException");
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveNullCollection_YwrV5() throws Exception {
        Object collection = null;
        Object smaller = ValueUtils.remove(collection, 0);
        assertNull(smaller);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveNullIndex_CqEL6() throws Exception {
        List<Object> collection = new ArrayList<>();
        Object smaller = ValueUtils.remove(collection, -1);
        assertEquals(collection, smaller);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveLastIndex_fLRM8() throws Exception {
        List<Object> collection = new ArrayList<>();
        Object smaller = ValueUtils.remove(collection, 0);
        assertEquals(collection, smaller);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFirstIndexArray_hyKx11() throws Exception {
        Object[] collection = new Object[0];
        Object smaller = ValueUtils.remove(collection, 0);
        assertTrue(smaller.getClass().isArray());
        assertEquals(0, Array.getLength(smaller));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueForArray_wFAF0() throws Exception {
        Object collection = new Integer[]{1, 2, 3};
        ValueUtils.setValue(collection, 1, 4);
        assertEquals(4, ((Integer[]) collection)[1].intValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueForNullCollection_REqV3() throws Exception {
        Object collection = null;
        try {
            ValueUtils.setValue(collection, 1, 4);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithValidBeanAndInvalidPropertyDescriptor_QcMc2() throws Exception {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = null;
        Object expectedValue = null;
        Object actualValue = ValueUtils.getValue(bean, propertyDescriptor);
        assertEquals(expectedValue, actualValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthOfNull_cEvy0() throws Exception {
        int result = ValueUtils.getLength(null);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthOfArray_IFhx1() throws Exception {
        int result = ValueUtils.getLength(new Object[5]);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthOfCollection_JQry2() throws Exception {
        List<String> list = Arrays.asList("a", "b", "c");
        int result = ValueUtils.getLength(list);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthOfNonCollectionNonArray_IpSm3() throws Exception {
        int result = ValueUtils.getLength("Hello");
        assertEquals(1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDynamicPropertyHandler_mUYJ0() throws Exception {
        DynamicPropertyHandler dynamicPropertyHandler = ValueUtils.getDynamicPropertyHandler(DynamicPropertyHandler.class);
        assertNotNull(dynamicPropertyHandler);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithNullCollection_rEDV0() throws Exception {
        Object collection = null;
        int size = 5;
        Object result = ValueUtils.expandCollection(collection, size);
        assertEquals(null, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithArray_wvhl1_1() throws Exception {
        Integer[] array = {1, 2, 3};
        Iterator iterator = ValueUtils.iterate(array);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithArray_wvhl1_2() throws Exception {
        Integer[] array = {1, 2, 3};
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals(1, iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithArray_wvhl1_4() throws Exception {
        Integer[] array = {1, 2, 3};
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals(2, iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithArray_wvhl1_6() throws Exception {
        Integer[] array = {1, 2, 3};
        Iterator iterator = ValueUtils.iterate(array);
        assertEquals(3, iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithArray_wvhl1_7() throws Exception {
        Integer[] array = {1, 2, 3};
        Iterator iterator = ValueUtils.iterate(array);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithCollection_XJWM2_1() throws Exception {
        List<Integer> collection = Arrays.asList(1, 2, 3);
        Iterator iterator = ValueUtils.iterate(collection);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithCollection_XJWM2_2() throws Exception {
        List<Integer> collection = Arrays.asList(1, 2, 3);
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(1, iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithCollection_XJWM2_4() throws Exception {
        List<Integer> collection = Arrays.asList(1, 2, 3);
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(2, iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithCollection_XJWM2_6() throws Exception {
        List<Integer> collection = Arrays.asList(1, 2, 3);
        Iterator iterator = ValueUtils.iterate(collection);
        assertEquals(3, iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithCollection_XJWM2_7() throws Exception {
        List<Integer> collection = Arrays.asList(1, 2, 3);
        Iterator iterator = ValueUtils.iterate(collection);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonCollectionObject_iVOt3_1() throws Exception {
        Integer object = 42;
        Iterator iterator = ValueUtils.iterate(object);
        assertTrue(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonCollectionObject_iVOt3_2() throws Exception {
        Integer object = 42;
        Iterator iterator = ValueUtils.iterate(object);
        assertEquals(42, iterator.next());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIterateWithNonCollectionObject_iVOt3_3() throws Exception {
        Integer object = 42;
        Iterator iterator = ValueUtils.iterate(object);
        assertFalse(iterator.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArray_aaoW0_1() throws Exception {
        Object collection = new Object[0];
        Object smaller = ValueUtils.remove(collection, 0);
        assertTrue(smaller.getClass().isArray());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArray_aaoW0_2() throws Exception {
        Object collection = new Object[0];
        Object smaller = ValueUtils.remove(collection, 0);
        assertEquals(0, Array.getLength(smaller));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_OehH1_1() throws Exception {
        List<Object> collection = new ArrayList<>();
        Object smaller = ValueUtils.remove(collection, 0);
        assertTrue(smaller instanceof List);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_OehH1_2() throws Exception {
        List<Object> collection = new ArrayList<>();
        Object smaller = ValueUtils.remove(collection, 0);
        assertEquals(0, ((List) smaller).size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollection_ZWHI2_1() throws Exception {
        Collection<Object> collection = new ArrayList<>();
        Object smaller = ValueUtils.remove(collection, 0);
        Iterator<Object> it = ((Collection) smaller).iterator();
        assertTrue(smaller instanceof Collection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollection_ZWHI2_2() throws Exception {
        Collection<Object> collection = new ArrayList<>();
        Object smaller = ValueUtils.remove(collection, 0);
        Iterator<Object> it = ((Collection) smaller).iterator();
        assertFalse(it.hasNext());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFirstIndexArray_hyKx11_1() throws Exception {
        Object[] collection = new Object[0];
        Object smaller = ValueUtils.remove(collection, 0);
        assertTrue(smaller.getClass().isArray());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveFirstIndexArray_hyKx11_2() throws Exception {
        Object[] collection = new Object[0];
        Object smaller = ValueUtils.remove(collection, 0);
        assertEquals(0, Array.getLength(smaller));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArray_HZYk4_KhML0_1() throws Exception {
        Object collection = new Integer[]{1, 2, 3};
        int size = 5;
        Object result = ValueUtils.expandCollection(collection, size);
        assertTrue(result instanceof Integer[]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpandCollectionWithArray_HZYk4_KhML0_2() throws Exception {
        Object collection = new Integer[]{1, 2, 3};
        int size = 5;
        Object result = ValueUtils.expandCollection(collection, size);
        assertEquals(5, ((Integer[]) result).length);
    }
}