/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TypeUtils_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCanConvert_IOZy0() {
        Object object = new Object();
        Class toType = String.class;
        boolean expected = true;
        boolean actual = TypeUtils.canConvert(object, toType);
        assertTrue(actual == expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTypeConverterTest_ggGW0_1() {
        TypeConverter typeConverter = TypeUtils.getTypeConverter();
        assertNotNull(typeConverter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTypeConverterTest_ggGW0_2() {
        TypeConverter typeConverter = TypeUtils.getTypeConverter();
        assertTrue(typeConverter instanceof TypeConverter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ZLBA0_1() {
        Object object = new Date();
        Class toType = String.class;
        Object convertedObject = TypeUtils.convert(object, toType);
        assertNotNull(convertedObject);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ZLBA0_2() {
        Object object = new Date();
        Class toType = String.class;
        Object convertedObject = TypeUtils.convert(object, toType);
        assertTrue(convertedObject instanceof String);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrapPrimitive_MGbA0() {
        Class primitiveClass = int.class;
        Class wrapperClass = Integer.class;
        Class result = TypeUtils.wrapPrimitive(primitiveClass);
        assertEquals(wrapperClass, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWrapPrimitiveForNonPrimitiveClass_tjUu1() {
        Class nonPrimitiveClass = String.class;
        Class result = TypeUtils.wrapPrimitive(nonPrimitiveClass);
        assertEquals(nonPrimitiveClass, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getTypeConverterTest_ggGW0() {
        TypeConverter typeConverter = TypeUtils.getTypeConverter();
        assertNotNull(typeConverter);
        assertTrue(typeConverter instanceof TypeConverter);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConvert_ZLBA0() {
        Object object = new Date();
        Class toType = String.class;
        Object convertedObject = TypeUtils.convert(object, toType);
        assertNotNull(convertedObject);
        assertTrue(convertedObject instanceof String);
    }
}