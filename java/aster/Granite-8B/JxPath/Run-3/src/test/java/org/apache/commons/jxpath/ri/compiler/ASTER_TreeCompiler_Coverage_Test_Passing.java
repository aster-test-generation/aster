/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_VMwb0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.and(new Object[]{});
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_VMwb0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.and(new Object[]{});
        assertTrue(result instanceof CoreOperationAnd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_aVDO0_1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("instruction");
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_aVDO0_2() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("instruction");
        assertTrue(result instanceof ProcessingInstructionTest);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_PgGv0_fid1() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object argument = null;
        Object actual = treeCompiler.minus(argument);
        Object expected = null;
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAnd_VMwb0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.and(new Object[]{});
        assertNotNull(result);
        assertTrue(result instanceof CoreOperationAnd);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnion_edAI0()
    {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = new Object[0];
        Object result = treeCompiler.union(arguments);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessingInstructionTest_aVDO0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object result = treeCompiler.processingInstructionTest("instruction");
        assertNotNull(result);
        assertTrue(result instanceof ProcessingInstructionTest);
    }
}