/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ExceptionHandler;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNamespacePointer_Test_Passing {
    private static final Locale LOCALE = Locale.ENGLISH;
    private static final String PREFIX = "prefix";
    private static final VariablePointer VARIABLE_POINTER = mock(VariablePointer.class);
    private static final KeywordVariables KEYWORD_VARIABLES = mock(KeywordVariables.class);
    private static final QName QNAME = mock(QName.class);
    private static final NodePointer NODE_POINTER = mock(NodePointer.class);
    private static final NodePointer PARENT = mock(NodePointer.class);
    private static final NodePointer CHILD = mock(NodePointer.class);
    private static final NodePointer IMMEDIATE_PARENT = mock(NodePointer.class);
    private static final NodePointer IMMEDIATE_VALUE_POINTER = mock(NodePointer.class);
    private static final NodePointer VALUE_POINTER = mock(NodePointer.class);
    private static final NamespaceResolver NAMESPACE_RESOLVER = mock(NamespaceResolver.class);
    private static final ExceptionHandler EXCEPTION_HANDLER = mock(ExceptionHandler.class);
    private static final JXPathContext CONTEXT = mock(JXPathContext.class);
    private static final NodeTest TEST = mock(NodeTest.class);
    private static final Pointer POINTER = mock(Pointer.class);
    private static final String KEY = "key";
    private static final String VALUE = "value";
    private static final String ID = "id";
    private static final String LANG = "lang";
    private static final Object BEAN = mock(Object.class);
    private static final Locale LOCALE_2 = Locale.FRENCH;
    private static final String PREFIX_2 = "prefix2";
    private static final String NAMESPACE_URI_2 = "namespaceURI2";
    private static final String QUALIFIED_NAME = "qualifiedName";
    private static final String PREFIX_3 = "prefix3";
    private static final String LOCAL_NAME = "localName";
    private String prefix;
    private JDOMNamespacePointer jdomnamespacepointer;
    private DOMNodePointer parent;
    private String namespaceURI;
    @Mock
    private KeywordVariables variables;
    @Mock
    private QName name;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        prefix = "examplePrefix";
        jdomnamespacepointer = new JDOMNamespacePointer(null, prefix);
        // Create a mock object for the object to compare with
        Object mockObject = Mockito.mock(Object.class);
        // Create an instance of JDOMNamespacePointer with the same prefix
        JDOMNamespacePointer samePrefixPointer = new JDOMNamespacePointer(null, prefix);
        // Create an instance of JDOMNamespacePointer with a different prefix
        JDOMNamespacePointer differentPrefixPointer = new JDOMNamespacePointer(null, "differentPrefix");
        // Assert that the object is equal to itself
        assertTrue(jdomnamespacepointer.equals(jdomnamespacepointer));
        // Assert that the object is equal to the mock object
        assertTrue(jdomnamespacepointer.equals(mockObject));
        // Assert that the object is equal to the same prefix pointer
        assertTrue(jdomnamespacepointer.equals(samePrefixPointer));
        // Assert that the object is not equal to the different prefix pointer
        assertFalse(jdomnamespacepointer.equals(differentPrefixPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue() throws Exception {
        parent = mock(DOMNodePointer.class);
        prefix = "testPrefix";
        namespaceURI = "testNamespaceURI";
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix, namespaceURI);
        // Mock the behavior of the setValue method
        doNothing().when(jdomnamespacepointer).setValue(any());
        // Call the setValue method and verify that it throws UnsupportedOperationException
        Assertions.assertThrows(UnsupportedOperationException.class, () -> jdomnamespacepointer.setValue("testValue"));
        verify(jdomnamespacepointer, times(1)).setValue("testValue");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        parent = mock(DOMNodePointer.class);
        prefix = "prefix";
        namespaceURI = "namespaceURI";
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix, namespaceURI);
        when(parent.isCollection()).thenReturn(true);
        boolean isCollection = jdomnamespacepointer.isCollection();
        assertTrue(isCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() {
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix, namespaceURI);
        when(jdomnamespacepointer.getNamespaceURI()).thenReturn(namespaceURI);
        assertEquals(namespaceURI, jdomnamespacepointer.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_Aypo0() {
        JDOMNamespacePointer jDOMNamespacePointer = new JDOMNamespacePointer(null, null);
        boolean result = jDOMNamespacePointer.isCollection();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithParent_yGPL1() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        JDOMNamespacePointer jDOMNamespacePointer = new JDOMNamespacePointer(parent, null);
        boolean result = jDOMNamespacePointer.isCollection();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithParentAndPrefix_GmkU2() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        JDOMNamespacePointer jDOMNamespacePointer = new JDOMNamespacePointer(parent, "prefix", "namespaceURI");
        boolean result = jDOMNamespacePointer.isCollection();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        prefix = "test";
        jdomnamespacepointer = new JDOMNamespacePointer(null, prefix);
        assertEquals(prefix.hashCode(), jdomnamespacepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        parent = mock(DOMNodePointer.class);
        prefix = "testPrefix";
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        when(parent.getName()).thenReturn(new QName(prefix));
        assertEquals(new QName(prefix), jdomnamespacepointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        parent = mock(DOMNodePointer.class);
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        when(parent.getNamespaceURI(prefix)).thenReturn("http://example.com");
        assertEquals("http://example.com", jdomnamespacepointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName_VKRk0() {
        JDOMNamespacePointer jDOMNamespacePointer = new JDOMNamespacePointer(null, "prefix");
        QName name = jDOMNamespacePointer.getName();
        assertEquals("prefix", name.getPrefix());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testasPath() throws Exception {
        parent = mock(DOMNodePointer.class);
        prefix = "testPrefix";
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix);
        when(parent.asPath()).thenReturn("/testPath");
        assertEquals("/testPath/namespace::testPrefix", jdomnamespacepointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURIWithPrefix_iFnC0() {
        JDOMNamespacePointer pointer = new JDOMNamespacePointer(null, "prefix");
        String namespaceURI = pointer.getNamespaceURI();
        assertEquals("Namespace URI should be null", null, namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() {
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        when(parent.getLength()).thenReturn(1);
        assertEquals(1, jdomnamespacepointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        jdomnamespacepointer = new JDOMNamespacePointer(parent, prefix, namespaceURI);
        // Mock the behavior of the getBaseValue method
        when(parent.getBaseValue()).thenReturn("expectedValue");
        // Call the method under test
        Object baseValue = jdomnamespacepointer.getBaseValue();
        // Assert that the returned value is correct
        assertEquals("expectedValue", baseValue);
        // Verify that the getBaseValue method was called
        verify(parent, times(1)).getBaseValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLength_cDYu0() {
        JDOMNamespacePointer pointer = new JDOMNamespacePointer(null, null);
        assertEquals(1, pointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        jdomnamespacepointer = new JDOMNamespacePointer(parent, "prefix");
        when(parent.isLeaf()).thenReturn(true);
        assertTrue(jdomnamespacepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_tCXu0() {
        JDOMNamespacePointer jDOMNamespacePointer = new JDOMNamespacePointer(null, null);
        boolean isLeaf = jDOMNamespacePointer.isLeaf();
        assertTrue(isLeaf);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_ofiN0() {
        JDOMNamespacePointer jDOMNamespacePointer = new JDOMNamespacePointer(null, null);
        Object baseValue = jDOMNamespacePointer.getBaseValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue2_fwMh1() {
        JDOMNamespacePointer jDOMNamespacePointer = new JDOMNamespacePointer(null, null, null);
        Object baseValue = jDOMNamespacePointer.getBaseValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue3_YWMY2() {
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        JDOMNamespacePointer jDOMNamespacePointer = new JDOMNamespacePointer(null, null, null);
        Object baseValue = jDOMNamespacePointer.getBaseValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        prefix = "examplePrefix";
        jdomnamespacepointer = new JDOMNamespacePointer(null, prefix);
        // Create a mock object for the object to compare with
        Object mockObject = Mockito.mock(Object.class);
        // Create an instance of JDOMNamespacePointer with the same prefix
        JDOMNamespacePointer samePrefixPointer = new JDOMNamespacePointer(null, prefix);
        // Create an instance of JDOMNamespacePointer with a different prefix
        JDOMNamespacePointer differentPrefixPointer = new JDOMNamespacePointer(null, "differentPrefix");
        // Assert that the object is equal to itself
        // Assert that the object is equal to the mock object
        // Assert that the object is equal to the same prefix pointer
        // Assert that the object is not equal to the different prefix pointer
        assertTrue(jdomnamespacepointer.equals(jdomnamespacepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        prefix = "examplePrefix";
        jdomnamespacepointer = new JDOMNamespacePointer(null, prefix);
        // Create a mock object for the object to compare with
        Object mockObject = Mockito.mock(Object.class);
        // Create an instance of JDOMNamespacePointer with the same prefix
        JDOMNamespacePointer samePrefixPointer = new JDOMNamespacePointer(null, prefix);
        // Create an instance of JDOMNamespacePointer with a different prefix
        JDOMNamespacePointer differentPrefixPointer = new JDOMNamespacePointer(null, "differentPrefix");
        // Assert that the object is equal to itself
        // Assert that the object is equal to the mock object
        // Assert that the object is equal to the same prefix pointer
        // Assert that the object is not equal to the different prefix pointer
        assertTrue(jdomnamespacepointer.equals(mockObject));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        prefix = "examplePrefix";
        jdomnamespacepointer = new JDOMNamespacePointer(null, prefix);
        // Create a mock object for the object to compare with
        Object mockObject = Mockito.mock(Object.class);
        // Create an instance of JDOMNamespacePointer with the same prefix
        JDOMNamespacePointer samePrefixPointer = new JDOMNamespacePointer(null, prefix);
        // Create an instance of JDOMNamespacePointer with a different prefix
        JDOMNamespacePointer differentPrefixPointer = new JDOMNamespacePointer(null, "differentPrefix");
        // Assert that the object is equal to itself
        // Assert that the object is equal to the mock object
        // Assert that the object is equal to the same prefix pointer
        // Assert that the object is not equal to the different prefix pointer
        assertTrue(jdomnamespacepointer.equals(samePrefixPointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() throws Exception {
        prefix = "examplePrefix";
        jdomnamespacepointer = new JDOMNamespacePointer(null, prefix);
        // Create a mock object for the object to compare with
        Object mockObject = Mockito.mock(Object.class);
        // Create an instance of JDOMNamespacePointer with the same prefix
        JDOMNamespacePointer samePrefixPointer = new JDOMNamespacePointer(null, prefix);
        // Create an instance of JDOMNamespacePointer with a different prefix
        JDOMNamespacePointer differentPrefixPointer = new JDOMNamespacePointer(null, "differentPrefix");
        // Assert that the object is equal to itself
        // Assert that the object is equal to the mock object
        // Assert that the object is equal to the same prefix pointer
        // Assert that the object is not equal to the different prefix pointer
        assertFalse(jdomnamespacepointer.equals(differentPrefixPointer));
    }
}