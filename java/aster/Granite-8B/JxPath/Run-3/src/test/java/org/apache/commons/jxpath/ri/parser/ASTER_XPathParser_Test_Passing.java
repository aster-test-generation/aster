/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.ArrayList;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_XPathParser_Test_Passing {
    private int[] jj_la1 = new int[39];
    @Mock
    private Compiler compiler;
    private int jj_gen;
    private XPathParser xpathparser;
    @Mock
    private SimpleCharStream simpleCharStream;
    private int jj_endpos;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    private int jj_kind = -1;
    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    static private int[] jj_la1_0;
    @Mock
    private SimpleCharStream stream;
    @Mock
    private XPathParserTokenManager tm;
    @Mock
    private ParseException exception;
    @Mock
    private XPathParserTokenManager tokenManager;
    private Token jj_scanpos, jj_lastpos;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final SimpleCharStream stream) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final SimpleCharStream stream, final int lexState) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.InputStream stream) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.InputStream stream, final String encoding) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.Reader stream) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.Reader stream, final String encoding) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void ReInit(final java.io.InputStream stream, final int lexState) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setDebugStream(java.io.PrintStream ds) {
        tm.setDebugStream(ds);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_WtLG2() throws Exception {
        ParseException exception = new ParseException(new Token(), new int[][]{}, new String[]{});
        String message = exception.getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructorDefinitions_EmQL0() throws Exception {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(null);
        assertNotNull(tokenManager);
        tokenManager = new XPathParserTokenManager(null, 0);
        assertNotNull(tokenManager);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_aucN2() throws Exception {
        ParseException parseException = new ParseException(null);
        parseException.getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseException_LypW2() throws Exception {
        ParseException exception = new ParseException(new Token(), new int[][]{}, new String[]{});
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_VYrt2() throws Exception {
        new ParseException().getMessage();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGenerateParseException_ZJBj0() throws Exception {
        XPathParser xpathParser = new XPathParser(System.in);
        ParseException e = xpathParser.generateParseException();
        assertNotNull(e);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMessage_zrCd2() throws Exception {
        ParseException e = new ParseException(new Token(), new int[][]{}, new String[]{});
        assertEquals("Invalid token", e.getMessage());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArgumentList() throws Exception {
        xpathparser = Mockito.mock(XPathParser.class);
        SimpleCharStream simpleCharStream = Mockito.mock(SimpleCharStream.class);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(simpleCharStream);
        xpathparser = new XPathParser(tokenManager);
        ArrayList args = new ArrayList();
        Object arg = new Object();
        args.add(arg);
        when(xpathparser.ArgumentList()).thenReturn(args);
        assertEquals(args, xpathparser.ArgumentList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLocationStep_VYUN0() throws Exception {
        XPathParser xpathParser = new XPathParser(System.in);
        ArrayList<Object> steps = new ArrayList<>();
        try {
            xpathParser.LocationStep(steps);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        assertEquals(1, steps.size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCoreFunctionName() throws Exception {
        xpathparser = Mockito.mock(XPathParser.class);
        // Set up the expected behavior of the mock XPathParser object
        when(xpathparser.CoreFunctionName()).thenReturn(Compiler.FUNCTION_LAST);
        // Call the method under test
        int code = xpathparser.CoreFunctionName();
        // Assert that the expected behavior was met
        assertEquals(Compiler.FUNCTION_LAST, code);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testConstructorDefinitions_EmQL0_1() throws Exception {
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(null);
        tokenManager = new XPathParserTokenManager(null, 0);
        assertNotNull(tokenManager);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void foo_IBSE1() throws Exception {
        if (true) {
            System.out.println("Hello World!");
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReInitWithStreamAndLexState_wIvd0_RuTM0() throws Exception {
        SimpleCharStream stream = new SimpleCharStream(new java.io.StringReader(""), 1, 1, 1);
        XPathParserTokenManager tokenManager = new XPathParserTokenManager(stream, 1);
        tokenManager.ReInit(stream, 1);
    }
}