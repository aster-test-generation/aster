/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_NullPropertyPointer_Test_Passing {
    private String propertyName = "*";
    private DOMNodePointer parent;
    private NullPropertyPointer nullpropertypointer;
    @Mock
    private Locale locale;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private QName qName;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodePointer nodePointer1;
    @Mock
    private NodePointer nodePointer2;
    @Mock
    private NodePointer nodePointer3;
    @Mock
    private NodePointer nodePointer4;
    @Mock
    private NodePointer nodePointer5;
    @Mock
    private NodePointer nodePointer6;
    @Mock
    private NodePointer nodePointer7;
    @Mock
    private NodePointer nodePointer8;
    @Mock
    private NodePointer nodePointer9;
    @Mock
    private NodePointer nodePointer10;
    @Mock
    private NodePointer nodePointer11;
    @Mock
    private NodePointer nodePointer12;
    @Mock
    private NodePointer nodePointer13;
    @Mock
    private NodePointer nodePointer14;
    @Mock
    private NodePointer nodePointer15;
    @Mock
    private NodePointer nodePointer16;
    @Mock
    private NodePointer nodePointer17;
    @Mock
    private NodePointer nodePointer18;
    @Mock
    private NodePointer nodePointer19;
    @Mock
    private NodePointer nodePointer20;
    @Mock
    private NodePointer nodePointer21;
    @Mock
    private NodePointer nodePointer22;
    @Mock
    private NodePointer nodePointer23;
    @Mock
    private NodePointer nodePointer24;
    @Mock
    private NodePointer nodePointer25;
    @Mock
    private NodePointer nodePointer26;
    @Mock
    private NodePointer nodePointer27;
    @Mock
    private NodePointer nodePointer28;
    @Mock
    private NodePointer nodePointer29;
    @Mock
    private NodePointer nodePointer30;
    @Mock
    private NodePointer nodePointer31;
    @Mock
    private NodePointer nodePointer32;
    @Mock
    private NodePointer nodePointer33;
    @Mock
    private NodePointer nodePointer34;
    @Mock
    private NodePointer nodePointer35;
    @Mock
    private NodePointer nodePointer36;
    @Mock
    private NodePointer nodePointer37;
    @Mock
    private NodePointer nodePointer38;
    @Mock
    private NodePointer nodePointer39;
    @Mock
    private NodePointer nodePointer40;
    @Mock
    private NodePointer nodePointer41;
    @Mock
    private NodePointer nodePointer42;
    @Mock
    private NodePointer nodePointer43;
    @Mock
    private NodePointer nodePointer44;
    @Mock
    private NodePointer nodePointer45;
    @Mock
    private NodePointer nodePointer46;
    @Mock
    private NodePointer nodePointer47;
    @Mock
    private NodePointer nodePointer48;
    @Mock
    private NodePointer nodePointer49;
    @Mock
    private NodePointer nodePointer50;
    @Mock
    private NodePointer nodePointer51;
    @Mock
    private NodePointer nodePointer52;
    @Mock
    private NodePointer nodePointer53;
    @Mock
    private NodePointer nodePointer54;
    @Mock
    private NodePointer nodePointer55;
    @Mock
    private NodePointer nodePointer56;
    @Mock
    private NodePointer nodePointer57;
    @Mock
    private NodePointer nodePointer58;
    @Mock
    private NodePointer nodePointer59;
    @Mock
    private NodePointer nodePointer60;
    @Mock
    private NodePointer nodePointer61;
    @Mock
    private NodePointer nodePointer62;
    @Mock
    private NodePointer nodePointer63;
    @Mock
    private NodePointer nodePointer64;
    @Mock
    private NodePointer nodePointer65;
    @Mock
    private NodePointer nodePointer66;
    @Mock
    private NodePointer nodePointer67;
    @Mock
    private NodePointer nodePointer68;
    @Mock
    private NodePointer nodePointer69;
    @Mock
    private NodePointer nodePointer70;
    @Mock
    private NodePointer nodePointer71;
    @Mock
    private NodePointer nodePointer72;
    @Mock
    private NodePointer nodePointer73;
    @Mock
    private NodePointer nodePointer74;
    @Mock
    private NodePointer nodePointer75;
    @Mock
    private NodePointer nodePointer76;
    @Mock
    private NodePointer nodePointer77;
    @Mock
    private NodePointer nodePointer78;
    @Mock
    private JXPathContext context;
    @Mock
    private Object value;
    @Mock
    private QName name;
    private KeywordVariables variables;
    private boolean byNameAttribute = false;
    private NullPropertyPointer nullPropertyPointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        parent = mock(DOMNodePointer.class);
        nullpropertypointer = new NullPropertyPointer(parent);
        Object value = new Object();
        nullpropertypointer.setValue(value);
        verify(parent, times(1)).setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue1_nUOl0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        Object value = new Object();
        domNodePointer.setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue2_auDx1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        VariablePointer variablePointer = new VariablePointer(null, null);
        domNodePointer.setValue(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyName() throws Exception {
        nullpropertypointer = new NullPropertyPointer(null);
        assertEquals("*", nullpropertypointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreatePath() throws Exception {
        nullpropertypointer = new NullPropertyPointer(Mockito.mock(DOMNodePointer.class));
        NodePointer newParent = nullpropertypointer.createPath(Mockito.mock(JXPathContext.class));
        verify(newParent, times(1)).createPath(Mockito.any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithQName_ScZM1_1() {
        String qualifiedName = "test";
        QName qName = new QName(qualifiedName);
        KeywordVariables variables = new KeywordVariables("test", new Object());
        VariablePointer variablePointer = new VariablePointer(qName);
        NodePointer newParent = variablePointer.createPath(null, null);
        assertEquals(VariablePointer.class, newParent.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithQName_ScZM1_2() {
        String qualifiedName = "test";
        QName qName = new QName(qualifiedName);
        KeywordVariables variables = new KeywordVariables("test", new Object());
        VariablePointer variablePointer = new VariablePointer(qName);
        NodePointer newParent = variablePointer.createPath(null, null);
        assertEquals(qName, newParent.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPropertyName_iQpp0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
        String propertyName = nullPropertyPointer.getPropertyName();
        assertEquals("", propertyName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection() {
        nullpropertypointer = new NullPropertyPointer(parent);
        when(parent.getIndex()).thenReturn(1);
        assertTrue(nullpropertypointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection1_KZfA0()
    {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        boolean result = nullPropertyPointer.isCollection();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullPropertyPointerGetImmediateNode_SPVb0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
        Object immediateNode = nullPropertyPointer.getImmediateNode();
        assertNull(immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer() {
        nullpropertypointer = new NullPropertyPointer(parent);
        when(parent.isContainer()).thenReturn(true);
        assertTrue(nullpropertypointer.isContainer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_BoXF0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        boolean result = nullPropertyPointer.isContainer();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() {
        nullpropertypointer = new NullPropertyPointer(parent);
        // Mock the behavior of the parent object
        when(parent.getLength()).thenReturn(10);
        // Call the method under test
        int length = nullpropertypointer.getLength();
        // Assert that the method returns the expected value
        assertEquals(0, length);
        // Verify that the parent object's method was called
        verify(parent).getLength();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getLengthTest_ToTT0()
    {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(null);
        int length = nullPropertyPointer.getLength();
        assertEquals(0, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_ftBV0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String actual = domNodePointer.asPath();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_Buwr1() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        String actual = domNodePointer.asPath();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName1_TPZc3() {
        String qualifiedName = null;
        QName qName = new QName(qualifiedName);
        String actual = qName.toString();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName2_Yrmi4() {
        String prefix = null;
        String localName = null;
        QName qName = new QName(prefix, localName);
        String actual = qName.toString();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer1_PrDh5() {
        QName name = null;
        VariablePointer variablePointer = new VariablePointer(name);
        String actual = variablePointer.toString();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_Sgnk6() {
        KeywordVariables variables = null;
        QName name = null;
        VariablePointer variablePointer = new VariablePointer(variables, name);
        String actual = variablePointer.toString();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariables1_hQnv7() {
        String keyword = null;
        Object object = null;
        KeywordVariables keywordVariables = new KeywordVariables(keyword, object);
        String actual = keywordVariables.toString();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_ievv8() {
        DOMNodePointer parent = null;
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
        String actual = nullPropertyPointer.asPath();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_eVby0_1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        String[] propertyNames = nullPropertyPointer.getPropertyNames();
        assertNotNull(propertyNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_eVby0_2() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        String[] propertyNames = nullPropertyPointer.getPropertyNames();
        assertTrue(propertyNames.length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() {
        nullPropertyPointer = new NullPropertyPointer(parent);
        assertFalse(nullPropertyPointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_ISio0() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(new DOMNodePointer(null, null, null));
        boolean isActual = nullPropertyPointer.isActual();
        Assertions.assertFalse(isActual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        nullpropertypointer = new NullPropertyPointer(parent);
        when(parent.isLeaf()).thenReturn(true);
        assertTrue(nullpropertypointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_rvSf0() {
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(new DOMNodePointer(null, null, null));
        boolean isLeaf = nullPropertyPointer.isLeaf();
        Assertions.assertTrue(isLeaf);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualProperty_cCLS0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(parent);
        assertFalse(nullPropertyPointer.isActualProperty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyCount_JHIz0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        int propertyCount = nullPropertyPointer.getPropertyCount();
        assertEquals(0, propertyCount);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPropertyName_IWgz0() throws Exception {
        parent = mock(DOMNodePointer.class);
        locale = mock(Locale.class);
        variables = mock(KeywordVariables.class);
        name = mock(QName.class);
        nullpropertypointer = new NullPropertyPointer(parent);
        nullpropertypointer.setPropertyName(propertyName);
        verify(nullpropertypointer, times(1)).setPropertyName(propertyName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithQName_ScZM1() {
        String qualifiedName = "test";
        QName qName = new QName(qualifiedName);
        KeywordVariables variables = new KeywordVariables("test", new Object());
        VariablePointer variablePointer = new VariablePointer(qName);
        NodePointer newParent = variablePointer.createPath(null, null);
        assertEquals(VariablePointer.class, newParent.getClass());
        assertEquals(qName, newParent.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames_eVby0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NullPropertyPointer nullPropertyPointer = new NullPropertyPointer(domNodePointer);
        String[] propertyNames = nullPropertyPointer.getPropertyNames();
        assertNotNull(propertyNames);
        assertTrue(propertyNames.length == 0);
    }
}