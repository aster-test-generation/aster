/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PrecedingOrFollowingContext_Test_Passing {
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    private PrecedingOrFollowingContext precedingorfollowingcontext;
    private boolean reverse;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    private NodePointer currentRootLocation;
    private Stack stack = null;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NodePointer parent;
    @Mock
    private NodeIterator nodeIterator;
    @Mock
    private NodePointer nodePointer;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() {
        precedingorfollowingcontext = new PrecedingOrFollowingContext(parentContext, nodeTest, true);
        // arrange
        int position = 10;
        // act
        boolean result = precedingorfollowingcontext.setPosition(position);
        // assert
        verify(parentContext, times(1)).setPosition(position);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() {
        reverse = true;
        precedingorfollowingcontext = new PrecedingOrFollowingContext(null, null, reverse);
        assertEquals(-1, precedingorfollowingcontext.getDocumentOrder());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDocumentOrder1_xWfk0() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(2));
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(3), false);
        int actualDocumentOrder = precedingOrFollowingContext.getDocumentOrder();
        int expectedDocumentOrder = 1;
        assertEquals(expectedDocumentOrder, actualDocumentOrder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDocumentOrder2_UwTF1() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(1));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(2));
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(namespaceContext, new NodeTypeTest(3), true);
        int actualDocumentOrder = precedingOrFollowingContext.getDocumentOrder();
        int expectedDocumentOrder = -1;
        assertEquals(expectedDocumentOrder, actualDocumentOrder);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCurrentNodePointer() throws Exception {
        currentNodePointer = mock(NodePointer.class);
        precedingorfollowingcontext = new PrecedingOrFollowingContext(null, null, false);
        when(precedingorfollowingcontext.getCurrentNodePointer()).thenReturn(currentNodePointer);
        NodePointer actualCurrentNodePointer = precedingorfollowingcontext.getCurrentNodePointer();
        assertEquals(currentNodePointer, actualCurrentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_ItMj0() {
        NamespaceContext parentContext = new NamespaceContext(null, new NodeTypeTest(0));
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        PrecedingOrFollowingContext context = new PrecedingOrFollowingContext(parentContext, nodeTest, false);
        NodePointer currentNodePointer = context.getCurrentNodePointer();
        assertNotNull(currentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode1_BbiZ0() {
        PrecedingOrFollowingContext precedingOrFollowingContext = new PrecedingOrFollowingContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1), false);
        boolean result = precedingOrFollowingContext.nextNode();
        assertTrue(result);
    }
}