/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TreeCompiler_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOr_fxIk0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object[] arguments = null;
        Expression[] expArray = null;
        if (arguments != null) {
            expArray = new Expression[arguments.length];
            for (int i = 0;i < expArray.length;i++) {
                expArray[i] = (Expression) arguments[i];
            }
        }
        assertEquals(new CoreOperationOr(expArray), treeCompiler.or(arguments));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testMinus_PgGv0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object argument = null;
        Object actual = treeCompiler.minus(argument);
        Object expected = null;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExpressionPath_MFxI0() {
        TreeCompiler treeCompiler = new TreeCompiler();
        Object expression = new Object();
        Object[] predicates = new Object[1];
        Object[] steps = new Object[1];
        Object result = treeCompiler.expressionPath(expression, predicates, steps);
        assertNotNull(result);
    }
}