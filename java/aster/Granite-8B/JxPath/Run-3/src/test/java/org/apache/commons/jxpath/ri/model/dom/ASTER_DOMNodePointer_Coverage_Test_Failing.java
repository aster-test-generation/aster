/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathAbstractFactoryException;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DOMNodePointer_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild1_rtqi0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        int index = 0;
        boolean success = false;
        NodePointer nodePointer = null;
        try {
            nodePointer = domNodePointer.createChild(null, null, index);
        } catch (JXPathAbstractFactoryException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_hashCode_eLfw0()
    {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        int hashCode = domNodePointer.hashCode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue1_WkAe0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        Object value = null;
        domNodePointer.setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue2_ZIPD1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        Object value = new Object();
        domNodePointer.setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetName1_IqSh0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        QName actualName = domNodePointer.getName();
        QName expectedName = null;
        assertEquals(expectedName, actualName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator_GQSa0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NodeIterator actualNodeIterator = domNodePointer.namespaceIterator();
        NodeIterator expectedNodeIterator = new DOMNamespaceIterator(domNodePointer);
        assertEquals(expectedNodeIterator, actualNodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateAttribute1_HxJy0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        NodePointer nodePointer = domNodePointer.createAttribute(null, null);
        assertEquals(null, nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove_Klei0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        domNodePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_rcWp0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        domNodePointer.getPointerByID(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLanguageWithNullCurrentLanguage_iuJS0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        boolean result = domNodePointer.isLanguage("en");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild1_euRi0() {
        DOMNodePointer ptr = new DOMNodePointer(null, null, null);
        ptr.createChild(null, null, 0, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChild2_LxwE1() {
        DOMNodePointer ptr = new DOMNodePointer(null, null, null);
        ptr.createChild(null, null, 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_beiz1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = domNodePointer.getNamespaceURI("");
        assertNull(NodePointer.UNKNOWN_NAMESPACE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_Nygx4() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = domNodePointer.getNamespaceURI("prefix");
        assertNull(DOMNodePointer.UNKNOWN_NAMESPACE);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompareChildNodePointers2_XIHh1_fid1() {
        DOMNodePointer pointer1 = new DOMNodePointer(null, null, null);
        DOMNodePointer pointer2 = new DOMNodePointer(null, null, null);
        int actual = pointer1.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_beiz1_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = domNodePointer.getNamespaceURI("");
        assertEquals(NodePointer.UNKNOWN_NAMESPACE, namespaceURI);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test5_Nygx4_fid1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String namespaceURI = domNodePointer.getNamespaceURI("prefix");
        assertEquals(DOMNodePointer.UNKNOWN_NAMESPACE, namespaceURI);
    }
}