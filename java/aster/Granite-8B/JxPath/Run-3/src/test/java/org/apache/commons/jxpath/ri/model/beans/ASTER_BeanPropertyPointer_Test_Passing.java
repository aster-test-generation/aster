/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanPropertyPointer_Test_Passing {
    private VariablePointer variablePointer;
    private KeywordVariables keywordVariables;
    private JXPathBasicBeanInfo jXPathBasicBeanInfo;
    private BeanPropertyPointer beanpropertypointer;
    private String propertyName;
    private DOMNodePointer parent;
    private JXPathBasicBeanInfo beanInfo;
    private PropertyDescriptor pd;
    @Mock
    private int index;
    private Object bean;
    private static final int WHOLE_COLLECTION = -1;
    private static final int INDEX = 0;
    @Mock
    private Locale locale;
    @Mock
    private KeywordVariables variables;
    @Mock
    private QName name;
    private transient PropertyDescriptor[] propertyDescriptors;
    @Mock
    private JXPathBasicBeanInfo mockBeanInfo;
    private static final Locale LOCALE = Locale.ENGLISH;
    private static final String ID = "id";
    private static final String PREFIX = "prefix";
    private static final String LOCAL_NAME = "localName";
    private static final String KEYWORD = "keyword";
    private static final VariablePointer PARENT = mock(VariablePointer.class);
    private static final KeywordVariables KEYWORD_VARIABLES = mock(KeywordVariables.class);
    private static final QName NAME = mock(QName.class);
    private static final PropertyDescriptor PROPERTY_DESCRIPTOR = mock(PropertyDescriptor.class);
    private static final IndexedPropertyDescriptor INDEXED_PROPERTY_DESCRIPTOR = mock(IndexedPropertyDescriptor.class);
    private BeanPropertyPointer beanPropertyPointer;
    private transient String[] names;
    private PropertyDescriptor propertyDescriptor;
    private QName qName;
    private Class clazz;
    private Class dynamicPropertyHandlerClass;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue1_bMmF0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        Object value = new Object();
        domNodePointer.setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue2_tmOh1() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        Object value = new Object();
        variablePointer.setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName1_ATaW3() {
        QName qName = new QName(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName2_toTP4() {
        QName qName = new QName(null, null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue1_LwzI11() {
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(null, null);
        Object value = new Object();
        beanPropertyPointer.setValue(value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithVariablePointerAndNode_FnlY1() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        boolean result = variablePointer.isCollection();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyName_HLfo0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(null, false);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, jXPathBasicBeanInfo);
        beanPropertyPointer.setPropertyName("propertyName");
        assertEquals("propertyName", beanPropertyPointer.getPropertyName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetIndex() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        // Set up the expected behavior of the setIndex method
        when(beanpropertypointer.isCollection()).thenReturn(true);
        when(beanpropertypointer.getIndex()).thenReturn(0);
        when(beanpropertypointer.getIndex()).thenReturn(1);
        // Call the setIndex method with different arguments
        beanpropertypointer.setIndex(0);
        beanpropertypointer.setIndex(1);
        // Verify that the setIndex method was called with the expected arguments
        verify(beanpropertypointer, times(2)).setIndex(anyInt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove1_ScNz0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        domNodePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove2_rgVT1() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        domNodePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove4_RdmI3() {
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        VariablePointer variablePointer = new VariablePointer(keywordVariables, null);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        domNodePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyDescriptors_1() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(null, mockBeanInfo);
        // Mock the behavior of the getPropertyDescriptors method in the mockBeanInfo object
        when(mockBeanInfo.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[0]);
        // Call the getPropertyDescriptors method on the beanpropertypointer object
        propertyDescriptors = beanpropertypointer.getPropertyDescriptors();
        // Assert that the propertyDescriptors array is not null
        // Assert that the length of the propertyDescriptors array is 0
        assertNotNull(propertyDescriptors);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyDescriptors_2() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(null, mockBeanInfo);
        // Mock the behavior of the getPropertyDescriptors method in the mockBeanInfo object
        when(mockBeanInfo.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[0]);
        // Call the getPropertyDescriptors method on the beanpropertypointer object
        propertyDescriptors = beanpropertypointer.getPropertyDescriptors();
        // Assert that the propertyDescriptors array is not null
        // Assert that the length of the propertyDescriptors array is 0
        assertEquals(0, propertyDescriptors.length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_BLFr0() {
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(new DOMNodePointer(null, null, null), new JXPathBasicBeanInfo(null, false));
        boolean isContainer = beanPropertyPointer.isContainer();
        assertTrue(isContainer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames2_cuZj1() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(variablePointer, new JXPathBasicBeanInfo(Class.class));
        String[] propertyNames = beanPropertyPointer.getPropertyNames();
        assertNotNull(propertyNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPropertyNames3_roUL2() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("name"));
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(variablePointer, new JXPathBasicBeanInfo(Class.class));
        String[] propertyNames = beanPropertyPointer.getPropertyNames();
        assertNotNull(propertyNames);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_uqkG2() {
        QName qName = new QName("qualifiedName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName2_nabs3() {
        QName qName = new QName("prefix", "localName");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer_EOep4() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_okem5() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariables_crVf6() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfo_ZHWA7() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfo2_mIeW8() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfo3_Dfnl9() {
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(Class.class, Class.class);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLength_AtkC0() {
        DOMNodePointer pointer = new DOMNodePointer(null, null, null);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(pointer, null);
        int length = beanPropertyPointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyCount() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(parent, beanInfo);
        when(beanInfo.isAtomic()).thenReturn(false);
        when(beanInfo.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[0]);
        assertEquals(0, beanpropertypointer.getPropertyCount());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer_FqJQ4() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        assert variablePointer.getName().equals("name");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_lOwq5() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(keywordVariables, new QName("name"));
        assert variablePointer.getName().equals("name");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPropertyCountTest1_hVSu0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(null, false);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, jXPathBasicBeanInfo);
        int actual = beanPropertyPointer.getPropertyCount();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void getPropertyCountTest2_OLmJ1() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(null, true);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, jXPathBasicBeanInfo);
        int actual = beanPropertyPointer.getPropertyCount();
        int expected = 0;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualProperty1_szjN0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, null);
        boolean actualProperty = beanPropertyPointer.isActualProperty();
        assertTrue(actualProperty);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName1_PKRA2() {
        QName qName = new QName(null);
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName2_OfZe3() {
        QName qName = new QName(null, null);
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer1_ntsr4() {
        QName qName = new QName(null);
        VariablePointer variablePointer = new VariablePointer(qName);
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_Ygia5() {
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        QName qName = new QName(null);
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariables1_UgTQ6() {
        KeywordVariables keywordVariables = new KeywordVariables(null, null);
        assertNotNull(keywordVariables);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfo1_CIXB7() {
        Class clazz = null;
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz, false);
        assertNotNull(jXPathBasicBeanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfo2_FduY8() {
        Class clazz = null;
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz);
        assertNotNull(jXPathBasicBeanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfo3_LeDR9() {
        Class clazz = null;
        Class dynamicPropertyHandlerClass = null;
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz, dynamicPropertyHandlerClass);
        assertNotNull(jXPathBasicBeanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBeanPropertyPointer1_cyie10() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(null, false);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, jXPathBasicBeanInfo);
        assertNotNull(beanPropertyPointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove5_yCQE4_hnyd0() {
        Class clazz = null;
        boolean atomic = false;
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz, atomic);
        Locale locale = null;
        DOMNodePointer domNodePointer = new DOMNodePointer(null, locale, null);
        BeanPropertyPointer beanPropertyPointer = new BeanPropertyPointer(domNodePointer, jXPathBasicBeanInfo);
        beanPropertyPointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyDescriptors() throws Exception {
        beanpropertypointer = new BeanPropertyPointer(null, mockBeanInfo);
        // Mock the behavior of the getPropertyDescriptors method in the mockBeanInfo object
        when(mockBeanInfo.getPropertyDescriptors()).thenReturn(new PropertyDescriptor[0]);
        // Call the getPropertyDescriptors method on the beanpropertypointer object
        propertyDescriptors = beanpropertypointer.getPropertyDescriptors();
        // Assert that the propertyDescriptors array is not null
        assertNotNull(propertyDescriptors);
        // Assert that the length of the propertyDescriptors array is 0
        assertEquals(0, propertyDescriptors.length);
    }
}