/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.apache.commons.jxpath.util.ValueUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VariablePointer_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue1_HkDx1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("name");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        variablePointer.setValue(new Object());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode1_JOAx0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        Object value = variablePointer.getBaseValue();
        Object result = variablePointer.getImmediateNode();
        assertEquals(ValueUtils.getValue(value), result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_eWos0() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        boolean isCollection = variablePointer.isCollection();
        assertFalse(isCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection2_ITXF1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables(null, null), null);
        boolean isCollection = variablePointer.isCollection();
        assertFalse(isCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection3_zYLg2() {
        VariablePointer variablePointer = new VariablePointer(null, new QName(null, null));
        boolean isCollection = variablePointer.isCollection();
        assertFalse(isCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection4_uUTI3() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables(null, null), new QName(null, null));
        boolean isCollection = variablePointer.isCollection();
        assertFalse(isCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeafWhenValueIsNull_jimH0() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        boolean isLeaf = variablePointer.isLeaf();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_yHly1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables(null, null), new QName(""));
        variablePointer.getImmediateValuePointer();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove1_oBtb1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", null), new QName("name"));
        variablePointer.remove();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_UOnt0_lxqz0() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new QName("prefix", "localName")), new QName("qualifiedName"));
        String actual = variablePointer.asPath();
        String expected = "$prefix:localName";
        assert actual.equals(expected);
    }
}