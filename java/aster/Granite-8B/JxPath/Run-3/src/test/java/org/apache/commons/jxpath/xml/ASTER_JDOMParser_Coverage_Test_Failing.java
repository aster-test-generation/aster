/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.xml;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JDOMParser_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLExpandEntities_IyWG1() {
        JDOMParser parser = new JDOMParser();
        parser.setExpandEntityReferences(true);
        try {
            parser.parseXML(null);
        } catch (JXPathException e) {
            assertEquals("JDOM parser configuration error. JDOM " +
                "does not support the expandEntityReferences=true setting.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLValidation_TrDQ2() {
        JDOMParser parser = new JDOMParser();
        parser.setValidating(true);
        try {
            parser.parseXML(null);
        } catch (JXPathException e) {
            assertEquals("JDOM parser configuration error. JDOM " +
                "does not support the validating=true setting.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLStream_FFlf3() {
        JDOMParser parser = new JDOMParser();
        try {
            parser.parseXML(null);
        } catch (JXPathException e) {
            assertEquals("JDOM parser error", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLStreamExpandEntities_vNrS4() {
        JDOMParser parser = new JDOMParser();
        parser.setExpandEntityReferences(true);
        try {
            parser.parseXML(null);
        } catch (JXPathException e) {
            assertEquals("JDOM parser error", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLStreamValidation_WRad5() {
        JDOMParser parser = new JDOMParser();
        parser.setValidating(true);
        try {
            parser.parseXML(null);
        } catch (JXPathException e) {
            assertEquals("JDOM parser error", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseXMLStreamExpandEntitiesValidation_njJu6() {
        JDOMParser parser = new JDOMParser();
        parser.setExpandEntityReferences(true);
        parser.setValidating(true);
        try {
            parser.parseXML(null);
        } catch (JXPathException e) {
            assertEquals("JDOM parser error", e.getMessage());
        }
    }
}