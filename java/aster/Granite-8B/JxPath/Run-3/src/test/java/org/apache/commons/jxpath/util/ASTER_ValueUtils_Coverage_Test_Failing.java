/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.beans.IndexedPropertyDescriptor;
import java.beans.PropertyDescriptor;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetIndexedPropertyLength1_ofvV0() {
        Object object = null;
        IndexedPropertyDescriptor pd = null;
        int result = ValueUtils.getIndexedPropertyLength(object, pd);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveList_vPQE1() {
        Object collection = null;
        int index = 0;
        int size = 0;
        ((List) collection).remove(index);
        assertEquals(collection, ValueUtils.remove(collection, index));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveCollection_KUKt2() {
        Object collection = null;
        int index = 0;
        Iterator it = null;
        for (int i = 0;i < index;i++) {
            if (!it.hasNext()) {
                break;
            }
            it.next();
        }
        if (it.hasNext()) {
            it.next();
            it.remove();
        }
        assertEquals(collection, ValueUtils.remove(collection, index));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveOther_KAFd3() {
        Object collection = null;
        int index = 0;
        throw new JXPathException("Cannot remove " + collection.getClass().getName() + "[" + index + "]");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue1_EJqm0() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue2_QKYP1() {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = null;
        Object value = ValueUtils.getValue(bean, propertyDescriptor);
        assertEquals(null, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_MethodNull_Ktlx0() {
        Object bean = null;
        PropertyDescriptor propertyDescriptor = null;
        Object value = null;
        ValueUtils.setValue(bean, propertyDescriptor, value);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_ThrowException3_TEmp6() {
        Object bean = new Object();
        PropertyDescriptor propertyDescriptor = null;
        Object value = new Object();
        try {
            ValueUtils.setValue(bean, propertyDescriptor, value);
        } catch (JXPathException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueCollectionIndexValid_YkTI5_gbGO1() {
        HashSet collection = new HashSet<>();
        collection.add(new Object());
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListIndexValid_IKaW4_aLtK1() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }
}