/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_InitialContext_Test_Passing {
    private NodePointer nodePointer;
    private boolean collection;
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    @Mock
    private SelfContext selfContext;
    private InitialContext initialcontext;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private NodePointer nodePointerMock;
    @Mock
    private JXPathContext context;
    @Mock
    private NodePointer mockNodePointer;
    private boolean started = false;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetSingleNodePointer_tXHN0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)));
        Pointer pointer = initialContext.getSingleNodePointer();
        assertNotNull(pointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithValidPosition_yYdL0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)));
        boolean result = initialContext.setPosition(5);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithInvalidPosition_wyxp1() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)));
        boolean result = initialContext.setPosition(0);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithPositionEqualToOne_cExu2() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)));
        boolean result = initialContext.setPosition(1);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPositionWithPositionEqualToNegativeOne_tpVi4() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)));
        boolean result = initialContext.setPosition(-1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode() {
        initialcontext = new InitialContext(parentContext);
        // Mock the behavior of the nextNode method
        when(initialcontext.nextNode()).thenReturn(true);
        // Call the nextNode method and verify the result
        boolean result = initialcontext.nextNode();
        assertTrue(result);
        // Verify that the nextNode method was called once
        verify(initialcontext, times(1)).nextNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_kPXd0() {
        InitialContext initialContext = new InitialContext(new NamespaceContext(null, new NodeTypeTest(0)));
        NodePointer nodePointer = initialContext.getCurrentNodePointer();
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_TCHY0() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(0));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(0));
        InitialContext initialContext = new InitialContext(namespaceContext);
        Object result = initialContext.getValue();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testnextSet() throws Exception {
        initialcontext = new InitialContext(parentContext);
        when(initialcontext.nextSet()).thenReturn(true);
        boolean result = initialcontext.nextSet();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_xUMj0() {
        initialcontext = new InitialContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(2)));
        nodePointer = mock(NodePointer.class);
        when(initialcontext.getValue()).thenReturn(nodePointer.getValue());
        assertEquals(nodePointer.getValue(), initialcontext.getValue());
        verify(nodePointer, times(1)).getValue();
    }
}