/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ParentContext_Test_Passing {
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    private ParentContext parentcontext;
    private boolean setStarted = false;
    private NodePointer currentNodePointer;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private NodeTypeTest nodeTypeTest;
    @Mock
    private NamespaceContext namespaceContext;
    @Mock
    private SelfContext selfContext;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() {
        parentcontext = new ParentContext(parentContext, nodeTest);
        // Mock the setPosition method to return true
        when(parentcontext.setPosition(1)).thenReturn(true);
        // Call the setPosition method and assert the result
        boolean result = parentcontext.setPosition(1);
        assertTrue(result);
        // Verify that the setPosition method was called once
        verify(parentcontext, times(1)).setPosition(1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder() {
        parentcontext = new ParentContext(parentContext, nodeTest);
        // Arrange
        when(parentContext.getDocumentOrder()).thenReturn(-1);
        // Act
        int result = parentcontext.getDocumentOrder();
        // Assert
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_sNEi0() {
        ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = parentContext.setPosition(1);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_HFLN1() {
        ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        boolean result = parentContext.setPosition(0);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetDocumentOrder_gKOw0() {
        ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        int actual = parentContext.getDocumentOrder();
        int expected = -1;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReset_BgMs0() {
        ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), new NodeTypeTest(0));
        parentContext.reset();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetCurrentNodePointer() throws Exception {
        parentcontext = new ParentContext(parentContext, nodeTest);
        Mockito.when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        NodePointer actualCurrentNodePointer = parentcontext.getCurrentNodePointer();
        assertEquals(nodePointer, actualCurrentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer_VnAI0() {
        ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        NodePointer currentNodePointer = parentContext.getCurrentNodePointer();
        assertNotNull(currentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentPosition_RWqi0() {
        ParentContext parentContext = new ParentContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(1)), new NodeTypeTest(1)), new NodeTypeTest(1));
        assertEquals(1, parentContext.getCurrentPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNextNode_oAuW0() throws Exception {
        nodeTest = new NodeTypeTest(1);
        currentNodePointer = mock(NodePointer.class);
        setStarted = false;
        when(parentContext.getCurrentNodePointer()).thenReturn(nodePointer);
        when(nodePointer.getImmediateParentPointer()).thenReturn(currentNodePointer);
        when(currentNodePointer.isContainer()).thenReturn(false);
        when(currentNodePointer.testNode(nodeTest)).thenReturn(true);
        ParentContext parentContext = new ParentContext(namespaceContext, nodeTypeTest);
        boolean result = parentContext.nextNode();
        verify(parentContext, times(1)).getCurrentNodePointer();
        verify(nodePointer, times(1)).getImmediateParentPointer();
        verify(currentNodePointer, times(1)).isContainer();
        verify(currentNodePointer, times(1)).testNode(nodeTest);
        assertTrue(result);
    }
}