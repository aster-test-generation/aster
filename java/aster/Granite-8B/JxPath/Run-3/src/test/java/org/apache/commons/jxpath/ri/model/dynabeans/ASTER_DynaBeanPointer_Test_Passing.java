/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynabeans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DynaBeanPointer_Test_Passing {
    private Object object;
    private String prefix;
    private String localName;
    private String keyword;
    private QName name;
    private DynaBean dynaBean;
    private DynaBeanPointer dynabeanpointer;
    private Locale locale;
    private KeywordVariables keywordVariables;
    private VariablePointer variablePointer;
    private QName qName;
    @Mock
    private DynaBean dynaBeanMock;
    private VariablePointer parent;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        dynaBean = dynaBeanMock;
        dynabeanpointer = new DynaBeanPointer(new QName("name"), dynaBean, Locale.getDefault());
        // Act
        Object immediateNode = dynabeanpointer.getImmediateNode();
        // Assert
        assertEquals(dynaBean, immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_iTkW0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        boolean isCollection = domNodePointer.isCollection();
        assertFalse(isCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals3_QWiR2() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        KeywordVariables keywordVariables2 = new KeywordVariables("keyword2", new Object());
        assert !keywordVariables.equals(null);
        assert !keywordVariables.equals(new Object());
        assert keywordVariables.equals(keywordVariables);
        assert !keywordVariables.equals(keywordVariables2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        name = new QName("prefix", "localName");
        dynabeanpointer = new DynaBeanPointer(name, null, null);
        when(name.hashCode()).thenReturn(123);
        assertEquals(123, dynabeanpointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetName() throws Exception {
        dynaBean = mock(DynaBean.class);
        locale = Locale.getDefault();
        name = new QName("test");
        dynabeanpointer = new DynaBeanPointer(name, dynaBean, locale);
        when(dynaBean.get("test")).thenReturn("value");
        assertEquals("value", dynabeanpointer.getName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithNonNullParent_aiwl1() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        DynaBeanPointer dynaBeanPointer = new DynaBeanPointer(parent, null, null);
        assertEquals("/" + parent.asPath(), dynaBeanPointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        dynaBean = dynaBeanMock;
        dynabeanpointer = new DynaBeanPointer(null, null, dynaBean);
        when(dynaBeanMock.get("test")).thenReturn("test");
        assertEquals("test", dynabeanpointer.getBaseValue());
    }
}