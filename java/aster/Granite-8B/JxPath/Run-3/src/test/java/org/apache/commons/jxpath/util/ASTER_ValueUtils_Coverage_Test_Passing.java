/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.util;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ValueUtils_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueArrayIndexOutOfBound_voVs0() {
        Object collection = new Object[0];
        int index = -1;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListIndexOutOfBound_fhPj1() {
        Object collection = new ArrayList<>();
        int index = -1;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueCollectionIndexOutOfBound_SHfE2() {
        Object collection = new HashSet<>();
        int index = -1;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueArrayIndexValid_Ifdi3() {
        Object collection = new Object[1];
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueArrayNull_kSBm6() {
        Object collection = null;
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueArrayEmpty_nFKk9() {
        Object collection = new Object[0];
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListEmpty_efsp10() {
        Object collection = new ArrayList<>();
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueCollectionEmpty_vWZN11() {
        Object collection = new HashSet<>();
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueArrayValid_BIxH12() {
        Object collection = new Object[1];
        collection.getClass().isArray();
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListValid_LpWG13() {
        Object collection = new ArrayList<>();
        collection.getClass().isArray();
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueCollectionValid_DDNN14() {
        Object collection = new HashSet<>();
        collection.getClass().isArray();
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testArray_lfLY0() {
        Class clazz = int[].class;
        assertEquals(1, ValueUtils.getCollectionHint(clazz));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCollection_viLq1() {
        Class clazz = ArrayList.class;
        assertEquals(1, ValueUtils.getCollectionHint(clazz));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrimitive_PoFB2() {
        Class clazz = int.class;
        assertEquals(-1, ValueUtils.getCollectionHint(clazz));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInterface_vdgP3() {
        Class clazz = Runnable.class;
        assertEquals(0, ValueUtils.getCollectionHint(clazz));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemoveArray_Efqk0() {
        Object collection = null;
        int index = 0;
        Object smaller = null;
        int length = 0;
        try {
            smaller = Array.newInstance(collection.getClass().getComponentType(), length - 1);
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (index > 0) {
            System.arraycopy(collection, 0, smaller, 0, index);
        }
        if (index < length - 1) {
            System.arraycopy(collection, index + 1, smaller, index, length - index - 1);
        }
        assertEquals(smaller, ValueUtils.remove(collection, index));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueCollectionIndexValid_YkTI5_gbGO1_fid1() {
        HashSet collection = new HashSet<>();
        collection.add(new Object());
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertNull(expected);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueListIndexValid_IKaW4_aLtK1_fid1() {
        List<Object> collection = new ArrayList<>();
        collection.add(new Object());
        int index = 0;
        Object expected = null;
        Object actual = ValueUtils.getValue(collection, index);
        assertNull(expected);
    }
}