/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.axes;

import java.util.Stack;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DescendantContext_Test_Passing {
    @Mock
    private NamespaceContext parentContext;
    @Mock
    private NodeTypeTest nodeTest;
    private DescendantContext descendantContext;
    private boolean setStarted = false;
    private DescendantContext descendantcontext;
    private NodePointer currentNodePointer = null;
    @Mock
    private SelfContext selfContext;
    @Mock
    private JXPathContext context;
    private boolean includeSelf;
    private Stack stack = null;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_rXpi0() {
        DescendantContext descendantContext = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), true, new NodeTypeTest(0));
        descendantContext.setPosition(1);
        assertEquals(true, descendantContext.setPosition(1));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_Hpzw1() {
        DescendantContext descendantContext = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), true, new NodeTypeTest(0));
        descendantContext.setPosition(1);
        assertEquals(false, descendantContext.setPosition(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_uuWY2() {
        DescendantContext descendantContext = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), true, new NodeTypeTest(0));
        descendantContext.setPosition(1);
        assertEquals(true, descendantContext.setPosition(2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition4_qrtR3() {
        DescendantContext descendantContext = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), true, new NodeTypeTest(0));
        descendantContext.setPosition(1);
        assertEquals(false, descendantContext.setPosition(3));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer1_lFXc0() {
        DescendantContext descendantContext = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), false, new NodeTypeTest(0));
        NodePointer currentNodePointer = descendantContext.getCurrentNodePointer();
        assertNotNull(currentNodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetCurrentNodePointer2_vQeW1() {
        DescendantContext descendantContext = new DescendantContext(new NamespaceContext(new SelfContext(null, new NodeTypeTest(0)), new NodeTypeTest(0)), false, new NodeTypeTest(0));
        NodePointer currentNodePointer = descendantContext.getCurrentNodePointer();
        assertEquals(1, descendantContext.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsChildOrderingRequired() {
        descendantContext = new DescendantContext(parentContext, true, nodeTest);
        // Arrange
        when(nodeTest.getNodeType()).thenReturn(1);
        // Act
        boolean result = descendantContext.isChildOrderingRequired();
        // Assert
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsChildOrderingRequired_SwDK0() {
        SelfContext selfContext = new SelfContext(null, new NodeTypeTest(0));
        NamespaceContext namespaceContext = new NamespaceContext(selfContext, new NodeTypeTest(0));
        DescendantContext descendantContext = new DescendantContext(namespaceContext, true, new NodeTypeTest(0));
        boolean result = descendantContext.isChildOrderingRequired();
        assertTrue(result);
    }
}