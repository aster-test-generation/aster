/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.parser;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_XPathParserTokenManager_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchToInvalidLexicalState_HERb0() {
        XPathParserTokenManager xpathParserTokenManager = new XPathParserTokenManager(null, 1);
        try {
            xpathParserTokenManager.SwitchTo(1);
        } catch (TokenMgrError e) {
            assertEquals("Error: Ignoring invalid lexical state : 1. State unchanged.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSwitchToInvalidLexicalState2_FGQe1() {
        XPathParserTokenManager xpathParserTokenManager = new XPathParserTokenManager(null, 1);
        try {
            xpathParserTokenManager.SwitchTo(-1);
        } catch (TokenMgrError e) {
            assertEquals("Error: Ignoring invalid lexical state : -1. State unchanged.", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJJmatchedKind_XjkC0() throws Exception {
        XPathParserTokenManager target = new XPathParserTokenManager(null);
        target.getNextToken();
        assertEquals(0, target.jjmatchedKind);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJjmatchedPos_gCxt1() throws Exception {
        XPathParserTokenManager target = new XPathParserTokenManager(null);
        target.getNextToken();
        assertEquals(0, target.jjmatchedPos);
    }
}