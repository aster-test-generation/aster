/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.Attr;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMAttributeIterator_Test_Passing {
    private int position = 0;
    DOMAttributeIterator domattributeiterator;
    Node node;
    NodePointer nodepointer;
    Attr attr;
    Locale locale;
    VariablePointer variablepointer;
    KeywordVariables keywordvariables;
    QName qname;
    private List attributes;
    String id;
    VariablePointer parent;
    KeywordVariables variables;
    QName name;
    @Mock
    private NamedNodeMap namednodemap;
    @Mock
    private List list;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetPosition() throws Exception {
        node = mock(Node.class);
        nodepointer = mock(NodePointer.class);
        attr = mock(Attr.class);
        locale = mock(Locale.class);
        id = "test";
        parent = mock(VariablePointer.class);
        variables = mock(KeywordVariables.class);
        name = mock(QName.class);
        domattributeiterator = new DOMAttributeIterator(nodepointer, name);
        when(nodepointer.getNode()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namednodemap);
        when(namednodemap.item(any())).thenReturn(attr);
        when(nodepointer.getNode()).thenReturn(node);
        when(node.getAttributes()).thenReturn(namednodemap);
        when(namednodemap.item(any())).thenReturn(attr);
        assertTrue(domattributeiterator.setPosition(1));
    }
}