/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.*;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_VariablePointer_Test_Passing {
    private VariablePointer variablePointer;
    private NodePointer pointer1;
    private NodePointer pointer2;
    private JXPathContext context;
    private KeywordVariables variables;
    private QName name;
    private boolean actual;
    private NodePointer valuePointer;
    @Mock
    private KeywordVariables keywordVariables;
    @Mock
    private QName qName;
    @Mock
    private NodePointer nodePointer;
    @Mock
    private JXPathContextReferenceImpl jXPathContextReferenceImpl;
    @Mock
    private JXPathContext jXPathContext;
    @Mock
    private IdentityManager identityManager;
    @Mock
    private AbstractFactory abstractFactory;
    @Mock
    private Functions functions;
    @Mock
    private Locale locale;
    @Mock
    private ExceptionHandler exceptionHandler;
    @Mock
    private KeyManager keyManager;
    @Mock
    private Pointer namespaceContextPointer;
    @Mock
    private Pointer pointer;
    @Mock
    private Pointer contextPointer;
    @Mock
    private Pointer parentPointer;
    @Mock
    private Pointer contextBeanPointer;
    @Mock
    private Pointer parentContextBeanPointer;
    @Mock
    private Pointer parentContextPointer;
    @Mock
    private Pointer parentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextPointer;
    @Mock
    private Pointer parentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextParentContextBeanPointer;
    @Mock
    private NodeTest test;
    @Mock
    private NodeIterator nodeIterator;
    private VariablePointer variablepointer;
    private Object value;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcompareChildNodePointers() {
        variablePointer = new VariablePointer(Mockito.mock(QName.class));
        pointer1 = Mockito.mock(NodePointer.class);
        pointer2 = Mockito.mock(NodePointer.class);
        when(pointer1.getIndex()).thenReturn(1);
        when(pointer2.getIndex()).thenReturn(2);
        int result = variablePointer.compareChildNodePointers(pointer1, pointer2);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithQNameObject_tNpN0() {
        QName name = new QName("qualifiedName");
        VariablePointer variablePointer = new VariablePointer(name);
        boolean result = variablePointer.isCollection();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollectionWithKeywordVariablesObject_DckC1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer variablePointer = new VariablePointer(variables, name);
        boolean result = variablePointer.isCollection();
        Assertions.assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetIndex_nWss0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        variablePointer.setIndex(1);
        assertEquals(1, variablePointer.getIndex());
        assertNull(variablePointer.getValuePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() {
        variablePointer = new VariablePointer(Mockito.mock(KeywordVariables.class), Mockito.mock(QName.class));
        Mockito.when(nodePointer.childIterator(test, false, null)).thenReturn(nodeIterator);
        NodeIterator actualNodeIterator = variablePointer.childIterator(test, false, null);
        assertEquals(nodeIterator, actualNodeIterator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthWithActualTrue_lSfg0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        int length = variablePointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthWithActualFalse_ICxh1() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        int length = variablePointer.getLength();
        assertEquals(0, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLengthWithNullObject_LoHj2() {
        VariablePointer variablePointer = new VariablePointer(null);
        int length = variablePointer.getLength();
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath() throws Exception {
        actual = true; // Set actual to true for testing
        variablepointer = new VariablePointer(Mockito.mock(QName.class));
        context = Mockito.mock(JXPathContext.class);
        value = new Object();
        NodePointer ptr = variablepointer.createPath(context, value);
        if (actual) {
            verify(variablepointer).setValue(value);
            assertEquals(variablepointer, ptr);
        }
        else {
            verify(variablepointer, never()).setValue(value);
            assertNotNull(ptr);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_rqZs0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        assertTrue(variablePointer.equals(variablePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameValues_lIrI1() {
        VariablePointer variablePointer1 = new VariablePointer(new QName("prefix", "localName"));
        VariablePointer variablePointer2 = new VariablePointer(new QName("prefix", "localName"));
        assertTrue(variablePointer1.equals(variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentValues_uQxt2() {
        VariablePointer variablePointer1 = new VariablePointer(new QName("prefix1", "localName1"));
        VariablePointer variablePointer2 = new VariablePointer(new QName("prefix2", "localName2"));
        assertFalse(variablePointer1.equals(variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_PyOC3() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        assertFalse(variablePointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentClasses_AsAc4() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        assertFalse(variablePointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentObjects_lXjw5() {
        VariablePointer variablePointer1 = new VariablePointer(new QName("prefix", "localName"));
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer2 = new VariablePointer(keywordVariables, new QName("prefix", "localName"));
        assertFalse(variablePointer1.equals(variablePointer2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePathWithInvalidInput_NpEi1() {
        VariablePointer variablePointer = new VariablePointer(new QName("test"));
        try {
            variablePointer.createPath(null);
            fail("Expected IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            assertEquals("Context cannot be null", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainer_ulPN0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        boolean isContainer = variablePointer.isContainer();
        assertTrue(isContainer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContainerWithVariables_iJlJ1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, new QName("prefix", "localName"));
        boolean isContainer = variablePointer.isContainer();
        assertTrue(isContainer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testcreateChild() throws Exception {
        variablepointer = new VariablePointer(Mockito.mock(QName.class));
        NodePointer nodePointer = variablepointer.createChild(Mockito.mock(JXPathContext.class), Mockito.mock(QName.class), 1, Mockito.mock(Object.class));
        verify(variablepointer, times(1)).createChild(Mockito.any(), Mockito.any(), Mockito.anyInt(), Mockito.any());
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespacePointer_ZACx0() {
        VariablePointer variablePointer = new VariablePointer(new QName(""));
        NodePointer nodePointer = variablePointer.namespacePointer("namespace");
        assertNotNull(nodePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_dgpm1() {
        VariablePointer variablePointer = new VariablePointer(new QName("qualifiedName"));
        String actual = variablePointer.asPath();
        assertEquals("$qualifiedName", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath3_Nrfi2() {
        VariablePointer variablePointer = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("name"));
        String actual = variablePointer.asPath();
        assertEquals("$name", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath4_WXnq3() {
        VariablePointer variablePointer = new VariablePointer(new QName("name"));
        String actual = variablePointer.asPath();
        assertEquals("$name", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_yNJJ0() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        boolean actual = variablePointer.isActual();
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualWithVariables_XYED1() {
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        VariablePointer variablePointer = new VariablePointer(variables, new QName("prefix", "localName"));
        boolean actual = variablePointer.isActual();
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetIndex_nWss0_1() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        variablePointer.setIndex(1);
        assertEquals(1, variablePointer.getIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testSetIndex_nWss0_2() {
        VariablePointer variablePointer = new VariablePointer(new QName("prefix", "localName"));
        variablePointer.setIndex(1);
        assertNull(variablePointer.getValuePointer());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_1() throws Exception {
        actual = true; // Set actual to true for testing
        variablepointer = new VariablePointer(Mockito.mock(QName.class));
        context = Mockito.mock(JXPathContext.class);
        value = new Object();
        NodePointer ptr = variablepointer.createPath(context, value);
        if (actual) {
            verify(variablepointer).setValue(value);
        }
        else {
            verify(variablepointer, never()).setValue(value);
        }
        assertEquals(variablepointer, ptr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath_2() throws Exception {
        actual = true; // Set actual to true for testing
        variablepointer = new VariablePointer(Mockito.mock(QName.class));
        context = Mockito.mock(JXPathContext.class);
        value = new Object();
        NodePointer ptr = variablepointer.createPath(context, value);
        if (actual) {
            verify(variablepointer).setValue(value);
        }
        else {
            verify(variablepointer, never()).setValue(value);
        }
        assertNotNull(ptr);
    }
}