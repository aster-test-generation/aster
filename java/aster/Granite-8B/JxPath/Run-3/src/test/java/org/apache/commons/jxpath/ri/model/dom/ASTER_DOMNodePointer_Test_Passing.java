/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dom;

import java.util.Locale;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.w3c.dom.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DOMNodePointer_Test_Passing {
    Node node;
    DOMNodePointer domnodepointer;
    NodePointer nodepointer;
    NamedNodeMap namednodemap;
    private Attr attr;
    private NodeList nodelist;
    private Document document;
    private Locale locale;
    private VariablePointer parent;
    private DOMNodePointer domNodePointer;
    private VariablePointer variablePointer;
    private KeywordVariables keywordVariables;
    @Mock
    private Node mockNode;
    private Element element;
    private QName name;
    @Mock
    private Node parentNode;
    private NodeTest test;
    private boolean reverse;
    private NodePointer startWith;
    private NodeIterator nodeIterator;
    private String defaultNamespace;
    @Mock
    private Node removedNode;
    private String id;
    private KeywordVariables variables;
    private Map<String, String> namespaces;
    private NamespaceResolver localNamespaceResolver;
    @Mock
    private NamespaceResolver namespaceResolver;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestNode() {
        node = mock(Node.class);
        attr = mock(Attr.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.getParentNode()).thenReturn(node);
        boolean result = domnodepointer.testNode(null);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_WhenNodeIsCollection_ReturnsTrue() {
        node = mock(Node.class);
        locale = mock(Locale.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        domNodePointer = new DOMNodePointer(node, locale);
        when(node.isSameNode(any())).thenReturn(true);
        boolean isCollection = domNodePointer.isCollection();
        assertFalse(isCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_WhenNodeIsNotCollection_ReturnsFalse() {
        node = mock(Node.class);
        locale = mock(Locale.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        domNodePointer = new DOMNodePointer(node, locale);
        when(node.isSameNode(any())).thenReturn(false);
        boolean isCollection = domNodePointer.isCollection();
        assertFalse(isCollection);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateChildWithInvalidContext_tVGX5() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale);
        try {
            pointer.createChild(null, new QName("child"), 0);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_MuNl0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        assertFalse(domNodePointer.isCollection());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testchildIterator() {
        domNodePointer = mock(DOMNodePointer.class);
        test = mock(NodeTest.class);
        reverse = true;
        startWith = mock(NodePointer.class);
        nodeIterator = mock(NodeIterator.class);
        when(domNodePointer.childIterator(test, reverse, startWith)).thenReturn(nodeIterator);
        NodeIterator result = domNodePointer.childIterator(test, reverse, startWith);
        assertEquals(nodeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() {
        node = mock(Node.class);
        locale = mock(Locale.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        domNodePointer = new DOMNodePointer(node, locale);
        when(node.getTextContent()).thenReturn("Some text");
        assertEquals(1, domNodePointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceIterator() {
        nodeIterator = mock(NodeIterator.class);
        domnodepointer = new DOMNodePointer(null, null, null) {
            @Override
            public NodeIterator namespaceIterator() {
                return nodeIterator;
            }
        };
        // Call the method under test
        NodeIterator result = domnodepointer.namespaceIterator();
        // Assert that the result is the mock object
        assertEquals(nodeIterator, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength_oYdW0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        assertEquals(1, domNodePointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_1() {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.hasChildNodes()).thenReturn(true);
        when(node.hasChildNodes()).thenReturn(false);
        assertTrue(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        // Test when object is same as this
        // Test when object is instanceof DOMNodePointer and node is same
        DOMNodePointer domNodePointerMock = mock(DOMNodePointer.class);
        when(domNodePointerMock.getNode()).thenReturn(node);
        // Test when object is not instanceof DOMNodePointer
        assertTrue(domnodepointer.equals(domnodepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        // Test when object is same as this
        // Test when object is instanceof DOMNodePointer and node is same
        DOMNodePointer domNodePointerMock = mock(DOMNodePointer.class);
        when(domNodePointerMock.getNode()).thenReturn(node);
        // Test when object is not instanceof DOMNodePointer
        assertFalse(domnodepointer.equals(domNodePointerMock));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), "id");
        // Test when object is same as this
        // Test when object is instanceof DOMNodePointer and node is same
        DOMNodePointer domNodePointerMock = mock(DOMNodePointer.class);
        when(domNodePointerMock.getNode()).thenReturn(node);
        // Test when object is not instanceof DOMNodePointer
        assertFalse(domnodepointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test1_BxRy0() {
        QName qName = new QName("qualifiedName");
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        assertNull(domNodePointer.getDefaultNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test2_jUsl1() {
        QName qName = new QName("prefix", "localName");
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        assertNull(domNodePointer.getDefaultNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithId_oFPI0() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale, "id");
        assertEquals("id('id')", pointer.asPath());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPathWithProcessingInstruction_uqmu3() {
        DOMNodePointer pointer = new DOMNodePointer(node, locale);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        Object baseValue = domnodepointer.getBaseValue();
        assertEquals(node, baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_udoF0_1() {
        QName qName1 = new QName("qualifiedName");
        QName qName2 = new QName("prefix", "localName");
        assertNotNull(qName1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_udoF0_2() {
        QName qName1 = new QName("qualifiedName");
        QName qName2 = new QName("prefix", "localName");
        assertNotNull(qName2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer_QvoK1_1() {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer1 = new VariablePointer(qName);
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword", new Object()), qName);
        assertNotNull(variablePointer1);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer_QvoK1_2() {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer1 = new VariablePointer(qName);
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword", new Object()), qName);
        assertNotNull(variablePointer2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() {
        node = mock(Node.class);
        locale = mock(Locale.class);
        variablePointer = mock(VariablePointer.class);
        keywordVariables = mock(KeywordVariables.class);
        domNodePointer = new DOMNodePointer(node, locale);
        when(node.isSameNode(node)).thenReturn(true);
        assertTrue(domNodePointer.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_QQbW0_1() {
        Locale locale = new Locale("en", "US");
        String id = "123";
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(variables, name);
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale, id);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(parent, node);
        DOMNodePointer domNodePointer3 = new DOMNodePointer(node, locale);
        assertEquals(node, domNodePointer1.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_QQbW0_2() {
        Locale locale = new Locale("en", "US");
        String id = "123";
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(variables, name);
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale, id);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(parent, node);
        DOMNodePointer domNodePointer3 = new DOMNodePointer(node, locale);
        assertEquals(node, domNodePointer2.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_QQbW0_3() {
        Locale locale = new Locale("en", "US");
        String id = "123";
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(variables, name);
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale, id);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(parent, node);
        DOMNodePointer domNodePointer3 = new DOMNodePointer(node, locale);
        assertEquals(node, domNodePointer3.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_FZeZ0_RyCj0_1() {
        Locale locale = new Locale("en", "US");
        Node node = mock(Node.class);
        VariablePointer parent = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(parent, node);
        assertEquals(node, domNodePointer1.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetImmediateNode_FZeZ0_RyCj0_2() {
        Locale locale = new Locale("en", "US");
        Node node = mock(Node.class);
        VariablePointer parent = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(parent, node);
        assertEquals(node, domNodePointer2.getImmediateNode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLengthWithNodeAndLocaleAndId_ZhOE4_YQRT0() {
        Node node = mock(Node.class);
        Locale locale = new Locale("en", "US");
        String id = "id";
        DOMNodePointer domNodePointer = new DOMNodePointer(node, locale, id);
        assertEquals(1, domNodePointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetLocalNameNode_Ofuv0_QstJ0() {
        Node node = mock(Node.class);
        when(node.getLocalName()).thenReturn("expected_local_name");
        String actual = DOMNodePointer.getLocalName(node);
        assertEquals("expected_local_name", actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPrefix_iitf0_3() throws Exception {
        node = mock(Node.class);
        Locale locale = mock(Locale.class);
        domnodepointer = new DOMNodePointer(node, locale);
        when(node.getPrefix()).thenReturn("prefix");
        when(node.getPrefix()).thenReturn(null);
        when(node.getNodeName()).thenReturn("prefix:localName");
        when(node.getPrefix()).thenReturn(null);
        when(node.getNodeName()).thenReturn("localName");
        assertEquals(null, DOMNodePointer.getPrefix(node));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_yPwV0_mQZX0_1() {
        Locale locale = new Locale("en", "US");
        String id = "1";
        Node node = mock(Node.class);
        VariablePointer parent = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale, id);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(parent, node);
        DOMNodePointer domNodePointer3 = new DOMNodePointer(node, locale);
        assertTrue(domNodePointer1.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_yPwV0_mQZX0_2() {
        Locale locale = new Locale("en", "US");
        String id = "1";
        Node node = mock(Node.class);
        VariablePointer parent = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale, id);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(parent, node);
        DOMNodePointer domNodePointer3 = new DOMNodePointer(node, locale);
        assertTrue(domNodePointer2.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual_yPwV0_mQZX0_3() {
        Locale locale = new Locale("en", "US");
        String id = "1";
        Node node = mock(Node.class);
        VariablePointer parent = new VariablePointer(new KeywordVariables("keyword", new Object()), new QName("prefix", "localName"));
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale, id);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(parent, node);
        DOMNodePointer domNodePointer3 = new DOMNodePointer(node, locale);
        assertTrue(domNodePointer3.isActual());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf() {
        node = mock(Node.class);
        domnodepointer = new DOMNodePointer(node, Locale.getDefault(), null);
        when(node.hasChildNodes()).thenReturn(true);
        assertFalse(domnodepointer.isLeaf());
        when(node.hasChildNodes()).thenReturn(false);
        assertTrue(domnodepointer.isLeaf());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName_udoF0() {
        QName qName1 = new QName("qualifiedName");
        QName qName2 = new QName("prefix", "localName");
        assertNotNull(qName1);
        assertNotNull(qName2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer_QvoK1() {
        QName qName = new QName("qualifiedName");
        VariablePointer variablePointer1 = new VariablePointer(qName);
        VariablePointer variablePointer2 = new VariablePointer(new KeywordVariables("keyword", new Object()), qName);
        assertNotNull(variablePointer1);
        assertNotNull(variablePointer2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_QQbW0() {
        Locale locale = new Locale("en", "US");
        String id = "123";
        KeywordVariables variables = new KeywordVariables("keyword", new Object());
        QName name = new QName("prefix", "localName");
        VariablePointer parent = new VariablePointer(variables, name);
        DOMNodePointer domNodePointer1 = new DOMNodePointer(node, locale, id);
        DOMNodePointer domNodePointer2 = new DOMNodePointer(parent, node);
        DOMNodePointer domNodePointer3 = new DOMNodePointer(node, locale);
        assertEquals(node, domNodePointer1.getBaseValue());
        assertEquals(node, domNodePointer2.getBaseValue());
        assertEquals(node, domNodePointer3.getBaseValue());
    }
}