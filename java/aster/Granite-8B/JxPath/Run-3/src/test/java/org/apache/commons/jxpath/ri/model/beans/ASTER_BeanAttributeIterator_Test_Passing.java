/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.beans;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_BeanAttributeIterator_Test_Passing {
    private int position = 0;
    private BeanPointer parent;
    private QName name;
    @Mock
    private JXPathBasicBeanInfo beanInfo;
    private boolean includeXmlLang;
    @Mock
    private Object bean;
    @Mock
    private Locale locale;
    @Mock
    private KeywordVariables variables;
    @Mock
    private QName keyword;
    @Mock
    private Object object;
    @Mock
    private Class clazz;
    @Mock
    private Class dynamicPropertyHandlerClass;
    private BeanAttributeIterator beanattributeiterator;
    @Mock
    private NodePointer parentMock;
    @Mock
    private Locale localeMock;
    @Mock
    private KeywordVariables keywordVariablesMock;
    @Mock
    private JXPathBasicBeanInfo jXPathBasicBeanInfoMock;
    @Mock
    private QName qNameMock;
    @Mock
    private AbstractFactory abstractFactoryMock;
    @Mock
    private NamespaceResolver namespaceResolverMock;
    @Mock
    private NodeSet nodeSetMock;
    @Mock
    private Pointer pointerMock;
    @Mock
    private String stringMock;
    @Mock
    private VariablePointer variablePointerMock;
    @Mock
    private BeanPointer beanPointerMock;
    @Mock
    private NodePointer nodePointerMock;
    @Mock
    private LangAttributePointer langAttributePointerMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName1_lTco3() {
        QName qName = new QName("qualifiedName");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQName2_oICn4() {
        QName qName = new QName("prefix", "localName");
        assertNotNull(qName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer1_vPNz5() {
        QName qName = new QName("name");
        VariablePointer variablePointer = new VariablePointer(qName);
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testVariablePointer2_gEyx6() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        QName qName = new QName("name");
        VariablePointer variablePointer = new VariablePointer(keywordVariables, qName);
        assertNotNull(variablePointer);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testKeywordVariables1_MLdp9() {
        KeywordVariables keywordVariables = new KeywordVariables("keyword", new Object());
        assertNotNull(keywordVariables);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setup_WdlR0() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void test_Auhj1() {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfo1_Iqee10_rpTz0() {
        Class clazz = null;
        boolean atomic = true;
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz, atomic);
        assertNotNull(jXPathBasicBeanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfo2_gVEZ11_mCEj0() {
        Class clazz = null;
        try {
            clazz = Class.forName("java.lang.Class");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz);
        assertNotNull(jXPathBasicBeanInfo);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testJXPathBasicBeanInfo3_aGxq12_YmCT0() {
        Class clazz = null;
        Class dynamicPropertyHandlerClass = null;
        JXPathBasicBeanInfo jXPathBasicBeanInfo = new JXPathBasicBeanInfo(clazz, dynamicPropertyHandlerClass);
        assertNotNull(jXPathBasicBeanInfo);
    }
}