/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.dynamic;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.DynamicPropertyHandler;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.PageContextHandler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DynamicPropertyPointer_Coverage_Test_Passing {
    private String[] names;
    private String name;
    private String requiredPropertyName;
    private DynamicPropertyHandler handler;
    DynamicPropertyPointer dynamicpropertypointer;
    private Locale locale;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValueWithWholeCollectionIndex_gBQH0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        dynamicPropertyPointer.setValue(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPropertyNameNull_DpMb0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        dynamicPropertyPointer.getPropertyName();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyName1_yQcA0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        dynamicPropertyPointer.setPropertyName("test");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setPropertyIndex(int index) {
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePath1_EgGp0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        dynamicPropertyPointer.createPath(null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode1_VmwP0() {
        DynamicPropertyPointer dpp = new DynamicPropertyPointer(null, null);
        dpp.getImmediateNode();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testremove2_IbWw2() throws Exception {
        when(dynamicpropertypointer.isCollection()).thenReturn(false);
        when(dynamicpropertypointer.getBaseValue()).thenReturn(new Object());
        when(dynamicpropertypointer.getIndex()).thenReturn(0);
        dynamicpropertypointer.remove();
        verify(handler).setProperty(any(), any(), any());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    void testgetPropertyIndexWhenPropertyIndexSpecified_ooSF1() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        dynamicPropertyPointer.setPropertyIndex(1);
        assertEquals(1, dynamicPropertyPointer.getPropertyIndex());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testTestBaseValue_XOIf0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        Object baseValue = dynamicPropertyPointer.getBaseValue();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPropertyIndexWhenPropertyIndexDiffersFromIndex_UlxC0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        int index = 0;
        dynamicPropertyPointer.setPropertyIndex(index);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActualProperty_AzoD0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        boolean actual = dynamicPropertyPointer.isActualProperty();
        boolean expected = true;
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyNames1_ZGwD0() {
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(null, null);
        String[] result = dynamicPropertyPointer.getPropertyNames();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPropertyNames2_EAHg1() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        PageContextHandler handler = new PageContextHandler();
        DynamicPropertyPointer dynamicPropertyPointer = new DynamicPropertyPointer(parent, handler);
        String[] result = dynamicPropertyPointer.getPropertyNames();
    }
}