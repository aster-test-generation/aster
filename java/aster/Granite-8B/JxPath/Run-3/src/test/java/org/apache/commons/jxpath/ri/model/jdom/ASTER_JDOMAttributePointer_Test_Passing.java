/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.jdom.Attribute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMAttributePointer_Test_Passing {
    private static final Locale LOCALE = Locale.ENGLISH;
    private static final String QUALIFIED_NAME = "qualifiedName";
    private static final String PREFIX = "prefix";
    private static final String LOCAL_NAME = "localName";
    private static final String KEYWORD = "keyword";
    private static final Object OBJECT = new Object();
    private static final KeywordVariables KEYWORD_VARIABLES = new KeywordVariables(KEYWORD, OBJECT);
    private static final QName QNAME = new QName(QUALIFIED_NAME);
    private static final VariablePointer VARIABLE_POINTER_WITH_KEYWORD = new VariablePointer(KEYWORD_VARIABLES, QNAME);
    private static final NodePointer PARENT = mock(NodePointer.class);
    private static final NodePointer PARENT_WITH_LOCALE = mock(NodePointer.class);
    private static final NodePointer CHILD = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_INDEX = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_VALUE = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_INDEX = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_INDEX_AND_VALUE = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE_AND_INDEX = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE_AND_INDEX_AND_NAME = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE_AND_INDEX_AND_NAME_AND_NODE = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE_AND_INDEX_AND_NAME_AND_NODE_AND_POINTER = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE_AND_INDEX_AND_NAME_AND_NODE_AND_POINTER_AND_POINTER = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE_AND_INDEX_AND_NAME_AND_NODE_AND_POINTER_AND_POINTER_AND_POINTER = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE_AND_INDEX_AND_NAME_AND_NODE_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE_AND_INDEX_AND_NAME_AND_NODE_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE_AND_INDEX_AND_NAME_AND_NODE_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE_AND_INDEX_AND_NAME_AND_NODE_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER = mock(NodePointer.class);
    private static final NodePointer CHILD_WITH_LOCALE_AND_VALUE_AND_INDEX_AND_NAME_AND_NODE_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER_AND_POINTER = mock(NodePointer.class);
    private Attribute attr;
    private JDOMAttributePointer jdomattributepointer;
    @Mock
    private Attribute mockAttr;
    @Mock
    private DOMNodePointer parent;
    @Mock
    private Attribute attrMock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_1() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when object is the same instance
        // Test when object is not null and is an instance of JDOMAttributePointer
        JDOMAttributePointer otherJDOMAttributePointer = new JDOMAttributePointer(null, attr);
        // Test when object is not null and is not an instance of JDOMAttributePointer
        // Test when object is null
        assertTrue(jdomattributepointer.equals(jdomattributepointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_2() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when object is the same instance
        // Test when object is not null and is an instance of JDOMAttributePointer
        JDOMAttributePointer otherJDOMAttributePointer = new JDOMAttributePointer(null, attr);
        // Test when object is not null and is not an instance of JDOMAttributePointer
        // Test when object is null
        assertTrue(jdomattributepointer.equals(otherJDOMAttributePointer));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_3() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when object is the same instance
        // Test when object is not null and is an instance of JDOMAttributePointer
        JDOMAttributePointer otherJDOMAttributePointer = new JDOMAttributePointer(null, attr);
        // Test when object is not null and is not an instance of JDOMAttributePointer
        // Test when object is null
        assertFalse(jdomattributepointer.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals_4() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when object is the same instance
        // Test when object is not null and is an instance of JDOMAttributePointer
        JDOMAttributePointer otherJDOMAttributePointer = new JDOMAttributePointer(null, attr);
        // Test when object is not null and is not an instance of JDOMAttributePointer
        // Test when object is null
        assertFalse(jdomattributepointer.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testsetValue() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        jdomattributepointer.setValue("new value");
        verify(attr, times(1)).setValue("new value");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue() {
        attr = mock(Attribute.class);
        when(mockAttr.getValue()).thenReturn("testValue");
        JDOMAttributePointer jdomattributepointer = new JDOMAttributePointer(null, mockAttr);
        assertEquals("testValue", jdomattributepointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetValue_alsZ0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        Attribute attr = new Attribute("name", "value");
        JDOMAttributePointer jDOMAttributePointer = new JDOMAttributePointer(parent, attr);
        jDOMAttributePointer.setValue("new value");
        assertEquals("new value", attr.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValue_PoFm0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        Attribute attr = new Attribute("name", "value");
        JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(parent, attr);
        assertEquals("value", jdomAttributePointer.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsCollection_zYdP0() {
        JDOMAttributePointer jDOMAttributePointer = new JDOMAttributePointer(new DOMNodePointer(null, null, null), null);
        boolean result = jDOMAttributePointer.isCollection();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetImmediateNode() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        Object immediateNode = jdomattributepointer.getImmediateNode();
        assertEquals(attr, immediateNode);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRemove() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        jdomattributepointer.remove();
        verify(attr).getParent().removeAttribute(attr);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        when(attr.hashCode()).thenReturn(123);
        assertEquals(123, jdomattributepointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCode_oUZx0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        Attribute attr = new Attribute("name", "value");
        JDOMAttributePointer jdomAttributePointer = new JDOMAttributePointer(parent, attr);
        assertEquals(System.identityHashCode(attr), jdomAttributePointer.hashCode());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetNamespaceURI() throws Exception {
        attr = mock(Attribute.class);
        when(attr.getNamespaceURI()).thenReturn("http://www.example.com");
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        String uri = jdomattributepointer.getNamespaceURI();
        assertEquals("http://www.example.com", uri);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath() {
        parent = mock(DOMNodePointer.class);
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        when(parent.asPath()).thenReturn("/parent/path");
        when(attr.getName()).thenReturn("attributeName");
        String path = jdomattributepointer.asPath();
        assertEquals("/parent/path/@attributeName", path);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURI_zEUN0() {
        JDOMAttributePointer pointer = new JDOMAttributePointer(null, null);
        assertEquals(null, pointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURI2_hIrK1() {
        JDOMAttributePointer pointer = new JDOMAttributePointer(null, new Attribute("name", "value"));
        assertEquals(null, pointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNamespaceURI3_laWq2() {
        JDOMAttributePointer pointer = new JDOMAttributePointer(null, new Attribute("ns:name", "value"));
        assertEquals("ns", pointer.getNamespaceURI());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLength() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Mock the behavior of the getLength method
        when(attr.getValue()).thenReturn("attributeValue");
        // Call the method under test
        int length = jdomattributepointer.getLength();
        // Assert that the method returns the expected value
        assertEquals(1, length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath1_hFDT0() {
        DOMNodePointer domNodePointer = new DOMNodePointer(null, null, null);
        String actual = domNodePointer.asPath();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAsPath2_SfKO1() {
        VariablePointer variablePointer = new VariablePointer(null, null);
        DOMNodePointer domNodePointer = new DOMNodePointer(variablePointer, null);
        String actual = domNodePointer.asPath();
        String expected = "";
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLength_aSyJ0() {
        JDOMAttributePointer pointer = new JDOMAttributePointer(new DOMNodePointer(null, null, null), new Attribute("test", "value"));
        assertEquals(1, pointer.getLength());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetBaseValue() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Mock the getBaseValue method of the parent object
        when(parent.getBaseValue()).thenReturn("expectedValue");
        // Call the getBaseValue method of the JDOMAttributePointer object
        Object baseValue = jdomattributepointer.getBaseValue();
        // Assert that the returned value is equal to the expected value
        assertEquals("expectedValue", baseValue);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsActual() throws Exception {
        jdomattributepointer = new JDOMAttributePointer(parent, attr);
        // Mock the behavior of the isActual method
        when(attr.getValue()).thenReturn("actual value");
        // Call the method under test
        boolean actual = jdomattributepointer.isActual();
        // Assert that the method returns true
        assertTrue(actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetBaseValue_tFVN0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        Attribute attr = new Attribute("name", "value");
        JDOMAttributePointer pointer = new JDOMAttributePointer(parent, attr);
        assertEquals("value", pointer.getBaseValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsLeaf_GjXC0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        Attribute attr = new Attribute("name", "value");
        JDOMAttributePointer pointer = new JDOMAttributePointer(parent, attr);
        boolean isLeaf = pointer.isLeaf();
        assertTrue(isLeaf);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEquals() throws Exception {
        attr = mock(Attribute.class);
        jdomattributepointer = new JDOMAttributePointer(null, attr);
        // Test when object is the same instance
        assertTrue(jdomattributepointer.equals(jdomattributepointer));
        // Test when object is not null and is an instance of JDOMAttributePointer
        JDOMAttributePointer otherJDOMAttributePointer = new JDOMAttributePointer(null, attr);
        assertTrue(jdomattributepointer.equals(otherJDOMAttributePointer));
        // Test when object is not null and is not an instance of JDOMAttributePointer
        assertFalse(jdomattributepointer.equals(new Object()));
        // Test when object is null
        assertFalse(jdomattributepointer.equals(null));
    }
}