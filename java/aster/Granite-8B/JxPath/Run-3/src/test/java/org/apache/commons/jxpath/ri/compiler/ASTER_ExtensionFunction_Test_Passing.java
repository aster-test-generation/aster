/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExtensionFunction_Test_Passing {
    private QName functionName;
    private EvalContext context;
    private ExtensionFunction extensionfunction;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetFunctionName_nKMw0() {
        QName functionName = new QName("prefix", "localName");
        ExtensionFunction extensionFunction = new ExtensionFunction(functionName, new Expression[0]);
        QName result = extensionFunction.getFunctionName();
        assertEquals(functionName, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testComputeContextDependent_ctwR0() {
        QName functionName = new QName("prefix", "localName");
        Expression[] args = new Expression[0];
        ExtensionFunction extensionFunction = new ExtensionFunction(functionName, args);
        boolean result = extensionFunction.computeContextDependent();
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCompute_mQsu0_duCc0() {
        ExtensionFunction extensionFunction = new ExtensionFunction(new QName("functionName"), new Expression[0]);
        EvalContext context = mock(EvalContext.class);
        when(context.getRootContext()).thenReturn(mock(RootContext.class));
        when(context.getCurrentNodePointer()).thenReturn(mock(NodePointer.class));
        assertEquals(extensionFunction.compute(context), extensionFunction.computeValue(context));
    }
}