/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.model.jdom;

import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.apache.commons.jxpath.servlet.KeywordVariables;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JDOMNodeIterator_Test_Passing {
    private int position = 0;
    private JDOMNodeIterator jdomnodeiterator;
    private DOMNodePointer parent;
    private NodeTypeTest nodeTest;
    private boolean reverse;
    private DOMNodePointer startWith;
    private Object child;
    @Mock
    private DOMNodePointer parentMock;
    @Mock
    private NodeTypeTest nodeTypeTestMock;
    @Mock
    private JDOMNodePointer jDOMNodePointerMock;
    @Mock
    private Locale localeMock;
    @Mock
    private KeywordVariables keywordVariablesMock;
    @Mock
    private QName qNameMock;
    @Mock
    private NodePointer nodePointerMock;
    @Mock
    private NamespaceResolver namespaceResolverMock;
    @Mock
    private AbstractFactory abstractFactoryMock;
    @Mock
    private JXPathContext jXPathContextMock;
    @Mock
    private Pointer pointerMock;
    @Mock
    private NodeSet nodeSetMock;
    @Mock
    private String keyMock;
    @Mock
    private String valueMock;
    @Mock
    private String prefixMock;
    @Mock
    private String localNameMock;
    @Mock
    private String keywordMock;
    @Mock
    private Object objectMock;
    @Mock
    private String idMock;
    @Mock
    private NodePointer nodePointer1Mock;
    @Mock
    private NodePointer nodePointer2Mock;
    @Mock
    private NodePointer nodePointer3Mock;
    @Mock
    private NodePointer nodePointer4Mock;
    @Mock
    private NodePointer nodePointer5Mock;
    @Mock
    private NodePointer nodePointer6Mock;
    @Mock
    private NodePointer nodePointer7Mock;
    @Mock
    private NodePointer nodePointer8Mock;
    @Mock
    private NodePointer nodePointer9Mock;
    @Mock
    private NodePointer nodePointer10Mock;
    @Mock
    private NodePointer nodePointer11Mock;
    @Mock
    private NodePointer nodePointer12Mock;
    @Mock
    private NodePointer nodePointer13Mock;
    @Mock
    private NodePointer nodePointer14Mock;
    @Mock
    private NodePointer nodePointer15Mock;
    @Mock
    private NodePointer nodePointer16Mock;
    @Mock
    private NodePointer nodePointer17Mock;
    @Mock
    private NodePointer nodePointer18Mock;
    @Mock
    private NodePointer nodePointer19Mock;
    @Mock
    private NodePointer nodePointer20Mock;
    @Mock
    private NodePointer nodePointer21Mock;
    @Mock
    private NodePointer nodePointer22Mock;
    @Mock
    private NodePointer nodePointer23Mock;
    @Mock
    private NodePointer nodePointer24Mock;
    @Mock
    private NodePointer nodePointer25Mock;
    @Mock
    private NodePointer nodePointer26Mock;
    @Mock
    private NodePointer nodePointer27Mock;
    @Mock
    private NodePointer nodePointer28Mock;
    @Mock
    private NodePointer nodePointer29Mock;
    @Mock
    private NodePointer nodePointer30Mock;
    @Mock
    private NodePointer nodePointer31Mock;
    @Mock
    private NodePointer nodePointer32Mock;
    @Mock
    private NodePointer nodePointer33Mock;
    @Mock
    private NodePointer nodePointer34Mock;
    @Mock
    private NodePointer nodePointer35Mock;
    @Mock
    private NodePointer nodePointer36Mock;
    @Mock
    private NodePointer nodePointer37Mock;
    @Mock
    private NodePointer nodePointer38Mock;
    @Mock
    private NodePointer nodePointer39Mock;
    @Mock
    private NodePointer nodePointer40Mock;
    @Mock
    private NodePointer nodePointer41Mock;
    @Mock
    private NodePointer nodePointer42Mock;
    @Mock
    private NodePointer nodePointer43Mock;
    @Mock
    private NodePointer nodePointer44Mock;
    @Mock
    private NodePointer nodePointer45Mock;
    @Mock
    private NodePointer nodePointer46Mock;
    @Mock
    private NodePointer nodePointer47Mock;
    @Mock
    private NodePointer nodePointer48Mock;
    @Mock
    private NodePointer nodePointer49Mock;
    @Mock
    private NodePointer nodePointer50Mock;
    @Mock
    private NodePointer nodePointer51Mock;
    @Mock
    private NodePointer nodePointer52Mock;
    @Mock
    private NodePointer nodePointer53Mock;
    @Mock
    private NodePointer nodePointer54Mock;
    @Mock
    private NodePointer nodePointer55Mock;
    @Mock
    private NodePointer nodePointer56Mock;
    @Mock
    private NodePointer nodePointer57Mock;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testgetPosition() throws Exception {
        parent = mock(DOMNodePointer.class);
        nodeTest = mock(NodeTypeTest.class);
        reverse = true;
        startWith = mock(DOMNodePointer.class);
        jdomnodeiterator = new JDOMNodeIterator(parent, nodeTest, reverse, startWith);
        // arrange
        when(jdomnodeiterator.getPosition()).thenReturn(position);
        // act
        int actualPosition = jdomnodeiterator.getPosition();
        // assert
        assertEquals(position, actualPosition);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetPosition_FZQO0() {
        DOMNodePointer parent = new DOMNodePointer(null, null, null);
        NodeTypeTest nodeTest = new NodeTypeTest(0);
        boolean reverse = false;
        DOMNodePointer startWith = new DOMNodePointer(null, null, null);
        JDOMNodeIterator iterator = new JDOMNodeIterator(parent, nodeTest, reverse, startWith);
        assertEquals(0, iterator.getPosition());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition1_QiSO0() {
        JDOMNodeIterator jDOMNodeIterator = new JDOMNodeIterator(null, null, false, null);
        boolean result = jDOMNodeIterator.setPosition(0);
        assertTrue(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition2_KUuL1() {
        JDOMNodeIterator jDOMNodeIterator = new JDOMNodeIterator(null, null, false, null);
        boolean result = jDOMNodeIterator.setPosition(1);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition3_cZxc2() {
        JDOMNodeIterator jDOMNodeIterator = new JDOMNodeIterator(null, null, false, null);
        boolean result = jDOMNodeIterator.setPosition(2);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition4_FKdh3() {
        JDOMNodeIterator jDOMNodeIterator = new JDOMNodeIterator(null, null, false, null);
        boolean result = jDOMNodeIterator.setPosition(3);
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetPosition5_btgY4() {
        JDOMNodeIterator jDOMNodeIterator = new JDOMNodeIterator(null, null, false, null);
        boolean result = jDOMNodeIterator.setPosition(4);
        assertFalse(result);
    }
}