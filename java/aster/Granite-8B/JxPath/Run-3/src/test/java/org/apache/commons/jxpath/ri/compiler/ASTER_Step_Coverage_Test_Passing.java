/**
 * Generated by Aster
 */
package org.apache.commons.jxpath.ri.compiler;

import java.util.concurrent.TimeUnit;
import org.apache.commons.jxpath.ri.Compiler;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Step_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentWithNullPredicates_XeUS0() {
        Step step = new Step(0, null, null);
        boolean result = step.isContextDependent();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsContextDependentWithEmptyPredicates_FifZ1() {
        Expression[] predicates = new Expression[0];
        Step step = new Step(0, null, predicates);
        boolean result = step.isContextDependent();
        assertFalse(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringAxisIsAxisSelfAndNodeTypeIsNodeTypeTest_DzRc2() {
        Step step = new Step(Compiler.AXIS_SELF, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals(".", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringAxisIsAxisParentAndNodeTypeIsNodeTypeTest_TyOG3() {
        Step step = new Step(Compiler.AXIS_PARENT, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("..", step.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringAxisIsAxisChildAndNodeTypeIsNodeTypeTest_SAKw0_fid1() {
        Step step = new Step(Compiler.AXIS_CHILD, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringAxisIsAxisAttributeAndNodeTypeIsNodeTypeTest_sYSE1_fid1() {
        Step step = new Step(Compiler.AXIS_ATTRIBUTE, new NodeTypeTest(Compiler.NODE_TYPE_NODE), null);
        assertEquals("@node()", step.toString());
    }
}