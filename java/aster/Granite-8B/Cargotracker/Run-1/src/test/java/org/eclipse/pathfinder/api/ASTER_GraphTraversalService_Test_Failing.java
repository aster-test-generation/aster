/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_DEUE0() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> actual = graphTraversalService.findShortestPath("ABC123", "XYZ456", "2022-01-01T00:00:00");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithNullOrigin_OiBy1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    try {
      graphTraversalService.findShortestPath(null, "XYZ456", "2022-01-01T00:00:00");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidOrigin_NQnG2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    try {
      graphTraversalService.findShortestPath("ABC", "XYZ456", "2022-01-01T00:00:00");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithNullDestination_dbBC3() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    try {
      graphTraversalService.findShortestPath("ABC123", null, "2022-01-01T00:00:00");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidDestination_WNBv4() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    try {
      graphTraversalService.findShortestPath("ABC123", "XYZ", "2022-01-01T00:00:00");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidDeadline_myQN5() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    try {
      graphTraversalService.findShortestPath("ABC123", "XYZ456", "2022-01-01");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithRandomOriginAndDestination_etvh0_1() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "USLAX";
    String deadline = "2022-12-31";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(paths);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithRandomOriginAndDestination_etvh0_2() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "USLAX";
    String deadline = "2022-12-31";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertTrue(!paths.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithNullOrigin_XCbO1_1() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = null;
    String destinationUnLocode = "USLAX";
    String deadline = "2022-12-31";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(paths);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithNullOrigin_XCbO1_2() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = null;
    String destinationUnLocode = "USLAX";
    String deadline = "2022-12-31";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertTrue(paths.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithNullDestination_WQfM2_1() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = null;
    String deadline = "2022-12-31";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(paths);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithNullDestination_WQfM2_2() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = null;
    String deadline = "2022-12-31";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertTrue(paths.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidOrigin_HHEe3_1() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "US123";
    String destinationUnLocode = "USLAX";
    String deadline = "2022-12-31";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(paths);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidOrigin_HHEe3_2() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "US123";
    String destinationUnLocode = "USLAX";
    String deadline = "2022-12-31";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertTrue(paths.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidDestination_JNjz4_1() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "US123";
    String deadline = "2022-12-31";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(paths);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidDestination_JNjz4_2() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "US123";
    String deadline = "2022-12-31";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertTrue(paths.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidDeadline_mPQW5_1() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "USLAX";
    String deadline = "2022-12-32";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertNotNull(paths);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPathWithInvalidDeadline_mPQW5_2() {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "USLAX";
    String deadline = "2022-12-32";
    List<TransitPath> paths = service.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    assertTrue(paths.isEmpty());
  }
}