/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler;

import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.Leg;
import org.eclipse.cargotracker.domain.model.location.LocationRepository;
import org.eclipse.cargotracker.domain.model.voyage.VoyageRepository;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ItineraryCandidateDtoAssembler_Test_Failing {
  @Inject
  private LocationDtoAssembler locationDtoAssembler;
  private ItineraryCandidateDtoAssembler itinerarycandidatedtoassembler;
  private ItineraryCandidateDtoAssembler assembler;
  private Itinerary itinerary;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDto_hFGy1_1() {
    RouteCandidate routeCandidate = assembler.toDto(itinerary);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg> legDTOs = routeCandidate.getLegs();
    assertNotNull(routeCandidate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDto_hFGy1_2() {
    RouteCandidate routeCandidate = assembler.toDto(itinerary);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg> legDTOs = routeCandidate.getLegs();
    assertNotNull(legDTOs);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDto_hFGy1_3() {
    RouteCandidate routeCandidate = assembler.toDto(itinerary);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg> legDTOs = routeCandidate.getLegs();
    assertEquals(1, legDTOs.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithNullItinerary_nKVN2_1() {
    RouteCandidate routeCandidate = assembler.toDto(null);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg> legDTOs = routeCandidate.getLegs();
    assertNotNull(routeCandidate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithNullItinerary_nKVN2_2() {
    RouteCandidate routeCandidate = assembler.toDto(null);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg> legDTOs = routeCandidate.getLegs();
    assertNotNull(legDTOs);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithNullItinerary_nKVN2_3() {
    RouteCandidate routeCandidate = assembler.toDto(null);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg> legDTOs = routeCandidate.getLegs();
    assertTrue(legDTOs.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithEmptyItinerary_pynN3_1() {
    itinerary = new Itinerary(new ArrayList<>());
    RouteCandidate routeCandidate = assembler.toDto(itinerary);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg> legDTOs = routeCandidate.getLegs();
    assertNotNull(routeCandidate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithEmptyItinerary_pynN3_2() {
    itinerary = new Itinerary(new ArrayList<>());
    RouteCandidate routeCandidate = assembler.toDto(itinerary);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg> legDTOs = routeCandidate.getLegs();
    assertNotNull(legDTOs);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToDtoWithEmptyItinerary_pynN3_3() {
    itinerary = new Itinerary(new ArrayList<>());
    RouteCandidate routeCandidate = assembler.toDto(itinerary);
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg> legDTOs = routeCandidate.getLegs();
    assertTrue(legDTOs.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFromDTO_Zlsv0_aoDx0() {
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    VoyageRepository voyageRepository = mock(VoyageRepository.class);
    LocationRepository locationRepository = mock(LocationRepository.class);
    ItineraryCandidateDtoAssembler assembler = new ItineraryCandidateDtoAssembler();
    Itinerary itinerary = assembler.fromDTO(routeCandidateDTO, voyageRepository, locationRepository);
    assertNotNull(itinerary);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFromDTOWithNullRouteCandidateDTO_JZNl1_pOMq0() {
    RouteCandidate routeCandidateDTO = null;
    VoyageRepository voyageRepository = mock(VoyageRepository.class);
    LocationRepository locationRepository = mock(LocationRepository.class);
    ItineraryCandidateDtoAssembler assembler = new ItineraryCandidateDtoAssembler();
    Itinerary itinerary = assembler.fromDTO(routeCandidateDTO, voyageRepository, locationRepository);
    assertNull(itinerary);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFromDTOWithEmptyLegs_xqao2_JbqJ0_2() {
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    VoyageRepository voyageRepository = mock(VoyageRepository.class);
    LocationRepository locationRepository = mock(LocationRepository.class);
    ItineraryCandidateDtoAssembler assembler = new ItineraryCandidateDtoAssembler();
    Itinerary itinerary = assembler.fromDTO(routeCandidateDTO, voyageRepository, locationRepository);
    assertTrue(itinerary.getLegs().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFromDTOWithNullLocationRepository_rXJt4_ncta0() {
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    VoyageRepository voyageRepository = mock(VoyageRepository.class);
    LocationRepository locationRepository = null;
    ItineraryCandidateDtoAssembler assembler = new ItineraryCandidateDtoAssembler();
    Itinerary itinerary = assembler.fromDTO(routeCandidateDTO, voyageRepository, locationRepository);
    assertNull(itinerary);
  }
}