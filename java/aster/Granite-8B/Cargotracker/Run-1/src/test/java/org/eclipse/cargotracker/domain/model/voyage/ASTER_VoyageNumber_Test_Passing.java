/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VoyageNumber_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_IQYW0() {
    VoyageNumber voyageNumber = new VoyageNumber("123456789");
    String idString = voyageNumber.getIdString();
    assertEquals("123456789", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithInvalidConstructor_gHKJ3() {
    VoyageNumber voyageNumber = new VoyageNumber("invalid");
    String idString = voyageNumber.getIdString();
    assertEquals("invalid", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_nFVx0() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    boolean result = voyageNumber.equals(voyageNumber);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_FAcV1() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    boolean result = voyageNumber.equals(null);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_hRZE2() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    boolean result = voyageNumber.equals("123456");
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObject_BcwM3() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123456");
    VoyageNumber voyageNumber2 = new VoyageNumber("654321");
    boolean result = voyageNumber1.equals(voyageNumber2);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithNull_NvoA0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    boolean result = voyageNumber.sameValueAs(null);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithSameNumber_pGFV1() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    VoyageNumber voyageNumber2 = new VoyageNumber("123");
    boolean result = voyageNumber1.sameValueAs(voyageNumber2);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithDifferentNumber_cMxL2() {
    VoyageNumber voyageNumber1 = new VoyageNumber("123");
    VoyageNumber voyageNumber2 = new VoyageNumber("456");
    boolean result = voyageNumber1.sameValueAs(voyageNumber2);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_ivoO0() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    assertEquals("123456", voyageNumber.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithEmptyConstructor_GTXx1_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber();
    String idString = voyageNumber.getIdString();
    assertNull(idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_gsoc1_fid1() {
    VoyageNumber voyageNumber = new VoyageNumber();
    assertNull(voyageNumber.toString());
  }
}