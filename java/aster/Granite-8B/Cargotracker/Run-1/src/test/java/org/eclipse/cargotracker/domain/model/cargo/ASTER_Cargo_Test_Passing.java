/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Cargo_Test_Passing {
  Cargo cargo;
  Cargo other;
  private Itinerary itinerary;
  @Mock
  private RouteSpecification routeSpecification;
  @Mock
  private Delivery delivery;
  private TrackingId trackingId;
  @Mock
  private Voyage voyage;
  @Mock
  private RoutingStatus routingStatus;
  @Mock
  private UnLocode unLocode;
  @Mock
  private HandlingHistory handlingHistory;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_mXXQ0() {
    Cargo cargo = new Cargo();
    boolean result = cargo.equals(cargo);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_wWOd1() {
    Cargo cargo = new Cargo();
    boolean result = cargo.equals(null);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_sZdR2() {
    Cargo cargo = new Cargo();
    boolean result = cargo.equals("cargo");
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginWithNull_GKCu1() {
    Cargo cargo = new Cargo();
    cargo.setOrigin(null);
    assertEquals(null, cargo.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullItinerary_kxvr0_1() {
    Cargo cargo = new Cargo();
    Itinerary itinerary = cargo.getItinerary();
    assertNotNull(itinerary);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullItinerary_kxvr0_2() {
    Cargo cargo = new Cargo();
    Itinerary itinerary = cargo.getItinerary();
    assertTrue(itinerary.getLegs().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullItinerary_kxvr0() {
    Cargo cargo = new Cargo();
    Itinerary itinerary = cargo.getItinerary();
    assertNotNull(itinerary);
    assertTrue(itinerary.getLegs().isEmpty());
  }
}