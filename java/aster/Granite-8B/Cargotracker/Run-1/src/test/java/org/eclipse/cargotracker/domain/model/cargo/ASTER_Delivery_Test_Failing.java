/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Delivery_Test_Failing {
  @Mock
  private HandlingEvent mockHandlingEvent;
  @Mock
  private TransportStatus mockTransportStatus;
  @Mock
  private RoutingStatus mockRoutingStatus;
  private Voyage mockVoyage;
  @Mock
  private Cargo cargo;
  private HandlingEvent lastEvent;
  private RouteSpecification routeSpecification;
  private Itinerary itinerary;
  private HandlingHistory handlingHistory;
  private Delivery delivery;
  @NotNull
  private boolean misdirected;
  @Mock
  HandlingEvent handlingEvent;
  @Mock
  private HandlingActivity nextExpectedActivity;
  private Voyage currentVoyage;
  private LocalDateTime eta;
  private LocalDateTime calculatedAt;
  private boolean isUnloadedAtDestination;
  private TransportStatus transportStatus;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_URty0() {
    Delivery delivery = new Delivery();
    int hashCode = delivery.hashCode();
    assertEquals(0, hashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetCurrentVoyage() throws Exception {
    currentVoyage = mock(Voyage.class);
    delivery = new Delivery(null, null, null);
    when(delivery.getCurrentVoyage()).thenReturn(currentVoyage);
    assertEquals(currentVoyage, delivery.getCurrentVoyage());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnloadedAtDestination() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    delivery.setUnloadedAtDestination(true);
    assertTrue(delivery.isUnloadedAtDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_whenObjectsAreSame_returnsTrue() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Given
    Delivery other = delivery;
    // When
    boolean result = delivery.equals(other);
    // Then
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_whenObjectsAreDifferent_returnsFalse() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Given
    Delivery other = mock(Delivery.class);
    // When
    boolean result = delivery.equals(other);
    // Then
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_whenObjectsHaveDifferentHandlingEvents_returnsFalse() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Given
    HandlingEvent otherHandlingEvent = mock(HandlingEvent.class);
    Delivery other = new Delivery(otherHandlingEvent, itinerary, routeSpecification);
    // When
    boolean result = delivery.equals(other);
    // Then
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_whenObjectsHaveDifferentItineraries_returnsFalse() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Given
    Itinerary otherItinerary = mock(Itinerary.class);
    Delivery other = new Delivery(handlingEvent, otherItinerary, routeSpecification);
    // When
    boolean result = delivery.equals(other);
    // Then
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_whenObjectsHaveDifferentRouteSpecifications_returnsFalse() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Given
    RouteSpecification otherRouteSpecification = mock(RouteSpecification.class);
    Delivery other = new Delivery(handlingEvent, itinerary, otherRouteSpecification);
    // When
    boolean result = delivery.equals(other);
    // Then
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testupdateOnRouting() throws Exception {
    lastEvent = mock(HandlingEvent.class);
    routeSpecification = mock(RouteSpecification.class);
    itinerary = mock(Itinerary.class);
    delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    // Set up expectations
    when(routeSpecification.isSatisfiedBy(itinerary)).thenReturn(true);
    // Call the method under test
    Delivery updatedDelivery = delivery.updateOnRouting(routeSpecification, itinerary);
    // Verify the expected behavior
    assertEquals(updatedDelivery.getRoutingStatus(), RoutingStatus.NOT_ROUTED);
    verify(routeSpecification, times(1)).isSatisfiedBy(itinerary);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateOnRouting_CRHd0() {
    Delivery delivery = new Delivery();
    RouteSpecification routeSpecification = new RouteSpecification();
    Itinerary itinerary = new Itinerary();
    Delivery updatedDelivery = delivery.updateOnRouting(routeSpecification, itinerary);
    assertNotNull(updatedDelivery);
    assertEquals(updatedDelivery.getRoutingStatus(), RoutingStatus.NOT_ROUTED);
    assertEquals(updatedDelivery.getTransportStatus(), TransportStatus.NOT_RECEIVED);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRoutingStatus() throws Exception {
    lastEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    // Set up the expected behavior of the setRoutingStatus method
    RoutingStatus expectedRoutingStatus = mock(RoutingStatus.class);
    // Call the setRoutingStatus method with the expected parameter
    delivery.setRoutingStatus(expectedRoutingStatus);
    // Verify that the setRoutingStatus method was called with the expected parameter
    verify(delivery).setRoutingStatus(expectedRoutingStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetCalculatedAt() throws Exception {
    calculatedAt = LocalDateTime.now();
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    when(handlingEvent.getCompletionTime()).thenReturn(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateOnRouting_CRHd0_1() {
    Delivery delivery = new Delivery();
    RouteSpecification routeSpecification = new RouteSpecification();
    Itinerary itinerary = new Itinerary();
    Delivery updatedDelivery = delivery.updateOnRouting(routeSpecification, itinerary);
    assertNotNull(updatedDelivery);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateOnRouting_CRHd0_2() {
    Delivery delivery = new Delivery();
    RouteSpecification routeSpecification = new RouteSpecification();
    Itinerary itinerary = new Itinerary();
    Delivery updatedDelivery = delivery.updateOnRouting(routeSpecification, itinerary);
    assertEquals(updatedDelivery.getRoutingStatus(), RoutingStatus.NOT_ROUTED);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateOnRouting_CRHd0_3() {
    Delivery delivery = new Delivery();
    RouteSpecification routeSpecification = new RouteSpecification();
    Itinerary itinerary = new Itinerary();
    Delivery updatedDelivery = delivery.updateOnRouting(routeSpecification, itinerary);
    assertEquals(updatedDelivery.getTransportStatus(), TransportStatus.NOT_RECEIVED);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocation_KBoT0_iDMk0() {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode("US"), "New York");
    delivery.setLastKnownLocation(lastKnownLocation);
    assertEquals(lastKnownLocation, delivery.getLastKnownLocation());
  }
}