/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingServiceFacade_Coverage_Test_Failing {
  private DefaultBookingServiceFacade defaultBookingServiceFacade;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination1_EUyB0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    bookingServiceFacade.changeDestination("123", "456");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListShippingLocations1_qnRE0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> actual = bookingServiceFacade.listShippingLocations();
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> expected = new ArrayList<>();
    Assertions.assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline_qMBK0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    bookingServiceFacade.changeDeadline("1234", LocalDate.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadlineWithInvalidTrackingId_UwWV1() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    bookingServiceFacade.changeDeadline("invalid", LocalDate.now());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_KXvJ0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = bookingServiceFacade.loadCargoForRouting("1234567890");
    assertNotNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting2_pocg1() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = bookingServiceFacade.loadCargoForRouting("1234567890");
    assertEquals("Destination", cargoRoute.getFinalDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_YgDm0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    bookingServiceFacade.assignCargoToRoute("1", routeCandidateDTO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute2_AfKj1() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    bookingServiceFacade.assignCargoToRoute("2", routeCandidateDTO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute3_BDBb2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    bookingServiceFacade.assignCargoToRoute("3", routeCandidateDTO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute4_ZMjZ3() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    bookingServiceFacade.assignCargoToRoute("4", routeCandidateDTO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo1_jpqz0_1() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USCHI";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2014, 12, 31);
    String result = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertEquals("USCHI", origin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo1_jpqz0_2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USCHI";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2014, 12, 31);
    String result = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertEquals("CNSHA", destination);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo1_jpqz0_3() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USCHI";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2014, 12, 31);
    String result = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertEquals(LocalDate.of(2014, 12, 31), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo1_jpqz0_4() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USCHI";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2014, 12, 31);
    String result = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertEquals("USCHI", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo2_qrhh1_1() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USCHI";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2014, 12, 31);
    String result = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotEquals("USCHI", origin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo2_qrhh1_2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USCHI";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2014, 12, 31);
    String result = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotEquals("CNSHA", destination);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo2_qrhh1_3() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USCHI";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2014, 12, 31);
    String result = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotEquals(LocalDate.of(2014, 12, 31), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo2_qrhh1_4() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USCHI";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2014, 12, 31);
    String result = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotEquals("USCHI", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_vhZa0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = bookingServiceFacade.requestPossibleRoutesForCargo("1234567890");
    Assertions.assertNotNull(routeCandidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo2_zeQM1() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = bookingServiceFacade.requestPossibleRoutesForCargo("1234567890");
    Assertions.assertEquals(0, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo3_xdfY2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = bookingServiceFacade.requestPossibleRoutesForCargo("1234567890");
    Assertions.assertEquals(1, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo4_QQJP3() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = bookingServiceFacade.requestPossibleRoutesForCargo("1234567890");
    Assertions.assertEquals(2, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo5_NUeW4() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = bookingServiceFacade.requestPossibleRoutesForCargo("1234567890");
    Assertions.assertEquals(3, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo6_juuP5() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = bookingServiceFacade.requestPossibleRoutesForCargo("1234567890");
    Assertions.assertEquals(4, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo7_TPUr6() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> routeCandidates = bookingServiceFacade.requestPossibleRoutesForCargo("1234567890");
    Assertions.assertEquals(5, routeCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo1_jpqz0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USCHI";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2014, 12, 31);
    String result = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertEquals("USCHI", origin);
    assertEquals("CNSHA", destination);
    assertEquals(LocalDate.of(2014, 12, 31), arrivalDeadline);
    assertEquals("USCHI", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo2_qrhh1() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String origin = "USCHI";
    String destination = "CNSHA";
    LocalDate arrivalDeadline = LocalDate.of(2014, 12, 31);
    String result = bookingServiceFacade.bookNewCargo(origin, destination, arrivalDeadline);
    assertNotEquals("USCHI", origin);
    assertNotEquals("CNSHA", destination);
    assertNotEquals(LocalDate.of(2014, 12, 31), arrivalDeadline);
    assertNotEquals("USCHI", result);
  }
}