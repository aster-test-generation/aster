/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import jakarta.inject.Inject;
import jakarta.ws.rs.sse.SseBroadcaster;
import jakarta.ws.rs.sse.SseEventSink;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.*;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RealtimeCargoTrackingService_Test_Failing {
  private SseBroadcaster broadcaster;
  @Inject
  private Logger logger;
  @Mock
  private Cargo cargo;
  @Mock
  private HandlingHistory handlingHistory;
  @Mock
  private Itinerary itinerary;
  @Mock
  private RouteSpecification routeSpecification;
  @Mock
  private UnLocode unLocode;
  @Mock
  private TrackingId trackingId;
  @Mock
  private Delivery delivery;
  RealtimeCargoTrackingService realtimeCargoTrackingService;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_tuBZ0() {
    RealtimeCargoTrackingService service = new RealtimeCargoTrackingService();
    service.init();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTracking_qSUP0_AmpL0() {
    RealtimeCargoTrackingService service = new RealtimeCargoTrackingService();
    SseEventSink eventSink = mock(SseEventSink.class);
    service.tracking(eventSink);
    verify(eventSink).send(any());
    verify(broadcaster).register(eventSink);
    verify(logger).log(Level.FINEST, "SSE event sink registered.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void close_MiaI0()
  {
    broadcaster.close();
    logger.log(Level.FINEST, "SSE broadcaster closed.");
  }
}