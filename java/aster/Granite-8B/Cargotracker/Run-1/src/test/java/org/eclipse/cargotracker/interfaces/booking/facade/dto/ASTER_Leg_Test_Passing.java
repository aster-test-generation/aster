/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Leg_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetVoyageNumber_hgqH0() {
    Location location1 = new Location("unLocode1", "name1");
    Location location2 = new Location("unLocode2", "name2");
    Leg leg = new Leg("voyageNumber1", location1, location2, LocalDateTime.now(), LocalDateTime.now());
    assertEquals("voyageNumber1", leg.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetFrom_FVyW0_fid1() {
    Location location = new Location("unLocode", "name");
    Leg leg = new Leg("voyageNumber", location, location, LocalDateTime.now(), LocalDateTime.now());
    String result = leg.getFrom();
    assertEquals("name (unLocode)", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoadTime_toMf0_VZyz0() {
    Location from = new Location("USNYC", "New York");
    Location to = new Location("USLAX", "Los Angeles");
    Leg leg = new Leg("001", from, to, LocalDateTime.of(2022, 1, 1, 12, 0), LocalDateTime.of(2022, 1, 1, 13, 0));
    String expected = "1/1/2022 12:0 PM";
    String actual = leg.getLoadTime();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromName_CETH0_dPLQ0() {
    Location location = new Location("unLocode", "name");
    Leg leg = new Leg("voyageNumber", location, location, LocalDateTime.now(), LocalDateTime.now());
    String actualResult = leg.getFromName();
    String expectedResult = location.getName();
    assertEquals(expectedResult, actualResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetToUnLocode_ziCN0_TfEt0() {
    Location location = new Location("12345", "Test Location");
    Leg leg = new Leg("AB123", location, location, LocalDateTime.now(), LocalDateTime.now());
    assertEquals("12345", leg.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_wWSy0_QkQC0() {
    Location location1 = new Location("12345", "Test Location 1");
    Location location2 = new Location("67890", "Test Location 2");
    Leg leg = new Leg("AB123", location1, location2, LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    String expected = "Leg{voyageNumber=AB123, from=12345, to=67890, loadTime=" + leg.getLoadTime() + ", unloadTime=" + leg.getUnloadTime() + "}";
    assertEquals(expected, leg.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTo_YnyU0_XHAx0() {
    Location from = new Location("USNYC", "New York");
    Location to = new Location("USLAX", "Los Angeles");
    Leg leg = new Leg("001", from, to, LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    assertEquals("Los Angeles (USLAX)", leg.getTo());
  }
}