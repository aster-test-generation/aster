/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CargoStatus_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_iQoF0() {
    CargoStatus cargoStatus = new CargoStatus("12345", "New York", "In transit", false, "2022-01-01", "Unloading at terminal 5", new ArrayList<>());
    String trackingId = cargoStatus.getTrackingId();
    assertEquals("12345", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDestination_ZYYh0() {
    CargoStatus cargoStatus = new CargoStatus("12345", "New York", "In Transit", false, "2022-01-01", "Loading", new ArrayList<>());
    String expectedDestination = "New York";
    String actualDestination = cargoStatus.getDestination();
    assertEquals(expectedDestination, actualDestination);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusText_iCfy0() {
    CargoStatus cargoStatus = new CargoStatus("123", "New York", "In transit", false, "2022-01-01", "Unloading at terminal 5", new ArrayList<>());
    String actualStatusText = cargoStatus.getStatusText();
    String expectedStatusText = "In transit";
    assertEquals(expectedStatusText, actualStatusText);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEta_BeQE0() {
    CargoStatus cargoStatus = new CargoStatus("12345", "To York", "In Transit", false, "2022-01-01", "Unload at Port", new ArrayList<>());
    String eta = cargoStatus.getEta();
    assertEquals("2022-01-01", eta);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getNextExpectedActivityTest_zECB0() {
    CargoStatus cargoStatus = new CargoStatus("12345", "New York", "In Transit", false, "2022-01-01", "Load", new ArrayList<TrackingEvents>());
    String expected = "Load";
    String actual = cargoStatus.getNextExpectedActivity();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEvents_KmWN0() {
    CargoStatus cargoStatus = new CargoStatus("12345", "New York", "In transit", false, "2022-01-01", "Unloading", Collections.emptyList());
    List<TrackingEvents> events = cargoStatus.getEvents();
    assertEquals(0, events.size());
  }
}