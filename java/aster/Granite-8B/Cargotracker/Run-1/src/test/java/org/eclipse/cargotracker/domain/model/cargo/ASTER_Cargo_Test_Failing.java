/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Cargo_Test_Failing {
  Cargo cargo;
  Cargo other;
  private Itinerary itinerary;
  @Mock
  private RouteSpecification routeSpecification;
  @Mock
  private Delivery delivery;
  private TrackingId trackingId;
  @Mock
  private Voyage voyage;
  @Mock
  private RoutingStatus routingStatus;
  @Mock
  private UnLocode unLocode;
  @Mock
  private HandlingHistory handlingHistory;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString() throws Exception {
    trackingId = mock(TrackingId.class);
    cargo = new Cargo(trackingId, null);
    when(trackingId.toString()).thenReturn("12345");
    assertEquals("12345", cargo.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetTrackingId() throws Exception {
    trackingId = mock(TrackingId.class);
    cargo = new Cargo(trackingId, null);
    when(trackingId.getIdString()).thenReturn("1234567890");
    assertEquals("1234567890", cargo.getTrackingId().getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode() throws Exception {
    trackingId = mock(TrackingId.class);
    cargo = new Cargo(trackingId, null);
    // Assert that the hashCode of cargo is equal to the hashCode of its trackingId
    assertEquals(cargo.hashCode(), trackingId.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrigin_rxnb0() {
    Cargo cargo = new Cargo();
    Location origin = new Location(new UnLocode("US"), "New York");
    cargo.setOrigin(origin);
    assertEquals(origin, cargo.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginWithDifferentObject_VGDe2() {
    Cargo cargo = new Cargo();
    Location origin1 = new Location(new UnLocode("US"), "New York");
    Location origin2 = new Location(new UnLocode("US"), "Los Angeles");
    cargo.setOrigin(origin1);
    assertNotEquals(origin2, cargo.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginWithSameObject_BLVO3() {
    Cargo cargo = new Cargo();
    Location origin = new Location(new UnLocode("US"), "New York");
    cargo.setOrigin(origin);
    assertTrue(cargo.getOrigin().sameIdentityAs(origin));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginWithEqualObjects_pdsi4() {
    Cargo cargo = new Cargo();
    Location origin1 = new Location(new UnLocode("US"), "New York");
    Location origin2 = new Location(new UnLocode("US"), "New York");
    cargo.setOrigin(origin1);
    assertTrue(cargo.getOrigin().equals(origin2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginWithDifferentObjects_mbgg5() {
    Cargo cargo = new Cargo();
    Location origin1 = new Location(new UnLocode("US"), "New York");
    Location origin2 = new Location(new UnLocode("US"), "Los Angeles");
    cargo.setOrigin(origin1);
    assertFalse(cargo.getOrigin().equals(origin2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginWithDifferentObjectsUsingHashCode_JETw6() {
    Cargo cargo = new Cargo();
    Location origin1 = new Location(new UnLocode("US"), "New York");
    Location origin2 = new Location(new UnLocode("US"), "Los Angeles");
    cargo.setOrigin(origin1);
    assertNotEquals(origin2.hashCode(), cargo.getOrigin().hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginWithNullUsingHashCode_heRw7() {
    Cargo cargo = new Cargo();
    cargo.setOrigin(null);
    assertEquals(0, cargo.getOrigin().hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginWithDifferentObjectsUsingToString_WnzZ8() {
    Cargo cargo = new Cargo();
    Location origin1 = new Location(new UnLocode("US"), "New York");
    Location origin2 = new Location(new UnLocode("US"), "Los Angeles");
    cargo.setOrigin(origin1);
    assertNotEquals(origin2.toString(), cargo.getOrigin().toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginWithNullUsingToString_aXjp9() {
    Cargo cargo = new Cargo();
    cargo.setOrigin(null);
    assertEquals("Location{unLocode=null, name=null}", cargo.getOrigin().toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrigin_egLq0() throws Exception {
    Location origin = new Location(new UnLocode("US"), "New York");
    Cargo cargo = new Cargo(trackingId, routeSpecification);
    when(routeSpecification.getOrigin()).thenReturn(origin);
    assertEquals(origin, cargo.getOrigin());
  }
}