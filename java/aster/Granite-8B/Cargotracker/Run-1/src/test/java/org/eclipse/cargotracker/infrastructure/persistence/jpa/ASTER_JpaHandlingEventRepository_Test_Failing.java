/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.persistence.jpa;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JpaHandlingEventRepository_Test_Failing {
  @PersistenceContext
  private EntityManager entityManager;
  private HandlingEvent handlingEvent;
  private JpaHandlingEventRepository jpahandlingeventrepository;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_iARe0_1() {
    JpaHandlingEventRepository repository = new JpaHandlingEventRepository();
    TrackingId trackingId = new TrackingId("123456789");
    HandlingHistory handlingHistory = repository.lookupHandlingHistoryOfCargo(trackingId);
    assertNotNull(handlingHistory);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_iARe0_2() {
    JpaHandlingEventRepository repository = new JpaHandlingEventRepository();
    TrackingId trackingId = new TrackingId("123456789");
    HandlingHistory handlingHistory = repository.lookupHandlingHistoryOfCargo(trackingId);
    assertEquals(0, handlingHistory.getDistinctEventsByCompletionTime().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_iARe0_3() {
    JpaHandlingEventRepository repository = new JpaHandlingEventRepository();
    TrackingId trackingId = new TrackingId("123456789");
    HandlingHistory handlingHistory = repository.lookupHandlingHistoryOfCargo(trackingId);
    assertEquals(0, handlingHistory.getAllHandlingEvents().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_iARe0_4() {
    JpaHandlingEventRepository repository = new JpaHandlingEventRepository();
    TrackingId trackingId = new TrackingId("123456789");
    HandlingHistory handlingHistory = repository.lookupHandlingHistoryOfCargo(trackingId);
    assertEquals(0, handlingHistory.getMostRecentlyCompletedEvent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupHandlingHistoryOfCargo_iARe0() {
    JpaHandlingEventRepository repository = new JpaHandlingEventRepository();
    TrackingId trackingId = new TrackingId("123456789");
    HandlingHistory handlingHistory = repository.lookupHandlingHistoryOfCargo(trackingId);
    assertNotNull(handlingHistory);
    assertEquals(0, handlingHistory.getDistinctEventsByCompletionTime().size());
    assertEquals(0, handlingHistory.getAllHandlingEvents().size());
    assertEquals(0, handlingHistory.getMostRecentlyCompletedEvent());
  }
}