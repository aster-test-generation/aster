/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RouteSpecification_Test_Passing {
  private Itinerary itinerary;
  @Mock
  private LocalDate arrivalDeadlineMock;
  @InjectMocks
  private RouteSpecification routeSpecification;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_Xvlv0() {
    RouteSpecification routeSpecification = new RouteSpecification();
    boolean result = routeSpecification.equals(null);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_RrHc1() {
    RouteSpecification routeSpecification = new RouteSpecification();
    boolean result = routeSpecification.equals(new Object());
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_rYWj2() {
    RouteSpecification routeSpecification = new RouteSpecification();
    boolean result = routeSpecification.equals(routeSpecification);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObject_VPQx3() {
    RouteSpecification routeSpecification1 = new RouteSpecification();
    RouteSpecification routeSpecification2 = new RouteSpecification();
    boolean result = routeSpecification1.equals(routeSpecification2);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetDestination_CPls0_iwul0() {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Chicago"), LocalDate.now().plusDays(5));
    Location destination = routeSpecification.getDestination();
    assertEquals(new Location(new UnLocode("US"), "Chicago"), destination);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_GAwl0_bRbG0() {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), LocalDate.now().plusDays(7));
    assertEquals(173540130, routeSpecification.hashCode());
  }
}