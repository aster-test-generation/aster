/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.dto;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingEvents_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpected_Qjfm0() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "time");
    boolean result = trackingEvents.isExpected();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpectedWithExpectedFalse_XaXY2() {
    TrackingEvents trackingEvents = new TrackingEvents(false, "description", "time");
    boolean result = trackingEvents.isExpected();
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpectedWithEmptyDescription_qvgW3() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "", "time");
    boolean result = trackingEvents.isExpected();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpectedWithNullDescription_wQmp4() {
    TrackingEvents trackingEvents = new TrackingEvents(true, null, "time");
    boolean result = trackingEvents.isExpected();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpectedWithEmptyTime_JVsK5() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "");
    boolean result = trackingEvents.isExpected();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsExpectedWithNullTime_VMvE6() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", null);
    boolean result = trackingEvents.isExpected();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDescription_QDPS0() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "Sample description", "2022-01-01 12:00:00");
    assertEquals("Sample description", trackingEvents.getDescription());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTime_lrGB0() {
    TrackingEvents trackingEvents = new TrackingEvents(true, "description", "time");
    String actualTime = trackingEvents.getTime();
    assertEquals("time", actualTime);
  }
}