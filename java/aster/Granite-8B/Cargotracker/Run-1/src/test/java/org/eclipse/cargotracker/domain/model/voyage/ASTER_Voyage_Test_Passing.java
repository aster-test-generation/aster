/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Voyage_Test_Passing {
  Voyage voyage;
  Voyage otherVoyage;
  Voyage other;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_sameObject_returnsTrue() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    VoyageNumber otherVoyageNumber = new VoyageNumber("123");
    Schedule otherSchedule = new Schedule();
    otherVoyage = new Voyage(otherVoyageNumber, otherSchedule);
    assertTrue(voyage.equals(voyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_sameValues_returnsTrue() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    VoyageNumber otherVoyageNumber = new VoyageNumber("123");
    Schedule otherSchedule = new Schedule();
    otherVoyage = new Voyage(otherVoyageNumber, otherSchedule);
    assertTrue(voyage.equals(otherVoyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_differentType_returnsFalse() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    VoyageNumber otherVoyageNumber = new VoyageNumber("123");
    Schedule otherSchedule = new Schedule();
    otherVoyage = new Voyage(otherVoyageNumber, otherSchedule);
    assertFalse(voyage.equals("string"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_null_returnsFalse() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    VoyageNumber otherVoyageNumber = new VoyageNumber("123");
    Schedule otherSchedule = new Schedule();
    otherVoyage = new Voyage(otherVoyageNumber, otherSchedule);
    assertFalse(voyage.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_zNJL0() {
    Voyage voyage = new Voyage();
    boolean result = voyage.equals(null);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_rzWy1() {
    Voyage voyage = new Voyage();
    boolean result = voyage.equals(voyage);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_jTzL2() {
    Voyage voyage = new Voyage();
    boolean result = voyage.equals("differentClass");
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSchedule_wgZi0() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    Schedule schedule = voyage.getSchedule();
    assertNotNull(schedule);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_obte3() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("123"), new Schedule());
    assertEquals(voyage1.hashCode(), voyage2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_prey0() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertEquals("Voyage 123", voyage.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetVoyageNumber_ilol0() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    Voyage voyage = new Voyage(voyageNumber, new Schedule());
    assertEquals("123456", voyage.getVoyageNumber().getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsameIdentityAs_1() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    other = new Voyage(voyageNumber, schedule);
    // Assert that sameIdentityAs returns true when comparing the same object
    // Assert that sameIdentityAs returns true when comparing two objects with the same identity
    // Assert that sameIdentityAs returns false when comparing two objects with different identities
    assertTrue(voyage.sameIdentityAs(voyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsameIdentityAs_2() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    other = new Voyage(voyageNumber, schedule);
    // Assert that sameIdentityAs returns true when comparing the same object
    // Assert that sameIdentityAs returns true when comparing two objects with the same identity
    // Assert that sameIdentityAs returns false when comparing two objects with different identities
    assertTrue(voyage.sameIdentityAs(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsameIdentityAs_3() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    other = new Voyage(voyageNumber, schedule);
    // Assert that sameIdentityAs returns true when comparing the same object
    // Assert that sameIdentityAs returns true when comparing two objects with the same identity
    // Assert that sameIdentityAs returns false when comparing two objects with different identities
    assertFalse(voyage.sameIdentityAs(new Voyage(new VoyageNumber("456"), new Schedule())));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_hFFc0() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    int expectedHashCode = new VoyageNumber("123").hashCode();
    assertEquals(expectedHashCode, voyage.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testsameIdentityAs() throws Exception {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    Schedule schedule = new Schedule();
    voyage = new Voyage(voyageNumber, schedule);
    other = new Voyage(voyageNumber, schedule);
    // Assert that sameIdentityAs returns true when comparing the same object
    assertTrue(voyage.sameIdentityAs(voyage));
    // Assert that sameIdentityAs returns true when comparing two objects with the same identity
    assertTrue(voyage.sameIdentityAs(other));
    // Assert that sameIdentityAs returns false when comparing two objects with different identities
    assertFalse(voyage.sameIdentityAs(new Voyage(new VoyageNumber("456"), new Schedule())));
  }
}