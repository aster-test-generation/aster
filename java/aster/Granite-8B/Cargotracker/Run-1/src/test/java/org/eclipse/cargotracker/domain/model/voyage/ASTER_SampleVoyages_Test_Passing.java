/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_SampleVoyages_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupWithNonExistingVoyageNumber_LLMh2() {
    Voyage voyage = SampleVoyages.lookup(new VoyageNumber("789"));
    assertNull(voyage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLookupWithNullVoyageNumber_RFXL3() {
    Voyage voyage = SampleVoyages.lookup(null);
    assertNull(voyage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_AKqy4() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertTrue(voyage.equals(voyage));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObject_bYxi5() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("456"), new Schedule());
    assertFalse(voyage1.equals(voyage2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentType_JUEK6() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertFalse(voyage.equals("123"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_GrsF7() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertFalse(voyage.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_uOsJ8() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertEquals("Voyage 123", voyage.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithSameObject_IiCj9() {
    Voyage voyage = new Voyage(new VoyageNumber("123"), new Schedule());
    assertEquals(voyage.hashCode(), voyage.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithDifferentObject_CsQD10() {
    Voyage voyage1 = new Voyage(new VoyageNumber("123"), new Schedule());
    Voyage voyage2 = new Voyage(new VoyageNumber("456"), new Schedule());
    assertNotEquals(voyage1.hashCode(), voyage2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetAll_fHmc0_1() {
    List<Voyage> expectedVoyages = new ArrayList<>(SampleVoyages.ALL.values());
    List<Voyage> actualVoyages = SampleVoyages.getAll();
    assertEquals(expectedVoyages, actualVoyages);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetAll_fHmc0_2() {
    List<Voyage> expectedVoyages = new ArrayList<>(SampleVoyages.ALL.values());
    List<Voyage> actualVoyages = SampleVoyages.getAll();
    assertTrue(actualVoyages.containsAll(expectedVoyages));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testGetAll_fHmc0() {
    List<Voyage> expectedVoyages = new ArrayList<>(SampleVoyages.ALL.values());
    List<Voyage> actualVoyages = SampleVoyages.getAll();
    assertEquals(expectedVoyages, actualVoyages);
    assertTrue(actualVoyages.containsAll(expectedVoyages));
  }
}