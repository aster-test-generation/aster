/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RouteSpecification_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSatisfiedByWithNullOrigin_fjab1() {
    RouteSpecification routeSpecification = new RouteSpecification();
    Itinerary itinerary = new Itinerary();
    boolean result = routeSpecification.isSatisfiedBy(itinerary);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode1_Kcci0() {
    RouteSpecification routeSpecification = new RouteSpecification();
    HashCodeBuilder hashCodeBuilder = new HashCodeBuilder();
    assertEquals(hashCodeBuilder.toHashCode(), routeSpecification.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode2_yBBb1_uJFE0() {
    RouteSpecification routeSpecification = new RouteSpecification();
    HashCodeBuilder hashCodeBuilder = new HashCodeBuilder();
    hashCodeBuilder.append(routeSpecification.getOrigin());
    assertEquals(hashCodeBuilder.toHashCode(), routeSpecification.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode3_ZxHA2_aKxi0() {
    RouteSpecification routeSpecification = new RouteSpecification();
    HashCodeBuilder hashCodeBuilder = new HashCodeBuilder();
    hashCodeBuilder.append(routeSpecification.getOrigin());
    hashCodeBuilder.append(routeSpecification.getDestination());
    assertEquals(hashCodeBuilder.toHashCode(), routeSpecification.hashCode());
  }
}