/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ListCargo_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetNotRoutedCargos_ZaCQ0_1() {
    ListCargo cargo = new ListCargo();
    List<CargoRoute> notRoutedCargos = cargo.getNotRoutedCargos();
    assertNotNull(notRoutedCargos);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetNotRoutedCargos_ZaCQ0_2() {
    ListCargo cargo = new ListCargo();
    List<CargoRoute> notRoutedCargos = cargo.getNotRoutedCargos();
    assertTrue(notRoutedCargos.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRoutedUnclaimedCargos_vMVh0_1() {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> routedUnclaimedCargos = listCargo.getRoutedUnclaimedCargos();
    assertNotNull(routedUnclaimedCargos);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRoutedUnclaimedCargos_vMVh0_2() {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> routedUnclaimedCargos = listCargo.getRoutedUnclaimedCargos();
    assertTrue(routedUnclaimedCargos.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClaimedCargos_kpOz0_1() {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> claimedCargos = listCargo.getClaimedCargos();
    assertNotNull(claimedCargos);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClaimedCargos_kpOz0_2() {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> claimedCargos = listCargo.getClaimedCargos();
    assertTrue(claimedCargos.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetNotRoutedCargos_ZaCQ0() {
    ListCargo cargo = new ListCargo();
    List<CargoRoute> notRoutedCargos = cargo.getNotRoutedCargos();
    assertNotNull(notRoutedCargos);
    assertTrue(notRoutedCargos.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRoutedUnclaimedCargos_vMVh0() {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> routedUnclaimedCargos = listCargo.getRoutedUnclaimedCargos();
    assertNotNull(routedUnclaimedCargos);
    assertTrue(routedUnclaimedCargos.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClaimedCargos_kpOz0() {
    ListCargo listCargo = new ListCargo();
    List<CargoRoute> claimedCargos = listCargo.getClaimedCargos();
    assertNotNull(claimedCargos);
    assertTrue(claimedCargos.isEmpty());
  }
}