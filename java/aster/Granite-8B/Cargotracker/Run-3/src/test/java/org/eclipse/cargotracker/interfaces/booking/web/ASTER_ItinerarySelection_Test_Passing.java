/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.web;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_ItinerarySelection_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getRouteCanditates_KctY0_1() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> actualRouteCandidates = itinerarySelection.getRouteCanditates();
    assertNotNull(actualRouteCandidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getRouteCanditates_KctY0_2() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> actualRouteCandidates = itinerarySelection.getRouteCanditates();
    assertEquals(0, actualRouteCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getRouteCandidates_CQLI0_1() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> actualRouteCandidates = itinerarySelection.getRouteCandidates();
    assertNotNull(actualRouteCandidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getRouteCandidates_CQLI0_2() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    List<RouteCandidate> actualRouteCandidates = itinerarySelection.getRouteCandidates();
    assertTrue(actualRouteCandidates.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetTrackingId_MBub0() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    String trackingId = itinerarySelection.getTrackingId();
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_1() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getFinalDestinationName(), "Final Destination Name");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_2() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getFinalDestination(), "Final Destination");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_3() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getTrackingId(), "Tracking ID");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_4() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getFinalDestinationCode(), "Final Destination Code");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_5() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getOriginCode(), "Origin Code");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_6() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getNextLocation(), "Next Location");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_7() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getOriginName(), "Origin Name");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_8() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getOrigin(), "Origin");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_9() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getArrivalDeadline(), "Arrival Deadline");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_10() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getLastKnownLocationName(), "Last Known Location Name");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_11() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getLastKnownLocation(), "Last Known Location");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_12() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getTransportStatus(), "Transport Status");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_13() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getLegs(), new ArrayList<Leg>());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCargo_LETs0_14() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    CargoRoute cargoRoute = itinerarySelection.getCargo();
    assertEquals(cargoRoute.getLastKnownLocationCode(), "Last Known Location Code");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoad_isCu0_2() throws Exception {
    ItinerarySelection itinerarySelection = new ItinerarySelection();
    itinerarySelection.load();
    assertNotNull(itinerarySelection.routeCandidates);
  }
}