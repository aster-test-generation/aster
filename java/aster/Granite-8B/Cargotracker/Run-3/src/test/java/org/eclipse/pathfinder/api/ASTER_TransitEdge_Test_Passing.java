/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TransitEdge_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetFromUnLocode_riCz0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String expectedFromUnLocode = "fromUnLocode";
    String actualFromUnLocode = transitEdge.getFromUnLocode();
    assertEquals(expectedFromUnLocode, actualFromUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testgetToUnLocode_LqDp0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("VOYAGE_NUMBER", "FROM_UNLOCODE", "TO_UNLOCODE", null, null);
    assertEquals("TO_UNLOCODE", transitEdge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_kPSW0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("123", "ABC", "XYZ", LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    String expected = "TransitEdge{voyageNumber=123, fromUnLocode=ABC, toUnLocode=XYZ, fromDate=" + transitEdge.getFromDate() + ", toDate=" + transitEdge.getToDate() + "}";
    assertEquals(expected, transitEdge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetToDate_JdeA0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now().plusDays(1));
    LocalDateTime expectedDate = LocalDateTime.now().plusDays(1);
    LocalDateTime actualDate = transitEdge.getToDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDate_egyR0() throws Exception {
    TransitEdge transitEdge = new TransitEdge();
    LocalDateTime fromDate = LocalDateTime.now();
    transitEdge.setFromDate(fromDate);
    assertEquals(fromDate, transitEdge.getFromDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_GkNB0() throws Exception {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setToUnLocode("TO_UNLOCODE");
    assertEquals("TO_UNLOCODE", transitEdge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFromDate_Tkgc0() throws Exception {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime expectedFromDate = transitEdge.getFromDate();
    LocalDateTime actualFromDate = transitEdge.getFromDate();
    assertEquals(expectedFromDate, actualFromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocode_JgPf0() throws Exception {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setFromUnLocode("ABC123");
    assertEquals("ABC123", transitEdge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocodeWithNull_Qfqi1() throws Exception {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setFromUnLocode(null);
    assertNull(transitEdge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocodeWithEmpty_ddPI2() throws Exception {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setFromUnLocode("");
    assertEquals("", transitEdge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocodeWithInvalidFormat_pLrA4() throws Exception {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setFromUnLocode("ABC");
    assertEquals("ABC", transitEdge.getFromUnLocode());
  }
}