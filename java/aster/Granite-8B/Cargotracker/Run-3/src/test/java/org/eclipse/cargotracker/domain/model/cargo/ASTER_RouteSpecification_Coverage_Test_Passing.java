/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RouteSpecification_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWhenObjectsAreSame_huzN0() {
    RouteSpecification routeSpecification = new RouteSpecification();
    boolean result = routeSpecification.equals(routeSpecification);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWhenObjectsAreNull_qwOf1() {
    RouteSpecification routeSpecification = new RouteSpecification();
    boolean result = routeSpecification.equals(null);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWhenObjectsAreNotInstancesOfRouteSpecification_ONhp2() {
    RouteSpecification routeSpecification = new RouteSpecification();
    boolean result = routeSpecification.equals("String");
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWhenObjectsHaveDifferentValues_ozjF3() {
    RouteSpecification routeSpecification1 = new RouteSpecification();
    RouteSpecification routeSpecification2 = new RouteSpecification();
    boolean result = routeSpecification1.equals(routeSpecification2);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSatisfiedByWithItineraryNull_RIDY0() {
    RouteSpecification routeSpecification = new RouteSpecification();
    boolean actual = routeSpecification.isSatisfiedBy(null);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode1_iXyJ0_TxOq0() {
    RouteSpecification routeSpecification = new RouteSpecification();
    HashCodeBuilder hashCodeBuilder = new HashCodeBuilder();
    int expectedHashCode = hashCodeBuilder.append(routeSpecification.getOrigin()).append(routeSpecification.getDestination()).append(routeSpecification.getArrivalDeadline()).toHashCode();
    int actualHashCode = routeSpecification.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }
}