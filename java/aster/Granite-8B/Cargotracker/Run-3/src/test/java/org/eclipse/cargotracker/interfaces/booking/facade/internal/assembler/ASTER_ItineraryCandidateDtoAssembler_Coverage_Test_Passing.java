/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal.assembler;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.location.LocationRepository;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.eclipse.cargotracker.domain.model.voyage.VoyageRepository;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_ItineraryCandidateDtoAssembler_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFromDTO_ROdY0() {
    ItineraryCandidateDtoAssembler assembler = new ItineraryCandidateDtoAssembler();
    RouteCandidate routeCandidateDTO = mock(RouteCandidate.class);
    VoyageRepository voyageRepository = mock(VoyageRepository.class);
    LocationRepository locationRepository = mock(LocationRepository.class);
    Itinerary itinerary = assembler.fromDTO(routeCandidateDTO, voyageRepository, locationRepository);
    verify(routeCandidateDTO, times(1)).getLegs();
    verify(voyageRepository, times(1)).find(any(VoyageNumber.class));
    verify(locationRepository, times(2)).find(any(UnLocode.class));
    verify(itinerary, times(1)).getLegs();
  }
}