/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_uPOW0() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    assertEquals("USCHI", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullCountryAndLocation_waRy1() throws Exception {
    UnLocode unLocode = new UnLocode(null);
    assertEquals("", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyCountryAndLocation_DztX2() throws Exception {
    UnLocode unLocode = new UnLocode("");
    assertEquals("", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_mxAn0() throws Exception {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("USCHI");
    boolean result = unLocode1.sameValueAs(unLocode2);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithNull_mdZA1() throws Exception {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = null;
    boolean result = unLocode1.sameValueAs(unLocode2);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithDifferentUnLocode_EdGT2() throws Exception {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("GBHEL");
    boolean result = unLocode1.sameValueAs(unLocode2);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_fAVx0() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    assertEquals("USCHI", unLocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdStringWithEmptyConstructor_EtyF1() throws Exception {
    UnLocode unLocode = new UnLocode();
    assertEquals("", unLocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_IiUa0() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    int expectedHashCode = 1174312;
    assertEquals(expectedHashCode, unLocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithEmptyUnLocode_vrBU1() throws Exception {
    UnLocode unLocode = new UnLocode("");
    int expectedHashCode = 0;
    assertEquals(expectedHashCode, unLocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullUnLocode_VMja2() throws Exception {
    UnLocode unLocode = new UnLocode(null);
    int expectedHashCode = 0;
    assertEquals(expectedHashCode, unLocode.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithDifferentUnLocode_hADx3() throws Exception {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("GBHOU");
    assertNotEquals(unLocode1.hashCode(), unLocode2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithSameUnLocode_RfTk4() throws Exception {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("USCHI");
    assertEquals(unLocode1.hashCode(), unLocode2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithDifferentCaseUnLocode_RufK5() throws Exception {
    UnLocode unLocode1 = new UnLocode("uschi");
    UnLocode unLocode2 = new UnLocode("USCHI");
    assertEquals(unLocode1.hashCode(), unLocode2.hashCode());
  }
}