/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Cargo_Test_Passing {
  private Itinerary itinerary;
  private Cargo cargo;
  private Delivery delivery;
  private TrackingId trackingId;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_PrNo0() throws Exception {
    Cargo cargo = new Cargo();
    assertEquals(true, cargo.equals(cargo));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_WOFv1() throws Exception {
    Cargo cargo = new Cargo();
    assertEquals(false, cargo.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_mTau2() throws Exception {
    Cargo cargo = new Cargo();
    assertEquals(false, cargo.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentTrackingId_ZBod3() throws Exception {
    Cargo cargo1 = new Cargo(new TrackingId("123"), new RouteSpecification());
    Cargo cargo2 = new Cargo(new TrackingId("456"), new RouteSpecification());
    assertEquals(false, cargo1.equals(cargo2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameTrackingId_uTLt4() throws Exception {
    Cargo cargo1 = new Cargo(new TrackingId("123"), new RouteSpecification());
    Cargo cargo2 = new Cargo(new TrackingId("123"), new RouteSpecification());
    assertEquals(true, cargo1.equals(cargo2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrigin_QVJo0() throws Exception {
    Cargo cargo = new Cargo();
    Location origin = new Location(new UnLocode("US"), "New York");
    cargo.setOrigin(origin);
    assertEquals(origin, cargo.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOriginWithNull_dYlG1_1() throws Exception {
    Cargo cargo = new Cargo();
    Location origin = null;
    IllegalArgumentException exception =
            assertThrows(IllegalArgumentException.class, () -> cargo.setOrigin(origin));
  }
}