/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.tracking.web;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.TransportStatus;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CargoTrackingViewAdapter_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLastKnownLocationNameWhenLocationIsUnknown_dxXX0() {
    Cargo cargo = new Cargo();
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    String actual = cargoTrackingViewAdapter.getLastKnownLocationName();
    String expected = "Unknown";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullCargo_vhZO2() {
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(null, new ArrayList<>());
    String eta = adapter.getEta();
    assertEquals("?", eta);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAtDestination_gboC1() {
    Cargo cargo = new Cargo();
    cargo.getDelivery().setUnloadedAtDestination(true);
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, new ArrayList<>());
    assertEquals("AT_DESTINATION", adapter.getStatusCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testMisdirected_QPDS2() {
    Cargo cargo = new Cargo();
    cargo.getDelivery().setMisdirected(true);
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, new ArrayList<>());
    assertEquals("MISDIRECTED", adapter.getStatusCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUnknownTransportStatus_dPrb3() {
    Cargo cargo = new Cargo();
    cargo.getDelivery().setTransportStatus(TransportStatus.UNKNOWN);
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, new ArrayList<>());
    assertEquals("UNKNOWN", adapter.getStatusCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNotReceived_aoZE4() {
    Cargo cargo = new Cargo();
    cargo.getDelivery().setTransportStatus(TransportStatus.NOT_RECEIVED);
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, new ArrayList<>());
    assertEquals("NOT_RECEIVED", adapter.getStatusCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInPort_WcJK5() {
    Cargo cargo = new Cargo();
    cargo.getDelivery().setTransportStatus(TransportStatus.IN_PORT);
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, new ArrayList<>());
    assertEquals("IN_PORT", adapter.getStatusCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUnknownStatus_LRys0() {
    Cargo cargo = new Cargo();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, null);
    String statusText = adapter.getStatusText();
    assertEquals("Unknown", statusText);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUnknownStatusText_JAdx1() {
    Cargo cargo = new Cargo();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, null);
    String statusText = adapter.getStatusText();
    assertEquals("[Unknown status]", statusText);
  }
}