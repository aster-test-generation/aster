/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingService_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_WtwZ0_1() throws Exception {
    UnLocode originUnLocode = new UnLocode("US");
    UnLocode destinationUnLocode = new UnLocode("CN");
    LocalDate arrivalDeadline = LocalDate.now().plusDays(14);
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_WtwZ0_2() throws Exception {
    UnLocode originUnLocode = new UnLocode("US");
    UnLocode destinationUnLocode = new UnLocode("CN");
    LocalDate arrivalDeadline = LocalDate.now().plusDays(14);
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertEquals("US", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_WtwZ0_3() throws Exception {
    UnLocode originUnLocode = new UnLocode("US");
    UnLocode destinationUnLocode = new UnLocode("CN");
    LocalDate arrivalDeadline = LocalDate.now().plusDays(14);
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargoWithNullTrackingId_NaXz0() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    List<Itinerary> itineraries = bookingService.requestPossibleRoutesForCargo(null);
    assertEquals(0, itineraries.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadlineWithNullTrackingId_mVSw1_1() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    LocalDate newDeadline = LocalDate.now().plusDays(14);
    Exception exception = assertThrows(IllegalArgumentException.class, () -> bookingService.changeDeadline(null, newDeadline));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadlineWithNullNewDeadline_tCvF2_1() throws Exception {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("123456789");
    Exception exception = assertThrows(IllegalArgumentException.class, () -> bookingService.changeDeadline(trackingId, null));
  }
}