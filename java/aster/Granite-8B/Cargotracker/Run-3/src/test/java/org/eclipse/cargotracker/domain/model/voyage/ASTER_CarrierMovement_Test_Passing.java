/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_CarrierMovement_Test_Passing {
  private LocalDateTime departureTime;
  private CarrierMovement carrierMovement;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetDepartureTime() throws Exception {
    departureTime = LocalDateTime.now();
    Location departureLocation = new Location(new UnLocode("US"), "New York");
    Location arrivalLocation = new Location(new UnLocode("US"), "Los Angeles");
    carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, null);
    assertEquals(departureTime, carrierMovement.getDepartureTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalTime_FIZU0() throws Exception {
    Location location1 = new Location(new UnLocode("US"), "New York");
    Location location2 = new Location(new UnLocode("US"), "Los Angeles");
    CarrierMovement carrierMovement = new CarrierMovement(location1, location2, LocalDateTime.now(), LocalDateTime.now());
    LocalDateTime arrivalTime = carrierMovement.getArrivalTime();
    assertNotNull(arrivalTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDepartureLocation_gIQX0() throws Exception {
    UnLocode unLocode = new UnLocode("US");
    Location departureLocation = new Location(unLocode, "New York");
    Location arrivalLocation = new Location();
    LocalDateTime departureTime = LocalDateTime.now();
    LocalDateTime arrivalTime = LocalDateTime.now();
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    Location actualDepartureLocation = carrierMovement.getDepartureLocation();
    assertEquals(departureLocation, actualDepartureLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalLocation_sBYh0() throws Exception {
    Location arrivalLocation = new Location(new UnLocode("US"), "New York");
    CarrierMovement carrierMovement = new CarrierMovement(new Location(), arrivalLocation, null, null);
    Location actualArrivalLocation = carrierMovement.getArrivalLocation();
    assertEquals(arrivalLocation, actualArrivalLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetDepartureTime_pFRw0() throws Exception {
    Location location1 = new Location(new UnLocode("US"), "New York");
    Location location2 = new Location(new UnLocode("US"), "Chicago");
    CarrierMovement carrierMovement = new CarrierMovement(location1, location2, LocalDateTime.of(2022, 1, 1, 10, 0), LocalDateTime.of(2022, 1, 1, 12, 0));
    LocalDateTime expectedDepartureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime actualDepartureTime = carrierMovement.getDepartureTime();
    assertEquals(expectedDepartureTime, actualDepartureTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_fkCd0() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement();
    boolean result = carrierMovement.equals(carrierMovement);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_HNpx1() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement();
    boolean result = carrierMovement.equals(null);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_sfIr2() throws Exception {
    CarrierMovement carrierMovement = new CarrierMovement();
    boolean result = carrierMovement.equals("string");
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObject_XQrm3() throws Exception {
    CarrierMovement carrierMovement1 = new CarrierMovement();
    CarrierMovement carrierMovement2 = new CarrierMovement();
    boolean result = carrierMovement1.equals(carrierMovement2);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_GOGk0() throws Exception {
    Location departureLocation = new Location(new UnLocode("US"), "New York");
    Location arrivalLocation = new Location(new UnLocode("US"), "Los Angeles");
    LocalDateTime departureTime = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime arrivalTime = LocalDateTime.of(2022, 1, 1, 12, 0);
    CarrierMovement carrierMovement = new CarrierMovement(departureLocation, arrivalLocation, departureTime, arrivalTime);
    int expectedHashCode = new HashCodeBuilder().append(departureLocation).append(departureTime).append(arrivalLocation).append(arrivalTime).toHashCode();
    int actualHashCode = carrierMovement.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }
}