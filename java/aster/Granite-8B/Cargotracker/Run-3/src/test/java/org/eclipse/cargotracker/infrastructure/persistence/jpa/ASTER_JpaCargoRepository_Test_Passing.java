/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.persistence.jpa;

import jakarta.enterprise.event.Event;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.infrastructure.events.cdi.CargoUpdated;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JpaCargoRepository_Test_Passing {
  @Inject
  @CargoUpdated
  private Event<Cargo> cargoUpdated;
  @PersistenceContext
  private EntityManager entityManager;
  private Cargo cargo;
  private Itinerary itinerary;
  private JpaCargoRepository jpacargorepository;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAll_xwbS0() throws Exception {
    JpaCargoRepository jpaCargoRepository = new JpaCargoRepository();
    List<Cargo> actual = jpaCargoRepository.findAll();
    List<Cargo> expected = entityManager.createNamedQuery("Cargo.findAll", Cargo.class).getResultList();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextTrackingId_rChW0() throws Exception {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    TrackingId trackingId = cargoRepository.nextTrackingId();
    assertEquals("6ba7b81-9dad-11d1-80b4-00c04fd430c", trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFind_nullTrackingId_throwsIllegalArgumentException_GUVL2_1() throws Exception {
    JpaCargoRepository repository = new JpaCargoRepository();
    TrackingId trackingId = null;
    IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> repository.find(trackingId));
  }
}