/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.persistence.jpa;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_JpaLocationRepository_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFind_dZUl0_1() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    UnLocode unLocode = new UnLocode("USCHI");
    Location location = repository.find(unLocode);
    assertNotNull(location);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFind_dZUl0_2() throws Exception {
    JpaLocationRepository repository = new JpaLocationRepository();
    UnLocode unLocode = new UnLocode("USCHI");
    Location location = repository.find(unLocode);
    assertEquals("Chicago, IL, USA", location.getName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUnLocodeConstructor_FiBd1() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    assertEquals("USCHI", unLocode.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUnLocodeEquals_TysX2() throws Exception {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("USCHI");
    assertTrue(unLocode1.equals(unLocode2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUnLocodeToString_ybQv3() throws Exception {
    UnLocode unLocode = new UnLocode("USCHI");
    assertEquals("UnLocode{idString='USCHI'}", unLocode.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUnLocodeHashCode_heZD4() throws Exception {
    UnLocode unLocode1 = new UnLocode("USCHI");
    UnLocode unLocode2 = new UnLocode("USCHI");
    assertEquals(unLocode1.hashCode(), unLocode2.hashCode());
  }
}