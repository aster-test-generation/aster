/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_invalidOrigin_throwsIllegalArgumentException_FYxT1_1() throws Exception {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "US123";
    String destinationUnLocode = "USLAX";
    String deadline = "2022-12-31";
    IllegalArgumentException exception =
            assertThrows(IllegalArgumentException.class,
                    () -> service.findShortestPath(originUnLocode, destinationUnLocode, deadline));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_invalidDestination_throwsIllegalArgumentException_ynlm2_1() throws Exception {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "US123";
    String deadline = "2022-12-31";
    IllegalArgumentException exception =
            assertThrows(IllegalArgumentException.class,
                    () -> service.findShortestPath(originUnLocode, destinationUnLocode, deadline));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath_invalidDeadline_throwsIllegalArgumentException_FIoi3_1() throws Exception {
    GraphTraversalService service = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "USLAX";
    String deadline = "2022-12-31T23:59:59";
    IllegalArgumentException exception =
            assertThrows(IllegalArgumentException.class,
                    () -> service.findShortestPath(originUnLocode, destinationUnLocode, deadline));
  }
}