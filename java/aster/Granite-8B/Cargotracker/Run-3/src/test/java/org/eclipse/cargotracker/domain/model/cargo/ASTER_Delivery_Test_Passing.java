/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Delivery_Test_Passing {
  private HandlingEvent lastEvent;
  private RouteSpecification routeSpecification;
  private Itinerary itinerary;
  private HandlingHistory handlingHistory;
  private Delivery delivery;
  @NotNull
  private boolean misdirected;
  private LocalDateTime eta;
  private LocalDateTime calculatedAt;
  private boolean isUnloadedAtDestination;
  private TransportStatus transportStatus;
  private RoutingStatus mockRoutingStatus;
  private HandlingEvent handlingEvent;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_PAWF0() throws Exception {
    Delivery delivery = new Delivery();
    int hashCode = delivery.hashCode();
    assertEquals(17, hashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMisdirected_PxKQ0() throws Exception {
    Delivery delivery = new Delivery();
    delivery.setMisdirected(true);
    assertEquals(true, delivery.isMisdirected());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastKnownLocation_cdsq0() throws Exception {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = new Location(new UnLocode("US"), "New York");
    delivery.setLastKnownLocation(lastKnownLocation);
    assertEquals(lastKnownLocation, delivery.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnloadedAtDestination_Dxvf0() throws Exception {
    Delivery delivery = new Delivery();
    delivery.setUnloadedAtDestination(true);
    assertTrue(delivery.isUnloadedAtDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnloadedAtDestinationFalse_CMtR1() throws Exception {
    Delivery delivery = new Delivery();
    delivery.setUnloadedAtDestination(false);
    assertFalse(delivery.isUnloadedAtDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTransportStatus_iqEY0() throws Exception {
    Delivery delivery = new Delivery();
    TransportStatus transportStatus = TransportStatus.CLAIMED;
    delivery.setTransportStatus(transportStatus);
    assertEquals(delivery.getTransportStatus(), transportStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_PoVk0() throws Exception {
    Delivery delivery = new Delivery();
    boolean result = delivery.equals(null);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_GJkw1() throws Exception {
    Delivery delivery = new Delivery();
    boolean result = delivery.equals(new Object());
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_UbwG2() throws Exception {
    Delivery delivery = new Delivery();
    boolean result = delivery.equals(delivery);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameValues_Zbdo3() throws Exception {
    Delivery delivery1 = new Delivery();
    Delivery delivery2 = new Delivery();
    boolean result = delivery1.equals(delivery2);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastEventNull_MbZc1() throws Exception {
    Delivery delivery = new Delivery();
    HandlingEvent lastEvent = null;
    assertThrows(NullPointerException.class, () -> delivery.setLastEvent(lastEvent));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt_PwGk0() throws Exception {
    Delivery delivery = new Delivery();
    LocalDateTime calculatedAt = LocalDateTime.now();
    delivery.setCalculatedAt(calculatedAt);
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEstimatedTimeOfArrival_EINv0() throws Exception {
    Delivery delivery = new Delivery();
    HandlingEvent lastEvent = new HandlingEvent();
    Itinerary itinerary = new Itinerary();
    RouteSpecification routeSpecification = new RouteSpecification();
    delivery = new Delivery(lastEvent, itinerary, routeSpecification);
    LocalDateTime eta = delivery.getEstimatedTimeOfArrival();
    assertEquals(eta, null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getLastKnownLocation_withoutLastEvent_returnsUnknownLocation_rQWl1() throws Exception {
    Delivery delivery = new Delivery();
    Location lastKnownLocation = delivery.getLastKnownLocation();
    assertEquals(Location.UNKNOWN, lastKnownLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateOnRoutingWithNullRouteSpecification_fhHs0_1() throws Exception {
    Delivery delivery = new Delivery();
    RouteSpecification routeSpecification = null;
    Itinerary itinerary = new Itinerary();
    Exception exception = assertThrows(IllegalArgumentException.class, () -> {
      delivery.updateOnRouting(routeSpecification, itinerary);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateOnRoutingWithNullItinerary_JrOA1_1() throws Exception {
    Delivery delivery = new Delivery();
    RouteSpecification routeSpecification = new RouteSpecification();
    Itinerary itinerary = null;
    Delivery updatedDelivery = delivery.updateOnRouting(routeSpecification, itinerary);
    assertNotNull(updatedDelivery);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateOnRoutingWithNonNullValues_IfuD2_1() throws Exception {
    Delivery delivery = new Delivery();
    RouteSpecification routeSpecification = new RouteSpecification();
    Itinerary itinerary = new Itinerary();
    Delivery updatedDelivery = delivery.updateOnRouting(routeSpecification, itinerary);
    assertNotNull(updatedDelivery);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateOnRoutingWithNonNullValuesAndNullLastEvent_Qeum3_1() throws Exception {
    Delivery delivery = new Delivery(null, new Itinerary(), new RouteSpecification());
    RouteSpecification routeSpecification = new RouteSpecification();
    Itinerary itinerary = new Itinerary();
    Delivery updatedDelivery = delivery.updateOnRouting(routeSpecification, itinerary);
    assertNotNull(updatedDelivery);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateOnRoutingWithNonNullValuesAndNonNullLastEvent_rIQN4_1() throws Exception {
    HandlingEvent lastEvent = new HandlingEvent();
    Delivery delivery = new Delivery(lastEvent, new Itinerary(), new RouteSpecification());
    RouteSpecification routeSpecification = new RouteSpecification();
    Itinerary itinerary = new Itinerary();
    Delivery updatedDelivery = delivery.updateOnRouting(routeSpecification, itinerary);
    assertNotNull(updatedDelivery);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getNextExpectedActivity_whenNoEventsOrItinerary_returnsNull_VHfd0() throws Exception {
    Delivery delivery = new Delivery();
    HandlingActivity nextExpectedActivity = delivery.getNextExpectedActivity();
    assertNull(nextExpectedActivity);
  }
}