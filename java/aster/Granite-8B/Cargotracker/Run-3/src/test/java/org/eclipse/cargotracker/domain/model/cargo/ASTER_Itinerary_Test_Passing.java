/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Itinerary_Test_Passing {
  private HandlingEvent handlingEvent;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_juRY0() throws Exception {
    Itinerary itinerary = new Itinerary();
    assertEquals(1, itinerary.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEmptyList_rXKl0() throws Exception {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    Location initialDepartureLocation = itinerary.getInitialDepartureLocation();
    assertEquals(Location.UNKNOWN, initialDepartureLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_oQrM0() throws Exception {
    Itinerary itinerary = new Itinerary();
    boolean result = itinerary.equals(null);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_aiaj1() throws Exception {
    Itinerary itinerary = new Itinerary();
    boolean result = itinerary.equals(new Object());
    assertTrue(!result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_NBIr2() throws Exception {
    Itinerary itinerary = new Itinerary();
    boolean result = itinerary.equals(itinerary);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentItinerary_bTva3() throws Exception {
    Itinerary itinerary1 = new Itinerary();
    Itinerary itinerary2 = new Itinerary();
    boolean result = itinerary1.equals(itinerary2);
    assertTrue(!result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEmptyItinerary_LIlK0() throws Exception {
    Itinerary itinerary = new Itinerary();
    Location finalArrivalLocation = itinerary.getFinalArrivalLocation();
    assertEquals(Location.UNKNOWN, finalArrivalLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullItinerary_CEql3() throws Exception {
    Itinerary itinerary = null;
    Location finalArrivalLocation = itinerary.getFinalArrivalLocation();
    assertEquals(Location.UNKNOWN, finalArrivalLocation);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getFinalArrivalDate_with_null_legs_pNZu0() throws Exception {
    Itinerary itinerary = new Itinerary(null);
    LocalDateTime finalArrivalDate = itinerary.getFinalArrivalDate();
    assertEquals(LocalDateTime.MAX, finalArrivalDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getFinalArrivalDate_with_null_leg_ktFS5() throws Exception {
    Itinerary itinerary = new Itinerary();
    LocalDateTime finalArrivalDate = itinerary.getFinalArrivalDate();
    assertEquals(LocalDateTime.MAX, finalArrivalDate);
  }
}