/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingHistory_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_yava0() throws Exception {
    HandlingHistory handlingHistory = new HandlingHistory(null);
    int expectedHashCode = 0;
    int actualHashCode = handlingHistory.hashCode();
    assertEquals(expectedHashCode, actualHashCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_wBZX0() throws Exception {
    HandlingHistory handlingHistory = new HandlingHistory(null);
    assertFalse(handlingHistory.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_iwAg1() throws Exception {
    HandlingHistory handlingHistory = new HandlingHistory(null);
    assertFalse(handlingHistory.equals(""));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_ZdiC2() throws Exception {
    HandlingHistory handlingHistory = new HandlingHistory(null);
    assertTrue(handlingHistory.equals(handlingHistory));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameHandlingEvents_mIWk3() throws Exception {
    HandlingHistory handlingHistory1 = new HandlingHistory(null);
    HandlingHistory handlingHistory2 = new HandlingHistory(null);
    assertTrue(handlingHistory1.equals(handlingHistory2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentHandlingEvents_VsML4() throws Exception {
    HandlingHistory handlingHistory1 = new HandlingHistory(null);
    HandlingHistory handlingHistory2 = new HandlingHistory(null);
    assertFalse(handlingHistory1.equals(handlingHistory2));
  }
}