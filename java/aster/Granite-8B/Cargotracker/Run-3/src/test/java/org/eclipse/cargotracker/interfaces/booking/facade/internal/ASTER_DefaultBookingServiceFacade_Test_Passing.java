/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoStatus;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingServiceFacade_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_uRHw0_1() throws Exception {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingId = "ABC123";
    List<RouteCandidate> routeCandidates = bookingServiceFacade.requestPossibleRoutesForCargo(trackingId);
    assertNotNull(routeCandidates);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_uRHw0_2() throws Exception {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingId = "ABC123";
    List<RouteCandidate> routeCandidates = bookingServiceFacade.requestPossibleRoutesForCargo(trackingId);
    assertFalse(routeCandidates.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_mvED0() throws Exception {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingId = bookingServiceFacade.bookNewCargo("USCHI", "CNSHA", LocalDate.now().plusDays(14));
    assertEquals("TEST1", trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination_vujb0() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingId = "TRK123";
    String destinationUnLocode = "NLRTM";
    facade.changeDestination(trackingId, destinationUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListShippingLocations_bouJ0() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> actualListShippingLocationsResult = defaultBookingServiceFacade.listShippingLocations();
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> expectedListShippingLocationsResult = new ArrayList<>();
    assertEquals(expectedListShippingLocationsResult, actualListShippingLocationsResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllTrackingIds_gCNC0() throws Exception {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<String> expectedTrackingIds = new ArrayList<>();
    expectedTrackingIds.add("ABC123");
    expectedTrackingIds.add("XYZ789");
    List<String> actualTrackingIds = bookingServiceFacade.listAllTrackingIds();
    assertEquals(expectedTrackingIds, actualTrackingIds);
  }

  @BeforeEach
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_1() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertNotNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_2() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Destination Name", cargoRoute.getFinalDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_3() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Destination", cargoRoute.getFinalDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_4() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Tracking ID", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_5() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Destination Code", cargoRoute.getFinalDestinationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_6() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Origin Code", cargoRoute.getOriginCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_7() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Next Location", cargoRoute.getNextLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_8() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Origin Name", cargoRoute.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_9() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Origin", cargoRoute.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_10() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Arrival Deadline", cargoRoute.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_11() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Last Known Location Name", cargoRoute.getLastKnownLocationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_12() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Last Known Location", cargoRoute.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_13() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Transport Status", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_14() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals(1, cargoRoute.getLegs().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_nikL0_15() throws Exception {
    DefaultBookingServiceFacade defaultBookingServiceFacade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = defaultBookingServiceFacade.loadCargoForRouting("123456789");
    assertEquals("Last Known Location Code", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_validTrackingId_returnsValidCargoStatus_XWDN0_1() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "validTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertNotNull(cargoStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_validTrackingId_returnsValidCargoStatus_XWDN0_2() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "validTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals("validTrackingId", cargoStatus.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_validTrackingId_returnsValidCargoStatus_XWDN0_3() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "validTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals("validDestination", cargoStatus.getDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_validTrackingId_returnsValidCargoStatus_XWDN0_4() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "validTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals("validStatusText", cargoStatus.getStatusText());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_validTrackingId_returnsValidCargoStatus_XWDN0_5() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "validTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals("validEta", cargoStatus.getEta());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_validTrackingId_returnsValidCargoStatus_XWDN0_6() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "validTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals("validNextExpectedActivity", cargoStatus.getNextExpectedActivity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_validTrackingId_returnsValidCargoStatus_XWDN0_7() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "validTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals(2, cargoStatus.getEvents().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_invalidTrackingId_returnsNull_qMHa1_1() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "invalidTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertNotNull(cargoStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_invalidTrackingId_returnsNull_qMHa1_2() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "invalidTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals(null, cargoStatus.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_invalidTrackingId_returnsNull_qMHa1_3() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "invalidTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals(null, cargoStatus.getDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_invalidTrackingId_returnsNull_qMHa1_4() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "invalidTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals(null, cargoStatus.getStatusText());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_invalidTrackingId_returnsNull_qMHa1_5() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "invalidTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals(null, cargoStatus.getEta());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_invalidTrackingId_returnsNull_qMHa1_6() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "invalidTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals(null, cargoStatus.getNextExpectedActivity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForTracking_invalidTrackingId_returnsNull_qMHa1_7() throws Exception {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    String trackingIdValue = "invalidTrackingId";
    CargoStatus cargoStatus = facade.loadCargoForTracking(trackingIdValue);
    assertEquals(0, cargoStatus.getEvents().size());
  }
}