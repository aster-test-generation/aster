/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RouteSpecification_Test_Passing {
  private LocalDate arrivalDeadline;
  private RouteSpecification routespecification;
  private LocalDate mockArrivalDeadline;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrigin_pCPD0_1() throws Exception {
    UnLocode unLocode = new UnLocode("US");
    Location location = new Location(unLocode, "New York");
    RouteSpecification routeSpecification = new RouteSpecification(location, null, LocalDate.now());
    Location origin = routeSpecification.getOrigin();
    assertNotNull(origin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrigin_pCPD0_2() throws Exception {
    UnLocode unLocode = new UnLocode("US");
    Location location = new Location(unLocode, "New York");
    RouteSpecification routeSpecification = new RouteSpecification(location, null, LocalDate.now());
    Location origin = routeSpecification.getOrigin();
    assertEquals(location, origin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getDestination_dMYO0() throws Exception {
    UnLocode unLocode = new UnLocode("US");
    Location location = new Location(unLocode, "New York");
    RouteSpecification routeSpecification = new RouteSpecification(location, location, LocalDate.now());
    Location destination = routeSpecification.getDestination();
    assertEquals(location, destination);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetArrivalDeadline_tBhn0() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Los Angeles"), LocalDate.of(2022, 12, 31));
    LocalDate arrivalDeadline = routeSpecification.getArrivalDeadline();
    assertEquals(LocalDate.of(2022, 12, 31), arrivalDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_fPls0() throws Exception {
    UnLocode unLocode1 = new UnLocode("US");
    UnLocode unLocode2 = new UnLocode("US");
    Location location1 = new Location(unLocode1, "New York");
    Location location2 = new Location(unLocode2, "Los Angeles");
    LocalDate localDate = LocalDate.now();
    RouteSpecification routeSpecification1 = new RouteSpecification(location1, location2, localDate);
    RouteSpecification routeSpecification2 = new RouteSpecification(location1, location2, localDate);
    assert routeSpecification1.hashCode() == routeSpecification2.hashCode();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameValues_yQcd0() throws Exception {
    RouteSpecification routeSpecification1 = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Chicago"), LocalDate.of(2022, 12, 31));
    RouteSpecification routeSpecification2 = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Chicago"), LocalDate.of(2022, 12, 31));
    assertTrue(routeSpecification1.equals(routeSpecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentValues_dPDC1() throws Exception {
    RouteSpecification routeSpecification1 = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Chicago"), LocalDate.of(2022, 12, 31));
    RouteSpecification routeSpecification2 = new RouteSpecification(new Location(new UnLocode("US"), "Los Angeles"), new Location(new UnLocode("US"), "Chicago"), LocalDate.of(2022, 12, 31));
    assertFalse(routeSpecification1.equals(routeSpecification2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_rkMD2() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Chicago"), LocalDate.of(2022, 12, 31));
    assertFalse(routeSpecification.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClasses_STSH3() throws Exception {
    RouteSpecification routeSpecification = new RouteSpecification(new Location(new UnLocode("US"), "New York"), new Location(new UnLocode("US"), "Chicago"), LocalDate.of(2022, 12, 31));
    assertFalse(routeSpecification.equals(""));
  }
}