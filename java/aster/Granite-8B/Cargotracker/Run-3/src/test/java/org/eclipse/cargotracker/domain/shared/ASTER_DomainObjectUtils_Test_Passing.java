/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.shared;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DomainObjectUtils_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe_znDz0() throws Exception {
    String actual = null;
    String safe = "default";
    String expected = "default";
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe2_TOjr1() throws Exception {
    String actual = "actual";
    String safe = "default";
    String expected = "actual";
    String result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe3_sxkh2() throws Exception {
    Integer actual = null;
    Integer safe = 0;
    Integer expected = 0;
    Integer result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe4_YmKh3() throws Exception {
    Integer actual = 10;
    Integer safe = 0;
    Integer expected = 10;
    Integer result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe5_HwVv4() throws Exception {
    Double actual = null;
    Double safe = 0.0;
    Double expected = 0.0;
    Double result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe6_Sbji5() throws Exception {
    Double actual = 10.0;
    Double safe = 0.0;
    Double expected = 10.0;
    Double result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe7_aZlA6() throws Exception {
    Boolean actual = null;
    Boolean safe = true;
    Boolean expected = true;
    Boolean result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe8_BDyY7() throws Exception {
    Boolean actual = false;
    Boolean safe = true;
    Boolean expected = false;
    Boolean result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe9_qVDe8() throws Exception {
    Object actual = null;
    Object safe = new Object();
    Object expected = safe;
    Object result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNullSafe10_IzvW9() throws Exception {
    Object actual = new Object();
    Object safe = new Object();
    Object expected = actual;
    Object result = DomainObjectUtils.nullSafe(actual, safe);
    assertEquals(expected, result);
  }
}