/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import jakarta.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Delivery_Test_Failing {
  private HandlingEvent lastEvent;
  private RouteSpecification routeSpecification;
  private Itinerary itinerary;
  private HandlingHistory handlingHistory;
  private Delivery delivery;
  @NotNull
  private boolean misdirected;
  private HandlingEvent handlingEvent;
  @Mock
  private HandlingActivity nextExpectedActivity;
  private Voyage currentVoyage;
  private LocalDateTime eta;
  private LocalDateTime calculatedAt;
  private boolean isUnloadedAtDestination;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetCurrentVoyage() throws Exception {
    currentVoyage = Mockito.mock(Voyage.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    when(handlingEvent.getVoyage()).thenReturn(currentVoyage);
    Voyage returnedVoyage = delivery.getCurrentVoyage();
    assertEquals(currentVoyage, returnedVoyage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUnloadedAtDestination() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    delivery.setUnloadedAtDestination(true);
    assertTrue(delivery.isUnloadedAtDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRoutingStatus_WNZw0() {
    Delivery delivery = new Delivery(new HandlingEvent(), new Itinerary(), new RouteSpecification());
    RoutingStatus routingStatus = delivery.getRoutingStatus();
    assertNotNull(routingStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_sameObject_returnsTrue() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Arrange
    Delivery sameDelivery = delivery;
    // Act
    boolean result = delivery.equals(sameDelivery);
    // Assert
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_sameValues_returnsTrue() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Arrange
    Delivery otherDelivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Act
    boolean result = delivery.equals(otherDelivery);
    // Assert
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_differentHandlingEvent_returnsFalse() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Arrange
    HandlingEvent differentHandlingEvent = mock(HandlingEvent.class);
    Delivery otherDelivery = new Delivery(differentHandlingEvent, itinerary, routeSpecification);
    // Act
    boolean result = delivery.equals(otherDelivery);
    // Assert
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_differentItinerary_returnsFalse() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Arrange
    Itinerary differentItinerary = mock(Itinerary.class);
    Delivery otherDelivery = new Delivery(handlingEvent, differentItinerary, routeSpecification);
    // Act
    boolean result = delivery.equals(otherDelivery);
    // Assert
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_differentRouteSpecification_returnsFalse() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Arrange
    RouteSpecification differentRouteSpecification = mock(RouteSpecification.class);
    Delivery otherDelivery = new Delivery(handlingEvent, itinerary, differentRouteSpecification);
    // Act
    boolean result = delivery.equals(otherDelivery);
    // Assert
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_differentClass_returnsFalse() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Arrange
    Object differentObject = new Object();
    // Act
    boolean result = delivery.equals(differentObject);
    // Assert
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_null_returnsFalse() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Act
    boolean result = delivery.equals(null);
    // Assert
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCalculatedAt() {
    handlingEvent = mock(HandlingEvent.class);
    itinerary = mock(Itinerary.class);
    routeSpecification = mock(RouteSpecification.class);
    delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    // Set up the expected behavior of the setCalculatedAt method
    LocalDateTime calculatedAt = LocalDateTime.now();
    delivery.setCalculatedAt(calculatedAt);
    // Verify that the calculatedAt field was set correctly
    assertEquals(calculatedAt, delivery.getCalculatedAt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTransportStatus_tUvo0() {
    Delivery delivery = new Delivery();
    TransportStatus transportStatus = delivery.getTransportStatus();
    assertNotNull(transportStatus);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetRoutingStatus_Jzrf0() throws Exception {
    RoutingStatus routingStatus = mock(RoutingStatus.class);
    Delivery delivery = new Delivery(handlingEvent, itinerary, routeSpecification);
    when(delivery.getRoutingStatus()).thenReturn(routingStatus);
    assertEquals(routingStatus, delivery.getRoutingStatus());
  }
}