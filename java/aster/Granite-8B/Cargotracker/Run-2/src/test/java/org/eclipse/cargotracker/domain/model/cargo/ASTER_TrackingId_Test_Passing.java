/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TrackingId_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetIdString_hWpr0() {
    TrackingId trackingId = new TrackingId("12345");
    String idString = trackingId.getIdString();
    assertEquals("12345", idString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_IpSF0() {
    TrackingId id1 = new TrackingId("123");
    assertTrue(id1.equals(id1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameValue_ZSgL1() {
    TrackingId id1 = new TrackingId("123");
    TrackingId id2 = new TrackingId("123");
    assertTrue(id1.equals(id2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentType_qSGB2() {
    TrackingId id1 = new TrackingId("123");
    String id2 = "123";
    assertFalse(id1.equals(id2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_sRjd3() {
    TrackingId id1 = new TrackingId("123");
    assertFalse(id1.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_nMYl0() {
    TrackingId trackingId = new TrackingId("12345");
    assertEquals("12345", trackingId.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithNull_hBiN0() {
    TrackingId trackingId = new TrackingId("123");
    boolean result = trackingId.sameValueAs(null);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithSameId_bxIt1() {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("123");
    boolean result = trackingId1.sameValueAs(trackingId2);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAsWithDifferentId_DbPU2() {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("456");
    boolean result = trackingId1.sameValueAs(trackingId2);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_gZEb0() {
    TrackingId trackingId1 = new TrackingId("123");
    TrackingId trackingId2 = new TrackingId("456");
    assert trackingId1.hashCode() != trackingId2.hashCode();
  }
}