/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.eclipse.cargotracker.domain.model.location.Location;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_Cargo_Test_Failing {
  private Cargo cargo;
  private Cargo otherCargo;
  private Itinerary itinerary;
  @Mock
  private RouteSpecification routeSpecification;
  @Mock
  private Delivery delivery;
  private TrackingId trackingId;
  private HandlingHistory handlingHistory;
  @Mock
  private HandlingEvent handlingEvent;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetTrackingId() throws Exception {
    trackingId = mock(TrackingId.class);
    cargo = new Cargo(trackingId, null);
    assertEquals(trackingId, cargo.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetDelivery() {
    when(cargo.getDelivery()).thenReturn(delivery);
    // Assert that the getDelivery method returns the mock object
    assertEquals(delivery, cargo.getDelivery());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetItinerary() {
    cargo = new Cargo();
    when(cargo.getItinerary()).thenReturn(itinerary);
    // Arrange
    // Act
    Itinerary result = cargo.getItinerary();
    // Assert
    assertEquals(itinerary, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNonNullItinerary_kUIB2_1() {
    Itinerary itinerary = cargo.getItinerary();
    assertNotNull(itinerary);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNonNullItinerary_kUIB2_2() {
    Itinerary itinerary = cargo.getItinerary();
    assertEquals(1, itinerary.getLegs().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetOrigin_uEwd0() {
    Location origin = mock(Location.class);
    Cargo cargo = new Cargo(null, new RouteSpecification(origin, null, null));
    when(origin.getName()).thenReturn("Test Location");
    assertEquals("Test Location", cargo.getOrigin().getName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignToRoute_ugYg0() {
    MockitoAnnotations.openMocks(this);
    when(itinerary.getLegs()).thenReturn(Collections.emptyList());
    when(routeSpecification.getDestination()).thenReturn(new Location(new UnLocode("NLRTM"), "Rotterdam"));
    when(delivery.updateOnRouting(any(), any())).thenReturn(delivery);
    cargo.assignToRoute(itinerary);
    verify(itinerary).getLegs();
    verify(routeSpecification).getDestination();
    verify(delivery).updateOnRouting(any(), any());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrigin_IWds0() {
    Location origin = mock(Location.class);
    Cargo cargo = new Cargo();
    when(origin.sameIdentityAs(any())).thenReturn(true);
    cargo.setOrigin(origin);
    verify(cargo).setOrigin(origin);
    verify(origin).sameIdentityAs(any());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNonNullItinerary_kUIB2() {
    Itinerary itinerary = cargo.getItinerary();
    assertNotNull(itinerary);
    assertEquals(1, itinerary.getLegs().size());
  }
}