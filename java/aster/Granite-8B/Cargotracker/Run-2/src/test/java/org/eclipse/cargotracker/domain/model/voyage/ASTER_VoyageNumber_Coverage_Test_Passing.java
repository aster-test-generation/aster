/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_VoyageNumber_Coverage_Test_Passing {
  {
  }

  {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithThis_NPpq0() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    assertTrue(voyageNumber.equals(voyageNumber));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_lOpl1() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    assertFalse(voyageNumber.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_YfNq2() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    assertFalse(voyageNumber.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObject_rynb3() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    VoyageNumber otherVoyageNumber = new VoyageNumber("789012");
    assertFalse(voyageNumber.equals(otherVoyageNumber));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameValue_xZbe4() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    VoyageNumber otherVoyageNumber = new VoyageNumber("123456");
    assertTrue(voyageNumber.equals(otherVoyageNumber));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentTypeAs_CuQf8() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    Object otherVoyageNumber = new Object();
    assertFalse(voyageNumber.equals(otherVoyageNumber));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameValue_xZbe4_DwOY0() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    VoyageNumber otherVoyageNumber = new VoyageNumber("123456");
    assertEquals(voyageNumber.hashCode(), otherVoyageNumber.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObject_rinyb3_BGCK0() {
    VoyageNumber voyageNumber = new VoyageNumber("123456");
    VoyageNumber otherVoyageNumber = new VoyageNumber("789012");
    assertNotEquals(voyageNumber.hashCode(), otherVoyageNumber.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSameValueAs_piSu0_IANr0() {
    VoyageNumber voyageNumber = new VoyageNumber("123");
    boolean result = voyageNumber.sameValueAs(voyageNumber);
    Assertions.assertTrue(result);
  }
}