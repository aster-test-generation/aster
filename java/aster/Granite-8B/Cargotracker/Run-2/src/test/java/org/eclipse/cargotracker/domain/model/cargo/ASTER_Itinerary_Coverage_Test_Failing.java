/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.cargo;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Itinerary_Coverage_Test_Failing {
  Itinerary itinerary = new Itinerary();

  public void testIsExpectedWhenLegsIsEmpty_ocML0() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsReceive_wRUo1() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsLoad_LCwl2() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsUnload_USzR3() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsClaim_dTON4() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsCustoms_NnPI5() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsReceiveAndLoadLocationMatches_UtrP6() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsLoadAndLoadLocationMatchesAndVoyageMatches_yfBg7() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsUnloadAndUnloadLocationMatchesAndVoyageMatches_uRhJ8() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsClaimAndUnloadLocationMatches_hMhb9() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsCustomsAndUnloadLocationMatches_qqpr10() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsReceiveAndLoadLocationMatchesAndVoyageMatches_CKDA11() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsLoadAndLoadLocationMatchesAndVoyageMatches_VCha12() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsUnloadAndUnloadLocationMatchesAndVoyageMatches_Aibb13() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsClaimAndUnloadLocationMatches_ZWWy14() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  public void testIsExpectedWhenEventTypeIsCustomsAndUnloadLocationMatches_efAv15() {
    Itinerary itinerary = new Itinerary();
    HandlingEvent event = new HandlingEvent();
    boolean result = itinerary.isExpected(event);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getFinalArrivalDate_with_null_legs_upCc0() {
    Itinerary itinerary = new Itinerary(null);
    LocalDateTime finalArrivalDate = itinerary.getFinalArrivalDate();
    assertEquals(LocalDateTime.MAX, finalArrivalDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void test_getFinalArrivalDate_with_empty_legs_nMKS1() {
    Itinerary itinerary = new Itinerary(new ArrayList<>());
    LocalDateTime finalArrivalDate = itinerary.getFinalArrivalDate();
    assertEquals(LocalDateTime.MAX, finalArrivalDate);
  }
}