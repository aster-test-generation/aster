/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.tracking.web;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.*;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.domain.model.voyage.Voyage;
import org.eclipse.cargotracker.domain.model.voyage.VoyageNumber;
import org.eclipse.cargotracker.interfaces.Coordinates;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CargoTrackingViewAdapter_Test_Passing {
  private Cargo cargo;
  private CargoTrackingViewAdapter cargoTrackingViewAdapter;
  @Mock
  private RouteSpecification routeSpecification;
  @Mock
  private HandlingEvent handlingEvent;
  @Mock
  private List<HandlingEvent> handlingEvents;
  @Mock
  private TrackingId trackingId;
  private Coordinates coordinates;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetTrackingId() {
    cargo = mock(Cargo.class);
    handlingEvents = new ArrayList<>();
    cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    String trackingId = "12345";
    TrackingId trackingIdMock = mock(TrackingId.class);
    when(cargo.getTrackingId()).thenReturn(trackingIdMock);
    when(trackingIdMock.getIdString()).thenReturn(trackingId);
    String result = cargoTrackingViewAdapter.getTrackingId();
    assertEquals(trackingId, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusText_whenOnBoardCarrier_returnsCorrectStatusText() {
    cargo = mock(Cargo.class);
    handlingEvents = mock(List.class);
    cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    Delivery delivery = mock(Delivery.class);
    Voyage voyage = mock(Voyage.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.ONBOARD_CARRIER);
    when(cargo.getDelivery().getCurrentVoyage()).thenReturn(voyage);
    when(voyage.getVoyageNumber()).thenReturn(mock(VoyageNumber.class));
    when(voyage.getVoyageNumber().getIdString()).thenReturn("123");
    String statusText = cargoTrackingViewAdapter.getStatusText();
    assertEquals("Onboard voyage 123", statusText);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusText_whenClaimed_returnsCorrectStatusText() {
    cargo = mock(Cargo.class);
    handlingEvents = mock(List.class);
    cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.CLAIMED);
    String statusText = cargoTrackingViewAdapter.getStatusText();
    assertEquals("Claimed", statusText);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusText_whenNotReceived_returnsCorrectStatusText() {
    cargo = mock(Cargo.class);
    handlingEvents = mock(List.class);
    cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.NOT_RECEIVED);
    String statusText = cargoTrackingViewAdapter.getStatusText();
    assertEquals("Not received", statusText);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetStatusText_whenUnknown_returnsCorrectStatusText() {
    cargo = mock(Cargo.class);
    handlingEvents = mock(List.class);
    cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    Delivery delivery = mock(Delivery.class);
    when(cargo.getDelivery()).thenReturn(delivery);
    when(delivery.getTransportStatus()).thenReturn(TransportStatus.UNKNOWN);
    String statusText = cargoTrackingViewAdapter.getStatusText();
    assertEquals("Unknown", statusText);
  }
}