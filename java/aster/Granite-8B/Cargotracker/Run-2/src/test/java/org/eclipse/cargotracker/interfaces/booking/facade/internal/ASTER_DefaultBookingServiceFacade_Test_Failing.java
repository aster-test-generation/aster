/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.facade.internal;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.CargoRoute;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.Leg;
import org.eclipse.cargotracker.interfaces.booking.facade.dto.RouteCandidate;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingServiceFacade_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListShippingLocations_hpqp0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> actual = facade.listShippingLocations();
    List<org.eclipse.cargotracker.interfaces.booking.facade.dto.Location> expected = new ArrayList<>();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_RsYM0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    RouteCandidate routeCandidateDTO = new RouteCandidate(new ArrayList<>());
    bookingServiceFacade.assignCargoToRoute("123", routeCandidateDTO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_Whma0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> actualRouteCandidates = bookingServiceFacade.requestPossibleRoutesForCargo("ABC123");
    assertEquals(1, actualRouteCandidates.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_kAsM0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    String trackingId = bookingServiceFacade.bookNewCargo("USCHI", "CNSHA", LocalDate.now().plusDays(14));
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithInvalidOrigin_wOcb1() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      bookingServiceFacade.bookNewCargo("USCHI", "CNSHA", LocalDate.now().plusDays(14));
      fail("Should have thrown an IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithInvalidDestination_Maso2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      bookingServiceFacade.bookNewCargo("USCHI", "CNSHA", LocalDate.now().plusDays(14));
      fail("Should have thrown an IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("CNSHA", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullDeadline_RaKe5() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      bookingServiceFacade.bookNewCargo("USCHI", "CNSHA", null);
      fail("Should have thrown an IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("deadline must not be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithDeadlineInPast_KwSB6() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      bookingServiceFacade.bookNewCargo("USCHI", "CNSHA", LocalDate.now().minusDays(1));
      fail("Should have thrown an IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithDeadlineTooFarInFuture_uWNo7() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      bookingServiceFacade.bookNewCargo("USCHI", "CNSHA", LocalDate.now().plusDays(30));
      fail("Should have thrown an IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithInvalidOriginAndDestination_xKYa9() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      bookingServiceFacade.bookNewCargo("USCHI", "CNSHA", LocalDate.now().plusDays(14));
      fail("Should have thrown an IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertEquals("Origin and destination must not be equal", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testListAllTrackingIds_kjsY0() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<String> expectedTrackingIds = new ArrayList<>();
    expectedTrackingIds.add("cargo1");
    expectedTrackingIds.add("cargo2");
    List<String> actualTrackingIds = bookingServiceFacade.listAllTrackingIds();
    assertLinesMatch(expectedTrackingIds, actualTrackingIds);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllCargos_WrXK0_1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<CargoRoute> routes = facade.listAllCargos();
    assertNotNull(routes);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllCargos_WrXK0_2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<CargoRoute> routes = facade.listAllCargos();
    assertFalse(routes.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline_BTaX0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    facade.changeDeadline("TRK123", LocalDate.now().plusDays(1));
    // Add assertion here
    // Example: assertEquals(expectedValue, actualValue);
}

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_1() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertNotNull(cargoRoute);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Destination Name", cargoRoute.getFinalDestinationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_3() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Destination", cargoRoute.getFinalDestination());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_4() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Tracking ID", cargoRoute.getTrackingId());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_5() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Destination Code", cargoRoute.getFinalDestinationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_6() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Origin Code", cargoRoute.getOriginCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_7() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Next Location", cargoRoute.getNextLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_8() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Origin Name", cargoRoute.getOriginName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_9() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Origin", cargoRoute.getOrigin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_10() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Arrival Deadline", cargoRoute.getArrivalDeadline());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_11() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Last Known Location Name", cargoRoute.getLastKnownLocationName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_12() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Last Known Location", cargoRoute.getLastKnownLocation());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_13() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Transport Status", cargoRoute.getTransportStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_14() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals(1, cargoRoute.getLegs().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0_15() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertEquals("Last Known Location Code", cargoRoute.getLastKnownLocationCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRequestPossibleRoutesForCargo_Whma0_fid2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    List<RouteCandidate> actualRouteCandidates = bookingServiceFacade.requestPossibleRoutesForCargo("ABC123");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullOrigin_JXGK3() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      bookingServiceFacade.bookNewCargo(null, "CNSHA", LocalDate.now().plusDays(14));
      fail("Should have thrown an IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullDestination_YrAl4() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      bookingServiceFacade.bookNewCargo("USCHI", null, LocalDate.now().plusDays(14));
      fail("Should have thrown an IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullDeadline_RaKe5_fid2() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      bookingServiceFacade.bookNewCargo("USCHI", "CNSHA", null);
      fail("Should have thrown an IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullOriginAndDestination_jvSI8() {
    DefaultBookingServiceFacade bookingServiceFacade = new DefaultBookingServiceFacade();
    try {
      bookingServiceFacade.bookNewCargo(null, null, LocalDate.now().plusDays(14));
      fail("Should have thrown an IllegalArgumentException");
    } catch (IllegalArgumentException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline_BTaX0_fid2() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    facade.changeDeadline("TRK123", LocalDate.now().plusDays(1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testListAllCargos_WrXK0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    List<CargoRoute> routes = facade.listAllCargos();
    assertNotNull(routes);
    assertFalse(routes.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoadCargoForRouting_ZHHi0() {
    DefaultBookingServiceFacade facade = new DefaultBookingServiceFacade();
    CargoRoute cargoRoute = facade.loadCargoForRouting("123456789");
    assertNotNull(cargoRoute);
    assertEquals("Destination Name", cargoRoute.getFinalDestinationName());
    assertEquals("Destination", cargoRoute.getFinalDestination());
    assertEquals("Tracking ID", cargoRoute.getTrackingId());
    assertEquals("Destination Code", cargoRoute.getFinalDestinationCode());
    assertEquals("Origin Code", cargoRoute.getOriginCode());
    assertEquals("Next Location", cargoRoute.getNextLocation());
    assertEquals("Origin Name", cargoRoute.getOriginName());
    assertEquals("Origin", cargoRoute.getOrigin());
    assertEquals("Arrival Deadline", cargoRoute.getArrivalDeadline());
    assertEquals("Last Known Location Name", cargoRoute.getLastKnownLocationName());
    assertEquals("Last Known Location", cargoRoute.getLastKnownLocation());
    assertEquals("Transport Status", cargoRoute.getTransportStatus());
    assertEquals(1, cargoRoute.getLegs().size());
    assertEquals("Last Known Location Code", cargoRoute.getLastKnownLocationCode());
  }
}