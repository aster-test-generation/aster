/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.handling;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HandlingHistory_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEmptyHandlingEvents_Svgl1() {
    HandlingHistory handlingHistory = new HandlingHistory(Collections.emptyList());
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    assertNull(mostRecentlyCompletedEvent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSingleHandlingEvent_bRyU2() {
    HandlingEvent handlingEvent = new HandlingEvent();
    HandlingHistory handlingHistory = new HandlingHistory(Collections.singletonList(handlingEvent));
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    assertEquals(handlingEvent, mostRecentlyCompletedEvent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testMultipleHandlingEvents_dhBa3() {
    HandlingEvent handlingEvent1 = new HandlingEvent();
    HandlingEvent handlingEvent2 = new HandlingEvent();
    HandlingHistory handlingHistory = new HandlingHistory(Arrays.asList(handlingEvent1, handlingEvent2));
    HandlingEvent mostRecentlyCompletedEvent = handlingHistory.getMostRecentlyCompletedEvent();
    assertEquals(handlingEvent2, mostRecentlyCompletedEvent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_Dnlm0() {
    HandlingHistory handlingHistory = new HandlingHistory(new ArrayList<>());
    int expectedHashCode = new ArrayList<>().hashCode();
    assertEquals(expectedHashCode, handlingHistory.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithHandlingEvents_uUPj3() {
    HandlingEvent handlingEvent1 = new HandlingEvent();
    HandlingEvent handlingEvent2 = new HandlingEvent();
    HandlingHistory handlingHistory = new HandlingHistory(Arrays.asList(handlingEvent1, handlingEvent2));
    int expectedHashCode = Arrays.asList(handlingEvent1, handlingEvent2).hashCode();
    assertEquals(expectedHashCode, handlingHistory.hashCode());
  }
}