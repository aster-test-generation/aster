/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.booking.sse;

import jakarta.inject.Inject;
import jakarta.ws.rs.sse.SseBroadcaster;
import jakarta.ws.rs.sse.SseEventSink;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.CargoRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_RealtimeCargoTrackingService_Test_Failing {
  private SseBroadcaster broadcaster;
  @Inject
  private Logger logger;
  RealtimeCargoTrackingService realtimecargotrackingservice;
  @Mock
  private CargoRepository cargoRepository;
  @Mock
  private SseEventSink eventSink;
  @InjectMocks
  private RealtimeCargoTrackingService realtimeCargoTrackingService;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTracking_eBkI0() {
    realtimeCargoTrackingService.tracking(eventSink);
    verify(cargoRepository, times(1)).findAll();
    verify(eventSink, times(1)).send(any());
    verify(broadcaster, times(1)).register(eventSink);
    verify(logger, times(1)).log(Level.FINEST, "SSE event sink registered.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnCargoUpdated_xkTw0() {
    RealtimeCargoTrackingService service = new RealtimeCargoTrackingService();
    Cargo cargo = new Cargo();
    service.onCargoUpdated(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testonCargoUpdated_mnWM0() throws Exception {
    RealtimeCargoTrackingService realtimecargotrackingservice = new RealtimeCargoTrackingService();
    SseBroadcaster broadcaster = mock(SseBroadcaster.class);
    Cargo cargo = mock(Cargo.class);
    realtimecargotrackingservice.onCargoUpdated(cargo);
    verify(broadcaster).broadcast(any());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void close_vmRT0()
  {
    broadcaster.close();
    logger.log(Level.FINEST, "SSE broadcaster closed.");
  }
}