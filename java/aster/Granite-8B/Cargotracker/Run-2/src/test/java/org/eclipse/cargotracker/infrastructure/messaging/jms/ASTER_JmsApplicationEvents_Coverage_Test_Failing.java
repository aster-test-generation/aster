/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.messaging.jms;

import jakarta.jms.JMSContext;
import java.util.Queue;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.verify;

public class Aster_JmsApplicationEvents_Coverage_Test_Failing {
  private Queue deliveredCargoQueue;
  private JmsApplicationEvents jmsApplicationEvents;
  private Cargo cargo;
  private Logger logger;
  private JMSContext jmsContext;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoggerLogWithCargoWasMisdirected_GUhA0() {
    JmsApplicationEvents jmsApplicationEvents = new JmsApplicationEvents();
    Cargo cargo = new Cargo();
    jmsApplicationEvents.cargoWasMisdirected(cargo);
    verify(logger).log(Level.INFO, "Cargo was misdirected {0}", cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testJmsContextCreateProducerWithCargoWasMisdirected_AqAW1() {
    JmsApplicationEvents jmsApplicationEvents = new JmsApplicationEvents();
    Cargo cargo = new Cargo();
    jmsApplicationEvents.cargoWasMisdirected(cargo);
    verify(jmsContext).createProducer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDisableMessageIDWithCargoWasMisdirected_qJJq3() {
    JmsApplicationEvents jmsApplicationEvents = new JmsApplicationEvents();
    Cargo cargo = new Cargo();
    jmsApplicationEvents.cargoWasMisdirected(cargo);
    verify(jmsContext.createProducer()).setDisableMessageID(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDisableMessageTimestampWithCargoWasMisdirected_BkhE4() {
    JmsApplicationEvents jmsApplicationEvents = new JmsApplicationEvents();
    Cargo cargo = new Cargo();
    jmsApplicationEvents.cargoWasMisdirected(cargo);
    verify(jmsContext.createProducer()).setDisableMessageTimestamp(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCloseWithCargoWasMisdirected_vHbB6() {
    JmsApplicationEvents jmsApplicationEvents = new JmsApplicationEvents();
    Cargo cargo = new Cargo();
    jmsApplicationEvents.cargoWasMisdirected(cargo);
    verify(jmsContext).close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCargoHasArrivedLoggerLog_QOfa2() {
    jmsApplicationEvents.cargoHasArrived(cargo);
    verify(logger).log(Level.INFO, "Cargo has arrived {0}", cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCargoHasArrivedJmsContextCreateProducer_ilBm3() {
    jmsApplicationEvents.cargoHasArrived(cargo);
    verify(jmsContext).createProducer();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCargoHasArrivedSetDisableMessageID_cSBe5() {
    jmsApplicationEvents.cargoHasArrived(cargo);
    verify(jmsContext).createProducer();
    verify(jmsContext.createProducer()).setDisableMessageID(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCargoHasArrivedSetDisableMessageTimestamp_mvYh6() {
    jmsApplicationEvents.cargoHasArrived(cargo);
    verify(jmsContext).createProducer();
    verify(jmsContext.createProducer()).setDisableMessageTimestamp(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCargoWasHandled_vQkU0() {
    JmsApplicationEvents jmsApplicationEvents = new JmsApplicationEvents();
    HandlingEvent event = new HandlingEvent();
    Cargo cargo = event.getCargo();
    jmsApplicationEvents.cargoWasHandled(event);
    assertEquals(cargo, event.getCargo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCargoWasHandled2_BHPP1() {
    JmsApplicationEvents jmsApplicationEvents = new JmsApplicationEvents();
    HandlingEvent event = new HandlingEvent();
    jmsApplicationEvents.cargoWasHandled(event);
    assertEquals(cargo, event.getCargo());
  }
}