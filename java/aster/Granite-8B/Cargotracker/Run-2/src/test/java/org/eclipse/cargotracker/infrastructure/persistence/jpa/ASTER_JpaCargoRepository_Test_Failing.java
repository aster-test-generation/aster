/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.infrastructure.persistence.jpa;

import jakarta.enterprise.event.Event;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.*;
import org.eclipse.cargotracker.infrastructure.events.cdi.CargoUpdated;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JpaCargoRepository_Test_Failing {
  @Inject
  @CargoUpdated
  private Event<Cargo> cargoUpdated;
  @PersistenceContext
  private EntityManager entityManager;
  private Cargo cargo;
  private Itinerary itinerary;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAll_WyVE0_1() {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    List<Cargo> actual = cargoRepository.findAll();
    assertNotNull(actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAll_WyVE0_2() {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    List<Cargo> actual = cargoRepository.findAll();
    assertTrue(actual.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStore_vVaM0() {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    Cargo cargo = new Cargo();
    cargoRepository.store(cargo);
    assertNotNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEquals_FNVj1() {
    Cargo cargo1 = new Cargo();
    Cargo cargo2 = new Cargo();
    assertEquals(cargo1, cargo2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSpecifyNewRoute_EevC2() {
    Cargo cargo = new Cargo();
    RouteSpecification routeSpecification = new RouteSpecification();
    cargo.specifyNewRoute(routeSpecification);
    assertEquals(cargo.getRouteSpecification(), routeSpecification);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_EvTW3() {
    Cargo cargo = new Cargo();
    String toString = cargo.toString();
    assertNotNull(toString);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTrackingId_OWJx4() {
    Cargo cargo = new Cargo();
    TrackingId trackingId = cargo.getTrackingId();
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRouteSpecification_KgUU5() {
    Cargo cargo = new Cargo();
    RouteSpecification routeSpecification = cargo.getRouteSpecification();
    assertNotNull(routeSpecification);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_dtgv6() {
    Cargo cargo1 = new Cargo();
    Cargo cargo2 = new Cargo();
    assertEquals(cargo1.hashCode(), cargo2.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDelivery_gNZw8() {
    Cargo cargo = new Cargo();
    Delivery delivery = cargo.getDelivery();
    assertNotNull(delivery);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignToRoute_MtLN10() {
    Cargo cargo = new Cargo();
    Itinerary itinerary = new Itinerary();
    cargo.assignToRoute(itinerary);
    assertEquals(cargo.getItinerary(), itinerary);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFind_PbSD0() {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    TrackingId trackingId = new TrackingId("1234567890");
    Cargo cargo = cargoRepository.find(trackingId);
    assertNotNull(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextTrackingId_tnzi0() {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    TrackingId trackingId = cargoRepository.nextTrackingId();
    String random = UUID.randomUUID().toString().toUpperCase();
    String expectedId = random.substring(0, random.indexOf("-"));
    assertEquals(expectedId, trackingId.getIdString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindAll_WyVE0() {
    JpaCargoRepository cargoRepository = new JpaCargoRepository();
    List<Cargo> actual = cargoRepository.findAll();
    assertNotNull(actual);
    assertTrue(actual.size() > 0);
  }
}