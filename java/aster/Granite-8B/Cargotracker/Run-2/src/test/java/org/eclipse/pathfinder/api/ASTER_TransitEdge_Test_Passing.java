/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TransitEdge_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetFromUnLocode_Sevj0() {
    TransitEdge transitEdge = new TransitEdge("voyageNumber", "fromUnLocode", "toUnLocode", LocalDateTime.now(), LocalDateTime.now());
    String fromUnLocode = transitEdge.getFromUnLocode();
    assertEquals("fromUnLocode", fromUnLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToUnLocode_yCxn0() {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setToUnLocode("TO_UNLOC");
    assertEquals("TO_UNLOC", transitEdge.getToUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVoyageNumber_Sdpj2() {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setVoyageNumber("VOYAGE_NUM");
    assertEquals("VOYAGE_NUM", transitEdge.getVoyageNumber());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocode_Kjbz3() {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setFromUnLocode("FROM_UNLOC");
    assertEquals("FROM_UNLOC", transitEdge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromDate_epKU4() {
    TransitEdge transitEdge = new TransitEdge();
    LocalDateTime fromDate = LocalDateTime.now();
    transitEdge.setFromDate(fromDate);
    assertEquals(fromDate, transitEdge.getFromDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetToDate_Uxat5() {
    TransitEdge transitEdge = new TransitEdge();
    LocalDateTime toDate = LocalDateTime.now();
    transitEdge.setToDate(toDate);
    assertEquals(toDate, transitEdge.getToDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  void testToString_aiqm0() {
    TransitEdge transitEdge = new TransitEdge("VOYAGE_NUMBER", "FROM_UNLOCODE", "TO_UNLOCODE", LocalDateTime.now(), LocalDateTime.now());
    String expected = "TransitEdge{voyageNumber=VOYAGE_NUMBER, fromUnLocode=FROM_UNLOCODE, toUnLocode=TO_UNLOCODE, fromDate=" + transitEdge.getFromDate() + ", toDate=" + transitEdge.getToDate() + "}";
    assertEquals(expected, transitEdge.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFromUnLocode_DSUB0() {
    TransitEdge transitEdge = new TransitEdge();
    transitEdge.setFromUnLocode("1234567890");
    assertEquals("1234567890", transitEdge.getFromUnLocode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetFromDate_FqMq0() {
    TransitEdge transitEdge = new TransitEdge("VOY123", "NLRTM", "USNYC", LocalDateTime.of(2022, 1, 1, 10, 0),
            LocalDateTime.of(2022, 1, 2, 12, 0));
    LocalDateTime expectedFromDate = LocalDateTime.of(2022, 1, 1, 10, 0);
    LocalDateTime actualFromDate = transitEdge.getFromDate();
    assertEquals(expectedFromDate, actualFromDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetToUnLocode_dDJY0() {
    TransitEdge transitEdge = new TransitEdge("VOYAGE_NUMBER", "FROM_UNLOCODE", "TO_UNLOCODE", LocalDateTime.now(), LocalDateTime.now());
    String actualToUnLocode = transitEdge.getToUnLocode();
    assertEquals("TO_UNLOCODE", actualToUnLocode);
  }
}