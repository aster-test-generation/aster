/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.application.ApplicationEvents;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.CargoRepository;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEventRepository;
import org.eclipse.cargotracker.domain.model.handling.HandlingHistory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DefaultCargoInspectionService_Coverage_Test_Passing {
  private DefaultCargoInspectionService cargoInspectionService;
  private CargoRepository cargoRepository;
  private HandlingEventRepository handlingEventRepository;
  private ApplicationEvents applicationEvents;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInspectCargoWhenCargoIsUnloadedAtDestination_tOWG5() {
    TrackingId trackingId = new TrackingId("ABC123");
    Cargo cargo = mock(Cargo.class);
    when(cargoRepository.find(trackingId)).thenReturn(cargo);
    HandlingHistory handlingHistory = mock(HandlingHistory.class);
    when(handlingEventRepository.lookupHandlingHistoryOfCargo(trackingId)).thenReturn(handlingHistory);
    when(cargo.getDelivery().isUnloadedAtDestination()).thenReturn(true);
    cargoInspectionService.inspectCargo(trackingId);
    verify(applicationEvents, times(1)).cargoHasArrived(cargo);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInspectCargoWhenCargoIsUnloadedButNotAtDestination_lxCJ6() {
    TrackingId trackingId = new TrackingId("ABC123");
    Cargo cargo = mock(Cargo.class);
    when(cargoRepository.find(trackingId)).thenReturn(cargo);
    HandlingHistory handlingHistory = mock(HandlingHistory.class);
    when(handlingEventRepository.lookupHandlingHistoryOfCargo(trackingId)).thenReturn(handlingHistory);
    when(cargo.getDelivery().isUnloadedAtDestination()).thenReturn(false);
    cargoInspectionService.inspectCargo(trackingId);
    verify(cargoRepository, times(1)).store(cargo);
  }
}