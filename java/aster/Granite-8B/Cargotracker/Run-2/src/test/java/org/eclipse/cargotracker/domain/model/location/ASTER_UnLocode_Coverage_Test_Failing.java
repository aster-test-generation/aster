/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.location;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_UnLocode_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithThis_ZGRC0() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    boolean actual = unLocode.equals(unLocode);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_jhaa1() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    boolean actual = unLocode.equals(null);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_ENlV2() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    boolean actual = unLocode.equals(new Object());
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObject_eVxg3() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    UnLocode other = new UnLocode("differentCountryAndLocation");
    boolean actual = unLocode.equals(other);
    boolean expected = false;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameValueAs_OKng4() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    UnLocode other = new UnLocode("countryAndLocation");
    boolean actual = unLocode.equals(other);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithThis_ZGRC0_VGMQ0() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    UnLocode thisObject = new UnLocode("countryAndLocation");
    boolean actual = unLocode.equals(thisObject);
    boolean expected = true;
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_ENlV2_ARfk0() {
    UnLocode unLocode = new UnLocode("countryAndLocation");
    Class actual = unLocode.getClass();
    Class expected = UnLocode.class;
    assertEquals(expected, actual);
  }
}