/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.interfaces.tracking.web;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.application.util.DateConverter;
import org.eclipse.cargotracker.domain.model.cargo.Cargo;
import org.eclipse.cargotracker.domain.model.cargo.RouteSpecification;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.handling.HandlingEvent;
import org.eclipse.cargotracker.interfaces.Coordinates;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_CargoTrackingViewAdapter_Test_Failing {
  private Cargo cargo;
  private CargoTrackingViewAdapter cargoTrackingViewAdapter;
  @Mock
  private RouteSpecification routeSpecification;
  @Mock
  private HandlingEvent handlingEvent;
  @Mock
  private List<HandlingEvent> handlingEvents;
  @Mock
  private TrackingId trackingId;
  private Coordinates coordinates;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getNextExpectedActivity_whenNoHandlingEvents_returnsEmptyText_DkKU0() {
    Cargo cargo = new Cargo();
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter adapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    String actual = adapter.getNextExpectedActivity();
    String expected = "";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsMisdirected() {
    cargo = mock(Cargo.class);
    handlingEvents = new ArrayList<>();
    cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    // Arrange
    when(cargo.getDelivery().isMisdirected()).thenReturn(true);
    // Act
    boolean isMisdirected = cargoTrackingViewAdapter.isMisdirected();
    // Assert
    assertTrue(isMisdirected);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStatusCode_whenCargoHasNoLegs_returnsNOT_ROUTED() {
    cargo = mock(Cargo.class);
    handlingEvents = mock(List.class);
    cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    when(cargo.getItinerary().getLegs()).thenReturn(Collections.emptyList());
    String statusCode = cargoTrackingViewAdapter.getStatusCode();
    assertEquals("NOT_ROUTED", statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStatusCode_whenCargoIsUnloadedAtDestination_returnsAT_DESTINATION() {
    cargo = mock(Cargo.class);
    handlingEvents = mock(List.class);
    cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    when(cargo.getDelivery().isUnloadedAtDestination()).thenReturn(true);
    String statusCode = cargoTrackingViewAdapter.getStatusCode();
    assertEquals("AT_DESTINATION", statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStatusCode_whenCargoIsMisdirected_returnsMISDIRECTED() {
    cargo = mock(Cargo.class);
    handlingEvents = mock(List.class);
    cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    when(cargo.getDelivery().isMisdirected()).thenReturn(true);
    String statusCode = cargoTrackingViewAdapter.getStatusCode();
    assertEquals("MISDIRECTED", statusCode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetEta_whenEstimatedTimeOfArrivalIsNull_returnsQuestionMark() {
    cargo = mock(Cargo.class);
    handlingEvents = new ArrayList<>();
    cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    when(cargo.getDelivery().getEstimatedTimeOfArrival()).thenReturn(null);
    String eta = cargoTrackingViewAdapter.getEta();
    assertEquals("?", eta);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetEta_whenEstimatedTimeOfArrivalIsNotNull_returnsFormattedString() {
    cargo = mock(Cargo.class);
    handlingEvents = new ArrayList<>();
    cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    LocalDateTime eta = LocalDateTime.now();
    when(cargo.getDelivery().getEstimatedTimeOfArrival()).thenReturn(eta);
    String formattedEta = DateConverter.toString(eta);
    String etaResult = cargoTrackingViewAdapter.getEta();
    assertEquals(formattedEta, etaResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEtaWithNullEstimatedTimeOfArrival_sAgL0() {
    Cargo cargo = new Cargo();
    List<HandlingEvent> handlingEvents = new ArrayList<>();
    CargoTrackingViewAdapter cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, handlingEvents);
    String eta = cargoTrackingViewAdapter.getEta();
    assertEquals("?", eta);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void getLastKnownLocationCode_cargoHasNoDelivery_returnsNull_PRii0() {
    Cargo cargo = new Cargo();
    CargoTrackingViewAdapter cargoTrackingViewAdapter = new CargoTrackingViewAdapter(cargo, new ArrayList<>());
    String lastKnownLocationCode = cargoTrackingViewAdapter.getLastKnownLocationCode();
    Assertions.assertNull(lastKnownLocationCode);
  }
}