/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.domain.model.voyage;

import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_Schedule_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_OkTG0() {
    Schedule schedule = new Schedule();
    boolean result = schedule.equals(null);
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_WDzO1() {
    Schedule schedule = new Schedule();
    boolean result = schedule.equals(new Object());
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_XWzr2() {
    Schedule schedule = new Schedule();
    boolean result = schedule.equals(schedule);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameValues_nVds3() {
    Schedule schedule1 = new Schedule();
    Schedule schedule2 = new Schedule();
    boolean result = schedule1.equals(schedule2);
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetCarrierMovements_lgKz0() {
    Schedule schedule = new Schedule();
    List<CarrierMovement> carrierMovements = schedule.getCarrierMovements();
    assertNotNull(carrierMovements);
    assertTrue(carrierMovements.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetCarrierMovements_lgKz0_1() {
    Schedule schedule = new Schedule();
    List<CarrierMovement> carrierMovements = schedule.getCarrierMovements();
    assertNotNull(carrierMovements);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testgetCarrierMovements_lgKz0_2() {
    Schedule schedule = new Schedule();
    List<CarrierMovement> carrierMovements = schedule.getCarrierMovements();
    assertTrue(carrierMovements.isEmpty());
  }
}