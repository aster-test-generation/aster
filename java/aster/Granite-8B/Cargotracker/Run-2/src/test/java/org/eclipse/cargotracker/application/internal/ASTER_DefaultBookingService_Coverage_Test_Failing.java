/**
 * Generated by Aster
 */
package org.eclipse.cargotracker.application.internal;

import java.time.LocalDate;
import java.util.concurrent.TimeUnit;
import org.eclipse.cargotracker.domain.model.cargo.Itinerary;
import org.eclipse.cargotracker.domain.model.cargo.TrackingId;
import org.eclipse.cargotracker.domain.model.location.UnLocode;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_DefaultBookingService_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAssignCargoToRoute_CUbN0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    Itinerary itinerary = new Itinerary();
    TrackingId trackingId = new TrackingId();
    bookingService.assignCargoToRoute(itinerary, trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline1_DIOG0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1");
    LocalDate newDeadline = LocalDate.now();
    bookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline2_GIfu1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("2");
    LocalDate newDeadline = LocalDate.now();
    bookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline3_bMsN2() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("3");
    LocalDate newDeadline = LocalDate.now();
    bookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline4_Ktyj3() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("4");
    LocalDate newDeadline = LocalDate.now();
    bookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline5_LSdv4() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("5");
    LocalDate newDeadline = LocalDate.now();
    bookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline6_htzC5() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("6");
    LocalDate newDeadline = LocalDate.now();
    bookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDeadline7_ppKm6() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("7");
    LocalDate newDeadline = LocalDate.now();
    bookingService.changeDeadline(trackingId, newDeadline);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination1_roBm0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("1");
    UnLocode unLocode = new UnLocode("US");
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination2_bOUd1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("2");
    UnLocode unLocode = new UnLocode("US");
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination3_ENHm2() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("3");
    UnLocode unLocode = new UnLocode("US");
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination4_tpFH3() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("4");
    UnLocode unLocode = new UnLocode("US");
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination5_WGGV4() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("5");
    UnLocode unLocode = new UnLocode("US");
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination6_CyOG5() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("6");
    UnLocode unLocode = new UnLocode("US");
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination7_kQxl6() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("7");
    UnLocode unLocode = new UnLocode("US");
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination8_KbUK7() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("8");
    UnLocode unLocode = new UnLocode("US");
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testChangeDestination9_BANp8() {
    DefaultBookingService bookingService = new DefaultBookingService();
    TrackingId trackingId = new TrackingId("9");
    UnLocode unLocode = new UnLocode("US");
    bookingService.changeDestination(trackingId, unLocode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargo_DHBV0() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("US");
    UnLocode destinationUnLocode = new UnLocode("CN");
    LocalDate arrivalDeadline = LocalDate.now().plusDays(10);
    TrackingId trackingId = bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
    assertNotNull(trackingId);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullOrigin_taRu1() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = null;
    UnLocode destinationUnLocode = new UnLocode("CN");
    LocalDate arrivalDeadline = LocalDate.now().plusDays(10);
    try {
      bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("origin"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullDestination_uHBp2() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("US");
    UnLocode destinationUnLocode = null;
    LocalDate arrivalDeadline = LocalDate.now().plusDays(10);
    try {
      bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("destination"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithNullDeadline_GbFv3() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("US");
    UnLocode destinationUnLocode = new UnLocode("CN");
    LocalDate arrivalDeadline = null;
    try {
      bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("deadline"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithInvalidOrigin_lgPQ4() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("XX");
    UnLocode destinationUnLocode = new UnLocode("CN");
    LocalDate arrivalDeadline = LocalDate.now().plusDays(10);
    try {
      bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("origin"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithInvalidDestination_euum5() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("US");
    UnLocode destinationUnLocode = new UnLocode("XX");
    LocalDate arrivalDeadline = LocalDate.now().plusDays(10);
    try {
      bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("destination"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBookNewCargoWithInvalidDeadline_bzCq6() {
    DefaultBookingService bookingService = new DefaultBookingService();
    UnLocode originUnLocode = new UnLocode("US");
    UnLocode destinationUnLocode = new UnLocode("CN");
    LocalDate arrivalDeadline = LocalDate.now().minusDays(1);
    try {
      bookingService.bookNewCargo(originUnLocode, destinationUnLocode, arrivalDeadline);
      fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("deadline"));
    }
  }
}