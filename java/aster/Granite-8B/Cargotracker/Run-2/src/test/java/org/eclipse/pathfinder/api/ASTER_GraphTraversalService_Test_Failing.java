/**
 * Generated by Aster
 */
package org.eclipse.pathfinder.api;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_GraphTraversalService_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath2_Yhgs1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    List<TransitPath> actualTransitPaths = graphTraversalService.findShortestPath("USCHI", "USNYC", "2019-01-01T00:00:00");
    List<TransitPath> expectedTransitPaths = new ArrayList<>();
    TransitPath transitPath1 = new TransitPath(Arrays.asList(new TransitEdge("V001", "USCHI", "USNYC", LocalDateTime.parse("2019-01-01T00:00:00"), LocalDateTime.parse("2019-01-02T00:00:00"))));
    expectedTransitPaths.add(transitPath1);
    TransitPath transitPath2 = new TransitPath(Arrays.asList(new TransitEdge("V002", "USCHI", "USNYC", LocalDateTime.parse("2019-01-01T00:00:00"), LocalDateTime.parse("2019-01-03T00:00:00"))));
    expectedTransitPaths.add(transitPath2);
    TransitPath transitPath3 = new TransitPath(Arrays.asList(new TransitEdge("V003", "USCHI", "USNYC", LocalDateTime.parse("2019-01-01T00:00:00"), LocalDateTime.parse("2019-01-04T00:00:00"))));
    expectedTransitPaths.add(transitPath3);
    TransitPath transitPath4 = new TransitPath(Arrays.asList(new TransitEdge("V004", "USCHI", "USNYC", LocalDateTime.parse("2019-01-01T00:00:00"), LocalDateTime.parse("2019-01-05T00:00:00"))));
    expectedTransitPaths.add(transitPath4);
    assertEquals(expectedTransitPaths, actualTransitPaths);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath2_kReI1() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "USCHI";
    String deadline = "2022-01-01T00:00:00";
    List<TransitPath> actualTransitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    List<TransitPath> expectedTransitPaths = new ArrayList<>();
    TransitPath transitPath1 = new TransitPath(Arrays.asList(new TransitEdge("VOY1", "USNYC", "USCHI", LocalDateTime.of(2022, 1, 1, 0, 0), LocalDateTime.of(2022, 1, 1, 1, 0))));
    expectedTransitPaths.add(transitPath1);
    assertEquals(expectedTransitPaths, actualTransitPaths);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFindShortestPath3_LFQM2_fid2() {
    GraphTraversalService graphTraversalService = new GraphTraversalService();
    String originUnLocode = "USNYC";
    String destinationUnLocode = "USCHI";
    String deadline = "2022-01-01T00:00:00";
    List<TransitPath> actualTransitPaths = graphTraversalService.findShortestPath(originUnLocode, destinationUnLocode, deadline);
    List<TransitPath> expectedTransitPaths = new ArrayList<>();
    TransitPath transitPath1 = new TransitPath(Arrays.asList(new TransitEdge("VOY1", "USNYC", "USCHI", LocalDateTime.of(2022, 1, 1, 0, 0), LocalDateTime.of(2022, 1, 1, 1, 0))));
    expectedTransitPaths.add(transitPath1);
    assertNotEquals(expectedTransitPaths, actualTransitPaths);
  }
}