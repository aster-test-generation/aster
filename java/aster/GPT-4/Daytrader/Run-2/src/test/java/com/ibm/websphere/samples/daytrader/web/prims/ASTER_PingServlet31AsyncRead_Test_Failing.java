/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet31AsyncRead_Test_Failing {
  PingServlet31AsyncRead pingServlet31AsyncRead;
  ServletConfig mockServletConfig;
  HttpServletResponse httpServletResponse;
  HttpServletRequest httpServletRequest;
  ServletInputStream servletInputStream;
  AsyncContext asyncContext;
  private static int hitCount;
  private static String initTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletInputStream = mock(ServletInputStream.class);
    asyncContext = mock(AsyncContext.class);
    pingServlet31AsyncRead = new PingServlet31AsyncRead();
    when(httpServletRequest.getInputStream()).thenReturn(servletInputStream);
    when(httpServletRequest.startAsync()).thenReturn(asyncContext);
    pingServlet31AsyncRead.doPost(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(httpServletRequest).startAsync();
    verify(httpServletRequest).getInputStream();
    verify(servletInputStream).setReadListener(any(ReadListener.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_PArm0() throws ServletException, IOException {
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockResponse = mock(HttpServletResponse.class);
    AsyncContext mockAsyncContext = mock(AsyncContext.class);
    ServletInputStream mockInputStream = mock(ServletInputStream.class);
    when(mockRequest.startAsync()).thenReturn(mockAsyncContext);
    when(mockRequest.getInputStream()).thenReturn(mockInputStream);
    PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
    servlet.doPost(mockRequest, mockResponse);
    verify(mockResponse).setContentType("text/html");
    verify(mockRequest).startAsync();
    verify(mockInputStream).setReadListener(any(ReadListener.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_DoXu0() {
    PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
    String result = servlet.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    pingServlet31AsyncRead = new PingServlet31AsyncRead();
    // Setup
    ServletOutputStream servletOutputStream = mock(ServletOutputStream.class);
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    // Execute
    pingServlet31AsyncRead.doGet(httpServletRequest, httpServletResponse);
    // Verify
    verify(httpServletResponse).getOutputStream();
    verifyNoMoreInteractions(httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetCallsDoPost_EZuZ0() throws ServletException, IOException {
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockResponse = mock(HttpServletResponse.class);
    PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
    servlet.doGet(mockRequest, mockResponse);
    verify(mockRequest, atLeastOnce()).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_DlnN0_1() throws ServletException {
    mockServletConfig = mock(ServletConfig.class);
    pingServlet31AsyncRead = new PingServlet31AsyncRead();
    pingServlet31AsyncRead.init(mockServletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_DlnN0_2() throws ServletException {
    mockServletConfig = mock(ServletConfig.class);
    pingServlet31AsyncRead = new PingServlet31AsyncRead();
    pingServlet31AsyncRead.init(mockServletConfig);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_DoXu0_fid2() {
    PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
    String result = servlet.getServletInfo();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_DlnN0_1_fid2() throws ServletException {
    mockServletConfig = mock(ServletConfig.class);
    try {
      pingServlet31AsyncRead = new PingServlet31AsyncRead();
    } catch (Throwable ex) {
      fail("Failed to create PingServlet31AsyncRead instance: " + ex.getMessage());
    }
    pingServlet31AsyncRead.init(mockServletConfig);
    assertNotNull(pingServlet31AsyncRead);
  }
}