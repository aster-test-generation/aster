/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJDBCWrite_Test_Failing {
  PingJDBCWrite pingJDBCWrite;
  ServletConfig mockServletConfig;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  HttpServletRequest request;
  HttpServletResponse response;
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingJDBCWrite = new PingJDBCWrite();
    pingJDBCWrite.doPost(httpServletRequest, httpServletResponse);
    // Verify if doGet is called inside doPost
    verify(httpServletRequest, atLeastOnce()).setAttribute(anyString(), any());
    verify(httpServletResponse, never()).sendError(anyInt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_rcGA0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
    pingJDBCWrite.doPost(request, response);
    verify(pingJDBCWrite).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_PrLO0() {
    PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
    String result = pingJDBCWrite.getServletInfo();
    assertEquals("Basic JDBC Write using a prepared statment makes use of TradeJDBC code.", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_TtmD0_1() throws ServletException {
    pingJDBCWrite = new PingJDBCWrite();
    mockServletConfig = mock(ServletConfig.class);
    pingJDBCWrite.init(mockServletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_TtmD0_2() throws ServletException {
    pingJDBCWrite = new PingJDBCWrite();
    mockServletConfig = mock(ServletConfig.class);
    pingJDBCWrite.init(mockServletConfig);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_PrLO0_fid2() {
    PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
    String result = pingJDBCWrite.getServletInfo();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_TtmD0_1_fid2() throws ServletException {
    try {
      pingJDBCWrite = new PingJDBCWrite();
    } catch (Throwable e) {
      fail("Initialization of PingJDBCWrite failed with error: " + e.getMessage());
    }
    mockServletConfig = mock(ServletConfig.class);
    pingJDBCWrite.init(mockServletConfig);
    assertNotNull(pingJDBCWrite);
  }
}