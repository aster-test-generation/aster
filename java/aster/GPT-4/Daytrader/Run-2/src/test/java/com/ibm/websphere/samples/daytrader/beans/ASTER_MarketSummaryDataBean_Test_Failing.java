/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.json.JsonObject;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenTSIA_EfoA0() {
    BigDecimal expectedOpenTSIA = new BigDecimal("1234.56");
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, expectedOpenTSIA, 0.0, null, null);
    BigDecimal actualOpenTSIA = marketSummaryDataBean.getOpenTSIA();
    assertEquals(expectedOpenTSIA, actualOpenTSIA);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentWithPositiveChange_AWSQ0() {
    BigDecimal TSIA = new BigDecimal("15000");
    BigDecimal openTSIA = new BigDecimal("14000");
    double volume = 1000000;
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(TSIA, openTSIA, volume, topGainers, topLosers);
    BigDecimal expectedGainPercent = new BigDecimal("7.14"); // Calculated manually or expected from business logic
    BigDecimal result = marketSummary.getGainPercent();
    assertEquals(expectedGainPercent, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentWithNoChange_DqGh1() {
    BigDecimal TSIA = new BigDecimal("15000");
    BigDecimal openTSIA = new BigDecimal("15000");
    double volume = 1000000;
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(TSIA, openTSIA, volume, topGainers, topLosers);
    BigDecimal expectedGainPercent = BigDecimal.ZERO; // Expecting no gain
    BigDecimal result = marketSummary.getGainPercent();
    assertEquals(expectedGainPercent, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDate_wzBj0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean();
    Date expectedDate = new Date(); // Assuming summaryDate is set to current date in the constructor
    assertEquals(expectedDate, marketSummary.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_JLSr0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean();
    marketSummary.print();
    assertTrue(true); // This assertion is trivial since print method does not return any value
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithEmptyGainersAndLosers_esqr0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("15000"), new BigDecimal("15050"), 5000000.0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Market Summary at:") && result.contains("TSIA:15000") && result.contains("openTSIA:15050") && result.contains("volume:5000000.0"));
    assertFalse(result.contains("Current Top Gainers:") || result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToJSON_EmptyGainersAndLosers_ntxa1() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
        new BigDecimal("10000"), new BigDecimal("9900"), 5000000.0, topGainers, topLosers
    );
    JsonObject result = marketSummary.toJSON();
    assertFalse(result.containsKey("gainer1_stock"));
    assertFalse(result.containsKey("loser1_stock"));
    assertEquals(new BigDecimal("10000"), result.getJsonNumber("tsia").bigDecimalValue());
    assertEquals(5000000.0, result.getJsonNumber("volume").doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithEmptyGainersAndLosers_esqr0_2() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("15000"), new BigDecimal("15050"), 5000000.0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertFalse(result.contains("Current Top Gainers:") || result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToJSON_EmptyGainersAndLosers_ntxa1_1() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
        new BigDecimal("10000"), new BigDecimal("9900"), 5000000.0, topGainers, topLosers
    );
    JsonObject result = marketSummary.toJSON();
    assertFalse(result.containsKey("gainer1_stock"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToJSON_EmptyGainersAndLosers_ntxa1_2() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
        new BigDecimal("10000"), new BigDecimal("9900"), 5000000.0, topGainers, topLosers
    );
    JsonObject result = marketSummary.toJSON();
    assertFalse(result.containsKey("loser1_stock"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToJSON_EmptyGainersAndLosers_ntxa1_3() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
        new BigDecimal("10000"), new BigDecimal("9900"), 5000000.0, topGainers, topLosers
    );
    JsonObject result = marketSummary.toJSON();
    assertEquals(new BigDecimal("10000"), result.getJsonNumber("tsia").bigDecimalValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToJSON_EmptyGainersAndLosers_ntxa1_4() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
        new BigDecimal("10000"), new BigDecimal("9900"), 5000000.0, topGainers, topLosers
    );
    JsonObject result = marketSummary.toJSON();
    assertEquals(5000000.0, result.getJsonNumber("volume").doubleValue(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDate_wzBj0_fid2() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean();
    Date expectedDate = new Date(); // Assuming summaryDate is set to current date in the constructor
    assertNull(expectedDate);
  }
}