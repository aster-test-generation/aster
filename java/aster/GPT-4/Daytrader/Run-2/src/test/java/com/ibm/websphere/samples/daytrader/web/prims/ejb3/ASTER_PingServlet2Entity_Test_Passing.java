/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import javax.persistence.EntityManager;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Entity_Test_Passing {
  PingServlet2Entity pingServlet2Entity;
  ServletConfig mockServletConfig;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  @Mock
  private EntityManager em;
  @Mock
  private HttpServletRequest request;
  @Mock
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_1() throws Exception {
    pingServlet2Entity = new PingServlet2Entity();
    mockServletConfig = mock(ServletConfig.class);
    // Call the method under test
    pingServlet2Entity.init(mockServletConfig);
    // Use reflection to access private static fields
    Field hitCountField = PingServlet2Entity.class.getDeclaredField("hitCount");
    hitCountField.setAccessible(true);
    int hitCount = (int) hitCountField.get(null);
    Field initTimeField = PingServlet2Entity.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    String initTime = (String) initTimeField.get(null);
    // Assertions
    assertEquals(0, hitCount, "Hit count should be reset to 0 after init.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_2() throws Exception {
    pingServlet2Entity = new PingServlet2Entity();
    mockServletConfig = mock(ServletConfig.class);
    // Call the method under test
    pingServlet2Entity.init(mockServletConfig);
    // Use reflection to access private static fields
    Field hitCountField = PingServlet2Entity.class.getDeclaredField("hitCount");
    hitCountField.setAccessible(true);
    int hitCount = (int) hitCountField.get(null);
    Field initTimeField = PingServlet2Entity.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    String initTime = (String) initTimeField.get(null);
    // Assertions
    assertNotNull(initTime, "Init time should be set after init.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingServlet2Entity = new PingServlet2Entity();
    // Call the method under test
    pingServlet2Entity.doPost(httpServletRequest, httpServletResponse);
    // Verify that doGet is called once with the same request and response objects
    verify(pingServlet2Entity, times(1)).doGet(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_GGVE0() {
    PingServlet2Entity servlet = new PingServlet2Entity();
    String expected = "web primitive, tests Servlet to Entity EJB path";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit() throws Exception {
    pingServlet2Entity = new PingServlet2Entity();
    mockServletConfig = mock(ServletConfig.class);
    // Call the method under test
    pingServlet2Entity.init(mockServletConfig);
    // Use reflection to access private static fields
    Field hitCountField = PingServlet2Entity.class.getDeclaredField("hitCount");
    hitCountField.setAccessible(true);
    int hitCount = (int) hitCountField.get(null);
    Field initTimeField = PingServlet2Entity.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    String initTime = (String) initTimeField.get(null);
    // Assertions
    assertEquals(0, hitCount, "Hit count should be reset to 0 after init.");
    assertNotNull(initTime, "Init time should be set after init.");
  }
}