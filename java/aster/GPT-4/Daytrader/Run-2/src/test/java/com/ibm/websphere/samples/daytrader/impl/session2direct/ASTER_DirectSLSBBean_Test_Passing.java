/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Passing {
  @InjectMocks
  private DirectSLSBBean directSLSBBean;
  @Mock
  private TradeDirect tradeDirect;
  private AccountDataBean account;
  private QuoteDataBean quote;
  private HoldingDataBean holding;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseThrowsException_Ubum0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    assertThrows(UnsupportedOperationException.class, () -> {
      directSLSBBean.pingTwoPhase(symbol);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_bMnz0() {
    DirectSLSBBean bean = new DirectSLSBBean();
    int result = bean.getImpl();
    assertEquals(TradeConfig.SESSION_TO_DIRECT, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingReturnsCorrectData_nWtl0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1; // Assuming 1 is a valid holding ID for testing
    HoldingDataBean expectedHoldingDataBean = HoldingDataBean.getRandomInstance();
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    when(mockTradeDirect.getHolding(holdingID)).thenReturn(expectedHoldingDataBean);
    directSLSBBean.tradeDirect = mockTradeDirect;
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    assertEquals(expectedHoldingDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsyncReturnsNull_piss0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    Future<OrderDataBean> result = null;
    try {
      result = bean.completeOrderAsync(orderID, twoPhase);
    } catch (NullPointerException e) {
      assertNull(result);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_VbqT0() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM123");
    holding = new HoldingDataBean(100, new BigDecimal("150.00"), new java.util.Date(), account, quote);
    when(tradeDirect.createOrder(any(AccountDataBean.class), any(QuoteDataBean.class), any(HoldingDataBean.class), anyString(), anyDouble()))
        .thenReturn(new OrderDataBean());
    String orderType = "BUY";
    double quantity = 50;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    verify(tradeDirect, times(1)).createOrder(account, quote, holding, orderType, quantity);
  }
}