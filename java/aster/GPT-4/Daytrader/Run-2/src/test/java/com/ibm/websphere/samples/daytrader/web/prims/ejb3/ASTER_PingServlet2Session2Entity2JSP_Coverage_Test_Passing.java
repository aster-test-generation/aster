/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServlet2Session2Entity2JSP_Coverage_Test_Passing {
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithException_IEfB1() throws ServletException {
        ServletConfig mockConfig = org.mockito.Mockito.mock(ServletConfig.class);
        org.mockito.Mockito.doThrow(new ServletException("Initialization failure")).when(mockConfig).getServletContext();
        PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
        servlet.init(mockConfig);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_jYbE0() {
        PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
        String expectedInfo = "web primitive, tests Servlet to Session to Entity EJB to JSP path";
        assertEquals(expectedInfo, servlet.getServletInfo());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostCallsDoGet_lMUb0() throws ServletException, IOException {
        PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
        verify(request, times(1)).setAttribute("doGetCalled", "true");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostExecutionCompletes_PQBg1() throws ServletException, IOException {
        PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
        verify(response).setStatus(HttpServletResponse.SC_OK);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithValidConfig_zrtQ0() throws ServletException {
        ServletConfig mockConfig = org.mockito.Mockito.mock(ServletConfig.class);
        PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
        servlet.init(mockConfig);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_InitializeSymbol_PLWT0() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletConfig servletConfig = mock(ServletConfig.class);
        ServletContext ctx = mock(ServletContext.class);
        when(servletConfig.getServletContext()).thenReturn(ctx);
        PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
        servlet.init(servletConfig);
        servlet.doGet(req, res);
        verify(req, atLeastOnce()).setAttribute(eq("quoteData"), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_GetServletContext_oASu2() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletConfig servletConfig = mock(ServletConfig.class);
        ServletContext ctx = mock(ServletContext.class);
        when(servletConfig.getServletContext()).thenReturn(ctx);
        PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
        servlet.init(servletConfig);
        servlet.doGet(req, res);
        verify(servletConfig, atLeastOnce()).getServletContext();
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_CatchExceptionNe_nNiQ8() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletConfig servletConfig = mock(ServletConfig.class);
        ServletContext ctx = mock(ServletContext.class);
        when(servletConfig.getServletContext()).thenReturn(ctx);
        when(ctx.getRequestDispatcher(anyString())).thenThrow(new RuntimeException("Test Exception"));
        PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
        servlet.init(servletConfig);
        try {
            servlet.doGet(req, res);
        } catch (Exception ignored) {
        }
        verify(res, never()).sendError(eq(500), anyString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_LogErrorNe_xfME9() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletConfig servletConfig = mock(ServletConfig.class);
        ServletContext ctx = mock(ServletContext.class);
        when(servletConfig.getServletContext()).thenReturn(ctx);
        when(ctx.getRequestDispatcher(anyString())).thenThrow(new RuntimeException("Test Exception"));
        PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
        servlet.init(servletConfig);
        try {
            servlet.doGet(req, res);
        } catch (Exception ignored) {
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_CatchExceptionE_VkXC11() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletConfig servletConfig = mock(ServletConfig.class);
        ServletContext ctx = mock(ServletContext.class);
        when(servletConfig.getServletContext()).thenReturn(ctx);
        when(ctx.getRequestDispatcher(anyString())).thenThrow(new RuntimeException("Test Exception"));
        PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
        servlet.init(servletConfig);
        try {
            servlet.doGet(req, res);
        } catch (Exception ignored) {
        }
        verify(res, atLeastOnce()).sendError(eq(500), anyString());
    }
}