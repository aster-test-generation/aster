/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
  @Mock
  private EntityManager entityManager;
  @InjectMocks
  private TradeSLSBBean tradeslsbbean;
  private AccountDataBean account;
  private QuoteDataBean quote;
  private HoldingDataBean holding;
  @InjectMocks
  private TradeSLSBBean tradeSLSBBean;
  @Mock
  private AccountProfileDataBean profile;
  @Mock
  private OrderDataBean order;
  @Mock
  private AccountProfileDataBean accountProfileDataBean;
  @Mock
  private AccountDataBean accountDataBean;
  @Mock
  private HoldingDataBean holdingDataBean;
  @Mock
  private QuoteDataBean quoteDataBean;
  @Mock
  private OrderDataBean orderDataBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithZeroSharesTraded_fTjv1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("GOOGL", "Google LLC", 0, new BigDecimal("2800.00"), new BigDecimal("2790.00"), new BigDecimal("2785.00"), new BigDecimal("2820.00"), 10.00);
    BigDecimal oldPrice = new BigDecimal("2750.00");
    BigDecimal changeFactor = new BigDecimal("1.02");
    double sharesTraded = 0;
    try {
      tradeBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
      fail("Expected an EJBException to be thrown");
    } catch (EJBException e) {
      assertEquals("Cannot invoke \"javax.jms.TopicConnectionFactory.createContext()\" because \"this.topicConnectionFactory\" is null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_reIb0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "newUser";
    String password = "password123";
    String fullname = "John Doe";
    String address = "1234 Street";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterExistingUser_LvPm1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "existingUser";
    String password = "password123";
    String fullname = "Jane Doe";
    String address = "5678 Avenue";
    String email = "janedoe@example.com";
    String creditcard = "6543210987654321";
    BigDecimal openBalance = new BigDecimal("2000.00");
    AccountProfileDataBean existingProfile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    entityManager.persist(existingProfile);
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAlreadyCompleted_SuZV2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = mock(OrderDataBean.class);
    when(order.getOrderStatus()).thenReturn("completed");
    try {
      tradeBean.completeOrder(order.getOrderID(), true);
      fail("Should have thrown an exception for already completed order");
    } catch (Exception e) {
      assertTrue(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderBuyOperation_mYdd3_1() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = mock(OrderDataBean.class);
    when(order.isBuy()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    double quantity = 50.0;
    BigDecimal price = new BigDecimal("100.0");
    tradeBean.completeOrder(order.getOrderID(), true);
    verify(order).setHolding(any(HoldingDataBean.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderBuyOperation_mYdd3_2() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = mock(OrderDataBean.class);
    when(order.isBuy()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    double quantity = 50.0;
    BigDecimal price = new BigDecimal("100.0");
    tradeBean.completeOrder(order.getOrderID(), true);
    verify(order).setOrderStatus("closed");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellOperationWithHolding_mtvE4_1() throws Exception {
    OrderDataBean order = mock(OrderDataBean.class);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    when(order.isSell()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    when(order.getHolding()).thenReturn(new HoldingDataBean());
    tradeBean.completeOrder(order.getOrderID(), true);
    verify(order).setHolding(null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellOperationWithHolding_mtvE4_2() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = mock(OrderDataBean.class);
    when(order.isSell()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    when(order.getHolding()).thenReturn(new HoldingDataBean());
    tradeBean.completeOrder(order.getOrderID(), true);
    verify(order).setOrderStatus("closed");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellOperationWithoutHolding_Ahfg5() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = mock(OrderDataBean.class);
    when(order.isSell()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    when(order.getHolding()).thenReturn(null);
    tradeBean.completeOrder(order.getOrderID(), true);
    verify(order).setOrderStatus("cancelled");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MaximumStockSplit_HrZI2_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    BigDecimal changeFactor = new BigDecimal("2.00"); // This should be overridden
    double sharesTraded = 3000.0;
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("HIGH", changeFactor, sharesTraded);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MaximumStockSplit_HrZI2_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    BigDecimal changeFactor = new BigDecimal("2.00"); // This should be overridden
    double sharesTraded = 3000.0;
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("HIGH", changeFactor, sharesTraded);
    assertEquals(TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER.multiply(TradeConfig.MAXIMUM_STOCK_PRICE).setScale(2, BigDecimal.ROUND_HALF_UP), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_UEIj0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_UEIj0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals("buy", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_UEIj0_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(new Double(quantity), new Double(result.getQuantity()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_DUde1_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user124";
    String symbol = "GOOG";
    double quantity = 30.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_DUde1_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user124";
    String symbol = "GOOG";
    double quantity = 30.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals("buy", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_DUde1_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user124";
    String symbol = "GOOG";
    double quantity = 30.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(new Double(quantity), new Double(result.getQuantity()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchTwoPhaseMode_AbfD2_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user125";
    String symbol = "MSFT";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchTwoPhaseMode_AbfD2_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user125";
    String symbol = "MSFT";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals("buy", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchTwoPhaseMode_AbfD2_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user125";
    String symbol = "MSFT";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(new Double(quantity), new Double(result.getQuantity()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynchMode_Uptq1_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynchMode_Uptq1_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchMode_wMkU2_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.ASYNCH;
    try {
      OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Unexpected exception: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchMode_wMkU2_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.ASYNCH;
    try {
      OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch2PhaseMode_uizi3_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    try {
      OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch2PhaseMode_uizi3_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithValidID_aaxz0_1() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    Integer validHoldingID = 1; // Assuming 1 is a valid ID for testing
    HoldingDataBean result = tradeSLSB.getHolding(validHoldingID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithValidID_aaxz0_2() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    Integer validHoldingID = 1; // Assuming 1 is a valid ID for testing
    HoldingDataBean result = tradeSLSB.getHolding(validHoldingID);
    assertNotNull(result);
    assertEquals(validHoldingID, result.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_JmCb0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    Future<OrderDataBean> result = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithValidUser_WXQf0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUser123";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    for (OrderDataBean order : result) {
    }
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithValidUser_WXQf0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUser123";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    for (OrderDataBean order : result) {
    }
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithValidUser_WXQf0_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUser123";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    for (OrderDataBean order : result) {
    }
    assertEquals("completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUser_eFjX1_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "nonExistentUser";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUser_eFjX1_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "nonExistentUser";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithValidData_Qcgz0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc.", 5000, new BigDecimal("150.00"), new BigDecimal("148.00"), new BigDecimal("147.00"), new BigDecimal("151.00"), 2.00);
    BigDecimal oldPrice = new BigDecimal("145.00");
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 3000;
    tradeBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithZeroSharesTraded_fTjv1_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("GOOGL", "Google LLC", 0, new BigDecimal("2800.00"), new BigDecimal("2790.00"), new BigDecimal("2785.00"), new BigDecimal("2820.00"), 10.00);
    BigDecimal oldPrice = new BigDecimal("2750.00");
    BigDecimal changeFactor = new BigDecimal("1.02");
    double sharesTraded = 0;
    tradeBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithNegativeChangeFactor_OfYo2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("MSFT", "Microsoft Corp.", 10000, new BigDecimal("300.00"), new BigDecimal("295.00"), new BigDecimal("290.00"), new BigDecimal("305.00"), -5.00);
    BigDecimal oldPrice = new BigDecimal("310.00");
    BigDecimal changeFactor = new BigDecimal("-0.03");
    double sharesTraded = 5000;
    tradeBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_gACI0_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean result = tradeSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_gACI0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean result = tradeSLSBBean.getMarketSummary();
    assertTrue(result instanceof MarketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_hBYt0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_hBYt0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_reIb0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "newUser";
    String password = "password123";
    String fullname = "John Doe";
    String address = "1234 Street";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, result.getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterExistingUser_LvPm1_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "existingUser";
    String password = "password123";
    String fullname = "Jane Doe";
    String address = "5678 Avenue";
    String email = "janedoe@example.com";
    String creditcard = "6543210987654321";
    BigDecimal openBalance = new BigDecimal("2000.00");
    AccountProfileDataBean existingProfile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    entityManager.persist(existingProfile);
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_ZyfA0_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_ZyfA0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithNullOrder_dUBg0_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Integer orderID = null;
    try {
      tradeBean.completeOrder(orderID, true);
      fail("Should have thrown an exception for null orderID");
    } catch (Exception e) {
      assertTrue(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithInvalidOrderID_bseZ1_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Integer orderID = -1; // Assuming -1 is an invalid ID
    try {
      tradeBean.completeOrder(orderID, true);
      fail("Should have thrown an exception for invalid orderID");
    } catch (Exception e) {
      assertTrue(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAlreadyCompleted_SuZV2_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = OrderDataBean.getRandomInstance();
    when(order.isCompleted()).thenReturn(true);
    try {
      tradeBean.completeOrder(order.getOrderID(), true);
      fail("Should have thrown an exception for already completed order");
    } catch (Exception e) {
      assertTrue(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderBuyOperation_mYdd3_1_fid1() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = OrderDataBean.getRandomInstance();
    when(order.isBuy()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    double quantity = 50.0;
    BigDecimal price = new BigDecimal("100.0");
    tradeBean.completeOrder(order.getOrderID(), true);
    assertNotNull(order.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderBuyOperation_mYdd3_2_fid1() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = OrderDataBean.getRandomInstance();
    when(order.isBuy()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    double quantity = 50.0;
    BigDecimal price = new BigDecimal("100.0");
    tradeBean.completeOrder(order.getOrderID(), true);
    assertEquals("closed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellOperationWithHolding_mtvE4_1_fid1() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = OrderDataBean.getRandomInstance();
    when(order.isSell()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    when(order.getHolding()).thenReturn(new HoldingDataBean());
    tradeBean.completeOrder(order.getOrderID(), true);
    assertNull(order.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellOperationWithHolding_mtvE4_2_fid1() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = OrderDataBean.getRandomInstance();
    when(order.isSell()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    when(order.getHolding()).thenReturn(new HoldingDataBean());
    tradeBean.completeOrder(order.getOrderID(), true);
    assertEquals("closed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellOperationWithoutHolding_Ahfg5_fid1() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = OrderDataBean.getRandomInstance();
    when(order.isSell()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    when(order.getHolding()).thenReturn(null);
    tradeBean.completeOrder(order.getOrderID(), true);
    assertEquals("cancelled", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NormalConditions_SxmL0_1_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1500.0;
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", changeFactor, sharesTraded);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NormalConditions_SxmL0_2_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1500.0;
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", changeFactor, sharesTraded);
    assertEquals(new BigDecimal("1.05").multiply(quote.getOpen()).setScale(2, BigDecimal.ROUND_HALF_UP), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStockRecovery_IADm1_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    BigDecimal changeFactor = new BigDecimal("1.00"); // This should be overridden
    double sharesTraded = 2000.0;
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("XYZ", changeFactor, sharesTraded);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStockRecovery_IADm1_2_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    BigDecimal changeFactor = new BigDecimal("1.00"); // This should be overridden
    double sharesTraded = 2000.0;
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("XYZ", changeFactor, sharesTraded);
    assertEquals(TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER.multiply(TradeConfig.PENNY_STOCK_PRICE).setScale(2, BigDecimal.ROUND_HALF_UP), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_BhDf0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Integer orderID = 1; // Assuming an order ID that exists
    boolean twoPhase = true;
    tradeBean.cancelOrder(orderID, twoPhase);
    OrderDataBean order = entityManager.find(OrderDataBean.class, orderID);
    assertTrue(order.isCancelled());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_ANJj0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = tradeSLSBBean.getQuote(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_ANJj0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = tradeSLSBBean.getQuote(symbol);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_tSnt0_1() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSB.createQuote(symbol, companyName, price);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_tSnt0_2() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSB.createQuote(symbol, companyName, price);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_tSnt0_3() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSB.createQuote(symbol, companyName, price);
    assertEquals(companyName, result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_tSnt0_4() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSB.createQuote(symbol, companyName, price);
    assertEquals(price, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithValidData_QLam0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    try {
      tradeSLSBBean.queueOrder(orderID, twoPhase);
      System.out.println("Order queued successfully");
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithNullOrderID_bLyX1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = null;
    boolean twoPhase = false;
    try {
      tradeSLSBBean.queueOrder(orderID, twoPhase);
      fail("Exception should have been thrown due to null orderID");
    } catch (EJBException e) {
      assertEquals("orderID cannot be null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_AcFA0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean expectedAccount = new AccountDataBean();
    profile.setUserID(userID);
    profile.setAccount(expectedAccount);
    EntityManager entityManager = mock(EntityManager.class);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_AcFA0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean expectedAccount = new AccountDataBean();
    profile.setUserID(userID);
    profile.setAccount(expectedAccount);
    EntityManager entityManager = mock(EntityManager.class);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertEquals(userID, result.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithValidUserID_JpEv0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    AccountProfileDataBean expected = AccountProfileDataBean.getRandomInstance();
    AccountProfileDataBean actual = tradeSLSBBean.getAccountProfileData(userID);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutSuccess_KsHN0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    EntityManager entityManager = mock(EntityManager.class);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    tradeSLSBBean.logout(userID);
    verify(account).logout();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullHolding_HlcG0_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 999; // Assuming 999 is a non-existent holding ID
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynchMode_Uptq1_2_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sell", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynchMode_Uptq1_3_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchMode_wMkU2_1_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchMode_wMkU2_2_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sell", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchMode_wMkU2_3_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch2PhaseMode_uizi3_2_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sell", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch2PhaseMode_uizi3_3_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithValidID_aaxz0_2_fid1() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    Integer validHoldingID = 1; // Assuming 1 is a valid ID for testing
    HoldingDataBean result = tradeSLSB.getHolding(validHoldingID);
    assertEquals(validHoldingID, result.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_wBsB0_rjJX0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc.", 100000, new BigDecimal("150.00"), new BigDecimal("145.00"), new BigDecimal("140.00"), new BigDecimal("155.00"), 5.00);
    HoldingDataBean holding = new HoldingDataBean(100, new BigDecimal("145.00"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 50;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_wBsB0_rjJX0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc.", 100000, new BigDecimal("150.00"), new BigDecimal("145.00"), new BigDecimal("140.00"), new BigDecimal("155.00"), 5.00);
    HoldingDataBean holding = new HoldingDataBean(100, new BigDecimal("145.00"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 50;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(orderType, result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_wBsB0_rjJX0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc.", 100000, new BigDecimal("150.00"), new BigDecimal("145.00"), new BigDecimal("140.00"), new BigDecimal("155.00"), 5.00);
    HoldingDataBean holding = new HoldingDataBean(100, new BigDecimal("145.00"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 50;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals("open", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_wBsB0_rjJX0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc.", 100000, new BigDecimal("150.00"), new BigDecimal("145.00"), new BigDecimal("140.00"), new BigDecimal("155.00"), 5.00);
    HoldingDataBean holding = new HoldingDataBean(100, new BigDecimal("145.00"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 50;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quantity, result.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_wBsB0_rjJX0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc.", 100000, new BigDecimal("150.00"), new BigDecimal("145.00"), new BigDecimal("140.00"), new BigDecimal("155.00"), 5.00);
    HoldingDataBean holding = new HoldingDataBean(100, new BigDecimal("145.00"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 50;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(account, result.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_wBsB0_rjJX0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc.", 100000, new BigDecimal("150.00"), new BigDecimal("145.00"), new BigDecimal("140.00"), new BigDecimal("155.00"), 5.00);
    HoldingDataBean holding = new HoldingDataBean(100, new BigDecimal("145.00"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 50;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quote, result.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_wBsB0_rjJX0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc.", 100000, new BigDecimal("150.00"), new BigDecimal("145.00"), new BigDecimal("140.00"), new BigDecimal("155.00"), 5.00);
    HoldingDataBean holding = new HoldingDataBean(100, new BigDecimal("145.00"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 50;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(holding, result.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_gACI0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean result = tradeSLSBBean.getMarketSummary();
    assertNotNull(result);
    assertTrue(result instanceof MarketSummaryDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_hBYt0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_reIb0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "newUser";
    String password = "password123";
    String fullname = "John Doe";
    String address = "1234 Street";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
    assertEquals(userID, result.getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_ZyfA0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderBuyOperation_mYdd3() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = OrderDataBean.getRandomInstance();
    when(order.isBuy()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    double quantity = 50.0;
    BigDecimal price = new BigDecimal("100.0");
    tradeBean.completeOrder(order.getOrderID(), true);
    assertNotNull(order.getHolding());
    assertEquals("closed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellOperationWithHolding_mtvE4() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = OrderDataBean.getRandomInstance();
    when(order.isSell()).thenReturn(true);
    when(order.isCompleted()).thenReturn(false);
    when(order.getHolding()).thenReturn(new HoldingDataBean());
    tradeBean.completeOrder(order.getOrderID(), true);
    assertNull(order.getHolding());
    assertEquals("closed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NormalConditions_SxmL0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1500.0;
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", changeFactor, sharesTraded);
    assertNotNull(quote);
    assertEquals(new BigDecimal("1.05").multiply(quote.getOpen()).setScale(2, BigDecimal.ROUND_HALF_UP), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStockRecovery_IADm1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    BigDecimal changeFactor = new BigDecimal("1.00"); // This should be overridden
    double sharesTraded = 2000.0;
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("XYZ", changeFactor, sharesTraded);
    assertNotNull(quote);
    assertEquals(TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER.multiply(TradeConfig.PENNY_STOCK_PRICE).setScale(2, BigDecimal.ROUND_HALF_UP), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MaximumStockSplit_HrZI2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    BigDecimal changeFactor = new BigDecimal("2.00"); // This should be overridden
    double sharesTraded = 3000.0;
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("HIGH", changeFactor, sharesTraded);
    assertNotNull(quote);
    assertEquals(TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER.multiply(TradeConfig.MAXIMUM_STOCK_PRICE).setScale(2, BigDecimal.ROUND_HALF_UP), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_ANJj0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = tradeSLSBBean.getQuote(symbol);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_tSnt0() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSB.createQuote(symbol, companyName, price);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertEquals(companyName, result.getCompanyName());
    assertEquals(price, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_AcFA0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean expectedAccount = new AccountDataBean();
    profile.setUserID(userID);
    profile.setAccount(expectedAccount);
    EntityManager entityManager = mock(EntityManager.class);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    AccountDataBean result = tradeSLSBBean.getAccountData(userID);
    assertNotNull(result);
    assertEquals(userID, result.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_UEIj0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals("buy", result.getOrderType());
    assertEquals(new Double(quantity), new Double(result.getQuantity()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_DUde1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user124";
    String symbol = "GOOG";
    double quantity = 30.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals("buy", result.getOrderType());
    assertEquals(new Double(quantity), new Double(result.getQuantity()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchTwoPhaseMode_AbfD2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user125";
    String symbol = "MSFT";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals("buy", result.getOrderType());
    assertEquals(new Double(quantity), new Double(result.getQuantity()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynchMode_Uptq1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("sell", result.getOrderType());
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchMode_wMkU2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("sell", result.getOrderType());
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch2PhaseMode_uizi3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("sell", result.getOrderType());
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellExceptionHandling_HFpQ4() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "invalidUser";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID but the user is invalid
    int orderProcessingMode = TradeConfig.SYNCH;
    Exception exception = assertThrows(EJBException.class, () -> {
      tradeBean.sell(userID, holdingID, orderProcessingMode);
    });
    assertTrue(exception.getMessage().contains("failed"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithValidUser_WXQf0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUser123";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
    for (OrderDataBean order : result) {
      assertEquals("completed", order.getOrderStatus());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUser_eFjX1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "nonExistentUser";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
    assertTrue(result.isEmpty());
  }
}