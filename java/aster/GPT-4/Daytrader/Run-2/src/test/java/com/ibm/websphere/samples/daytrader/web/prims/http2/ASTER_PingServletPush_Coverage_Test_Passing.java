/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.http2;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.PushBuilder;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServletPush_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCallsSuperInit_cpmv0() throws ServletException {
        ServletConfig config = mock(ServletConfig.class);
        PingServletPush servlet = spy(new PingServletPush());
        servlet.init(config);
        verify(servlet).init(config);
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCompletesWithoutException_sNqj3() throws ServletException {
        ServletConfig config = mock(ServletConfig.class);
        PingServletPush servlet = new PingServletPush();
        servlet.init(config);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithPushBuilderNotNull_URAO0() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        PushBuilder pushBuilder = mock(PushBuilder.class);
        when(req.newPushBuilder()).thenReturn(pushBuilder);
        PingServletPush servlet = new PingServletPush();
        servlet.doGet(req, resp);
        verify(pushBuilder).path("images/graph.gif");
        verify(pushBuilder).push();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithPushBuilderNull_hfaw1() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.newPushBuilder()).thenReturn(null);
        PingServletPush servlet = new PingServletPush();
        servlet.doGet(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetExceptionInPushBuilder_LSBc2() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        when(req.newPushBuilder()).thenThrow(new RuntimeException());
        PingServletPush servlet = new PingServletPush();
        servlet.doGet(req, resp);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWritesResponse_fNPB3() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        when(resp.getWriter()).thenReturn(writer);
        PingServletPush servlet = new PingServletPush();
        servlet.doGet(req, resp);
        verify(writer).write(anyString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetHitCountIncrement_wRvD4() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse resp = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        when(resp.getWriter()).thenReturn(writer);
        PingServletPush servlet = new PingServletPush();
        servlet.doGet(req, resp);
        servlet.doGet(req, resp);
    }
}