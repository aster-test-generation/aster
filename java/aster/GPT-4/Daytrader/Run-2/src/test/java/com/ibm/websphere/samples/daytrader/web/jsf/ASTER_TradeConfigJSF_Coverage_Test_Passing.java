/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeConfigJSF_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPopulateDatabaseReturnsDatabase_Anvo5() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.populateDatabase();
        assertEquals("database", result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPopulateDatabaseIntegration_bWUb6_1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.populateDatabase();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_PublishQuotePriceChange_RgBn4() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        TradeConfig.setPublishQuotePriceChange(true);
        tradeConfigJSF.updateConfig();
        assert(TradeConfig.getPublishQuotePriceChange() == true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_LongRunEnabled_WpPc8() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        TradeConfig.setLongRun(true);
        tradeConfigJSF.updateConfig();
        assert(TradeConfig.getLongRun() == true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_DisplayOrderAlerts_qylJ10() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        TradeConfig.setDisplayOrderAlerts(true);
        tradeConfigJSF.updateConfig();
        assert(TradeConfig.getDisplayOrderAlerts() == true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateConfig_PrintConfiguration_PNKl11() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        tradeConfigJSF.updateConfig();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_SetPrimIterations_RmCJ1_kTuQ0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPrimIterations(10);
    tradeConfigJSF.updateConfig();
    assert(TradeConfig.getPrimIterations() == 10);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_SetPublishQuotePriceChange_JhQn3_eyfg0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setPublishQuotePriceChange(true);
    tradeConfigJSF.updateConfig();
    assert(TradeConfig.getPublishQuotePriceChange() == true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_SetListQuotePriceChangeFrequency_QWfz5_ocey0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setListQuotePriceChangeFrequency(50);
    tradeConfigJSF.updateConfig();
    assert(TradeConfig.getListQuotePriceChangeFrequency() == 50);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_SetDisplayOrderAlerts_CRLG9_cwAj0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setDisplayOrderAlerts(true);
    tradeConfigJSF.updateConfig();
    assert(TradeConfig.getDisplayOrderAlerts() == true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_SetLongRun_piou7_lFPZ0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setLongRun(true);
    tradeConfigJSF.updateConfig();
    assert(TradeConfig.getLongRun() == true);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_MAX_USERS_xfUs17_iAav0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setMaxUsers(1000);
    tradeConfigJSF.updateConfig();
    assert(TradeConfig.getMAX_USERS() == 1000);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_MarketSummaryIntervalSet_wijn19_sRhF0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setMarketSummaryInterval(15);
    tradeConfigJSF.updateConfig();
    assert(TradeConfig.getMarketSummaryInterval() == 15);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testUpdateConfig_OrderProcessingMode_LcQG15_ZBFt0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setOrderProcessingMode("Mode1");
    tradeConfigJSF.setOrderProcessingModeList(new String[]{"Mode0", "Mode1", "Mode2"});
    tradeConfigJSF.updateConfig();
    assert(TradeConfig.getOrderProcessingMode() == 1);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testBuildDatabaseTables_TZfR11_dQXI0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.buildDatabaseTables();
    assertEquals("database", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPopulateDatabaseIntegration_bWUb6_2_fid1() {
        TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
        String result = tradeConfigJSF.populateDatabase();
        assertFalse(result.startsWith("TradeBuildDB: **** DayTrader Database Built - "));}
}