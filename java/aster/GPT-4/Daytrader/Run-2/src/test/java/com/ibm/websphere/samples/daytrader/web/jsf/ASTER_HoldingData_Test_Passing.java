/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_MHgf0() {
    HoldingData holdingData = new HoldingData();
    assertEquals(0.0, holdingData.getQuantity(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_nCWH0() {
    HoldingData holdingData = new HoldingData();
    String expected = null; // Assuming default value of quoteID is null if not set
    String actual = holdingData.getQuoteID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePrice_CjAh0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expectedPrice = new BigDecimal("100.00");
    holdingData.setPurchasePrice(expectedPrice);
    assertEquals(expectedPrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_bZpQ0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = new BigDecimal("100.00");
    holdingData.setBasis(expected);
    assertEquals(expected, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDate_pqcy0() {
    HoldingData holdingData = new HoldingData();
    Date expectedDate = new Date();
    holdingData.setPurchaseDate(expectedDate);
    assertEquals(expectedDate, holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingID_FjXC0() {
    HoldingData holdingData = new HoldingData();
    Integer expected = null; // Assuming default null since no setter or value assignment shown
    Integer actual = holdingData.getHoldingID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_xmBe0() {
    HoldingData hd = new HoldingData();
    Integer expectedID = 123;
    hd.setHoldingID(expectedID);
    assertEquals(expectedID, hd.getHoldingID());
  }
}