/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletBeanValSimple1_Test_Passing {
  private static int hitCount = 0;
  private PingServletBeanValSimple1 pingServletBeanValSimple1;
  @Mock
  private ServletConfig servletConfig;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  @InjectMocks
  private PingServletBeanValSimple1 pingServlet;
  @Mock
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;
  @Mock
  private ServletOutputStream outputStream;
  private static LocalDateTime initTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    pingServletBeanValSimple1 = new PingServletBeanValSimple1();
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    // Setup
    doNothing().when(httpServletResponse).sendRedirect(anyString());
    // Execute
    pingServletBeanValSimple1.doPost(httpServletRequest, httpServletResponse);
    // Verify
    verify(httpServletResponse, never()).sendError(anyInt());
    verify(httpServletRequest, atLeastOnce()).getParameter(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_zTJV0() {
    PingServletBeanValSimple1 servlet = new PingServletBeanValSimple1();
    String result = servlet.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws Exception {
    when(response.getOutputStream()).thenReturn(outputStream);
    pingServlet.doGet(request, response);
    verify(response).setContentType("text/html");
    verify(outputStream).println(anyString());
    verify(response, never()).sendError(anyInt(), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetHandlesException() throws Exception {
    when(response.getOutputStream()).thenReturn(outputStream);
    doThrow(new IOException()).when(outputStream).println(anyString());
    pingServlet.doGet(request, response);
    verify(response).sendError(500, "java.io.IOException");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void write(int b) throws IOException {
    outputStream.write(b);
  }
}