/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2ServletRcv_Test_Failing {
  @Mock
  private ServletConfig servletConfig;
  @InjectMocks
  private static String initTime = null;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_Zzzd0() throws ServletException, IOException {
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockResponse = mock(HttpServletResponse.class);
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    servlet.doPost(mockRequest, mockResponse);
    verify(servlet, times(1)).doGet(mockRequest, mockResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_pnle0_RhJf0() throws ServletException, NoSuchFieldException, IllegalAccessException {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    ServletConfig mockConfig = Mockito.mock(ServletConfig.class);
    servlet.init(mockConfig);
    Field initTimeField = PingServlet2ServletRcv.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    assertNotNull(initTimeField.get(servlet));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet_eiLd0() throws ServletException, IOException {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    PrintWriter printWriter = mock(PrintWriter.class);
    PingBean pingBean = mock(PingBean.class);
    when(httpservletrequest.getAttribute("ab")).thenReturn(pingBean);
    when(httpservletresponse.getWriter()).thenReturn(printWriter);
    when(pingBean.getMsg()).thenReturn("Sample Message");
    // Assuming the class is available in the classpath and properly imported
    PingServlet2ServletRcv pingservlet2servletrcv = new PingServlet2ServletRcv();
    pingservlet2servletrcv.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse, times(1)).getWriter();
    verify(printWriter).println("<html><head><title>Ping Servlet2Servlet</title></head>" +
        "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">PingServlet2Servlet:<BR></FONT><FONT size=\"+1\" color=\"#000066\">Init time: " +
        "undefined" + "</FONT><BR><BR><B>Message from Servlet: </B>" + "Sample Message" + "</body></html>");
  }
}