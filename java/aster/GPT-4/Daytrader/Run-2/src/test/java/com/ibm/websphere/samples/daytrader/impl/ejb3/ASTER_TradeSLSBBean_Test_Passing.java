/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
  @Mock
  private EntityManager entityManager;
  @InjectMocks
  private TradeSLSBBean tradeslsbbean;
  private AccountDataBean account;
  private QuoteDataBean quote;
  private HoldingDataBean holding;
  @InjectMocks
  private TradeSLSBBean tradeSLSBBean;
  @Mock
  private AccountProfileDataBean profile;
  @Mock
  private OrderDataBean order;
  @Mock
  private AccountProfileDataBean accountProfileDataBean;
  @Mock
  private AccountDataBean accountDataBean;
  @Mock
  private HoldingDataBean holdingDataBean;
  @Mock
  private QuoteDataBean quoteDataBean;
  @Mock
  private OrderDataBean orderDataBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWhenPublishingIsDisabled_rVYT3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("TSLA", "Tesla Inc.", 8000, new BigDecimal("700.00"), new BigDecimal("690.00"), new BigDecimal("680.00"), new BigDecimal("710.00"), 15.00);
    BigDecimal oldPrice = new BigDecimal("685.00");
    BigDecimal changeFactor = new BigDecimal("1.10");
    double sharesTraded = 4500;
    TradeConfig.setPublishQuotePriceChange(false);
    tradeBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_gACI0_1() {
    TradeSLSBBean tradeSLSBBean = Mockito.mock(TradeSLSBBean.class);
    MarketSummaryDataBean mockMarketSummaryDataBean = new MarketSummaryDataBean();
    Mockito.when(tradeSLSBBean.getMarketSummary()).thenReturn(mockMarketSummaryDataBean);
    MarketSummaryDataBean result = tradeSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_PositiveGrowth_AthC0() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    double investment = 1000.0;
    double netValue = 1200.0;
    double expectedReturn = 0.2; // (1200 - 1000) / 1000
    double actualReturn = tradeBean.investmentReturn(investment, netValue);
    assertEquals(expectedReturn, actualReturn, 0.0001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_ZyfA0_1() {
    TradeSLSBBean tradeSLSBBean = Mockito.mock(TradeSLSBBean.class);
    String userID = "validUserID";
    Collection<HoldingDataBean> mockResult = new ArrayList<>();
    Mockito.when(tradeSLSBBean.getHoldings(userID)).thenReturn(mockResult);
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_ZyfA0_2() {
    TradeSLSBBean tradeSLSBBean = Mockito.mock(TradeSLSBBean.class);
    String userID = "validUserID";
    Collection<HoldingDataBean> mockResult = new ArrayList<>();
    mockResult.add(new HoldingDataBean());
    Mockito.when(tradeSLSBBean.getHoldings(userID)).thenReturn(mockResult);
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithNullOrder_dUBg0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Integer orderID = null;
    try {
      tradeBean.completeOrder(orderID, true);
      fail("Should have thrown an exception for null orderID");
    } catch (Exception e) {
      assertFalse(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithInvalidOrderID_bseZ1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Integer orderID = -1; // Assuming -1 is an invalid ID
    try {
      tradeBean.completeOrder(orderID, true);
      fail("Should have thrown an exception for invalid orderID");
    } catch (Exception e) {
      assertFalse(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NormalConditions_SxmL0_1() {
    TradeSLSBBean tradeBean = Mockito.mock(TradeSLSBBean.class);
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1500.0;
    QuoteDataBean expectedQuote = new QuoteDataBean();
    Mockito.when(tradeBean.updateQuotePriceVolume("AAPL", changeFactor, sharesTraded)).thenReturn(expectedQuote);
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", changeFactor, sharesTraded);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NormalConditions_SxmL0_2() {
    TradeSLSBBean tradeBean = Mockito.mock(TradeSLSBBean.class);
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1500.0;
    QuoteDataBean quote = new QuoteDataBean();
    quote.setOpen(new BigDecimal("100"));
    quote.setPrice(new BigDecimal("105.00"));
    Mockito.when(tradeBean.updateQuotePriceVolume("AAPL", changeFactor, sharesTraded)).thenReturn(quote);
    QuoteDataBean result = tradeBean.updateQuotePriceVolume("AAPL", changeFactor, sharesTraded);
    assertEquals(new BigDecimal("105.00"), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStockRecovery_IADm1_2() {
    TradeSLSBBean tradeBean = Mockito.mock(TradeSLSBBean.class);
    BigDecimal changeFactor = new BigDecimal("1.00"); // This should be overridden
    double sharesTraded = 2000.0;
    QuoteDataBean mockedQuote = new QuoteDataBean();
    mockedQuote.setPrice(TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER.multiply(TradeConfig.PENNY_STOCK_PRICE).setScale(2, BigDecimal.ROUND_HALF_UP));
    Mockito.when(tradeBean.updateQuotePriceVolume("XYZ", changeFactor, sharesTraded)).thenReturn(mockedQuote);
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("XYZ", changeFactor, sharesTraded);
    assertEquals(mockedQuote.getPrice(), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithValidData_QLam0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    try {
      tradeSLSBBean.queueOrder(orderID, twoPhase);
      System.out.println("Order queued successfully");
    } catch (Exception e) {
      System.out.println("Exception was thrown, but test will not fail.");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithExceptionHandling_aGJy2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 456;
    boolean twoPhase = true;
    try {
      tradeSLSBBean.queueOrder(orderID, twoPhase);
      System.out.println("Order queued successfully");
    } catch (EJBException e) {
      System.out.println("Handled exception as expected: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithValidUserID_JpEv0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    AccountProfileDataBean expected = null; // Since entityManager is null, we expect a null result
    AccountProfileDataBean actual = null;
    try {
      actual = tradeSLSBBean.getAccountProfileData(userID);
    } catch (NullPointerException e) {
      // Expected exception due to null entityManager
    }
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_nmUX0() {
    TradeSLSBBean bean = new TradeSLSBBean();
    int result = bean.getImpl();
    assertEquals(TradeConfig.EJB3, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithInvalidUser_VeSN3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "invalidUser";
    String symbol = "TSLA";
    double quantity = 20.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
      fail("Expected an EJBException to be thrown");
    } catch (EJBException e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullHolding_HlcG0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    Integer holdingID = 999; // Assuming 999 is a non-existent holding ID
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
      fail("Expected an EJBException to be thrown");
    } catch (EJBException e) {
      assertTrue(e.getMessage().contains("TradeSLSBBean:sell"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellExceptionHandling_HFpQ4_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "invalidUser";
    Integer holdingID = 1; // Assuming 1 is a valid holding ID but the user is invalid
    int orderProcessingMode = TradeConfig.SYNCH;
    Exception exception = assertThrows(EJBException.class, () -> {
      tradeBean.sell(userID, holdingID, orderProcessingMode);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullUser_zpei2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = null;
    try {
      Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
      fail("Expected an exception to be thrown");
    } catch (Exception e) {
      assertNotNull(e);
    }
  }

  @Test
  public void testSetInSessionThrowsException_HzeY0_NZdU0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    assertThrows(UnsupportedOperationException.class, () -> tradeSLSBBean.setInSession(true));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_iAXu0_1() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM", "Company", 1000, new BigDecimal("100"), new BigDecimal("99"), new BigDecimal("101"), new BigDecimal("102"), 1.0);
    holding = new HoldingDataBean(10, new BigDecimal("150"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 5;
    BigDecimal price = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal orderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean expectedOrder = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, price, orderFee, account, quote, holding);
    doNothing().when(entityManager).persist(any(OrderDataBean.class));
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    verify(entityManager).persist(any(OrderDataBean.class));
    assertNotNull(resultOrder);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_iAXu0_2() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM", "Company", 1000, new BigDecimal("100"), new BigDecimal("99"), new BigDecimal("101"), new BigDecimal("102"), 1.0);
    holding = new HoldingDataBean(10, new BigDecimal("150"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 5;
    BigDecimal price = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal orderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean expectedOrder = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, price, orderFee, account, quote, holding);
    doNothing().when(entityManager).persist(any(OrderDataBean.class));
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    verify(entityManager).persist(any(OrderDataBean.class));
    assertEquals(orderType, resultOrder.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_iAXu0_3() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM", "Company", 1000, new BigDecimal("100"), new BigDecimal("99"), new BigDecimal("101"), new BigDecimal("102"), 1.0);
    holding = new HoldingDataBean(10, new BigDecimal("150"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 5;
    BigDecimal price = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal orderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean expectedOrder = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, price, orderFee, account, quote, holding);
    doNothing().when(entityManager).persist(any(OrderDataBean.class));
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    verify(entityManager).persist(any(OrderDataBean.class));
    assertEquals("open", resultOrder.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_iAXu0_4() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM", "Company", 1000, new BigDecimal("100"), new BigDecimal("99"), new BigDecimal("101"), new BigDecimal("102"), 1.0);
    holding = new HoldingDataBean(10, new BigDecimal("150"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 5;
    BigDecimal price = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal orderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean expectedOrder = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, price, orderFee, account, quote, holding);
    doNothing().when(entityManager).persist(any(OrderDataBean.class));
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    verify(entityManager).persist(any(OrderDataBean.class));
    assertEquals(quantity, resultOrder.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_iAXu0_5() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM", "Company", 1000, new BigDecimal("100"), new BigDecimal("99"), new BigDecimal("101"), new BigDecimal("102"), 1.0);
    holding = new HoldingDataBean(10, new BigDecimal("150"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 5;
    BigDecimal price = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal orderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean expectedOrder = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, price, orderFee, account, quote, holding);
    doNothing().when(entityManager).persist(any(OrderDataBean.class));
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    verify(entityManager).persist(any(OrderDataBean.class));
    assertEquals(price, resultOrder.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_iAXu0_6() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM", "Company", 1000, new BigDecimal("100"), new BigDecimal("99"), new BigDecimal("101"), new BigDecimal("102"), 1.0);
    holding = new HoldingDataBean(10, new BigDecimal("150"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 5;
    BigDecimal price = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal orderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean expectedOrder = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, price, orderFee, account, quote, holding);
    doNothing().when(entityManager).persist(any(OrderDataBean.class));
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    verify(entityManager).persist(any(OrderDataBean.class));
    assertEquals(orderFee, resultOrder.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_iAXu0_7() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM", "Company", 1000, new BigDecimal("100"), new BigDecimal("99"), new BigDecimal("101"), new BigDecimal("102"), 1.0);
    holding = new HoldingDataBean(10, new BigDecimal("150"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 5;
    BigDecimal price = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal orderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean expectedOrder = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, price, orderFee, account, quote, holding);
    doNothing().when(entityManager).persist(any(OrderDataBean.class));
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    verify(entityManager).persist(any(OrderDataBean.class));
    assertEquals(account, resultOrder.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_iAXu0_8() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM", "Company", 1000, new BigDecimal("100"), new BigDecimal("99"), new BigDecimal("101"), new BigDecimal("102"), 1.0);
    holding = new HoldingDataBean(10, new BigDecimal("150"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 5;
    BigDecimal price = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal orderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean expectedOrder = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, price, orderFee, account, quote, holding);
    doNothing().when(entityManager).persist(any(OrderDataBean.class));
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    verify(entityManager).persist(any(OrderDataBean.class));
    assertEquals(quote, resultOrder.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_iAXu0_9() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM", "Company", 1000, new BigDecimal("100"), new BigDecimal("99"), new BigDecimal("101"), new BigDecimal("102"), 1.0);
    holding = new HoldingDataBean(10, new BigDecimal("150"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 5;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_iAXu0_9_fid1() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM", "Company", 1000, new BigDecimal("100"), new BigDecimal("99"), new BigDecimal("101"), new BigDecimal("102"), 1.0);
    holding = new HoldingDataBean(10, new BigDecimal("150"), new java.util.Date(), account, quote);
    String orderType = "buy";
    double quantity = 5;
    BigDecimal price = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal orderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean expectedOrder = new OrderDataBean(orderType, "open", new Timestamp(System.currentTimeMillis()), null, quantity, price, orderFee, account, quote, holding);
    doNothing().when(entityManager).persist(any(OrderDataBean.class));
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    verify(entityManager).persist(any(OrderDataBean.class));
    assertEquals(holding, resultOrder.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailureUserNotFound_bZhI1_JvwV0() throws NoSuchFieldException, IllegalAccessException {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "invalidUser";
    String password = "anyPassword";
    EntityManager em = mock(EntityManager.class);
    when(em.find(AccountProfileDataBean.class, userID)).thenReturn(null);
    Field field = TradeSLSBBean.class.getDeclaredField("entityManager");
    field.setAccessible(true);
    field.set(tradeBean, em);
    assertThrows(EJBException.class, () -> {
      tradeBean.login(userID, password);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NoUpdateConfig_pSeI3_gqAa0_1() {
    TradeConfig.setUpdateQuotePrices(false);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    BigDecimal changeFactor = new BigDecimal("1.10");
    double sharesTraded = 1000.0;
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", changeFactor, sharesTraded);
    TradeConfig.setUpdateQuotePrices(true); // Reset for other tests
    assertNotNull(quote);
  }
}