/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletSetContentLength_Test_Failing {
  PingServletSetContentLength pingServletSetContentLength;
  @Mock
  ServletConfig mockServletConfig;
  HttpServletResponse httpServletResponse;
  HttpServletRequest httpServletRequest;
  ServletOutputStream servletOutputStream;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit() throws Exception {
    pingServletSetContentLength = new PingServletSetContentLength() {
      public void init(ServletConfig config) throws ServletException {
        super.init(config);
      }
    };
    pingServletSetContentLength.init(mockServletConfig);
    verify(mockServletConfig, times(1)).getServletContext();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    pingServletSetContentLength = new PingServletSetContentLength();
    // Setup
    PingServletSetContentLength spyServlet = spy(pingServletSetContentLength);
    // Execute
    spyServlet.doPost(httpServletRequest, httpServletResponse);
    // Verify
    verify(spyServlet, times(1)).doGet(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_cIaV0() {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    String expectedInfo = "Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.";
    // Assuming getServletInfo method is correctly implemented in PingServletSetContentLength class
    assertEquals(expectedInfo, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullContentLength() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingServletSetContentLength = new PingServletSetContentLength();
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    when(httpServletRequest.getParameter("contentLength")).thenReturn(null);
    pingServletSetContentLength.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(servletOutputStream).println(anyString());
    verify(httpServletResponse, never()).sendError(anyInt(), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithValidContentLength() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingServletSetContentLength = new PingServletSetContentLength();
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    when(httpServletRequest.getParameter("contentLength")).thenReturn("10");
    pingServletSetContentLength.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(servletOutputStream).println(contains("aaaaaaaaaa"));
    verify(httpServletResponse, never()).sendError(anyInt(), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNumberFormatException() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingServletSetContentLength = new PingServletSetContentLength();
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    when(httpServletRequest.getParameter("contentLength")).thenReturn("invalid");
    pingServletSetContentLength.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).sendError(500, "java.lang.NumberFormatException: For input string: \"invalid\"");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithValidContentLength_TxuJ1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(req.getParameter("contentLength")).thenReturn("300");
    when(res.getOutputStream()).thenReturn(outputStream);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(outputStream).println("<html><head><title>Ping Servlet</title></head><body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet<BR></FONT><FONT size=\"+1\" color=\"#000066>" + "a".repeat(133) + "</FONT></body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidContentLength_qkcX2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream mockStream = mock(ServletOutputStream.class);
    when(req.getParameter("contentLength")).thenReturn("invalid");
    when(res.getOutputStream()).thenReturn(mockStream);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doGet(req, res);
    verify(res).sendError(500, "java.lang.NumberFormatException: For input string: \"invalid\"");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_EQjy0_Lqgw0() throws ServletException {
    ServletConfig mockConfig = org.mockito.Mockito.mock(ServletConfig.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.init(mockConfig);
    Assertions.assertNotNull(mockConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_FoMu0_hNyF0() throws ServletException, IOException {
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockResponse = mock(HttpServletResponse.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doGet(mockRequest, mockResponse);
    verify(mockResponse).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_cIaV0_fid1() {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    String expectedInfo = "Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.";
    assertEquals(expectedInfo, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullContentLength_ySas0() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(req.getParameter("contentLength")).thenReturn(null);
    when(res.getOutputStream()).thenReturn(outputStream);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(outputStream).println("<html><head><title>Ping Servlet</title></head><body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet<BR></FONT><FONT size=\"+1\" color=\"#000066\"></B></body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithValidContentLength_TxuJ1_fid1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(req.getParameter("contentLength")).thenReturn("300");
    when(res.getOutputStream()).thenReturn(outputStream);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(outputStream).println("<html><head><title>Ping Servlet</title></head><body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet<BR></FONT><FONT size=\"+1\" color=\"#000066>" + "a".repeat(133) + "</B></body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidContentLength_qkcX2_fid1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("contentLength")).thenReturn("invalid");
    when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doGet(req, res);
    verify(res).sendError(500, "java.lang.NumberFormatException: For input string: \"invalid\"");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_EQjy0_Lqgw0_fid1() throws ServletException {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    ServletConfig mockConfig = org.mockito.Mockito.mock(ServletConfig.class);
    servlet.init(mockConfig);
    Assertions.assertNotNull(servlet);
  }
}