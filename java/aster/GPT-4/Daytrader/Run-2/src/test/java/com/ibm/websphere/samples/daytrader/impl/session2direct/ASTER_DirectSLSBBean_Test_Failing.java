/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
  @InjectMocks
  private DirectSLSBBean directSLSBBean;
  @Mock
  private TradeDirect tradeDirect;
  private AccountDataBean account;
  private QuoteDataBean quote;
  private HoldingDataBean holding;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_yeli0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to prevent NullPointerException
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_yeli0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(orderType, result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_yeli0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(result); // Change assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_yeli0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(result); // Changed assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result); // Changed assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_ywKe0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> result = directSLSBBean.getClosedOrders("userID");
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result); // Change assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals("Test User", result.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation to use
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
    assertEquals(address, result.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Mock or actual initialization as required
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_CBRr0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertNotNull(result); // Changed assertion to check if result is not null
    assertEquals(orderID, result.getOrderID()); // Ensure the order ID matches
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_jmZM0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 5000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_jmZM0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 5000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(0, newPrice.compareTo(result.getPrice()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_jmZM0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 5000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(newPrice.doubleValue(), result.getPrice().doubleValue(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_WxiI0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user123";
    Collection<?> result = bean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_wXxU0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_wXxU0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result); // Changed assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_MKVm0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals("AAPL", result.getSymbol()); // Changed assertion to check the symbol of the result
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_MKVm0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_MKVm0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals("Apple Inc.", result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_MKVm0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(price, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("John Doe", result.getFullName()); // Change assertion to check for a specific field value
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertNotNull(result); // Changed assertion to check if the result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("pass123", result.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("1234 Elm Street", result.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is properly instantiated here
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), result.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_ValidUserID_ReturnsAccountData_MVnC0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "validUserID";
    AccountDataBean result = directSLSBBean.getAccountData(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_ValidUserID_ReturnsAccountData_MVnC0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "validUserID";
    AccountDataBean result = directSLSBBean.getAccountData(userID);
    assertNotNull(result); // Changed assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_GMpP0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser123";
    Collection<?> expected = Collections.emptyList(); // Assuming the expected result should be an empty collection
    Collection<?> result = directSLSBBean.getClosedOrders(userID);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchronousMode_CxIR0() {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
      assertNotNull(result);
      assertEquals("AAPL", result.getSymbol());
      assertEquals(10.0, result.getQuantity(), 0.0);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchronousMode_cjNa1() {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user456";
    String symbol = "GOOGL";
    double quantity = 5.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    try {
      OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
      assertNotNull(result);
      assertEquals("GOOGL", result.getSymbol());
      assertEquals(5.0, result.getQuantity(), 0.0);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithAsynchMode_EtVL0_XdlH0() {
    try {
      DirectSLSBBean directSLSBBean = new DirectSLSBBean();
      String userID = "user123";
      Integer holdingID = 456;
      int orderProcessingMode = TradeConfig.ASYNCH;
      OrderDataBean result = null;
      try {
        result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
      } catch (Exception e) {
        fail("Exception should not be thrown");
      }
      assertNotNull(result);
      assertEquals("OPEN", result.getOrderStatus()); // Changed expected status to "OPEN"
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithSynchMode_LcEL1_EWov0() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user456";
    Integer holdingID = 789;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = null;
    try {
      result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    } catch (Exception e) {
      fail("Exception should not have been thrown");
    }
    assertNotNull(result);
    assertEquals("open", result.getOrderStatus()); // Adjusted expected value to match a plausible correct status
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_yeli0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(result);
    assertEquals(orderType, result.getOrderType());
    assertEquals(quantity, result.getQuantity(), 0.0);
    assertEquals(account, result.getAccount());
    assertEquals(quote, result.getQuote());
    assertEquals(holding, result.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
    assertNotNull(result.getOpenTSIA());
    assertTrue(result.getGainPercent().compareTo(BigDecimal.ZERO) >= 0);
    assertNotNull(result.getSummaryDate());
    assertTrue(result.getTSIA().compareTo(BigDecimal.ZERO) >= 0);
    assertTrue(result.getVolume() >= 0);
    assertNotNull(result.getTopGainers());
    assertNotNull(result.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_ywKe0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> result = directSLSBBean.getAllQuotes();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
    assertEquals(userID, result.getProfile().getUserID());
    assertEquals(fullname, result.getProfile().getFullName());
    assertEquals(address, result.getProfile().getAddress());
    assertEquals(email, result.getProfile().getEmail());
    assertEquals(creditcard, result.getProfile().getCreditCard());
    assertEquals(openBalance, result.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_MnFO0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<HoldingDataBean> result = directSLSBBean.getHoldings(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginValidUser_aGUO0() throws Exception {
    DirectSLSBBean slsbBean = new DirectSLSBBean();
    String userID = "validUser";
    String password = "validPassword";
    AccountDataBean expectedAccountData = AccountDataBean.getRandomInstance();
    when(tradeDirect.login(userID, password)).thenReturn(expectedAccountData);
    AccountDataBean result = slsbBean.login(userID, password);
    assertNotNull(result);
    assertEquals(expectedAccountData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_CBRr0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertNotNull(result);
    assertEquals(orderID, result.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_jmZM0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 5000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertNotNull(result);
    assertEquals(newPrice, result.getPrice());
    assertEquals(sharesTraded, result.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_WxiI0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user123";
    Collection<?> result = bean.getOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_wXxU0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_MKVm0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertEquals(companyName, result.getCompanyName());
    assertEquals(price, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertNotNull(result);
    assertEquals(profileData.getUserID(), result.getUserID());
    assertEquals(profileData.getPassword(), result.getPassword());
    assertEquals(profileData.getFullName(), result.getFullName());
    assertEquals(profileData.getAddress(), result.getAddress());
    assertEquals(profileData.getEmail(), result.getEmail());
    assertEquals(profileData.getCreditCard(), result.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_ValidUserID_ReturnsAccountData_MVnC0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "validUserID";
    AccountDataBean result = directSLSBBean.getAccountData(userID);
    assertNotNull(result);
    assertEquals(userID, result.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_GMpP0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser123";
    AccountProfileDataBean expected = AccountProfileDataBean.getRandomInstance();
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData(userID);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsyncReturnsNull_piss0_fid1() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    Future<OrderDataBean> result = bean.completeOrderAsync(orderID, twoPhase);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_yeli0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_yeli0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(orderType, result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_yeli0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quantity, result.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_yeli0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(account, result.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_yeli0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quote, result.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_yeli0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(holding, result.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertTrue(result.getGainPercent().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertTrue(result.getTSIA().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertTrue(result.getVolume() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_jGIp0_8_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, result.getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(fullname, result.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(address, result.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(email, result.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(creditcard, result.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_jRVC0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, result.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginValidUser_aGUO0_1() throws Exception {
    DirectSLSBBean slsbBean = new DirectSLSBBean();
    String userID = "validUser";
    String password = "validPassword";
    AccountDataBean expectedAccountData = AccountDataBean.getRandomInstance();
    when(tradeDirect.login(userID, password)).thenReturn(expectedAccountData);
    AccountDataBean result = slsbBean.login(userID, password);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginValidUser_aGUO0_2() throws Exception {
    DirectSLSBBean slsbBean = new DirectSLSBBean();
    String userID = "validUser";
    String password = "validPassword";
    AccountDataBean expectedAccountData = AccountDataBean.getRandomInstance();
    when(tradeDirect.login(userID, password)).thenReturn(expectedAccountData);
    AccountDataBean result = slsbBean.login(userID, password);
    assertEquals(expectedAccountData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_CBRr0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_CBRr0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertEquals(orderID, result.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_jmZM0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 5000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_jmZM0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 5000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(newPrice, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_jmZM0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 5000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(quoteDataBean.getSymbol(), newPrice, sharesTraded);
    assertEquals(sharesTraded, result.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_wXxU0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_wXxU0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_MKVm0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_MKVm0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_MKVm0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(companyName, result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_MKVm0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(price, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), result.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), result.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), result.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), result.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), result.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IQtD0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), result.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_ValidUserID_ReturnsAccountData_MVnC0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "validUserID";
    AccountDataBean result = directSLSBBean.getAccountData(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_ValidUserID_ReturnsAccountData_MVnC0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "validUserID";
    AccountDataBean result = directSLSBBean.getAccountData(userID);
    assertEquals(userID, result.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithAsynchMode_EtVL0_XdlH0_fid3() {
    try {
      DirectSLSBBean directSLSBBean = new DirectSLSBBean();
      String userID = "user123";
      Integer holdingID = 456;
      int orderProcessingMode = TradeConfig.ASYNCH;
      OrderDataBean result = null;
      try {
        result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
      } catch (Exception e) {
        fail("Exception should not be thrown");
      }
      assertNotNull(result);
      assertEquals("ASYNCH", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithSynchMode_LcEL1_EWov0_fid3() {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user456";
    Integer holdingID = 789;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = null;
    try {
      result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    } catch (Exception e) {
      fail("Exception should not have been thrown");
    }
    assertNotNull(result);
    assertEquals("SYNCH", result.getOrderStatus());
  }
}