/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Passing {
  @Mock
  private TradeServices tAction;
  @Mock
  private HttpServletRequest httpservletrequest;
  @Mock
  private HttpServletResponse httpservletresponse;
  @Mock
  private ServletContext servletcontext;
  @Mock
  private TradeServletAction tradeservletaction;
  @Mock
  private ServletContext servletContext;
  @Mock
  private HttpServletRequest httpServletRequest;
  @Mock
  private HttpServletResponse httpServletResponse;
  @InjectMocks
  private TradeServletAction tradeServletAction;
  @Mock
  private HttpSession httpsession;
  private final String userID = "user123";
  private final String results = "Operation completed";
  @Mock
  private HttpServletRequest req;
  @Mock
  private HttpServletResponse resp;
  @Mock
  private HttpSession httpSession;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotes() throws Exception {
    // The setup is handled by the annotations and Mockito extension
    // Prepare the data and mocks
    String userID = "user123";
    String symbols = "AAPL,GOOG,MSFT";
    String[] symbolsArray = symbols.split(",");
    List<QuoteDataBean> quoteDataBeans = new ArrayList<>();
    for (String symbol : symbolsArray) {
      QuoteDataBean mockQuote = new QuoteDataBean();
      mockQuote.setSymbol(symbol.trim());
      quoteDataBeans.add(mockQuote);
      when(tAction.getQuote(symbol.trim())).thenReturn(mockQuote);
    }
    // Execute the method
    tradeServletAction.doQuotes(servletContext, httpServletRequest, httpServletResponse, userID, symbols);
    // Verify the interactions and state
    verify(httpServletRequest).setAttribute("quoteDataBeans", quoteDataBeans);
    for (String symbol : symbolsArray) {
      verify(tAction).getQuote(symbol.trim());
    }
    verify(httpServletRequest).setAttribute(eq("quoteDataBeans"), any());
    verify(httpServletRequest).getRequestDispatcher(TradeConfig.getPage(TradeConfig.QUOTE_PAGE)).forward(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotesWithSingleSymbol_XGZP0_1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String symbols = "AAPL";
    tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
    ArgumentCaptor<ArrayList> captor = ArgumentCaptor.forClass(ArrayList.class);
    verify(req).setAttribute(eq("quoteDataBeans"), captor.capture());
    ArrayList<QuoteDataBean> capturedBeans = captor.getValue();
    assertEquals(1, capturedBeans.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotesWithSingleSymbol_XGZP0_2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String symbols = "AAPL";
    tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
    ArgumentCaptor<ArrayList> captor = ArgumentCaptor.forClass(ArrayList.class);
    verify(req).setAttribute(eq("quoteDataBeans"), captor.capture());
    ArrayList<QuoteDataBean> capturedBeans = captor.getValue();
    assertEquals("AAPL", capturedBeans.get(0).getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout() throws Exception {
    when(httpservletrequest.getSession()).thenReturn(httpsession);
    when(httpservletrequest.getSession(anyBoolean())).thenReturn(httpsession);
    String userID = "user123";
    tradeservletaction.doLogout(servletContext, httpservletrequest, httpservletresponse, userID);
    verify(tAction).logout(userID);
    verify(httpsession).invalidate();
    verify(httpservletrequest).logout();
    verify(httpservletrequest, atLeastOnce()).getSession();
    verify(httpservletrequest, times(1)).getSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogoutWithException() throws Exception {
    when(httpservletrequest.getSession()).thenReturn(httpsession);
    when(httpservletrequest.getSession(anyBoolean())).thenReturn(httpsession);
    String userID = "user123";
    doThrow(new IllegalArgumentException("Invalid user")).when(tAction).logout(userID);
    tradeservletaction.doLogout(servletContext, httpservletrequest, httpservletresponse, userID);
    verify(httpservletrequest).setAttribute(eq("results"), contains("illegal argument: Invalid user"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_NormalFlow_aUTF0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getSession()).thenReturn(session);
    tradeServletAction.doLogout(ctx, req, resp, "user123");
    verify(session).invalidate();
    verify(req).logout();
    verify(req).getSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_IllegalArgumentException_PCEr2() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getSession()).thenReturn(session);
    doThrow(new IllegalArgumentException("Invalid user ID")).when(req).logout();
    tradeServletAction.doLogout(ctx, req, resp, "user123");
    verify(req).setAttribute(eq("results"), contains("illegal argument: Invalid user ID"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_RecreateSession_EkTy3() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getSession()).thenReturn(session);
    when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.TRUE);
    tradeServletAction.doLogout(ctx, req, resp, "user123");
    verify(req).getSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoMarketSummary() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    servletContext = mock(ServletContext.class);
    tradeServletAction = new TradeServletAction();
    String userID = "user123";
    when(httpServletRequest.getAttribute("results")).thenReturn("test");
    tradeServletAction.doMarketSummary(servletContext, httpServletRequest, httpServletResponse, userID);
    verify(httpServletRequest).setAttribute("results", "test");
    verify(httpServletRequest).getAttribute("results");
    assertEquals("test", httpServletRequest.getAttribute("results"), "Attribute 'results' should be 'test'");
    verify(servletContext).getRequestDispatcher(TradeConfig.getPage(TradeConfig.MARKET_SUMMARY_PAGE));
    verify(servletContext.getRequestDispatcher(TradeConfig.getPage(TradeConfig.MARKET_SUMMARY_PAGE))).forward(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoMarketSummary_rhSj0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user123";
    tradeServletAction.doMarketSummary(ctx, req, resp, userID);
    verify(req).setAttribute("results", "test");
    verify(ctx).getRequestDispatcher(TradeConfig.getPage(TradeConfig.MARKET_SUMMARY_PAGE)).forward(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoHomeWithIllegalArgumentException() throws Exception {
    // Setup is handled by annotations and Mockito extension
    when(tAction.getAccountData(userID)).thenThrow(new IllegalArgumentException());
    tradeServletAction.doHome(servletContext, httpServletRequest, httpServletResponse, userID, results);
    verify(httpServletRequest).setAttribute("results", results + "check userID = " + userID + " and that the database is populated");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoHomeWithFinderException() throws Exception {
    // Setup is handled by annotations and Mockito extension
    when(tAction.getAccountData(userID)).thenThrow(new javax.ejb.FinderException());
    tradeServletAction.doHome(servletContext, httpServletRequest, httpServletResponse, userID, results);
    verify(httpServletRequest).setAttribute("results", results + "\nCould not find account for + " + userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoHomeWithGeneralException_1() throws Exception {
    // Setup is handled by annotations and Mockito extension
    when(tAction.getAccountData(userID)).thenThrow(new Exception());
    Exception exception = assertThrows(javax.servlet.ServletException.class, () -> {
      tradeServletAction.doHome(servletContext, httpServletRequest, httpServletResponse, userID, results);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountWithException_1() throws Exception {
    // Setup can be extended if needed
    String userID = "user123";
    String results = "Test Results";
    when(tAction.getAccountData(userID)).thenThrow(new IllegalArgumentException("Invalid user ID"));
    verify(httpServletRequest).setAttribute("results", results + "could not find account for userID = " + userID);
    Exception exception = assertThrows(javax.servlet.ServletException.class, () -> {
      tradeServletAction.doAccount(servletContext, httpServletRequest, httpServletResponse, userID, results);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoBuy() throws Exception {
    // Setup is handled by Mockito annotations
    // Arrange
    String userID = "user123";
    String symbol = "XYZ";
    String quantity = "100";
    OrderDataBean mockOrderData = new OrderDataBean();
    when(tAction.buy(anyString(), anyString(), anyDouble(), anyInt())).thenReturn(mockOrderData);
    // Act
    tradeServletAction.doBuy(servletContext, httpServletRequest, httpServletResponse, userID, symbol, quantity);
    // Assert
    verify(tAction).buy(userID, symbol, Double.parseDouble(quantity), TradeConfig.getOrderProcessingMode());
    verify(httpServletRequest).setAttribute("orderData", mockOrderData);
    verify(httpServletRequest).setAttribute(eq("results"), anyString());
    verify(servletContext).getRequestDispatcher(TradeConfig.getPage(TradeConfig.ORDER_PAGE)).forward(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_PasswordsDoNotMatch() throws Exception {
    // Setup is handled by Mockito annotations
    String userID = "user1";
    String password = "pass";
    String cpassword = "pass2";
    String fullName = "John Doe";
    String address = "123 Street";
    String creditcard = "1234567890123456";
    String email = "john@example.com";
    tradeServletAction.doAccountUpdate(servletContext, httpServletRequest, httpServletResponse, userID, password, cpassword, fullName, address, creditcard, email);
    verify(httpServletRequest).setAttribute(eq("results"), contains("passwords do not match"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_SuccessfulUpdate() throws Exception {
    // Setup is handled by Mockito annotations
    String userID = "user1";
    String password = "pass";
    String cpassword = "pass";
    String fullName = "John Doe";
    String address = "123 Street";
    String creditcard = "1234567890123456";
    String email = "john@example.com";
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean(userID, password, fullName, address, email, creditcard);
    when(tAction.updateAccountProfile(any(AccountProfileDataBean.class))).thenReturn(accountProfileData);
    tradeServletAction.doAccountUpdate(servletContext, httpServletRequest, httpServletResponse, userID, password, cpassword, fullName, address, creditcard, email);
    verify(tAction).updateAccountProfile(any(AccountProfileDataBean.class));
    verify(httpServletRequest).setAttribute(eq("results"), contains("Account profile update successful"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_ThrowsServletException_1() throws Exception {
    // Setup is handled by Mockito annotations
    String userID = "user1";
    String password = "pass";
    String cpassword = "pass";
    String fullName = "John Doe";
    String address = "123 Street";
    String creditcard = "1234567890123456";
    String email = "john@example.com";
    when(tAction.updateAccountProfile(any(AccountProfileDataBean.class))).thenThrow(new IllegalArgumentException());
    Exception exception = assertThrows(javax.servlet.ServletException.class, () -> {
      tradeServletAction.doAccountUpdate(servletContext, httpServletRequest, httpServletResponse, userID, password, cpassword, fullName, address, creditcard, email);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoSellWithValidParameters_Lzjs0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext mockServletContext = mock(ServletContext.class);
    HttpServletRequest mockHttpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockHttpServletResponse = mock(HttpServletResponse.class);
    String userID = "validUser";
    Integer holdingID = 123;
    tradeServletAction.doSell(mockServletContext, mockHttpServletRequest, mockHttpServletResponse, userID, holdingID);
    verify(mockHttpServletRequest).setAttribute(eq("orderData"), any(OrderDataBean.class));
    verify(mockHttpServletRequest).setAttribute(eq("results"), eq(""));
    verify(mockHttpServletRequest, times(2)).setAttribute(anyString(), any());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcome() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    servletContext = mock(ServletContext.class);
    tradeServletAction = new TradeServletAction();
    String status = "Welcome!";
    tradeServletAction.doWelcome(servletContext, httpServletRequest, httpServletResponse, status);
    verify(httpServletRequest).setAttribute("results", status);
    verify(servletContext).getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE));
    verify(servletContext.getRequestDispatcher(TradeConfig.getPage(TradeConfig.WELCOME_PAGE))).forward(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoWelcomeSetsCorrectAttribute_LMIU0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext mockServletContext = mock(ServletContext.class);
    HttpServletRequest mockHttpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockHttpServletResponse = mock(HttpServletResponse.class);
    tradeServletAction.doWelcome(mockServletContext, mockHttpServletRequest, mockHttpServletResponse, "Success");
    verify(mockHttpServletRequest).setAttribute("results", "Success");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegisterSuccess_bcoR0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String passwd = "pass";
    String cpasswd = "pass";
    String fullname = "Full Name";
    String ccn = "1234567890123456";
    String openBalanceString = "1000";
    String email = "user@example.com";
    String address = "1234 Street";
    when(req.getAttribute("results")).thenReturn("Registration operation succeeded;  Account 1 has been created.");
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(req).setAttribute(eq("results"), anyString());
    assertEquals("Registration operation succeeded;  Account 1 has been created.", req.getAttribute("results"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegisterPasswordMismatch_qlfC1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user2";
    String passwd = "pass123";
    String cpasswd = "pass321";
    String fullname = "Full Name";
    String ccn = "1234567890123456";
    String openBalanceString = "1000";
    String email = "user2@example.com";
    String address = "1234 Street";
    when(req.getAttribute("results")).thenReturn("Registration operation failed, your passwords did not match");
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(req).setAttribute(eq("results"), anyString());
    assertEquals("Registration operation failed, your passwords did not match", req.getAttribute("results"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegisterExceptionHandling_rQud2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user3";
    String passwd = "pass";
    String cpasswd = "pass";
    String fullname = "Full Name";
    String ccn = "1234567890123456";
    String openBalanceString = "invalid";
    String email = "user3@example.com";
    String address = "1234 Street";
    doThrow(new NumberFormatException()).when(req).setAttribute("results", "Registration operation failed;");
    try {
      tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    } catch (ServletException e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegisterAccountCreationFailed_dMil3() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user4";
    String passwd = "pass";
    String cpasswd = "pass";
    String fullname = "Full Name";
    String ccn = "1234567890123456";
    String openBalanceString = "1000";
    String email = "user4@example.com";
    String address = "1234 Street";
    when(req.getAttribute("results")).thenReturn("Registration operation failed;");
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(req).setAttribute(eq("results"), anyString());
    assertEquals("Registration operation failed;", req.getAttribute("results"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLoginSuccess() throws Exception {
    when(httpServletRequest.getSession(anyBoolean())).thenReturn(httpSession);
    String userID = "user1";
    String password = "pass1";
    AccountDataBean accountData = new AccountDataBean();
    when(tAction.login(userID, password)).thenReturn(accountData);
    tradeServletAction.doLogin(servletContext, httpServletRequest, httpServletResponse, userID, password);
    verify(httpSession).setAttribute("uidBean", userID);
    verify(httpSession).setAttribute(eq("sessionCreationDate"), any());
    verify(httpServletRequest, never()).setAttribute(eq("results"), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLoginFailure() throws Exception {
    when(httpServletRequest.getSession(anyBoolean())).thenReturn(httpSession);
    String userID = "user1";
    String password = "pass1";
    when(tAction.login(userID, password)).thenReturn(null);
    tradeServletAction.doLogin(servletContext, httpServletRequest, httpServletResponse, userID, password);
    verify(httpServletRequest).setAttribute(eq("results"), contains("Could not find account for " + userID));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLoginThrowsIllegalArgumentException() throws Exception {
    when(httpServletRequest.getSession(anyBoolean())).thenReturn(httpSession);
    String userID = "user1";
    String password = "pass1";
    IllegalArgumentException exception = new IllegalArgumentException("Invalid user");
    when(tAction.login(userID, password)).thenThrow(exception);
    tradeServletAction.doLogin(servletContext, httpServletRequest, httpServletResponse, userID, password);
    verify(httpServletRequest).setAttribute(eq("results"), contains("illegal argument:" + exception.getMessage()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLoginThrowsGenericException() throws Exception {
    when(httpServletRequest.getSession(anyBoolean())).thenReturn(httpSession);
    String userID = "user1";
    String password = "pass1";
    Exception exception = new Exception("General failure");
    when(tAction.login(userID, password)).thenThrow(exception);
    assertThrows(javax.servlet.ServletException.class, () -> {
      tradeServletAction.doLogin(servletContext, httpServletRequest, httpServletResponse, userID, password);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLoginSuccess_Xyuc0() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = Mockito.mock(ServletContext.class);
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    HttpSession session = Mockito.mock(HttpSession.class);
    Mockito.when(req.getSession(true)).thenReturn(session);
    try {
      tradeServletAction.doLogin(ctx, req, resp, "validUser", "validPass");
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
    Mockito.verify(session).setAttribute("uidBean", "validUser");
    Mockito.verify(session).setAttribute("sessionCreationDate", Mockito.any());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLoginFailureAccountNotFound_nBSj1() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = Mockito.mock(ServletContext.class);
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    try {
      tradeServletAction.doLogin(ctx, req, resp, "invalidUser", "invalidPass");
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
    Mockito.verify(req).setAttribute(Mockito.eq("results"), Mockito.contains("Could not find account for invalidUser"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLoginThrowsIllegalArgumentException_isaj2() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = Mockito.mock(ServletContext.class);
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.doThrow(new IllegalArgumentException("Invalid argument")).when(req).getParameter(Mockito.anyString());
    try {
      tradeServletAction.doLogin(ctx, req, resp, "user", "pass");
      fail("Exception should have been thrown");
    } catch (javax.servlet.ServletException e) {
      assertTrue(e.getCause() instanceof IllegalArgumentException);
      assertTrue(e.getMessage().contains("illegal argument"));
    } catch (Exception e) {
      fail("Wrong exception type caught");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegisterPasswordMismatch_tlBn0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    String userID = "user1";
    String passwd = "pass";
    String cpasswd = "wrongpass";
    String fullname = "Full Name";
    String ccn = "1234567890123456";
    String openBalanceString = "1000";
    String email = "user@example.com";
    String address = "123 Main St";
    tradeServletAction.doRegister(servletContext, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(req).setAttribute(eq("results"), contains("Registration operation failed, your passwords did not match"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegisterFailure_qLdE0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    String userID = "user1";
    String passwd = "pass";
    String cpasswd = "pass";
    String fullname = "Full Name";
    String ccn = "1234567890123456";
    String openBalanceString = "1000";
    String email = "user@example.com";
    String address = "123 Main St";
    when(tAction.register(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), any(BigDecimal.class)))
        .thenReturn(null);
    tradeServletAction.doRegister(servletContext, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(req).setAttribute(eq("results"), contains("Registration operation failed;"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_PasswordsDoNotMatch_Irma0_GwLO0() {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String password = "pass123";
    String cpassword = "pass124";
    String fullName = "John Doe";
    String address = "123 Street";
    String creditcard = "1234567890123456";
    String email = "john@example.com";
    try {
      action.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
    } catch (ServletException | IOException e) {
      e.printStackTrace();
    }
    verify(req).setAttribute("results", "Update profile error: passwords do not match");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_MissingFields_aJGB1_XdOc0() {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user2";
    String password = "pass123";
    String cpassword = "pass123";
    String fullName = "";
    String address = "123 Street";
    String creditcard = "1234567890123456";
    String email = "john@example.com";
    try {
      action.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
    } catch (javax.servlet.ServletException | java.io.IOException e) {
      e.printStackTrace();
    }
    verify(req).setAttribute("results", "Update profile error: please fill in all profile information fields");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_SuccessfulUpdate_gKAe2_IGCy0() {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user3";
    String password = "pass123";
    String cpassword = "pass123";
    String fullName = "John Doe";
    String address = "123 Street";
    String creditcard = "1234567890123456";
    String email = "john@example.com";
    try {
      action.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
    } catch (ServletException | IOException e) {
      e.printStackTrace();
    }
    verify(req).setAttribute("results", "Account profile update successful");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_EmptyUserID_tjDI5_pkpZ0() {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "";
    String password = "pass123";
    String cpassword = "pass123";
    String fullName = "John Doe";
    String address = "123 Street";
    String creditcard = "1234567890123456";
    String email = "john@example.com";
    try {
      action.doLogin(ctx, req, resp, userID, password); // Corrected method call
    } catch (javax.servlet.ServletException | java.io.IOException e) { // Added IOException to the catch clause
      e.printStackTrace();
    }
    verify(req).setAttribute("results", "Update profile error: please fill in all profile information fields");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_AllFieldsEmpty_TFCb6_UzRP0() {
    TradeServletAction action = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "";
    String password = "";
    String cpassword = "";
    String fullName = "";
    String address = "";
    String creditcard = "";
    String email = "";
    try {
      action.doAccountUpdate(ctx, req, resp, userID, password, cpassword, fullName, address, creditcard, email);
    } catch (ServletException | IOException e) {
      e.printStackTrace();
    }
    verify(req).setAttribute("results", "Update profile error: please fill in all profile information fields");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotesWithSingleSymbol_XGZP0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String symbols = "AAPL";
    tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
    ArgumentCaptor<ArrayList> captor = ArgumentCaptor.forClass(ArrayList.class);
    verify(req).setAttribute(eq("quoteDataBeans"), captor.capture());
    ArrayList<QuoteDataBean> capturedBeans = captor.getValue();
    assertEquals(1, capturedBeans.size());
    assertEquals("AAPL", capturedBeans.get(0).getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoHomeWithGeneralException() throws Exception {
    // Setup is handled by annotations and Mockito extension
    when(tAction.getAccountData(userID)).thenThrow(new Exception());
    Exception exception = assertThrows(javax.servlet.ServletException.class, () -> {
      tradeServletAction.doHome(servletContext, httpServletRequest, httpServletResponse, userID, results);
    });
    assertTrue(exception.getMessage().contains("exception user =" + userID));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountWithException() throws Exception {
    // Setup can be extended if needed
    String userID = "user123";
    String results = "Test Results";
    when(tAction.getAccountData(userID)).thenThrow(new IllegalArgumentException("Invalid user ID"));
    Exception exception = assertThrows(javax.servlet.ServletException.class, () -> {
      tradeServletAction.doAccount(servletContext, httpServletRequest, httpServletResponse, userID, results);
    });
    assertTrue(exception.getMessage().contains("exception user = user123"));
    verify(httpServletRequest).setAttribute("results", results + "could not find account for userID = " + userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoAccountUpdate_ThrowsServletException() throws Exception {
    // Setup is handled by Mockito annotations
    String userID = "user1";
    String password = "pass";
    String cpassword = "pass";
    String fullName = "John Doe";
    String address = "123 Street";
    String creditcard = "1234567890123456";
    String email = "john@example.com";
    when(tAction.updateAccountProfile(any(AccountProfileDataBean.class))).thenThrow(new IllegalArgumentException());
    Exception exception = assertThrows(javax.servlet.ServletException.class, () -> {
      tradeServletAction.doAccountUpdate(servletContext, httpServletRequest, httpServletResponse, userID, password, cpassword, fullName, address, creditcard, email);
    });
    assertTrue(exception.getMessage().contains("exception user = user1"));
  }
}