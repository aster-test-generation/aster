/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.jaxrs;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TestJSONObject_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0001_JHyD0() {
    TestJSONObject testObject = new TestJSONObject();
    String expected = null; // Assuming default or expected value of prop0001 is null
    assertEquals(expected, testObject.getProp0001());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0005_RJHP0() {
    TestJSONObject testObject = new TestJSONObject();
    String expected = null; // Assuming default value of prop0005 is null, adjust as per actual default or set value
    assertEquals(expected, testObject.getProp0005());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0003_WaSE0() {
    TestJSONObject obj = new TestJSONObject();
    assertEquals(null, obj.getProp0003());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0014_DQrn0() {
    TestJSONObject obj = new TestJSONObject();
    String expected = null; // Assuming default null, adjust based on actual default or set value
    String actual = obj.getProp0014();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0015_sSfW0() {
    TestJSONObject testObject = new TestJSONObject();
    String expected = null; // Assuming default value of prop0015 is null if not set
    assertEquals(expected, testObject.getProp0015());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0010_nEMd0() {
    TestJSONObject testObject = new TestJSONObject();
    String expected = null; // Assuming default null, adjust expected based on actual default or set value
    assertEquals(expected, testObject.getProp0010());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0012_SbSb0() {
    TestJSONObject testObject = new TestJSONObject();
    String expected = null; // Assuming default value of prop0012 is null
    assertEquals(expected, testObject.getProp0012());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0009_TiLf0() {
    TestJSONObject obj = new TestJSONObject();
    String expected = null; // Assuming default null, adjust based on actual default or test setup
    assertEquals(expected, obj.getProp0009());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_KoEN0_XLgH0() {
    TestJSONObject obj = new TestJSONObject();
    String expected = "testValue";
    obj.setProp0016(expected);
    assertEquals(expected, obj.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_DzMb0_NUXu0() {
    TestJSONObject testObject = new TestJSONObject();
    String expectedValue = "testValue";
    testObject.setProp0016(expectedValue);
    assertEquals(expectedValue, testObject.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_DmHF0_rbGN0() {
    TestJSONObject testObject = new TestJSONObject();
    String expectedValue = "newValue";
    testObject.setProp0016(expectedValue);
    assertEquals(expectedValue, testObject.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_pfNV0_NPxd0() {
    TestJSONObject obj = new TestJSONObject();
    String expectedValue = "testValue";
    obj.setProp0016(expectedValue);
    assertEquals(expectedValue, obj.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0004_bsmK0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0004();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0002_ZRDZ0_fid2() {
    TestJSONObject obj = new TestJSONObject();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0013_JGJA0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0013();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0016_tSRt0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0016();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0011_NwmN0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0011();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0008_ytzM0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0008();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0007_ipnq0_fid2() {
    TestJSONObject obj = new TestJSONObject();
    String result = obj.getProp0007();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0006_KTYy0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0006();
    assertNull(result);
  }
}