/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingReentryServlet_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_XFOS0() {
        PingReentryServlet servlet = new PingReentryServlet();
        String expected = "Basic dynamic HTML generation through a servlet";
        assertEquals(expected, servlet.getServletInfo());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostCallsDoGet_RXUS0() throws Exception {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PingReentryServlet servlet = new PingReentryServlet();
        servlet.doPost(request, response);
        verify(servlet).doGet(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostExecutionCompletes_gExa1() throws Exception {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PingReentryServlet servlet = new PingReentryServlet();
        servlet.doPost(request, response);
        assertTrue(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithValidConfig_PRXr0() throws ServletException {
        PingReentryServlet servlet = new PingReentryServlet();
        ServletConfig mockConfig = org.mockito.Mockito.mock(ServletConfig.class);
        servlet.init(mockConfig);
        org.mockito.Mockito.verify(mockConfig).getServletContext();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullParameters_vmnI0() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(req.getParameter("numReentries")).thenReturn(null);
        when(req.getParameter("sleep")).thenReturn(null);
        when(res.getOutputStream()).thenReturn(out);
        PingReentryServlet servlet = new PingReentryServlet();
        servlet.doGet(req, res);
        verify(out).println(0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithValidNumReentriesAndSleep_xDJu1() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(req.getParameter("numReentries")).thenReturn("5");
        when(req.getParameter("sleep")).thenReturn("1000");
        when(res.getOutputStream()).thenReturn(out);
        when(req.getServerName()).thenReturn("localhost");
        when(req.getServerPort()).thenReturn(8080);
        when(req.getRequestURI()).thenReturn("/test");
        PingReentryServlet servlet = new PingReentryServlet();
        servlet.doGet(req, res);
        verify(out).println(contains("5"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithInterruptedException_fPOk3() throws ServletException, IOException, InterruptedException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(req.getParameter("numReentries")).thenReturn("0");
        when(req.getParameter("sleep")).thenReturn("1000");
        when(res.getOutputStream()).thenReturn(out);
        doThrow(new InterruptedException()).when(out).println(0);
        PingReentryServlet servlet = new PingReentryServlet();
        servlet.doGet(req, res);
        verify(res).sendError(500, "java.lang.InterruptedException");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetOutputStreamError_qPfT5() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(req.getParameter("numReentries")).thenReturn(null);
        when(req.getParameter("sleep")).thenReturn(null);
        when(res.getOutputStream()).thenThrow(new IOException());
        PingReentryServlet servlet = new PingReentryServlet();
        servlet.doGet(req, res);
        verify(res).sendError(500, "java.io.IOException");
    }
}