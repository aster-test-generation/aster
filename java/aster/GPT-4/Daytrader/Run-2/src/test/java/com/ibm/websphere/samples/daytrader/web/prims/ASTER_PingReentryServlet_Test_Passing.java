/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingReentryServlet_Test_Passing {
  @InjectMocks
  PingReentryServlet pingReentryServlet;
  @Mock
  ServletConfig mockServletConfig;
  HttpServletResponse httpServletResponse;
  HttpServletRequest httpServletRequest;
  ServletOutputStream servletOutputStream;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit() throws ServletException {
    // Initialization is done via annotations
    // Call the method to test
    pingReentryServlet.init(mockServletConfig);
    // Verify that super.init(config) was called
    verify(pingReentryServlet).init(mockServletConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_gxvf0() {
    PingReentryServlet servlet = new PingReentryServlet();
    ServletConfig config = new MockServletConfig();
    try {
      servlet.init(config);
    } catch (ServletException e) {
      e.printStackTrace();
    }
    assertNotNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    pingReentryServlet = new PingReentryServlet();
    // Arrange
    PingReentryServlet spyServlet = spy(pingReentryServlet);
    // Act
    spyServlet.doPost(httpServletRequest, httpServletResponse);
    // Assert
    verify(spyServlet, times(1)).doGet(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_uytx0() throws Exception {
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockResponse = mock(HttpServletResponse.class);
    PingReentryServlet servlet = new PingReentryServlet();
    servlet.doPost(mockRequest, mockResponse);
    verify(mockRequest, atLeastOnce()).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_ASIp0() {
    PingReentryServlet servlet = new PingReentryServlet();
    String expected = "Basic dynamic HTML generation through a servlet";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNoParameters() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    servletOutputStream = mock(ServletOutputStream.class);
    httpServletRequest = mock(HttpServletRequest.class);
    pingReentryServlet = new PingReentryServlet();
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    when(httpServletRequest.getParameter("numReentries")).thenReturn(null);
    when(httpServletRequest.getParameter("sleep")).thenReturn(null);
    pingReentryServlet.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(servletOutputStream).println(0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithParameters() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    servletOutputStream = mock(ServletOutputStream.class);
    httpServletRequest = mock(HttpServletRequest.class);
    pingReentryServlet = new PingReentryServlet();
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    when(httpServletRequest.getParameter("numReentries")).thenReturn("1");
    when(httpServletRequest.getParameter("sleep")).thenReturn("100");
    pingReentryServlet.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    // Since the actual HTTP call and sleep are not testable here without further mocking or refactoring,
    // we focus on verifying that the output stream was obtained and setContentType was called.
    verify(httpServletResponse).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetHandlesException() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    servletOutputStream = mock(ServletOutputStream.class);
    httpServletRequest = mock(HttpServletRequest.class);
    pingReentryServlet = new PingReentryServlet();
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    when(httpServletRequest.getParameter("numReentries")).thenThrow(new RuntimeException("Test Exception"));
    pingReentryServlet.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).sendError(500, "java.lang.RuntimeException: Test Exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNoParameters_BUSK0() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outStream = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(outStream);
    PingReentryServlet servlet = new PingReentryServlet();
    servlet.doGet(req, res);
    verify(outStream).println(0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNumReentriesParameterOnly_OAxL1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outStream = mock(ServletOutputStream.class);
    when(req.getParameter("numReentries")).thenReturn("5");
    when(res.getOutputStream()).thenReturn(outStream);
    PingReentryServlet servlet = new PingReentryServlet();
    servlet.doGet(req, res);
    verify(outStream, never()).println(anyInt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithSleepParameterOnly_ryGR2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outStream = mock(ServletOutputStream.class);
    when(req.getParameter("sleep")).thenReturn("1000");
    when(res.getOutputStream()).thenReturn(outStream);
    PingReentryServlet servlet = new PingReentryServlet();
    servlet.doGet(req, res);
    verify(outStream).println(0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithBothParameters_gzFG3() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outStream = mock(ServletOutputStream.class);
    when(req.getParameter("numReentries")).thenReturn("1");
    when(req.getParameter("sleep")).thenReturn("1000");
    when(res.getOutputStream()).thenReturn(outStream);
    PingReentryServlet servlet = new PingReentryServlet();
    servlet.doGet(req, res);
    verify(outStream, never()).println(anyInt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidParameters_Cmcz4() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outStream = mock(ServletOutputStream.class);
    when(req.getParameter("numReentries")).thenReturn("abc"); // Invalid number
    when(req.getParameter("sleep")).thenReturn("xyz"); // Invalid number
    when(res.getOutputStream()).thenReturn(outStream);
    PingReentryServlet servlet = new PingReentryServlet();
    servlet.doGet(req, res);
    verify(res).sendError(500, "java.lang.NumberFormatException: For input string: \"abc\"");
  }
}