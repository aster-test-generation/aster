/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2PDF_Test_Passing {
  PingServlet2PDF pingServlet2PDF;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  ServletOutputStream servletOutputStream;
  @Mock
  private HttpServletRequest httpservletrequest;
  @Mock
  private HttpServletResponse httpservletresponse;
  @Mock
  private ServletOutputStream servletoutputstream;
  @Mock
  private URLConnection urlConnection;
  @Mock
  private URL url;
  @InjectMocks
  private PingServlet2PDF pingservlet2pdf;
  private static final String PDF_CONTENT = "PDF content";
  private static final byte[] PDF_BYTES = PDF_CONTENT.getBytes();
  private static final String FILE_URL = "http://example.com/test.pdf";
  private static int hitCount = 0;
  private static final int BUFFER_SIZE = 1024 * 8; // 8 KB

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingServlet2PDF = new PingServlet2PDF();
    // Arrange
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    // Act
    pingServlet2PDF.doPost(httpServletRequest, httpServletResponse);
    // Assert
    verify(httpServletResponse).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_sGPB0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServlet2PDF servlet = new PingServlet2PDF();
    servlet.doPost(req, res);
    verify(req, atLeastOnce()).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_NormalFlow_qHYy0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream sos = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(sos);
    PingServlet2PDF servlet = new PingServlet2PDF();
    servlet.doGet(req, res);
    verify(res).setContentType("application/pdf");
    verify(sos, atLeastOnce()).write(any(byte[].class), anyInt(), anyInt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_ExceptionInStream_EGGt1() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream sos = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(sos);
    doThrow(new IOException()).when(sos).write(any(byte[].class), anyInt(), anyInt());
    PingServlet2PDF servlet = new PingServlet2PDF();
    servlet.doGet(req, res);
    verify(res).sendError(500, "PingServlet2Jsp.doGet(...): request errorjava.io.IOException");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_URLConnectionFails_bgbS2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
    PingServlet2PDF servlet = new PingServlet2PDF();
    servlet.doGet(req, res);
    verify(res).sendError(500, startsWith("PingServlet2Jsp.doGet(...): request error"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_BufferedInputStreamThrowsIOException_nyzN3() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream sos = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(sos);
    PingServlet2PDF servlet = new PingServlet2PDF();
    servlet.doGet(req, res);
    verify(res).sendError(500, startsWith("PingServlet2Jsp.doGet(...): request error"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_BufferedOutputStreamCloseException_jtVm4() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream sos = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(sos);
    doThrow(new IOException()).when(sos).close();
    PingServlet2PDF servlet = new PingServlet2PDF();
    servlet.doGet(req, res);
    verify(res).sendError(500, startsWith("PingServlet2Jsp.doGet(...): request error"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_SetAttributeCalled_WCHh5() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
    PingServlet2PDF servlet = new PingServlet2PDF();
    servlet.doGet(req, res);
    verify(req).setAttribute(eq("ab"), any(PingBean.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_HitCountIncremented_CedD6() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
    PingServlet2PDF servlet = new PingServlet2PDF();
    servlet.doGet(req, res);
    servlet.doGet(req, res);
    verify(req, times(2)).setAttribute(eq("ab"), any(PingBean.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_ContentTypePDF_aLyy7() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream sos = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(sos);
    PingServlet2PDF servlet = new PingServlet2PDF();
    servlet.doGet(req, res);
    verify(res).setContentType("application/pdf");
  }
}