/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.Diagnostics;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Any;
import javax.enterprise.inject.Instance;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrdersAlertFilter_Test_Failing {
  @Mock
  private FilterConfig filterConfig;
  @Mock
  private TradeServices tradeAction;
  @Mock
  private HttpServletRequest request;
  @Mock
  private FilterChain chain;
  @Mock
  private OrdersAlertFilter ordersAlertFilter;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullFilterConfig_irUJ0() throws IOException, ServletException {
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithDisplayOrderAlertsFalse_IhdX1() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(false);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNoActionParameter_rQEE2() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    HttpServletRequest req = mock(HttpServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn(null);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithEmptyActionParameter_kTHJ3() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    HttpServletRequest req = mock(HttpServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithLogoutAction_qzqI4() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    HttpServletRequest req = mock(HttpServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("logout");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithLoginActionAndNullUserID_EUzy5() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    HttpServletRequest req = mock(HttpServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn(null);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithLoginActionAndEmptyUserID_PcHx6() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    HttpServletRequest req = mock(HttpServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDestroySetsFilterConfigToNull_vKof0_lSry0() throws NoSuchFieldException, IllegalAccessException {
    Instance<TradeServices> servicesMock = mock(Instance.class);
    OrdersAlertFilter ordersAlertFilter = new OrdersAlertFilter(servicesMock);
    ordersAlertFilter.destroy();
    Field filterConfigField = OrdersAlertFilter.class.getDeclaredField("filterConfig");
    filterConfigField.setAccessible(true);
    assertNull(filterConfigField.get(ordersAlertFilter), "filterConfig should be null after destroy is called");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithDiagnosticsCheck_RpQx10_gzSb0() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    HttpServletRequest req = mock(HttpServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
    Diagnostics.checkDiagnostics();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullFilterConfig_irUJ0_fid1() throws IOException, ServletException {
    Instance<TradeServices> mockServices = mock(Instance.class);
    OrdersAlertFilter filter = new OrdersAlertFilter(mockServices);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithDisplayOrderAlertsFalse_IhdX1_fid1() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(false);
    Instance<TradeServices> mockServicesInstance = mock(Instance.class);
    when(mockServicesInstance.select(any())).thenReturn(mockServicesInstance);
    when(mockServicesInstance.get()).thenReturn(mock(TradeServices.class));
    OrdersAlertFilter filter = new OrdersAlertFilter(mockServicesInstance);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNoActionParameter_rQEE2_fid1() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(true);
    Instance<TradeServices> mockInstance = mock(Instance.class);
    when(mockInstance.select(Any.Literal.INSTANCE)).thenReturn(mockInstance);
    when(mockInstance.get()).thenReturn(mock(TradeServices.class));
    OrdersAlertFilter filter = new OrdersAlertFilter(mockInstance);
    HttpServletRequest req = mock(HttpServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn(null);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithEmptyActionParameter_kTHJ3_fid1() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(true);
    Instance<TradeServices> mockInstance = mock(Instance.class);
    when(mockInstance.select(any())).thenReturn(mockInstance);
    when(mockInstance.get()).thenReturn(mock(TradeServices.class));
    OrdersAlertFilter filter = new OrdersAlertFilter(mockInstance);
    HttpServletRequest req = mock(HttpServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithLoginActionAndNullUserID_EUzy5_fid1() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(true);
    Instance<TradeServices> mockServices = mock(Instance.class);
    when(mockServices.select(any())).thenReturn(mockServices);
    when(mockServices.get()).thenReturn(mock(TradeServices.class));
    OrdersAlertFilter filter = new OrdersAlertFilter(mockServices);
    HttpServletRequest req = mock(HttpServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn(null);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithLoginActionAndEmptyUserID_PcHx6_fid1() throws IOException, ServletException {
    TradeConfig.setDisplayOrderAlerts(true);
    Instance<TradeServices> mockInstance = mock(Instance.class);
    when(mockInstance.select(any())).thenReturn(mockInstance);
    when(mockInstance.get()).thenReturn(mock(TradeServices.class));
    OrdersAlertFilter filter = new OrdersAlertFilter(mockInstance);
    HttpServletRequest req = mock(HttpServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDestroySetsFilterConfigToNull_vKof0_lSry0_fid1() throws NoSuchFieldException, IllegalAccessException {
    Instance<TradeServices> servicesMock = mock(Instance.class);
    when(servicesMock.get()).thenReturn(mock(TradeServices.class));
    OrdersAlertFilter ordersAlertFilter = new OrdersAlertFilter(servicesMock);
    ordersAlertFilter.destroy();
    Field filterConfigField = OrdersAlertFilter.class.getDeclaredField("filterConfig");
    filterConfigField.setAccessible(true);
    assertNull(filterConfigField.get(ordersAlertFilter), "filterConfig should be null after destroy is called");
  }
}