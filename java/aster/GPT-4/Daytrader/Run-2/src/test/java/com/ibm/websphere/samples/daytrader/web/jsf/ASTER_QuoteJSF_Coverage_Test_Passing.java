/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_QuoteJSF_Coverage_Test_Passing {
    private QuoteJSF quoteJSF;
    private TradeServices tradeServices;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_CallsGetQuotesBySymbols_xRJm0() {
        TradeServices mockTradeServices = mock(TradeServices.class);
        Instance<TradeServices> instance = mock(Instance.class);
        when(instance.get()).thenReturn(mockTradeServices);
        QuoteJSF quoteJSF = new QuoteJSF(instance);
        quoteJSF.getAllQuotes();
        verify(quoteJSF, times(1)).getQuotesBySymbols();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotes_CompletesWithoutException_nTPn1() {
        TradeServices mockTradeServices = mock(TradeServices.class);
        Instance<TradeServices> instance = mock(Instance.class);
        when(instance.get()).thenReturn(mockTradeServices);
        QuoteJSF quoteJSF = new QuoteJSF(instance);
        quoteJSF.getAllQuotes();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuotesBySymbolsSessionNull_pAzz2_aKQj0() {
    ExternalContext externalContext = mock(ExternalContext.class);
    when(externalContext.getSession(true)).thenReturn(null);
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeAction = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeAction);
    QuoteJSF quoteJSF = new QuoteJSF(services);
    String result = quoteJSF.getQuotesBySymbols();
    assertEquals("quotes", result);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetQuotesBySymbols_SymbolsNotNull_ipMI3_qNxt0() {
    HttpSession session = mock(HttpSession.class);
    when(session.getAttribute("symbols")).thenReturn("s:8,s:9");
    quoteJSF.setSymbols("s:8,s:9");
    String result = quoteJSF.getQuotesBySymbols();
    verify(session).setAttribute("symbols", "s:8,s:9");
    assertEquals("quotes", result);
}
}