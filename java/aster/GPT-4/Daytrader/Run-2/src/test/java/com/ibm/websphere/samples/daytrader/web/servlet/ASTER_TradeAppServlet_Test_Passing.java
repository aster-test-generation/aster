/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppServlet_Test_Passing {
  @Mock
  ServletConfig servletConfig;
  @InjectMocks
  TradeAppServlet tradeAppServlet;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_hgjW0() throws ServletException, IOException {
    javax.servlet.http.HttpServletRequest request = mock(javax.servlet.http.HttpServletRequest.class);
    javax.servlet.http.HttpServletResponse response = mock(javax.servlet.http.HttpServletResponse.class);
    TradeAppServlet servlet = new TradeAppServlet();
    servlet.doGet(request, response);
    verify(request, atLeastOnce()).getParameter(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_HilE0() {
    TradeAppServlet servlet = new TradeAppServlet();
    String expected = "TradeAppServlet provides the standard web interface to Trade";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SysC0_1() throws ServletException {
    TradeAppServlet tradeAppServlet = new TradeAppServlet();
    Enumeration<String> parameterNames = Collections.enumeration(Arrays.asList("param1", "param2"));
    when(servletConfig.getInitParameterNames()).thenReturn(parameterNames);
    when(servletConfig.getInitParameter("param1")).thenReturn("value1");
    when(servletConfig.getInitParameter("param2")).thenReturn("value2");
    tradeAppServlet.init(servletConfig);
    verify(servletConfig).getInitParameterNames();
    verify(servletConfig).getInitParameter("param1");
    verify(servletConfig).getInitParameter("param2");
    assertEquals("value1", servletConfig.getInitParameter("param1"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_SysC0_2() throws ServletException {
    TradeAppServlet tradeAppServlet = new TradeAppServlet();
    Enumeration<String> parameterNames = Collections.enumeration(Arrays.asList("param1", "param2"));
    when(servletConfig.getInitParameterNames()).thenReturn(parameterNames);
    when(servletConfig.getInitParameter("param1")).thenReturn("value1");
    when(servletConfig.getInitParameter("param2")).thenReturn("value2");
    tradeAppServlet.init(servletConfig);
    verify(servletConfig).getInitParameterNames();
    verify(servletConfig).getInitParameter("param1");
    verify(servletConfig).getInitParameter("param2");
    assertEquals("value2", servletConfig.getInitParameter("param2"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskActionLogin_bWIh1_wjCM0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("user1");
    when(req.getParameter("passwd")).thenReturn("pass1");
    when(req.getServletContext()).thenReturn(ctx);
    when(config.getServletContext()).thenReturn(ctx);
    TradeAppServlet servlet = new TradeAppServlet();
    servlet.performTask(req, resp);
    verify(req, times(1)).getParameter("uid");
    verify(req, times(1)).getParameter("passwd");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskUserNotLoggedIn_epKp13_vtwQ0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("buy");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(req.getServletContext()).thenReturn(ctx);
    when(config.getServletContext()).thenReturn(ctx);
    TradeAppServlet servlet = new TradeAppServlet();
    servlet.performTask(req, resp);
    verify(session, times(1)).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_xIpB0() throws Exception {
    HttpServletRequest httpservletrequest = mock(HttpServletRequest.class);
    HttpServletResponse httpservletresponse = mock(HttpServletResponse.class);
    HttpSession httpsession = mock(HttpSession.class);
    TradeAppServlet tradeAppServlet = new TradeAppServlet();
    when(httpservletrequest.getSession()).thenReturn(httpsession);
    tradeAppServlet.doGet(httpservletrequest, httpservletresponse);
    verify(tradeAppServlet, times(1)).performTask(httpservletrequest, httpservletresponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_pSng0() throws Exception {
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpSession httpSession = mock(HttpSession.class);
    TradeAppServlet tradeAppServlet = new TradeAppServlet();
    when(httpServletRequest.getSession()).thenReturn(httpSession);
    tradeAppServlet.performTask(httpServletRequest, httpServletResponse);
    verify(httpServletRequest).getSession();
    assertDoesNotThrow(() -> tradeAppServlet.performTask(httpServletRequest, httpServletResponse));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNoInitParameters_UJQZ0_asbR0() {
    ServletConfig mockConfig = mock(ServletConfig.class);
    when(mockConfig.getInitParameterNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    TradeAppServlet servlet = new TradeAppServlet();
    try {
      servlet.init(mockConfig);
    } catch (ServletException e) {
      e.printStackTrace();
    }
    verify(mockConfig, never()).getInitParameter(anyString());
    System.out.println("testInitWithNoInitParameters passed");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_hnfV0_XGSy0() throws IOException, ServletException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    TradeAppServlet servlet = new TradeAppServlet();
    servlet.performTask(request, response);
    verify(request, atLeast(1)).getParameter(anyString());
  }
}