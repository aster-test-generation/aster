/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet31Async_Test_Failing {
  private PingServlet31Async pingServlet31Async;
  private ServletConfig servletConfig;
  @Mock
  private HttpServletResponse httpServletResponse;
  @Mock
  private HttpServletRequest httpServletRequest;
  @Mock
  private ServletInputStream servletInputStream;
  @Mock
  private AsyncContext asyncContext;
  private static int hitCount;
  private static String initTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    when(httpServletRequest.getInputStream()).thenReturn(servletInputStream);
    when(httpServletRequest.startAsync()).thenReturn(asyncContext);
    pingServlet31Async.doPost(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(httpServletRequest).startAsync();
    verify(servletInputStream).setReadListener(any(ReadListener.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_PLoD0() {
    PingServlet31Async servlet = new PingServlet31Async();
    String result = servlet.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    pingServlet31Async = new PingServlet31Async();
    // Call the method under test
    pingServlet31Async.doGet(httpServletRequest, httpServletResponse);
    // Verify that doPost is called within doGet
    verify(pingServlet31Async).doPost(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_VyCE0_1() throws ServletException {
    servletConfig = mock(ServletConfig.class);
    pingServlet31Async = new PingServlet31Async();
    pingServlet31Async.init(servletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_VyCE0_2() throws ServletException {
    servletConfig = mock(ServletConfig.class);
    pingServlet31Async = new PingServlet31Async();
    pingServlet31Async.init(servletConfig);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_lbSr0_DxeK0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    AsyncContext ac = mock(AsyncContext.class);
    ServletInputStream input = mock(ServletInputStream.class);
    ReadListener readListener = mock(ReadListener.class);
    when(req.startAsync()).thenReturn(ac);
    when(req.getInputStream()).thenReturn(input);
    PingServlet31Async servlet = new PingServlet31Async();
    servlet.doPost(req, res);
    verify(res).setContentType("text/html");
    verify(input).setReadListener(any(ReadListener.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetCallsDoPost_URhp0_xwOd0() throws Exception {
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockResponse = mock(HttpServletResponse.class);
    PingServlet31Async servlet = new PingServlet31Async();
    servlet.doGet(mockRequest, mockResponse);
    verify(mockResponse, times(1)).sendRedirect(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_PLoD0_fid2() {
    PingServlet31Async servlet = new PingServlet31Async();
    String result = servlet.getServletInfo();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_lbSr0_DxeK0_fid2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    AsyncContext ac = mock(AsyncContext.class);
    ServletInputStream input = mock(ServletInputStream.class);
    ReadListener readListener = mock(ReadListener.class);
    when(req.startAsync()).thenReturn(ac);
    when(req.getInputStream()).thenReturn(input);
    // Assuming PingServlet31Async is now accessible or properly mocked
    PingServlet31Async servlet = mock(PingServlet31Async.class);
    doNothing().when(servlet).doPost(any(HttpServletRequest.class), any(HttpServletResponse.class));
    servlet.doPost(req, res);
    verify(res).setContentType("text/html");
    verify(input).setReadListener(any(ReadListener.class));
  }
}