/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_sQGQ0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    int expectedLoginCount = 5;
    accountDataBean.setLoginCount(expectedLoginCount);
    assertEquals(expectedLoginCount, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_uGBO0_1() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_uGBO0_2() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_uGBO0_3() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertTrue(result.getLoginCount() >= 0 && result.getLoginCount() <= 10000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_uGBO0_4() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertTrue(result.getLogoutCount() >= 0 && result.getLogoutCount() <= 10000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_uGBO0_5() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_uGBO0_6() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_uGBO0_7() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertTrue(result.getBalance().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_uGBO0_8() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertTrue(result.getOpenBalance().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_uGBO0_9() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_cbGK0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    int expectedLogoutCount = 5;
    accountDataBean.setLogoutCount(expectedLogoutCount);
    assertEquals(expectedLogoutCount, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastLogin_OwFN0() {
    Date expectedLastLogin = new Date();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setLastLogin(expectedLastLogin);
    assertEquals(expectedLastLogin, accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailureNullProfile_IQJQ2() {
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("1000"), new BigDecimal("1000"), "user3");
    accountDataBean.setProfile(null);
    try {
      accountDataBean.login("password123");
      fail("Expected an EJBException to be thrown");
    } catch (EJBException e) {
      assertEquals("AccountBean:Login failure for account: nullnull AccountProfile", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullAccountID_SqwO0() {
    AccountDataBean accountDataBean = new AccountDataBean(null, 5, 5, new Date(), new Date(), BigDecimal.valueOf(1000), BigDecimal.valueOf(1000), "userProfile1");
    int expectedHash = 0;
    assertEquals(expectedHash, accountDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNonNullAccountID_OdJh1() {
    AccountDataBean accountDataBean = new AccountDataBean(123, 5, 5, new Date(), new Date(), BigDecimal.valueOf(1000), BigDecimal.valueOf(1000), "userProfile2");
    int expectedHash = Integer.valueOf(123).hashCode();
    assertEquals(expectedHash, accountDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldings_yRJz0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Collection<HoldingDataBean> holdings = new ArrayList<>();
    holdings.add(new HoldingDataBean());
    accountDataBean.setHoldings(holdings);
    assertEquals(holdings, accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_jzyC0() {
    Date expectedCreationDate = new Date();
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, expectedCreationDate, expectedCreationDate, BigDecimal.ZERO, BigDecimal.ZERO, "profile1");
    Date actualCreationDate = accountDataBean.getCreationDate();
    assertEquals(expectedCreationDate, actualCreationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_NLyA0() {
    AccountDataBean accountDataBean = new AccountDataBean(5, 10, new Date(), new Date(), new BigDecimal("1000.00"), new BigDecimal("500.00"), "userProfile");
    int expected = 10;
    int actual = accountDataBean.getLogoutCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_Nhro0() {
    Integer accountID = 1;
    int loginCount = 5;
    int logoutCount = 3;
    Date lastLogin = new Date();
    Date creationDate = new Date();
    BigDecimal balance = new BigDecimal("1000.50");
    BigDecimal openBalance = new BigDecimal("500.00");
    String profileID = "user123";
    AccountDataBean accountDataBean = new AccountDataBean(accountID, loginCount, logoutCount, lastLogin, creationDate, balance, openBalance, profileID);
    String expectedHTML = "<BR>Account Data for account: <B>" + accountID + "</B>" +
        "<LI>   loginCount:" + loginCount + "</LI>" +
        "<LI>  logoutCount:" + logoutCount + "</LI>" +
        "<LI>    lastLogin:" + lastLogin + "</LI>" +
        "<LI> creationDate:" + creationDate + "</LI>" +
        "<LI>      balance:" + balance + "</LI>" +
        "<LI>  openBalance:" + openBalance + "</LI>" +
        "<LI>    profileID:" + profileID + "</LI>";
    String actualHTML = accountDataBean.toHTML();
    assertEquals(expectedHTML, actualHTML);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsReturnsNotNull_BnnQ0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    assertNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountID_Rkuo0() {
    Integer expectedAccountID = 123;
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setAccountID(expectedAccountID);
    assertEquals(expectedAccountID, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_dhTn0() {
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "userProfile");
    assertEquals(5, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID_WithValidAccountID_ReturnsCorrectAccountID_FHDQ0() {
    Integer expectedAccountID = 123;
    AccountDataBean accountDataBean = new AccountDataBean(expectedAccountID, 5, 3, new Date(), new Date(), new BigDecimal("1000.00"), new BigDecimal("500.00"), "userProfile1");
    Integer actualAccountID = accountDataBean.getAccountID();
    assertEquals(expectedAccountID, actualAccountID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_LHfq0() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    assertTrue(accountDataBean1.equals(accountDataBean1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObjectSameID_oqrs1() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    AccountDataBean accountDataBean2 = new AccountDataBean(1, 5, 6, new Date(), new Date(), new BigDecimal("200.00"), new BigDecimal("150.00"), "profile2");
    assertTrue(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_PSQD2() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    assertFalse(accountDataBean1.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_uFLM3() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    Object otherObject = new Object();
    assertFalse(accountDataBean1.equals(otherObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentID_mKTP4() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    AccountDataBean accountDataBean2 = new AccountDataBean(2, 2, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    assertFalse(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutIncreasesLogoutCountByOne_iEkL0() {
    AccountDataBean account = new AccountDataBean(5, 10, new Date(), new Date(), new BigDecimal("1000.00"), new BigDecimal("500.00"), "userProfile");
    int initialLogoutCount = account.getLogoutCount();
    account.logout();
    assertEquals(initialLogoutCount + 1, account.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenBalance_KNeI0() {
    BigDecimal initialOpenBalance = new BigDecimal("1000.00");
    BigDecimal newOpenBalance = new BigDecimal("1500.00");
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("2000.00"), initialOpenBalance, "userProfile");
    accountDataBean.setOpenBalance(newOpenBalance);
    assertEquals(newOpenBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_cMIl0() {
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("1000.00"), new BigDecimal("500.00"), "user123");
    assertEquals("user123", accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDate_vXkw0() {
    Date expectedDate = new Date();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setCreationDate(expectedDate);
    assertEquals(expectedDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileID_ipDy0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    String expectedProfileID = "testProfileID";
    accountDataBean.setProfileID(expectedProfileID);
    assertEquals(expectedProfileID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfile_WGTL0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    accountDataBean.setProfile(profile);
    assertEquals(profile, accountDataBean.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrders_FizC0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Collection<OrderDataBean> orders = new ArrayList<>();
    orders.add(new OrderDataBean());
    accountDataBean.setOrders(orders);
    assertEquals(orders, accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_JRDW0() {
    Date expectedLastLogin = new Date();
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, expectedLastLogin, new Date(), BigDecimal.valueOf(1000), BigDecimal.valueOf(500), "user123");
    Date actualLastLogin = accountDataBean.getLastLogin();
    assertEquals(expectedLastLogin, actualLastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_CtNF0() {
    BigDecimal expectedBalance = new BigDecimal("1000.00");
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), expectedBalance, new BigDecimal("500.00"), "user123");
    BigDecimal actualBalance = accountDataBean.getBalance();
    assertEquals(expectedBalance, actualBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_qpQY0() {
    BigDecimal expectedBalance = new BigDecimal("1000.00");
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("1500.00"), expectedBalance, "userProfile1");
    BigDecimal result = accountDataBean.getOpenBalance();
    assertEquals(expectedBalance, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_kaWl0() {
    BigDecimal newBalance = new BigDecimal("100.00");
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setBalance(newBalance);
    assertEquals(newBalance, accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_uGBO0() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result);
    assertNotNull(result.getAccountID());
    assertTrue(result.getLoginCount() >= 0 && result.getLoginCount() <= 10000);
    assertTrue(result.getLogoutCount() >= 0 && result.getLogoutCount() <= 10000);
    assertNotNull(result.getLastLogin());
    assertNotNull(result.getCreationDate());
    assertTrue(result.getBalance().compareTo(BigDecimal.ZERO) >= 0);
    assertTrue(result.getOpenBalance().compareTo(BigDecimal.ZERO) >= 0);
    assertNotNull(result.getProfileID());
  }
}