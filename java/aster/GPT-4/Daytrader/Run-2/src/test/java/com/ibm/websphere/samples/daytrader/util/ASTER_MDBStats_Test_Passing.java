/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MDBStats_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_NewType_LuIu0_tGhB0_1() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat result = mdbStats.addTiming("newType", 1000, 2000);
    assertEquals(1, result.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_NewType_LuIu0_tGhB0_3() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat result = mdbStats.addTiming("newType", 1000, 2000);
    assertEquals(1000, result.getMax(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_NewType_LuIu0_tGhB0_4() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat result = mdbStats.addTiming("newType", 1000, 2000);
    assertEquals(1000, result.getMin(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingType_TgJr1_VjDI0_1() {
    MDBStats mdbStats = MDBStats.getInstance();
    mdbStats.addTiming("existingType", 1000, 2000);
    TimerStat result = mdbStats.addTiming("existingType", 2000, 4000);
    assertEquals(2, result.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingType_TgJr1_VjDI0_3() {
    MDBStats mdbStats = MDBStats.getInstance();
    mdbStats.addTiming("existingType", 1000, 2000);
    TimerStat result = mdbStats.addTiming("existingType", 2000, 4000);
    assertEquals(2000, result.getMax(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingType_TgJr1_VjDI0_4() {
    MDBStats mdbStats = MDBStats.getInstance();
    mdbStats.addTiming("existingType", 1000, 2000);
    TimerStat result = mdbStats.addTiming("existingType", 2000, 4000);
    assertEquals(1000, result.getMin(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_UpdateMax_TOdD2_FLwA0_1() {
    MDBStats mdbStats = MDBStats.getInstance();
    mdbStats.addTiming("updateMax", 1000, 2000);
    TimerStat result = mdbStats.addTiming("updateMax", 2000, 5000);
    assertEquals(2, result.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_UpdateMin_SRjE3_MWiX0_1() {
    MDBStats mdbStats = MDBStats.getInstance();
    mdbStats.addTiming("updateMin", 1000, 3000);
    TimerStat result = mdbStats.addTiming("updateMin", 3000, 4000);
    assertEquals(2, result.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_UpdateMin_SRjE3_MWiX0_2() {
    MDBStats mdbStats = MDBStats.getInstance();
    mdbStats.addTiming("updateMin", 1000, 3000);
    TimerStat result = mdbStats.addTiming("updateMin", 3000, 4000);
    assertEquals(1000, result.getMin(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetClearsState_hxTa0_UsRF0() {
    MDBStats mdbStats = MDBStats.getInstance();
    mdbStats.reset();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetInstance_NotNull_DxSl0_zxIR0() {
    MDBStats instance = MDBStats.getInstance();
    assertNotNull(instance, "Instance should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetInstance_SingletonProperty_uLdE1_GDMr0() {
    MDBStats instance1 = MDBStats.getInstance();
    MDBStats instance2 = MDBStats.getInstance();
    assertSame(instance1, instance2, "Instances should be the same");
  }
}