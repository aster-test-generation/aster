/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedThreadFactory;
import javax.websocket.CloseReason;
import javax.websocket.EndpointConfig;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingWebSocketJson_Test_Passing {
  @Mock
  private ManagedThreadFactory managedThreadFactory;
  @Mock
  private EndpointConfig endpointConfig;
  @Mock
  private Session session;
  private Integer receivedHitCount = null;
  private Integer sentHitCount = null;
  private Session currentSession = null;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnClose_Rrnz0() {
    PingWebSocketJson pingWebSocketJson = new PingWebSocketJson();
    Session mockSession = Mockito.mock(Session.class);
    CloseReason mockCloseReason = new CloseReason(CloseReason.CloseCodes.NORMAL_CLOSURE, "Normal Closure");
    pingWebSocketJson.onClose(mockSession, mockCloseReason);
    assertDoesNotThrow(() -> pingWebSocketJson.onClose(mockSession, mockCloseReason));
  }
}