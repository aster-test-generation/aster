/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_QuoteJSF_Test_Passing {
  private String symbols = null;
  @Mock
  private TradeServices tradeAction;
  @Mock
  private ExternalContext context;
  @Mock
  private HtmlDataTable dataTable;
  @Mock
  private HttpSession session;
  @InjectMocks
  private QuoteJSF quoteJSF;
  @Mock
  private Instance<TradeServices> servicesInstance;
  @Mock
  private TradeServices tradeServices;
  @Mock
  private ExternalContext externalContext;
  @Mock
  private HttpSession httpSession;
  private Integer quantity = 100;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_oaBw0() {
    QuoteJSF quote = new QuoteJSF(null); // Assuming null can be passed if no actual implementation is provided
    Integer expected = 0; // Assuming default or initialized value of quantity is 0
    Integer actual = quote.getQuantity();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDataTable_fpbB0() {
    QuoteJSF quoteJSF = new QuoteJSF(null); // Assuming TradeServices can be null or mocked
    HtmlDataTable result = quoteJSF.getDataTable();
    assertNotNull(result, "DataTable should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDataTable_hyYF0() {
    QuoteJSF quoteJSF = new QuoteJSF(null); // Assuming null can be passed if not specified otherwise
    HtmlDataTable dataTable = new HtmlDataTable();
    quoteJSF.setDataTable(dataTable);
    assertEquals(dataTable, quoteJSF.getDataTable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuotes_cJMO0() {
    Instance<TradeServices> servicesInstance = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(servicesInstance);
    QuoteData[] expected = new QuoteData[]{};
    assertArrayEquals(expected, quoteJSF.getQuotes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbols_amdU0() {
    QuoteJSF quoteJSF = new QuoteJSF(null); // Assuming null is acceptable for the constructor
    String expected = null; // Assuming default value of symbols is null
    assertEquals(expected, quoteJSF.getSymbols());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbols_CfZJ0_mfMG0() {
    QuoteJSF quoteJSF = new QuoteJSF(null); // Assuming null is acceptable for the constructor
    String expectedSymbols = "AAPL,GOOGL,MSFT";
    quoteJSF.setSymbols(expectedSymbols);
    assertEquals(expectedSymbols, quoteJSF.getSymbols());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_QrVZ0_tmqF0() {
    QuoteJSF quote = new QuoteJSF(null); // Assuming null is acceptable for Instance<TradeServices>
    quote.setQuantity(5);
    assertEquals(Integer.valueOf(5), quote.getQuantity());
  }
}