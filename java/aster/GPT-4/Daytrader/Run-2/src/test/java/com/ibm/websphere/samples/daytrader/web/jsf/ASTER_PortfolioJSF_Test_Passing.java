/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PortfolioJSF_Test_Passing {
  @Mock
  private TradeServices tradeAction;
  @Mock
  private ExternalContext externalContext;
  @Mock
  private HttpSession httpSession;
  @InjectMocks
  private PortfolioJSF portfolioJSF;
  @Mock
  private ArrayList<HoldingData> holdingDatas;
  @Mock
  private ExternalContext context;
  @Mock
  private HtmlDataTable dataTable;
  @Mock
  private HttpSession session;
  private BigDecimal totalBasis = new BigDecimal(0.0);
  private BigDecimal totalGain = new BigDecimal(0.0);
  private BigDecimal totalValue = new BigDecimal(0.0);
  private Integer numberHoldings;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalGainPercent_UYwl0() {
    Instance<TradeServices> servicesInstance = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(servicesInstance);
    BigDecimal expected = new BigDecimal("0.00"); // Assuming the initial value or a set value
    BigDecimal result = portfolioJSF.getTotalGainPercent();
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDataTable_zSYv0() {
    PortfolioJSF portfolioJSF = new PortfolioJSF(null); // Assuming null is acceptable for the constructor
    HtmlDataTable dataTable = new HtmlDataTable();
    portfolioJSF.setDataTable(dataTable);
    assertEquals(dataTable, portfolioJSF.getDataTable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberHoldings_ExNS0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    Integer expected = 0; // Assuming default or initial value is 0
    assertEquals(expected, portfolio.getNumberHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalValue_BzNO0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming initial totalValue is ZERO or set accordingly in the constructor if not shown here
    BigDecimal actual = portfolio.getTotalValue();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalGainPercentHTML_umFh0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    String result = portfolio.getTotalGainPercentHTML();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalGain_GCcp0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming default totalGain is ZERO, adjust based on actual implementation
    BigDecimal actual = portfolio.getTotalGain();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingDatas_CJCT0_1() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    ArrayList<HoldingData> result = portfolio.getHoldingDatas();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingDatas_CJCT0_2() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    ArrayList<HoldingData> result = portfolio.getHoldingDatas();
    assertTrue(result instanceof ArrayList);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalBasis_VXma0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming default totalBasis is zero
    assertEquals(expected, portfolio.getTotalBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumOfCashHoldings_BlQh0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming default sumOfCashHoldings is zero
    BigDecimal actual = portfolio.getSumOfCashHoldings();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDataTable_JTRq0() {
    PortfolioJSF portfolioJSF = new PortfolioJSF(null);
    HtmlDataTable result = portfolioJSF.getDataTable();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_yAGQ0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming default balance is ZERO, adjust based on actual implementation
    assertEquals(expected, portfolio.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsTotal_xdcN0() {
    PortfolioJSF portfolio = new PortfolioJSF(null); // Assuming null can be passed for Instance<TradeServices>
    BigDecimal expected = BigDecimal.ZERO; // Assuming default or initial value
    BigDecimal actual = portfolio.getHoldingsTotal();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_QMFe0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming initial balance is zero for the test case
    assertEquals(expected, portfolio.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingDatas_CbAr0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    ArrayList<HoldingData> expectedHoldingDatas = new ArrayList<>();
    expectedHoldingDatas.add(new HoldingData());
    portfolio.setHoldingDatas(expectedHoldingDatas);
    assertEquals(expectedHoldingDatas, portfolio.getHoldingDatas());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalValue_UFSo0_wNkx0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expectedValue = new BigDecimal("1000");
    portfolio.setTotalValue(expectedValue);
    assertEquals(expectedValue, portfolio.getTotalValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumOfCashHoldings_xhQT0_RLdC0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = new BigDecimal("10000");
    portfolio.setSumOfCashHoldings(expected);
    assertEquals(expected, portfolio.getSumOfCashHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenBalance_sCUa0_TVlx0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = new BigDecimal("1000");
    portfolio.setOpenBalance(expected);
    assertEquals(expected, portfolio.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_vGJn0() throws Exception {
    when(context.getSession(true)).thenReturn(session);
    String expectedUserID = "user123";
    int holdingID = 1;
    HoldingData holdingData = new HoldingData();
    holdingData.setHoldingID(holdingID);
    OrderDataBean orderDataBean = new OrderDataBean();
    orderDataBean.setOrderID(101);
    orderDataBean.setOrderStatus("Completed");
    orderDataBean.setOpenDate(new java.util.Date());
    orderDataBean.setCompletionDate(new java.util.Date());
    orderDataBean.setOrderFee(new BigDecimal("1.5"));
    orderDataBean.setOrderType("Sell");
    orderDataBean.setQuantity(10);
    orderDataBean.setSymbol("XYZ");
    when(session.getAttribute("uidBean")).thenReturn(expectedUserID);
    when(dataTable.getRowData()).thenReturn(holdingData);
    when(tradeAction.sell(expectedUserID, holdingID, TradeConfig.getOrderProcessingMode())).thenReturn(orderDataBean);
    when(holdingDatas.remove(holdingData)).thenReturn(true);
    String result = portfolioJSF.sell();
    verify(session).setAttribute(eq("orderData"), any(OrderData.class));
    assertEquals("sell", result);
    verify(holdingDatas).remove(holdingData);
    verify(tradeAction).sell(expectedUserID, holdingID, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingsTotal_Dwzt0_ayVe0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = new BigDecimal("1000");
    portfolio.setHoldingsTotal(expected);
    assertEquals(expected, portfolio.getHoldingsTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNumberHoldings_Yevl0_jkFu0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    Integer expectedNumberHoldings = 5;
    portfolio.setNumberHoldings(expectedNumberHoldings);
    assertEquals(expectedNumberHoldings, portfolio.getNumberHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_HMPj0_aJPj0() {
    PortfolioJSF portfolio = new PortfolioJSF(null); // Assuming null is acceptable for the constructor
    BigDecimal newBalance = new BigDecimal("1000.00");
    portfolio.setBalance(newBalance);
    assertEquals(newBalance, portfolio.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingDatas_CJCT0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    ArrayList<HoldingData> result = portfolio.getHoldingDatas();
    assertNotNull(result);
    assertTrue(result instanceof ArrayList);
  }
}