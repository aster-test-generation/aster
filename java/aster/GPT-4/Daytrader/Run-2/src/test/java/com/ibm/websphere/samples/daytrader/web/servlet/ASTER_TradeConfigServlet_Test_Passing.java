/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirectDBUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Passing {
  @InjectMocks
  private TradeConfigServlet tradeConfigServlet;
  @Mock
  private ServletConfig mockServletConfig;
  @Mock
  private TradeDirectDBUtils dbUtils;
  @Mock
  private HttpServletRequest httpServletRequest;
  @Mock
  private HttpServletResponse httpServletResponse;
  @Mock
  private HttpServletResponse response;
  private ServletConfig servletConfig;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit() throws ServletException {
    // All necessary setup is handled by Mockito annotations
    // Call the method under test
    tradeConfigServlet.init(mockServletConfig);
    // Verify that init was called on the superclass with the mockServletConfig
    verify(mockServletConfig, times(1)).getServletContext();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_VIXa0() throws ServletException {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig config = mock(ServletConfig.class);
    servlet.init(config);
    assertNotNull(config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithNullAction_PVQn0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithUpdateConfigAction_pNYp1() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("updateConfig");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithResetTradeAction_TxYv2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("resetTrade");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithBuildDBAction_cnuV3() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("buildDB");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithInvalidAction_rIjZ8() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("invalidAction");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceExceptionHandling_mDIG9() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("updateConfig");
    doThrow(new RuntimeException("Test Exception")).when(req).getParameter("action");
    TradeConfigServlet servlet = new TradeConfigServlet();
    try {
      servlet.service(req, resp);
    } catch (Exception e) {
      assertNotNull(e);
    }
    verify(resp).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_1() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    tradeConfigServlet = new TradeConfigServlet();
    // Setup input parameters
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("1000");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("100");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    // Call the method under test
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify the configurations are set correctly
    // Verify that the parameters were accessed as expected
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(1, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_2() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    tradeConfigServlet = new TradeConfigServlet();
    // Setup input parameters
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("1000");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("100");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    // Call the method under test
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify the configurations are set correctly
    // Verify that the parameters were accessed as expected
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(1, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_3() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    tradeConfigServlet = new TradeConfigServlet();
    // Setup input parameters
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("1000");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("100");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    // Call the method under test
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify the configurations are set correctly
    // Verify that the parameters were accessed as expected
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(100, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_4() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    tradeConfigServlet = new TradeConfigServlet();
    // Setup input parameters
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("1000");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("100");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    // Call the method under test
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify the configurations are set correctly
    // Verify that the parameters were accessed as expected
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(1000, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_5() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    tradeConfigServlet = new TradeConfigServlet();
    // Setup input parameters
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("1000");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("100");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    // Call the method under test
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify the configurations are set correctly
    // Verify that the parameters were accessed as expected
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(5, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_6() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    tradeConfigServlet = new TradeConfigServlet();
    // Setup input parameters
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("1000");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("100");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    // Call the method under test
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify the configurations are set correctly
    // Verify that the parameters were accessed as expected
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(100, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_7() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    tradeConfigServlet = new TradeConfigServlet();
    // Setup input parameters
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("1000");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("100");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    // Call the method under test
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify the configurations are set correctly
    // Verify that the parameters were accessed as expected
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertTrue(TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_8() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    tradeConfigServlet = new TradeConfigServlet();
    // Setup input parameters
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("1000");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("100");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    // Call the method under test
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify the configurations are set correctly
    // Verify that the parameters were accessed as expected
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(10, TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_9() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    tradeConfigServlet = new TradeConfigServlet();
    // Setup input parameters
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("1000");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("100");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    // Call the method under test
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify the configurations are set correctly
    // Verify that the parameters were accessed as expected
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertTrue(TradeConfig.getLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_10() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    tradeConfigServlet = new TradeConfigServlet();
    // Setup input parameters
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("1000");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("100");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    // Call the method under test
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify the configurations are set correctly
    // Verify that the parameters were accessed as expected
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertTrue(TradeConfig.getDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_OrderProcessingMode_Valid_YWCI0() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(1, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_OrderProcessingMode_Invalid_nSwK1() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("OrderProcessingMode")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_WebInterface_Valid_TTbn2() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("WebInterface")).thenReturn("2");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(2, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_WebInterface_Invalid_nAcw3() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("WebInterface")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MaxUsers_Valid_pzlF4() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("MaxUsers")).thenReturn("100");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(100, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MaxUsers_Invalid_Dpfw5() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("MaxUsers")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MaxQuotes_Valid_KWSM6() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("MaxQuotes")).thenReturn("1000");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(1000, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MaxQuotes_Invalid_XVqT7() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("MaxQuotes")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MarketSummaryInterval_Valid_lXUP8() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("marketSummaryInterval")).thenReturn("15");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(15, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MarketSummaryInterval_Invalid_XvpW9() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("marketSummaryInterval")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_PrimIterations_Valid_vmSG10() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("primIterations")).thenReturn("100");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(100, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_PrimIterations_Invalid_Dnio11() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("primIterations")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_EnablePublishQuotePriceChange_True_hBdk12() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertTrue(TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_EnablePublishQuotePriceChange_False_XSre13() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertFalse(TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_ListQuotePriceChangeFrequency_Valid_yffa14() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("20");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(20, TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_ListQuotePriceChangeFrequency_Invalid_ZVAZ15() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_EnableLongRun_True_rdvs16() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("EnableLongRun")).thenReturn("true");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertTrue(TradeConfig.getLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_EnableLongRun_False_NQlk17() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("EnableLongRun")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertFalse(TradeConfig.getLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_DisplayOrderAlerts_True_dLzl18() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertTrue(TradeConfig.getDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_DisplayOrderAlerts_False_NrTo19() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("DisplayOrderAlerts")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertFalse(TradeConfig.getDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithBuildDBTablesActionAndDB2_stbO4_oXSr0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("buildDBTables");
    try {
      when(dbUtils.checkDBProductName()).thenReturn("DB2/");
    } catch (Exception e) {
      e.printStackTrace();
    }
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithBuildDBTablesActionAndDerby_JKHS5_IzTn0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("buildDBTables");
    try {
      when(dbUtils.checkDBProductName()).thenReturn("Apache Derby");
    } catch (Exception e) {
      e.printStackTrace();
    }
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithBuildDBTablesActionAndOracle_CuZh6_oOoV0() throws ServletException, IOException, Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("buildDBTables");
    try {
      when(dbUtils.checkDBProductName()).thenReturn("Oracle");
    } catch (Exception e) {
      e.printStackTrace();
    }
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithBuildDBTablesActionAndOther_jJol7_ucLO0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("buildDBTables");
    try {
      when(dbUtils.checkDBProductName()).thenReturn("MySQL");
    } catch (Exception e) {
      e.printStackTrace();
    }
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
    verify(resp).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    tradeConfigServlet = new TradeConfigServlet();
    // Setup input parameters
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("1000");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("100");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    // Call the method under test
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify the configurations are set correctly
    assertEquals(1, TradeConfig.getOrderProcessingMode());
    assertEquals(1, TradeConfig.getWebInterface());
    assertEquals(100, TradeConfig.getMAX_USERS());
    assertEquals(1000, TradeConfig.getMAX_QUOTES());
    assertEquals(5, TradeConfig.getMarketSummaryInterval());
    assertEquals(100, TradeConfig.getPrimIterations());
    assertTrue(TradeConfig.getPublishQuotePriceChange());
    assertEquals(10, TradeConfig.getListQuotePriceChangeFrequency());
    assertTrue(TradeConfig.getLongRun());
    assertTrue(TradeConfig.getDisplayOrderAlerts());
    // Verify that the parameters were accessed as expected
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
  }
}