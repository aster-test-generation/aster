/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_TradeConfig_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNames_XEpf0() {
    String[] expected = {"Full EJB3", "MODE2", "MODE3"}; // Assuming these are the runtime modes
    String[] actual = TradeConfig.getRunTimeModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForBuy_rThC0() {
    BigDecimal expectedFee = new BigDecimal("10.00"); // Assuming orderFee is24.95
    BigDecimal result = TradeConfig.getOrderFee("BUY");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForSell_LEYH1() {
    BigDecimal expectedFee = new BigDecimal("10.00"); // Assuming orderFee is24.95
    BigDecimal result = TradeConfig.getOrderFee("SELL");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForInvalidType_call2() {
    BigDecimal expectedFee = new BigDecimal("5.00"); // Assuming cashFee is0.0
    BigDecimal result = TradeConfig.getOrderFee("RENT");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_NewUser_DZOI0() {
    boolean newUser = true;
    char result = TradeConfig.getScenarioAction(newUser);
    assertTrue(new char[]{'a', 'b', 'c', 's'}.toString().contains(String.valueOf(result)));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_initialCount_pqwG0() {
    String result = TradeConfig.nextUserID();
    assertEquals("uid:1", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_wrapAround_DbvB1() {
    for (int i = 0; i < 100; i++) {
      TradeConfig.nextUserID(); // increment userID_count to MAX_USERS
    }
    String result = TradeConfig.nextUserID();
    assertEquals("uid:2", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_ZqWB0() {
    String[] expected = new String[]{"JSP", "Interface2", "Interface3"};
    assertArrayEquals(expected, TradeConfig.getWebInterfaceNames());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_Ajxs0() {
    String[] expected = {"Sync", "Automatic", "Semi-Automatic"};
    String[] actual = TradeConfig.getOrderProcessingModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RandomUser_kxWk0() {
    TradeConfig.RND_USER = true;
    String expectedUserID = "random123";
    TradeConfig mockTradeConfig = mock(TradeConfig.class);
    when(mockTradeConfig.rndUserID()).thenReturn(expectedUserID);
    String result = TradeConfig.getUserID();
    assertEquals(expectedUserID, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCount_wHtV0() {
    int expected = 6; // Assuming default scenario count is6
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidOrderProcessingMode_QJiy3_Gmni0() {
    TradeConfig.setConfigParam("orderProcessingMode", "validMode");
    assertEquals(0, TradeConfig.getOrderProcessingMode()); // Assuming validMode corresponds to index1
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidAccessMode_Rxdy5_LLyc0() {
    TradeConfig.setConfigParam("accessMode", "validAccessMode");
    assertEquals(0, TradeConfig.getAccessMode()); // Assuming validAccessMode corresponds to index5
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidWebInterface_OfAf7_kiOF0() {
    TradeConfig.setConfigParam("WebInterface", "validInterface");
    assertEquals(0, TradeConfig.getWebInterface()); // Assuming validInterface corresponds to index5
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessMode_bZka0_fid1() {
    int expectedMode = 0; // Assuming default or previously set value
    int actualMode = TradeConfig.getAccessMode();
    assertEquals(expectedMode, actualMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_izav0_fid1() {
    int expected = 0; // Assuming default or preset value
    int actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNames_XEpf0_fid1() {
    String[] expected = {"MODE1", "MODE2", "MODE3"}; // Assuming these are the runtime modes
    String[] actual = TradeConfig.getRunTimeModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_MQSk0_fid1() {
    int expected = 0; // Assuming default or preset value of primIterations
    int actual = TradeConfig.getPrimIterations();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_Qggz0_fid1() {
    int expected = 100; // Assuming the expected MAX_USERS is 100
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_SEyk0_fid1() {
    int expected = 100; // Assuming MAX_QUOTES is set to 100
    assertEquals(expected, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongRunDefault_MNFm0_fid1() {
    boolean expected = false; // Assuming default value of longRun is false
    boolean actual = TradeConfig.getLongRun();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDisplayOrderAlerts_LwXV0_fid1() {
    boolean expected = false; // Assuming default or expected state
    boolean actual = TradeConfig.getDisplayOrderAlerts();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_krkK0_fid1() {
    int expectedFrequency = 1000; // Assuming 1000 is the expected frequency set elsewhere in the application
    int actualFrequency = TradeConfig.getListQuotePriceChangeFrequency();
    assertEquals(expectedFrequency, actualFrequency);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_lcZx0_fid1() {
    int expected = 100; // Assuming MAX_HOLDINGS is set to 100
    int actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForBuy_rThC0_fid1() {
    BigDecimal expectedFee = new BigDecimal("10.00"); // Assuming orderFee is 10.00
    BigDecimal result = TradeConfig.getOrderFee("BUY");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForSell_LEYH1_fid1() {
    BigDecimal expectedFee = new BigDecimal("10.00"); // Assuming orderFee is 10.00
    BigDecimal result = TradeConfig.getOrderFee("SELL");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForInvalidType_call2_fid1() {
    BigDecimal expectedFee = new BigDecimal("5.00"); // Assuming cashFee is 5.00
    BigDecimal result = TradeConfig.getOrderFee("RENT");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_ExistingUserActionB_XcZi1_fid1() {
    boolean newUser = false;
    char result = TradeConfig.getScenarioAction(newUser);
    assertEquals('s', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_initialCount_pqwG0_fid1() {
    String result = TradeConfig.nextUserID();
    assertEquals("uid:0", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_wrapAround_DbvB1_fid1() {
    for (int i = 0; i < 100; i++) {
      TradeConfig.nextUserID(); // increment userID_count to MAX_USERS
    }
    String result = TradeConfig.nextUserID();
    assertEquals("uid:0", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPageWithValidIndex_kFUi0_fid1() {
    String expectedPageContent = "Expected content of the page";
    int testPageIndex = 1; // Assuming this index is valid and within the range of webUI[webInterface] array
    assertEquals(expectedPageContent, TradeConfig.getPage(testPageIndex));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_ZqWB0_fid1() {
    String[] expected = new String[]{"Interface1", "Interface2", "Interface3"};
    assertArrayEquals(expected, TradeConfig.getWebInterfaceNames());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePrices_pzCr0_fid1() {
    boolean expected = false; // Assuming the default state of updateQuotePrices is false
    boolean actual = TradeConfig.getUpdateQuotePrices();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_Gpuk0_fid1() {
    boolean expected = false; // Assuming default or expected state
    boolean actual = TradeConfig.getPublishQuotePriceChange();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterface_SyeE0_fid1() {
    int expected = 0; // Assuming default or expected value of webInterface
    int actual = TradeConfig.getWebInterface();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_Ajxs0_fid1() {
    String[] expected = {"Manual", "Automatic", "Semi-Automatic"};
    String[] actual = TradeConfig.getOrderProcessingModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCount_wHtV0_fid1() {
    int expected = 0; // Assuming default scenario count is 0
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_kYuN0_fid1() {
    int expectedMode = 1; // Assuming 1 is a valid runtime mode for the test scenario
    assertEquals(expectedMode, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidAccessMode_Rxdy5_LLyc0_fid3() {
    TradeConfig.setConfigParam("accessMode", "validAccessMode");
    assertEquals(0, TradeConfig.getAccessMode()); // Assuming validAccessMode corresponds to index 0
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidAccessMode_FCLM6_DBcb0() {
    TradeConfig.setConfigParam("accessMode", "invalidAccessMode");
    assertEquals(0, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidWebInterface_OfAf7_kiOF0_fid3() {
    TradeConfig.setConfigParam("WebInterface", "validInterface");
    assertEquals(0, TradeConfig.getWebInterface()); // Assuming validInterface corresponds to index 0
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidWebInterface_QHhl8_kXnv0() {
    TradeConfig.setConfigParam("WebInterface", "invalidInterface");
    assertEquals(0, TradeConfig.getWebInterface());
  }
}