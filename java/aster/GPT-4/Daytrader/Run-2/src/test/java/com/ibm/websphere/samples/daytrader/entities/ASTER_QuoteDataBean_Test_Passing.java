/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_JNKm0_1() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_JNKm0_2() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_JNKm0_3() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertTrue(quoteDataBean.getCompanyName().contains("Incorporated"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_JNKm0_4() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertTrue(quoteDataBean.getVolume() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_JNKm0_5() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_JNKm0_6() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_JNKm0_7() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_JNKm0_8() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_JNKm0_9() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertTrue(quoteDataBean.getChange() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyName_BtVB0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("150.00"), new BigDecimal("148.00"), new BigDecimal("147.00"), new BigDecimal("151.00"), 2.5);
    assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNonNullSymbol_eVTD0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    int expectedHashCode = "AAPL".hashCode();
    assertEquals(expectedHashCode, quoteDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullSymbol_KBQp1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    assertEquals(0, quoteDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_Crwo0() {
    BigDecimal expectedPrice = new BigDecimal("150.00");
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, expectedPrice, new BigDecimal("148.00"), new BigDecimal("147.00"), new BigDecimal("151.00"), 2.5);
    BigDecimal actualPrice = quoteDataBean.getPrice();
    assertEquals(expectedPrice, actualPrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_xchR0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 5000000, new BigDecimal("150.50"), new BigDecimal("151.00"), new BigDecimal("148.20"), new BigDecimal("152.30"), 1.25);
    String expectedHTML = "<BR>Quote Data for: AAPL<LI> companyName: Apple Inc.</LI><LI>      volume: 5000000.0</LI><LI>       price: 150.50</LI><LI>        open1: 151.00</LI><LI>         low: 148.20</LI><LI>        high: 152.30</LI><LI>      change1: 1.25</LI>";
    assertEquals(expectedHTML, quoteDataBean.toHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_OkzR0() {
    BigDecimal expectedOpen = new BigDecimal("150.00");
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("145.00"), expectedOpen, new BigDecimal("140.00"), new BigDecimal("155.00"), 5.00);
    assertEquals(expectedOpen, quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLow_kPOP0() {
    BigDecimal expectedLow = new BigDecimal("100.00");
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 5000, new BigDecimal("150.00"), new BigDecimal("155.00"), expectedLow, new BigDecimal("160.00"), 1.5);
    assertEquals(expectedLow, quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChange_QQvf0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 5000000, new BigDecimal("150.50"), new BigDecimal("151.00"), new BigDecimal("148.20"), new BigDecimal("152.30"), 1.25);
    assertEquals(1.25, quoteDataBean.getChange(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHigh_FCky0() {
    BigDecimal expectedHigh = new BigDecimal("150.00");
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("145.00"), new BigDecimal("140.00"), new BigDecimal("138.00"), expectedHigh, 5.00);
    BigDecimal actualHigh = quoteDataBean.getHigh();
    assertEquals(expectedHigh, actualHigh);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_shGt0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal expectedPrice = new BigDecimal("100.00");
    quoteDataBean.setPrice(expectedPrice);
    assertEquals(expectedPrice, quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_TDFx0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    assertTrue(quoteDataBean.equals(quoteDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_KPEf1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    Object otherObject = new Object();
    assertFalse(quoteDataBean.equals(otherObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_OgKf2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    assertFalse(quoteDataBean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentSymbol_lHmC3() {
    QuoteDataBean quoteDataBean1 = new QuoteDataBean("AAPL");
    QuoteDataBean quoteDataBean2 = new QuoteDataBean("MSFT");
    assertFalse(quoteDataBean1.equals(quoteDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameSymbol_HCtg4() {
    QuoteDataBean quoteDataBean1 = new QuoteDataBean("AAPL");
    QuoteDataBean quoteDataBean2 = new QuoteDataBean("AAPL");
    assertTrue(quoteDataBean1.equals(quoteDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_cXkM0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    String expected = "AAPL";
    String actual = quoteDataBean.getSymbol();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolume_uKAU0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1500000, new BigDecimal("150.00"), new BigDecimal("148.00"), new BigDecimal("147.50"), new BigDecimal("151.00"), 2.5);
    assertEquals(1500000, quoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_XhSB0_FWRN0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHigh_bglc0_lZwU0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal expectedHigh = new BigDecimal("150.00");
    quoteDataBean.setHigh(expectedHigh);
    assertEquals(expectedHigh, quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolume_UONJ0_pHLa0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    double expectedVolume = 1500.0;
    quoteDataBean.setVolume(expectedVolume);
    assertEquals(expectedVolume, quoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpen_Rman0_qHRB0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal expectedOpen = new BigDecimal("123.45");
    quoteDataBean.setOpen(expectedOpen);
    assertEquals(expectedOpen, quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetChange_zRpD0_DNBQ0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    double expectedChange = 5.0;
    quoteDataBean.setChange(expectedChange);
    assertEquals(expectedChange, quoteDataBean.getChange(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow_RNBw0_BDrN0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal expectedLow = new BigDecimal("100.00");
    quoteDataBean.setLow(expectedLow);
    assertEquals(expectedLow, quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompanyName_dQOa0_bwMl0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setCompanyName("Test Company");
    assertEquals("Test Company", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_JNKm0() {
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    assertNotNull(quoteDataBean);
    assertNotNull(quoteDataBean.getSymbol());
    assertTrue(quoteDataBean.getCompanyName().contains("Incorporated"));
    assertTrue(quoteDataBean.getVolume() >= 0);
    assertNotNull(quoteDataBean.getPrice());
    assertNotNull(quoteDataBean.getOpen());
    assertNotNull(quoteDataBean.getLow());
    assertNotNull(quoteDataBean.getHigh());
    assertTrue(quoteDataBean.getChange() >= 0);
  }
}