/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrderDataJSF_Test_Passing {
  @Mock
  private TradeServices tradeAction;
  @Mock
  private ExternalContext context;
  @Mock
  private HttpSession session;
  @InjectMocks
  private OrderDataJSF orderDataJSF;
  @Mock
  private HttpSession httpSession;
  @Mock
  private ExternalContext externalContext;
  private OrderData orderData;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrderWithEmptySession_pKGG0() {
    HttpSession session = mock(HttpSession.class);
    when(session.getAttribute("uidBean")).thenReturn(null);
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    orderDataJSF.getAllOrder();
    OrderData[] orders = orderDataJSF.getAllOrders();
    assertNotNull(orders);
    assertEquals(0, orders.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrders_YWqI0() {
    OrderDataJSF orderDataJSF = new OrderDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    OrderData[] result = orderDataJSF.getAllOrders();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrderWithEmptySession_pKGG0_1() {
    HttpSession session = mock(HttpSession.class);
    when(session.getAttribute("uidBean")).thenReturn(null);
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    orderDataJSF.getAllOrder();
    OrderData[] orders = orderDataJSF.getAllOrders();
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrderWithEmptySession_pKGG0_2() {
    HttpSession session = mock(HttpSession.class);
    when(session.getAttribute("uidBean")).thenReturn(null);
    Instance<TradeServices> services = mock(Instance.class);
    TradeServices tradeServices = mock(TradeServices.class);
    when(services.get()).thenReturn(tradeServices);
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    orderDataJSF.getAllOrder();
    OrderData[] orders = orderDataJSF.getAllOrders();
    assertEquals(0, orders.length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderData_PGKb0_fxYV0() {
    Instance<TradeServices> services = Mockito.mock(Instance.class);
    OrderDataJSF orderDataJSF = new OrderDataJSF(services);
    OrderData result = orderDataJSF.getOrderData();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderData_JSdO0_Lsje0() {
    Instance<TradeServices> servicesInstance = mock(Instance.class);
    OrderDataJSF orderDataJSF = new OrderDataJSF(servicesInstance);
    OrderData orderData = new OrderData(1, "Pending", new java.util.Date(), null, new BigDecimal("100.00"), "Buy", 50.0, "AAPL");
    orderDataJSF.setOrderData(orderData);
    assertEquals(orderData, orderDataJSF.getOrderData());
  }
}