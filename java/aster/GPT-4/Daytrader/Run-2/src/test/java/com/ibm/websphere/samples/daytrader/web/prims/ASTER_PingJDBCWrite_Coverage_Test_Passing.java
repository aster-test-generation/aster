/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import org.mockito.Mockito;
public class Aster_PingJDBCWrite_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_GLns0() {
        PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
        String expectedInfo = "Basic JDBC Write using a prepared statment makes use of TradeJDBC code.";
        assertEquals(expectedInfo, pingJDBCWrite.getServletInfo());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostCallsDoGet_ZVly0() throws Exception {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
        PingJDBCWrite spyPingJDBCWrite = spy(pingJDBCWrite);
        spyPingJDBCWrite.doPost(request, response);
        verify(spyPingJDBCWrite).doGet(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostCompletesWithoutException_jMHd1() throws Exception {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
        pingJDBCWrite.doPost(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCallsSuperInit_EakD0() throws ServletException {
        ServletConfig config = Mockito.mock(ServletConfig.class);
        PingJDBCWrite pingJDBCWrite = Mockito.spy(new PingJDBCWrite());
        pingJDBCWrite.init(config);
        Mockito.verify(pingJDBCWrite).init(config);
    }


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCompletesWithoutException_LJIG3() throws javax.servlet.ServletException {
        ServletConfig config = Mockito.mock(ServletConfig.class);
        PingJDBCWrite pingJDBCWrite = new PingJDBCWrite();
        try {
            pingJDBCWrite.init(config);
        } catch (ServletException e) {
            assert false : "Init method should not throw ServletException";
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_ClosingBrace_XBDA0() throws javax.servlet.ServletException, java.io.IOException {
        PingJDBCWrite servlet = new PingJDBCWrite();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        try {
            servlet.doGet(req, res);
        } catch (Exception e) {
            fail("Method should not throw an exception");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_StringSymbolInitialization_jlhL1() throws javax.servlet.ServletException, java.io.IOException {
        PingJDBCWrite servlet = new PingJDBCWrite();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        try {
            servlet.doGet(req, res);
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SetContentType_WarI3() throws javax.servlet.ServletException, java.io.IOException {
        PingJDBCWrite servlet = new PingJDBCWrite();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        try {
            servlet.doGet(req, res);
            verify(res).setContentType("text/html");
        } catch (Exception e) {
            fail("Exception should not be thrown");
        }
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_SendError_QIRD15() throws javax.servlet.ServletException, java.io.IOException {
        PingJDBCWrite servlet = new PingJDBCWrite();
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        try {
            doThrow(new ServletException()).when(req).getParameter(anyString());
            servlet.doGet(req, res);
        } catch (Exception e) {
        }
        try {
            verify(res).sendError(500, "PingJDBCWrite Exception caught: " + anyString());
        } catch (IOException e) {
            fail("IOException should not be thrown during verification");
        }
    }
}