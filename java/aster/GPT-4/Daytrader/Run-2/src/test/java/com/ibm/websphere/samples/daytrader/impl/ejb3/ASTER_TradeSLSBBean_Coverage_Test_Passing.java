/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collection;
import javax.jms.*;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import org.mockito.Mock;
import org.mockito.Mockito;
import static org.springframework.test.util.ReflectionTestUtils.setField;
public class Aster_TradeSLSBBean_Coverage_Test_Passing {
    private TradeSLSBBean tradeSLSBBean;
    private EntityManager entityManager;
    private TypedQuery<QuoteDataBean> query;

    @Mock
    private QueueConnectionFactory queueConnectionFactory;
    @Mock
    private JMSContext jmsContext;
    @Mock
    private TextMessage textMessage;
    @Mock
    private JMSProducer jmsProducer;
    @Mock
    private Queue tradeBrokerQueue;
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrder_WithException_opKJ2() {
        when(queueConnectionFactory.createContext()).thenThrow(new RuntimeException("Connection error"));
        tradeSLSBBean.queueOrder(123, true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetMarketSummary_QtGm0() {
        MarketSummarySingleton mockSingleton = mock(MarketSummarySingleton.class);
        MarketSummaryDataBean expectedMarketSummary = new MarketSummaryDataBean();
        when(mockSingleton.getMarketSummaryDataBean()).thenReturn(expectedMarketSummary);
        TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
        setField(tradeSLSBBean, "marketSummarySingleton", mockSingleton); // Assuming there's a setter or reflection used to set the private field
        MarketSummaryDataBean result = tradeSLSBBean.getMarketSummary();
        verify(mockSingleton).getMarketSummaryDataBean();
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_pssc0() {
        tradeSLSBBean = new TradeSLSBBean();
        entityManager = mock(EntityManager.class);
        query = mock(TypedQuery.class);
        when(entityManager.createNamedQuery("quoteejb.allQuotes", QuoteDataBean.class)).thenReturn(query);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesReturnsData_JVMa1_1() {
        QuoteDataBean quote1 = new QuoteDataBean();
        QuoteDataBean quote2 = new QuoteDataBean();
        when(query.getResultList()).thenReturn(Arrays.asList(quote1, quote2));
        Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
        verify(entityManager).createNamedQuery("quoteejb.allQuotes", QuoteDataBean.class);
        verify(query).getResultList();
        assertNotNull(result);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesReturnsData_JVMa1_2() {
        QuoteDataBean quote1 = new QuoteDataBean();
        QuoteDataBean quote2 = new QuoteDataBean();
        when(query.getResultList()).thenReturn(Arrays.asList(quote1, quote2));
        Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
        verify(entityManager).createNamedQuery("quoteejb.allQuotes", QuoteDataBean.class);
        verify(query).getResultList();
        assertEquals(2, result.size());}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetAllQuotesReturnsEmpty_zDbG2_1() {
        when(query.getResultList()).thenReturn(Arrays.asList());
        Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
        verify(entityManager).createNamedQuery("quoteejb.allQuotes", QuoteDataBean.class);
        verify(query).getResultList();
        assertNotNull(result);}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_CriteriaBuilderCalled_qddy1() {
    tradeSLSBBean.getHoldings("user1");
    verify(entityManager).getCriteriaBuilder();
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetHoldings_ReturnsNonNullCollection_QqFR10() {
        Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings("user1");
        assertNotNull(result);
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_UserExists_XGXu1_1() {
        String userID = "user123";
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        Collection<OrderDataBean> expectedOrders = Collections.emptyList();
        when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
        when(profile.getAccount()).thenReturn(account);
        when(account.getOrders()).thenReturn(expectedOrders);
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        verify(entityManager).find(AccountProfileDataBean.class, userID);
        verify(profile).getAccount();
        verify(account).getOrders();
        assertNotNull(orders);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_UserExists_XGXu1_2() {
        String userID = "user123";
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        Collection<OrderDataBean> expectedOrders = Collections.emptyList();
        when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
        when(profile.getAccount()).thenReturn(account);
        when(account.getOrders()).thenReturn(expectedOrders);
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        verify(entityManager).find(AccountProfileDataBean.class, userID);
        verify(profile).getAccount();
        verify(account).getOrders();
        assertEquals(expectedOrders, orders);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_UserDoesNotExist_cfIs2() {
        String userID = "userNotFound";
        when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(null);
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        assertNull(orders);
        verify(entityManager).find(AccountProfileDataBean.class, userID);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_NoOrdersForUser_Byvc3_1() {
        String userID = "user123";
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
        when(profile.getAccount()).thenReturn(account);
        when(account.getOrders()).thenReturn(Collections.emptyList());
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        verify(entityManager).find(AccountProfileDataBean.class, userID);
        verify(profile).getAccount();
        verify(account).getOrders();
        assertNotNull(orders);}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrders_NoOrdersForUser_Byvc3_2() {
        String userID = "user123";
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
        when(profile.getAccount()).thenReturn(account);
        when(account.getOrders()).thenReturn(Collections.emptyList());
        Collection<OrderDataBean> orders = tradeSLSBBean.getOrders(userID);
        verify(entityManager).find(AccountProfileDataBean.class, userID);
        verify(profile).getAccount();
        verify(account).getOrders();
        assertTrue(orders.isEmpty());}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NormalFlow_NJkM0() {
        TradeSLSBBean bean = new TradeSLSBBean();
        EntityManager em = Mockito.mock(EntityManager.class);
        TypedQuery<QuoteDataBean> query = Mockito.mock(TypedQuery.class);
        QuoteDataBean quote = Mockito.mock(QuoteDataBean.class);
        Mockito.when(em.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(query);
        Mockito.when(query.setParameter(1, "AAPL")).thenReturn(query);
        Mockito.when(query.getSingleResult()).thenReturn(quote);
        Mockito.when(quote.getPrice()).thenReturn(new BigDecimal("150"));
        Mockito.when(quote.getOpen()).thenReturn(new BigDecimal("145"));
        Mockito.when(quote.getVolume()).thenReturn(1000.0);
        bean.updateQuotePriceVolume("AAPL", new BigDecimal("1.05"), 500.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_PennyStock_NwMp1() {
        TradeSLSBBean bean = new TradeSLSBBean();
        EntityManager em = Mockito.mock(EntityManager.class);
        TypedQuery<QuoteDataBean> query = Mockito.mock(TypedQuery.class);
        QuoteDataBean quote = Mockito.mock(QuoteDataBean.class);
        Mockito.when(em.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(query);
        Mockito.when(query.setParameter(1, "PENNY")).thenReturn(query);
        Mockito.when(query.getSingleResult()).thenReturn(quote);
        Mockito.when(quote.getPrice()).thenReturn(TradeConfig.PENNY_STOCK_PRICE);
        Mockito.when(quote.getOpen()).thenReturn(new BigDecimal("0.01"));
        Mockito.when(quote.getVolume()).thenReturn(1000.0);
        bean.updateQuotePriceVolume("PENNY", new BigDecimal("1.00"), 500.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_MaximumStockPrice_DvaS2() {
        TradeSLSBBean bean = new TradeSLSBBean();
        EntityManager em = Mockito.mock(EntityManager.class);
        TypedQuery<QuoteDataBean> query = Mockito.mock(TypedQuery.class);
        QuoteDataBean quote = Mockito.mock(QuoteDataBean.class);
        Mockito.when(em.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(query);
        Mockito.when(query.setParameter(1, "MAXP")).thenReturn(query);
        Mockito.when(query.getSingleResult()).thenReturn(quote);
        Mockito.when(quote.getPrice()).thenReturn(TradeConfig.MAXIMUM_STOCK_PRICE.add(BigDecimal.ONE));
        Mockito.when(quote.getOpen()).thenReturn(new BigDecimal("1000"));
        Mockito.when(quote.getVolume()).thenReturn(1000.0);
        bean.updateQuotePriceVolume("MAXP", new BigDecimal("1.00"), 500.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_NoPriceChangePublishing_NawD3() {
        TradeSLSBBean bean = new TradeSLSBBean();
        EntityManager em = Mockito.mock(EntityManager.class);
        TypedQuery<QuoteDataBean> query = Mockito.mock(TypedQuery.class);
        QuoteDataBean quote = Mockito.mock(QuoteDataBean.class);
        Mockito.when(em.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(query);
        Mockito.when(query.setParameter(1, "NOPUB")).thenReturn(query);
        Mockito.when(query.getSingleResult()).thenReturn(quote);
        Mockito.when(quote.getPrice()).thenReturn(new BigDecimal("200"));
        Mockito.when(quote.getOpen()).thenReturn(new BigDecimal("195"));
        Mockito.when(quote.getVolume()).thenReturn(1000.0);
        Mockito.when(TradeConfig.getPublishQuotePriceChange()).thenReturn(false);
        bean.updateQuotePriceVolume("NOPUB", new BigDecimal("1.05"), 500.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_WithPriceChangePublishing_tAdO4() {
        TradeSLSBBean bean = new TradeSLSBBean();
        EntityManager em = Mockito.mock(EntityManager.class);
        TypedQuery<QuoteDataBean> query = Mockito.mock(TypedQuery.class);
        QuoteDataBean quote = Mockito.mock(QuoteDataBean.class);
        Mockito.when(em.createNamedQuery("quoteejb.quoteForUpdate", QuoteDataBean.class)).thenReturn(query);
        Mockito.when(query.setParameter(1, "WITHPUB")).thenReturn(query);
        Mockito.when(query.getSingleResult()).thenReturn(quote);
        Mockito.when(quote.getPrice()).thenReturn(new BigDecimal("250"));
        Mockito.when(quote.getOpen()).thenReturn(new BigDecimal("245"));
        Mockito.when(quote.getVolume()).thenReturn(1000.0);
        Mockito.when(TradeConfig.getPublishQuotePriceChange()).thenReturn(true);
        bean.updateQuotePriceVolume("WITHPUB", new BigDecimal("1.05"), 500.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_InitializeQuoteData_RKRS0() throws Exception {
        TradeSLSBBean bean = new TradeSLSBBean();
        bean.pingTwoPhase("AAPL");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingTwoPhase_FindQuoteData_wDnY2() throws Exception {
        EntityManager em = mock(EntityManager.class);
        when(em.find(QuoteDataBean.class, "AAPL")).thenReturn(new QuoteDataBean());
        TradeSLSBBean bean = new TradeSLSBBean();
        bean.pingTwoPhase("AAPL");
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_FindProfile_kbIQ0() {
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        EntityManager entityManager = mock(EntityManager.class);
        when(entityManager.find(AccountProfileDataBean.class, "userID1")).thenReturn(new AccountProfileDataBean());
        tradeBean.buy("userID1", "SYM", 100.0, TradeConfig.SYNCH);
        verify(entityManager).find(AccountProfileDataBean.class, "userID1");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_GetAccountFromProfile_XrvR1() {
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        when(profile.getAccount()).thenReturn(new AccountDataBean());
        tradeBean.buy("userID2", "SYM", 100.0, TradeConfig.SYNCH);
        verify(profile).getAccount();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_FindQuote_ZiUj2() {
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        EntityManager entityManager = mock(EntityManager.class);
        when(entityManager.find(QuoteDataBean.class, "SYM")).thenReturn(new QuoteDataBean());
        tradeBean.buy("userID3", "SYM", 100.0, TradeConfig.SYNCH);
        verify(entityManager).find(QuoteDataBean.class, "SYM");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_CreateOrder_Cozz3() {
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        QuoteDataBean quote = new QuoteDataBean();
        tradeBean.buy("userID4", "SYM", 100.0, TradeConfig.SYNCH);
        verify(tradeBean).createOrder(account, quote, null, "buy", 100.0);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_CalculateTotal_mfwN4() {
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        QuoteDataBean quote = new QuoteDataBean();
        quote.setPrice(new BigDecimal("10.00"));
        OrderDataBean order = new OrderDataBean();
        order.setOrderFee(new BigDecimal("5.00"));
        AccountDataBean account = new AccountDataBean();
        account.setBalance(new BigDecimal("1000.00"));
        tradeBean.buy("userID5", "SYM", 10.0, TradeConfig.SYNCH);
        BigDecimal expectedTotal = new BigDecimal("105.00"); // 10 * 10.00 + 5.00
        BigDecimal newBalance = new BigDecimal("895.00"); // 1000.00 - 105.00
        assertEquals(newBalance, account.getBalance());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_SetNewBalance_FcSC5() {
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        AccountDataBean account = new AccountDataBean();
        account.setBalance(new BigDecimal("1000.00"));
        tradeBean.buy("userID6", "SYM", 10.0, TradeConfig.SYNCH);
        BigDecimal expectedNewBalance = new BigDecimal("895.00"); // Assuming total is 105.00 as calculated above
        assertEquals(expectedNewBalance, account.getBalance());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_GetOrderID_slKm6() {
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        OrderDataBean order = new OrderDataBean();
        tradeBean.buy("userID7", "SYM", 10.0, TradeConfig.SYNCH);
        assertNotNull(order.getOrderID());
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_QueueOrder_ASYNCH_2PHASE_hIsU9() {
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        tradeBean.buy("userID10", "SYM", 10.0, TradeConfig.ASYNCH_2PHASE);
        verify(tradeBean).queueOrder(anyInt(), eq(true));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ReturnOrder_nRQm10() {
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        OrderDataBean expectedOrder = new OrderDataBean();
        OrderDataBean result = tradeBean.buy("userID11", "SYM", 10.0, TradeConfig.SYNCH);
        assertEquals(expectedOrder, result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_UserNotFound_RfCw0() {
        EntityManager entityManager = mock(EntityManager.class);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(null);
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        tradeBean.sell("user123", 1, TradeConfig.SYNCH);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_AccountNotFound_wQFS1() {
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        when(profile.getAccount()).thenReturn(null);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        tradeBean.sell("user123", 1, TradeConfig.SYNCH);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_HoldingNotFound_ZjvE2() {
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(null);
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        tradeBean.sell("user123", 1, TradeConfig.SYNCH);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_OrderCancelled_lekK3() {
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(null);
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        OrderDataBean result = tradeBean.sell("user123", 1, TradeConfig.SYNCH);
        assertEquals("cancelled", result.getOrderStatus());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_QuoteRetrieved_fdnK4() {
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        HoldingDataBean holding = mock(HoldingDataBean.class);
        QuoteDataBean quote = mock(QuoteDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
        when(holding.getQuote()).thenReturn(quote);
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        tradeBean.sell("user123", 1, TradeConfig.SYNCH);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_OrderCreated_VJQQ5() {
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        HoldingDataBean holding = mock(HoldingDataBean.class);
        QuoteDataBean quote = mock(QuoteDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
        when(holding.getQuote()).thenReturn(quote);
        when(holding.getQuantity()).thenReturn(100.0);
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        tradeBean.sell("user123", 1, TradeConfig.SYNCH);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_PurchaseDateReset_Hhxe6() {
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        HoldingDataBean holding = mock(HoldingDataBean.class);
        QuoteDataBean quote = mock(QuoteDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
        when(holding.getQuote()).thenReturn(quote);
        when(holding.getQuantity()).thenReturn(100.0);
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        tradeBean.sell("user123", 1, TradeConfig.SYNCH);
        verify(holding).setPurchaseDate(new Timestamp(0));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_TotalCalculated_KcMh7() {
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        HoldingDataBean holding = mock(HoldingDataBean.class);
        QuoteDataBean quote = mock(QuoteDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
        when(holding.getQuote()).thenReturn(quote);
        when(holding.getQuantity()).thenReturn(100.0);
        when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        tradeBean.sell("user123", 1, TradeConfig.SYNCH);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_BalanceUpdated_iocs8() {
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        HoldingDataBean holding = mock(HoldingDataBean.class);
        QuoteDataBean quote = mock(QuoteDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
        when(holding.getQuote()).thenReturn(quote);
        when(holding.getQuantity()).thenReturn(100.0);
        when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
        when(account.getBalance()).thenReturn(new BigDecimal("1000.00"));
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        tradeBean.sell("user123", 1, TradeConfig.SYNCH);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_OrderCompleted_ASYNCH_aEYi10() {
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        HoldingDataBean holding = mock(HoldingDataBean.class);
        QuoteDataBean quote = mock(QuoteDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
        when(holding.getQuote()).thenReturn(quote);
        when(holding.getQuantity()).thenReturn(100.0);
        when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
        when(account.getBalance()).thenReturn(new BigDecimal("1000.00"));
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        tradeBean.sell("user123", 1, TradeConfig.ASYNCH);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_OrderQueued_ASYNCH_2PHASE_AtyP11() {
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        HoldingDataBean holding = mock(HoldingDataBean.class);
        QuoteDataBean quote = mock(QuoteDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
        when(holding.getQuote()).thenReturn(quote);
        when(holding.getQuantity()).thenReturn(100.0);
        when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
        when(account.getBalance()).thenReturn(new BigDecimal("1000.00"));
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        tradeBean.sell("user123", 1, TradeConfig.ASYNCH_2PHASE);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSell_ReturnOrder_MsiX12() {
        EntityManager entityManager = mock(EntityManager.class);
        AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
        AccountDataBean account = mock(AccountDataBean.class);
        HoldingDataBean holding = mock(HoldingDataBean.class);
        QuoteDataBean quote = mock(QuoteDataBean.class);
        when(profile.getAccount()).thenReturn(account);
        when(entityManager.find(AccountProfileDataBean.class, "user123")).thenReturn(profile);
        when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
        when(holding.getQuote()).thenReturn(quote);
        when(holding.getQuantity()).thenReturn(100.0);
        when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
        when(account.getBalance()).thenReturn(new BigDecimal("1000.00"));
        TradeSLSBBean tradeBean = new TradeSLSBBean();
        OrderDataBean result = tradeBean.sell("user123", 1, TradeConfig.SYNCH);
        assertNotNull(result);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_CriteriaBuilder_mXna0() {
        EntityManager entityManager = Mockito.mock(EntityManager.class);
        CriteriaBuilder criteriaBuilder = Mockito.mock(CriteriaBuilder.class);
        Mockito.when(entityManager.getCriteriaBuilder()).thenReturn(criteriaBuilder);
        TradeSLSBBean bean = new TradeSLSBBean();
        bean.getClosedOrders("user123");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_CriteriaQuery_BlGV1() {
        EntityManager entityManager = Mockito.mock(EntityManager.class);
        CriteriaBuilder criteriaBuilder = Mockito.mock(CriteriaBuilder.class);
        CriteriaQuery<OrderDataBean> criteriaQuery = Mockito.mock(CriteriaQuery.class);
        Mockito.when(entityManager.getCriteriaBuilder()).thenReturn(criteriaBuilder);
        Mockito.when(criteriaBuilder.createQuery(OrderDataBean.class)).thenReturn(criteriaQuery);
        TradeSLSBBean bean = new TradeSLSBBean();
        bean.getClosedOrders("user123");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_Root_bZIH2() {
        EntityManager entityManager = Mockito.mock(EntityManager.class);
        CriteriaBuilder criteriaBuilder = Mockito.mock(CriteriaBuilder.class);
        CriteriaQuery<OrderDataBean> criteriaQuery = Mockito.mock(CriteriaQuery.class);
        Root<OrderDataBean> orders = Mockito.mock(Root.class);
        Mockito.when(entityManager.getCriteriaBuilder()).thenReturn(criteriaBuilder);
        Mockito.when(criteriaBuilder.createQuery(OrderDataBean.class)).thenReturn(criteriaQuery);
        Mockito.when(criteriaQuery.from(OrderDataBean.class)).thenReturn(orders);
        TradeSLSBBean bean = new TradeSLSBBean();
        bean.getClosedOrders("user123");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetClosedOrders_Select_NtiH3() {
        EntityManager entityManager = Mockito.mock(EntityManager.class);
        CriteriaBuilder criteriaBuilder = Mockito.mock(CriteriaBuilder.class);
        CriteriaQuery<OrderDataBean> criteriaQuery = Mockito.mock(CriteriaQuery.class);
        Root<OrderDataBean> orders = Mockito.mock(Root.class);
        Mockito.when(entityManager.getCriteriaBuilder()).thenReturn(criteriaBuilder);
        Mockito.when(criteriaBuilder.createQuery(OrderDataBean.class)).thenReturn(criteriaQuery);
        Mockito.when(criteriaQuery.from(OrderDataBean.class)).thenReturn(orders);
        Mockito.when(criteriaQuery.select(orders)).thenReturn(criteriaQuery);
        TradeSLSBBean bean = new TradeSLSBBean();
        bean.getClosedOrders("user123");
    }
}