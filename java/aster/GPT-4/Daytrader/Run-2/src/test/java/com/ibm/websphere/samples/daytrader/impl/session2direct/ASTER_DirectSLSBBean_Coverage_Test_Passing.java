/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;
import java.math.BigDecimal;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DirectSLSBBean_Coverage_Test_Passing {
private DirectSLSBBean directSLSBBean;
private TradeDirect tradeDirect;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginSetsInSession_Vzds0() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        when(mockTradeDirect.login("user1", "pass1")).thenReturn(new AccountDataBean());
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect;
        bean.login("user1", "pass1");
        verify(mockTradeDirect).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLoginReturnsCorrectAccountDataBean_tjCe1() throws Exception {
        AccountDataBean expectedBean = new AccountDataBean();
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        when(mockTradeDirect.login("user2", "pass2")).thenReturn(expectedBean);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect;
        AccountDataBean resultBean = bean.login("user2", "pass2");
        assertEquals(expectedBean, resultBean);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuotePriceVolume_KkdR0() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean directSLSBBean = new DirectSLSBBean();
        directSLSBBean.tradeDirect = mockTradeDirect;
        String symbol = "AAPL";
        BigDecimal newPrice = new BigDecimal("150.00");
        double sharesTraded = 1000.0;
        QuoteDataBean expectedQuoteDataBean = new QuoteDataBean();
        when(mockTradeDirect.updateQuotePriceVolume(symbol, newPrice, sharesTraded)).thenReturn(expectedQuoteDataBean);
        QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
        verify(mockTradeDirect).setInSession(true);
        verify(mockTradeDirect).updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOrdersSetsInSession_YPYB0() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect; // Assuming tradeDirect is accessible, might need setter method
        String userID = "user123";
        bean.getOrders(userID);
        verify(mockTradeDirect).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithValidOrder_wmzh0() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, possibly through a setter or directly if public
        Integer orderID = 123;
        boolean twoPhase = true;
        bean.cancelOrder(orderID, twoPhase);
        verify(mockTradeDirect).setInSession(true);
        verify(mockTradeDirect).cancelOrder(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCancelOrderWithTwoPhaseFalse_gyLv2() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect;
        Integer orderID = 456;
        boolean twoPhase = false;
        bean.cancelOrder(orderID, twoPhase);
        verify(mockTradeDirect).setInSession(true);
        verify(mockTradeDirect).cancelOrder(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutSetsInSessionTrue_NlOb0() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect;
        String userID = "user123";
        bean.logout(userID);
        verify(mockTradeDirect).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutCallsLogoutWithUserID_oDVr1() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect;
        String userID = "user123";
        bean.logout(userID);
        verify(mockTradeDirect).logout(userID);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogoutCompletesWithoutException_TzLC2() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect;
        String userID = "user123";
        bean.logout(userID);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithValidOrderAndTwoPhaseTrue_fODH0() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect; // Assuming tradeDirect can be accessed or injected
        Integer orderID = 123;
        boolean twoPhase = true;
        bean.queueOrder(orderID, twoPhase);
        verify(mockTradeDirect).setInSession(true);
        verify(mockTradeDirect).queueOrder(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderWithValidOrderAndTwoPhaseFalse_alFK1() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect; // Assuming tradeDirect can be accessed or injected
        Integer orderID = 456;
        boolean twoPhase = false;
        bean.queueOrder(orderID, twoPhase);
        verify(mockTradeDirect).setInSession(true);
        verify(mockTradeDirect).queueOrder(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testQueueOrderThrowsException_jppt2() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect; // Assuming tradeDirect can be accessed or injected
        Integer orderID = 789;
        boolean twoPhase = true;
        doThrow(new RuntimeException("Database down")).when(mockTradeDirect).queueOrder(orderID, twoPhase);
        try {
            bean.queueOrder(orderID, twoPhase);
            fail("Expected an exception to be thrown");
        } catch (RuntimeException e) {
            assertEquals("Database down", e.getMessage());
        }
        verify(mockTradeDirect).setInSession(true);
        verify(mockTradeDirect).queueOrder(orderID, twoPhase);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_SetsInSession_tWIo0() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect;
        bean.buy("user1", "AAPL", 100, TradeConfig.SYNCH);
        verify(mockTradeDirect).setInSession(true);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_CallsTradeDirectBuy_PTTf1() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect;
        when(mockTradeDirect.buy(anyString(), anyString(), anyDouble(), anyInt())).thenReturn(new OrderDataBean());
        bean.buy("user1", "AAPL", 100, TradeConfig.SYNCH);
        verify(mockTradeDirect).buy("user1", "AAPL", 100, TradeConfig.SYNCH);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_AsynchMode_CompletesOrderAsync_qhBP2() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect;
        OrderDataBean mockOrderData = mock(OrderDataBean.class);
        when(mockTradeDirect.buy(anyString(), anyString(), anyDouble(), anyInt())).thenReturn(mockOrderData);
        when(mockOrderData.getOrderID()).thenReturn(123);
        bean.buy("user1", "AAPL", 100, TradeConfig.ASYNCH);
        verify(bean).completeOrderAsync(123, false);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testBuy_ReturnsOrderDataBean_AGND3() throws Exception {
        TradeDirect mockTradeDirect = mock(TradeDirect.class);
        DirectSLSBBean bean = new DirectSLSBBean();
        bean.tradeDirect = mockTradeDirect;
        OrderDataBean expectedOrderData = new OrderDataBean();
        when(mockTradeDirect.buy(anyString(), anyString(), anyDouble(), anyInt())).thenReturn(expectedOrderData);
        OrderDataBean result = bean.buy("user1", "AAPL", 100, TradeConfig.SYNCH);
        assertSame(expectedOrderData, result);
    }
}