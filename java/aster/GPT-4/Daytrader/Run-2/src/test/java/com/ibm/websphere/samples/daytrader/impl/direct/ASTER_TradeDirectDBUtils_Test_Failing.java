/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import java.lang.reflect.Field;
import java.sql.*;
import java.util.concurrent.TimeUnit;
import javax.sql.DataSource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirectDBUtils_Test_Failing {
  @Mock
  private DataSource datasource;
  @Mock
  private Connection connection;
  @Mock
  private PreparedStatement preparedStatement;
  @Mock
  private ResultSet resultSet;
  private TradeDirectDBUtils tradeDirectDBUtils;
  @Mock
  private DatabaseMetaData databaseMetaData;
  private TradeDirectDBUtils tradedirectdbutils;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_1() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_2() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getTradeUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_3() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_4() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_5() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_6() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_7() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_8() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_9() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_10() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_11() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_12() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_13() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertEquals(10, result.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCheckDBProductNameWithSQLException() throws Exception {
    tradedirectdbutils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradedirectdbutils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.getMetaData()).thenReturn(databaseMetaData);
    when(datasource.getConnection()).thenThrow(new SQLException("Connection failure"));
    String actualProductName = tradedirectdbutils.checkDBProductName();
    assertNull(actualProductName);
    verify(connection, never()).close(); // Connection never opened, so close should not be called
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCheckDBProductName_sEgu0() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    String result = tradeDirectDBUtils.checkDBProductName();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_1() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_3() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getTradeUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_4() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_8() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_11() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_12() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_10() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(false);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(24)).executeUpdate(); // 24 update/delete statements are executed when deleteAll is false
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertNotNull(result);
    assertEquals(10, result.getTradeUserCount());
    assertEquals(10, result.getTradeStockCount());
    assertEquals(10, result.getSumLoginCount());
    assertEquals(10, result.getSumLogoutCount());
    assertEquals(10, result.getHoldingCount());
    assertEquals(10, result.getOrderCount());
    assertEquals(10, result.getBuyOrderCount());
    assertEquals(10, result.getSellOrderCount());
    assertEquals(10, result.getCancelledOrderCount());
    assertEquals(10, result.getOpenOrderCount());
    assertEquals(10, result.getDeletedOrderCount());
    assertEquals(10, result.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCheckDBProductName_sEgu0_fid2() throws Exception {
    TradeDirectDBUtils tradeDirectDBUtils = new TradeDirectDBUtils();
    String result = tradeDirectDBUtils.checkDBProductName();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_2() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_5() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_6() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_7() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_9() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_10() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue_CHLW0_GUrh0_13() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(0);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(true);
    assertEquals(0, result.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_1() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_2() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_3() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getTradeUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_4() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_5() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_6() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_7() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_8() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_9() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_11() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_12() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllFalse_cLnK1_meTg0_13() throws Exception {
    DataSource dataSource = org.mockito.Mockito.mock(DataSource.class);
    Connection conn = org.mockito.Mockito.mock(Connection.class);
    PreparedStatement stmt = org.mockito.Mockito.mock(PreparedStatement.class);
    ResultSet rs = org.mockito.Mockito.mock(ResultSet.class);
    org.mockito.Mockito.when(dataSource.getConnection()).thenReturn(conn);
    org.mockito.Mockito.when(conn.prepareStatement(org.mockito.ArgumentMatchers.anyString())).thenReturn(stmt);
    org.mockito.Mockito.when(stmt.executeUpdate()).thenReturn(1);
    org.mockito.Mockito.when(stmt.executeQuery()).thenReturn(rs);
    org.mockito.Mockito.when(rs.next()).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true).thenReturn(true);
    org.mockito.Mockito.when(rs.getInt(org.mockito.ArgumentMatchers.anyString())).thenReturn(10);
    TradeDirectDBUtils utils = new TradeDirectDBUtils();
    RunStatsDataBean result = utils.resetTrade(false);
    assertEquals(10, result.getDeletedOrderCount());
  }
}