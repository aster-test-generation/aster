/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServlet2JNDI_Coverage_Test_Passing {
    private PingServlet2JNDI servlet;
    private ServletConfig mockConfig;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_McvK0() {
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        String expected = "Basic JNDI look up of a JDBC DataSource";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostCallsDoGet_HQri0() throws ServletException, IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        servlet.doPost(request, response);
        verify(servlet).doGet(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostExecutionCompletes_ZnkR1() throws ServletException, IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PingServlet2JNDI servlet = new PingServlet2JNDI();
        servlet.doPost(request, response);
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_sRdD0() throws javax.servlet.ServletException {
        servlet = new PingServlet2JNDI();
        mockConfig = mock(ServletConfig.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCallsSuperInit_RcAl1() throws ServletException {
        PingServlet2JNDI spyServlet = spy(new PingServlet2JNDI());
        spyServlet.init(mockConfig);
        verify(spyServlet).init(mockConfig);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitSetsHitCountToZero_raLG2() throws ServletException {
        servlet.init(mockConfig);
    }

}