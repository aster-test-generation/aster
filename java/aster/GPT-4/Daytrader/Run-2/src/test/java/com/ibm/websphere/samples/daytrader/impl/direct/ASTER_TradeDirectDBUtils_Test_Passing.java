/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.concurrent.TimeUnit;
import javax.sql.DataSource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirectDBUtils_Test_Passing {
  @Mock
  private DataSource datasource;
  @Mock
  private Connection connection;
  @Mock
  private PreparedStatement preparedStatement;
  @Mock
  private ResultSet resultSet;
  private TradeDirectDBUtils tradeDirectDBUtils;
  @Mock
  private DatabaseMetaData databaseMetaData;
  private TradeDirectDBUtils tradedirectdbutils;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testResetTradeDeleteAllTrue() throws Exception {
    tradeDirectDBUtils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradeDirectDBUtils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(preparedStatement.executeUpdate()).thenReturn(0); // Default return value for update operations
    when(resultSet.next()).thenReturn(true); // Simulate resultSet having data
    when(resultSet.getInt(anyString())).thenReturn(10); // Simulate resultSet returning a count of 10 for all counts
    RunStatsDataBean result = tradeDirectDBUtils.resetTrade(true);
    verify(connection, times(1)).setAutoCommit(false);
    verify(preparedStatement, times(5)).executeUpdate(); // 5 delete statements are executed when deleteAll is true
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCheckDBProductName() throws Exception {
    tradedirectdbutils = new TradeDirectDBUtils();
    Field field_datasource = TradeDirectDBUtils.class.getDeclaredField("datasource");
    field_datasource.setAccessible(true);
    field_datasource.set(tradedirectdbutils, datasource);
    when(datasource.getConnection()).thenReturn(connection);
    when(connection.getMetaData()).thenReturn(databaseMetaData);
    String expectedProductName = "MockDB";
    when(databaseMetaData.getDatabaseProductName()).thenReturn(expectedProductName);
    String actualProductName = tradedirectdbutils.checkDBProductName();
    assertEquals(expectedProductName, actualProductName);
    verify(connection, times(1)).close(); // Ensure connection is closed
    verify(datasource, times(1)).getConnection(); // Ensure datasource.getConnection() was called
  }
}