/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.ibm.websphere.samples.daytrader.util.Log;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServletBeanValCDI_Coverage_Test_Failing {
private Log log = this.log;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_ujMs0() {
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        String expected = "Basic dynamic HTML generation through a servlet";
        String actual = servlet.getServletInfo();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostCallsDoGet_JSJv0() throws ServletException, IOException {
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        HttpServletResponse mockResponse = mock(HttpServletResponse.class);
        servlet.doPost(mockRequest, mockResponse);
        verify(servlet).doGet(mockRequest, mockResponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostExecutionCompletes_Orrh1() throws ServletException, IOException {
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        HttpServletResponse mockResponse = mock(HttpServletResponse.class);
        servlet.doPost(mockRequest, mockResponse);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCompletesWithoutException_UMRe2() throws javax.servlet.ServletException {
        ServletConfig config = mock(ServletConfig.class);
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        assertDoesNotThrow(() -> servlet.init(config));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetSetsContentType_IPDo0() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetGetsOutputStream_ABRh1() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        servlet.doGet(req, res);
        verify(res).getOutputStream();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWritesResponse_uELU4() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(res.getOutputStream()).thenReturn(out);
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        servlet.doGet(req, res);
        verify(out).println(anyString());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetHandlesExceptionBySendingError_anDi6() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(res.getOutputStream()).thenThrow(new IOException());
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        try {
            servlet.doGet(req, res);
        } catch (Exception ignored) {
        }
        verify(res).sendError(500, "java.io.IOException");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetCompletesWithoutException_HcQd7() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        servlet.doGet(req, res);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullOutputStream_gcJZ8() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(res.getOutputStream()).thenReturn(null);
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        servlet.doGet(req, res);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullHitCountBean_CzCK9() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
        PingServletBeanValCDI servlet = new PingServletBeanValCDI();
        servlet.hitCountBean = null;
        servlet.doGet(req, res);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetHandlesExceptionByLogging_YJPU5_ibrx0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getOutputStream()).thenThrow(new IOException());
    Log log = mock(Log.class);
    PingServletBeanValCDI servlet = new PingServletBeanValCDI() {
        private Log log = this.log;
        {
            this.log = log;
        }
    };
    try {
        servlet.doGet(req, res);
    } catch (Exception ignored) {
    }
    verify(log).error(anyString(), any(IOException.class));
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGetHandlesExceptionByLogging_YJPU5_ibrx0_fid2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getOutputStream()).thenThrow(new IOException());
    Log log = mock(Log.class);
    PingServletBeanValCDI servlet = new PingServletBeanValCDI() {
        private Log log = this.log;
        {
            this.log = log;
        }
    };
    try {
        servlet.doGet(req, res);
    } catch (Exception ignored) {
    }
    verify(log).error(any(IOException.class), eq("PingServlet.doGet(...): general exception caught"));
}
}