/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_Log_Test_Passing {
  private static final Logger log = Logger.getLogger(Log.class.getName());

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceWithObjectParameter_ATkJ0() {
    String expectedMessage = "Test message(42)";
    Log spyLog = spy(Log.class);
    Log.trace("Test message", 42);
    verify(spyLog).trace(expectedMessage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollectionWithEmptyCollection_LugG0() {
    Collection<Object> emptyCollection = new ArrayList<>();
    Log.printCollection(emptyCollection);
    assertTrue(emptyCollection.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintCollectionWithNonEmptyCollection_YVdD1() {
    Collection<String> stringCollection = Arrays.asList("Hello", "World");
    Log.printCollection(stringCollection);
    assertEquals(2, stringCollection.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoTrace_XJKN0() {
    Logger log = Logger.getLogger(Log.class.getName());
    log.setLevel(Level.FINE);
    assertFalse(Log.doTrace());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogConcatenation_EOlw0() {
    String msg1 = "Hello, ";
    String msg2 = "world";
    String msg3 = "!";
    Log.log(msg1, msg2, msg3);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorMethod_cxue0() {
    Throwable mockThrowable = mock(Throwable.class);
    Log.error("Error message part 1", "Error message part 2", mockThrowable);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoDebugReturnsTrue_VpLi0() {
    assertTrue(Log.doDebug());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorMethodConcatenatesAndLogs_rVwo0() {
    Throwable mockThrowable = mock(Throwable.class);
    Log.error("Error1", "Error2", "Error3", mockThrowable);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorLogsCorrectMessage_BHeG0_uUID0() {
    Logger mockLogger = mock(Logger.class);
    String testMessage = "Test error message";
    Log.error(testMessage);
    verify(mockLogger).severe("Error: " + testMessage);
  }
}