/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet_Test_Failing {
  private PingServlet pingServlet;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  HttpServletRequest request;
  HttpServletResponse response;
  ServletOutputStream outputStream;
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingServlet = new PingServlet();
    // Arrange
    doNothing().when(httpServletResponse).sendRedirect(anyString());
    // Act
    pingServlet.doPost(httpServletRequest, httpServletResponse);
    // Assert
    verify(httpServletResponse, never()).sendError(anyInt());
    verify(httpServletResponse, never()).sendRedirect(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_oyoH0() {
    PingServlet servlet = new PingServlet();
    String result = servlet.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws ServletException, IOException {
    pingServlet = new PingServlet();
    request = mock(HttpServletRequest.class);
    response = mock(HttpServletResponse.class);
    outputStream = mock(ServletOutputStream.class);
    when(response.getOutputStream()).thenReturn(outputStream);
    // Perform the action
    pingServlet.doGet(request, response);
    // Verify the response content type was set
    verify(response).setContentType("text/html");
    // Verify the output stream was obtained and written to
    verify(response).getOutputStream();
    verify(outputStream).println(anyString());
    // Capture what was printed to the output stream
    ArgumentCaptor<String> stringCaptor = ArgumentCaptor.forClass(String.class);
    verify(outputStream).println(stringCaptor.capture());
    // Check that the output contains expected parts
    String outputContent = stringCaptor.getValue();
    assertTrue(outputContent.contains("Ping Servlet"));
    assertTrue(outputContent.contains("Hit Count:"));
    // Since hitCount is static and might be affected by other tests, we check if it's incremented
    assertTrue(outputContent.contains("Hit Count: 1"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_xEIr0() throws ServletException, IOException {
    PingServlet servlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(outputStream);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(outputStream).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_oyoH0_fid1() {
    PingServlet servlet = new PingServlet();
    String result = servlet.getServletInfo();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_1() throws ServletException, IOException {
    pingServlet = new PingServlet();
    request = mock(HttpServletRequest.class);
    response = mock(HttpServletResponse.class);
    outputStream = mock(ServletOutputStream.class);
    when(response.getOutputStream()).thenReturn(outputStream);
    // Perform the action
    pingServlet.doGet(request, response);
    // Verify the response content type was set
    verify(response).setContentType("text/html");
    // Verify the output stream was obtained and written to
    verify(response).getOutputStream();
    verify(outputStream).println(anyString());
    // Capture what was printed to the output stream
    ArgumentCaptor<String> stringCaptor = ArgumentCaptor.forClass(String.class);
    verify(outputStream).println(stringCaptor.capture());
    // Check that the output contains expected parts
    String outputContent = stringCaptor.getValue();
    // Since hitCount is static and might be affected by other tests, we check if it's incremented
    assertTrue(outputContent.contains("Ping Servlet"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_2() throws ServletException, IOException {
    pingServlet = new PingServlet();
    request = mock(HttpServletRequest.class);
    response = mock(HttpServletResponse.class);
    outputStream = mock(ServletOutputStream.class);
    when(response.getOutputStream()).thenReturn(outputStream);
    // Perform the action
    pingServlet.doGet(request, response);
    // Verify the response content type was set
    verify(response).setContentType("text/html");
    // Verify the output stream was obtained and written to
    verify(response).getOutputStream();
    verify(outputStream).println(anyString());
    // Capture what was printed to the output stream
    ArgumentCaptor<String> stringCaptor = ArgumentCaptor.forClass(String.class);
    verify(outputStream).println(stringCaptor.capture());
    // Check that the output contains expected parts
    String outputContent = stringCaptor.getValue();
    // Since hitCount is static and might be affected by other tests, we check if it's incremented
    assertTrue(outputContent.contains("Hit Count:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_3() throws ServletException, IOException {
    pingServlet = new PingServlet();
    request = mock(HttpServletRequest.class);
    response = mock(HttpServletResponse.class);
    outputStream = mock(ServletOutputStream.class);
    when(response.getOutputStream()).thenReturn(outputStream);
    // Perform the action
    pingServlet.doGet(request, response);
    // Verify the response content type was set
    verify(response).setContentType("text/html");
    // Verify the output stream was obtained and written to
    verify(response).getOutputStream();
    verify(outputStream).println(anyString());
    // Capture what was printed to the output stream
    ArgumentCaptor<String> stringCaptor = ArgumentCaptor.forClass(String.class);
    verify(outputStream).println(stringCaptor.capture());
    // Check that the output contains expected parts
    String outputContent = stringCaptor.getValue();
    // Since hitCount is static and might be affected by other tests, we check if it's incremented
    assertTrue(outputContent.contains("Hit Count: 1"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_xEIr0_fid1() throws ServletException, IOException {
    PingServlet servlet = new PingServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(outputStream);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(outputStream).println(contains("Ping Servlet"));
  }
}