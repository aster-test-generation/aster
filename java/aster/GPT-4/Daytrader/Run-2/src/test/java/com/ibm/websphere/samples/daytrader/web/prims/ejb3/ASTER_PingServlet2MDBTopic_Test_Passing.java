/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.jms.*;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2MDBTopic_Test_Passing {
  private static String initTime;
  PingServlet2MDBTopic pingServlet2MDBTopic;
  ServletConfig mockServletConfig;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  @Mock
  private ConnectionFactory topicConnectionFactory;
  @Mock
  private Topic tradeStreamerTopic;
  @Mock
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;
  @Mock
  private Connection connection;
  @Mock
  private JMSContext jmsContext;
  @Mock
  private TextMessage textMessage;
  @InjectMocks
  private PingServlet2MDBTopic pingServlet;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingServlet2MDBTopic = new PingServlet2MDBTopic();
    // Call the method under test
    pingServlet2MDBTopic.doPost(httpServletRequest, httpServletResponse);
    // Verify that doGet is called once with the same request and response objects
    verify(pingServlet2MDBTopic, times(1)).doGet(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_JBdF0() throws Exception {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
    verify(request, atLeast(1)).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_criE0() {
    PingServlet2MDBTopic servlet = new PingServlet2MDBTopic();
    String expected = "web primitive, configured with trade runtime configs, tests Servlet to Session EJB path";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_rENh0_1() throws ServletException {
    pingServlet2MDBTopic = new PingServlet2MDBTopic();
    mockServletConfig = mock(ServletConfig.class);
    pingServlet2MDBTopic.init(mockServletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_rENh0_2() throws ServletException {
    pingServlet2MDBTopic = new PingServlet2MDBTopic();
    mockServletConfig = mock(ServletConfig.class);
    pingServlet2MDBTopic.init(mockServletConfig);
    assertEquals(0, hitCount);
  }
}