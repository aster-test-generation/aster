/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServletWriter_Coverage_Test_Failing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_RAPh0() {
        PingServletWriter servletWriter = new PingServletWriter();
        String expectedInfo = "Basic dynamic HTML generation through a servlet using a PrintWriter";
        assertEquals(expectedInfo, servletWriter.getServletInfo());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCompletesWithoutException_nnIB3() throws ServletException {
        ServletConfig config = mock(ServletConfig.class);
        PingServletWriter writer = new PingServletWriter();
        writer.init(config);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostCallsDoGet_ukCN0() throws Exception {
        PingServletWriter servletWriter = new PingServletWriter();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servletWriter.doPost(request, response);
        verify(request, atLeastOnce()).setAttribute(anyString(), any());
        verify(response, atLeastOnce()).getWriter();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostExecutionCompletes_wUri1() throws Exception {
        PingServletWriter servletWriter = new PingServletWriter();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servletWriter.doPost(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCatchException_Kfyw4() throws Exception {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        PingServletWriter servlet = new PingServletWriter();
        when(res.getWriter()).thenThrow(new IOException());
        servlet.doGet(req, res);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testLogErrorOnException_vkUB5() throws Exception {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        PingServletWriter servlet = new PingServletWriter();
        IOException ioException = new IOException("Error writing to output");
        when(res.getWriter()).thenThrow(ioException);
        servlet.doGet(req, res);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSendErrorOnException_Ygos6() throws Exception {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        PingServletWriter servlet = new PingServletWriter();
        IOException ioException = new IOException("Error writing to output");
        when(res.getWriter()).thenThrow(ioException);
        servlet.doGet(req, res);
        verify(res).sendError(500, ioException.toString());
    }
}