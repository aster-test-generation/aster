/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;
import java.util.ArrayList;
import java.util.Date;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_AccountDataJSF_Coverage_Test_Passing {
    private AccountDataJSF accountDataJSF;
    private HttpSession httpSession;
    private ExternalContext externalContext;
    private TradeServices tradeAction;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHome_GetUserID_Xmnm2() throws Exception {
        when(externalContext.getSession(true)).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("user123");
        accountDataJSF.home();
        verify(httpSession).getAttribute("uidBean");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHome_GetAccountData_oXmo3() throws Exception {
        when(externalContext.getSession(true)).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("user123");
        when(tradeAction.getAccountData("user123")).thenReturn(new AccountDataBean());
        accountDataJSF.home();
        verify(tradeAction).getAccountData("user123");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHome_GetHoldings_lMSj4() throws Exception {
        when(externalContext.getSession(true)).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("user123");
        when(tradeAction.getHoldings("user123")).thenReturn(new ArrayList<>());
        accountDataJSF.home();
        verify(tradeAction).getHoldings("user123");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHome_GetClosedOrders_mHXQ6() throws Exception {
        when(externalContext.getSession(true)).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("user123");
        when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
        when(tradeAction.getClosedOrders("user123")).thenReturn(new ArrayList<>());
        accountDataJSF.home();
        verify(tradeAction).getClosedOrders("user123");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHome_GetOrders_MOdT12() throws Exception {
        when(externalContext.getSession(true)).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("user123");
        when(TradeConfig.getLongRun()).thenReturn(false);
        when(tradeAction.getOrders("user123")).thenReturn(new ArrayList<>());
        accountDataJSF.home();
        verify(tradeAction).getOrders("user123");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHome_SetSessionCreationDate_iGjq17() throws Exception {
        Date date = new Date();
        when(externalContext.getSession(true)).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("user123");
        when(httpSession.getAttribute("sessionCreationDate")).thenReturn(date);
        accountDataJSF.home();
        assertEquals(date, accountDataJSF.getSessionCreationDate());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHome_SetCurrentTime_hYrX18() throws Exception {
        when(externalContext.getSession(true)).thenReturn(httpSession);
        when(httpSession.getAttribute("uidBean")).thenReturn("user123");
        accountDataJSF.home();
        assertNotNull(accountDataJSF.getCurrentTime());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHome_ExceptionHandling_nQGN20() throws Exception {
        when(externalContext.getSession(true)).thenThrow(new RuntimeException("Test Exception"));
        accountDataJSF.home();
    }
}