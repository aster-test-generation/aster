/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Failing {
  private TradeConfigJSF tradeConfigJSF;
  private HttpSession httpSession;
  private ExternalContext context;
  private String result = "";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_OmbN0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = new String[]{"Full EJB3", "mode2", "mode3"};
    assertArrayEquals(expected, tradeConfig.getRuntimeModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_vbXN0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = new String[]{"Sync", "Mode2", "Mode3"};
    assertArrayEquals(expected, tradeConfig.getOrderProcessingModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsDisplayOrderAlerts_XUEe0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    boolean result = tradeConfig.isDisplayOrderAlerts();
    assertEquals(false, result); // Assuming default value istrue
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceList_OFpe0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = null; // Assuming default null, adjust based on actual default or initialization in class
    String[] result = tradeConfig.getWebInterfaceList();
    assertArrayEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetResult_RbNa0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null;
    String actual = tradeConfig.getResult();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_OmbN0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = new String[]{"mode1", "mode2", "mode3"};
    assertArrayEquals(expected, tradeConfig.getRuntimeModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_jYeq0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 0; // Assuming default value is 0, adjust according to actual default or setup
    int actual = tradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeMode_fnCO0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null; // Assuming default null since not initialized in provided code
    assertEquals(expected, tradeConfig.getRuntimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_zIjq0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 0; // Assuming default value of primIterations is 0
    assertEquals(expected, tradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxUsers_KSRT0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expectedMaxUsers = 0; // Assuming default maxUsers is 0 if not set
    assertEquals(expectedMaxUsers, tradeConfig.getMaxUsers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsPublishQuotePriceChange_qLKc0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    boolean expected = false; // Assuming default is false, adjust based on actual default or setup
    assertEquals(expected, tradeConfig.isPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_vbXN0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = new String[]{"Mode1", "Mode2", "Mode3"};
    assertArrayEquals(expected, tradeConfig.getOrderProcessingModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxQuotes_BuSO0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    assertEquals(0, tradeConfig.getMaxQuotes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterface_Dsyj0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null; // Assuming default null, adjust based on actual default or setup
    assertEquals(expected, tradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithDefaultValues_ZZCe0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.updateConfig();
    assertEquals("Default runtime mode should be PRODUCTION", "PRODUCTION", TradeConfig.getRunTimeModeNames()[TradeConfig.getRunTimeMode()]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_AouO0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null; // Assuming default value is null, adjust based on actual default or setup.
    assertEquals(expected, tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsDisplayOrderAlerts_XUEe0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    boolean result = tradeConfig.isDisplayOrderAlerts();
    assertEquals(false, result); // Assuming default value is false
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_LRyb0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 0; // Assuming default value is 0 since not shown in the class
    assertEquals(expected, tradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithCustomOrderProcessingMode_qVPL1_yuSO0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setOrderProcessingMode("SYNC");
    tradeConfigJSF.updateConfig();
    assertEquals("Order processing mode should be SYNC", "SYNC", TradeConfig.getOrderProcessingModeNames()[TradeConfig.getOrderProcessingMode()]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithCustomWebInterface_jKbg3_CfbD0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("HTML5");
    tradeConfigJSF.updateConfig();
    assertEquals("Web interface should be HTML5", "HTML5", TradeConfig.getWebInterfaceNames()[TradeConfig.getWebInterface()]);
  }
}