/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountProfileDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreditCard_cQJM0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john@example.com", "1234-5678-9012-3456");
    assertEquals("1234-5678-9012-3456", accountProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_hrsB0() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    assertTrue(bean1.equals(bean1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_xcGS1() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    Object other = new Object();
    assertFalse(bean1.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullUserID_holK2() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean(null, "pass1", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    AccountProfileDataBean bean2 = new AccountProfileDataBean(null, "pass2", "Jane Doe", "456 Oak St", "jane@example.com", "6543210987654321");
    assertTrue(bean1.equals(bean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentUserID_OLcq3() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    AccountProfileDataBean bean2 = new AccountProfileDataBean("user2", "pass2", "Jane Doe", "456 Oak St", "jane@example.com", "6543210987654321");
    assertFalse(bean1.equals(bean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameUserID_oQcS4() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    AccountProfileDataBean bean2 = new AccountProfileDataBean("user1", "pass2", "Jane Doe", "456 Oak St", "jane@example.com", "6543210987654321");
    assertTrue(bean1.equals(bean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_oolw0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john@example.com", "1234-5678-9012-3456");
    String expected = "\n\tAccount Profile Data for userID:user123\n\t\t   passwd:pass123\n\t\t   fullName:John Doe\n\t\t    address:1234 Elm St\n\t\t      email:john@example.com\n\t\t creditCard:1234-5678-9012-3456";
    assertEquals(expected, accountProfile.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccount_oaJL0() {
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    assertEquals(account, profile.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ONED0_1() {
    AccountProfileDataBean instance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(instance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ONED0_2() {
    AccountProfileDataBean instance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(instance.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ONED0_3() {
    AccountProfileDataBean instance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(instance.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ONED0_4() {
    AccountProfileDataBean instance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(instance.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ONED0_5() {
    AccountProfileDataBean instance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(instance.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ONED0_6() {
    AccountProfileDataBean instance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(instance.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ONED0_7() {
    AccountProfileDataBean instance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(instance.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUserID_dtOG0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean();
    String expectedUserID = "user123";
    accountProfileDataBean.setUserID(expectedUserID);
    assertEquals(expectedUserID, accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEmail_RhYs0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "password123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    assertEquals("john.doe@example.com", accountProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_aKgq0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "password", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    assertEquals("user123", accountProfile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNonNullUserID_JoRl0() {
    AccountProfileDataBean account = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    int expectedHashCode = "user123".hashCode();
    assertEquals(expectedHashCode, account.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullUserID_UTSA1() {
    AccountProfileDataBean account = new AccountProfileDataBean(null, "pass123", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    assertEquals(0, account.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAddress_xglO0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    assertEquals("1234 Elm Street", accountProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPassword_VMKW0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    assertEquals("password123", accountProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreditCard_mWcm0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String testCreditCard = "1234-5678-9101-1121";
    accountProfile.setCreditCard(testCreditCard);
    assertEquals(testCreditCard, accountProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_pgko0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    String expectedHtml = "<BR>Account Profile Data for userID: <B>user123</B>" +
        "<LI>   passwd:pass123</LI>" +
        "<LI>   fullName:John Doe</LI>" +
        "<LI>    address:1234 Elm Street</LI>" +
        "<LI>      email:john.doe@example.com</LI>" +
        "<LI> creditCard:1234-5678-9012-3456</LI>";
    assertEquals(expectedHtml, accountProfile.toHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullName_GdyW0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    assertEquals("John Doe", accountProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEmail_iOcY0_aWPA0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String testEmail = "test@example.com";
    accountProfile.setEmail(testEmail);
    assertEquals(testEmail, accountProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFullName_Xxlt0_HecC0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String expectedFullName = "John Doe";
    accountProfile.setFullName(expectedFullName);
    assertEquals(expectedFullName, accountProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPassword_phBS0_IlrS0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String newPassword = "newPassword123";
    accountProfile.setPassword(newPassword);
    assertEquals(newPassword, accountProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAddress_Qevg0_IqwO0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String newAddress = "1234 New Address St.";
    accountProfile.setAddress(newAddress);
    assertEquals(newAddress, accountProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_ONED0() {
    AccountProfileDataBean instance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(instance);
    assertNotNull(instance.getUserID());
    assertNotNull(instance.getPassword());
    assertNotNull(instance.getFullName());
    assertNotNull(instance.getAddress());
    assertNotNull(instance.getEmail());
    assertNotNull(instance.getCreditCard());
  }
}