/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.StringReader;
import java.util.concurrent.TimeUnit;
import javax.json.*;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObjectFactory_Test_Passing {
  private static int hitCount;
  private PingJSONPObjectFactory pingJSONPObjectFactory;
  private ServletConfig servletConfig;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  @Mock
  private HttpServletResponse httpservletresponse;
  @Mock
  private ServletOutputStream servletoutputstream;
  @Mock
  private HttpServletRequest httpservletrequest;
  @InjectMocks
  private PingJSONPObjectFactory pingjsonpobjectfactory;
  private static JsonBuilderFactory jSONObjectFactory = Json.createBuilderFactory(null);
  private static JsonReaderFactory jSONReaderFactory = Json.createReaderFactory(null);
  private static String initTime = "2023-01-01T00:00:00Z";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    // Arrange
    doNothing().when(httpServletResponse).setContentType(anyString());
    // Act
    pingJSONPObjectFactory.doPost(httpServletRequest, httpServletResponse);
    // Assert
    verify(httpServletResponse, never()).setContentType("application/json");
    verify(httpServletRequest, times(1)).getParameterMap();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_GaVj0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    factory.doPost(req, res);
    verify(req, atLeastOnce()).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_eiui0() {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    String result = factory.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_XSdf0() throws Exception {
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    long initTime = System.currentTimeMillis();
    pingjsonpobjectfactory.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(httpservletresponse.getOutputStream()).println(anyString());
    JsonObject expectedJson = jSONObjectFactory.createObjectBuilder()
        .add("initTime", initTime)
        .add("hitCount", 1) // Since it's the first call in this test context
        .build();
    String expectedGeneratedJSON = expectedJson.toString();
    JsonReader jsonReader = jSONReaderFactory.createReader(new StringReader(expectedGeneratedJSON));
    String expectedParsedJSON = jsonReader.readObject().toString();
    String expectedOutput = "<html><head><title>Ping JSONP</title></head>" +
        "<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping JSONP</FONT><BR>Generated JSON: " +
        expectedGeneratedJSON + "<br>Parsed JSON: " + expectedParsedJSON + "</body></html>";
    verify(servletoutputstream).println(expectedOutput);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_ADns0_1() throws ServletException {
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    servletConfig = mock(ServletConfig.class);
    pingJSONPObjectFactory.init(servletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_ADns0_2() throws ServletException {
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    servletConfig = mock(ServletConfig.class);
    pingJSONPObjectFactory.init(servletConfig);
    assertEquals(0, hitCount);
  }
}