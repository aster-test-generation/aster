/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_TradeScenarioServlet_Coverage_Test_Passing {
    private HttpServletResponse mockResponse;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testDoGet_WithIOException_CCxy2_W_XPOL0_0() throws ServletException, IOException {
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockResponse = mock(HttpServletResponse.class);
    TradeScenarioServlet servlet = new TradeScenarioServlet() {
    };
    assertThrows(IOException.class, () -> {
        servlet.performTask(mockRequest, mockResponse);
    });
}


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_SQTl0() {
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        String expectedInfo = "TradeScenarioServlet emulates a population of web users";
        assertEquals(expectedInfo, servlet.getServletInfo());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostCallsPerformTask_NMAH0() throws ServletException, IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        servlet.doPost(request, response);
        verify(servlet).performTask(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostHandlesIOException_aKYh1() throws ServletException, IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        TradeScenarioServlet servlet = new TradeScenarioServlet();
        doThrow(new IOException()).when(servlet).performTask(request, response);
        servlet.doPost(request, response);
        verify(servlet).performTask(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_CallsPerformTask_YATT0() throws ServletException, IOException {
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        HttpServletResponse mockResponse = mock(HttpServletResponse.class);
        TradeScenarioServlet servlet = new TradeScenarioServlet() {
            @Override
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void performTask(HttpServletRequest req, HttpServletResponse res) {
            }
        };
        TradeScenarioServlet spyServlet = spy(servlet);
        spyServlet.doGet(mockRequest, mockResponse);
        verify(spyServlet).performTask(mockRequest, mockResponse);
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
        public void performTask(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
            throw new IOException("Simulated IOException");
        }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGet_WithIOException_CCxy2() throws ServletException, IOException {
        HttpServletRequest mockRequest = mock(HttpServletRequest.class);
        HttpServletResponse mockResponse = mock(HttpServletResponse.class);
        TradeScenarioServlet servlet = new TradeScenarioServlet() {
            @Override
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
            public void performTask(HttpServletRequest req, HttpServletResponse res) throws IOException {
                throw new IOException("Test IOException");
            }
        };
        try {
            servlet.doGet(mockRequest, mockResponse);
            fail("Expected an IOException to be thrown");
        } catch (IOException e) {
            assertEquals("Test IOException", e.getMessage());
        }
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void performTaskTest_LZlH0() throws ServletException, IOException {
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockResponse = mock(HttpServletResponse.class);
    TradeScenarioServlet spyServlet = spy(new TradeScenarioServlet());
    doNothing().when(spyServlet).performTask(mockRequest, mockResponse);
    spyServlet.performTask(mockRequest, mockResponse);
    verify(spyServlet).performTask(mockRequest, mockResponse);
}

}