/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletWriter_Test_Failing {
  @Mock
  private ServletConfig mockServletConfig;
  @InjectMocks
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_NulI0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletWriter servlet = new PingServletWriter();
    PingServletWriter spyServlet = spy(servlet);
    doNothing().when(spyServlet).doGet(any(HttpServletRequest.class), any(HttpServletResponse.class));
    spyServlet.doPost(req, res);
    verify(spyServlet, times(1)).doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_uTUE0() {
    PingServletWriter servletWriter = new PingServletWriter();
    String result = servletWriter.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet using a PrintWriter", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_uTUE0_fid2() {
    PingServletWriter servletWriter = new PingServletWriter();
    try {
      String result = servletWriter.getServletInfo();
      assertEquals("Basic dynamic HTML generation through a servlet using a PrintWriter", result);
    } catch (ExceptionInInitializerError e) {
      fail("Initialization of PingServletWriter failed");
    }
  }
}