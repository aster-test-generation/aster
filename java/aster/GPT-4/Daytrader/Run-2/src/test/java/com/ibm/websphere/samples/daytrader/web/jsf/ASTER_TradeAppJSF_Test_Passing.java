/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppJSF_Test_Passing {
  @Mock
  private TradeServices tradeAction;
  @Mock
  private ExternalContext externalContext;
  @Mock
  private HttpSession httpSession;
  @Mock
  private HttpServletRequest httpServletRequest;
  @InjectMocks
  private TradeAppJSF tradeAppJSF;
  private String password = "xxx";
  private String userID = "uid:0";
  private String email = "user@example.com";
  private String money = "1000";
  private String fullname = "John Doe";
  private String address = "123 Main St";
  private String ccn = "4111111111111111";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout() throws Exception {
    when(externalContext.getRequest()).thenReturn(httpServletRequest);
    when(externalContext.getSession(false)).thenReturn(httpSession);
    // Arrange
    doNothing().when(tradeAction).logout("uid:0");
    doNothing().when(httpServletRequest).logout();
    // Act
    String result = tradeAppJSF.logout();
    // Assert
    verify(tradeAction).logout("uid:0");
    verify(httpSession).invalidate();
    verify(httpServletRequest).logout();
    assertEquals("welcome", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithServletException() throws Exception {
    when(externalContext.getRequest()).thenReturn(httpServletRequest);
    when(externalContext.getSession(false)).thenReturn(httpSession);
    // Arrange
    doNothing().when(tradeAction).logout("uid:0");
    doThrow(new ServletException("Error during servlet logout")).when(httpServletRequest).logout();
    // Act
    String result = tradeAppJSF.logout();
    // Assert
    verify(tradeAction).logout("uid:0");
    verify(httpSession).invalidate();
    verify(httpServletRequest).logout();
    assertEquals("welcome", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutWithIllegalArgumentException() throws Exception {
    when(externalContext.getRequest()).thenReturn(httpServletRequest);
    when(externalContext.getSession(false)).thenReturn(httpSession);
    // Arrange
    doThrow(new IllegalArgumentException("Invalid user ID")).when(tradeAction).logout("uid:0");
    // Act
    String result = tradeAppJSF.logout();
    // Assert
    verify(tradeAction).logout("uid:0");
    verify(httpSession, never()).invalidate();
    verify(httpServletRequest, never()).logout();
    assertEquals("welcome", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCpassword_NviQ0() {
    TradeAppJSF app = new TradeAppJSF(null);
    String expected = null; // Assuming cpassword is not initialized and defaults to null
    assertEquals(expected, app.getCpassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCcn_hOHT0() {
    TradeAppJSF tradeApp = new TradeAppJSF(null);
    String expected = null; // Assuming ccn is initialized to null
    assertEquals(expected, tradeApp.getCcn());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateProfile_PasswordsDoNotMatch_zGFo0() {
    TradeAppJSF tradeApp = new TradeAppJSF(null);
    tradeApp.setPassword("password1");
    tradeApp.setCpassword("password2");
    String result = tradeApp.updateProfile();
    assertEquals("Update profile error: passwords do not match", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateProfile_SuccessfulUpdate_xnaD1() {
    TradeAppJSF tradeApp = new TradeAppJSF(null);
    tradeApp.setPassword("password");
    tradeApp.setCpassword("password");
    tradeApp.setUserID("user123");
    tradeApp.setFullname("John Doe");
    tradeApp.setAddress("1234 Street");
    tradeApp.setEmail("john@example.com");
    tradeApp.setCcn("1234567890123456");
    String result = tradeApp.updateProfile();
    assertEquals("Account profile update successful", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateProfile_IllegalArgumentException_UCSO2() {
    TradeAppJSF tradeApp = new TradeAppJSF(null);
    tradeApp.setPassword("password");
    tradeApp.setCpassword("password");
    tradeApp.setUserID("invalidUser");
    tradeApp.setFullname("John Doe");
    tradeApp.setAddress("1234 Street");
    tradeApp.setEmail("john@example.com");
    tradeApp.setCcn("1234567890123456");
    String result = tradeApp.updateProfile();
    assertTrue(result.contains("invalid argument, check userID is correct, and the database is populated"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEmail_geVn0() {
    TradeAppJSF tradeApp = new TradeAppJSF(null);
    String expectedEmail = null; // Assuming default email is null if not set
    assertEquals(expectedEmail, tradeApp.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    AccountDataBean accountData = new AccountDataBean();
    AccountProfileDataBean accountProfileData = new AccountProfileDataBean();
    accountProfileData.setAddress("123 Main St");
    accountProfileData.setCreditCard("1234567890123456");
    accountProfileData.setEmail("test@example.com");
    accountProfileData.setFullName("John Doe");
    accountProfileData.setPassword("password");
    when(tradeAction.login(userID, password)).thenReturn(accountData);
    when(tradeAction.getAccountProfileData(userID)).thenReturn(accountProfileData);
    String result = tradeAppJSF.login();
    verify(httpSession).setAttribute("uidBean", userID);
    verify(httpSession).setAttribute("sessionCreationDate", any());
    assertEquals("Ready to Trade", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailureAccountNotFound() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(tradeAction.login(userID, password)).thenReturn(null);
    String result = tradeAppJSF.login();
    assertEquals("welcome", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginThrowsException() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(tradeAction.login(anyString(), anyString())).thenThrow(new RuntimeException("Database error"));
    String result = tradeAppJSF.login();
    assertEquals("welcome", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_MZcZ0() {
    TradeAppJSF tradeApp = new TradeAppJSF(null); // Assuming constructor handles null appropriately
    String expectedUserID = null; // Expected value should be set according to the context or mock
    assertEquals(expectedUserID, tradeApp.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAddress_AFGO0() {
    TradeAppJSF tradeApp = new TradeAppJSF(null); // Assuming null is acceptable for Instance<TradeServices>
    String expected = null; // Assuming default address is null
    String actual = tradeApp.getAddress();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPassword_zVsr0() {
    TradeAppJSF tradeApp = new TradeAppJSF(null); // Assuming null is acceptable for the constructor
    String expectedPassword = null; // Assuming password is not set and default is null
    assertEquals(expectedPassword, tradeApp.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMoney_oEen0() {
    TradeAppJSF app = new TradeAppJSF(null);
    String expectedMoney = "expectedMoneyValue"; // You should set the expected value based on your context
    assertEquals(expectedMoney, app.getMoney());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullname_IHCT0() {
    TradeAppJSF tradeApp = new TradeAppJSF(null);
    String expected = "Expected Fullname";
    String actual = tradeApp.getFullname();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetResults_InitialEmpty_zgKr0() {
    TradeAppJSF tradeApp = new TradeAppJSF(null);
    String result = tradeApp.getResults();
    assertEquals("", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEmail_lZXs0_zxJy0() {
    TradeAppJSF app = new TradeAppJSF(null);
    String testEmail = "test@example.com";
    app.setEmail(testEmail);
    assertEquals(testEmail, app.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUserID_IOXA0_rkDj0() {
    TradeAppJSF app = new TradeAppJSF(null); // Assuming null can be passed for Instance<TradeServices>
    String expectedUserID = "user123";
    app.setUserID(expectedUserID);
    assertEquals(expectedUserID, app.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterSuccess_fHOZ0_eTVz0() {
    Instance<TradeServices> services = null; // Mock or instantiate as required
    TradeAppJSF app = new TradeAppJSF(services);
    app.setUserID("user123");
    app.setPassword("pass123");
    app.setCpassword("pass123");
    app.setFullname("John Doe");
    app.setAddress("1234 Street");
    app.setEmail("john@example.com");
    app.setCcn("1234567890123456");
    app.setMoney("1000");
    String result = app.register();
    assertEquals("Registration operation succeeded", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterFailureDueToPasswordMismatch_niNu1_kOCj0() {
    Instance<TradeServices> services = null; // Mock or instantiate as required
    TradeAppJSF app = new TradeAppJSF(services);
    app.setUserID("user123");
    app.setPassword("pass123");
    app.setCpassword("pass321");
    app.setFullname("John Doe");
    app.setAddress("1234 Street");
    app.setEmail("john@example.com");
    app.setMoney("1000");
    String result = app.register();
    assertEquals("Registration operation failed", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterFailureDueToException_IlkD2_BBCM0() {
    Instance<TradeServices> services = null; // Mock or instantiate as required
    TradeAppJSF app = new TradeAppJSF(services);
    app.setUserID("user123");
    app.setPassword("pass123");
    app.setCpassword("pass123");
    app.setFullname("John Doe");
    app.setAddress("1234 Street");
    app.setEmail("john@example.com");
    app.setCcn("1234567890123456");
    app.setMoney("invalid"); // Corrected to use the setter method
    String result = app.register();
    assertEquals("Registration operation failed", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterFailureDueToNullAccountData_LcZZ3_EuKH0() {
    Instance<TradeServices> services = null; // Mock or instantiate as required
    TradeAppJSF app = new TradeAppJSF(services);
    app.setUserID("user123");
    app.setPassword("pass123");
    app.setCpassword("pass123");
    app.setFullname("John Doe");
    app.setAddress("1234 Street");
    app.setEmail("john@example.com");
    app.setCcn("1234567890123456"); // Corrected the method to use the setter
    app.setMoney("1000");
    String result = app.register();
    assertEquals("Registration operation failed", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCpassword_oKIl0_Sssl0() {
    TradeAppJSF tradeApp = new TradeAppJSF(null); // Assuming null is acceptable for the constructor
    String expectedCpassword = "newPassword123";
    tradeApp.setCpassword(expectedCpassword);
    assertEquals(expectedCpassword, tradeApp.getCpassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMoney_QPQH0_cZVk0() {
    TradeAppJSF app = new TradeAppJSF(null);
    String testMoney = "100.00";
    app.setMoney(testMoney);
    assertEquals("100.00", app.getMoney());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetResults_XrBH0_XvhH0() {
    TradeAppJSF app = new TradeAppJSF(null);
    String expectedResults = "Test Results";
    app.setResults(expectedResults);
    assertEquals(expectedResults, app.getResults());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFullname_gMjT0_yQlR0() {
    TradeAppJSF tradeApp = new TradeAppJSF(null);
    String expectedFullname = "John Doe";
    tradeApp.setFullname(expectedFullname);
    assertEquals(expectedFullname, tradeApp.getFullname());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPassword_soKR0_chdn0() {
    TradeAppJSF app = new TradeAppJSF(null);
    String expectedPassword = "newPassword123";
    app.setPassword(expectedPassword);
    assertEquals(expectedPassword, app.getPassword());
  }
}