/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServletBeanValSimple2_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_XHxA0() {
        PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
        String expected = "Basic dynamic HTML generation through a servlet";
        String actual = servlet.getServletInfo();
        assertEquals(expected, actual);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCallsSuperInit_yORI0() throws ServletException {
        ServletConfig mockConfig = mock(ServletConfig.class);
        PingServletBeanValSimple2 servlet = spy(new PingServletBeanValSimple2());
        servlet.init(mockConfig);
        verify(servlet).init(mockConfig);
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCompletesWithoutException_vmJE2() throws javax.servlet.ServletException {
        ServletConfig mockConfig = mock(ServletConfig.class);
        PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
        assertDoesNotThrow(() -> servlet.init(mockConfig));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostCallsDoGet_yWQO0() throws ServletException, IOException {
        PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
        verify(request, atLeastOnce()).setAttribute(anyString(), any());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostExecutionComplete_LhDl1() throws ServletException, IOException {
        PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        servlet.doPost(request, response);
        verify(response, never()).isCommitted();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentType_idXv0() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
        servlet.doGet(req, res);
        verify(res).setContentType("text/html");
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOutputStream_xhUp3() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
        PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
        servlet.doGet(req, res);
        verify(res).getOutputStream();
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testOutputHtmlContent_KItv5() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletOutputStream out = mock(ServletOutputStream.class);
        when(res.getOutputStream()).thenReturn(out);
        PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
        servlet.doGet(req, res);
        verify(out).println(contains("<html><head><title>Ping Servlet Bean Validation Simple</title></head>"));
    }

@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSendErrorOnException_vgnO8() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        when(res.getOutputStream()).thenThrow(new IOException());
        PingServletBeanValSimple2 servlet = new PingServletBeanValSimple2();
        servlet.doGet(req, res);
        verify(res).sendError(500, "java.io.IOException");
    }

}