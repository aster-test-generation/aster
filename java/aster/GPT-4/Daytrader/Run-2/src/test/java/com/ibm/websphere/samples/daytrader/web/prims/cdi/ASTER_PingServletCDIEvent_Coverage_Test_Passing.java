/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServletCDIEvent_Coverage_Test_Passing {
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCallsSuperInit_QbzT0() throws ServletException {
        ServletConfig mockConfig = mock(ServletConfig.class);
        PingServletCDIEvent servlet = spy(new PingServletCDIEvent());
        servlet.init(mockConfig);
        verify(servlet, times(1)).init(mockConfig);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetWriterCalled_QOag1() throws IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(writer);
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.doGet(request, response);
        verify(response).getWriter();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteHtmlHeader_bxuT2() throws IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(writer);
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.doGet(request, response);
        verify(writer).write(startsWith("<html><head><title>Ping Servlet CDI Event</title></head>"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWriteHitCount_ZfoA3() throws IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(writer);
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.doGet(request, response);
        verify(writer).write(contains("hitCount1:"));
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExceptionHandling_cVdD4() throws IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(writer);
        doThrow(new IOException()).when(writer).write(anyString());
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.doGet(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintStackTraceCalled_uhfV5() throws IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(writer);
        doThrow(new RuntimeException()).when(writer).write(anyString());
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.doGet(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlushCalled_zzrx6() throws IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(writer);
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.doGet(request, response);
        verify(writer).flush();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloseCalled_epwu7() throws IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(writer);
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.doGet(request, response);
        verify(writer).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetCompleteExecution_yIsk8() throws IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PrintWriter writer = mock(PrintWriter.class);
        when(response.getWriter()).thenReturn(writer);
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.doGet(request, response);
        verify(writer).write(anyString());
        verify(writer).flush();
        verify(writer).close();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetWithNullWriter_wVLD9() throws IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(response.getWriter()).thenReturn(null);
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.doGet(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInitCompletesWithoutException_gPos3_cVsh0() throws javax.servlet.ServletException {
    ServletConfig mockConfig = mock(ServletConfig.class);
    try {
        PingServletCDIEvent servlet = new PingServletCDIEvent();
        servlet.init(mockConfig);
        assertTrue(true); // Assuming successful initialization implies passing the test
    } catch (NoClassDefFoundError | ServletException e) {
        fail("init should not throw any exceptions");
    }
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testInitCompletesWithoutException_gPos3_cVsh0_fid2() throws javax.servlet.ServletException {
    ServletConfig mockConfig = mock(ServletConfig.class);
    PingServletCDIEvent servlet = new PingServletCDIEvent();
    assertDoesNotThrow(() -> servlet.init(mockConfig), "init should not throw any exceptions");
}
}