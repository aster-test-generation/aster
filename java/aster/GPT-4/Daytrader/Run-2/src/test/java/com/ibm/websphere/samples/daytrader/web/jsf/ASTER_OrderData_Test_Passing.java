/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeReturnsCorrectValue_XKKs0() {
    BigDecimal expectedFee = new BigDecimal("100.00");
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), expectedFee, "TypeA", 50.0, "XYZ");
    BigDecimal actualFee = order.getOrderFee();
    assertEquals(expectedFee, actualFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_gfIh0() {
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), BigDecimal.valueOf(100), "TypeA", 50.0, "XYZ");
    assertEquals(50.0, order.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_IAYr0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "Buy", 100.0, "AAPL");
    BigDecimal newPrice = new BigDecimal("200.00");
    order.setPrice(newPrice);
    assertEquals(newPrice, order.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatus_TsxJ0() {
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("10.00"), "Buy", 100.0, "AAPL");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_MnVV0() {
    OrderData orderData = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("10.50"), "Sell", 100.0, "AAPL");
    assertEquals("AAPL", orderData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_ByAC0() {
    OrderData order = new OrderData(123, "Completed", new Date(), new Date(), new BigDecimal("10.00"), "TypeA", 100.0, "AAPL");
    Integer expected = 123;
    Integer actual = order.getOrderID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee_EuRI0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "Buy", 100.0, "AAPL");
    BigDecimal newFee = new BigDecimal("15.00");
    order.setOrderFee(newFee);
    assertEquals(newFee, order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate_YfZP0() {
    Date expectedDate = new Date();
    OrderData orderData = new OrderData(1, "Pending", expectedDate, null, new BigDecimal("10.00"), "TypeA", 100.0, "XYZ");
    Date actualDate = orderData.getOpenDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_gYvz0() {
    BigDecimal expectedPrice = new BigDecimal("100.00");
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("5.00"), "Buy", 10.0, "AAPL", expectedPrice);
    BigDecimal actualPrice = order.getPrice();
    assertEquals(expectedPrice, actualPrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_sDov0() {
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("10.00"), "Buy", 100.0, "AAPL");
    assertEquals("Buy", order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderID_QUCF0() {
    Integer initialOrderID = 1;
    String orderStatus = "Open";
    Date openDate = new Date();
    Date completeDate = new Date();
    BigDecimal orderFee = new BigDecimal("10.00");
    String orderType = "Market";
    double quantity = 100.0;
    String symbol = "AAPL";
    BigDecimal price = new BigDecimal("150.00");
    OrderData orderData = new OrderData(initialOrderID, orderStatus, openDate, completeDate, orderFee, orderType, quantity, symbol, price);
    Integer newOrderID = 2;
    orderData.setOrderID(newOrderID);
    assertEquals(newOrderID, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotal_ukWd0() {
    BigDecimal expectedTotal = new BigDecimal("100.00");
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), expectedTotal, "TypeA", 10.0, "XYZ");
    BigDecimal result = order.getTotal();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotal_eAXt0() {
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("100.00"), "TypeA", 50.0, "AAPL");
    BigDecimal expectedTotal = new BigDecimal("200.00");
    order.setTotal(expectedTotal);
    assertEquals(expectedTotal, order.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDate_TkNM0() {
    OrderData order = new OrderData(1, "Open", new Date(), null, new BigDecimal("10.00"), "TypeA", 100.0, "XYZ");
    Date newCompletionDate = new Date();
    order.setCompletionDate(newCompletionDate);
    assertEquals(newCompletionDate, order.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus_TevD0_JyUo0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "TypeA", 100.0, "XYZ", new BigDecimal("50.00"));
    order.setOrderStatus("Completed");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_iNPL0_qCVl0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.50"), "Buy", 100.0, "AAPL");
    order.setSymbol("GOOGL");
    assertEquals("GOOGL", order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDate_uywm0_uVHU0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "TypeA", 100.0, "XYZ", new BigDecimal("50.00"));
    Date newOpenDate = new Date();
    order.setOpenDate(newOpenDate);
    assertEquals(newOpenDate, order.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_cADR0_diUI0() {
    OrderData order = new OrderData(1, "Open", new Date(), null, new BigDecimal("10.00"), "TypeA", 5.0, "XYZ");
    order.setQuantity(10.0);
    assertEquals(10.0, order.getQuantity(), 0.0);
  }
}