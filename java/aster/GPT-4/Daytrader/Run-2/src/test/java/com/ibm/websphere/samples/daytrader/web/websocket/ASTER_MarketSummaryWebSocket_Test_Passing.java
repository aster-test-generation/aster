/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_MarketSummaryWebSocket_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnError_Tjqs0() {
    Throwable mockThrowable = mock(Throwable.class);
    Session mockSession = mock(Session.class);
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    marketSummaryWebSocket.onError(mockThrowable, mockSession);
    verify(mockThrowable).printStackTrace();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummaryWithNullAction_lWik2() {
    ActionMessage message = mock(ActionMessage.class);
    when(message.getDecodedAction()).thenReturn(null);
    Session session = mock(Session.class);
    MarketSummaryWebSocket webSocket = new MarketSummaryWebSocket();
    webSocket.sendMarketSummary(message, session);
    verify(session, never()).getAsyncRemote();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummaryWithEmptyAction_LFxv3() {
    ActionMessage message = mock(ActionMessage.class);
    when(message.getDecodedAction()).thenReturn("");
    Session session = mock(Session.class);
    MarketSummaryWebSocket webSocket = new MarketSummaryWebSocket();
    webSocket.sendMarketSummary(message, session);
    verify(session, never()).getAsyncRemote();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummaryWithUnhandledAction_NoNS4() {
    ActionMessage message = mock(ActionMessage.class);
    when(message.getDecodedAction()).thenReturn("someUnhandledAction");
    Session session = mock(Session.class);
    MarketSummaryWebSocket webSocket = new MarketSummaryWebSocket();
    webSocket.sendMarketSummary(message, session);
    verify(session, never()).getAsyncRemote();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummaryLatchInterrupt_XJcl5_IUPP0() throws InterruptedException {
    ActionMessage message = mock(ActionMessage.class);
    when(message.getDecodedAction()).thenReturn("updateMarketSummary");
    Session session = mock(Session.class);
    javax.websocket.RemoteEndpoint.Async asyncRemote = mock(javax.websocket.RemoteEndpoint.Async.class);
    when(session.getAsyncRemote()).thenReturn(asyncRemote);
    CountDownLatch latch = mock(CountDownLatch.class);
    doThrow(new InterruptedException()).when(latch).await();
    MarketSummaryWebSocket webSocket = new MarketSummaryWebSocket();
    webSocket.sendMarketSummary(message, session);
    verify(latch).await();
    verify(asyncRemote, never()).sendText(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnStockChangeWithOneOpenSession_GPVT1_KIDs0() {
    MarketSummaryWebSocket marketSummaryWebSocket = new MarketSummaryWebSocket();
    Session mockSession = mock(Session.class);
    when(mockSession.isOpen()).thenReturn(true);
    marketSummaryWebSocket.onOpen(mockSession, null); // This will add the session to the sessions set
    String event = "GOOGL: 2800.00";
    marketSummaryWebSocket.onStockChange(event);
    verify(mockSession.getAsyncRemote()).sendObject(any());
  }
}