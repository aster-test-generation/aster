/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExplicitGC_Test_Passing {
  @Mock
  private ServletConfig mockConfig;
  @InjectMocks
  private ExplicitGC explicitGC;
  private HttpServletRequest httpServletRequest;
  private HttpServletResponse httpServletResponse;
  private ServletOutputStream servletOutputStream;
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    explicitGC = new ExplicitGC();
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    // Arrange
    doNothing().when(httpServletResponse).flushBuffer();
    // Act
    explicitGC.doPost(httpServletRequest, httpServletResponse);
    // Assert
    verify(httpServletResponse, never()).flushBuffer(); // Verify flushBuffer was never called
    verify(httpServletResponse, never()).getOutputStream(); // Verify getOutputStream was never called
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_uQjm0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    ExplicitGC explicitGC = new ExplicitGC();
    explicitGC.doPost(request, response);
    verify(explicitGC).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_fqTV0() {
    ExplicitGC explicitGC = new ExplicitGC();
    String result = explicitGC.getServletInfo();
    assertEquals("Generate Explicit GC to VM", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws Exception {
    explicitGC = new ExplicitGC();
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    servletOutputStream = mock(ServletOutputStream.class);
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    explicitGC.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(httpServletResponse).getOutputStream();
    verify(servletOutputStream, atLeastOnce()).println(anyString());
    // Since we cannot directly capture the output to the servletOutputStream, we focus on verifying interactions
    // and that no exceptions are thrown during the doGet method execution.
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_wnfm0_1() throws ServletException {
    explicitGC.init(mockConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_wnfm0_2() throws ServletException {
    explicitGC.init(mockConfig);
    assertEquals(0, hitCount);
  }
}