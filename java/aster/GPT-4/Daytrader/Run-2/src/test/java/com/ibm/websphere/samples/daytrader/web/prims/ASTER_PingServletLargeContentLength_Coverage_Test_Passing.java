/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServletLargeContentLength_Coverage_Test_Passing {
    @Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithException_ciGm1() throws ServletException {
        ServletConfig mockConfig = org.mockito.Mockito.mock(ServletConfig.class);
        org.mockito.Mockito.doThrow(new ServletException("Initialization failure")).when(mockConfig).getServletName();
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        servlet.init(mockConfig);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_BgjI0() {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        String expectedInfo = "Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.";
        assertEquals(expectedInfo, servlet.getServletInfo());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitWithValidConfig_bViK0() throws ServletException {
        ServletConfig mockConfig = org.mockito.Mockito.mock(ServletConfig.class);
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        servlet.init(mockConfig);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetCallsDoPost_wkQf0() throws ServletException, IOException {
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        PingServletLargeContentLength spyServlet = spy(servlet);
        spyServlet.doGet(request, response);
        verify(spyServlet).doPost(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithZeroContentLength_vEaw0() throws ServletException, IOException {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getContentLengthLong()).thenReturn(0L);
        servlet.doPost(request, response);
        verify(request).getContentLengthLong();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostWithLargeContentLength_uhVp1() throws ServletException, IOException {
        PingServletLargeContentLength servlet = new PingServletLargeContentLength();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        when(request.getContentLengthLong()).thenReturn(100000L);
        servlet.doPost(request, response);
        verify(request).getContentLengthLong();
    }
}