/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.mdb;
import javax.jms.Message;
import javax.jms.TextMessage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_DTStreamer3MDB_Coverage_Test_Passing {


@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testExceptionHandling_amDk4() throws Exception {
        DTStreamer3MDB mdb = new DTStreamer3MDB();
        Message message = mock(TextMessage.class);
        when(message.getStringProperty("command")).thenReturn("updateQuote");
        when(((TextMessage) message).getText()).thenReturn("Update Quote Test");
        when(message.getLongProperty("publishTime")).thenReturn(System.currentTimeMillis() - 100);
        doThrow(new RuntimeException("Test Exception")).when(message).getStringProperty("symbol");
        mdb.onMessage(message);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnknownCommand_ZSUp5() throws Exception {
        DTStreamer3MDB mdb = new DTStreamer3MDB();
        Message message = mock(TextMessage.class);
        when(message.getStringProperty("command")).thenReturn("unknownCommand");
        when(((TextMessage) message).getText()).thenReturn("Unknown Command Test");
        mdb.onMessage(message);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testNullCommand_xsHD6() throws Exception {
        DTStreamer3MDB mdb = new DTStreamer3MDB();
        Message message = mock(TextMessage.class);
        when(message.getStringProperty("command")).thenReturn(null);
        when(((TextMessage) message).getText()).thenReturn("Null Command Test");
        mdb.onMessage(message);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingWithNullProperties_zVhw8() throws Exception {
        DTStreamer3MDB mdb = new DTStreamer3MDB();
        Message message = mock(TextMessage.class);
        when(message.getStringProperty("command")).thenReturn("ping");
        when(((TextMessage) message).getText()).thenReturn("Ping Test");
        when(message.getLongProperty("publishTime")).thenReturn(System.currentTimeMillis() - 50);
        mdb.onMessage(message);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUpdateQuoteWithInvalidPublishTime_bzsR9() throws Exception {
        DTStreamer3MDB mdb = new DTStreamer3MDB();
        Message message = mock(TextMessage.class);
        when(message.getStringProperty("command")).thenReturn("updateQuote");
        when(((TextMessage) message).getText()).thenReturn("Update Quote Test");
        when(message.getLongProperty("publishTime")).thenThrow(new NumberFormatException());
        mdb.onMessage(message);
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPingWithInvalidPublishTime_SlYR10() throws Exception {
        DTStreamer3MDB mdb = new DTStreamer3MDB();
        Message message = mock(TextMessage.class);
        when(message.getStringProperty("command")).thenReturn("ping");
        when(((TextMessage) message).getText()).thenReturn("Ping Test");
        when(message.getLongProperty("publishTime")).thenThrow(new NumberFormatException());
        mdb.onMessage(message);
    }
}