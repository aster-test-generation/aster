/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedExecutor_Test_Passing {
  PingManagedExecutor pingManagedExecutor;
  ServletConfig mockServletConfig;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  @Mock
  private HttpServletRequest httpservletrequest;
  @Mock
  private HttpServletResponse httpservletresponse;
  @Mock
  private ServletOutputStream servletoutputstream;
  @Mock
  private ManagedExecutorService mes;
  @Mock
  private AsyncContext asyncContext;
  private static int hitCount;
  private static String initTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingManagedExecutor = new PingManagedExecutor();
    // Setup
    PingManagedExecutor spyExecutor = spy(pingManagedExecutor);
    // Execute
    spyExecutor.doPost(httpServletRequest, httpServletResponse);
    // Verify
    verify(spyExecutor, times(1)).doGet(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_Oppo0() {
    PingManagedExecutor executor = new PingManagedExecutor();
    String result = executor.getServletInfo();
    assertEquals("Tests a ManagedExecutor", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_GKVh0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    AsyncContext asyncContext = mock(AsyncContext.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(req.startAsync()).thenReturn(asyncContext);
    when(res.getOutputStream()).thenReturn(out);
    PingManagedExecutor executor = new PingManagedExecutor();
    executor.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(out).println(anyString()); // Check if any string was printed to output stream
    verify(asyncContext).complete(); // Ensure async context is completed
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_UcML0_1() throws ServletException {
    pingManagedExecutor = new PingManagedExecutor();
    mockServletConfig = mock(ServletConfig.class);
    pingManagedExecutor.init(mockServletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_UcML0_2() throws ServletException {
    pingManagedExecutor = new PingManagedExecutor();
    mockServletConfig = mock(ServletConfig.class);
    pingManagedExecutor.init(mockServletConfig);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_bxMC0_mJPj0() throws ServletException, IOException {
    PingManagedExecutor executor = new PingManagedExecutor();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(response.getOutputStream()).thenReturn(outputStream);
    when(request.startAsync()).thenReturn(mock(AsyncContext.class));
    executor.doGet(request, response);
    verify(response, times(1)).setContentType("text/html");
  }
}