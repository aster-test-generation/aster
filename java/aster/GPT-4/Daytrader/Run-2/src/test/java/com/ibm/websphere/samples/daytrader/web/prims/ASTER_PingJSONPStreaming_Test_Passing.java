/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPStreaming_Test_Passing {
  @Mock
  private ServletConfig mockServletConfig;
  @InjectMocks
  private PingJSONPStreaming pingJSONPStreaming;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  ServletOutputStream servletOutputStream;
  private static int hitCount;
  private static String initTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingJSONPStreaming = new PingJSONPStreaming();
    // Setup
    pingJSONPStreaming.doPost(httpServletRequest, httpServletResponse);
    // Verify that doGet is called within doPost
    verify(httpServletRequest, atLeastOnce()).setAttribute(anyString(), any());
    verify(httpServletResponse, atLeastOnce()).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_nwBb0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    pingJSONPStreaming.doPost(request, response);
    verify(pingJSONPStreaming).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_fvQx0() {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    String result = pingJSONPStreaming.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetHandlesException_gyyq2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getOutputStream()).thenThrow(new IOException("Fake IOException"));
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    pingJSONPStreaming.doGet(req, res);
    verify(res).sendError(500, "java.io.IOException: Fake IOException");
  }
}