/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_vmjS0() {
    BigDecimal purchasePrice = new BigDecimal("150.00");
    Date purchaseDate = new Date();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean(100.0, purchasePrice, purchaseDate, account, quote);
    assertEquals(100.0, holding.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteIDWithQuoteNotNull_FQRS0() {
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    AccountDataBean account = new AccountDataBean();
    HoldingDataBean holding = new HoldingDataBean(100, new BigDecimal("150.00"), new Date(), account, quote);
    String expected = "AAPL";
    String actual = holding.getQuoteID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteIDWithQuoteNull_JSnz1() {
    HoldingDataBean holding = new HoldingDataBean();
    String expected = null;
    String actual = holding.getQuoteID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_eViF0() {
    QuoteDataBean expectedQuote = new QuoteDataBean("AAPL", "Apple Inc.", 500000, new BigDecimal("150.00"), new BigDecimal("148.00"), new BigDecimal("147.50"), new BigDecimal("151.00"), 1.5);
    AccountDataBean account = new AccountDataBean(1, 1, new Date(), new Date(), new BigDecimal("10000"), new BigDecimal("10000"), "user1");
    HoldingDataBean holding = new HoldingDataBean(100, new BigDecimal("150.00"), new Date(), account, expectedQuote);
    QuoteDataBean actualQuote = holding.getQuote();
    assertEquals(expectedQuote, actualQuote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameHoldingID_NTnb0() {
    Integer holdingID = 1;
    HoldingDataBean holding1 = new HoldingDataBean(holdingID, 100.0, new BigDecimal("150.00"), new Date(), "AAPL");
    HoldingDataBean holding2 = new HoldingDataBean(holdingID, 200.0, new BigDecimal("150.00"), new Date(), "AAPL");
    assertTrue(holding1.equals(holding2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentHoldingID_Srll1() {
    HoldingDataBean holding1 = new HoldingDataBean(1, 100.0, new BigDecimal("150.00"), new Date(), "AAPL");
    HoldingDataBean holding2 = new HoldingDataBean(2, 100.0, new BigDecimal("150.00"), new Date(), "AAPL");
    assertFalse(holding1.equals(holding2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullHoldingIDInFirstObject_Zesz2() {
    HoldingDataBean holding1 = new HoldingDataBean(null, 100.0, new BigDecimal("150.00"), new Date(), "AAPL");
    HoldingDataBean holding2 = new HoldingDataBean(1, 100.0, new BigDecimal("150.00"), new Date(), "AAPL");
    assertFalse(holding1.equals(holding2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullHoldingIDInBothObjects_bqfi3() {
    HoldingDataBean holding1 = new HoldingDataBean(null, 100.0, new BigDecimal("150.00"), new Date(), "AAPL");
    HoldingDataBean holding2 = new HoldingDataBean(null, 100.0, new BigDecimal("150.00"), new Date(), "AAPL");
    assertTrue(holding1.equals(holding2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_tZNH4() {
    HoldingDataBean holding1 = new HoldingDataBean(1, 100.0, new BigDecimal("150.00"), new Date(), "AAPL");
    assertTrue(holding1.equals(holding1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_nfnx0() {
    Integer holdingID = 1;
    double quantity = 150.0;
    BigDecimal purchasePrice = new BigDecimal("320.50");
    Date purchaseDate = new Date();
    String quoteID = "AAPL";
    HoldingDataBean holding = new HoldingDataBean(holdingID, quantity, purchasePrice, purchaseDate, quoteID);
    String expected = "\n\tHolding Data for holding: " + holdingID + "\n\t\t      quantity:" + quantity + "\n\t\t purchasePrice:" + purchasePrice + "\n\t\t  purchaseDate:" + purchaseDate + "\n\t\t       quoteID:" + quoteID;
    assertEquals(expected, holding.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccount_MMdW0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setAccount(accountDataBean);
    assertEquals(accountDataBean, holdingDataBean.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PrRi0_1() {
    HoldingDataBean result = HoldingDataBean.getRandomInstance();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PrRi0_2() {
    HoldingDataBean result = HoldingDataBean.getRandomInstance();
    assertNotNull(result.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PrRi0_3() {
    HoldingDataBean result = HoldingDataBean.getRandomInstance();
    assertTrue(result.getQuantity() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PrRi0_4() {
    HoldingDataBean result = HoldingDataBean.getRandomInstance();
    assertNotNull(result.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PrRi0_5() {
    HoldingDataBean result = HoldingDataBean.getRandomInstance();
    assertNotNull(result.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PrRi0_6() {
    HoldingDataBean result = HoldingDataBean.getRandomInstance();
    assertNotNull(result.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDate_IoLF0() {
    Date expectedDate = new Date();
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setPurchaseDate(expectedDate);
    assertEquals(expectedDate, holdingDataBean.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNonNullHoldingID_Gwmy0() {
    Integer holdingID = 123;
    HoldingDataBean holdingDataBean = new HoldingDataBean(holdingID, 150.0, new BigDecimal("320.50"), new Date(), "QID123");
    int expectedHashCode = holdingID.hashCode();
    assertEquals(expectedHashCode, holdingDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullHoldingID_SLPZ1() {
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    int expectedHashCode = 0;
    assertEquals(expectedHashCode, holdingDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteID_vsMO0() {
    HoldingDataBean holding = new HoldingDataBean();
    String expectedQuoteID = "AAPL";
    holding.setQuoteID(expectedQuoteID);
    assertEquals(expectedQuoteID, holding.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuote_DGYv0() {
    HoldingDataBean holding = new HoldingDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    holding.setQuote(quote);
    assertEquals(quote, holding.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingID_JWRz0() {
    Integer expectedHoldingID = 123;
    HoldingDataBean holdingDataBean = new HoldingDataBean(expectedHoldingID, 150.0, new BigDecimal("320.50"), new Date(), "IBM");
    Integer actualHoldingID = holdingDataBean.getHoldingID();
    assertEquals(expectedHoldingID, actualHoldingID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_JLfO0() {
    HoldingDataBean holding = new HoldingDataBean();
    Integer expectedHoldingID = 123;
    holding.setHoldingID(expectedHoldingID);
    assertEquals(expectedHoldingID, holding.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_ZVQU0() {
    Integer holdingID = 1;
    double quantity = 150.0;
    BigDecimal purchasePrice = new BigDecimal("320.50");
    Date purchaseDate = new Date();
    String quoteID = "AAPL";
    HoldingDataBean holding = new HoldingDataBean(holdingID, quantity, purchasePrice, purchaseDate, quoteID);
    String expectedHTML = "<BR>Holding Data for holding: " + holdingID + "</B>" +
        "<LI>      quantity:" + quantity + "</LI>" +
        "<LI> purchasePrice:" + purchasePrice + "</LI>" +
        "<LI>  purchaseDate:" + purchaseDate + "</LI>" +
        "<LI>       quoteID:" + quoteID + "</LI>";
    assertEquals(expectedHTML, holding.toHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_NGqd0() {
    AccountDataBean expectedAccount = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean(100.0, new BigDecimal("150.00"), new Date(), expectedAccount, quote);
    AccountDataBean actualAccount = holding.getAccount();
    assertEquals(expectedAccount, actualAccount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDate_xpeh0_gknB0() {
    Date expectedDate = new Date();
    QuoteDataBean quote = new QuoteDataBean("QID123");
    AccountDataBean account = new AccountDataBean();
    HoldingDataBean holding = new HoldingDataBean(1.0, new BigDecimal("100.0"), expectedDate, account, quote);
    Date actualDate = holding.getPurchaseDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_dtbY0_RhiC0() {
    HoldingDataBean holding = new HoldingDataBean();
    double expectedQuantity = 150.0;
    holding.setQuantity(expectedQuantity);
    assertEquals(expectedQuantity, holding.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_PrRi0() {
    HoldingDataBean result = HoldingDataBean.getRandomInstance();
    assertNotNull(result);
    assertNotNull(result.getHoldingID());
    assertTrue(result.getQuantity() >= 0);
    assertNotNull(result.getPurchasePrice());
    assertNotNull(result.getPurchaseDate());
    assertNotNull(result.getQuoteID());
  }
}