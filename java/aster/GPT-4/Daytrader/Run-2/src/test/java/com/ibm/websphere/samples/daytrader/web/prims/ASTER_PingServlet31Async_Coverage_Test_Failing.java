/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;
import java.io.IOException;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import java.util.concurrent.TimeUnit;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
public class Aster_PingServlet31Async_Coverage_Test_Failing {
private PingServlet31Async servlet;
private ServletConfig mockConfig;
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetServletInfo_Cawg0() {
        PingServlet31Async servlet = new PingServlet31Async();
        String expectedInfo = "Basic dynamic HTML generation through a servlet";
        assertEquals(expectedInfo, servlet.getServletInfo());
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetCallsDoPost_DZiD0() throws ServletException, IOException {
        PingServlet31Async servlet = new PingServlet31Async();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        PingServlet31Async spyServlet = spy(servlet);
        spyServlet.doGet(request, response);
        verify(spyServlet).doPost(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoGetHandlesIOException_rhDA1() throws ServletException, IOException {
        PingServlet31Async servlet = new PingServlet31Async();
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);
        doThrow(new IOException()).when(servlet).doPost(request, response);
        try {
            servlet.doGet(request, response);
        } catch (IOException e) {
        }
        verify(servlet).doPost(request, response);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetContentType_XggK0() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        PingServlet31Async servlet = new PingServlet31Async();
        servlet.doPost(req, res);
        verify(res).setContentType("text/html");
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testStartAsync_JlyN1() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        AsyncContext asyncContext = mock(AsyncContext.class);
        when(req.startAsync()).thenReturn(asyncContext);
        PingServlet31Async servlet = new PingServlet31Async();
        servlet.doPost(req, res);
        verify(req).startAsync();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetInputStream_yKLb2() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletInputStream inputStream = mock(ServletInputStream.class);
        when(req.getInputStream()).thenReturn(inputStream);
        PingServlet31Async servlet = new PingServlet31Async();
        servlet.doPost(req, res);
        verify(req).getInputStream();
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testReadListenerImplCreation_HEea3() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        AsyncContext asyncContext = mock(AsyncContext.class);
        ServletInputStream inputStream = mock(ServletInputStream.class);
        when(req.startAsync()).thenReturn(asyncContext);
        when(req.getInputStream()).thenReturn(inputStream);
        PingServlet31Async servlet = new PingServlet31Async();
        servlet.doPost(req, res);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testDoPostCompletes_zYhs5() throws ServletException, IOException {
        HttpServletRequest req = mock(HttpServletRequest.class);
        HttpServletResponse res = mock(HttpServletResponse.class);
        ServletInputStream inputStream = mock(ServletInputStream.class);
        AsyncContext asyncContext = mock(AsyncContext.class);
        when(req.getInputStream()).thenReturn(inputStream);
        when(req.startAsync()).thenReturn(asyncContext);
        PingServlet31Async servlet = new PingServlet31Async();
        servlet.doPost(req, res);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
public void testGetServletInfo_Cawg0_gyvd0_fid1() {
    PingServlet31Async servlet = new PingServlet31Async();
    String expectedInfo = "PingServlet31Async";
    assertEquals(expectedInfo, servlet.getServletInfo());
}
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void setUp_krdc0() throws javax.servlet.ServletException {
        servlet = new PingServlet31Async();
        mockConfig = mock(ServletConfig.class);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCallsSuperInit_RFMI1() throws ServletException {
        PingServlet31Async spyServlet = spy(new PingServlet31Async());
        spyServlet.init(mockConfig);
        verify(spyServlet).init(mockConfig);
    }
@Test
@Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testInitCompletesWithoutException_xoAU4() throws ServletException {
        servlet.init(mockConfig);
    }
}