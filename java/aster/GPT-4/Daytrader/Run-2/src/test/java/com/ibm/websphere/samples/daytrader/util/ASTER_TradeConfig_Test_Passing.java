/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_TradeConfig_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloatReturnsPositiveValue_Itbd0() {
    int testValue = 10;
    float result = TradeConfig.rndFloat(testValue);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessMode_bZka0() {
    int expectedMode = 5; // Assuming default or previously set value
    int actualMode = TradeConfig.getAccessMode();
    assertEquals(expectedMode, actualMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_izav0() {
    int expected = 0; // Assuming default or preset value
    int actual = TradeConfig.getMarketSummaryInterval();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_MQSk0() {
    int expected = 1; // Assuming default or preset value of primIterations
    int actual = TradeConfig.getPrimIterations();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_VDRv0_1() {
    String result = TradeConfig.rndAddress();
    assertTrue(result.endsWith(" Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_VDRv0_2() {
    String result = TradeConfig.rndAddress();
    assertTrue(result.matches("\\d+ Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_Ypig0() {
    int initialCount = TradeConfig.getScenarioCount();
    TradeConfig.incrementScenarioCount();
    assertEquals(initialCount + 1, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_fKpZ0() {
    int expectedMode = 5;
    TradeConfig.setRunTimeMode(expectedMode);
    assertEquals(expectedMode, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullNamePattern_FqCJ0() {
    String fullName = TradeConfig.rndFullName();
    assertTrue(fullName.matches("first:\\d{1,4} last:\\d{1,4}"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixesNotNull_LQSp0() {
    assertNotNull(TradeConfig.getScenarioMixes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_Qggz0() {
    int expected = 100; // Assuming the expected MAX_USERS is 100
    int actual = TradeConfig.getMAX_USERS();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_SEyk0() {
    int expected = 10; // Assuming MAX_QUOTES is set to10
    assertEquals(expected, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongRunDefault_MNFm0() {
    boolean expected = true; // Assuming default value of longRun istrue
    boolean actual = TradeConfig.getLongRun();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequency_lulA0() {
    TradeConfig.setListQuotePriceChangeFrequency(10);
    assertEquals(10, TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_WyZB0() {
    TradeConfig.setOrderProcessingMode(1);
    assertEquals(1, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDisplayOrderAlerts_LwXV0() {
    boolean expected = true; // Assuming default or expected state
    boolean actual = TradeConfig.getDisplayOrderAlerts();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_krkK0() {
    int expectedFrequency = 1000; // Assuming 1000 is the expected frequency set elsewhere in the application
    int actualFrequency = TradeConfig.getListQuotePriceChangeFrequency();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUpdateQuotePrices_aOPk0() {
    TradeConfig.setUpdateQuotePrices(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessMode_eoWA0() {
    int expectedValue = 5;
    TradeConfig.setAccessMode(expectedValue);
    assertEquals(expectedValue, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetJDBCDriverNeedsGlobalTransaction_blFD0() {
    boolean result = TradeConfig.getJDBCDriverNeedsGlobalTransation();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_QgAj0() {
    String result = TradeConfig.rndNewUserID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_lcZx0() {
    int expected = 10; // Assuming MAX_HOLDINGS is set to10
    int actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_ExistingUserActionB_XcZi1() {
    boolean newUser = false;
    char result = TradeConfig.getScenarioAction(newUser);
    assertEquals('h', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_ExistingUserActionNotB_QfLS2() {
    boolean newUser = false;
    char result = TradeConfig.getScenarioAction(newUser);
    assertNotEquals('s', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPageWithValidIndex_kFUi0() {
    String expectedPageContent = "Expected content of the page";
    int testPageIndex = 1; // Assuming this index is valid and within the range of webUI[webInterface] array
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePrices_pzCr0() {
    boolean expected = false; // Assuming the default state of updateQuotePrices is false
    boolean actual = TradeConfig.getUpdateQuotePrices();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBoolean_PmMr0() {
    boolean result = TradeConfig.rndBoolean();
    assertTrue(result == true || result == false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetScenarioCount_dWji0() {
    TradeConfig.setScenarioCount(5);
    assertEquals(5, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_Gpuk0() {
    boolean expected = false; // Assuming default or expected state
    boolean actual = TradeConfig.getPublishQuotePriceChange();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_NullParam_DbvZ0() {
    TradeConfig.setConfigParam(null, "someValue");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_EmptyParam_JOQX1() {
    TradeConfig.setConfigParam("   ", "someValue");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_NullValue_hSTs2() {
    TradeConfig.setConfigParam("orderProcessingMode", null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterface_SyeE0() {
    int expected = 5; // Assuming default or expected value of webInterface
    int actual = TradeConfig.getWebInterface();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRandomMethodReturnsValueBetweenZeroAndOne_NXyV0() {
    double result = TradeConfig.random();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_VYVj0() {
    int expectedMode = 0; // Assuming a default or previously set value for the test
    int actualMode = TradeConfig.getOrderProcessingMode();
    assertEquals(expectedMode, actualMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_GreaterThanZero_ZaQR0() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_LessThanOrEqualToOnePointOne_Occr1() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertTrue(result.compareTo(new BigDecimal("1.1")) <= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_NotEqualToOne_KFev2() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
    assertNotEquals(BigDecimal.ONE, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_NextUser_VSVE1() {
    TradeConfig.RND_USER = false;
    String expectedUserID = "nextUser456";
    TradeConfig mockTradeConfig = mock(TradeConfig.class);
    when(mockTradeConfig.nextUserID()).thenReturn(expectedUserID);
    String result = TradeConfig.getUserID();
    assertEquals(expectedUserID, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_LvgJ0() {
    String result = TradeConfig.rndSymbol();
    assertTrue(result.startsWith("s:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithColonInUserID_oosx0_1() {
    String userID = "user:123";
    String result = TradeConfig.rndEmail(userID);
    assertFalse(result.contains(":"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithColonInUserID_oosx0_2() {
    String userID = "user:123";
    String result = TradeConfig.rndEmail(userID);
    assertTrue(result.matches("user123@[0-9]+\\.com"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCardFormat_dSXv0() {
    String creditCard = TradeConfig.rndCreditCard();
    assertTrue(creditCard.matches("\\d{1,3}-\\d{1,4}-\\d{1,4}-\\d{1,4}"));
  }

  @Test
  @Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_kYuN0() {
    int expectedMode = 5; // Assuming5 is a valid runtime mode for the test scenario
    assertEquals(expectedMode, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_Mhqy0_1() {
    float input = 10.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(input);
    assertTrue(result.compareTo(BigDecimal.ZERO) >= 0 && result.compareTo(new BigDecimal(input)) <= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_Mhqy0_2() {
    float input = 10.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(input);
    assertEquals(2, result.scale());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterface_gSrl0() {
    TradeConfig.setWebInterface(5);
    assertEquals(5, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBalance_fNtq0() {
    assertEquals("1000000", TradeConfig.rndBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxHoldings_Erfa0_vJUw0() {
    TradeConfig.setMAX_HOLDINGS(10);
    assertEquals(10, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_dwkP0_ncPs0() {
    TradeConfig.setMarketSummaryInterval(300);
    assertEquals(300, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndQuantity_Zxda0_ZDqB0_1() {
    float result = TradeConfig.rndQuantity();
    assertTrue(result >= 1.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndQuantity_Zxda0_ZDqB0_2() {
    float result = TradeConfig.rndQuantity();
    assertTrue(result <= 201.0f);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxUsers_HIjC0_xuCp0() {
    TradeConfig.setMAX_USERS(5);
    assertEquals(5, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndPriceRange_IabY0_Lnwb0() {
    float result = TradeConfig.rndPrice();
    assertTrue(result >= 1.0f && result <= 201.0f, "Price should be between 1.0 and 201.0");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_waXb0_pESj0() {
    TradeConfig.setPrimIterations(5);
    assertEquals(5, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_QUOTES_ZNel0_XVSo0() {
    TradeConfig.setMAX_QUOTES(10);
    assertEquals(10, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidOrderProcessingMode_URRZ4_oJaA0() {
    TradeConfig.setConfigParam("orderProcessingMode", "invalidMode");
    assertEquals(0, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidAccessMode_FCLM6_DBcb5() {
    TradeConfig.setConfigParam("accessMode", "invalidAccessMode");
    assertEquals(5, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidWebInterface_QHhl8_kXnv5() {
    TradeConfig.setConfigParam("WebInterface", "invalidInterface");
    assertEquals(5, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidPrimIterations_XOeF14_cMak0() {
    int currentPrimIterations = TradeConfig.getPrimIterations();
    TradeConfig.setConfigParam("primIterations", "def");
    assertEquals(currentPrimIterations, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndIntReturnsValueWithinRange_jVTf0_OSsD0() {
    int max = 10;
    int result = TradeConfig.rndInt(max);
    assertTrue(result >= 0 && result < max, "Result should be within range 0 to " + (max - 1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_aRyo0_ChhC0() {
    int numUsers = 10; // Example number of users
    TradeConfig.setMAX_USERS(numUsers); // Method to set MAX_USERS, assuming it exists
    String userID = TradeConfig.rndUserID();
    int uidNumber = Integer.parseInt(userID.substring(4));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_VDRv0() {
    String result = TradeConfig.rndAddress();
    assertTrue(result.endsWith(" Oak St."));
    assertTrue(result.matches("\\d+ Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithColonInUserID_oosx0() {
    String userID = "user:123";
    String result = TradeConfig.rndEmail(userID);
    assertFalse(result.contains(":"));
    assertTrue(result.matches("user123@[0-9]+\\.com"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimal_Mhqy0() {
    float input = 10.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(input);
    assertTrue(result.compareTo(BigDecimal.ZERO) >= 0 && result.compareTo(new BigDecimal(input)) <= 0);
    assertEquals(2, result.scale());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidOrderProcessingMode_QJiy3_Gmni0_fid3() {
    TradeConfig.setConfigParam("orderProcessingMode", "validMode");
    assertEquals(0, TradeConfig.getOrderProcessingMode()); // Assuming validMode corresponds to index 0
  }
}