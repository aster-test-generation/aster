/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DirectSLSBBean_Coverage_Test_Passing {
  private DirectSLSBBean directSLSBBean;
  private TradeDirect tradeDirect;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrderSetsInSession_pfzT0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = mockTradeDirect; // Assuming tradeDirect is accessible, might need setter method
    directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrderReturnsCorrectValue_qEWu1() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "SELL";
    double quantity = 50.0;
    OrderDataBean expectedOrder = new OrderDataBean();
    when(mockTradeDirect.createOrder(account, quote, holding, orderType, quantity)).thenReturn(expectedOrder);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = mockTradeDirect; // Assuming tradeDirect is accessible, might need setter method
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_SetsInSession_HYzI0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, e.g., via constructor or setter
    bean.getAllQuotes();
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterSetsInSession_eIsW0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, e.g., via a setter or directly
    bean.register("user123", "password", "John Doe", "1234 Elm St", "john@example.com", "1234-5678-9012-3456", new BigDecimal("1000.00"));
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterReturnsCorrectAccountData_jask1() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, e.g., via a setter or directly
    AccountDataBean expectedAccount = new AccountDataBean();
    when(mockTradeDirect.register("user123", "password", "John Doe", "1234 Elm St", "john@example.com", "1234-5678-9012-3456", new BigDecimal("1000.00"))).thenReturn(expectedAccount);
    AccountDataBean result = bean.register("user123", "password", "John Doe", "1234 Elm St", "john@example.com", "1234-5678-9012-3456", new BigDecimal("1000.00"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsSetsInSession_cxHw0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming tradeDirect can be accessed or injected
    String userID = "user123";
    bean.getHoldings(userID);
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsReturnsCorrectData_hgGx1() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming tradeDirect can be accessed or injected
    String userID = "user123";
    Collection<HoldingDataBean> expectedHoldings = mock(Collection.class);
    when(mockTradeDirect.getHoldings(userID)).thenReturn(expectedHoldings);
    Collection<HoldingDataBean> actualHoldings = bean.getHoldings(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSetsInSessionTrue_ZSvk0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    when(mockTradeDirect.login("user123", "password123")).thenReturn(new AccountDataBean());
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, e.g., via a setter or directly
    bean.login("user123", "password123");
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_SetsInSession_QfuQ0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set tradeDirect, possibly via constructor or setter
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000;
    bean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_ReturnsUpdatedQuote_rDBm1() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set tradeDirect, possibly via constructor or setter
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000;
    QuoteDataBean expectedQuote = new QuoteDataBean();
    when(mockTradeDirect.updateQuotePriceVolume(symbol, newPrice, sharesTraded)).thenReturn(expectedQuote);
    QuoteDataBean result = bean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertSame(expectedQuote, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrderWithValidOrderAndTwoPhaseTrue_okTZ0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, possibly through a setter or directly if public
    bean.cancelOrder(123, true);
    verify(mockTradeDirect).setInSession(true);
    verify(mockTradeDirect).cancelOrder(123, true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrderWithValidOrderAndTwoPhaseFalse_bNvy1() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, possibly through a setter or directly if public
    bean.cancelOrder(456, false);
    verify(mockTradeDirect).setInSession(true);
    verify(mockTradeDirect).cancelOrder(456, false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteSetsInSession_shzD0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    String symbol = "AAPL";
    QuoteDataBean expectedQuote = new QuoteDataBean();
    when(mockTradeDirect.getQuote(symbol)).thenReturn(expectedQuote);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    QuoteDataBean result = bean.getQuote(symbol);
    verify(mockTradeDirect).setInSession(true);
    verify(mockTradeDirect).getQuote(symbol);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteSetsInSession_jWRl0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, possibly through a setter or directly if public
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    bean.createQuote(symbol, companyName, price);
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuoteReturnsCorrectData_Tkuj1() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, possibly through a setter or directly if public
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean expectedQuote = new QuoteDataBean();
    when(mockTradeDirect.createQuote(symbol, companyName, price)).thenReturn(expectedQuote);
    QuoteDataBean result = bean.createQuote(symbol, companyName, price);
    verify(mockTradeDirect).createQuote(symbol, companyName, price);
    assertSame(expectedQuote, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileSetsInSession_Dwkj0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = mockTradeDirect;
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    directSLSBBean.updateAccountProfile(profileData);
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfileReturnsCorrectData_YKGs1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    directSLSBBean.tradeDirect = mockTradeDirect;
    AccountProfileDataBean profileData = new AccountProfileDataBean();
    AccountProfileDataBean expectedProfileData = new AccountProfileDataBean();
    when(mockTradeDirect.updateAccountProfile(profileData)).thenReturn(expectedProfileData);
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertSame(expectedProfileData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithValidParameters_QyYE0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    Integer orderID = 123;
    boolean twoPhase = true;
    bean.queueOrder(orderID, twoPhase);
    verify(mockTradeDirect).setInSession(true);
    verify(mockTradeDirect).queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithNullOrderID_ONDB2() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    Integer orderID = null;
    boolean twoPhase = true;
    bean.queueOrder(orderID, twoPhase);
    verify(mockTradeDirect).setInSession(true);
    verify(mockTradeDirect).queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_SetsInSession_AbCy0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    String userID = "user123";
    AccountDataBean expectedAccountData = new AccountDataBean();
    when(mockTradeDirect.getAccountData(userID)).thenReturn(expectedAccountData);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, e.g., via a setter or directly
    AccountDataBean result = bean.getAccountData(userID);
    verify(mockTradeDirect).setInSession(true);
    assertEquals(expectedAccountData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_ReturnsCorrectData_hTuw1() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    String userID = "user123";
    AccountDataBean expectedAccountData = new AccountDataBean();
    when(mockTradeDirect.getAccountData(userID)).thenReturn(expectedAccountData);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, e.g., via a setter or directly
    AccountDataBean result = bean.getAccountData(userID);
    assertEquals(expectedAccountData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_WhenCalled_SetsInSessionTrue_rQNM0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    String userID = "user123";
    bean.getAccountProfileData(userID);
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_ReturnsCorrectAccountProfileData_buml1() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    String userID = "user123";
    AccountProfileDataBean expectedProfileData = new AccountProfileDataBean();
    when(mockTradeDirect.getAccountProfileData(userID)).thenReturn(expectedProfileData);
    AccountProfileDataBean result = bean.getAccountProfileData(userID);
    assertEquals(expectedProfileData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted_SetsInSession_Bpje0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    String userID = "user123";
    Integer orderID = 456;
    bean.orderCompleted(userID, orderID);
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOrderCompleted_CallsOrderCompleted_peQT1() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    String userID = "user123";
    Integer orderID = 456;
    bean.orderCompleted(userID, orderID);
    verify(mockTradeDirect).orderCompleted(userID, orderID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_dDnp0() {
    DirectSLSBBean bean = new DirectSLSBBean();
    int expected = TradeConfig.SESSION_TO_DIRECT;
    assertEquals(expected, bean.getImpl());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_SetsInSessionTrue_Jpgt0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    String userID = "user123";
    bean.logout(userID);
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_CallsLogoutWithUserID_fTxd1() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    String userID = "user123";
    bean.logout(userID);
    verify(mockTradeDirect).logout(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout_CompletesWithoutException_qloA2() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    String userID = "user123";
    bean.logout(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_Synchronous_XKhc0() throws Exception {
    TradeDirect tradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = tradeDirect;
    String userID = "user1";
    String symbol = "SYM";
    double quantity = 100;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean expectedOrder = new OrderDataBean();
    when(tradeDirect.buy(userID, symbol, quantity, orderProcessingMode)).thenReturn(expectedOrder);
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    verify(tradeDirect).setInSession(true);
    verify(tradeDirect).buy(userID, symbol, quantity, orderProcessingMode);
    assertSame(expectedOrder, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_WithDifferentUserAndSymbol_rpmv3() throws Exception {
    TradeDirect tradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = tradeDirect;
    String userID = "user4";
    String symbol = "SYM4";
    double quantity = 400;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean expectedOrder = new OrderDataBean();
    when(tradeDirect.buy(userID, symbol, quantity, orderProcessingMode)).thenReturn(expectedOrder);
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    verify(tradeDirect).setInSession(true);
    verify(tradeDirect).buy(userID, symbol, quantity, orderProcessingMode);
    assertSame(expectedOrder, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_VerifyOrderDataIntegrity_eOUE4() throws Exception {
    TradeDirect tradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = tradeDirect;
    String userID = "user5";
    String symbol = "SYM5";
    double quantity = 500;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean expectedOrder = new OrderDataBean();
    when(tradeDirect.buy(userID, symbol, quantity, orderProcessingMode)).thenReturn(expectedOrder);
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    verify(tradeDirect).setInSession(true);
    verify(tradeDirect).buy(userID, symbol, quantity, orderProcessingMode);
    assertSame(expectedOrder, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_SetsInSession_nwan0() throws Exception {
    TradeDirect tradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = tradeDirect;
    bean.sell("user1", 1, TradeConfig.SYNCH);
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_ReturnsOrderData_pknQ1() throws Exception {
    TradeDirect tradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = tradeDirect;
    OrderDataBean expectedOrderData = new OrderDataBean();
    when(tradeDirect.sell(anyString(), anyInt(), anyInt())).thenReturn(expectedOrderData);
    OrderDataBean result = bean.sell("user1", 1, TradeConfig.SYNCH);
    assertSame(expectedOrderData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_ReturnsCorrectOrderData_kIdp4() throws Exception {
    TradeDirect tradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = tradeDirect;
    OrderDataBean expectedOrderData = new OrderDataBean();
    when(tradeDirect.sell("user1", 1, TradeConfig.SYNCH)).thenReturn(expectedOrderData);
    OrderDataBean result = bean.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals(expectedOrderData, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingValidID_tNAZ0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    Integer holdingID = 1;
    HoldingDataBean expectedHolding = new HoldingDataBean();
    when(mockTradeDirect.getHolding(holdingID)).thenReturn(expectedHolding);
    HoldingDataBean result = bean.getHolding(holdingID);
    verify(mockTradeDirect).setInSession(true);
    verify(mockTradeDirect).getHolding(holdingID);
    assertEquals(expectedHolding, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithException_loMF1() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    Integer holdingID = 1;
    when(mockTradeDirect.getHolding(holdingID)).thenThrow(new RuntimeException("Database error"));
    try {
      bean.getHolding(holdingID);
      fail("Expected an Exception to be thrown");
    } catch (Exception e) {
      verify(mockTradeDirect).setInSession(true);
      verify(mockTradeDirect).getHolding(holdingID);
      assertEquals("Database error", e.getMessage());
    }
  }

  @Test
  public void testPingTwoPhaseThrowsException_fHPt0_GuGY0() {
    DirectSLSBBean bean = new DirectSLSBBean();
    assertThrows(UnsupportedOperationException.class, () -> bean.pingTwoPhase("AAPL"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrderReturnsCorrectValue_qEWu1_FNWg0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "SELL";
    double quantity = 50.0;
    OrderDataBean expectedOrder = new OrderDataBean();
    when(mockTradeDirect.createOrder(account, quote, holding, orderType, quantity)).thenReturn(expectedOrder);
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = mockTradeDirect; // Assuming tradeDirect is accessible, might need setter method
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(expectedOrder, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginReturnsCorrectAccountDataBean_uztf1_ovmC0() throws Exception {
    AccountDataBean expectedAccountDataBean = new AccountDataBean();
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    when(mockTradeDirect.login("user123", "password123")).thenReturn(expectedAccountDataBean);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect; // Assuming there's a way to set this, e.g., via a setter or directly
    AccountDataBean result = bean.login("user123", "password123");
    assertSame(expectedAccountDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteReturnsCorrectData_ALvd1_BvIb0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    String symbol = "GOOGL";
    QuoteDataBean expectedQuote = new QuoteDataBean();
    when(mockTradeDirect.getQuote(symbol)).thenReturn(expectedQuote);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mockTradeDirect;
    QuoteDataBean result = bean.getQuote(symbol);
    assertSame(expectedQuote, result);
  }
}