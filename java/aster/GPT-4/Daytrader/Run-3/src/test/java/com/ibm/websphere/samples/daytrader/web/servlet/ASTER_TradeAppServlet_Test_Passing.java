/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppServlet_Test_Passing {
  @InjectMocks
  private TradeAppServlet tradeAppServlet;
  @Mock
  private ServletConfig servletConfig;
  @Mock
  private Enumeration<String> enumeration;
  @Mock
  HttpServletRequest httpservletrequest;
  @Mock
  HttpServletResponse httpservletresponse;
  @Mock
  HttpSession httpsession;
  private HttpServletResponse httpServletResponse;
  private HttpServletRequest httpServletRequest;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws Exception {
    when(httpservletrequest.getSession()).thenReturn(httpsession);
    tradeAppServlet.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletrequest).getSession();
    verify(tradeAppServlet).performTask(httpservletrequest, httpservletresponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_EdsE0() throws ServletException, IOException {
    javax.servlet.http.HttpServletRequest request = mock(javax.servlet.http.HttpServletRequest.class);
    javax.servlet.http.HttpServletResponse response = mock(javax.servlet.http.HttpServletResponse.class);
    TradeAppServlet servlet = new TradeAppServlet();
    servlet.doGet(request, response);
    verify(request, atLeastOnce()).getParameter(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_YNyX0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    TradeAppServlet servlet = new TradeAppServlet();
    servlet.doPost(request, response);
    verify(request, atLeast(1)).getParameter(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_sxYQ0() {
    TradeAppServlet servlet = new TradeAppServlet();
    String expected = "TradeAppServlet provides the standard web interface to Trade";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithNullAction_ZFQY0_dhAp0() throws ServletException, IOException {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    when(req.getParameter("action")).thenReturn(null);
    when(servlet.getServletConfig()).thenReturn(config);
    when(config.getServletContext()).thenReturn(ctx);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(ctx).getRequestDispatcher("/welcome.jsp");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithLoginAction_NTGe1_ASkU0() throws ServletException, IOException {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("user1");
    when(req.getParameter("passwd")).thenReturn("pass1");
    when(req.getServletContext()).thenReturn(ctx);
    when(config.getServletContext()).thenReturn(ctx);
    when(servlet.getServletConfig()).thenReturn(config);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(ctx).getRequestDispatcher("/login.jsp");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithSellAction_SwfG5_DNLh0() throws ServletException, IOException {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("sell");
    when(req.getParameter("holdingID")).thenReturn("1001");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user5");
    when(servlet.getServletConfig()).thenReturn(config);
    when(config.getServletContext()).thenReturn(ctx);
    when(req.getServletContext()).thenReturn(ctx);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(ctx).getRequestDispatcher("/sell.jsp");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithUpdateProfileAction_PhhT10_lpEj0() throws ServletException, IOException {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("update_profile");
    when(req.getParameter("password")).thenReturn("newpass");
    when(req.getParameter("cpassword")).thenReturn("newpass");
    when(req.getParameter("fullname")).thenReturn("New Name");
    when(req.getParameter("address")).thenReturn("New Address");
    when(req.getParameter("creditcard")).thenReturn("9876543210987654");
    when(req.getParameter("email")).thenReturn("newemail@example.com");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user10");
    when(config.getServletContext()).thenReturn(ctx);
    when(req.getServletContext()).thenReturn(ctx);
    when(servlet.getServletConfig()).thenReturn(config);
    servlet.init(config);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(ctx).getRequestDispatcher("/updateProfile.jsp");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_FIJg0() throws Exception {
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpSession httpSession = mock(HttpSession.class);
    TradeAppServlet tradeAppServlet = new TradeAppServlet();
    when(httpServletRequest.getSession()).thenReturn(httpSession);
    tradeAppServlet.performTask(httpServletRequest, httpServletResponse);
    verify(httpServletRequest).getSession(); // Verify that getSession was called
    verify(httpServletRequest, times(1)).getSession(); // Ensure it was called exactly once
  }
}