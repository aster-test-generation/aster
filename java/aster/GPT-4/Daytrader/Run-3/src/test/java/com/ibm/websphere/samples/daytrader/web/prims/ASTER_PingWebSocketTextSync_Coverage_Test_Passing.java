/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.websocket.CloseReason;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;

public class Aster_PingWebSocketTextSync_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnClose_JbKl0() {
    PingWebSocketTextSync pingWebSocketTextSync = new PingWebSocketTextSync();
    Session mockSession = null; // Assuming session can be mocked or null based on the context
    CloseReason mockCloseReason = new CloseReason(CloseReason.CloseCodes.NORMAL_CLOSURE, "Normal closure");
    pingWebSocketTextSync.onClose(mockSession, mockCloseReason);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithNullException_iBNr0() {
    PingWebSocketTextSync pingWebSocketTextSync = new PingWebSocketTextSync();
    Throwable throwable = null;
    try {
      throwable = mock(Throwable.class);
      doNothing().when(throwable).printStackTrace();
    } catch (Exception e) {
    }
    pingWebSocketTextSync.onError(throwable);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithActualException_HLYp1() {
    PingWebSocketTextSync pingWebSocketTextSync = new PingWebSocketTextSync();
    Throwable throwable = new RuntimeException("Sample exception");
    pingWebSocketTextSync.onError(throwable);
  }
}