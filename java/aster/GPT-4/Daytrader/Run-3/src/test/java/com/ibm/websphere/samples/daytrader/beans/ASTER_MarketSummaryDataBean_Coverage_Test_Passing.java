/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Coverage_Test_Passing {
  private MarketSummaryDataBean marketSummaryDataBean;

  @BeforeEach
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_NZrq0() {
    BigDecimal tsia = new BigDecimal("150.00");
    BigDecimal openTsia = new BigDecimal("100.00");
    double volume = 1000.0;
    marketSummaryDataBean = new MarketSummaryDataBean(tsia, openTsia, volume,
                Arrays.asList(new QuoteDataBean()), Arrays.asList(new QuoteDataBean()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_xwNK1() {
    BigDecimal expectedGainPercent = FinancialUtils.computeGainPercent(marketSummaryDataBean.getTSIA(), marketSummaryDataBean.getOpenTSIA());
    BigDecimal actualGainPercent = marketSummaryDataBean.getGainPercent();
    assertEquals(expectedGainPercent, actualGainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullTopGainersAndLosers_ZeHP0_1() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 1000, null, null);
    String result = marketSummary.toString();
    assertFalse(result.contains("Current Top Gainers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullTopGainersAndLosers_ZeHP0_2() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 1000, null, null);
    String result = marketSummary.toString();
    assertFalse(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyTopGainersAndLosers_nGuo1_1() {
    Collection<QuoteDataBean> emptyGainers = new ArrayList<>();
    Collection<QuoteDataBean> emptyLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 1000, emptyGainers, emptyLosers);
    String result = marketSummary.toString();
    assertTrue(result.contains("Current Top Gainers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyTopGainersAndLosers_nGuo1_2() {
    Collection<QuoteDataBean> emptyGainers = new ArrayList<>();
    Collection<QuoteDataBean> emptyLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 1000, emptyGainers, emptyLosers);
    String result = marketSummary.toString();
    assertTrue(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyMarketSummary_tpux9_1() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toString();
    assertTrue(result.contains("TSIA:0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyMarketSummary_tpux9_2() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toString();
    assertTrue(result.contains("openTSIA:0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyMarketSummary_tpux9_3() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toString();
    assertTrue(result.contains("gain:0.0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyMarketSummary_tpux9_4() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toString();
    assertTrue(result.contains("volume:0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainersAndLosers_OrGA0_1() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, null);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Market Summary at:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainersAndLosers_OrGA0_2() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, null);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("TSIA:1000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainersAndLosers_OrGA0_3() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, null);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("openTSIA:950"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainersAndLosers_OrGA0_4() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, null);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("volume:5000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainersAndLosers_OrGA0_5() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, null);
    String result = marketSummary.toHTML();
    assertTrue(!result.contains("Current Top Gainers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainersAndLosers_OrGA0_6() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, null);
    String result = marketSummary.toHTML();
    assertTrue(!result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyTopGainersAndLosers_kNCY3_1() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, topGainers, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Market Summary at:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyTopGainersAndLosers_kNCY3_2() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, topGainers, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("TSIA:1000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyTopGainersAndLosers_kNCY3_3() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, topGainers, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("openTSIA:950"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyTopGainersAndLosers_kNCY3_4() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, topGainers, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("volume:5000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyTopGainersAndLosers_kNCY3_5() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, topGainers, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Current Top Gainers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyTopGainersAndLosers_kNCY3_6() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, topGainers, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyMarketSummary_Wxtl6_1() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Market Summary at:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyMarketSummary_Wxtl6_2() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertTrue(result.contains("TSIA:0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyMarketSummary_Wxtl6_3() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertTrue(result.contains("openTSIA:0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyMarketSummary_Wxtl6_4() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertTrue(result.contains("volume:0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyMarketSummary_Wxtl6_5() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Current Top Gainers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyMarketSummary_Wxtl6_6() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithMultipleTopLosers_JaFN5_RsZw0_1() {
    Collection<QuoteDataBean> losers = new ArrayList<>();
    losers.add(new QuoteDataBean()); // Assuming a default constructor exists
    losers.add(new QuoteDataBean()); // Assuming a default constructor exists
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 1000, new ArrayList<>(), losers);
    String result = marketSummary.toString();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyTopGainersAndLosers_nGuo1() {
    Collection<QuoteDataBean> emptyGainers = new ArrayList<>();
    Collection<QuoteDataBean> emptyLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 1000, emptyGainers, emptyLosers);
    String result = marketSummary.toString();
    assertTrue(result.contains("Current Top Gainers:"));
    assertTrue(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyMarketSummary_tpux9() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toString();
    assertTrue(result.contains("TSIA:0"));
    assertTrue(result.contains("openTSIA:0"));
    assertTrue(result.contains("gain:0.0"));
    assertTrue(result.contains("volume:0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainersAndLosers_OrGA0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, null);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Market Summary at:"));
    assertTrue(result.contains("TSIA:1000"));
    assertTrue(result.contains("openTSIA:950"));
    assertTrue(result.contains("volume:5000"));
    assertTrue(!result.contains("Current Top Gainers:"));
    assertTrue(!result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyTopGainersAndLosers_kNCY3() {
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, topGainers, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Market Summary at:"));
    assertTrue(result.contains("TSIA:1000"));
    assertTrue(result.contains("openTSIA:950"));
    assertTrue(result.contains("volume:5000"));
    assertTrue(result.contains("Current Top Gainers:"));
    assertTrue(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_EmptyMarketSummary_Wxtl6() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("0"), new BigDecimal("0"), 0, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Market Summary at:"));
    assertTrue(result.contains("TSIA:0"));
    assertTrue(result.contains("openTSIA:0"));
    assertTrue(result.contains("volume:0"));
    assertTrue(result.contains("Current Top Gainers:"));
    assertTrue(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainers_PyZv1_CIkK0_1() {
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean()); // Assuming a default constructor exists
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Market Summary at:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainers_PyZv1_CIkK0_2() {
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean()); // Assuming a default constructor exists
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("TSIA:1000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainers_PyZv1_CIkK0_3() {
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean()); // Assuming a default constructor exists
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("openTSIA:950"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainers_PyZv1_CIkK0_4() {
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean()); // Assuming a default constructor exists
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("volume:5000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainers_PyZv1_CIkK0_5() {
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean()); // Assuming a default constructor exists
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(!result.contains("Current Top Gainers:"));
  }
}