/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.websocket.CloseReason;
import javax.websocket.EndpointConfig;
import javax.websocket.Session;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

public class Aster_PingWebSocketTextAsync_Coverage_Test_Passing {
  private Session mockSession;
  private PingWebSocketTextAsync pingWebSocketTextAsync;
  private Session currentSession;
  private EndpointConfig mockEndpointConfig;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnClose_utGU0() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Session mockSession = mock(Session.class);
    CloseReason mockCloseReason = mock(CloseReason.class);
    pingWebSocketTextAsync.onClose(mockSession, mockCloseReason);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnError_withRuntimeException_sosK0() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable throwable = new RuntimeException("Test Runtime Exception");
    pingWebSocketTextAsync.onError(throwable);
    assertTrue(true); // Placeholder assertion to indicate the method executed.
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnError_withNullPointerException_rNoK1() {
    PingWebSocketTextAsync pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Throwable throwable = new NullPointerException("Test Null Pointer Exception");
    pingWebSocketTextAsync.onError(throwable);
    assertTrue(true); // Placeholder assertion to indicate the method executed.
  }

  @BeforeEach
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_vhQG0() {
    pingWebSocketTextAsync = new PingWebSocketTextAsync();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS)
  public void testOnClose_utGU0_cvDn1() {
    Session mockSession = mock(Session.class);
    CloseReason mockCloseReason = mock(CloseReason.class);
    pingWebSocketTextAsync.onClose(mockSession, mockCloseReason);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_Bvdv0_gBhL0() {
    pingWebSocketTextAsync = new PingWebSocketTextAsync();
    Session currentSession = mock(Session.class);
    pingWebSocketTextAsync.onOpen(currentSession, null); // Call the method under test to set currentSession
    int hitCount = 0; // Initialize hitCount
  }

  @BeforeEach
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_fVwZ0() {
    pingWebSocketTextAsync = new PingWebSocketTextAsync();
    mockSession = mock(Session.class);
    mockEndpointConfig = mock(EndpointConfig.class);
  }
}