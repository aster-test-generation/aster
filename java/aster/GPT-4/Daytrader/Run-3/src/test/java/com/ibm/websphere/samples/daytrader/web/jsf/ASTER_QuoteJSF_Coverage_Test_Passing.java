/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_QuoteJSF_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithInvalidOrderProcessingMode_Rwxr8_razA0() {
    QuoteJSF quoteJSF = new QuoteJSF(mock(Instance.class));
    HttpSession session = mock(HttpSession.class);
    TradeServices tradeAction = mock(TradeServices.class);
    QuoteData quoteData = mock(QuoteData.class);
    when(session.getAttribute("uidBean")).thenReturn("user123");
    when(quoteData.getSymbol()).thenReturn("AAPL");
    try {
      when(tradeAction.buy(anyString(), anyString(), anyDouble(), eq(-1))).thenThrow(new Exception());
    } catch (Exception e) {
      e.printStackTrace();
    }
    String result = quoteJSF.buy();
    assertEquals("buy", result);
  }
}