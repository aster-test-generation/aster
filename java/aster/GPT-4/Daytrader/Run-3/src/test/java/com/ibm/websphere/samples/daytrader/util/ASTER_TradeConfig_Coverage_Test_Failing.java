/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeConfig_Coverage_Test_Failing {
  static {
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_rndIntIsZero_GQus0() {
    TradeConfig mock = mock(TradeConfig.class);
    when(mock.rndInt(100)).thenReturn(0);
    assertEquals('a', TradeConfig.getScenarioAction(true));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_rndIntIsNinetyNine_vFER1() {
    TradeConfig mock = mock(TradeConfig.class);
    when(mock.rndInt(100)).thenReturn(99);
    assertEquals('d', TradeConfig.getScenarioAction(true));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_iInitialValue_UbDH2() {
    TradeConfig mock = mock(TradeConfig.class);
    when(mock.rndInt(100)).thenReturn(10);
    assertEquals('a', TradeConfig.getScenarioAction(true));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_whileLoopOnce_FdwI3() {
    TradeConfig mock = mock(TradeConfig.class);
    when(mock.rndInt(100)).thenReturn(15);
    assertEquals('b', TradeConfig.getScenarioAction(true));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_whileLoopMultiple_OUTD4() {
    TradeConfig mock = mock(TradeConfig.class);
    when(mock.rndInt(100)).thenReturn(70);
    assertEquals('d', TradeConfig.getScenarioAction(true));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_incrementScenarioCountCalled_QuPg5() {
    TradeConfig mock = mock(TradeConfig.class);
    when(mock.rndInt(100)).thenReturn(10);
    TradeConfig.getScenarioAction(true);
    verify(mock, times(1)).incrementScenarioCount();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_notNewUserActionB_OXJn7() {
    TradeConfig mock = mock(TradeConfig.class);
    when(mock.rndInt(100)).thenReturn(15);
    assertEquals('b', TradeConfig.getScenarioAction(false));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_WithHostNameException_WSKq1_ZkHR0() {
    System.setProperty("java.net.preferIPv4Stack", "true");
    System.setProperty("java.net.preferIPv6Addresses", "false");
    try {
      java.net.InetAddress.getLocalHost(); // This should normally work
      fail("Expected an UnknownHostException to be thrown");
    } catch (java.net.UnknownHostException e) {
    }
    String result = TradeConfig.rndNewUserID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_sellDeficitNonZero_EzUZ8_IpqQ0() {
    TradeConfig mock = mock(TradeConfig.class);
    when(mock.rndInt(100)).thenReturn(15);
    assertEquals('s', TradeConfig.getScenarioAction(false));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_PositivePercentGain_WnnH0_GduX0() {
    TradeConfig mockConfig = new TradeConfig() {
      double getRandom() {
        return 0.6;
      }
    };
    BigDecimal result = mockConfig.getRandomPriceChangeFactor();
    assertTrue(result.compareTo(BigDecimal.ONE) > 0, "Percent gain should be positive and greater than 1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_WithHostNameException_WSKq1_ZkHR0_fid2() {
    System.setProperty("java.net.preferIPv4Stack", "true");
    System.setProperty("java.net.preferIPv6Addresses", "false");
    try {
      java.net.InetAddress.getLocalHost(); // This should normally work
      fail("Expected an UnknownHostException to be thrown");
    } catch (java.net.UnknownHostException e) {
      // Test passes as UnknownHostException is expected
    }
    String result = TradeConfig.rndNewUserID();
    assertNotNull(result); // Ensure that the result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_sellDeficitNonZero_EzUZ8_IpqQ0_fid2() {
    TradeConfig mock = mock(TradeConfig.class);
    when(mock.getScenarioAction(false)).thenReturn('s');
    assertEquals('s', mock.getScenarioAction(false));
  }
}