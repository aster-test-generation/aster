/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Passing {
  private OrderData[] closedOrders;
  @Mock
  private ExternalContext context;
  @Mock
  private TradeServices tradeAction;
  @Mock
  private HttpSession httpSession;
  @InjectMocks
  private AccountDataJSF accountDataJSF;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTML_fWNP0_1() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed if not using the services in the test
    String result = accountData.getGainHTML();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTML_fWNP0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed if not using the services in the test
    String result = accountData.getGainHTML();
    assertNotNull(result);
    assertTrue(result.contains("gain")); // Assuming the output should contain the word "gain"
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainPercent_VZJX0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal gainPercent = new BigDecimal("10.1234");
    accountData.setGainPercent(gainPercent);
    assertEquals(new BigDecimal("10.12"), accountData.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGain_EJPZ0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal expectedGain = new BigDecimal("100.00");
    accountData.setGain(expectedGain);
    assertEquals(expectedGain, accountData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastLogin_SeUV0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    Date expectedDate = new Date();
    accountData.setLastLogin(expectedDate);
    assertEquals(expectedDate, accountData.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumOfCashHoldings_QuMj0() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    BigDecimal expected = new BigDecimal("1000");
    accountDataJSF.setSumOfCashHoldings(expected);
    assertEquals(expected, accountDataJSF.getSumOfCashHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberHoldings_jJKZ0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    Integer expected = 0; // Assuming default or initial value is 0
    Integer actual = accountData.getNumberHoldings();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberOfOrders_CjVX0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null is acceptable for Instance<TradeServices>
    Integer expected = 0; // Assuming default or initial value
    Integer actual = accountData.getNumberOfOrders();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_AsiY0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    BigDecimal expectedGain = BigDecimal.ZERO; // Assuming default or initial gain is ZERO
    assertEquals(expectedGain, accountData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_kFsZ0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null is acceptable for Instance<TradeServices>
    int expected = 0; // Assuming default or initial value of logoutCount is 0
    assertEquals(expected, accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberOfOrderRows_oEGo0() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    Integer expectedRows = 0; // Assuming default or initialized value of numberOfOrderRows is 0
    Integer actualRows = accountDataJSF.getNumberOfOrderRows();
    assertEquals(expectedRows, actualRows);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCurrentTime_EujM0() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null); // Assuming null can be passed if Instance<TradeServices> is not used in the method
    Date expected = new Date();
    Date actual = accountDataJSF.getCurrentTime();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountID_RtpO0() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null); // Assuming null is acceptable for Instance<TradeServices>
    Integer expectedAccountID = 123;
    accountDataJSF.setAccountID(expectedAccountID);
    assertEquals(expectedAccountID, accountDataJSF.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_Nslf0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null is acceptable for Instance<TradeServices>
    int expected = 0; // Assuming default loginCount is 0
    assertEquals(expected, accountData.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_AqZp0() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null); // Assuming null can be passed if not specified otherwise
    OrderData[] result = accountDataJSF.getClosedOrders();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID_iTcu0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    Integer expected = null;
    assertEquals(expected, accountData.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_AfDi0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    BigDecimal expected = BigDecimal.ZERO; // Assuming default or a set value for the sake of the test
    assertEquals(expected, accountData.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentHTML_DmDo0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming a null instance can be passed for simplicity
    String expectedHTML = "<some_expected_html_output>"; // Replace with the expected HTML output
    String actualHTML = accountData.getGainPercentHTML();
    assertEquals(expectedHTML, actualHTML);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_KipR0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    String expectedProfileID = "expectedProfileID"; // Expected profile ID should be set accordingly
    assertEquals(expectedProfileID, accountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileID_sVea0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    String expectedProfileID = "12345";
    accountData.setProfileID(expectedProfileID);
    assertEquals(expectedProfileID, accountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToggleShowAllRowsSetsNumberOfOrderRowsToZero_ntAK0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    accountData.toggleShowAllRows();
    assertEquals(0, accountData.getNumberOfOrderRows());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingsTotal_VLLe0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal expected = new BigDecimal("1000");
    accountData.setHoldingsTotal(expected);
    assertEquals(expected, accountData.getHoldingsTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumOfCashHoldings_Cwpi0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming default sumOfCashHoldings is zero
    BigDecimal actual = accountData.getSumOfCashHoldings();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNumberHoldings_yHOf0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null is acceptable for Instance<TradeServices>
    Integer expectedNumberHoldings = 5;
    accountData.setNumberHoldings(expectedNumberHoldings);
    assertEquals(expectedNumberHoldings, accountData.getNumberHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_WZHm0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null is acceptable for the constructor
    BigDecimal expectedBalance = BigDecimal.ZERO; // Assuming initial balance is zero
    assertEquals(expectedBalance, accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_MnQH0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming constructor can handle null as per provided signature
    Date expected = null; // Assuming lastLogin is initially null
    assertEquals(expected, accountData.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsTotal_ZsQH0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed if not specified otherwise
    BigDecimal expected = BigDecimal.ZERO; // Assuming default or initial value
    assertEquals(expected, accountData.getHoldingsTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrders_mbex0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    OrderData[] result = accountData.getAllOrders();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSessionCreationDate_kezE0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    Date expectedDate = new Date();
    accountData.setSessionCreationDate(expectedDate);
    assertEquals(expectedDate, accountData.getSessionCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_BCkA0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    BigDecimal expected = BigDecimal.ZERO; // Assuming the initial balance is ZERO
    BigDecimal actual = accountData.getOpenBalance();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_GEMh0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    BigDecimal newBalance = new BigDecimal("100.00");
    accountData.setBalance(newBalance);
    assertEquals(newBalance, accountData.getBalance());
  }
}