/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeServletAction_Test_Failing {
  @Mock
  private ServletContext servletContext;
  @Mock
  private HttpServletRequest httpservletrequest;
  @Mock
  private HttpServletRequest httpServletRequest;
  @Mock
  private ServletContext servletcontext;
  @Mock
  private HttpServletResponse httpServletResponse;
  @Mock
  private HttpServletRequest req;
  @Mock
  private TradeServices tAction;
  @Mock
  private HttpServletResponse resp;
  @Mock
  private HttpServletResponse httpservletresponse;
  @Mock
  private TradeServletAction tradeservletaction;
  @Mock
  private HttpSession httpsession;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoSellWithValidParameters_pKNA0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "validUser";
    Integer holdingID = 123;
    tradeServletAction.doSell(ctx, req, resp, userID, holdingID);
    verify(req).setAttribute(eq("orderData"), any(OrderDataBean.class));
    verify(req).setAttribute(eq("results"), eq(""));
    verify(req, times(2)).setAttribute(anyString(), any());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegister_PasswordsMatchAndSuccessfulRegistration_iKUj0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String passwd = "pass123";
    String cpasswd = "pass123";
    String fullname = "John Doe";
    String ccn = "1234567890123456";
    String openBalanceString = "1000";
    String email = "johndoe@example.com";
    String address = "123 Elm St";
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(req).setAttribute(eq("results"), contains("Registration operation succeeded"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoRegister_PasswordsDoNotMatch_GArf1() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user2";
    String passwd = "pass123";
    String cpasswd = "pass321";
    String fullname = "Jane Doe";
    String ccn = "6543210987654321";
    String openBalanceString = "2000";
    String email = "janedoe@example.com";
    String address = "456 Maple St";
    tradeServletAction.doRegister(ctx, req, resp, userID, passwd, cpasswd, fullname, ccn, openBalanceString, email, address);
    verify(req).setAttribute(eq("results"), contains("your passwords did not match"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLoginSuccess_toqK0() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getSession(true)).thenReturn(session);
    try {
      tradeServletAction.doLogin(ctx, req, resp, "validUser", "validPass");
    } catch (Exception e) {
      e.printStackTrace();
    }
    verify(session).setAttribute("uidBean", "validUser");
    verify(session).setAttribute("sessionCreationDate", any());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLoginUserNotFound_TCBz1() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    try {
      tradeServletAction.doLogin(ctx, req, resp, "invalidUser", "invalidPass");
    } catch (Exception e) {
      e.printStackTrace();
    }
    verify(req).setAttribute(eq("results"), contains("Could not find account for invalidUser"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLoginThrowsIllegalArgumentException_DVdE2() {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    try {
      tradeServletAction.doLogin(ctx, req, resp, "", "");
    } catch (Exception e) {
      assertTrue(e instanceof ServletException);
      assertTrue(e.getCause() instanceof IllegalArgumentException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotesSingleSymbol_RFBF0_1() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String symbols = "AAPL";
    tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
    ArgumentCaptor<Collection> argumentCaptor = ArgumentCaptor.forClass(Collection.class);
    verify(req).setAttribute(eq("quoteDataBeans"), argumentCaptor.capture());
    Collection<QuoteDataBean> capturedQuotes = argumentCaptor.getValue();
    assertTrue(capturedQuotes.size() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotesSingleSymbol_RFBF0_2() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String symbols = "AAPL";
    tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
    ArgumentCaptor<Collection> argumentCaptor = ArgumentCaptor.forClass(Collection.class);
    verify(req).setAttribute(eq("quoteDataBeans"), argumentCaptor.capture());
    Collection<QuoteDataBean> capturedQuotes = argumentCaptor.getValue();
    assertTrue(capturedQuotes.stream().anyMatch(quote -> "AAPL".equals(quote.getSymbol())));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout() throws Exception {
    when(httpservletrequest.getSession()).thenReturn(httpsession);
    when(httpservletrequest.getSession(true)).thenReturn(httpsession);
    String userID = "user123";
    doNothing().when(tAction).logout(userID);
    doNothing().when(httpservletrequest).logout();
    when(httpservletrequest.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.TRUE);
    tradeservletaction.doLogout(servletContext, httpservletrequest, httpservletresponse, userID);
    verify(tAction, times(1)).logout(userID);
    verify(httpsession, times(1)).invalidate();
    verify(httpservletrequest, times(1)).logout();
    verify(httpservletrequest, times(1)).getSession(true);
    verify(httpservletrequest, times(1)).setAttribute(anyString(), any());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogoutWithException_1() throws Exception {
    when(httpservletrequest.getSession()).thenReturn(httpsession);
    when(httpservletrequest.getSession(true)).thenReturn(httpsession);
    String userID = "user123";
    doThrow(new IllegalArgumentException("Invalid user")).when(tAction).logout(userID);
    verify(httpservletrequest).setAttribute("results", "illegal argument:Invalid user");
    Exception exception = assertThrows(ServletException.class, () -> {
      tradeservletaction.doLogout(servletContext, httpservletrequest, httpservletresponse, userID);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_NormalFlow_qXOY0() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getSession()).thenReturn(session);
    tradeServletAction.doLogout(ctx, req, resp, "user123");
    verify(session).invalidate();
    verify(req).logout();
    verify(req, never()).setAttribute(anyString(), any());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_IllegalArgumentException_hmRu1() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getSession()).thenReturn(session);
    doThrow(new IllegalArgumentException("Invalid user")).when(req).logout();
    try {
      tradeServletAction.doLogout(ctx, req, resp, "invalidUser");
    } catch (Exception e) {
    }
    verify(req).setAttribute("results", "illegal argument:Invalid user");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotesSingleSymbol_RFBF0_1_fid3() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String symbols = "AAPL";
    tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
    ArgumentCaptor<Collection> argumentCaptor = ArgumentCaptor.forClass(Collection.class);
    verify(req).setAttribute(eq("quoteDataBeans"), argumentCaptor.capture());
    Collection<QuoteDataBean> capturedQuotes = argumentCaptor.getValue();
    assertEquals(1, capturedQuotes.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoQuotesSingleSymbol_RFBF0_2_fid3() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "user1";
    String symbols = "AAPL";
    tradeServletAction.doQuotes(ctx, req, resp, userID, symbols);
    ArgumentCaptor<Collection> argumentCaptor = ArgumentCaptor.forClass(Collection.class);
    verify(req).setAttribute(eq("quoteDataBeans"), argumentCaptor.capture());
    Collection<QuoteDataBean> capturedQuotes = argumentCaptor.getValue();
    assertEquals("AAPL", capturedQuotes.iterator().next().getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoLogout_RecreateSession_bvVs3() throws Exception {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getSession()).thenReturn(session);
    when(req.getAttribute("TSS-RecreateSessionInLogout")).thenReturn(Boolean.TRUE);
    tradeServletAction.doLogout(ctx, req, resp, "user123");
    verify(req).getSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoMarketSummary_goHw0() throws ServletException, IOException {
    TradeServletAction tradeServletAction = new TradeServletAction();
    ServletContext ctx = mock(ServletContext.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String userID = "testUser";
    tradeServletAction.doMarketSummary(ctx, req, resp, userID);
    verify(req).setAttribute("results", "test");
    verify(ctx).getRequestDispatcher(TradeConfig.getPage(TradeConfig.MARKET_SUMMARY_PAGE)).forward(req, resp);
  }
}