/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_FALO0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    int expectedLoginCount = 5;
    accountDataBean.setLoginCount(expectedLoginCount);
    assertEquals(expectedLoginCount, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_nyMK0_1() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_nyMK0_2() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_nyMK0_3() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertTrue(result.getLoginCount() >= 0 && result.getLoginCount() <= 10000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_nyMK0_4() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertTrue(result.getLogoutCount() >= 0 && result.getLogoutCount() <= 10000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_nyMK0_5() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_nyMK0_6() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_nyMK0_7() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertTrue(result.getBalance().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_nyMK0_8() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertTrue(result.getOpenBalance().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_nyMK0_9() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_puKh0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    int expectedLogoutCount = 5;
    accountDataBean.setLogoutCount(expectedLogoutCount);
    assertEquals(expectedLogoutCount, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastLogin_cmBB0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Date expectedLastLogin = new Date();
    accountDataBean.setLastLogin(expectedLastLogin);
    assertEquals(expectedLastLogin, accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNonNullAccountId_yaKz0() {
    Integer accountID = 123;
    AccountDataBean accountDataBean = new AccountDataBean(accountID, 5, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("150.00"), "profile1");
    int expectedHash = accountID.hashCode();
    assertEquals(expectedHash, accountDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintMethod_zVWW0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.print();
    assertTrue(true); // This assertion is just to comply with the requirement of having an assert statement.
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldings_IpCd0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Collection<HoldingDataBean> holdings = new ArrayList<>();
    holdings.add(new HoldingDataBean());
    accountDataBean.setHoldings(holdings);
    assertEquals(holdings, accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_XrPT0() {
    Date expectedCreationDate = new Date();
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, expectedCreationDate, expectedCreationDate, BigDecimal.ZERO, BigDecimal.ZERO, "profile1");
    Date actualCreationDate = accountDataBean.getCreationDate();
    assertEquals(expectedCreationDate, actualCreationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_yAdv0() {
    AccountDataBean accountDataBean = new AccountDataBean(5, 10, new Date(), new Date(), new BigDecimal("1000.00"), new BigDecimal("500.00"), "userProfile");
    int expected = 10;
    int actual = accountDataBean.getLogoutCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_eRvh0() {
    Integer accountID = 1;
    int loginCount = 5;
    int logoutCount = 3;
    Date lastLogin = new Date();
    Date creationDate = new Date();
    BigDecimal balance = new BigDecimal("1000.00");
    BigDecimal openBalance = new BigDecimal("500.00");
    String profileID = "user123";
    AccountDataBean accountDataBean = new AccountDataBean(accountID, loginCount, logoutCount, lastLogin, creationDate, balance, openBalance, profileID);
    String expectedHTML = "<BR>Account Data for account: <B>" + accountID + "</B>" +
                "<LI>   loginCount:" + loginCount + "</LI>" +
                "<LI>  logoutCount:" + logoutCount + "</LI>" +
                "<LI>    lastLogin:" + lastLogin + "</LI>" +
                "<LI> creationDate:" + creationDate + "</LI>" +
                "<LI>      balance:" + balance + "</LI>" +
                "<LI>  openBalance:" + openBalance + "</LI>" +
                "<LI>    profileID:" + profileID + "</LI>";
    String actualHTML = accountDataBean.toHTML();
    assertEquals(expectedHTML, actualHTML);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsReturnsNotNull_Wtxf0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    assertNull(accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountID_tiOb0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Integer expectedAccountID = 123;
    accountDataBean.setAccountID(expectedAccountID);
    assertEquals(expectedAccountID, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_fItJ0() {
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("1000.00"), new BigDecimal("500.00"), "userProfile");
    int expected = 5;
    int actual = accountDataBean.getLoginCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID_WithNonNullID_ReturnsCorrectID_wjsh0() {
    Integer expectedID = 123;
    AccountDataBean accountDataBean = new AccountDataBean(expectedID, 5, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "userProfile1");
    Integer actualID = accountDataBean.getAccountID();
    assertEquals(expectedID, actualID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_slGx0() {
    AccountDataBean account1 = new AccountDataBean(1, 10, 5, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    assertTrue(account1.equals(account1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_jFRB1() {
    AccountDataBean account1 = new AccountDataBean(1, 10, 5, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    Object other = new Object();
    assertFalse(account1.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_JLtl2() {
    AccountDataBean account1 = new AccountDataBean(1, 10, 5, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    assertFalse(account1.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentAccountID_QDWH3() {
    AccountDataBean account1 = new AccountDataBean(1, 10, 5, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    AccountDataBean account2 = new AccountDataBean(2, 10, 5, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    assertFalse(account1.equals(account2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameAccountID_CZAw4() {
    AccountDataBean account1 = new AccountDataBean(1, 10, 5, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    AccountDataBean account2 = new AccountDataBean(1, 10, 5, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "profile1");
    assertTrue(account1.equals(account2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogoutIncreasesLogoutCountByOne_Zsyn0() {
    Date lastLogin = new Date();
    Date creationDate = new Date();
    BigDecimal balance = new BigDecimal("1000.00");
    BigDecimal openBalance = new BigDecimal("1000.00");
    String profileID = "user123";
    int initialLoginCount = 5;
    int initialLogoutCount = 3;
    AccountDataBean accountDataBean = new AccountDataBean(initialLoginCount, initialLogoutCount, lastLogin, creationDate, balance, openBalance, profileID);
    accountDataBean.logout();
    assertEquals(initialLogoutCount + 1, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_Yfba0() {
    Date testDate = new Date();
    BigDecimal testBalance = new BigDecimal("100.00");
    BigDecimal testOpenBalance = new BigDecimal("150.00");
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, testDate, testDate, testBalance, testOpenBalance, "userProfile");
    String expectedString = "\n\tAccount Data for account: null" +
                "\n\t\t   loginCount:5" +
                "\n\t\t  logoutCount:3" +
                "\n\t\t    lastLogin:" + testDate +
                "\n\t\t creationDate:" + testDate +
                "\n\t\t      balance:100.00" +
                "\n\t\t  openBalance:150.00" +
                "\n\t\t    profileID:userProfile";
    assertEquals(expectedString, accountDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenBalance_CMFx0() {
    BigDecimal initialOpenBalance = new BigDecimal("1000.00");
    BigDecimal newOpenBalance = new BigDecimal("1500.00");
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("2000.00"), initialOpenBalance, "user123");
    accountDataBean.setOpenBalance(newOpenBalance);
    assertEquals(newOpenBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_WqUh0() {
    String expectedProfileID = "user123";
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("1000.00"), new BigDecimal("500.00"), expectedProfileID);
    String actualProfileID = accountDataBean.getProfileID();
    assertEquals(expectedProfileID, actualProfileID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDate_TFbT0() {
    Date initialDate = new Date();
    Date newDate = new Date(initialDate.getTime() + 100000); // slightly later date
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, initialDate, initialDate, new BigDecimal("100.00"), new BigDecimal("50.00"), "user123");
    accountDataBean.setCreationDate(newDate);
    assertEquals(newDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileID_EbjC0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    String expectedProfileID = "testProfile";
    accountDataBean.setProfileID(expectedProfileID);
    assertEquals(expectedProfileID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfile_TDHU0() {
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    account.setProfile(profile);
    assertEquals(profile, account.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrders_uwsN0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Collection<OrderDataBean> orders = new ArrayList<>();
    orders.add(new OrderDataBean());
    accountDataBean.setOrders(orders);
    assertEquals(orders, accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersReturnsNotNull_BeMv0() {
    AccountDataBean accountDataBean = new AccountDataBean();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_QBvK0() {
    Date expectedLastLogin = new Date();
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, expectedLastLogin, new Date(), BigDecimal.ZERO, BigDecimal.ZERO, "profile1");
    Date actualLastLogin = accountDataBean.getLastLogin();
    assertEquals(expectedLastLogin, actualLastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_mHiK0() {
    BigDecimal expectedBalance = new BigDecimal("1000.00");
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), expectedBalance, new BigDecimal("500.00"), "userProfile");
    BigDecimal result = accountDataBean.getBalance();
    assertEquals(expectedBalance, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_DEUx0() {
    BigDecimal expectedBalance = new BigDecimal("1000.00");
    AccountDataBean accountData = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("1500.00"), expectedBalance, "userProfile1");
    BigDecimal result = accountData.getOpenBalance();
    assertEquals(expectedBalance, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_isvs0() {
    BigDecimal newBalance = new BigDecimal("100.00");
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setBalance(newBalance);
    assertEquals(newBalance, accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_zeMp0_lxbS0() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), new BigDecimal("1000"), new BigDecimal("1000"), "profile1");
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID("user1");
    profile.setPassword("password123");
    accountDataBean.setProfile(profile);
    accountDataBean.login("password123");
    assertEquals(1, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginUpdatesLastLoginTime_SrmR3_UvPZ0() {
    AccountDataBean accountDataBean = new AccountDataBean(0, 0, new Date(), new Date(), new BigDecimal("1000"), new BigDecimal("1000"), "profile4");
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID("user4");
    profile.setPassword("password123");
    accountDataBean.setProfile(profile);
    Date beforeLogin = new Date();
    accountDataBean.login("password123");
    assertTrue(accountDataBean.getLastLogin().getTime() >= beforeLogin.getTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullAccountId_lKeO1_YKkF0() {
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("150.00"), "profile1");
    int expectedHash = 0;
    assertEquals(expectedHash, accountDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_nyMK0() {
    AccountDataBean result = AccountDataBean.getRandomInstance();
    assertNotNull(result);
    assertNotNull(result.getAccountID());
    assertTrue(result.getLoginCount() >= 0 && result.getLoginCount() <= 10000);
    assertTrue(result.getLogoutCount() >= 0 && result.getLogoutCount() <= 10000);
    assertNotNull(result.getLastLogin());
    assertNotNull(result.getCreationDate());
    assertTrue(result.getBalance().compareTo(BigDecimal.ZERO) >= 0);
    assertTrue(result.getOpenBalance().compareTo(BigDecimal.ZERO) >= 0);
    assertNotNull(result.getProfileID());
  }
}