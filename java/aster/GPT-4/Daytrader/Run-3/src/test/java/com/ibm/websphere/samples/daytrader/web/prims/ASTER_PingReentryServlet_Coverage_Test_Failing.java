/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingReentryServlet_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitCallsSuperInit_yxqa0() throws ServletException {
    ServletConfig mockConfig = org.mockito.Mockito.mock(ServletConfig.class);
    PingReentryServlet servlet = new PingReentryServlet();
    servlet.init(mockConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_Xzvt0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingReentryServlet servlet = new PingReentryServlet();
    PingReentryServlet spyServlet = spy(servlet);
    spyServlet.doPost(request, response);
    verify(spyServlet).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCompletesWithoutException_xbNl1() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingReentryServlet servlet = new PingReentryServlet();
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_ubkB0() {
    PingReentryServlet servlet = new PingReentryServlet();
    String expected = "Basic dynamic HTML generation through a servlet";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetContentTypeSet_svfE0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingReentryServlet servlet = new PingReentryServlet();
    when(req.getParameter("numReentries")).thenReturn(null);
    when(req.getParameter("sleep")).thenReturn(null);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetNumReentriesNotNull_OHxS2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingReentryServlet servlet = new PingReentryServlet();
    when(req.getParameter("numReentries")).thenReturn("5");
    when(req.getParameter("sleep")).thenReturn(null);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    servlet.doGet(req, res);
    verify(req).getParameter("numReentries");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetNumReentriesNull_qyMU3() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingReentryServlet servlet = new PingReentryServlet();
    when(req.getParameter("numReentries")).thenReturn(null);
    when(req.getParameter("sleep")).thenReturn(null);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    servlet.doGet(req, res);
    verify(req, atLeastOnce()).getParameter("numReentries");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetSleepNotNull_hPrV4() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingReentryServlet servlet = new PingReentryServlet();
    when(req.getParameter("numReentries")).thenReturn(null);
    when(req.getParameter("sleep")).thenReturn("100");
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    servlet.doGet(req, res);
    verify(req).getParameter("sleep");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetNumReentriesLessThanOrEqualToZero_NRqS6() throws ServletException, IOException, InterruptedException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingReentryServlet servlet = new PingReentryServlet();
    when(req.getParameter("numReentries")).thenReturn("0");
    when(req.getParameter("sleep")).thenReturn("100");
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    servlet.doGet(req, res);
    verify(out).println("0");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetNumReentriesGreaterThanZero_adha7() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingReentryServlet servlet = new PingReentryServlet();
    when(req.getParameter("numReentries")).thenReturn("1");
    when(req.getParameter("sleep")).thenReturn("100");
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    when(req.getServerName()).thenReturn("localhost");
    when(req.getServerPort()).thenReturn(8080);
    when(req.getRequestURI()).thenReturn("/test");
    servlet.doGet(req, res);
    verify(req).getServerName();
    verify(req).getServerPort();
    verify(req).getRequestURI();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetExceptionHandling_QOkP8() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingReentryServlet servlet = new PingReentryServlet();
    when(req.getParameter("numReentries")).thenReturn("1");
    when(req.getParameter("sleep")).thenReturn("100");
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    when(req.getServerName()).thenReturn("localhost");
    when(req.getServerPort()).thenReturn(8080);
    when(req.getRequestURI()).thenReturn("/test");
    doThrow(new IOException()).when(out).println(anyString());
    servlet.doGet(req, res);
    verify(res).sendError(500, "java.io.IOException");
  }
}