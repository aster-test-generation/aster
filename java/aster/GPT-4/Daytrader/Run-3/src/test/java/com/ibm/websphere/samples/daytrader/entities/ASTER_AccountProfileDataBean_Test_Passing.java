/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountProfileDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreditCard_hEfl0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    assertEquals("1234-5678-9012-3456", accountProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_MaVn0() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Street", "john@example.com", "1234567890123456");
    assertTrue(bean1.equals(bean1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_FffB1() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Street", "john@example.com", "1234567890123456");
    Object otherObject = new Object();
    assertFalse(bean1.equals(otherObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_hKVE2() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Street", "john@example.com", "1234567890123456");
    assertFalse(bean1.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentUserID_zGfC3() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Street", "john@example.com", "1234567890123456");
    AccountProfileDataBean bean2 = new AccountProfileDataBean("user2", "pass1", "John Doe", "123 Street", "john@example.com", "1234567890123456");
    assertFalse(bean1.equals(bean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameUserID_TaBw4() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Street", "john@example.com", "1234567890123456");
    AccountProfileDataBean bean2 = new AccountProfileDataBean("user1", "pass2", "Jane Doe", "456 Avenue", "jane@example.com", "6543210987654321");
    assertTrue(bean1.equals(bean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_TrLW0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    String expected = "\n\tAccount Profile Data for userID:user123\n\t\t   passwd:pass123\n\t\t   fullName:John Doe\n\t\t    address:1234 Elm St\n\t\t      email:john.doe@example.com\n\t\t creditCard:1234-5678-9012-3456";
    assertEquals(expected, accountProfile.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccount_RVYC0() {
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    assertEquals(account, profile.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FaUT0_1() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FaUT0_2() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FaUT0_3() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FaUT0_4() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FaUT0_5() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FaUT0_6() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FaUT0_7() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUserID_WYME0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String expectedUserID = "user123";
    accountProfile.setUserID(expectedUserID);
    assertEquals(expectedUserID, accountProfile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEmail_djKH0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    assertEquals("john.doe@example.com", accountProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_Invf0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user123", "password", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    assertEquals("user123", accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNonNullUserID_GjCP0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "password", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    int expectedHashCode = "user123".hashCode();
    assertEquals(expectedHashCode, accountProfile.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullUserID_iTfI1() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean(null, "password", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    int expectedHashCode = 0;
    assertEquals(expectedHashCode, accountProfile.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAddress_wGdQ0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234567890123456");
    assertEquals("1234 Elm Street", accountProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPassword_HFzW0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Main St", "john.doe@example.com", "1234-5678-9012-3456");
    assertEquals("password123", accountProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreditCard_UvUn0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String testCreditCard = "1234-5678-9101-1121";
    accountProfile.setCreditCard(testCreditCard);
    assertEquals(testCreditCard, accountProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_TlKZ0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    String expectedHTML = "<BR>Account Profile Data for userID: <B>user123</B>" +
                "<LI>   passwd:pass123</LI>" +
                "<LI>   fullName:John Doe</LI>" +
                "<LI>    address:1234 Elm St</LI>" +
                "<LI>      email:john.doe@example.com</LI>" +
                "<LI> creditCard:1234-5678-9012-3456</LI>";
    assertEquals(expectedHTML, accountProfile.toHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullName_ExdI0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "password123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    assertEquals("John Doe", accountProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAddress_ROZk0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String testAddress = "1234 Test Lane";
    accountProfile.setAddress(testAddress);
    assertEquals(testAddress, accountProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEmail_zWLz0_zICj0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String testEmail = "test@example.com";
    accountProfile.setEmail(testEmail);
    assertEquals(testEmail, accountProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFullName_yFms0_INbY0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String expectedFullName = "John Doe";
    accountProfile.setFullName(expectedFullName);
    assertEquals(expectedFullName, accountProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPassword_Zglp0_nOFu0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    accountProfile.setPassword("newPassword123");
    assertEquals("newPassword123", accountProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccount_jbUO0_XNgU0() {
    AccountDataBean expectedAccount = new AccountDataBean();
    AccountProfileDataBean profile = new AccountProfileDataBean("user123", "password", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    profile.setAccount(expectedAccount); // Correct way to set the account if there's a setter method
    AccountDataBean actualAccount = profile.getAccount();
    assertEquals(expectedAccount, actualAccount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_FaUT0() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance);
    assertNotNull(randomInstance.getUserID());
    assertNotNull(randomInstance.getPassword());
    assertNotNull(randomInstance.getFullName());
    assertNotNull(randomInstance.getAddress());
    assertNotNull(randomInstance.getEmail());
    assertNotNull(randomInstance.getCreditCard());
  }
}