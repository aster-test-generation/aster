/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import javax.transaction.RollbackException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
  @Mock
  private EntityManager entityManager;
  @InjectMocks
  private TradeSLSBBean tradeslsbbean;
  private AccountDataBean account;
  private QuoteDataBean quote;
  private HoldingDataBean holding;
  @Mock
  private AccountProfileDataBean profile;
  @Mock
  private OrderDataBean order;
  @InjectMocks
  private TradeSLSBBean tradeSLSBBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithValidData_KeVK0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc.", 100000, new BigDecimal("150.00"), new BigDecimal("148.00"), new BigDecimal("147.00"), new BigDecimal("151.00"), 2.00);
    BigDecimal oldPrice = new BigDecimal("145.00");
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 5000;
    // Assuming the method is correctly implemented and updates the price of the quote
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("152.25"), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithZeroSharesTraded_wjQI1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("GOOGL", "Google LLC", 200000, new BigDecimal("2800.00"), new BigDecimal("2790.00"), new BigDecimal("2785.00"), new BigDecimal("2810.00"), 10.00);
    BigDecimal oldPrice = new BigDecimal("2750.00");
    BigDecimal changeFactor = new BigDecimal("1.02");
    double sharesTraded = 0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("2800.00"), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithNegativeChangeFactor_hxud2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("MSFT", "Microsoft Corp.", 150000, new BigDecimal("300.00"), new BigDecimal("295.00"), new BigDecimal("294.00"), new BigDecimal("305.00"), -5.00);
    BigDecimal oldPrice = new BigDecimal("310.00");
    BigDecimal changeFactor = new BigDecimal("0.90");
    double sharesTraded = 10000;
    // Assuming publishQuotePriceChange method correctly updates the price of the quote
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("279.00"), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_hMBy0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    quote.setPrice(new BigDecimal("150.00"));
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100;
    OrderDataBean result = null;
    try {
      result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    } catch (Exception e) {
      fail("Failed to create order due to exception: " + e.getMessage());
    }
    assertNotNull(result, "Order creation should not return null");
    assertEquals(new BigDecimal("150.00").setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_hMBy0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    quote.setPrice(new BigDecimal("150.00"));
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_SkQJ0() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    MarketSummaryDataBean expected = MarketSummaryDataBean.getRandomInstance();
    MarketSummaryDataBean actual = new MarketSummaryDataBean(); // Assuming default constructor or a similar method to initialize properly
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_WYjg0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "newUser";
    String password = "password123";
    String fullname = "John Doe";
    String address = "1234 Street";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_WYjg0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "newUser";
    String password = "password123";
    String fullname = "John Doe";
    String address = "1234 Street";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, result.getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_WYjg0_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "newUser";
    String password = "password123";
    String fullname = "John Doe";
    String address = "1234 Street";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, result.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterExistingUser_rlUj1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "existingUser";
    String password = "password123";
    String fullname = "Jane Doe";
    String address = "5678 Avenue";
    String email = "janedoe@example.com";
    String creditcard = "6543210987654321";
    BigDecimal openBalance = new BigDecimal("500.00");
    AccountProfileDataBean existingProfile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    existingProfile.setAccount(new AccountDataBean(0, 0, null, new Timestamp(System.currentTimeMillis()), openBalance, openBalance, userID));
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellNoHolding_vctR4_1() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("sell");
    order.setHolding(null);
    when(entityManager.find(OrderDataBean.class, 1)).thenReturn(order);
    OrderDataBean completedOrder = tradeBean.completeOrder(1, true);
    assertNull(completedOrder.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithNoPriceChangeConfig_WUwU3_1() {
    TradeConfig.setUpdateQuotePrices(false);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("1.03");
    double sharesTraded = 500.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    assertNull(BigDecimal.ZERO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithValidData_KeVK0_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc.", 100000, new BigDecimal("150.00"), new BigDecimal("148.00"), new BigDecimal("147.00"), new BigDecimal("151.00"), 2.00);
    BigDecimal oldPrice = new BigDecimal("145.00");
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 5000;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("150.00"), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithNegativeChangeFactor_hxud2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("MSFT", "Microsoft Corp.", 150000, new BigDecimal("300.00"), new BigDecimal("295.00"), new BigDecimal("294.00"), new BigDecimal("305.00"), -5.00);
    BigDecimal oldPrice = new BigDecimal("310.00");
    BigDecimal changeFactor = new BigDecimal("0.90");
    double sharesTraded = 10000;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("300.00"), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_hMBy0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    quote.setPrice(new BigDecimal("150.00"));
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(result);
    assertEquals("open", result.getOrderStatus());
    assertEquals(new BigDecimal("150.00").setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), result.getPrice());
    assertEquals(TradeConfig.getOrderFee(orderType), result.getOrderFee());
    assertEquals(account, result.getAccount());
    assertEquals(quote, result.getQuote());
    assertEquals(holding, result.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_SkQJ0_fid1() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    MarketSummaryDataBean expected = MarketSummaryDataBean.getRandomInstance();
    MarketSummaryDataBean actual = tradeSLSB.getMarketSummary();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesReturnsNotEmptyList_Tvtu0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_WYjg0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "newUser";
    String password = "password123";
    String fullname = "John Doe";
    String address = "1234 Street";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
    assertEquals(userID, result.getProfile().getUserID());
    assertEquals(openBalance, result.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_RdaT0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithNullOrder_IRUK0_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Integer orderID = null; // Assuming null simulates not finding the order
    try {
      tradeBean.completeOrder(orderID, true);
      fail("Should have thrown an exception for null order");
    } catch (Exception e) {
      assertTrue(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAlreadyCompleted_tgGt1_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderStatus("closed");
    when(entityManager.find(OrderDataBean.class, 1)).thenReturn(order);
    try {
      tradeBean.completeOrder(1, true);
      fail("Should have thrown an exception for already completed order");
    } catch (Exception e) {
      assertTrue(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderBuyNewHolding_JlSJ2() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("buy");
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    order.setAccount(account);
    order.setQuote(quote);
    order.setPrice(new BigDecimal("100.00"));
    order.setQuantity(50.0);
    when(entityManager.find(OrderDataBean.class, 1)).thenReturn(order);
    OrderDataBean completedOrder = tradeBean.completeOrder(1, true);
    assertNotNull(completedOrder.getHolding());
    assertEquals("closed", completedOrder.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellExistingHolding_aGDv3() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("sell");
    HoldingDataBean holding = new HoldingDataBean();
    order.setHolding(holding);
    when(entityManager.find(OrderDataBean.class, 1)).thenReturn(order);
    OrderDataBean completedOrder = tradeBean.completeOrder(1, true);
    assertNull(completedOrder.getHolding());
    assertEquals("closed", completedOrder.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellNoHolding_vctR4() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("sell");
    order.setHolding(null);
    when(entityManager.find(OrderDataBean.class, 1)).thenReturn(order);
    OrderDataBean completedOrder = tradeBean.completeOrder(1, true);
    assertNull(completedOrder.getHolding());
    assertEquals("closed", completedOrder.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithPennyStock_mLHb0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    quote.setPrice(TradeConfig.PENNY_STOCK_PRICE);
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1000.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = TradeConfig.PENNY_STOCK_PRICE.multiply(TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(expectedPrice, updatedQuote.getPrice());
    assertEquals(sharesTraded, updatedQuote.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithMaximumStockPrice_RdrG1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    quote.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE.add(new BigDecimal("1.00")));
    BigDecimal changeFactor = new BigDecimal("1.10");
    double sharesTraded = 2000.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = TradeConfig.MAXIMUM_STOCK_PRICE.multiply(TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(expectedPrice, updatedQuote.getPrice());
    assertEquals(sharesTraded, updatedQuote.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeNormalCondition_JmRt2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("1.02");
    double sharesTraded = 1500.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = quote.getPrice().multiply(changeFactor).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(expectedPrice, updatedQuote.getPrice());
    assertEquals(sharesTraded, updatedQuote.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithNoPriceChangeConfig_WUwU3() {
    TradeConfig.setUpdateQuotePrices(false);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("1.03");
    double sharesTraded = 500.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    assertEquals(BigDecimal.ZERO, updatedQuote.getPrice());
    assertEquals(0.0, updatedQuote.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithPublishingEnabled_YFAz4() {
    TradeConfig.setPublishQuotePriceChange(true);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("1.04");
    double sharesTraded = 3000.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = quote.getPrice().multiply(changeFactor).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(expectedPrice, updatedQuote.getPrice());
    assertEquals(sharesTraded, updatedQuote.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrder_PCIZ0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Integer orderID = 1; // Assuming an order ID that exists
    boolean twoPhase = true;
    EntityManager entityManager = mock(EntityManager.class);
    OrderDataBean order = mock(OrderDataBean.class);
    when(entityManager.find(OrderDataBean.class, orderID)).thenReturn(order);
    tradeBean.cancelOrder(orderID, twoPhase);
    verify(order).cancel();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_nimk0() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = tradeSLSB.getQuote(symbol);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uAiu0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertEquals(companyName, result.getCompanyName());
    assertEquals(price, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_zXFT0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newPass123", "Johnathan Doe", "456 Oak St", "johnathan@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeSLSBBean.updateAccountProfile(updatedProfile);
    assertEquals("456 Oak St", resultProfile.getAddress());
    assertEquals("newPass123", resultProfile.getPassword());
    assertEquals("Johnathan Doe", resultProfile.getFullName());
    assertEquals("6543-2109-8765-4321", resultProfile.getCreditCard());
    assertEquals("johnathan@example.com", resultProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithValidOrderIDAndTwoPhaseTrue_QhEF0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
    System.out.println("Order queued with orderID: " + orderID + " and twoPhase: " + twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithValidOrderIDAndTwoPhaseFalse_TUGm2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 456;
    boolean twoPhase = false;
    tradeSLSBBean.queueOrder(orderID, twoPhase);
    System.out.println("Order queued with orderID: " + orderID + " and twoPhase: " + twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithValidUserID_rUKG0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    AccountProfileDataBean expected = AccountProfileDataBean.getRandomInstance();
    AccountProfileDataBean actual = tradeSLSBBean.getAccountProfileData(userID);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithValidSymbol_FmJo0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    try {
      QuoteDataBean result = tradeSLSBBean.pingTwoPhase(symbol);
      assertNotNull(result);
      assertEquals(symbol, result.getSymbol());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithPriceChange_dvog1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quoteDataBean = QuoteDataBean.getRandomInstance();
    String symbol = quoteDataBean.getSymbol();
    BigDecimal initialPrice = quoteDataBean.getPrice();
    try {
      QuoteDataBean result = tradeSLSBBean.pingTwoPhase(symbol);
      assertNotNull(result);
      assertNotEquals(initialPrice, result.getPrice());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_MmhL0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals("buy", result.getOrderType());
    assertTrue(result.getQuantity() == quantity);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_dxKY1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user456";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals("buy", result.getOrderType());
    assertTrue(result.getQuantity() == quantity);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynch2PhaseMode_ZZTu2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user789";
    String symbol = "MSFT";
    double quantity = 150.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals("buy", result.getOrderType());
    assertTrue(result.getQuantity() == quantity);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullHolding_pJKD0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user1";
    Integer holdingID = 123; // Assuming this holding does not exist
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynchMode_NHru1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    Integer holdingID = 124; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("sell", result.getOrderType());
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchMode_Tpja2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    Integer holdingID = 125; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("sell", result.getOrderType());
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch2PhaseMode_sdvN3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user4";
    Integer holdingID = 126; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("sell", result.getOrderType());
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsyncReturnsNull_nffv0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    Future<OrderDataBean> result = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithValidUser_YVsi0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUser123";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUser_Cqwx1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "invalidUser456";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_hMBy0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    quote.setPrice(new BigDecimal("150.00"));
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_hMBy0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    quote.setPrice(new BigDecimal("150.00"));
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals("open", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_hMBy0_3_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    quote.setPrice(new BigDecimal("150.00"));
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(new BigDecimal("150.00").setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_hMBy0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    quote.setPrice(new BigDecimal("150.00"));
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(TradeConfig.getOrderFee(orderType), result.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_hMBy0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    quote.setPrice(new BigDecimal("150.00"));
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(account, result.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_hMBy0_6_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    quote.setPrice(new BigDecimal("150.00"));
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quote, result.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_hMBy0_7_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    quote.setPrice(new BigDecimal("150.00"));
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100;
    OrderDataBean result = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(holding, result.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesReturnsNotEmptyList_Tvtu0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesReturnsNotEmptyList_Tvtu0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_RdaT0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_RdaT0_2_fid2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderBuyNewHolding_JlSJ2_1() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("buy");
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    order.setAccount(account);
    order.setQuote(quote);
    order.setPrice(new BigDecimal("100.00"));
    order.setQuantity(50.0);
    when(entityManager.find(OrderDataBean.class, 1)).thenReturn(order);
    OrderDataBean completedOrder = tradeBean.completeOrder(1, true);
    assertNotNull(completedOrder.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderBuyNewHolding_JlSJ2_2() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("buy");
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    order.setAccount(account);
    order.setQuote(quote);
    order.setPrice(new BigDecimal("100.00"));
    order.setQuantity(50.0);
    when(entityManager.find(OrderDataBean.class, 1)).thenReturn(order);
    OrderDataBean completedOrder = tradeBean.completeOrder(1, true);
    assertEquals("closed", completedOrder.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellExistingHolding_aGDv3_1() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("sell");
    HoldingDataBean holding = new HoldingDataBean();
    order.setHolding(holding);
    when(entityManager.find(OrderDataBean.class, 1)).thenReturn(order);
    OrderDataBean completedOrder = tradeBean.completeOrder(1, true);
    assertNull(completedOrder.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellExistingHolding_aGDv3_2() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("sell");
    HoldingDataBean holding = new HoldingDataBean();
    order.setHolding(holding);
    when(entityManager.find(OrderDataBean.class, 1)).thenReturn(order);
    OrderDataBean completedOrder = tradeBean.completeOrder(1, true);
    assertEquals("closed", completedOrder.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSellNoHolding_vctR4_2() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("sell");
    order.setHolding(null);
    when(entityManager.find(OrderDataBean.class, 1)).thenReturn(order);
    OrderDataBean completedOrder = tradeBean.completeOrder(1, true);
    assertEquals("closed", completedOrder.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithPennyStock_mLHb0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    quote.setPrice(TradeConfig.PENNY_STOCK_PRICE);
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1000.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = TradeConfig.PENNY_STOCK_PRICE.multiply(TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(expectedPrice, updatedQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithPennyStock_mLHb0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    quote.setPrice(TradeConfig.PENNY_STOCK_PRICE);
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1000.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = TradeConfig.PENNY_STOCK_PRICE.multiply(TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(sharesTraded, updatedQuote.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithMaximumStockPrice_RdrG1_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    quote.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE.add(new BigDecimal("1.00")));
    BigDecimal changeFactor = new BigDecimal("1.10");
    double sharesTraded = 2000.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = TradeConfig.MAXIMUM_STOCK_PRICE.multiply(TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(expectedPrice, updatedQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithMaximumStockPrice_RdrG1_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    quote.setPrice(TradeConfig.MAXIMUM_STOCK_PRICE.add(new BigDecimal("1.00")));
    BigDecimal changeFactor = new BigDecimal("1.10");
    double sharesTraded = 2000.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = TradeConfig.MAXIMUM_STOCK_PRICE.multiply(TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(sharesTraded, updatedQuote.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeNormalCondition_JmRt2_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("1.02");
    double sharesTraded = 1500.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = quote.getPrice().multiply(changeFactor).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(expectedPrice, updatedQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeNormalCondition_JmRt2_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("1.02");
    double sharesTraded = 1500.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = quote.getPrice().multiply(changeFactor).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(sharesTraded, updatedQuote.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithNoPriceChangeConfig_WUwU3_1_fid2() {
    TradeConfig.setUpdateQuotePrices(false);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("1.03");
    double sharesTraded = 500.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    assertEquals(BigDecimal.ZERO, updatedQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithPublishingEnabled_YFAz4_1() {
    TradeConfig.setPublishQuotePriceChange(true);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("1.04");
    double sharesTraded = 3000.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = quote.getPrice().multiply(changeFactor).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(expectedPrice, updatedQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithPublishingEnabled_YFAz4_2() {
    TradeConfig.setPublishQuotePriceChange(true);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("1.04");
    double sharesTraded = 3000.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    BigDecimal expectedPrice = quote.getPrice().multiply(changeFactor).setScale(2, BigDecimal.ROUND_HALF_UP);
    assertEquals(sharesTraded, updatedQuote.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_nimk0_1() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = tradeSLSB.getQuote(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_nimk0_2() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = tradeSLSB.getQuote(symbol);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uAiu0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uAiu0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uAiu0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(companyName, result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_uAiu0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(price, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_zXFT0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newPass123", "Johnathan Doe", "456 Oak St", "johnathan@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeSLSBBean.updateAccountProfile(updatedProfile);
    assertEquals("456 Oak St", resultProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_zXFT0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newPass123", "Johnathan Doe", "456 Oak St", "johnathan@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeSLSBBean.updateAccountProfile(updatedProfile);
    assertEquals("newPass123", resultProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_zXFT0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newPass123", "Johnathan Doe", "456 Oak St", "johnathan@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeSLSBBean.updateAccountProfile(updatedProfile);
    assertEquals("Johnathan Doe", resultProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_zXFT0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newPass123", "Johnathan Doe", "456 Oak St", "johnathan@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeSLSBBean.updateAccountProfile(updatedProfile);
    assertEquals("6543-2109-8765-4321", resultProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_zXFT0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newPass123", "Johnathan Doe", "456 Oak St", "johnathan@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeSLSBBean.updateAccountProfile(updatedProfile);
    assertEquals("johnathan@example.com", resultProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_MmhL0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_MmhL0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals("buy", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_MmhL0_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertTrue(result.getQuantity() == quantity);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_MmhL0_4() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_dxKY1_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user456";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_dxKY1_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user456";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals("buy", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_dxKY1_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user456";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertTrue(result.getQuantity() == quantity);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_dxKY1_4() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user456";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynch2PhaseMode_ZZTu2_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user789";
    String symbol = "MSFT";
    double quantity = 150.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynch2PhaseMode_ZZTu2_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user789";
    String symbol = "MSFT";
    double quantity = 150.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals("buy", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynch2PhaseMode_ZZTu2_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user789";
    String symbol = "MSFT";
    double quantity = 150.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertTrue(result.getQuantity() == quantity);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynch2PhaseMode_ZZTu2_4() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user789";
    String symbol = "MSFT";
    double quantity = 150.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynchMode_NHru1_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    Integer holdingID = 124; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynchMode_NHru1_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    Integer holdingID = 124; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sell", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynchMode_NHru1_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    Integer holdingID = 124; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchMode_Tpja2_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    Integer holdingID = 125; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchMode_Tpja2_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    Integer holdingID = 125; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sell", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchMode_Tpja2_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    Integer holdingID = 125; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch2PhaseMode_sdvN3_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user4";
    Integer holdingID = 126; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch2PhaseMode_sdvN3_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user4";
    Integer holdingID = 126; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sell", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch2PhaseMode_sdvN3_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user4";
    Integer holdingID = 126; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithValidUser_YVsi0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUser123";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithValidUser_YVsi0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUser123";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUser_Cqwx1_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "invalidUser456";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUser_Cqwx1_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "invalidUser456";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS)
  public void testLoginFailureNoUser_BDKV1_EQcO0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    assertThrows(EJBException.class, () -> tradeBean.login("nonExistingUser", "password"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_fmyX0_EDyH0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID("userID");
    profile.setPassword("password");
    AccountDataBean expectedAccount = new AccountDataBean();
    profile.setAccount(expectedAccount);
    try {
      AccountDataBean result = tradeBean.login("userID", "password");
      assertEquals(expectedAccount, result);
    } catch (RollbackException e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithValidUserId_bFFS0_RffN0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUserID";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = new AccountDataBean();
    account.setProfile(profile);
    List<OrderDataBean> expectedOrders = new ArrayList<>();
    OrderDataBean order1 = new OrderDataBean();
    OrderDataBean order2 = new OrderDataBean();
    expectedOrders.add(order1);
    expectedOrders.add(order2);
    account.setOrders(expectedOrders);
    Collection<OrderDataBean> actualOrders = tradeBean.getClosedOrders(userID);
    assertNotNull(actualOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithValidUserId_bFFS0_RffN0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUserID";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = new AccountDataBean();
    account.setProfile(profile);
    List<OrderDataBean> expectedOrders = new ArrayList<>();
    OrderDataBean order1 = new OrderDataBean();
    OrderDataBean order2 = new OrderDataBean();
    expectedOrders.add(order1);
    expectedOrders.add(order2);
    account.setOrders(expectedOrders);
    Collection<OrderDataBean> actualOrders = tradeBean.getClosedOrders(userID);
    assertEquals(expectedOrders.size(), actualOrders.size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithValidUserId_bFFS0_RffN0_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUserID";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = new AccountDataBean();
    account.setProfile(profile);
    List<OrderDataBean> expectedOrders = new ArrayList<>();
    OrderDataBean order1 = new OrderDataBean();
    OrderDataBean order2 = new OrderDataBean();
    expectedOrders.add(order1);
    expectedOrders.add(order2);
    account.setOrders(expectedOrders);
    Collection<OrderDataBean> actualOrders = tradeBean.getClosedOrders(userID);
    assertTrue(actualOrders.containsAll(expectedOrders));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_rwzj0_1() throws Exception {
    tradeslsbbean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "SYM123";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quote);
    when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
    when(account.getBalance()).thenReturn(new BigDecimal("2000.00"));
    when(order.getOrderFee()).thenReturn(new BigDecimal("15.00"));
    when(order.getOrderID()).thenReturn(1);
    OrderDataBean result = tradeslsbbean.buy(userID, symbol, quantity, orderProcessingMode);
    verify(entityManager).find(AccountProfileDataBean.class, userID);
    verify(entityManager).find(QuoteDataBean.class, symbol);
    verify(account).setBalance(any(BigDecimal.class));
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_rwzj0_2() throws Exception {
    tradeslsbbean = new TradeSLSBBean();
    String userID = "user123";
    String symbol = "SYM123";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quote);
    when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
    when(account.getBalance()).thenReturn(new BigDecimal("2000.00"));
    when(order.getOrderFee()).thenReturn(new BigDecimal("15.00"));
    when(order.getOrderID()).thenReturn(1);
    OrderDataBean result = tradeslsbbean.buy(userID, symbol, quantity, orderProcessingMode);
    verify(entityManager).find(AccountProfileDataBean.class, userID);
    verify(entityManager).find(QuoteDataBean.class, symbol);
    verify(account).setBalance(any(BigDecimal.class));
    assertEquals(order, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CWqo0_1() throws Exception {
    when(entityManager.find(AccountProfileDataBean.class, "user1")).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
    when(holding.getQuote()).thenReturn(quote);
    when(holding.getQuantity()).thenReturn(100.0);
    when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
    when(account.getBalance()).thenReturn(new BigDecimal("1000.00"));
    when(order.getOrderFee()).thenReturn(new BigDecimal("15.00"));
    when(order.getOrderID()).thenReturn(123);
    when(tradeSLSBBean.createOrder(account, quote, holding, "sell", 100.0)).thenReturn(order);
    OrderDataBean result = tradeSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    verify(entityManager).persist(any(OrderDataBean.class));
    verify(account).setBalance(new BigDecimal("985.00"));
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CWqo0_2() throws Exception {
    when(entityManager.find(AccountProfileDataBean.class, "user1")).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
    when(holding.getQuote()).thenReturn(quote);
    when(holding.getQuantity()).thenReturn(100.0);
    when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
    when(account.getBalance()).thenReturn(new BigDecimal("1000.00"));
    when(order.getOrderFee()).thenReturn(new BigDecimal("15.00"));
    when(order.getOrderID()).thenReturn(123);
    when(tradeSLSBBean.createOrder(account, quote, holding, "sell", 100.0)).thenReturn(order);
    OrderDataBean result = tradeSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    verify(entityManager).persist(any(OrderDataBean.class));
    verify(account).setBalance(new BigDecimal("985.00"));
    assertEquals(order, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CWqo0_3() throws Exception {
    when(entityManager.find(AccountProfileDataBean.class, "user1")).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
    when(holding.getQuote()).thenReturn(quote);
    when(holding.getQuantity()).thenReturn(100.0);
    when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
    when(account.getBalance()).thenReturn(new BigDecimal("1000.00"));
    when(order.getOrderFee()).thenReturn(new BigDecimal("15.00"));
    when(order.getOrderID()).thenReturn(123);
    when(tradeSLSBBean.createOrder(account, quote, holding, "sell", 100.0)).thenReturn(order);
    OrderDataBean result = tradeSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    verify(entityManager).persist(any(OrderDataBean.class));
    verify(account).setBalance(new BigDecimal("985.00"));
    assertEquals("user1", profile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_CWqo0_4() throws Exception {
    when(entityManager.find(AccountProfileDataBean.class, "user1")).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(HoldingDataBean.class, 1)).thenReturn(holding);
    when(holding.getQuote()).thenReturn(quote);
    when(holding.getQuantity()).thenReturn(100.0);
    when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
    when(account.getBalance()).thenReturn(new BigDecimal("1000.00"));
    when(order.getOrderFee()).thenReturn(new BigDecimal("15.00"));
    when(order.getOrderID()).thenReturn(123);
    when(tradeSLSBBean.createOrder(account, quote, holding, "sell", 100.0)).thenReturn(order);
    OrderDataBean result = tradeSLSBBean.sell("user1", 1, TradeConfig.SYNCH);
    verify(entityManager).persist(any(OrderDataBean.class));
    verify(account).setBalance(new BigDecimal("985.00"));
    assertEquals(new BigDecimal("985.00"), account.getBalance());
  }
}