/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DirectSLSBBean_Coverage_Test_Failing {
  private DirectSLSBBean directSLSBBean;
  private TradeDirect tradeDirect;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSetsInSession_iEnt0() throws Exception {
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    when(mockTradeDirect.completeOrder(anyInt(), anyBoolean())).thenReturn(new OrderDataBean());
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    bean.completeOrder(orderID, twoPhase);
    verify(mockTradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderReturnsCorrectValue_aIqG1() throws Exception {
    OrderDataBean expectedOrder = new OrderDataBean();
    TradeDirect mockTradeDirect = mock(TradeDirect.class);
    when(mockTradeDirect.completeOrder(anyInt(), anyBoolean())).thenReturn(expectedOrder);
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = false;
    OrderDataBean result = bean.completeOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_Asynchronous_xoAj1() throws Exception {
    TradeDirect tradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = tradeDirect;
    String userID = "user2";
    String symbol = "SYM2";
    double quantity = 200;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean expectedOrder = new OrderDataBean();
    when(tradeDirect.buy(userID, symbol, quantity, orderProcessingMode)).thenReturn(expectedOrder);
    when(expectedOrder.getOrderID()).thenReturn(123);
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    verify(tradeDirect).setInSession(true);
    verify(tradeDirect).buy(userID, symbol, quantity, orderProcessingMode);
    verify(bean).completeOrderAsync(123, false);
    assertSame(expectedOrder, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_AsynchMode_CompletesOrderAsync_jnTR2() throws Exception {
    TradeDirect tradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = tradeDirect;
    OrderDataBean orderData = mock(OrderDataBean.class);
    when(orderData.getOrderID()).thenReturn(100);
    when(tradeDirect.sell(anyString(), anyInt(), eq(TradeConfig.ASYNCH))).thenReturn(orderData);
    bean.sell("user1", 1, TradeConfig.ASYNCH);
    verify(bean).completeOrderAsync(100, false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_SynchMode_DoesNotCompleteOrderAsync_CUFp3() throws Exception {
    TradeDirect tradeDirect = mock(TradeDirect.class);
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = tradeDirect;
    OrderDataBean orderData = mock(OrderDataBean.class);
    when(orderData.getOrderID()).thenReturn(100);
    when(tradeDirect.sell(anyString(), anyInt(), eq(TradeConfig.SYNCH))).thenReturn(orderData);
    bean.sell("user1", 1, TradeConfig.SYNCH);
    verify(bean, never()).completeOrderAsync(anyInt(), anyBoolean());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_SetsInSession_VVda1() throws Exception {
    when(tradeDirect.getMarketSummary()).thenReturn(new MarketSummaryDataBean());
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    verify(tradeDirect).setInSession(true);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_ReturnsMarketSummary_dwxp2() throws Exception {
    MarketSummaryDataBean expectedMarketSummary = new MarketSummaryDataBean();
    when(tradeDirect.getMarketSummary()).thenReturn(expectedMarketSummary);
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    verify(tradeDirect).getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersSetsInSession_ZznO1() throws Exception {
    String userID = "user123";
    directSLSBBean.getOrders(userID);
    verify(tradeDirect).setInSession(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_SetsInSession_iiwX1() throws Exception {
    String userID = "user123";
    directSLSBBean.getClosedOrders(userID);
    verify(tradeDirect).setInSession(true);
  }
}