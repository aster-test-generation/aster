/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServlet2Session2Entity2JSP_Coverage_Test_Failing {
  private PingServlet2Session2Entity2JSP servlet;
  private HttpServletRequest req;
  private HttpServletResponse res;
  private ServletContext ctx;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSymbolInitialization_qNKB1() throws Exception {
    servlet.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletContext_MmSE3() throws Exception {
    when(req.getServletContext()).thenReturn(ctx);
    servlet.doGet(req, res);
    verify(req).getServletContext();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_lKPf4() throws Exception {
    when(TradeConfig.getPrimIterations()).thenReturn(5);
    servlet.doGet(req, res);
    verify(TradeConfig.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogErrorOnGeneralException_geIo10() throws Exception {
    when(TradeConfig.getPrimIterations()).thenThrow(new RuntimeException("Test Exception"));
    servlet.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendErrorOnGeneralException_CPaP11() throws Exception {
    when(TradeConfig.getPrimIterations()).thenThrow(new RuntimeException("Test Exception"));
    servlet.doGet(req, res);
    verify(res).sendError(500, contains("General Exception caught"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServletContextNotNull_CmRK15() throws Exception {
    when(req.getServletContext()).thenReturn(ctx);
    servlet.doGet(req, res);
    assertNotNull(ctx);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_uDpn0() {
    PingServlet2Session2Entity2JSP servlet = new PingServlet2Session2Entity2JSP();
    String result = servlet.getServletInfo();
    assertEquals("web primitive, tests Servlet to Session to Entity EJB to JSP path", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_fTHB0() {
    servlet = new PingServlet2Session2Entity2JSP();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS)
  public void testGetServletInfo_uDpn0_kZQY1() {
    String result = servlet.getServletInfo();
    assertEquals("web primitive, tests Servlet to Session to Entity EJB to JSP path", result);
  }
}