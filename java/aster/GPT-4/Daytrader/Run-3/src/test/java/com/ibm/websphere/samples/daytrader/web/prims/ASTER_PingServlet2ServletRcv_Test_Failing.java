/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2ServletRcv_Test_Failing {
  @Mock
  private ServletConfig mockServletConfig;
  private PingServlet2ServletRcv pingServlet2ServletRcv;
  PingServlet2ServletRcv pingservlet2servletrcv;
  HttpServletRequest httpservletrequest;
  HttpServletResponse httpservletresponse;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  private static String initTime = null;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit() throws ServletException {
    pingServlet2ServletRcv = new PingServlet2ServletRcv();
    // Call the method under test
    pingServlet2ServletRcv.init(mockServletConfig);
    // Assertions to check the expected results
    assertNotNull(initTime, "initTime should not be null after initialization");
    // Optionally, check if the initTime is a valid date string
    try {
      new java.util.Date(initTime);
    } catch (IllegalArgumentException e) {
      fail("initTime should be a valid date string");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws ServletException, IOException {
    httpservletrequest = mock(HttpServletRequest.class);
    httpservletresponse = mock(HttpServletResponse.class);
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    // Call the method under test
    pingservlet2servletrcv.doPost(httpservletrequest, httpservletresponse);
    // Verify that doGet is called once
    verify(httpservletrequest, atLeastOnce()).setAttribute(anyString(), any());
    verify(httpservletresponse, atLeastOnce()).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_eyhP0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    servlet.doPost(request, response);
    verify(servlet).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_UeGy0_gxRJ0() throws ServletException, NoSuchFieldException, IllegalAccessException {
    ServletConfig mockConfig = Mockito.mock(ServletConfig.class);
    Mockito.when(mockConfig.getInitParameter("initTime")).thenReturn("SomeTime");
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    servlet.init(mockConfig);
    Field initTimeField = PingServlet2ServletRcv.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    String initTime = (String) initTimeField.get(servlet);
    assertEquals("SomeTime", initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_UeGy0_gxRJ0_fid3() throws ServletException, NoSuchFieldException, IllegalAccessException {
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    ServletConfig mockConfig = Mockito.mock(ServletConfig.class);
    Mockito.when(mockConfig.getInitParameter("initTime")).thenReturn("SomeTime");
    servlet.init(mockConfig);
    Field initTimeField = PingServlet2ServletRcv.class.getDeclaredField("initTime");
    initTimeField.setAccessible(true);
    String initTime = (String) initTimeField.get(servlet);
    assertNotNull(initTime);
  }
}