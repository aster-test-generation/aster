/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;

public class Aster_LoginValidator_Coverage_Test_Passing {
  private LoginValidator loginValidator;
  private FacesContext context;
  private UIComponent component;
  private Pattern pattern;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_CELo0() throws javax.faces.validator.ValidatorException {
    loginValidator = new LoginValidator();
    context = mock(FacesContext.class);
    component = mock(UIComponent.class);
    pattern = Pattern.compile("uid:\\d+");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS)
  public void testValidate_LogTrace_wBbS1_nCAw1() {
    LoginValidator loginValidator = new LoginValidator();
    FacesContext context = null; // Mock or dummy context as per actual test environment setup
    UIComponent component = null; // Mock or dummy component as per actual test environment setup
    String validInput = "uid:123";
    assertDoesNotThrow(() -> loginValidator.validate(context, component, validInput));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testValidate_FacesMessageCreation_dyhc4_Oryz0() throws javax.faces.validator.ValidatorException {
    String invalidInput = "user123";
    loginValidator = new LoginValidator(); // Initialize the loginValidator
    try {
      loginValidator.validate(context, component, invalidInput);
      Assertions.fail("Expected ValidatorException was not thrown.");
    } catch (ValidatorException ve) {
      Assertions.assertNotNull(ve.getMessage()); // Changed to check if an exception message is not null
    }
  }
}