/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedThreadFactory;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedThread_Test_Passing {
  PingManagedThread pingManagedThread;
  ServletConfig mockServletConfig;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  @Mock
  private ManagedThreadFactory managedThreadFactory;
  @Mock
  private HttpServletRequest httpservletrequest;
  @Mock
  private HttpServletResponse httpservletresponse;
  @Mock
  private ServletOutputStream servletoutputstream;
  @Mock
  private AsyncContext asyncContext;
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingManagedThread = new PingManagedThread();
    // Setup the environment
    pingManagedThread.doPost(httpServletRequest, httpServletResponse);
    // Verify doGet is called inside doPost
    verify(httpServletRequest, atLeastOnce()).setAttribute(anyString(), any());
    verify(httpServletResponse, never()).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_oQyf0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingManagedThread pingManagedThread = new PingManagedThread();
    pingManagedThread.doPost(request, response);
    verify(pingManagedThread).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_OkSR0() {
    PingManagedThread pingManagedThread = new PingManagedThread();
    String result = pingManagedThread.getServletInfo();
    assertEquals("Tests a ManagedThread asynchronous servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws Exception {
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    when(httpservletrequest.startAsync()).thenReturn(asyncContext);
    pingManagedThread.doGet(httpservletrequest, httpservletresponse);
    verify(httpservletresponse).setContentType("text/html");
    verify(servletoutputstream).println(anyString());
    verify(managedThreadFactory).newThread(any(Runnable.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_dlcM0() throws ServletException, IOException {
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockResponse = mock(HttpServletResponse.class);
    AsyncContext mockAsyncContext = mock(AsyncContext.class);
    ServletOutputStream mockOutput = mock(ServletOutputStream.class);
    when(mockRequest.startAsync()).thenReturn(mockAsyncContext);
    when(mockResponse.getOutputStream()).thenReturn(mockOutput);
    PingManagedThread servlet = new PingManagedThread();
    servlet.doGet(mockRequest, mockResponse);
    verify(mockRequest).startAsync();
    verify(mockResponse).setContentType("text/html");
    verify(mockResponse).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_KPOM0_1() throws ServletException {
    pingManagedThread = new PingManagedThread();
    mockServletConfig = mock(ServletConfig.class);
    pingManagedThread.init(mockServletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_KPOM0_2() throws ServletException {
    pingManagedThread = new PingManagedThread();
    mockServletConfig = mock(ServletConfig.class);
    pingManagedThread.init(mockServletConfig);
    assertEquals(0, hitCount);
  }
}