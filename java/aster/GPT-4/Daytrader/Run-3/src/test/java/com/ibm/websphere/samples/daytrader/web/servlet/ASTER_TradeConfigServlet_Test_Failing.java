/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_goqV0() {
    TradeConfigServlet servlet = null;
    try {
      servlet = new TradeConfigServlet();
    } catch (Throwable e) {
      fail("Failed to create TradeConfigServlet instance");
    }
    assertNotNull(servlet, "TradeConfigServlet instance should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_ResetTrade_xnoa2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("resetTrade");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
    verify(resp, never()).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testService_ExceptionHandling_TdyV8() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("action")).thenReturn("invalidAction");
    doThrow(new RuntimeException("Test Exception")).when(req).getParameter("action");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
    verify(resp).sendError(500, "TradeConfigServlet.service(...)" + "Exception trying to perform action=invalidAction\nException details: java.lang.RuntimeException: Test Exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidOrderProcessingMode_GBIv0() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertTrue(TradeConfig.getOrderProcessingMode() == 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidOrderProcessingMode_rjXP1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(TradeConfig.getOrderProcessingModeNames()[0], TradeConfig.getOrderProcessingModeNames()[TradeConfig.getOrderProcessingMode()]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullOrderProcessingMode_EuZv2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(TradeConfig.getOrderProcessingMode(), TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidWebInterface_SzBW3() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("2");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals("2", TradeConfig.getWebInterfaceNames()[TradeConfig.getWebInterface()]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidWebInterface_FOze4() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertTrue(TradeConfig.getWebInterface() >= 0 && TradeConfig.getWebInterface() < TradeConfig.getWebInterfaceNames().length);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullWebInterface_gdTA5() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(TradeConfig.getWebInterface(), TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidMaxUsers_LGGR6() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("100");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertTrue(TradeConfig.getMAX_USERS() == 100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidMaxUsers_RmJi7() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertTrue(TradeConfig.getMAX_USERS() == 1000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullMaxUsers_mKIK8() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(TradeConfig.getMAX_USERS(), 1000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidMaxQuotes_CMTk9() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn("500");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals("500", req.getParameter("MaxQuotes"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidMaxQuotes_VzPs10() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(TradeConfig.getMAX_QUOTES(), 10000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullMaxQuotes_kdXR11() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(TradeConfig.getMAX_QUOTES(), 10000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidMarketSummaryInterval_ScWC12() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn("20");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(20, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidMarketSummaryInterval_XDWR13() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(TradeConfig.getMarketSummaryInterval(), 60);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullMarketSummaryInterval_azSO14() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(TradeConfig.getMarketSummaryInterval(), 60);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidPrimIterations_bYgu15() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("primIterations")).thenReturn("1000");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals("1000", req.getParameter("primIterations"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidPrimIterations_HShy16() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("primIterations")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(TradeConfig.getPrimIterations(), 2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullPrimIterations_cGrw17() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("primIterations")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(TradeConfig.getPrimIterations(), TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_1() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertTrue(TradeConfig.getOrderProcessingMode() == 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_2() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertTrue(TradeConfig.getWebInterface() == 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_3() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertTrue(TradeConfig.getMAX_USERS() == 100);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_4() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertTrue(TradeConfig.getMAX_QUOTES() == 500);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_5() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals("5", httpServletRequest.getParameter("marketSummaryInterval"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_6() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals("1000", httpServletRequest.getParameter("primIterations"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_7() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(true, TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_8() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertTrue(TradeConfig.getListQuotePriceChangeFrequency() == 10);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_9() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(true, TradeConfig.getLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_10() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals("true", TradeConfig.getDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_goqV0_fid2() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig mockConfig = mock(ServletConfig.class);
    try {
      servlet.init(mockConfig);
    } catch (ServletException e) {
      fail("ServletException should not be thrown");
    }
    assertNotNull(servlet);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidOrderProcessingMode_GBIv0_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(1, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidOrderProcessingMode_rjXP1_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(0, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullOrderProcessingMode_EuZv2_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(0, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidWebInterface_SzBW3_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("2");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(2, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidWebInterface_FOze4_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(0, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullWebInterface_gdTA5_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(0, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidMaxUsers_LGGR6_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("100");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(100, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidMaxUsers_RmJi7_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(1000, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullMaxUsers_mKIK8_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(1000, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidMaxQuotes_CMTk9_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn("500");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(500, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidMaxQuotes_VzPs10_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(10000, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullMaxQuotes_kdXR11_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(10000, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidMarketSummaryInterval_XDWR13_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(60, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullMarketSummaryInterval_azSO14_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(60, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidPrimIterations_bYgu15_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("primIterations")).thenReturn("1000");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(1000, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidPrimIterations_HShy16_fid2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("primIterations")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(2, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_1_fid3() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(1, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_2_fid3() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(1, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_3_fid3() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(100, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_4_fid3() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(500, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_5_fid3() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(5, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_6_fid3() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(1000, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_7_fid3() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertTrue(TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_8_fid3() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertEquals(10, TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_9_fid3() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertTrue(TradeConfig.getLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_SVzs0_10_fid3() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("1");
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn("500");
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn("5");
    when(httpServletRequest.getParameter("primIterations")).thenReturn("1000");
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn("10");
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn("true");
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getParameter("OrderProcessingMode");
    verify(httpServletRequest, times(1)).getParameter("WebInterface");
    verify(httpServletRequest, times(1)).getParameter("MaxUsers");
    verify(httpServletRequest, times(1)).getParameter("MaxQuotes");
    verify(httpServletRequest, times(1)).getParameter("marketSummaryInterval");
    verify(httpServletRequest, times(1)).getParameter("primIterations");
    verify(httpServletRequest, times(1)).getParameter("EnablePublishQuotePriceChange");
    verify(httpServletRequest, times(1)).getParameter("ListQuotePriceChangeFrequency");
    verify(httpServletRequest, times(1)).getParameter("EnableLongRun");
    verify(httpServletRequest, times(1)).getParameter("DisplayOrderAlerts");
    assertTrue(TradeConfig.getDisplayOrderAlerts());
  }
}