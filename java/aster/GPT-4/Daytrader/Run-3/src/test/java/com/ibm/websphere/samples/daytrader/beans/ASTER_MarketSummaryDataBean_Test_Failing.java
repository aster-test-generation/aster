/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenTSIA_giHE0_fid1() {
    BigDecimal expectedOpenTSIA = new BigDecimal("1234.56");
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(null, expectedOpenTSIA, 0.0, null, null);
    BigDecimal result = marketSummaryDataBean.getOpenTSIA();
    assertEquals(expectedOpenTSIA, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentWithPositiveChange_sjWU0_fid1() {
    BigDecimal tsia = new BigDecimal("15000");
    BigDecimal openTsia = new BigDecimal("14000");
    double volume = 1000000;
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(tsia, openTsia, volume, topGainers, topLosers);
    BigDecimal expectedGainPercent = new BigDecimal("7.14"); // Calculated manually or expected from business logic
    BigDecimal resultGainPercent = marketSummary.getGainPercent();
    assertEquals(expectedGainPercent, resultGainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentWithNoChange_kCHK1_fid1() {
    BigDecimal tsia = new BigDecimal("15000");
    BigDecimal openTsia = new BigDecimal("15000");
    double volume = 1000000;
    Collection<QuoteDataBean> topGainers = new ArrayList<>();
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(tsia, openTsia, volume, topGainers, topLosers);
    BigDecimal expectedGainPercent = BigDecimal.ZERO;
    BigDecimal resultGainPercent = marketSummary.getGainPercent();
    assertEquals(expectedGainPercent, resultGainPercent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_wmNU0_fid1() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean();
    marketSummary.print();
    assertTrue(true);
  }
}