/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class Aster_TradeConfigServlet_Coverage_Test_Passing {
  private ServletConfig servletConfig;
  private TradeConfigServlet tradeConfigServlet;
  private TradeConfigServlet servlet;
  private HttpServletRequest req;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRunStatsDataBeanInstantiation_rkzC1() throws java.lang.Exception {
    RunStatsDataBean runStatsData = new RunStatsDataBean();
    assertNotNull(runStatsData);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTradeConfigInstantiation_vlJv2() throws java.lang.Exception {
    TradeConfig currentConfig = new TradeConfig();
    assertNotNull(currentConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_10() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertTrue(TradeConfig.getDisplayOrderAlerts());
  }
}