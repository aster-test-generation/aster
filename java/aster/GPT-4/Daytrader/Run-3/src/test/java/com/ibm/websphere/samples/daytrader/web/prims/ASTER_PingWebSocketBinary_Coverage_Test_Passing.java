/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.websocket.CloseReason;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingWebSocketBinary_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnClose_whenSessionIsOpen_kXLR0() throws IOException {
    Session mockSession = mock(Session.class);
    CloseReason mockReason = mock(CloseReason.class);
    when(mockSession.isOpen()).thenReturn(true);
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    pingWebSocketBinary.onClose(mockSession, mockReason);
    verify(mockSession, times(1)).close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnClose_whenSessionIsAlreadyClosed_KUPt1() throws IOException {
    Session mockSession = mock(Session.class);
    CloseReason mockReason = mock(CloseReason.class);
    when(mockSession.isOpen()).thenReturn(false);
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    pingWebSocketBinary.onClose(mockSession, mockReason);
    verify(mockSession, never()).close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnClose_whenSessionCloseThrowsIOException_UUcX2() throws IOException {
    Session mockSession = mock(Session.class);
    CloseReason mockReason = mock(CloseReason.class);
    when(mockSession.isOpen()).thenReturn(true);
    doThrow(new IOException()).when(mockSession).close();
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    pingWebSocketBinary.onClose(mockSession, mockReason);
    verify(mockSession, times(1)).close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnClose_whenSessionIsNull_otUW3() {
    Session mockSession = null;
    CloseReason mockReason = mock(CloseReason.class);
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    try {
      pingWebSocketBinary.onClose(mockSession, mockReason);
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnClose_whenReasonIsNull_uBDL4() throws IOException {
    Session mockSession = mock(Session.class);
    CloseReason mockReason = null;
    when(mockSession.isOpen()).thenReturn(true);
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    pingWebSocketBinary.onClose(mockSession, mockReason);
    verify(mockSession, times(1)).close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnClose_whenBothSessionAndReasonAreNull_EKel5() {
    Session mockSession = null;
    CloseReason mockReason = null;
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    try {
      pingWebSocketBinary.onClose(mockSession, mockReason);
    } catch (NullPointerException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithNullException_Ickv0() {
    Throwable mockThrowable = mock(Throwable.class);
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    pingWebSocketBinary.onError(mockThrowable);
    verify(mockThrowable).printStackTrace();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnErrorWithActualException_KMOI1() {
    Throwable realThrowable = new RuntimeException("Test exception");
    PingWebSocketBinary pingWebSocketBinary = new PingWebSocketBinary();
    pingWebSocketBinary.onError(realThrowable);
  }
}