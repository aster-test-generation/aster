/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServlet31Async_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitCompletesWithoutException_fzek3() throws javax.servlet.ServletException {
    ServletConfig mockConfig = mock(ServletConfig.class);
    PingServlet31Async servlet = new PingServlet31Async();
    assertDoesNotThrow(() -> servlet.init(mockConfig));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetContentType_SBlS0() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServlet31Async servlet = new PingServlet31Async();
    servlet.doPost(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testStartAsync_NtRC1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    AsyncContext asyncContext = mock(AsyncContext.class);
    when(req.startAsync()).thenReturn(asyncContext);
    PingServlet31Async servlet = new PingServlet31Async();
    servlet.doPost(req, res);
    verify(req).startAsync();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetInputStream_Nfaw2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletInputStream inputStream = mock(ServletInputStream.class);
    when(req.getInputStream()).thenReturn(inputStream);
    PingServlet31Async servlet = new PingServlet31Async();
    servlet.doPost(req, res);
    verify(req).getInputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testReadListenerImplCreation_oGJv3() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletInputStream inputStream = mock(ServletInputStream.class);
    AsyncContext asyncContext = mock(AsyncContext.class);
    when(req.getInputStream()).thenReturn(inputStream);
    when(req.startAsync()).thenReturn(asyncContext);
    PingServlet31Async servlet = new PingServlet31Async();
    servlet.doPost(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetReadListener_HYUC4() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletInputStream inputStream = mock(ServletInputStream.class);
    AsyncContext asyncContext = mock(AsyncContext.class);
    ReadListener readListener = mock(ReadListener.class);
    when(req.getInputStream()).thenReturn(inputStream);
    when(req.startAsync()).thenReturn(asyncContext);
    PingServlet31Async servlet = new PingServlet31Async();
    servlet.doPost(req, res);
    verify(inputStream).setReadListener(any(ReadListener.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_evLL0() {
    PingServlet31Async servlet = new PingServlet31Async();
    String expected = "Basic dynamic HTML generation through a servlet";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetCallsDoPost_HeoD0() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doGet(request, response);
    verify(servlet).doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetHandlesIOException_IXjH1() throws ServletException, IOException {
    PingServlet31Async servlet = new PingServlet31Async();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    doThrow(new IOException()).when(servlet).doPost(request, response);
    servlet.doGet(request, response);
    verify(servlet).doPost(request, response);
  }
}