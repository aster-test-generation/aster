/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_vRWQ0() {
    BigDecimal expectedFee = new BigDecimal("100.00");
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), expectedFee, "TypeA", 50.0, "XYZ");
    BigDecimal actualFee = order.getOrderFee();
    assertEquals(expectedFee, actualFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_UhUW0() {
    OrderData orderData = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("100.00"), "TypeA", 50.0, "XYZ");
    assertEquals(50.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType_CjDq0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("100.00"), "Buy", 50.0, "AAPL");
    order.setOrderType("Sell");
    assertEquals("Sell", order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_Gutq0() {
    Integer orderID = 1;
    String orderStatus = "Open";
    Date openDate = new Date();
    Date completeDate = new Date();
    BigDecimal orderFee = new BigDecimal("10.00");
    String orderType = "Market";
    double quantity = 100.0;
    String symbol = "AAPL";
    BigDecimal initialPrice = new BigDecimal("150.00");
    OrderData orderData = new OrderData(orderID, orderStatus, openDate, completeDate, orderFee, orderType, quantity, symbol, initialPrice);
    BigDecimal newPrice = new BigDecimal("155.00");
    orderData.setPrice(newPrice);
    assertEquals(newPrice, orderData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatus_CIbh0() {
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("10.00"), "TypeA", 100.0, "XYZ");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_HKwW0() {
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("10.50"), "Buy", 100.0, "AAPL");
    String expected = "AAPL";
    assertEquals(expected, order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_GIBh0() {
    Integer expectedOrderID = 123;
    OrderData orderData = new OrderData(expectedOrderID, "Completed", new Date(), new Date(), new BigDecimal("10.50"), "TypeA", 100.0, "XYZ");
    Integer actualOrderID = orderData.getOrderID();
    assertEquals(expectedOrderID, actualOrderID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee_KSRb0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "TypeA", 100.0, "XYZ");
    BigDecimal newFee = new BigDecimal("15.00");
    order.setOrderFee(newFee);
    assertEquals(newFee, order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate_WPkp0() {
    Date expectedDate = new Date();
    OrderData orderData = new OrderData(1, "Active", expectedDate, null, new BigDecimal("10.00"), "TypeA", 100.0, "XYZ");
    Date actualDate = orderData.getOpenDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDate_BuAI0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "Buy", 100.0, "AAPL");
    Date newOpenDate = new Date();
    order.setOpenDate(newOpenDate);
    assertEquals(newOpenDate, order.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDate_XciP0() {
    Date expectedDate = new Date();
    OrderData orderData = new OrderData(1, "Completed", new Date(), expectedDate, new BigDecimal("10.00"), "TypeA", 100.0, "AAPL");
    Date actualDate = orderData.getCompletionDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_rsNg0() {
    BigDecimal expectedPrice = new BigDecimal("150.00");
    OrderData orderData = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("10.00"), "Sell", 100.0, "AAPL", expectedPrice);
    BigDecimal actualPrice = orderData.getPrice();
    assertEquals(expectedPrice, actualPrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_gdzT0() {
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("10.00"), "Market", 100.0, "AAPL");
    String expected = "Market";
    assertEquals(expected, order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderID_JYyc0() {
    OrderData order = new OrderData(123, "Pending", new Date(), null, new BigDecimal("10.00"), "TypeA", 100.0, "XYZ");
    order.setOrderID(456);
    assertEquals(Integer.valueOf(456), order.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_eiio0() {
    Integer orderID = 1;
    String orderStatus = "Open";
    Date openDate = new Date();
    Date completeDate = new Date();
    BigDecimal orderFee = new BigDecimal("10.00");
    String orderType = "Market";
    double initialQuantity = 5.0;
    String symbol = "AAPL";
    BigDecimal price = new BigDecimal("150.00");
    OrderData orderData = new OrderData(orderID, orderStatus, openDate, completeDate, orderFee, orderType, initialQuantity, symbol, price);
    double newQuantity = 10.0;
    orderData.setQuantity(newQuantity);
    assertEquals(newQuantity, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotal_hSvG0() {
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("10.00"), "Buy", 100.0, "AAPL");
    BigDecimal expectedTotal = new BigDecimal("100.00");
    order.setTotal(expectedTotal);
    assertEquals(expectedTotal, order.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus_utAq0_rVdY0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "TypeA", 100.0, "XYZ", new BigDecimal("50.00"));
    order.setOrderStatus("Completed");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_jkEz0_rRaa0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "Buy", 100.0, "AAPL");
    order.setSymbol("GOOGL");
    assertEquals("GOOGL", order.getSymbol());
  }
}