/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_QuoteJSF_Test_Passing {
  @Mock
  private TradeServices tradeAction;
  @Mock
  private ExternalContext context;
  @Mock
  private HtmlDataTable dataTable;
  @Mock
  private HttpSession session;
  @InjectMocks
  private QuoteJSF quoteJSF;
  @Mock
  private Instance<TradeServices> servicesInstance;
  @Mock
  private TradeServices tradeServices;
  @Mock
  private ExternalContext externalContext;
  @Mock
  private HttpSession httpSession;
  private Integer quantity = 100;
  private String symbols = null;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_eLXt0() {
    QuoteJSF quote = new QuoteJSF(null); // Assuming null can be passed for Instance<TradeServices>
    Integer expected = 0; // Assuming default quantity is 0
    assertEquals(expected, quote.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDataTable_VRai0() {
    QuoteJSF quoteJSF = new QuoteJSF(null); // Assuming TradeServices can be null or mocked if required
    HtmlDataTable result = quoteJSF.getDataTable();
    assertNotNull(result, "dataTable should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDataTable_nPJH0() {
    QuoteJSF quoteJSF = new QuoteJSF(null); // Assuming null is acceptable for the constructor
    HtmlDataTable dataTable = new HtmlDataTable();
    quoteJSF.setDataTable(dataTable);
    assertEquals(dataTable, quoteJSF.getDataTable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbols_Ckcu0() {
    QuoteJSF quoteJSF = new QuoteJSF(null); // Assuming null is acceptable for Instance<TradeServices>
    String result = quoteJSF.getSymbols();
    assertNotNull("Symbols should not be null", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_tBTc0() {
    Instance<TradeServices> mockServices = Mockito.mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(mockServices);
    QuoteJSF spyQuoteJSF = Mockito.spy(quoteJSF);
    spyQuoteJSF.getAllQuotes();
    Mockito.verify(spyQuoteJSF).getQuotesBySymbols();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuotesBySymbols_WithNullSymbolsAndSessionAttribute() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("symbols")).thenReturn(null);
    String result = quoteJSF.getQuotesBySymbols();
    verify(httpSession).setAttribute(eq("symbols"), anyString());
    assertEquals("quotes", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuotesBySymbols_WithNullSymbolsAndNonNullSessionAttribute() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("symbols")).thenReturn("s:0,s:1");
    String result = quoteJSF.getQuotesBySymbols();
    verify(httpSession, never()).setAttribute(eq("symbols"), anyString());
    assertEquals("quotes", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuotesBySymbols_WithNonNullSymbols() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    quoteJSF.setSymbols("s:0,s:1");
    String result = quoteJSF.getQuotesBySymbols();
    verify(httpSession).setAttribute("symbols", "s:0,s:1");
    assertEquals("quotes", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbols_liUx0_iNed0() {
    QuoteJSF quoteJSF = new QuoteJSF(null); // Assuming null can be passed for Instance<TradeServices>
    String testSymbols = "AAPL,GOOGL,MSFT";
    quoteJSF.setSymbols(testSymbols);
    assertEquals("AAPL,GOOGL,MSFT", quoteJSF.getSymbols());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuotesReturnsNotNull_fRbJ0_GmMK0() {
    Instance<TradeServices> servicesInstance = mock(Instance.class);
    QuoteJSF quoteJSF = new QuoteJSF(servicesInstance);
    assertNotNull(quoteJSF.getQuotes(), "Quotes should not be null");
  }
}