/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_KeySequenceDirect_Test_Passing {
  private static HashMap<String, Collection<?>> keyMap = new HashMap<>();
  Connection connection;
  PreparedStatement preparedStatement;
  ResultSet resultSet;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextID_1() throws Exception {
    connection = mock(Connection.class);
    preparedStatement = mock(PreparedStatement.class);
    resultSet = mock(ResultSet.class);
    // Mocking the static map from KeySequenceDirect
    keyMap.clear();
    // Setup
    String keyName = "testKey";
    boolean inSession = false;
    boolean inGlobalTxn = false;
    ArrayList<Integer> idBlock = new ArrayList<>();
    idBlock.add(1);
    keyMap.put(keyName, idBlock);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(resultSet.next()).thenReturn(true);
    when(resultSet.getInt(1)).thenReturn(1);
    // Action
    Integer nextID = KeySequenceDirect.getNextID(connection, keyName, inSession, inGlobalTxn);
    // Assertion
    // Verify interactions
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    assertNotNull(nextID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextID_ExistingKey_wKEN1() throws Exception {
    Connection conn = mock(Connection.class);
    PreparedStatement stmt = mock(PreparedStatement.class);
    ResultSet rs = mock(ResultSet.class);
    when(conn.prepareStatement(anyString())).thenReturn(stmt);
    when(stmt.executeQuery()).thenReturn(rs);
    when(rs.next()).thenReturn(true);
    when(rs.getInt("keyval")).thenReturn(10);
    when(stmt.executeUpdate()).thenReturn(1);
    Integer result = KeySequenceDirect.getNextID(conn, "existingKey", true, true);
    assertNotNull(result);
    assertEquals(Integer.valueOf(10), result);
  }
}