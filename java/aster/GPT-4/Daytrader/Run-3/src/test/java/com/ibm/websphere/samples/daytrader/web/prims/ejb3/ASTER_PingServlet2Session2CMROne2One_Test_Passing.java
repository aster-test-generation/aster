/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2CMROne2One_Test_Passing {
  @Mock
  private ServletConfig mockServletConfig;
  @InjectMocks
  private PingServlet2Session2CMROne2One pingServlet;
  HttpServletRequest request;
  HttpServletResponse response;
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    pingServlet = new PingServlet2Session2CMROne2One();
    request = mock(HttpServletRequest.class);
    response = mock(HttpServletResponse.class);
    // Call the method under test
    pingServlet.doPost(request, response);
    // Verify that doGet is called with the same request and response objects
    verify(request, times(1)).setAttribute(anyString(), any());
    verify(response, never()).sendError(anyInt());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_ZsRC0() throws ServletException, IOException {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
    verify(response).setStatus(HttpServletResponse.SC_OK);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_sxzk0() {
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    assertEquals("web primitive, tests Servlet to Entity EJB path", servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetException_SNNR1() throws Exception {
    HttpServletRequest mockReq = mock(HttpServletRequest.class);
    HttpServletResponse mockRes = mock(HttpServletResponse.class);
    when(mockRes.getWriter()).thenThrow(new IOException());
    PingServlet2Session2CMROne2One servlet = new PingServlet2Session2CMROne2One();
    try {
      servlet.doGet(mockReq, mockRes);
    } catch (Exception e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_GLhW0_1() throws ServletException {
    pingServlet.init(mockServletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_GLhW0_2() throws ServletException {
    pingServlet.init(mockServletConfig);
    assertEquals(0, hitCount);
  }
}