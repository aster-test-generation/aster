/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Passing {
  @Mock
  private EntityManager entityManager;
  @InjectMocks
  private TradeSLSBBean tradeslsbbean;
  private AccountDataBean account;
  private QuoteDataBean quote;
  private HoldingDataBean holding;
  @Mock
  private AccountProfileDataBean profile;
  @Mock
  private OrderDataBean order;
  @InjectMocks
  private TradeSLSBBean tradeSLSBBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWhenPublishingIsDisabled_duIq3() {
    TradeConfig.setPublishQuotePriceChange(false);
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("TSLA", "Tesla Inc.", 120000, new BigDecimal("700.00"), new BigDecimal("690.00"), new BigDecimal("688.00"), new BigDecimal("710.00"), 10.00);
    BigDecimal oldPrice = new BigDecimal("680.00");
    BigDecimal changeFactor = new BigDecimal("1.03");
    double sharesTraded = 8000;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertEquals(new BigDecimal("700.00"), quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_RdaT0_2() {
    TradeSLSBBean tradeSLSBBean = Mockito.mock(TradeSLSBBean.class);
    String userID = "validUserID";
    Collection<HoldingDataBean> mockResult = new ArrayList<>();
    mockResult.add(new HoldingDataBean());
    Mockito.when(tradeSLSBBean.getHoldings(userID)).thenReturn(mockResult);
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithNullOrder_IRUK0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Integer orderID = null; // Assuming null simulates not finding the order
    try {
      tradeBean.completeOrder(orderID, true);
      fail("Should have thrown an exception for null order");
    } catch (Exception e) {
      assertFalse(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAlreadyCompleted_tgGt1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderStatus("closed");
    when(entityManager.find(OrderDataBean.class, 1)).thenReturn(order);
    try {
      tradeBean.completeOrder(1, true);
      fail("Should have thrown an exception for already completed order");
    } catch (Exception e) {
      assertFalse(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithNullOrderIDAndTwoPhaseFalse_gSyh1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = null;
    boolean twoPhase = false;
    try {
      tradeSLSBBean.queueOrder(orderID, twoPhase);
      fail("Expected an exception to be thrown when orderID is null");
    } catch (Exception e) {
      assertNotNull(e);
      System.out.println("Caught expected exception with null orderID");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithExceptionHandling_kmiX2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String invalidSymbol = ""; // Assuming empty string is invalid
    try {
      QuoteDataBean result = tradeSLSBBean.pingTwoPhase(invalidSymbol);
      assertNull(result);
    } catch (Exception e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_uFQn0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    int result = tradeSLSBBean.getImpl();
    assertEquals(TradeConfig.EJB3, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithInvalidUser_eXNg3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "invalidUser";
    String symbol = "TSLA";
    double quantity = 200.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    Exception exception = assertThrows(EJBException.class, () -> {
      tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    });
    assertNotNull(exception);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellExceptionHandling_WGyM4() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "invalidUser";
    Integer holdingID = null; // Invalid holding ID
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      tradeBean.sell(userID, holdingID, orderProcessingMode);
      fail("Expected an EJBException to be thrown");
    } catch (EJBException e) {
      assertNotNull(e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNullUser_Cjff2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = null;
    try {
      Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
      fail("Expected an exception to be thrown");
    } catch (Exception e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeWithNoPriceChangeConfig_WUwU3_2() {
    TradeConfig.setUpdateQuotePrices(false);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = QuoteDataBean.getRandomInstance();
    BigDecimal changeFactor = new BigDecimal("1.03");
    double sharesTraded = 500.0;
    QuoteDataBean updatedQuote = tradeBean.updateQuotePriceVolume(quote.getSymbol(), changeFactor, sharesTraded);
    assertEquals(0.0, updatedQuote.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithInvalidUser_eXNg3_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "invalidUser";
    String symbol = "TSLA";
    double quantity = 200.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    Exception exception = assertThrows(EJBException.class, () -> {
      tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_positiveScenario_jPnu0_zEBe0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    double investment = 1000.0;
    double netValue = 1200.0;
    double expectedReturn = 0.2;
    try {
      double actualReturn = tradeSLSBBean.investmentReturn(investment, netValue);
      assertEquals(expectedReturn, actualReturn, 0.0001);
    } catch (Exception e) {
      fail("Unexpected exception: " + e.getMessage());
    }
  }
}