/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeScenarioServlet_Coverage_Test_Failing {
  private TradeScenarioServlet tradeScenarioServlet;
  private ServletConfig mockConfig;
  private TradeScenarioServlet servlet;
  private HttpServletRequest req;
  private HttpServletResponse resp;
  private ServletContext ctx;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_CallsSuperInit_ALBI1() throws ServletException {
    tradeScenarioServlet.init(mockConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_HandlesEmptyInitParameters_kvJc2() throws ServletException {
    when(mockConfig.getInitParameterNames()).thenReturn(java.util.Collections.enumeration(java.util.Collections.emptyList()));
    tradeScenarioServlet.init(mockConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_EnumeratesInitParameters_tflW3() throws ServletException {
    java.util.Enumeration<String> enumeration = java.util.Collections.enumeration(java.util.Arrays.asList("param1", "param2"));
    when(mockConfig.getInitParameterNames()).thenReturn(enumeration);
    when(mockConfig.getInitParameter("param1")).thenReturn("value1");
    when(mockConfig.getInitParameter("param2")).thenReturn("value2");
    tradeScenarioServlet.init(mockConfig);
    verify(mockConfig, times(1)).getInitParameter("param1");
    verify(mockConfig, times(1)).getInitParameter("param2");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitialVariables_Pniu1() throws Exception {
    servlet.performTask(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_SqSg0() {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    String result = servlet.getServletInfo();
    assertEquals("TradeScenarioServlet emulates a population of web users", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_Prre0() {
    servlet = new TradeScenarioServlet();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_SqSg0_RQts1() {
    String result = servlet.getServletInfo();
    assertEquals("TradeScenarioServlet emulates a population of web users", result);
  }
}