/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullOrderID_LoEV0() {
    OrderDataBean order = new OrderDataBean(); // No orderID set, should be null
    int result = order.hashCode();
    assertEquals(0, result); // hash should be 0 when orderID is null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNonNullOrderID_JpkI1() {
    Integer orderID = 12345;
    OrderDataBean order = new OrderDataBean(orderID, "BUY", "OPEN", new Date(), null, 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(1.0), "AAPL");
    int result = order.hashCode();
    assertEquals(orderID.hashCode(), result); // hash should equal the hashCode of orderID
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithDifferentOrderIDs_XvuE2() {
    OrderDataBean order1 = new OrderDataBean(1, "SELL", "CLOSED", new Date(), new Date(), 5.0, BigDecimal.valueOf(50.0), BigDecimal.valueOf(0.5), "GOOG");
    OrderDataBean order2 = new OrderDataBean(2, "BUY", "OPEN", new Date(), null, 10.0, BigDecimal.valueOf(100.0), BigDecimal.valueOf(1.0), "AAPL");
    int hash1 = order1.hashCode();
    int hash2 = order2.hashCode();
    assertEquals(false, hash1 == hash2); // Different orderIDs should produce different hashCodes
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentObjectType_mcAu0() {
    OrderDataBean order = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 10, BigDecimal.valueOf(100), BigDecimal.valueOf(1), "AAPL");
    String nonOrderObject = "Not an OrderDataBean";
    assertFalse(order.equals(nonOrderObject)); // Line 1 and 2
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullOrderID_qXhn1() {
    OrderDataBean order1 = new OrderDataBean(null, "BUY", "OPEN", new Date(), null, 10, BigDecimal.valueOf(100), BigDecimal.valueOf(1), "AAPL");
    OrderDataBean order2 = new OrderDataBean(null, "SELL", "CLOSED", new Date(), null, 5, BigDecimal.valueOf(50), BigDecimal.valueOf(0.5), "GOOG");
    assertTrue(order1.equals(order2)); // Line 3 (both orderIDs are null)
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentOrderIDs_SNOj2() {
    OrderDataBean order1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 10, BigDecimal.valueOf(100), BigDecimal.valueOf(1), "AAPL");
    OrderDataBean order2 = new OrderDataBean(2, "SELL", "CLOSED", new Date(), null, 5, BigDecimal.valueOf(50), BigDecimal.valueOf(0.5), "GOOG");
    assertFalse(order1.equals(order2)); // Line 3 (different orderIDs)
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameOrderID_IRRx3() {
    OrderDataBean order1 = new OrderDataBean(1, "BUY", "OPEN", new Date(), null, 10, BigDecimal.valueOf(100), BigDecimal.valueOf(1), "AAPL");
    OrderDataBean order2 = new OrderDataBean(1, "SELL", "CLOSED", new Date(), null, 5, BigDecimal.valueOf(50), BigDecimal.valueOf(0.5), "GOOG");
    assertTrue(order1.equals(order2)); // Line 3 (same orderID)
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_WithQuote_XzfG0() {
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    OrderDataBean order = new OrderDataBean("Buy", "Open", new Date(), null, 10, BigDecimal.valueOf(150.00), BigDecimal.valueOf(1.00), null, quote, null);
    String result = order.getSymbol();
    assertEquals("AAPL", result); // This covers line 2: return quote.getSymbol();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_WithoutQuote_HRvU1() {
    OrderDataBean order = new OrderDataBean("Buy", "Open", new Date(), null, 10, BigDecimal.valueOf(150.00), BigDecimal.valueOf(1.00), null, null, null);
    String expectedSymbol = "DEFAULT_SYMBOL"; // Assuming a default symbol for testing
    order.setSymbol(expectedSymbol); // Assuming a setter method exists for symbol
    String result = order.getSymbol();
    assertEquals(expectedSymbol, result); // This covers line 3: return symbol;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_QuoteIsNull_yXKD2() {
    OrderDataBean order = new OrderDataBean("Buy", "Open", new Date(), null, 10, BigDecimal.valueOf(150.00), BigDecimal.valueOf(1.00), null, null, null);
    String expectedSymbol = "TEST_SYMBOL"; // Assuming a default symbol for testing
    order.setSymbol(expectedSymbol); // Assuming a setter method exists for symbol
    String result = order.getSymbol();
    assertEquals(expectedSymbol, result); // This covers line 3: return symbol;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_CoversOrderIDAndOrderType_arRw0() {
    Integer orderID = 1;
    String orderType = "BUY";
    String orderStatus = "OPEN";
    Date openDate = new Date();
    Date completionDate = null;
    double quantity = 10.0;
    BigDecimal price = BigDecimal.valueOf(100.50);
    BigDecimal orderFee = BigDecimal.valueOf(1.50);
    String symbol = "AAPL";
    OrderDataBean order = new OrderDataBean(orderID, orderType, orderStatus, openDate, completionDate, quantity, price, orderFee, symbol);
    String result = order.toString();
    String expectedOutput = "Order " + orderID + "\n\t      orderType: " + orderType;
    assertEquals(expectedOutput, result.substring(0, expectedOutput.length()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellWithSellOrderType_OSgG0() {
    OrderDataBean order = new OrderDataBean(null, "sell", null, new Date(), null, 0, BigDecimal.ZERO, BigDecimal.ZERO, "AAPL");
    boolean result = order.isSell();
    assertTrue(result); // Should return true for "sell"
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellWithSellOrderTypeUpperCase_LSWY1() {
    OrderDataBean order = new OrderDataBean(null, "SELL", null, new Date(), null, 0, BigDecimal.ZERO, BigDecimal.ZERO, "AAPL");
    boolean result = order.isSell();
    assertTrue(result); // Should return true for "SELL"
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellWithBuyOrderType_BZNv2() {
    OrderDataBean order = new OrderDataBean(null, "buy", null, new Date(), null, 0, BigDecimal.ZERO, BigDecimal.ZERO, "AAPL");
    boolean result = order.isSell();
    assertFalse(result); // Should return false for "buy"
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsSellWithDifferentOrderType_sILt3() {
    OrderDataBean order = new OrderDataBean(null, "hold", null, new Date(), null, 0, BigDecimal.ZERO, BigDecimal.ZERO, "AAPL");
    boolean result = order.isSell();
    assertFalse(result); // Should return false for "hold"
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompletedWithCompletedStatus_WNRM0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "completed", new Date(), new Date(), 10, BigDecimal.valueOf(100), BigDecimal.valueOf(1), "AAPL");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompletedWithAlertCompletedStatus_UcwW1() {
    OrderDataBean order = new OrderDataBean(2, "sell", "alertcompleted", new Date(), new Date(), 5, BigDecimal.valueOf(200), BigDecimal.valueOf(2), "GOOG");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompletedWithCancelledStatus_uMuV2() {
    OrderDataBean order = new OrderDataBean(3, "buy", "cancelled", new Date(), new Date(), 15, BigDecimal.valueOf(150), BigDecimal.valueOf(1.5), "MSFT");
    assertTrue(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompletedWithPendingStatus_WxGs3() {
    OrderDataBean order = new OrderDataBean(4, "sell", "pending", new Date(), new Date(), 20, BigDecimal.valueOf(250), BigDecimal.valueOf(2.5), "AMZN");
    assertFalse(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCompletedWithUnknownStatus_hmXl4() {
    OrderDataBean order = new OrderDataBean(5, "buy", "unknown", new Date(), new Date(), 25, BigDecimal.valueOf(300), BigDecimal.valueOf(3), "TSLA");
    assertFalse(order.isCompleted());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_WithOrderTypeBuy_ReturnsTrue_xVTD0() {
    OrderDataBean order = new OrderDataBean(null, "buy", null, new Date(), null, 0, BigDecimal.ZERO, BigDecimal.ZERO, "AAPL");
    boolean result = order.isBuy();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_WithOrderTypeSell_ReturnsFalse_adot1() {
    OrderDataBean order = new OrderDataBean(null, "sell", null, new Date(), null, 0, BigDecimal.ZERO, BigDecimal.ZERO, "AAPL");
    boolean result = order.isBuy();
    assertFalse(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsBuy_WithOrderTypeBuyInDifferentCase_ReturnsTrue_tVkf2() {
    OrderDataBean order = new OrderDataBean(null, "BUY", null, new Date(), null, 0, BigDecimal.ZERO, BigDecimal.ZERO, "AAPL");
    boolean result = order.isBuy();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_WhenOrderStatusIsCancelled_GvsL0() {
    OrderDataBean order = new OrderDataBean(1, "buy", "cancelled", new Date(), null, 10, BigDecimal.valueOf(100), BigDecimal.valueOf(5), "AAPL");
    boolean result = order.isCancelled();
    assertTrue(result); // This will cover line 3: return true;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_WhenOrderStatusIsNotCancelled_DZQH1() {
    OrderDataBean order = new OrderDataBean(2, "sell", "completed", new Date(), null, 5, BigDecimal.valueOf(50), BigDecimal.valueOf(2), "GOOGL");
    boolean result = order.isCancelled();
    assertFalse(result); // This will cover line 4: return false;
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsCancelled_WhenOrderStatusIsCancelledCaseInsensitive_kSuh2() {
    OrderDataBean order = new OrderDataBean(3, "buy", "CANCELLED", new Date(), null, 20, BigDecimal.valueOf(200), BigDecimal.valueOf(10), "MSFT");
    boolean result = order.isCancelled();
    assertTrue(result); // This will cover line 3: return true;
  }
}