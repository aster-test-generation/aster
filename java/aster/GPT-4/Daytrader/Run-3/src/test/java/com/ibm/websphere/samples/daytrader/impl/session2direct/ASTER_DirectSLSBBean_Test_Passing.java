/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Passing {
  @InjectMocks
  DirectSLSBBean directSLSBBean;
  @Mock
  TradeDirect tradeDirect;
  AccountDataBean account;
  QuoteDataBean quote;
  HoldingDataBean holding;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturnThrowsException_KQPr0() {
    DirectSLSBBean bean = new DirectSLSBBean();
    assertThrows(UnsupportedOperationException.class, () -> bean.investmentReturn(0.5, 0.5));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_azaO0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "testUser";
    Collection<HoldingDataBean> result = directSLSBBean.getHoldings(userID);
    assertNotNull(result); // Changed assertion to check for non-null value
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_FwOQ0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    AccountDataBean expectedAccountDataBean = new AccountDataBean();
    TradeDirect tradeDirect = mock(TradeDirect.class);
    when(tradeDirect.login(userID, password)).thenReturn(expectedAccountDataBean);
    directSLSBBean.tradeDirect = tradeDirect;
    AccountDataBean result = directSLSBBean.login(userID, password);
    assertEquals(expectedAccountDataBean, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseThrowsException_OKHO0() {
    DirectSLSBBean bean = new DirectSLSBBean();
    String symbol = "AAPL";
    assertThrows(UnsupportedOperationException.class, () -> {
      bean.pingTwoPhase(symbol);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetImpl_deaP0() {
    DirectSLSBBean bean = new DirectSLSBBean();
    int expected = TradeConfig.SESSION_TO_DIRECT;
    assertEquals(expected, bean.getImpl());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsyncReturnsNull_xTSj0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    Future<OrderDataBean> result = null;
    try {
      result = bean.completeOrderAsync(orderID, twoPhase);
    } catch (NullPointerException e) {
      // Expected to catch NullPointerException since asyncEJBOrderSubmitter is null
    }
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_RomO0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    bean.tradeDirect = mock(TradeServices.class);
    when(bean.tradeDirect.getClosedOrders(anyString())).thenReturn(new ArrayList<>());
    String userID = "testUser";
    Collection<?> result = bean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  public void testSetInSessionThrowsException_uMri0_RpdF0() {
    DirectSLSBBean bean = new DirectSLSBBean();
    try {
      bean.setInSession(true);
      fail("Expected an UnsupportedOperationException to be thrown");
    } catch (UnsupportedOperationException e) {
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_UmCu0_1() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM123");
    holding = new HoldingDataBean(100, new BigDecimal("150.00"), new java.util.Date(), account, quote);
    String orderType = "BUY";
    double quantity = 50;
    OrderDataBean expectedOrder = new OrderDataBean();
    when(tradeDirect.createOrder(account, quote, holding, orderType, quantity)).thenReturn(expectedOrder);
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    verify(tradeDirect).setInSession(true);
    verify(tradeDirect).createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_UmCu0_2() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean("SYM123");
    holding = new HoldingDataBean(100, new BigDecimal("150.00"), new java.util.Date(), account, quote);
    String orderType = "BUY";
    double quantity = 50;
    OrderDataBean expectedOrder = new OrderDataBean();
    when(tradeDirect.createOrder(account, quote, holding, orderType, quantity)).thenReturn(expectedOrder);
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    verify(tradeDirect).setInSession(true);
    verify(tradeDirect).createOrder(account, quote, holding, orderType, quantity);
    assertEquals(expectedOrder, result);
  }
}