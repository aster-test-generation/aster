/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedExecutorService;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeDirect_Test_Failing {
  private static final String getTSIASQL = "select SUM(price)/count(*) as TSIA from quoteejb q ";
  private static final String getTSIAQuotesOrderByChangeSQL = "select * from quoteejb q order by q.change1";
  private static final String logoutSQL = "update accountejb set logoutcount=logoutcount+1 " + "where profile_userid=?";
  private static final String loginSQL = "update accountejb set lastLogin=?, logincount=logincount+1 " + "where profile_userid=?";
  private static final String getOpenTSIASQL = "select SUM(open1)/count(*) as openTSIA from quoteejb q ";
  private static BigDecimal ZERO = new BigDecimal(0.0);
  private static final String getQuoteSQL = "select * from quoteejb q where q.symbol=?";
  private static final String getTSIATotalVolumeSQL = "select SUM(volume) as totalVolume from quoteejb q ";
  @Mock
  private Connection connection;
  @Mock
  private Statement statement;
  @InjectMocks
  private TradeDirect tradeDirect;
  @Mock
  private PreparedStatement preparedStatement;
  @Mock
  private ResultSet resultSet;
  @Mock
  private DataSource dataSource;
  @Mock
  private UserTransaction txn;
  @Mock
  private ManagedExecutorService mes;
  private static long nextMarketSummary = System.currentTimeMillis();
  private static final Integer marketSummaryLock = new Integer(0);
  private static MarketSummaryDataBean cachedMSDB = MarketSummaryDataBean.getRandomInstance();
  private static final String getAllQuotesSQL = "select * from quoteejb q";
  private boolean inSession = false;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_IntervalZero_1() throws Exception {
    tradeDirect = new TradeDirect();
    // Setup
    TradeConfig.setMarketSummaryInterval(0);
    MarketSummaryDataBean expectedMSDB = new MarketSummaryDataBean();
    when(MarketSummaryDataBean.getRandomInstance()).thenReturn(expectedMSDB);
    // Execution
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    // Verification
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_IntervalZero_2() throws Exception {
    tradeDirect = new TradeDirect();
    // Setup
    TradeConfig.setMarketSummaryInterval(0);
    MarketSummaryDataBean expectedMSDB = new MarketSummaryDataBean();
    when(MarketSummaryDataBean.getRandomInstance()).thenReturn(expectedMSDB);
    // Execution
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    // Verification
    assertEquals(expectedMSDB, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_IntervalNegative_2() throws Exception {
    tradeDirect = new TradeDirect();
    // Setup
    TradeConfig.setMarketSummaryInterval(-1);
    MarketSummaryDataBean expectedMSDB = MarketSummaryDataBean.getRandomInstance();
    // Execution
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    // Verification
    assertEquals(expectedMSDB, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithTwoPhaseFalse_ZABz1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 456; // Example order ID
    boolean twoPhase = false;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNull(result); // Assuming the method should return null due to the error in getting the connection
    } catch (Exception e) {
      fail("Exception thrown during test execution: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderID_HJLu0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming 1 is a valid order ID
    boolean twoPhase = true; // Test with two-phase commit enabled
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus()); // Assuming the order will be closed after completion
    } catch (Exception e) {
      fail("Exception should not be thrown for a valid order ID: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderIDAndTwoPhaseTrue_zVxg0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming 1 is a valid order ID for testing
    boolean twoPhase = true;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus().toLowerCase());
    } catch (Exception e) {
      fail("Exception should not be thrown for valid inputs");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderIDAndTwoPhaseFalse_pfOS2() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2; // Assuming 2 is a valid order ID but the order is already completed
    boolean twoPhase = false;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertTrue(result.getOrderStatus().equalsIgnoreCase("completed") ||
                  result.getOrderStatus().equalsIgnoreCase("alertcompleted") ||
                  result.getOrderStatus().equalsIgnoreCase("cancelled"));
    } catch (Exception e) {
      assertNull(e, "Exception should not be thrown for already completed orders");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderIDAndTwoPhaseTrue_thPL0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming 1 is a valid order ID for testing
    boolean twoPhase = true;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderIDAndTwoPhaseFalse_BkAk2() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2; // Assuming 2 is a valid order ID for testing
    boolean twoPhase = false;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Unexpected exception: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderBuy_Vrrv0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming an existing order ID for a buy order
    boolean twoPhase = true; // Using two-phase commit
    OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderBuy_Vrrv0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming an existing order ID for a buy order
    boolean twoPhase = true; // Using two-phase commit
    OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
    assertEquals("closed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSell_PUyq1_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2; // Assuming an existing order ID for a sell order
    boolean twoPhase = false; // Not using two-phase commit
    OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSell_PUyq1_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2; // Assuming an existing order ID for a sell order
    boolean twoPhase = false; // Not using two-phase commit
    OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
    assertEquals("closed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithZeroInterval_pRWk0() throws Exception {
    TradeConfig.setMarketSummaryInterval(0);
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithSynchronization_Jypj4() throws Exception {
    TradeConfig.setMarketSummaryInterval(2); // 2 seconds
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean initialResult = tradeDirect.getMarketSummary();
    Thread.sleep(3000); // sleep for 3 seconds, enough for update
    synchronized (tradeDirect) {
      MarketSummaryDataBean result = tradeDirect.getMarketSummary();
      assertNotSame(initialResult, result);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithImmediateSequentialCalls_QyYm5() throws Exception {
    TradeConfig.setMarketSummaryInterval(3); // 3 seconds
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result1 = tradeDirect.getMarketSummary();
    MarketSummaryDataBean result2 = tradeDirect.getMarketSummary();
    assertSame(result1, result2);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryWithLongInterval_jaUi6() throws Exception {
    TradeConfig.setMarketSummaryInterval(3600); // 1 hour
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInvestmentReturn_kruJ0() {
    TradeDirect tradeDirect = new TradeDirect();
    double rnd1 = 0.5;
    double rnd2 = 0.3;
    double result = tradeDirect.investmentReturn(rnd1, rnd2);
    assertEquals(0.15, result, 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesReturnsNonEmptyCollection_NJgY0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> result = tradeDirect.getAllQuotes();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesReturnsNonEmptyCollection_NJgY0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> result = tradeDirect.getAllQuotes();
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithTwoPhaseTrue_oYNR0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception thrown during test execution: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithTwoPhaseFalse_ZABz1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 456; // Example order ID
    boolean twoPhase = false;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception thrown during test execution: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithInvalidOrderID_etuD2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = null; // Invalid order ID
    boolean twoPhase = true;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNull(result);
    } catch (Exception e) {
      assertTrue(e instanceof IllegalArgumentException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderID_HJLu0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming 1 is a valid order ID
    boolean twoPhase = true; // Test with two-phase commit enabled
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus()); // Assuming the order will be closed after completion
    } catch (Exception e) {
      fail("Exception should not be thrown for a valid order ID");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithInvalidOrderID_lfPL1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = -1; // Assuming -1 is an invalid order ID
    boolean twoPhase = false; // Test without two-phase commit
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNull(result); // Expecting null as the order should not be found
    } catch (Exception e) {
      assertTrue(e.getMessage().contains("unable to find order")); // Check if the right exception message is thrown
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithAlreadyCompletedOrder_aYej2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2; // Assuming 2 is an already completed order ID
    boolean twoPhase = true; // Test with two-phase commit enabled
    try {
      tradeDirect.completeOrder(orderID, twoPhase);
      fail("Exception should be thrown for trying to complete an already completed order");
    } catch (Exception e) {
      assertTrue(e.getMessage().contains("attempt to complete Order that is already completed")); // Check if the right exception message is thrown
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderIDAndTwoPhaseTrue_zVxg0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming 1 is a valid order ID for testing
    boolean twoPhase = true;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown for valid inputs");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithInvalidOrderIDAndTwoPhaseFalse_rdoA1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = -1; // Assuming -1 is an invalid order ID for testing
    boolean twoPhase = false;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNull(result);
    } catch (Exception e) {
      assertNotNull(e);
      assertTrue(e.getMessage().contains("unable to find order"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderIDAndTwoPhaseFalse_pfOS2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2; // Assuming 2 is a valid order ID but the order is already completed
    boolean twoPhase = false;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertTrue(result.getOrderStatus().equalsIgnoreCase("completed") ||
                  result.getOrderStatus().equalsIgnoreCase("alertcompleted") ||
                  result.getOrderStatus().equalsIgnoreCase("cancelled"));
    } catch (Exception e) {
      fail("Exception should not be thrown for already completed orders");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderIDAndTwoPhaseTrue_thPL0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming 1 is a valid order ID for testing
    boolean twoPhase = true;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithInvalidOrderIDAndTwoPhaseFalse_HmoG1_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = -1; // Assuming -1 is an invalid order ID
    boolean twoPhase = false;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNull(result);
    } catch (Exception e) {
      assertTrue(e.getMessage().contains("unable to find order"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderIDAndTwoPhaseFalse_BkAk2_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2; // Assuming 2 is a valid order ID for testing
    boolean twoPhase = false;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderIDAndTwoPhaseTrue_pGBI0_fid1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming 1 is a valid order ID
    boolean twoPhase = true;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown for valid order ID and twoPhase true");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderIDAndTwoPhaseFalse_qgUS2() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2; // Assuming 2 is a valid order ID but the order is already completed
    boolean twoPhase = false;
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertTrue(result.getOrderStatus().equalsIgnoreCase("completed") || result.getOrderStatus().equalsIgnoreCase("cancelled"));
    } catch (Exception e) {
      assertTrue(e.getMessage().contains("attempt to complete Order that is already completed"));
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSuccessBuy_QFsk0() {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 1; // Assuming orderID 1 is a valid ID for a buy order
    boolean twoPhase = true;
    try {
      OrderDataBean result = trade.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown for a successful buy order completion");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSuccessSell_zrvI1() {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 2; // Assuming orderID 2 is a valid ID for a sell order
    boolean twoPhase = false;
    try {
      OrderDataBean result = trade.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown for a successful sell order completion");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAlreadyCompleted_EBVN2() {
    TradeDirect trade = new TradeDirect();
    Integer orderID = 3; // Assuming orderID 3 is an already completed order
    boolean twoPhase = true;
    try {
      trade.completeOrder(orderID, twoPhase);
      fail("Exception should be thrown for trying to complete an already completed order");
    } catch (Exception e) {
      assertEquals("TradeDirect:completeOrder -- attempt to complete Order that is already completed", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidBuyOrder_mnXh0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming this is a valid order ID for a buy order
    boolean twoPhase = true; // Using two-phase commit
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown for a valid buy order");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidSellOrder_JOTz1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2; // Assuming this is a valid order ID for a sell order
    boolean twoPhase = false; // Not using two-phase commit
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result);
      assertEquals("closed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception should not be thrown for a valid sell order");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_4() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Setup
    String symbol = "AAPL";
    when(resultSet.next()).thenReturn(true);
    when(resultSet.getString("symbol")).thenReturn(symbol);
    when(resultSet.getBigDecimal("price")).thenReturn(new BigDecimal("150.00"));
    when(resultSet.getBigDecimal("open")).thenReturn(new BigDecimal("145.00"));
    when(resultSet.getBigDecimal("high")).thenReturn(new BigDecimal("155.00"));
    when(resultSet.getBigDecimal("low")).thenReturn(new BigDecimal("140.00"));
    when(resultSet.getDouble("change")).thenReturn(5.00);
    when(resultSet.getDouble("volume")).thenReturn(3000000.00);
    // Execution
    QuoteDataBean quoteDataBean = tradeDirect.getQuote(symbol);
    // Verification
    verify(connection).prepareStatement("select * from quoteejb q where q.symbol=?");
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).executeQuery();
    verify(connection).commit();
    // Assertions
    assertEquals(new BigDecimal("145.00"), quoteDataBean.getOpen(), "The open price should match the result set");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_7() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Setup
    String symbol = "AAPL";
    when(resultSet.next()).thenReturn(true);
    when(resultSet.getString("symbol")).thenReturn(symbol);
    when(resultSet.getBigDecimal("price")).thenReturn(new BigDecimal("150.00"));
    when(resultSet.getBigDecimal("open")).thenReturn(new BigDecimal("145.00"));
    when(resultSet.getBigDecimal("high")).thenReturn(new BigDecimal("155.00"));
    when(resultSet.getBigDecimal("low")).thenReturn(new BigDecimal("140.00"));
    when(resultSet.getDouble("change")).thenReturn(5.00);
    when(resultSet.getDouble("volume")).thenReturn(3000000.00);
    // Execution
    QuoteDataBean quoteDataBean = tradeDirect.getQuote(symbol);
    // Verification
    verify(connection).prepareStatement("select * from quoteejb q where q.symbol=?");
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).executeQuery();
    verify(connection).commit();
    // Assertions
    assertEquals(5.00, quoteDataBean.getChange(), "The change should match the result set");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithValidSymbol_iPjB0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL"; // Assuming 'AAPL' is a valid symbol in the database
    QuoteDataBean result = tradeDirect.getQuote(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithValidSymbol_iPjB0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL"; // Assuming 'AAPL' is a valid symbol in the database
    QuoteDataBean result = tradeDirect.getQuote(symbol);
    assertEquals("AAPL", result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_1() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    // Arrange
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean expectedQuote = new QuoteDataBean(symbol, companyName, 0.0, price, price, price, price, 0.0);
    // Act
    QuoteDataBean resultQuote = tradeDirect.createQuote(symbol, companyName, price);
    // Assert
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).setString(2, companyName);
    verify(preparedStatement).setDouble(3, 0.0);
    verify(preparedStatement).setBigDecimal(4, price);
    verify(preparedStatement).setBigDecimal(5, price);
    verify(preparedStatement).setBigDecimal(6, price);
    verify(preparedStatement).setBigDecimal(7, price);
    verify(preparedStatement).setDouble(8, 0.0);
    verify(preparedStatement).executeUpdate();
    verify(preparedStatement).close();
    verify(connection).close();
    assertNotNull(resultQuote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_2() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    // Arrange
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean expectedQuote = new QuoteDataBean(symbol, companyName, 0.0, price, price, price, price, 0.0);
    // Act
    QuoteDataBean resultQuote = tradeDirect.createQuote(symbol, companyName, price);
    // Assert
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).setString(2, companyName);
    verify(preparedStatement).setDouble(3, 0.0);
    verify(preparedStatement).setBigDecimal(4, price);
    verify(preparedStatement).setBigDecimal(5, price);
    verify(preparedStatement).setBigDecimal(6, price);
    verify(preparedStatement).setBigDecimal(7, price);
    verify(preparedStatement).setDouble(8, 0.0);
    verify(preparedStatement).executeUpdate();
    verify(preparedStatement).close();
    verify(connection).close();
    assertEquals(expectedQuote.getSymbol(), resultQuote.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_3() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    // Arrange
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean expectedQuote = new QuoteDataBean(symbol, companyName, 0.0, price, price, price, price, 0.0);
    // Act
    QuoteDataBean resultQuote = tradeDirect.createQuote(symbol, companyName, price);
    // Assert
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).setString(2, companyName);
    verify(preparedStatement).setDouble(3, 0.0);
    verify(preparedStatement).setBigDecimal(4, price);
    verify(preparedStatement).setBigDecimal(5, price);
    verify(preparedStatement).setBigDecimal(6, price);
    verify(preparedStatement).setBigDecimal(7, price);
    verify(preparedStatement).setDouble(8, 0.0);
    verify(preparedStatement).executeUpdate();
    verify(preparedStatement).close();
    verify(connection).close();
    assertEquals(expectedQuote.getCompanyName(), resultQuote.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_4() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    // Arrange
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean expectedQuote = new QuoteDataBean(symbol, companyName, 0.0, price, price, price, price, 0.0);
    // Act
    QuoteDataBean resultQuote = tradeDirect.createQuote(symbol, companyName, price);
    // Assert
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).setString(2, companyName);
    verify(preparedStatement).setDouble(3, 0.0);
    verify(preparedStatement).setBigDecimal(4, price);
    verify(preparedStatement).setBigDecimal(5, price);
    verify(preparedStatement).setBigDecimal(6, price);
    verify(preparedStatement).setBigDecimal(7, price);
    verify(preparedStatement).setDouble(8, 0.0);
    verify(preparedStatement).executeUpdate();
    verify(preparedStatement).close();
    verify(connection).close();
    assertEquals(0, expectedQuote.getVolume());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_5() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    // Arrange
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean expectedQuote = new QuoteDataBean(symbol, companyName, 0.0, price, price, price, price, 0.0);
    // Act
    QuoteDataBean resultQuote = tradeDirect.createQuote(symbol, companyName, price);
    // Assert
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).setString(2, companyName);
    verify(preparedStatement).setDouble(3, 0.0);
    verify(preparedStatement).setBigDecimal(4, price);
    verify(preparedStatement).setBigDecimal(5, price);
    verify(preparedStatement).setBigDecimal(6, price);
    verify(preparedStatement).setBigDecimal(7, price);
    verify(preparedStatement).setDouble(8, 0.0);
    verify(preparedStatement).executeUpdate();
    verify(preparedStatement).close();
    verify(connection).close();
    assertEquals(0.0, resultQuote.getChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_6() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    // Arrange
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean expectedQuote = new QuoteDataBean(symbol, companyName, 0.0, price, price, price, price, 0.0);
    // Act
    QuoteDataBean resultQuote = tradeDirect.createQuote(symbol, companyName, price);
    // Assert
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).setString(2, companyName);
    verify(preparedStatement).setDouble(3, 0.0);
    verify(preparedStatement).setBigDecimal(4, price);
    verify(preparedStatement).setBigDecimal(5, price);
    verify(preparedStatement).setBigDecimal(6, price);
    verify(preparedStatement).setBigDecimal(7, price);
    verify(preparedStatement).setDouble(8, 0.0);
    verify(preparedStatement).executeUpdate();
    verify(preparedStatement).close();
    verify(connection).close();
    assertEquals(expectedQuote.getPrice(), resultQuote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_7() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    // Arrange
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean expectedQuote = new QuoteDataBean(symbol, companyName, 0.0, price, price, price, price, 0.0);
    // Act
    QuoteDataBean resultQuote = tradeDirect.createQuote(symbol, companyName, price);
    // Assert
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).setString(2, companyName);
    verify(preparedStatement).setDouble(3, 0.0);
    verify(preparedStatement).setBigDecimal(4, price);
    verify(preparedStatement).setBigDecimal(5, price);
    verify(preparedStatement).setBigDecimal(6, price);
    verify(preparedStatement).setBigDecimal(7, price);
    verify(preparedStatement).setDouble(8, 0.0);
    verify(preparedStatement).executeUpdate();
    verify(preparedStatement).close();
    verify(connection).close();
    assertEquals(expectedQuote.getOpen(), resultQuote.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_8() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    // Arrange
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean expectedQuote = new QuoteDataBean(symbol, companyName, 0.0, price, price, price, price, 0.0);
    // Act
    QuoteDataBean resultQuote = tradeDirect.createQuote(symbol, companyName, price);
    // Assert
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).setString(2, companyName);
    verify(preparedStatement).setDouble(3, 0.0);
    verify(preparedStatement).setBigDecimal(4, price);
    verify(preparedStatement).setBigDecimal(5, price);
    verify(preparedStatement).setBigDecimal(6, price);
    verify(preparedStatement).setBigDecimal(7, price);
    verify(preparedStatement).setDouble(8, 0.0);
    verify(preparedStatement).executeUpdate();
    verify(preparedStatement).close();
    verify(connection).close();
    assertEquals(expectedQuote.getHigh(), resultQuote.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_9() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    // Arrange
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean expectedQuote = new QuoteDataBean(symbol, companyName, 0.0, price, price, price, price, 0.0);
    // Act
    QuoteDataBean resultQuote = tradeDirect.createQuote(symbol, companyName, price);
    // Assert
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).setString(2, companyName);
    verify(preparedStatement).setDouble(3, 0.0);
    verify(preparedStatement).setBigDecimal(4, price);
    verify(preparedStatement).setBigDecimal(5, price);
    verify(preparedStatement).setBigDecimal(6, price);
    verify(preparedStatement).setBigDecimal(7, price);
    verify(preparedStatement).setDouble(8, 0.0);
    verify(preparedStatement).executeUpdate();
    verify(preparedStatement).close();
    verify(connection).close();
    assertEquals(expectedQuote.getLow(), resultQuote.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithValidOrder_DReg0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 100;
    boolean twoPhase = true;
    try {
      tradeDirect.queueOrder(orderID, twoPhase);
      assertTrue(true); // Assuming no exception means success
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithTwoPhaseFalse_Nekc2() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 200;
    boolean twoPhase = false;
    try {
      tradeDirect.queueOrder(orderID, twoPhase);
      assertTrue(true); // Assuming no exception means success
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogout() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    String userID = "user123";
    tradeDirect.logout(userID);
    // Verify that a connection is obtained
    verify(connection, times(1)).prepareStatement(logoutSQL);
    // Verify that the statement is set with the correct user ID
    verify(preparedStatement, times(1)).setString(1, userID);
    // Verify that the update is executed
    verify(preparedStatement, times(1)).executeUpdate();
    // Verify that the statement is closed
    verify(preparedStatement, times(1)).close();
    // Verify that the connection is committed and released
    verify(connection, times(1)).commit();
    verify(connection, times(1)).close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellAllNull_IHIk0() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = null;
    Integer holdingID = null;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellInvalidUser_zUjI1() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "invalidUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellInvalidHolding_vrjA2() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = -1; // Assuming -1 is invalid
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellValidTransaction_mAyK3_1() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellValidTransaction_mAyK3_2() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellAsynchMode_lyEC4_1() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellAsynchMode_lyEC4_2() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellAsynch2PhaseMode_zZWa5_1() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellAsynch2PhaseMode_zZWa5_2() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellRollback_zEMl7() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellInvalidQuote_vPrx9() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellNoAccount_GxpM10() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "noAccountUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellNoHolding_yety11() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = null;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullAccountData_TDHF0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    AccountDataBean accountData = null;
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullAccountData_TDHF0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    AccountDataBean accountData = null;
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullQuoteData_vVrm2_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    QuoteDataBean quoteData = null;
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullQuoteData_vVrm2_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    QuoteDataBean quoteData = null;
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidData_CjxH3_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    AccountDataBean accountData = new AccountDataBean();
    HoldingDataBean holdingData = new HoldingDataBean();
    QuoteDataBean quoteData = new QuoteDataBean();
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidData_CjxH3_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    AccountDataBean accountData = new AccountDataBean();
    HoldingDataBean holdingData = new HoldingDataBean();
    QuoteDataBean quoteData = new QuoteDataBean();
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithExceptionDuringOrderCreation_otGS4_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithExceptionDuringOrderCreation_otGS4_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullAccountData_gPaC0() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullHoldingData_vyub1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user2";
    Integer holdingID = 2;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataSynchMode_AOJj3_1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user4";
    Integer holdingID = 4;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataSynchMode_AOJj3_2() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user4";
    Integer holdingID = 4;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("completed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAsynchMode_kKak4_1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user5";
    Integer holdingID = 5;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAsynchMode_kKak4_2() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user5";
    Integer holdingID = 5;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("open", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAsynch2PhaseMode_qCCo5_1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user6";
    Integer holdingID = 6;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAsynch2PhaseMode_qCCo5_2() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user6";
    Integer holdingID = 6;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("open", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithExceptionDuringOrderCompletion_zcSQ6() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user7";
    Integer holdingID = 7;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithJMSException_mkuM7() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user8";
    Integer holdingID = 8;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithGlobalTransactionCommit_QmZC8_1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user9";
    Integer holdingID = 9;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithGlobalTransactionCommit_QmZC8_2() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user9";
    Integer holdingID = 9;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("open", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithGlobalTransactionRollback_dVcz9() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user10";
    Integer holdingID = 10;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithExceptionAndRollback_xPbu10() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user11";
    Integer holdingID = 11;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithExceptionAndGlobalRollback_XolK11() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user12";
    Integer holdingID = 12;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAndCommit_lYZt12_1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user13";
    Integer holdingID = 13;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAndCommit_lYZt12_2() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user13";
    Integer holdingID = 13;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("completed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAndImmediateCommit_mRhu13_1() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user14";
    Integer holdingID = 14;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAndImmediateCommit_mRhu13_2() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user14";
    Integer holdingID = 14;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertEquals("completed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullAccountData_gGUW0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
    when(mock(PreparedStatement.class).executeQuery()).thenReturn(mock(ResultSet.class));
    when(mock(ResultSet.class).next()).thenReturn(false);
    assertNull(tradeDirect.sell("user1", 1, TradeConfig.SYNCH).getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullHoldingData_jwsj1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
    when(mock(PreparedStatement.class).executeQuery()).thenReturn(mock(ResultSet.class));
    when(mock(ResultSet.class).next()).thenReturn(false);
    assertNull(tradeDirect.sell("user1", 1, TradeConfig.SYNCH).getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullQuoteData_JCke2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
    when(mock(PreparedStatement.class).executeQuery()).thenReturn(mock(ResultSet.class));
    when(mock(ResultSet.class).next()).thenReturn(false);
    assertNull(tradeDirect.sell("user1", 1, TradeConfig.SYNCH).getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidData_MskE3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
    when(mock(PreparedStatement.class).executeQuery()).thenReturn(mock(ResultSet.class));
    when(mock(ResultSet.class).next()).thenReturn(true);
    assertNotNull(tradeDirect.sell("user1", 1, TradeConfig.SYNCH));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithOrderProcessingModeSynch_hmeK5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
    when(mock(PreparedStatement.class).executeQuery()).thenReturn(mock(ResultSet.class));
    when(mock(ResultSet.class).next()).thenReturn(true);
    OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals("completed", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithOrderProcessingModeAsynch_TdAA6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
    when(mock(PreparedStatement.class).executeQuery()).thenReturn(mock(ResultSet.class));
    when(mock(ResultSet.class).next()).thenReturn(true);
    OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH);
    assertEquals("queued", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithOrderProcessingModeAsynch2Phase_ItQn7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
    when(mock(PreparedStatement.class).executeQuery()).thenReturn(mock(ResultSet.class));
    when(mock(ResultSet.class).next()).thenReturn(true);
    OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.ASYNCH_2PHASE);
    assertEquals("global_queued", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithOrderCancelled_lemx8() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
    when(mock(PreparedStatement.class).executeQuery()).thenReturn(mock(ResultSet.class));
    when(mock(ResultSet.class).next()).thenReturn(false);
    OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
    assertEquals("cancelled", orderData.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithOrderCompletion_CYTN9() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
    when(mock(PreparedStatement.class).executeQuery()).thenReturn(mock(ResultSet.class));
    when(mock(ResultSet.class).next()).thenReturn(true);
    OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
    assertNotNull(orderData.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithOrderFeeDeduction_jzNO10() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
    when(mock(PreparedStatement.class).executeQuery()).thenReturn(mock(ResultSet.class));
    when(mock(ResultSet.class).next()).thenReturn(true);
    OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
    assertTrue(orderData.getOrderFee().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithCreditAccountBalance_FwKw11() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = mock(Connection.class);
    when(conn.prepareStatement(anyString())).thenReturn(mock(PreparedStatement.class));
    when(mock(PreparedStatement.class).executeQuery()).thenReturn(mock(ResultSet.class));
    when(mock(ResultSet.class).next()).thenReturn(true);
    OrderDataBean orderData = tradeDirect.sell("user1", 1, TradeConfig.SYNCH);
    assertTrue(orderData.getAccount().getBalance().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NormalConditions_WcYb0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1000;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NormalConditions_WcYb0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1000;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NormalConditions_WcYb0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1000;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertTrue(result.getPrice().compareTo(new BigDecimal("0")) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_PennyStockRecovery_Assr1_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "XYZ";
    BigDecimal changeFactor = new BigDecimal("1.00"); // This should be overridden
    double sharesTraded = 500;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_PennyStockRecovery_Assr1_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "XYZ";
    BigDecimal changeFactor = new BigDecimal("1.00"); // This should be overridden
    double sharesTraded = 500;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_PennyStockRecovery_Assr1_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "XYZ";
    BigDecimal changeFactor = new BigDecimal("1.00"); // This should be overridden
    double sharesTraded = 500;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertTrue(result.getPrice().compareTo(TradeConfig.PENNY_STOCK_PRICE) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NoPriceUpdateConfig_cmgO3_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "NOUPD";
    BigDecimal changeFactor = new BigDecimal("1.10");
    double sharesTraded = 1500;
    boolean publishQuotePriceChange = true;
    TradeConfig.setUpdateQuotePrices(false);
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(BigDecimal.ZERO, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_ExceptionHandling_tlnn4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ERROR";
    BigDecimal changeFactor = new BigDecimal("1.00");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = false;
    try {
      tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
      fail("Exception should have been thrown");
    } catch (Exception e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NormalConditions_ibes0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1000.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NormalConditions_ibes0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1000.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertTrue(result.getPrice().compareTo(result.getOpen()) != 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_MaximumStockSplit_OJRr2_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "HIGH";
    BigDecimal changeFactor = new BigDecimal("1000.00"); // Simulate initial high price
    double sharesTraded = 200.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER, changeFactor);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NoPriceUpdate_sgqa3_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "STABLE";
    BigDecimal changeFactor = new BigDecimal("1.00");
    double sharesTraded = 300.0;
    boolean publishQuotePriceChange = false;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NoPriceUpdate_sgqa3_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "STABLE";
    BigDecimal changeFactor = new BigDecimal("1.00");
    double sharesTraded = 300.0;
    boolean publishQuotePriceChange = false;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertEquals(result.getPrice(), result.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_ExceptionHandling_FvSx4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "ERROR";
    BigDecimal changeFactor = new BigDecimal("1.10");
    double sharesTraded = 100.0;
    boolean publishQuotePriceChange = true;
    try {
      tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
      fail("Expected an exception to be thrown");
    } catch (Exception e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_Normal_gVAK0() {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1000;
    boolean publishQuotePriceChange = true;
    try {
      QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
      assertNotNull(result);
      assertTrue(result.getPrice().compareTo(BigDecimal.ZERO) > 0);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_PennyStock_jSan1() {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "XYZ";
    BigDecimal changeFactor = new BigDecimal("1.00");
    double sharesTraded = 500;
    boolean publishQuotePriceChange = false;
    try {
      QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
      assertNotNull(result);
      assertEquals(TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER, changeFactor);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_MaximumPrice_iogO2() {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "HIGH";
    BigDecimal changeFactor = new BigDecimal("1.00");
    double sharesTraded = 2000;
    boolean publishQuotePriceChange = true;
    try {
      QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
      assertNotNull(result);
      assertEquals(TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER, changeFactor);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NoPriceChangeConfig_rIEW3() {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "NOCHANGE";
    BigDecimal changeFactor = new BigDecimal("1.10");
    double sharesTraded = 300;
    boolean publishQuotePriceChange = true;
    TradeConfig.setUpdateQuotePrices(false);
    try {
      QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
      assertNotNull(result);
      assertEquals(BigDecimal.ZERO, result.getPrice());
    } catch (Exception e) {
      fail("Exception should not be thrown");
    } finally {
      TradeConfig.setUpdateQuotePrices(true);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_qVgr0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_qVgr0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, result.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_qVgr0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, result.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_qVgr0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, result.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_qVgr0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(0, result.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_qVgr0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(0, result.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUser_JNUm0() {
    TradeDirect tradeDirect = new TradeDirect();
    String validUserID = "user123";
    try {
      Collection<HoldingDataBean> result = tradeDirect.getHoldings(validUserID);
    } catch (Exception e) {
      fail("Exception should not be thrown for a valid user");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithInvalidUser_QcfB1() {
    TradeDirect tradeDirect = new TradeDirect();
    String invalidUserID = "nonExistingUser";
    try {
      Collection<HoldingDataBean> result = tradeDirect.getHoldings(invalidUserID);
    } catch (Exception e) {
      fail("Exception should not be thrown even for an invalid user");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess() throws Exception {
    dataSource = mock(DataSource.class);
    connection = mock(Connection.class);
    resultSet = mock(ResultSet.class);
    preparedStatement = mock(PreparedStatement.class);
    tradeDirect = new TradeDirect();
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Setup
    String userID = "user1";
    String password = "pass1";
    when(resultSet.next()).thenReturn(true); // Simulate user found
    when(resultSet.getString("passwd")).thenReturn(password); // Correct password
    // Execute
    AccountDataBean result = tradeDirect.login(userID, password);
    // Verify
    assertNotNull(result);
    verify(preparedStatement, times(1)).setString(1, userID);
    verify(preparedStatement, times(1)).executeUpdate();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailureIncorrectPassword_FTkm1() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "validUser";
    String password = "wrongPassword";
    try {
      tradeDirect.login(userID, password);
      fail("Login should throw an exception for incorrect password");
    } catch (Exception e) {
      assertEquals("TradeDirect:Login failure for user: validUser\n\tIncorrect password-->validUser:wrongPassword", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailureUserNotFound_qvxP2() {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "nonExistentUser";
    String password = "anyPassword";
    try {
      tradeDirect.login(userID, password);
      fail("Login should throw an exception when user does not exist");
    } catch (Exception e) {
      assertTrue(e instanceof javax.ejb.FinderException);
      assertEquals("Cannot find account fornonExistentUser", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetConnPublic_doqi0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection result = tradeDirect.getConnPublic();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_DHeV0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1500.0;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_DHeV0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1500.0;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertTrue(result.getPrice().compareTo(result.getOpen().multiply(changeFactor)) == 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_DHeV0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1500.0;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertEquals(sharesTraded, result.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrderWithValidOrderAndTwoPhaseCommit_BWNH0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 123;
    boolean twoPhase = true;
    try {
      tradeDirect.cancelOrder(orderID, twoPhase);
      assertTrue(true); // Assuming cancelOrder completes without exception
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCancelOrderWithValidOrderAndSinglePhaseCommit_SqOp1() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 456;
    boolean twoPhase = false;
    try {
      tradeDirect.cancelOrder(orderID, twoPhase);
      assertTrue(true); // Assuming cancelOrder completes without exception
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_1() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Arrange
    String userID = "user123";
    AccountProfileDataBean profileData = new AccountProfileDataBean(userID, "password", "John Doe", "123 Main St", "john@example.com", "1234-5678-9012-3456");
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getString("userID")).thenReturn(profileData.getUserID());
    when(resultSet.getString("password")).thenReturn(profileData.getPassword());
    when(resultSet.getString("fullName")).thenReturn(profileData.getFullName());
    when(resultSet.getString("address")).thenReturn(profileData.getAddress());
    when(resultSet.getString("email")).thenReturn(profileData.getEmail());
    when(resultSet.getString("creditCard")).thenReturn(profileData.getCreditCard());
    // Act
    AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
    // Assert
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(connection).commit();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_2() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Arrange
    String userID = "user123";
    AccountProfileDataBean profileData = new AccountProfileDataBean(userID, "password", "John Doe", "123 Main St", "john@example.com", "1234-5678-9012-3456");
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getString("userID")).thenReturn(profileData.getUserID());
    when(resultSet.getString("password")).thenReturn(profileData.getPassword());
    when(resultSet.getString("fullName")).thenReturn(profileData.getFullName());
    when(resultSet.getString("address")).thenReturn(profileData.getAddress());
    when(resultSet.getString("email")).thenReturn(profileData.getEmail());
    when(resultSet.getString("creditCard")).thenReturn(profileData.getCreditCard());
    // Act
    AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
    // Assert
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(connection).commit();
    assertEquals(userID, result.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_3() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Arrange
    String userID = "user123";
    AccountProfileDataBean profileData = new AccountProfileDataBean(userID, "password", "John Doe", "123 Main St", "john@example.com", "1234-5678-9012-3456");
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getString("userID")).thenReturn(profileData.getUserID());
    when(resultSet.getString("password")).thenReturn(profileData.getPassword());
    when(resultSet.getString("fullName")).thenReturn(profileData.getFullName());
    when(resultSet.getString("address")).thenReturn(profileData.getAddress());
    when(resultSet.getString("email")).thenReturn(profileData.getEmail());
    when(resultSet.getString("creditCard")).thenReturn(profileData.getCreditCard());
    // Act
    AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
    // Assert
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(connection).commit();
    assertEquals("password", result.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_4() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Arrange
    String userID = "user123";
    AccountProfileDataBean profileData = new AccountProfileDataBean(userID, "password", "John Doe", "123 Main St", "john@example.com", "1234-5678-9012-3456");
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getString("userID")).thenReturn(profileData.getUserID());
    when(resultSet.getString("password")).thenReturn(profileData.getPassword());
    when(resultSet.getString("fullName")).thenReturn(profileData.getFullName());
    when(resultSet.getString("address")).thenReturn(profileData.getAddress());
    when(resultSet.getString("email")).thenReturn(profileData.getEmail());
    when(resultSet.getString("creditCard")).thenReturn(profileData.getCreditCard());
    // Act
    AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
    // Assert
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(connection).commit();
    assertEquals("John Doe", result.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_5() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Arrange
    String userID = "user123";
    AccountProfileDataBean profileData = new AccountProfileDataBean(userID, "password", "John Doe", "123 Main St", "john@example.com", "1234-5678-9012-3456");
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getString("userID")).thenReturn(profileData.getUserID());
    when(resultSet.getString("password")).thenReturn(profileData.getPassword());
    when(resultSet.getString("fullName")).thenReturn(profileData.getFullName());
    when(resultSet.getString("address")).thenReturn(profileData.getAddress());
    when(resultSet.getString("email")).thenReturn(profileData.getEmail());
    when(resultSet.getString("creditCard")).thenReturn(profileData.getCreditCard());
    // Act
    AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
    // Assert
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(connection).commit();
    assertEquals("123 Main St", result.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_6() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Arrange
    String userID = "user123";
    AccountProfileDataBean profileData = new AccountProfileDataBean(userID, "password", "John Doe", "123 Main St", "john@example.com", "1234-5678-9012-3456");
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getString("userID")).thenReturn(profileData.getUserID());
    when(resultSet.getString("password")).thenReturn(profileData.getPassword());
    when(resultSet.getString("fullName")).thenReturn(profileData.getFullName());
    when(resultSet.getString("address")).thenReturn(profileData.getAddress());
    when(resultSet.getString("email")).thenReturn(profileData.getEmail());
    when(resultSet.getString("creditCard")).thenReturn(profileData.getCreditCard());
    // Act
    AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
    // Assert
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(connection).commit();
    assertEquals("john@example.com", result.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_7() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Arrange
    String userID = "user123";
    AccountProfileDataBean profileData = new AccountProfileDataBean(userID, "password", "John Doe", "123 Main St", "john@example.com", "1234-5678-9012-3456");
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getString("userID")).thenReturn(profileData.getUserID());
    when(resultSet.getString("password")).thenReturn(profileData.getPassword());
    when(resultSet.getString("fullName")).thenReturn(profileData.getFullName());
    when(resultSet.getString("address")).thenReturn(profileData.getAddress());
    when(resultSet.getString("email")).thenReturn(profileData.getEmail());
    when(resultSet.getString("creditCard")).thenReturn(profileData.getCreditCard());
    // Act
    AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
    // Assert
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(connection).commit();
    assertEquals("1234-5678-9012-3456", result.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IvUY0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(updatedProfile);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IvUY0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = tradeDirect.updateAccountProfile(profileData);
    assertEquals("pass123", updatedProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IvUY0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = tradeDirect.updateAccountProfile(profileData);
    assertEquals("John Doe", updatedProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IvUY0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = tradeDirect.updateAccountProfile(profileData);
    assertEquals("123 Elm St", updatedProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IvUY0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = tradeDirect.updateAccountProfile(profileData);
    assertEquals("john@example.com", updatedProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IvUY0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = tradeDirect.updateAccountProfile(profileData);
    assertEquals("1234-5678-9012-3456", updatedProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IvUY0_7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = tradeDirect.updateAccountProfile(profileData);
    assertEquals("user123", updatedProfile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_2() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Arrange
    String userID = "user123";
    AccountProfileDataBean expectedProfile = new AccountProfileDataBean();
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getString("profile_userid")).thenReturn(userID);
    when(resultSet.getString("email")).thenReturn("user@example.com");
    when(resultSet.getString("address")).thenReturn("123 Main St");
    // Act
    AccountProfileDataBean result = tradeDirect.getAccountProfileData(userID);
    // Assert
    assertEquals(userID, result.getUserID(), "The userID should match the input");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithValidData_xnVn0() {
    TradeDirect trade = new TradeDirect();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      OrderDataBean result = trade.buy(userID, symbol, quantity, orderProcessingMode);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyAsynchronousMode_JOKj3() {
    TradeDirect trade = new TradeDirect();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 5.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    try {
      OrderDataBean result = trade.buy(userID, symbol, quantity, orderProcessingMode);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyAsynchronous2PhaseMode_IbpJ4() {
    TradeDirect trade = new TradeDirect();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 15.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    try {
      OrderDataBean result = trade.buy(userID, symbol, quantity, orderProcessingMode);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithHighQuantity_ndev5() {
    TradeDirect trade = new TradeDirect();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 10000.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      OrderDataBean result = trade.buy(userID, symbol, quantity, orderProcessingMode);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_NoData_krUD0_1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_NoData_krUD0_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertEquals(BigDecimal.ZERO, result.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_NoData_krUD0_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertEquals(BigDecimal.ZERO, result.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_NoData_krUD0_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertEquals(0.0, result.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_NoData_krUD0_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertTrue(result.getTopGainers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_NoData_krUD0_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertTrue(result.getTopLosers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_OnlyGainers_tsrf1_2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotEquals(BigDecimal.ZERO, result.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_OnlyGainers_tsrf1_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotEquals(BigDecimal.ZERO, result.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_OnlyGainers_tsrf1_4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertTrue(result.getVolume() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_OnlyGainers_tsrf1_5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertFalse(result.getTopGainers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_OnlyLosers_exqE2_6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertFalse(result.getTopLosers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_EmptyResultSetForTSIA_ERPt5_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertTrue(result.getVolume() == 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_EmptyResultSetForVolume_THDy7_3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertFalse(result.getTopGainers().isEmpty() || result.getTopLosers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_IntervalPositive_CacheExpired_EdMz0_1() throws Exception {
    tradeDirect = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(10); // 10 seconds interval
    MarketSummaryDataBean initialMSDB = MarketSummaryDataBean.getRandomInstance();
    MarketSummaryDataBean updatedMSDB = new MarketSummaryDataBean();
    when(MarketSummaryDataBean.getRandomInstance()).thenReturn(initialMSDB).thenReturn(updatedMSDB);
    long currentTime = System.currentTimeMillis();
    long nextMarketSummaryTime = currentTime - 1000; // 1 second in the past
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_IntervalPositive_CacheExpired_EdMz0_2() throws Exception {
    tradeDirect = new TradeDirect();
    TradeConfig.setMarketSummaryInterval(10); // 10 seconds interval
    MarketSummaryDataBean initialMSDB = MarketSummaryDataBean.getRandomInstance();
    MarketSummaryDataBean updatedMSDB = new MarketSummaryDataBean();
    when(MarketSummaryDataBean.getRandomInstance()).thenReturn(initialMSDB).thenReturn(updatedMSDB);
    long currentTime = System.currentTimeMillis();
    long nextMarketSummaryTime = currentTime - 1000; // 1 second in the past
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    assertEquals(updatedMSDB, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_zNga0_1() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    int accountID = 1;
    AccountDataBean expectedAccountData = new AccountDataBean();
    expectedAccountData.setAccountID(accountID);
    expectedAccountData.setBalance(new BigDecimal("1000.00"));
    expectedAccountData.setProfileID("Profile1");
    expectedAccountData.setCreationDate(new java.util.Date());
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getInt("accountID")).thenReturn(expectedAccountData.getAccountID());
    when(resultSet.getString("profileID")).thenReturn(expectedAccountData.getProfileID());
    when(resultSet.getBigDecimal("balance")).thenReturn(expectedAccountData.getBalance());
    AccountDataBean actualAccountData = tradeDirect.getAccountData(accountID);
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(resultSet).getInt("accountID");
    verify(resultSet).getString("profileID");
    verify(resultSet).getBigDecimal("balance");
    assertNotNull(actualAccountData, "Account data should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_zNga0_2() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    int accountID = 1;
    AccountDataBean expectedAccountData = new AccountDataBean();
    expectedAccountData.setAccountID(accountID);
    expectedAccountData.setBalance(new BigDecimal("1000.00"));
    expectedAccountData.setProfileID("Profile1");
    expectedAccountData.setCreationDate(new java.util.Date());
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getInt("accountID")).thenReturn(expectedAccountData.getAccountID());
    when(resultSet.getString("profileID")).thenReturn(expectedAccountData.getProfileID());
    when(resultSet.getBigDecimal("balance")).thenReturn(expectedAccountData.getBalance());
    AccountDataBean actualAccountData = tradeDirect.getAccountData(accountID);
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(resultSet).getInt("accountID");
    verify(resultSet).getString("profileID");
    verify(resultSet).getBigDecimal("balance");
    assertEquals(expectedAccountData.getAccountID(), actualAccountData.getAccountID(), "Account IDs should match");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_zNga0_3() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    int accountID = 1;
    AccountDataBean expectedAccountData = new AccountDataBean();
    expectedAccountData.setAccountID(accountID);
    expectedAccountData.setBalance(new BigDecimal("1000.00"));
    expectedAccountData.setProfileID("Profile1");
    expectedAccountData.setCreationDate(new java.util.Date());
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getInt("accountID")).thenReturn(expectedAccountData.getAccountID());
    when(resultSet.getString("profileID")).thenReturn(expectedAccountData.getProfileID());
    when(resultSet.getBigDecimal("balance")).thenReturn(expectedAccountData.getBalance());
    AccountDataBean actualAccountData = tradeDirect.getAccountData(accountID);
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(resultSet).getInt("accountID");
    verify(resultSet).getString("profileID");
    verify(resultSet).getBigDecimal("balance");
    assertEquals(expectedAccountData.getProfileID(), actualAccountData.getProfileID(), "Profile IDs should match");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_zNga0_4() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    int accountID = 1;
    AccountDataBean expectedAccountData = new AccountDataBean();
    expectedAccountData.setAccountID(accountID);
    expectedAccountData.setBalance(new BigDecimal("1000.00"));
    expectedAccountData.setProfileID("Profile1");
    expectedAccountData.setCreationDate(new java.util.Date());
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getInt("accountID")).thenReturn(expectedAccountData.getAccountID());
    when(resultSet.getString("profileID")).thenReturn(expectedAccountData.getProfileID());
    when(resultSet.getBigDecimal("balance")).thenReturn(expectedAccountData.getBalance());
    AccountDataBean actualAccountData = tradeDirect.getAccountData(accountID);
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(resultSet).getInt("accountID");
    verify(resultSet).getString("profileID");
    verify(resultSet).getBigDecimal("balance");
    assertEquals(expectedAccountData.getBalance(), actualAccountData.getBalance(), "Balances should match");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_v_RBbZ0_1() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(resultSet.next()).thenReturn(true).thenReturn(false); // Assuming one row is returned
    String userID = "user123";
    AccountDataBean expectedAccount = new AccountDataBean();
    when(resultSet.getInt("accountID")).thenReturn(expectedAccount.getAccountID());
    when(resultSet.getString("profileID")).thenReturn(expectedAccount.getProfileID());
    AccountDataBean resultAccount = tradeDirect.getAccountData(userID);
    assertNotNull(resultAccount, "Account data should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_v_RBbZ0_2() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(resultSet.next()).thenReturn(true).thenReturn(false); // Assuming one row is returned
    String userID = "user123";
    AccountDataBean expectedAccount = new AccountDataBean();
    when(resultSet.getInt("accountID")).thenReturn(expectedAccount.getAccountID());
    when(resultSet.getString("profileID")).thenReturn(expectedAccount.getProfileID());
    AccountDataBean resultAccount = tradeDirect.getAccountData(userID);
    assertEquals(expectedAccount.getAccountID(), resultAccount.getAccountID(), "Account IDs should match");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_v_RBbZ0_3() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(resultSet.next()).thenReturn(true).thenReturn(false); // Assuming one row is returned
    String userID = "user123";
    AccountDataBean expectedAccount = new AccountDataBean();
    when(resultSet.getInt("accountID")).thenReturn(expectedAccount.getAccountID());
    when(resultSet.getString("profileID")).thenReturn(expectedAccount.getProfileID());
    AccountDataBean resultAccount = tradeDirect.getAccountData(userID);
    assertEquals(expectedAccount.getProfileID(), resultAccount.getProfileID(), "Profile IDs should match");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesHandlesSQLException_PZMT1_okue0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect() {
      protected Connection getConn() throws SQLException {
        throw new SQLException("Forced SQLException");
      }
    };
    try {
      tradeDirect.getMarketSummaryInternal();
      fail("Expected an exception to be thrown");
    } catch (Exception e) {
      assertEquals("Forced SQLException", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderID_Timr0_OZWZ0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer validOrderID = 1; // Assuming 1 is a valid order ID for testing
    boolean twoPhase = false;
    try {
      OrderDataBean result = tradeDirect.completeOrder(validOrderID, twoPhase);
      assertNotNull(result, "OrderData should not be null");
      assertEquals("closed", result.getOrderStatus(), "Order status should be closed");
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithInvalidOrderID_eSvq1_uJYn0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer invalidOrderID = 999; // Assuming 999 is an invalid order ID for testing
    boolean twoPhase = false;
    try {
      OrderDataBean result = tradeDirect.completeOrder(invalidOrderID, twoPhase);
      assertNull(result, "OrderData should be null for invalid order ID");
    } catch (Exception e) {
      fail("Exception should not be thrown for invalid order ID");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderID_zxYQ0_ZkEC0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming 1 is a valid order ID
    boolean twoPhase = true; // Assuming we want to test with two-phase commit
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result, "OrderData should not be null");
      assertEquals("closed", result.getOrderStatus(), "Order status should be closed");
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithValidOrderID_IAZr0_iEhy0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming 1 is a valid order ID
    boolean twoPhase = true; // Test with two-phase commit enabled
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNotNull(result, "OrderData should not be null");
      assertEquals("closed", result.getOrderStatus(), "Order status should be closed");
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithInvalidOrderID_ZEiU1_sFTl0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 99999; // Assuming 99999 is an invalid order ID
    boolean twoPhase = false; // Test without two-phase commit
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      assertNull(result, "OrderData should be null for invalid order ID");
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_Success_opeo0_ttjs0() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming a valid order ID
    boolean twoPhase = true; // Test with two-phase commit
    try {
      OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
      Assertions.assertNotNull(result, "OrderDataBean should not be null on successful completion");
    } catch (Exception e) {
      Assertions.fail("Exception should not be thrown for successful order completion");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_IntervalZero() throws Exception {
    tradeDirect = new TradeDirect();
    // Setup
    TradeConfig.setMarketSummaryInterval(0);
    MarketSummaryDataBean expectedMSDB = new MarketSummaryDataBean();
    when(MarketSummaryDataBean.getRandomInstance()).thenReturn(expectedMSDB);
    // Execution
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    // Verification
    assertNotNull(result);
    assertEquals(expectedMSDB, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_IntervalNegative() throws Exception {
    tradeDirect = new TradeDirect();
    // Setup
    TradeConfig.setMarketSummaryInterval(-1);
    MarketSummaryDataBean expectedMSDB = MarketSummaryDataBean.getRandomInstance();
    // Execution
    MarketSummaryDataBean result = tradeDirect.getMarketSummary();
    // Verification
    assertNotNull(result);
    assertEquals(expectedMSDB, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotesReturnsNonEmptyCollection_NJgY0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Collection<QuoteDataBean> result = tradeDirect.getAllQuotes();
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderBuy_Vrrv0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 1; // Assuming an existing order ID for a buy order
    boolean twoPhase = true; // Using two-phase commit
    OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
    assertNotNull(result);
    assertEquals("closed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderSell_PUyq1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 2; // Assuming an existing order ID for a sell order
    boolean twoPhase = false; // Not using two-phase commit
    OrderDataBean result = tradeDirect.completeOrder(orderID, twoPhase);
    assertNotNull(result);
    assertEquals("closed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAlreadyCompleted_kGvB2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 3; // Assuming an existing order ID that is already completed
    boolean twoPhase = true; // Using two-phase commit
    Exception exception = assertThrows(Exception.class, () -> {
      tradeDirect.completeOrder(orderID, twoPhase);
    });
    assertTrue(exception.getMessage().contains("attempt to complete Order that is already completed"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderWithAlreadyCompletedOrder_SPRS2() {
    TradeDirect tradeDirect = new TradeDirect();
    Integer orderID = 3; // Assuming this order ID is already completed
    boolean twoPhase = true; // Using two-phase commit
    Exception exception = assertThrows(Exception.class, () -> {
      tradeDirect.completeOrder(orderID, twoPhase);
    });
    assertTrue(exception.getMessage().contains("already completed"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Setup
    String symbol = "AAPL";
    when(resultSet.next()).thenReturn(true);
    when(resultSet.getString("symbol")).thenReturn(symbol);
    when(resultSet.getBigDecimal("price")).thenReturn(new BigDecimal("150.00"));
    when(resultSet.getBigDecimal("open")).thenReturn(new BigDecimal("145.00"));
    when(resultSet.getBigDecimal("high")).thenReturn(new BigDecimal("155.00"));
    when(resultSet.getBigDecimal("low")).thenReturn(new BigDecimal("140.00"));
    when(resultSet.getDouble("change")).thenReturn(5.00);
    when(resultSet.getDouble("volume")).thenReturn(3000000.00);
    // Execution
    QuoteDataBean quoteDataBean = tradeDirect.getQuote(symbol);
    // Verification
    verify(connection).prepareStatement("select * from quoteejb q where q.symbol=?");
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).executeQuery();
    verify(connection).commit();
    // Assertions
    assertNotNull(quoteDataBean, "The returned QuoteDataBean should not be null");
    assertEquals(symbol, quoteDataBean.getSymbol(), "The symbol should match the input symbol");
    assertEquals(new BigDecimal("150.00"), quoteDataBean.getPrice(), "The price should match the result set");
    assertEquals(new BigDecimal("145.00"), quoteDataBean.getOpen(), "The open price should match the result set");
    assertEquals(new BigDecimal("155.00"), quoteDataBean.getHigh(), "The high price should match the result set");
    assertEquals(new BigDecimal("140.00"), quoteDataBean.getLow(), "The low price should match the result set");
    assertEquals(5.00, quoteDataBean.getChange(), "The change should match the result set");
    assertEquals(3000000.00, quoteDataBean.getVolume(), "The volume should match the result set");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteWithValidSymbol_iPjB0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL"; // Assuming 'AAPL' is a valid symbol in the database
    QuoteDataBean result = tradeDirect.getQuote(symbol);
    assertNotNull(result);
    assertEquals("AAPL", result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    // Arrange
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean expectedQuote = new QuoteDataBean(symbol, companyName, 0.0, price, price, price, price, 0.0);
    // Act
    QuoteDataBean resultQuote = tradeDirect.createQuote(symbol, companyName, price);
    // Assert
    assertNotNull(resultQuote);
    assertEquals(expectedQuote.getSymbol(), resultQuote.getSymbol());
    assertEquals(expectedQuote.getCompanyName(), resultQuote.getCompanyName());
    assertEquals(0, expectedQuote.getVolume());
    assertEquals(0.0, resultQuote.getChange());
    assertEquals(expectedQuote.getPrice(), resultQuote.getPrice());
    assertEquals(expectedQuote.getOpen(), resultQuote.getOpen());
    assertEquals(expectedQuote.getHigh(), resultQuote.getHigh());
    assertEquals(expectedQuote.getLow(), resultQuote.getLow());
    verify(preparedStatement).setString(1, symbol);
    verify(preparedStatement).setString(2, companyName);
    verify(preparedStatement).setDouble(3, 0.0);
    verify(preparedStatement).setBigDecimal(4, price);
    verify(preparedStatement).setBigDecimal(5, price);
    verify(preparedStatement).setBigDecimal(6, price);
    verify(preparedStatement).setBigDecimal(7, price);
    verify(preparedStatement).setDouble(8, 0.0);
    verify(preparedStatement).executeUpdate();
    verify(preparedStatement).close();
    verify(connection).close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellValidTransaction_mAyK3() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertNotEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellAsynchMode_lyEC4() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertNotEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellAsynch2PhaseMode_zZWa5() throws Exception {
    TradeDirect trade = new TradeDirect();
    String userID = "validUser";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertNotEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullAccountData_TDHF0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    AccountDataBean accountData = null;
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullQuoteData_vVrm2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    QuoteDataBean quoteData = null;
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidData_CjxH3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    AccountDataBean accountData = new AccountDataBean();
    HoldingDataBean holdingData = new HoldingDataBean();
    QuoteDataBean quoteData = new QuoteDataBean();
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertNotEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithExceptionDuringOrderCreation_otGS4() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    Connection conn = null; // Mock or create a suitable connection object
    Integer holdingID = 1; // Assuming a valid holding ID
    String userID = "user123"; // Assuming a valid user ID
    int orderProcessingMode = TradeConfig.SYNCH; // Assuming TradeConfig.SYNCH is a valid mode
    OrderDataBean result = tradeDirect.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataSynchMode_AOJj3() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user4";
    Integer holdingID = 4;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("completed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAsynchMode_kKak4() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user5";
    Integer holdingID = 5;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("open", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAsynch2PhaseMode_qCCo5() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user6";
    Integer holdingID = 6;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("open", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithGlobalTransactionCommit_QmZC8() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user9";
    Integer holdingID = 9;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("open", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAndCommit_lYZt12() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user13";
    Integer holdingID = 13;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("completed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidDataAndImmediateCommit_mRhu13() throws Exception {
    TradeDirect trade = new TradeDirect();
    Connection conn = null; // Mock or stub this as needed
    String userID = "user14";
    Integer holdingID = 14;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = trade.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("completed", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NormalConditions_WcYb0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1000;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertTrue(result.getPrice().compareTo(new BigDecimal("0")) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_PennyStockRecovery_Assr1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "XYZ";
    BigDecimal changeFactor = new BigDecimal("1.00"); // This should be overridden
    double sharesTraded = 500;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertTrue(result.getPrice().compareTo(TradeConfig.PENNY_STOCK_PRICE) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NoPriceUpdateConfig_cmgO3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "NOUPD";
    BigDecimal changeFactor = new BigDecimal("1.10");
    double sharesTraded = 1500;
    boolean publishQuotePriceChange = true;
    TradeConfig.setUpdateQuotePrices(false);
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(result);
    assertEquals(BigDecimal.ZERO, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_NormalConditions_ibes0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1000.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(result);
    assertTrue(result.getPrice().compareTo(result.getOpen()) != 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_MaximumStockSplit_OJRr2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "HIGH";
    BigDecimal changeFactor = new BigDecimal("1000.00"); // Simulate initial high price
    double sharesTraded = 200.0;
    boolean publishQuotePriceChange = true;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
    assertNotNull(result);
    assertEquals(TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER, changeFactor);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolumeInt_ExceptionHandling_Ertw4() {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "INVALID";
    BigDecimal changeFactor = new BigDecimal("1.00");
    double sharesTraded = 100;
    boolean publishQuotePriceChange = false;
    try {
      tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, publishQuotePriceChange);
      fail("Exception should have been thrown");
    } catch (Exception e) {
      assertNotNull(e);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_qVgr0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeDirect.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
    assertEquals(userID, result.getProfileID());
    assertEquals(openBalance, result.getOpenBalance());
    assertEquals(openBalance, result.getBalance());
    assertEquals(0, result.getLoginCount());
    assertEquals(0, result.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Setup
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1500.0;
    // Mocking static method
    try (MockedStatic<TradeConfig> mockedStatic = Mockito.mockStatic(TradeConfig.class)) {
      mockedStatic.when(TradeConfig::getPublishQuotePriceChange).thenReturn(true);
      // Assuming updateQuotePriceVolumeInt returns a new QuoteDataBean based on inputs
      QuoteDataBean expectedQuote = new QuoteDataBean();
      when(resultSet.next()).thenReturn(true);
      when(resultSet.getString("symbol")).thenReturn(symbol);
      when(resultSet.getBigDecimal("price")).thenReturn(new BigDecimal("100"));
      when(resultSet.getDouble("volume")).thenReturn(1000.0);
      // Mocking internal call to updateQuotePriceVolumeInt
      when(tradeDirect.updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, true)).thenReturn(expectedQuote);
      // Execution
      QuoteDataBean result = tradeDirect.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
      // Verification
      verify(connection).prepareStatement(any(String.class));
      verify(preparedStatement).executeQuery();
      verify(tradeDirect).updateQuotePriceVolumeInt(symbol, changeFactor, sharesTraded, true);
      // Assertions
      assertNotNull(result);
      assertEquals(expectedQuote, result);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_DHeV0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String symbol = "AAPL";
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 1500.0;
    QuoteDataBean result = tradeDirect.updateQuotePriceVolume(symbol, changeFactor, sharesTraded);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertTrue(result.getPrice().compareTo(result.getOpen().multiply(changeFactor)) == 0);
    assertEquals(sharesTraded, result.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Arrange
    String userID = "user123";
    AccountProfileDataBean profileData = new AccountProfileDataBean(userID, "password", "John Doe", "123 Main St", "john@example.com", "1234-5678-9012-3456");
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getString("userID")).thenReturn(profileData.getUserID());
    when(resultSet.getString("password")).thenReturn(profileData.getPassword());
    when(resultSet.getString("fullName")).thenReturn(profileData.getFullName());
    when(resultSet.getString("address")).thenReturn(profileData.getAddress());
    when(resultSet.getString("email")).thenReturn(profileData.getEmail());
    when(resultSet.getString("creditCard")).thenReturn(profileData.getCreditCard());
    // Act
    AccountProfileDataBean result = tradeDirect.updateAccountProfile(profileData);
    // Assert
    assertNotNull(result);
    assertEquals(userID, result.getUserID());
    assertEquals("password", result.getPassword());
    assertEquals("John Doe", result.getFullName());
    assertEquals("123 Main St", result.getAddress());
    assertEquals("john@example.com", result.getEmail());
    assertEquals("1234-5678-9012-3456", result.getCreditCard());
    verify(connection).prepareStatement(any(String.class));
    verify(preparedStatement).executeQuery();
    verify(connection).commit();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_IvUY0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = tradeDirect.updateAccountProfile(profileData);
    assertNotNull(updatedProfile);
    assertEquals("pass123", updatedProfile.getPassword());
    assertEquals("John Doe", updatedProfile.getFullName());
    assertEquals("123 Elm St", updatedProfile.getAddress());
    assertEquals("john@example.com", updatedProfile.getEmail());
    assertEquals("1234-5678-9012-3456", updatedProfile.getCreditCard());
    assertEquals("user123", updatedProfile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountDataWithException() throws Exception {
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    when(resultSet.next()).thenReturn(true).thenReturn(false); // Assuming one row is returned
    // Arrange
    String userID = "user123";
    when(connection.prepareStatement(any(String.class))).thenThrow(new RuntimeException("Database error"));
    // Act & Assert
    Exception exception = assertThrows(Exception.class, () -> tradeDirect.getAccountData(userID),
                "Expected getAccountData to throw, but it did not");
    assertTrue(exception.getMessage().contains("Database error"), "Exception message should contain 'Database error'");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_ValidUserID_ReturnsAccountData_nWOe0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    String userID = "validUserID"; // Assuming 'validUserID' is a valid user identifier in the database
    AccountDataBean result = tradeDirect.getAccountData(userID);
    assertNotNull(result);
    assertEquals(userID, result.getProfileID()); // Assuming getProfileID returns the userID if the account data is correctly fetched
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData() throws Exception {
    when(dataSource.getConnection()).thenReturn(connection);
    when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
    when(preparedStatement.executeQuery()).thenReturn(resultSet);
    // Arrange
    String userID = "user123";
    AccountProfileDataBean expectedProfile = new AccountProfileDataBean();
    when(resultSet.next()).thenReturn(true); // Simulate found data
    when(resultSet.getString("profile_userid")).thenReturn(userID);
    when(resultSet.getString("email")).thenReturn("user@example.com");
    when(resultSet.getString("address")).thenReturn("123 Main St");
    // Act
    AccountProfileDataBean result = tradeDirect.getAccountProfileData(userID);
    // Assert
    assertNotNull(result, "The result should not be null");
    assertEquals(userID, result.getUserID(), "The userID should match the input");
    assertEquals("user@example.com", result.getEmail(), "Email should match the expected value");
    assertEquals("123 Main St", result.getAddress(), "Address should match the expected value");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithExtremeConditions_kcxW9() {
    TradeDirect trade = new TradeDirect();
    String userID = "userExtreme";
    String symbol = "GOOGL";
    double quantity = 100000.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    try {
      OrderDataBean result = trade.buy(userID, symbol, quantity, orderProcessingMode);
      assertNotNull(result);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_NoData_krUD0() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result);
    assertEquals(BigDecimal.ZERO, result.getTSIA());
    assertEquals(BigDecimal.ZERO, result.getOpenTSIA());
    assertEquals(0.0, result.getVolume(), 0.0);
    assertTrue(result.getTopGainers().isEmpty());
    assertTrue(result.getTopLosers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_OnlyGainers_tsrf1() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result);
    assertNotEquals(BigDecimal.ZERO, result.getTSIA());
    assertNotEquals(BigDecimal.ZERO, result.getOpenTSIA());
    assertTrue(result.getVolume() > 0);
    assertFalse(result.getTopGainers().isEmpty());
    assertTrue(result.getTopLosers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_OnlyLosers_exqE2() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result);
    assertNotEquals(BigDecimal.ZERO, result.getTSIA());
    assertNotEquals(BigDecimal.ZERO, result.getOpenTSIA());
    assertTrue(result.getVolume() > 0);
    assertTrue(result.getTopGainers().isEmpty());
    assertFalse(result.getTopLosers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_GainersAndLosers_tCqz3() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result);
    assertNotEquals(BigDecimal.ZERO, result.getTSIA());
    assertNotEquals(BigDecimal.ZERO, result.getOpenTSIA());
    assertTrue(result.getVolume() > 0);
    assertFalse(result.getTopGainers().isEmpty());
    assertFalse(result.getTopLosers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_EmptyResultSetForTSIA_ERPt5() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result);
    assertEquals(BigDecimal.ZERO, result.getTSIA());
    assertTrue(result.getVolume() == 0);
    assertTrue(result.getTopGainers().isEmpty());
    assertTrue(result.getTopLosers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_EmptyResultSetForOpenTSIA_GgTd6() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result);
    assertEquals(BigDecimal.ZERO, result.getOpenTSIA());
    assertTrue(result.getVolume() == 0);
    assertTrue(result.getTopGainers().isEmpty());
    assertTrue(result.getTopLosers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInternal_EmptyResultSetForVolume_THDy7() throws Exception {
    TradeDirect tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = tradeDirect.getMarketSummaryInternal();
    assertNotNull(result);
    assertTrue(result.getVolume() == 0);
    assertFalse(result.getTopGainers().isEmpty() || result.getTopLosers().isEmpty());
  }
}