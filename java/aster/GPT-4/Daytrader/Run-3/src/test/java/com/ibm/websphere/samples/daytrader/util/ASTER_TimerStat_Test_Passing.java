/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TimerStat_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMax_initialCondition_YUdG0() {
    TimerStat timerStat = new TimerStat();
    assertEquals(0.0, timerStat.getMax(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalTime_VxPr0() {
    TimerStat timerStat = new TimerStat();
    assertEquals(0.0, timerStat.getTotalTime(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCountInitialValue_BcsM0() {
    TimerStat timerStat = new TimerStat();
    assertEquals(0, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxSecs_VUZW0() {
    TimerStat timerStat = new TimerStat();
    double expected = 0.0; // Assuming max is initialized to 0
    assertEquals(expected, timerStat.getMaxSecs(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCount_XHgj0_cErD0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setCount(5);
    assertEquals(5, timerStat.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMax_hpFJ0_PWyZ0() {
    TimerStat timerStat = new TimerStat();
    timerStat.setMax(10000.0); // Setting max in milliseconds
    assertEquals(10.0, timerStat.getMaxSecs(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMin_OPyF0_CvZm0() {
    TimerStat timerStat = new TimerStat();
    double expectedMin = 5.0;
    timerStat.setMin(expectedMin * 1000); // Assuming setMin expects milliseconds
    assertEquals(expectedMin, timerStat.getMinSecs(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalTime_tTgK0_xvsT0() {
    TimerStat timerStat = new TimerStat();
    double expectedTime = 100.0;
    timerStat.setTotalTime(expectedTime);
    assertEquals(expectedTime, timerStat.getTotalTime(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMinSecs_OHUS0_fid2() {
    TimerStat timerStat = new TimerStat();
    double result = timerStat.getMinSecs();
    assertEquals(0.0, result, 1000000.001);
  }
}