/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import javax.json.JsonObject;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Coverage_Test_Failing {
  private MarketSummaryDataBean marketSummaryDataBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testJsonObjectBuilderCreation_ZHsI0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean();
    JsonObject jsonObject = marketSummary.toJSON();
    assertNotNull(jsonObject);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTSIAValue_wyab9() {
    BigDecimal tsia = new BigDecimal("1000");
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(tsia, new BigDecimal("950"), 1000, new ArrayList<>(), new ArrayList<>());
    JsonObject jsonObject = marketSummary.toJSON();
    assertEquals(tsia, jsonObject.getJsonNumber("tsia"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testVolumeValue_TSBA10() {
    double volume = 1000;
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("1000"), new BigDecimal("950"), volume, new ArrayList<>(), new ArrayList<>());
    JsonObject jsonObject = marketSummary.toJSON();
    assertEquals(volume, jsonObject.getJsonNumber("volume").doubleValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDateValue_zfRS11() {
    String date = "2023-10-01"; // Example date
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("1000"), new BigDecimal("950"), 1000, new ArrayList<>(), new ArrayList<>());
    JsonObject jsonObject = marketSummary.toJSON();
    assertEquals(date, jsonObject.getString("date"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEmptyTopGainersAndLosers_oeKK12_1() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("1000"), new BigDecimal("950"), 1000, new ArrayList<>(), new ArrayList<>());
    JsonObject jsonObject = marketSummary.toJSON();
    assertFalse(jsonObject.containsKey("gainer1_stock"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEmptyTopGainersAndLosers_oeKK12_2() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("1000"), new BigDecimal("950"), 1000, new ArrayList<>(), new ArrayList<>());
    JsonObject jsonObject = marketSummary.toJSON();
    assertFalse(jsonObject.containsKey("loser1_stock"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullTopGainersAndLosers_ZeHP0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 1000, null, null);
    String result = marketSummary.toString();
    assertTrue(result.contains("Current Top Gainers:"));
    assertTrue(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEmptyTopGainersAndLosers_oeKK12() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("1000"), new BigDecimal("950"), 1000, new ArrayList<>(), new ArrayList<>());
    JsonObject jsonObject = marketSummary.toJSON();
    assertFalse(jsonObject.containsKey("gainer1_stock"));
    assertFalse(jsonObject.containsKey("loser1_stock"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullTopGainersAndLosers_ZeHP0_1_fid3() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 1000, null, null);
    String result = marketSummary.toString();
    assertTrue(result.contains("Current Top Gainers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullTopGainersAndLosers_ZeHP0_2_fid3() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 1000, null, null);
    String result = marketSummary.toString();
    assertTrue(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithMultipleTopLosers_JaFN5_RsZw0_1_fid3() {
    Collection<QuoteDataBean> losers = new ArrayList<>();
    losers.add(new QuoteDataBean()); // Assuming a default constructor exists
    losers.add(new QuoteDataBean()); // Assuming a default constructor exists
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 1000, new ArrayList<>(), losers);
    String result = marketSummary.toString();
    assertTrue(result.contains("Loser1"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithMultipleTopLosers_JaFN5_RsZw0_2() {
    Collection<QuoteDataBean> losers = new ArrayList<>();
    losers.add(new QuoteDataBean()); // Assuming a default constructor exists
    losers.add(new QuoteDataBean()); // Assuming a default constructor exists
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 1000, new ArrayList<>(), losers);
    String result = marketSummary.toString();
    assertTrue(result.contains("Loser2"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_NullTopGainers_PyZv1_CIkK0_6() {
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    topLosers.add(new QuoteDataBean()); // Assuming a default constructor exists
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(
                new BigDecimal("1000"), new BigDecimal("950"), 5000, null, topLosers);
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTopLosersChange_meuL7_DIxP0() {
    Collection<QuoteDataBean> topLosers = new ArrayList<>();
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("1000"), new BigDecimal("950"), 1000, new ArrayList<>(), topLosers);
    JsonObject jsonObject = marketSummary.toJSON();
    assertEquals(-10.00, jsonObject.getJsonNumber("loser1_change").doubleValue());
  }
}