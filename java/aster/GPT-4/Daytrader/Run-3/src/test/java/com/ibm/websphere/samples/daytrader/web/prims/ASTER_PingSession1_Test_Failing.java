/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession1_Test_Failing {
  private static String initTime;
  @Mock
  private ServletConfig mockConfig;
  @InjectMocks
  private static int count;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_PSbp0() throws ServletException, IOException {
    PingSession1 pingSession = new PingSession1();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    pingSession.doPost(request, response);
    verify(request, atLeastOnce()).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_WelZ0() {
    PingSession1 session = new PingSession1();
    String expected = "HTTP Session Key: Tests management of a read only unique id";
    assertEquals(expected, session.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_zlsf0() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    PingSession1 pingSession1 = new PingSession1();
    pingSession1.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse, never()).flushBuffer(); // Verify flushBuffer was never called
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_WelZ0_fid2() {
    PingSession1 session = new PingSession1();
    String actual = session.getServletInfo();
    String expected = "HTTP Session Key: Tests management of a read only unique id";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_zlsf0_fid2() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    PingSession1 pingSession1 = null;
    try {
      pingSession1 = new PingSession1();
    } catch (ExceptionInInitializerError e) {
      fail("Initialization of PingSession1 failed.");
    }
    pingSession1.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).flushBuffer(); // Verify flushBuffer was called
  }
}