/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.beanval;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServletBeanValSimple1_Coverage_Test_Failing {
  private ServletConfig mockConfig;
  private PingServletBeanValSimple1 pingServlet;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_KMwZ0() {
    PingServletBeanValSimple1 pingServlet = new PingServletBeanValSimple1();
    String result = pingServlet.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetContentType_Ecqb1_lXNF0() throws ServletException, IOException {
    PingServletBeanValSimple1 pingServlet = new PingServletBeanValSimple1();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    pingServlet.doGet(req, res);
    verify(res).setContentType(eq("application/json"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogErrorOnException_dJqC8_dwiZ0() throws ServletException, IOException {
    PingServletBeanValSimple1 pingServlet = new PingServletBeanValSimple1();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(outputStream);
    doThrow(new RuntimeException("Test Exception")).when(outputStream).println(anyString());
    pingServlet.doGet(req, res);
    verify(res).sendError(eq(500), contains("Test Exception"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetContentType_Ecqb1_lXNF0_fid1() throws ServletException, IOException {
    PingServletBeanValSimple1 pingServlet = new PingServletBeanValSimple1();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    pingServlet.doGet(req, res);
    verify(res).setContentType(eq("text/html"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogErrorOnException_dJqC8_dwiZ0_fid1() throws ServletException, IOException {
    PingServletBeanValSimple1 pingServlet = new PingServletBeanValSimple1();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(outputStream);
    doThrow(new RuntimeException("Test Exception")).when(outputStream).println(anyString());
    pingServlet.doGet(req, res);
    verify(res).sendError(eq(500), anyString());
  }
}