/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithAllFieldsSet_LgVU0_5_fid2() {
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    BigDecimal purchasePrice = new BigDecimal("150.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(100, purchasePrice, purchaseDate, account, quote);
    String result = holding.toString();
    assertTrue(result.contains("quoteID:null"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithAllFieldsSet_LgVU0() {
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    BigDecimal purchasePrice = new BigDecimal("150.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(100, purchasePrice, purchaseDate, account, quote);
    String result = holding.toString();
    assertTrue(result.contains("Holding Data for holding: null"));
    assertTrue(result.contains("quantity:100.0"));
    assertTrue(result.contains("purchasePrice:150.00"));
    assertTrue(result.contains("purchaseDate:" + purchaseDate.toString()));
    assertTrue(result.contains("quoteID:null"));
  }
}