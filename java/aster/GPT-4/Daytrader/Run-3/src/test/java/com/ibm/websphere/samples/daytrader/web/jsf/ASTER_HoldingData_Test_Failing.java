/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTML_QMjU0() {
    HoldingData holdingData = new HoldingData();
    String result = holdingData.getGainHTML();
    assertEquals("", result); // Assuming the method should return an empty string if gain is null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTML_QMjU0_fid2() {
    HoldingData holdingData = new HoldingData();
    String result = holdingData.getGainHTML();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_Zjxs0_fid2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expectedPrice = new BigDecimal("100.00");
    assertEquals(expectedPrice, holdingData.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_wRFS0_fid2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = BigDecimal.ZERO; // Assuming default marketValue is zero
    assertEquals(expected, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_sLcb0_fid2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = new BigDecimal("0"); // Assuming default basis is 0
    assertEquals(expected, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_xAOd0_fid2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = BigDecimal.ZERO; // Assuming default gain is zero if not set
    assertEquals(expected, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePrice_JMRD0_fid2() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = BigDecimal.ZERO; // Assuming default value set in the constructor or elsewhere
    assertEquals(expected, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_lPaH0_IGEs0_fid3() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expectedPrice = new BigDecimal("100.00");
    holdingData.setPrice(expectedPrice);
    assertEquals(expectedPrice, holdingData.getPurchasePrice());
  }
}