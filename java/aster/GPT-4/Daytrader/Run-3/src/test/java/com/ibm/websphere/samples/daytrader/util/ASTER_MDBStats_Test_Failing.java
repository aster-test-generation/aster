/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MDBStats_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_NewType_wskz0_vEuP0_2() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "newType";
    long sendTime = 100;
    long recvTime = 200;
    TimerStat result = mdbStats.addTiming(type, sendTime, recvTime);
    assertEquals(100, result.getTotalTime(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeHigherTime_XAPT1_vJxb0_1() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "existingType";
    mdbStats.addTiming(type, 100, 1000); // Initial call to set up
    TimerStat result = mdbStats.addTiming(type, 150, 300);
    assertEquals(2, result.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeHigherTime_XAPT1_vJxb0_2() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "existingType";
    mdbStats.addTiming(type, 100, 200); // Initial call to set up
    TimerStat result = mdbStats.addTiming(type, 150, 300);
    assertEquals(250, result.getTotalTime(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeHigherTime_XAPT1_vJxb0_3() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "existingType";
    mdbStats.addTiming(type, 100, 200); // Initial call to set up
    TimerStat result = mdbStats.addTiming(type, 150, 300);
    assertEquals(150, result.getMax(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeHigherTime_XAPT1_vJxb0_4() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "existingType";
    mdbStats.addTiming(type, 100, 200); // Initial call to set up
    TimerStat result = mdbStats.addTiming(type, 150, 300);
    assertEquals(100, result.getMin(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeLowerTime_IIdC2_rtwJ0_2() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "existingType";
    mdbStats.addTiming(type, 100, 200); // Initial call to set up
    TimerStat result = mdbStats.addTiming(type, 150, 225);
    assertEquals(175, result.getTotalTime(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_SameTimeTwice_ZKEB3_HqHd0_2() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "sameTimeType";
    mdbStats.addTiming(type, 100, 200);
    TimerStat result = mdbStats.addTiming(type, 100, 200);
    assertEquals(200, result.getTotalTime(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeHigherTime_XAPT1_vJxb0_1_fid1() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "existingType";
    mdbStats.addTiming(type, 100, 200); // Initial call to set up
    TimerStat result = mdbStats.addTiming(type, 150, 300);
    assertEquals(2, result.getCount());
  }
}