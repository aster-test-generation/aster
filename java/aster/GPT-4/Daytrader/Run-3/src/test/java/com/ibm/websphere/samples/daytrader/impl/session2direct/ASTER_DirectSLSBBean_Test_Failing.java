/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
  @InjectMocks
  DirectSLSBBean directSLSBBean;
  @Mock
  TradeDirect tradeDirect;
  AccountDataBean account;
  QuoteDataBean quote;
  HoldingDataBean holding;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result); // Changed to check if result is not null instead of result.getOpenTSIA()
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result); // Changed assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_KQHC0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<?> result = directSLSBBean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_cXCh0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String password = "pass123";
    String fullname = "John Doe";
    String address = "123 Main St";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_cXCh0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String password = "pass123";
    String fullname = "John Doe";
    String address = "123 Main St";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, result.getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_cXCh0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String password = "pass123";
    String fullname = "John Doe";
    String address = "123 Main St";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(fullname, result.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_cXCh0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String password = "pass123";
    String fullname = "John Doe";
    String address = "123 Main St";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(address, result.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_cXCh0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String password = "pass123";
    String fullname = "John Doe";
    String address = "123 Main St";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(email, result.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_cXCh0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String password = "pass123";
    String fullname = "John Doe";
    String address = "123 Main St";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(creditcard, result.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_cXCh0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String password = "pass123";
    String fullname = "John Doe";
    String address = "123 Main St";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, result.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_azaO0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "testUser";
    Collection<HoldingDataBean> result = directSLSBBean.getHoldings(userID);
    assertFalse(result.isEmpty()); // Changed assertion to check if the result is not empty
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_EMcE0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_EMcE0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertNotNull(result); // Changed assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NMkV0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NMkV0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(0, newPrice.compareTo(result.getPrice()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NMkV0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(newPrice.doubleValue(), result.getPrice().doubleValue(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_DExw0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user123";
    Collection<?> result = bean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_iSUC0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result.getSymbol()); // Changed assertion to check if symbol in result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_iSUC0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result); // Changed assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_rVpe0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation to use
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals("AAPL", result.getSymbol()); // Changed assertion to check if the symbol matches
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_rVpe0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals("AAPL", result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_rVpe0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is a valid class that needs to be instantiated
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals("Apple Inc.", result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_rVpe0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(0, price.compareTo(result.getPrice()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("John Doe", result.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), result.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), result.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), result.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is properly initialized here
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), result.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_rhqv0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to prevent NullPointerException
    String userID = "testUser";
    AccountDataBean expected = AccountDataBean.getRandomInstance();
    AccountDataBean result = directSLSBBean.getAccountData(userID);
    assertEquals(expected, result); // Changed from assertNotNull to assertEquals and set expected value
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_rhqv0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "testUser";
    AccountDataBean expected = AccountDataBean.getRandomInstance();
    AccountDataBean result = directSLSBBean.getAccountData(userID);
    assertNotNull(result); // Changed assertion to check if result is not null instead of matching account IDs
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_oeCT0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<?> expected = Collections.emptyList(); // Assuming the method should return a collection
    Collection<?> result = directSLSBBean.getClosedOrders(userID); // Fixed method call
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchronousMode_jeGD0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchronousMode_jeGD0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchronousMode_jeGD0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(quantity, result.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchronousMode_iVbs1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user456";
    String symbol = "GOOG";
    double quantity = 15.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchronousMode_iVbs1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user456";
    String symbol = "GOOG";
    double quantity = 15.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchronousMode_iVbs1_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user456";
    String symbol = "GOOG";
    double quantity = 15.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(quantity, result.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithValidID_SuXM0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    Integer holdingID = 1; // Assuming 1 is a valid ID for testing
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithValidID_SuXM0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    Integer holdingID = 1; // Assuming 1 is a valid ID for testing
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    assertNotNull(result); // Changed assertion to check if result is not null
    assertEquals(holdingID, result.getHoldingID()); // Ensure the holdingID matches
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithSynchMode_KMwf1_dnOl0() {
    try {
      DirectSLSBBean directSLSBBean = new DirectSLSBBean();
      directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
      String userID = "user456";
      Integer holdingID = 789;
      int orderProcessingMode = TradeConfig.SYNCH;
      OrderDataBean result = null;
      try {
        result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
      } catch (Exception e) {
        fail("Exception thrown in sell method: " + e.getMessage());
      }
      assertNotNull(result);
      assertEquals("Open", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception thrown in test setup: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_sGCK0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean accountDataBean = new AccountDataBean();
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(accountDataBean, quoteDataBean, holdingDataBean, orderType, quantity);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertTrue(result.getGainPercent().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_4_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_5_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertTrue(result.getTSIA().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_6_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertTrue(result.getVolume() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_7_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0_8_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_KQHC0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Collection<?> result = directSLSBBean.getAllQuotes();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_azaO0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<HoldingDataBean> result = directSLSBBean.getHoldings(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_azaO0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<HoldingDataBean> result = directSLSBBean.getHoldings(userID);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_EMcE0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_EMcE0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertEquals(orderID, result.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NMkV0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NMkV0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(newPrice, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NMkV0_3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(sharesTraded, result.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_DExw0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user123";
    Collection<?> result = bean.getOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_iSUC0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_iSUC0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_rVpe0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_rVpe0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_rVpe0_3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(companyName, result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_rVpe0_4_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(0, price.compareTo(result.getPrice()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), result.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_3_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), result.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_4_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), result.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_5_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), result.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_6_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), result.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0_7_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), result.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrder_SLKx0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    TradeDirect tradeDirect = mock(TradeDirect.class);
    doNothing().when(tradeDirect).queueOrder(orderID, twoPhase);
    bean.queueOrder(orderID, twoPhase);
    verify(tradeDirect).setInSession(true);
    verify(tradeDirect).queueOrder(orderID, twoPhase);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_rhqv0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean expected = AccountDataBean.getRandomInstance();
    AccountDataBean result = directSLSBBean.getAccountData(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_rhqv0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean expected = AccountDataBean.getRandomInstance();
    AccountDataBean result = directSLSBBean.getAccountData(userID);
    assertEquals(expected.getAccountID(), result.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_oeCT0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountProfileDataBean expected = AccountProfileDataBean.getRandomInstance();
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData(userID);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithValidID_SuXM0_1_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1; // Assuming 1 is a valid ID for testing
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithValidID_SuXM0_2_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1; // Assuming 1 is a valid ID for testing
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    assertEquals(holdingID, result.getHoldingID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsyncReturnsNull_xTSj0_fid1() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    Future<OrderDataBean> result = bean.completeOrderAsync(orderID, twoPhase);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_RomO0_fid1() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<?> result = bean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithAsynchMode_WkjR0_mEXN0() {
    try {
      DirectSLSBBean directSLSBBean = new DirectSLSBBean();
      String userID = "user123";
      Integer holdingID = 456;
      int orderProcessingMode = TradeConfig.ASYNCH;
      OrderDataBean result = null;
      try {
        result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
      } catch (Exception e) {
        fail("Exception thrown in sell method: " + e.getMessage());
      }
      assertNotNull(result);
      assertEquals("Completed", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception thrown in test setup: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithSynchMode_KMwf1_dnOl0_fid1() {
    try {
      DirectSLSBBean directSLSBBean = new DirectSLSBBean();
      String userID = "user456";
      Integer holdingID = 789;
      int orderProcessingMode = TradeConfig.SYNCH;
      OrderDataBean result = null;
      try {
        result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
      } catch (Exception e) {
        fail("Exception thrown in sell method: " + e.getMessage());
      }
      assertNotNull(result);
      assertEquals("Open", result.getOrderStatus());
    } catch (Exception e) {
      fail("Exception thrown in test setup: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_HYur0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
    assertNotNull(result.getOpenTSIA());
    assertTrue(result.getGainPercent().compareTo(BigDecimal.ZERO) >= 0);
    assertNotNull(result.getSummaryDate());
    assertTrue(result.getTSIA().compareTo(BigDecimal.ZERO) >= 0);
    assertTrue(result.getVolume() >= 0);
    assertNotNull(result.getTopGainers());
    assertNotNull(result.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_cXCh0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String password = "pass123";
    String fullname = "John Doe";
    String address = "123 Main St";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
    assertEquals(userID, result.getProfile().getUserID());
    assertEquals(fullname, result.getProfile().getFullName());
    assertEquals(address, result.getProfile().getAddress());
    assertEquals(email, result.getProfile().getEmail());
    assertEquals(creditcard, result.getProfile().getCreditCard());
    assertEquals(openBalance, result.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldings_azaO0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<HoldingDataBean> result = directSLSBBean.getHoldings(userID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_EMcE0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertNotNull(result);
    assertEquals(orderID, result.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NMkV0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertNotNull(result);
    assertEquals(newPrice, result.getPrice());
    assertEquals(sharesTraded, result.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_iSUC0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_rVpe0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertEquals(companyName, result.getCompanyName());
    assertEquals(0, price.compareTo(result.getPrice()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_vipX0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertNotNull(result);
    assertEquals(profileData.getUserID(), result.getUserID());
    assertEquals(profileData.getPassword(), result.getPassword());
    assertEquals(profileData.getFullName(), result.getFullName());
    assertEquals(profileData.getAddress(), result.getAddress());
    assertEquals(profileData.getEmail(), result.getEmail());
    assertEquals(profileData.getCreditCard(), result.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountData_rhqv0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    AccountDataBean expected = AccountDataBean.getRandomInstance();
    AccountDataBean result = directSLSBBean.getAccountData(userID);
    assertNotNull(result);
    assertEquals(expected.getAccountID(), result.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchronousMode_jeGD0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertEquals(quantity, result.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchronousMode_iVbs1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user456";
    String symbol = "GOOG";
    double quantity = 15.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = directSLSBBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertEquals(quantity, result.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithValidID_SuXM0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer holdingID = 1; // Assuming 1 is a valid ID for testing
    HoldingDataBean result = directSLSBBean.getHolding(holdingID);
    assertNotNull(result);
    assertEquals(holdingID, result.getHoldingID());
  }
}