/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_Log_Test_Failing {
  private static final Logger log = Logger.getLogger(Log.class.getName());

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTrace_yuyM0() {
    Log spyLog = spy(Log.class);
    doNothing().when(spyLog).trace(anyString());
    spyLog.trace("TestMessage", "param1", 2, 3.0, true, 'c');
    verify(spyLog).trace("TestMessage(param1, 2, 3.0), true, c");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTrace_SDoL0() {
    String message = "TestMessage";
    Object parm1 = new Object();
    Object parm2 = new Object();
    Object parm3 = new Object();
    Object parm4 = new Object();
    Log spyLog = spy(Log.class);
    doNothing().when(spyLog).trace(anyString());
    spyLog.trace(message, parm1, parm2, parm3, parm4);
    verify(spyLog).trace("TestMessage(" + parm1 + ", " + parm2 + ", " + parm3 + "), " + parm4);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorMethod_cXqd0() {
    Throwable mockThrowable = mock(Throwable.class);
    Log.error("Error message part 1", "Error message part 2", mockThrowable);
    verify(mockThrowable).printStackTrace();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTrace_jlIk0() {
    String message = "TestMessage";
    Object parm1 = "Param1";
    Object parm2 = "Param2";
    Object parm3 = "Param3";
    Object parm4 = "Param4";
    Object parm5 = "Param5";
    Object parm6 = "Param6";
    String expectedMessage = "TestMessage(Param1, Param2, Param3), Param4, Param5, Param6";
    Log spyLog = spy(Log.class);
    doNothing().when(spyLog).trace(expectedMessage);
    Log.trace(message, parm1, parm2, parm3, parm4, parm5, parm6);
    verify(spyLog).trace(expectedMessage);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorMethod_cTaP0() {
    Throwable mockThrowable = mock(Throwable.class);
    Log.error("Error message 1", "Error message 2", "Error message 3", mockThrowable);
    verify(mockThrowable).printStackTrace();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoTrace_lDTM0_fid1() {
    Logger log = Logger.getLogger(Log.class.getName());
    log.setLevel(Level.FINE);
    assertTrue(Log.doTrace());
  }
}