/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_JSFLoginFilter_Coverage_Test_Failing {
  private HttpServletRequest request;
  private HttpServletResponse response;
  private FilterChain chain;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_UserIDIsNullAndUrlContainsPortfolio_ASuS3_ikgR0() throws IOException, ServletException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("/portfolio");
    JSFLoginFilter jsfLoginFilter = new JSFLoginFilter();
    jsfLoginFilter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
    verify(chain, never()).doFilter(any(ServletRequest.class), any(ServletResponse.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_UserIDIsNullAndUrlContainsQuote_vdnR4_WxtK0() throws IOException, ServletException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("/quote");
    JSFLoginFilter jsfLoginFilter = new JSFLoginFilter();
    jsfLoginFilter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
    verify(chain, never()).doFilter(any(ServletRequest.class), any(ServletResponse.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_UserIDIsNullAndUrlContainsOrder_JBXZ5_DaPK0() throws IOException, ServletException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("/order");
    JSFLoginFilter jsfLoginFilter = new JSFLoginFilter();
    jsfLoginFilter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
    verify(chain, never()).doFilter(any(ServletRequest.class), any(ServletResponse.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_UserIDIsNullAndUrlContainsMarketSummary_Qnei6_WQnC0() throws IOException, ServletException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("/marketSummary");
    JSFLoginFilter jsfLoginFilter = new JSFLoginFilter();
    jsfLoginFilter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
    verify(chain, never()).doFilter(any(ServletRequest.class), any(ServletResponse.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_UserIDIsNotNull_DCbW7_OHLn0() throws IOException, ServletException {
    JSFLoginFilter jsfLoginFilter = new JSFLoginFilter(); // Initialize the filter
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("someUserID");
    when(request.getServletPath()).thenReturn("/someOtherPath");
    jsfLoginFilter.doFilter(request, response, chain);
    verify(chain).doFilter(request, response);
    verify(response, never()).sendRedirect("welcome.faces");
    verify(chain, times(1)).doFilter(request, response); // Added verification for the number of interactions
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_UserIDIsNotNull_DCbW7_OHLn0_fid1() throws IOException, ServletException {
    JSFLoginFilter jsfLoginFilter = new JSFLoginFilter(); // Initialize the filter
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("someUserID");
    when(request.getServletPath()).thenReturn("/someOtherPath");
    jsfLoginFilter.doFilter(request, response, chain);
    verify(chain).doFilter(request, response);
    verify(response, never()).sendRedirect("welcome.faces");
  }
}