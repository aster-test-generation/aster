/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_Bpgt0() {
    HoldingData holdingData = new HoldingData();
    assertEquals(0.0, holdingData.getQuantity(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_lxUB0() {
    HoldingData holdingData = new HoldingData();
    String expected = null; // Assuming default null since no setter or initialization shown
    assertEquals(expected, holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePrice_IEun0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expectedPrice = new BigDecimal("100.00");
    holdingData.setPurchasePrice(expectedPrice);
    assertEquals(expectedPrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDate_VVxl0() {
    HoldingData holdingData = new HoldingData();
    Date expectedDate = null; // Assuming default constructor sets purchaseDate to null
    assertEquals(expectedDate, holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_ETXj0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = new BigDecimal("100.00");
    holdingData.setBasis(expected);
    assertEquals(expected, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDate_fllr0() {
    HoldingData holdingData = new HoldingData();
    Date expectedDate = new Date();
    holdingData.setPurchaseDate(expectedDate);
    assertEquals(expectedDate, holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteID_NLQB0() {
    HoldingData hd = new HoldingData();
    String expected = "Q12345";
    hd.setQuoteID(expected);
    assertEquals(expected, hd.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_Zjxs0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expectedPrice = new BigDecimal("100.00");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_wRFS0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = BigDecimal.ZERO; // Assuming default marketValue is zero
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBasis_sLcb0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = new BigDecimal("0"); // Assuming default basis is 0
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_xAOd0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = BigDecimal.ZERO; // Assuming default gain is zero if not set
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingID_xugN0() {
    HoldingData holdingData = new HoldingData();
    Integer expected = null; // Assuming default null since no setter or initialization shown
    Integer actual = holdingData.getHoldingID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchasePrice_JMRD0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = BigDecimal.ZERO; // Assuming default value set in the constructor or elsewhere
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_lPaH0_IGEs0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expectedPrice = new BigDecimal("100.00");
    holdingData.setPrice(expectedPrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGain_PNrB0_kAVg0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expectedGain = new BigDecimal("100.00");
    holdingData.setGain(expectedGain);
    assertEquals(expectedGain, holdingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_JugP0_Gknw0() {
    HoldingData holdingData = new HoldingData();
    double expectedQuantity = 100.0;
    holdingData.setQuantity(expectedQuantity);
    assertEquals(expectedQuantity, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValue_ASSm0_WVOw0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expectedValue = new BigDecimal("100.00");
    holdingData.setMarketValue(expectedValue);
    assertEquals(expectedValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_SvWd0_CCWI0() {
    HoldingData hd = new HoldingData();
    Integer expectedID = 123;
    hd.setHoldingID(expectedID);
    assertEquals(expectedID, hd.getHoldingID());
  }
}