/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.jaxrs;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TestJSONObject_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0014_OdRS0() {
    TestJSONObject obj = new TestJSONObject();
    String expected = null; // Assuming default value of prop0014 is null
    assertEquals(expected, obj.getProp0014());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0010_HTTf0() {
    TestJSONObject testObject = new TestJSONObject();
    String expected = null; // Assuming default value of prop0010 is null
    assertEquals(expected, testObject.getProp0010());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0011_FOGm0() {
    TestJSONObject obj = new TestJSONObject();
    String expected = null; // Assuming default null, adjust based on actual default or set value
    String actual = obj.getProp0011();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0012_osAm0() {
    TestJSONObject testObject = new TestJSONObject();
    String expected = null; // Assuming default null since prop0012 initialization is not shown
    assertEquals(expected, testObject.getProp0012());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0009_zHlA0() {
    TestJSONObject testObject = new TestJSONObject();
    String expected = null; // Assuming default null, adjust based on actual default or test setup
    assertEquals(expected, testObject.getProp0009());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_EVdn0_nwto0() {
    TestJSONObject testObject = new TestJSONObject();
    String expectedValue = "testValue";
    testObject.setProp0016(expectedValue);
    assertEquals(expectedValue, testObject.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_BiqL0_BQzu0() {
    TestJSONObject obj = new TestJSONObject();
    String expectedValue = "testValue";
    obj.setProp0016(expectedValue);
    assertEquals(expectedValue, obj.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_wqsP0_OTGI0() {
    TestJSONObject testObject = new TestJSONObject();
    String expectedValue = "newValue";
    testObject.setProp0016(expectedValue);
    assertEquals(expectedValue, testObject.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0010_IEaR0_OcjN0() {
    TestJSONObject obj = new TestJSONObject();
    String expected = "testValue";
    obj.setProp0016(expected); // Corrected method name to match the setter in the class
    assertEquals(expected, obj.getProp0016()); // Corrected to use the getter method
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0001_JEdp0_fid1() {
    TestJSONObject obj = new TestJSONObject();
    String result = obj.getProp0001();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0005_qkbi0_fid1() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0005();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0004_Ruph0_fid1() {
    TestJSONObject obj = new TestJSONObject();
    String result = obj.getProp0004();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0003_reqA0_fid1() {
    TestJSONObject obj = new TestJSONObject();
    String result = obj.getProp0003();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0002_SakW0_fid1() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0002();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0013_tMqc0_fid1() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0013();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0015_ZMcO0_fid1() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0015();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0016_BYhf0_fid1() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0016();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0008_Nach0_fid1() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0008();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0007_NqXp0_fid1() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0007();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0006_BaAs0_fid1() {
    TestJSONObject obj = new TestJSONObject();
    String result = obj.getProp0006();
    assertNull(result);
  }
}