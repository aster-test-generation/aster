/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletLargeContentLength_Test_Failing {
  PingServletLargeContentLength pingServletLargeContentLength;
  ServletConfig mockServletConfig;
  HttpServletRequest request;
  HttpServletResponse response;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit() throws Exception {
    pingServletLargeContentLength = new PingServletLargeContentLength();
    mockServletConfig = mock(ServletConfig.class);
    pingServletLargeContentLength.init(mockServletConfig);
    verify(mockServletConfig, times(1)).getServletContext();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_fkUn0() throws ServletException {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    ServletConfig config = new MockServletConfig();
    servlet.init(config);
    assertNotNull(servlet.getServletConfig());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    pingServletLargeContentLength = new PingServletLargeContentLength();
    request = mock(HttpServletRequest.class);
    response = mock(HttpServletResponse.class);
    // Arrange
    long expectedContentLength = 1500L;
    when(request.getContentLengthLong()).thenReturn(expectedContentLength);
    // Act
    pingServletLargeContentLength.doPost(request, response);
    // Assert
    verify(request, times(1)).getContentLengthLong();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostContentLength_jkYc0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getContentLengthLong()).thenReturn(1500L);
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    servlet.doPost(req, res);
    assertEquals(1500L, req.getContentLengthLong());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_dDsI0() {
    PingServletLargeContentLength servlet = new PingServletLargeContentLength();
    String expected = "Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws ServletException, IOException {
    pingServletLargeContentLength = new PingServletLargeContentLength();
    request = mock(HttpServletRequest.class);
    response = mock(HttpServletResponse.class);
    // Call the method under test
    pingServletLargeContentLength.doGet(request, response);
    // Verify that doPost is called
    verify(pingServletLargeContentLength).doPost(request, response);
  }
}