/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingJSONPObjectFactory_Coverage_Test_Failing {
  private HttpServletRequest req;
  private PingJSONPObjectFactory pingJSONPObjectFactory;
  private ServletConfig mockServletConfig;
  private HttpServletResponse res;
  private long initTime = System.currentTimeMillis();

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_Ktan0() {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    String result = factory.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_tNlN0() throws javax.servlet.ServletException {
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    mockServletConfig = mock(ServletConfig.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetContentType_HAAq1() throws ServletException, IOException {
    pingJSONPObjectFactory.doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOutputStream_RWDf2() throws ServletException, IOException {
    pingJSONPObjectFactory.doGet(req, res);
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testExceptionHandling_OvRd9() throws ServletException, IOException {
    doThrow(new IOException("Test Exception")).when(res).getOutputStream();
    pingJSONPObjectFactory.doGet(req, res);
    verify(res).sendError(500, "Test Exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogErrorOnException_qxSY10() throws ServletException, IOException {
    doThrow(new IOException("Test Exception")).when(res).getOutputStream();
    pingJSONPObjectFactory.doGet(req, res);
  }
}