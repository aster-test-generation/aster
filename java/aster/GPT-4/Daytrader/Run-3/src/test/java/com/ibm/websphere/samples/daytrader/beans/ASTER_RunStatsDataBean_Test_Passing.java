/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_RunStatsDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeUserCount_oTnV0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int expected = 0; // Assuming default value of tradeUserCount is 0
    assertEquals(expected, runStatsDataBean.getTradeUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBuyOrderCount_oFGo0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setBuyOrderCount(5);
    assertEquals(5, runStatsDataBean.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDeletedOrderCount_ByQZ0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setDeletedOrderCount(5);
    assertEquals(5, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeUserCount_raVr0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int expectedCount = 5;
    runStatsDataBean.setTradeUserCount(expectedCount);
    assertEquals(expectedCount, runStatsDataBean.getTradeUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBuyOrderCount_YTtu0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    assertEquals(0, runStatsDataBean.getBuyOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderCount_dsyH0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    assertEquals(0, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenOrderCount_Yapc0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int expected = 0; // Assuming default count is 0 after initialization
    assertEquals(expected, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNewUserCount_XPGu0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int expected = 0; // Assuming default value of newUserCount is 0
    int actual = runStatsDataBean.getNewUserCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeStockCount_QuWY0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int expected = 5;
    runStatsDataBean.setTradeStockCount(expected);
    assertEquals(expected, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLoginCount_kKlz0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int expected = 100;
    runStatsDataBean.setSumLoginCount(expected);
    assertEquals(expected, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingCount_Xxdq0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setHoldingCount(5);
    assertEquals(5, runStatsDataBean.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCancelledOrderCount_GLDs0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int expected = 0; // Assuming default value of cancelledOrderCount is 0 if not set
    assertEquals(expected, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSellOrderCount_eytN0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSellOrderCount(5);
    assertEquals(5, runStatsDataBean.getSellOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_1() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_2() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("RunStatsData for reset at"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_3() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("tradeUserCount:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_4() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("newUserCount:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_5() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("sumLoginCount:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_6() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("sumLogoutCount:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_7() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("holdingCount:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_8() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("orderCount:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_9() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("buyOrderCount:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_10() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("sellOrderCount:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_11() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("cancelledOrderCount:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_12() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("openOrderCount:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0_13() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertTrue(result.contains("deletedOrderCount:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTradeStockCount_EylC0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int expected = 0; // Assuming default value of tradeStockCount is 0
    assertEquals(expected, runStatsDataBean.getTradeStockCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDeletedOrderCount_fyuA0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int expected = 0; // Assuming default value for deletedOrderCount is 0
    assertEquals(expected, runStatsDataBean.getDeletedOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLogoutCount_jvIk0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    assertEquals(0, runStatsDataBean.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNewUserCount_BdTg0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setNewUserCount(5);
    assertEquals(5, runStatsDataBean.getNewUserCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderCount_eqCn0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOrderCount(5);
    assertEquals(5, runStatsDataBean.getOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumLoginCount_GNfQ0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    assertEquals(0, runStatsDataBean.getSumLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumLogoutCount_otlN0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setSumLogoutCount(5);
    assertEquals(5, runStatsDataBean.getSumLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingCount_AuUx0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int expected = 0; // Assuming default value of holdingCount is 0
    assertEquals(expected, runStatsDataBean.getHoldingCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSellOrderCount_wJns0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    int expected = 0; // Assuming default count is 0 after initialization
    int actual = runStatsDataBean.getSellOrderCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenOrderCount_DZXK0_YtAq0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setOpenOrderCount(5);
    assertEquals(5, runStatsDataBean.getOpenOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCancelledOrderCount_csoF0_kDRF0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    runStatsDataBean.setCancelledOrderCount(5);
    assertEquals(5, runStatsDataBean.getCancelledOrderCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_jnCM0() {
    RunStatsDataBean runStatsDataBean = new RunStatsDataBean();
    String result = runStatsDataBean.toString();
    assertNotNull(result);
    assertTrue(result.contains("RunStatsData for reset at"));
    assertTrue(result.contains("tradeUserCount:"));
    assertTrue(result.contains("newUserCount:"));
    assertTrue(result.contains("sumLoginCount:"));
    assertTrue(result.contains("sumLogoutCount:"));
    assertTrue(result.contains("holdingCount:"));
    assertTrue(result.contains("orderCount:"));
    assertTrue(result.contains("buyOrderCount:"));
    assertTrue(result.contains("sellOrderCount:"));
    assertTrue(result.contains("cancelledOrderCount:"));
    assertTrue(result.contains("openOrderCount:"));
    assertTrue(result.contains("deletedOrderCount:"));
  }
}