/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet31AsyncRead_Test_Passing {
  @Mock
  private ServletConfig mockServletConfig;
  @InjectMocks
  private PingServlet31AsyncRead pingServlet31AsyncRead;
  HttpServletResponse httpServletResponse;
  HttpServletRequest httpServletRequest;
  ServletInputStream servletInputStream;
  AsyncContext asyncContext;
  private static int hitCount;
  private static String initTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletInputStream = mock(ServletInputStream.class);
    asyncContext = mock(AsyncContext.class);
    pingServlet31AsyncRead = new PingServlet31AsyncRead();
    when(httpServletRequest.getInputStream()).thenReturn(servletInputStream);
    when(httpServletRequest.startAsync()).thenReturn(asyncContext);
    pingServlet31AsyncRead.doPost(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(httpServletRequest).startAsync();
    verify(servletInputStream).setReadListener(any(ReadListener.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_viOs0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    AsyncContext ac = mock(AsyncContext.class);
    ServletInputStream input = mock(ServletInputStream.class);
    ReadListener readListener = mock(ReadListener.class);
    when(req.startAsync()).thenReturn(ac);
    when(req.getInputStream()).thenReturn(input);
    PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
    servlet.doPost(req, res);
    verify(req).startAsync();
    verify(input).setReadListener(any(ReadListener.class));
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_dlHG0() {
    PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
    String result = servlet.getServletInfo();
    assertEquals("Basic dynamic HTML generation through a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    pingServlet31AsyncRead = new PingServlet31AsyncRead();
    // Setup
    doNothing().when(httpServletResponse).flushBuffer();
    // Execute
    pingServlet31AsyncRead.doGet(httpServletRequest, httpServletResponse);
    // Verify
    verify(httpServletRequest, times(1)).getInputStream(); // Verifying if getInputStream was called
    verify(httpServletResponse, times(1)).flushBuffer(); // Verifying if flushBuffer was called
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_GBNa0_1() throws ServletException {
    pingServlet31AsyncRead.init(mockServletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_GBNa0_2() throws ServletException {
    pingServlet31AsyncRead.init(mockServletConfig);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetCallsDoPost_wWrQ0_Hwyz0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServlet31AsyncRead servlet = new PingServlet31AsyncRead();
    servlet.doGet(request, response);
    verify(response, never()).sendError(anyInt());
  }
}