/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingJSONPStreaming_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitCallsSuperInit_BzsE0() throws ServletException {
    ServletConfig config = mock(ServletConfig.class);
    PingJSONPStreaming streaming = spy(new PingJSONPStreaming());
    streaming.init(config);
    verify(streaming, times(1)).init(config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitCompletesWithoutException_Bzrl3() throws ServletException {
    ServletConfig config = mock(ServletConfig.class);
    PingJSONPStreaming streaming = new PingJSONPStreaming();
    streaming.init(config);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_rqPj0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    pingJSONPStreaming.doPost(request, response);
    verify(pingJSONPStreaming).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostExecutionCompletes_xTls1() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    pingJSONPStreaming.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_LtUb0() {
    PingJSONPStreaming pingJSONPStreaming = new PingJSONPStreaming();
    String expectedInfo = "Basic JSON generation and parsing in a servlet";
    assertEquals(expectedInfo, pingJSONPStreaming.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_ContentTypeSet_JBVu0() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    PingJSONPStreaming ping = new PingJSONPStreaming();
    ping.doGet(req, res);
    verify(res).setContentType("text/html");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_OutputStreamRetrieved_jzET1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    PingJSONPStreaming ping = new PingJSONPStreaming();
    ping.doGet(req, res);
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_JsonGeneratorUsed_BpBq3() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    PingJSONPStreaming ping = new PingJSONPStreaming();
    ping.doGet(req, res);
    String expectedOutput = "initTime";
    assertTrue(out.toString().contains(expectedOutput));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_JsonParserUsed_OOhB4() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    PingJSONPStreaming ping = new PingJSONPStreaming();
    ping.doGet(req, res);
    String expectedOutput = "initTime:";
    assertTrue(out.toString().contains(expectedOutput));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_HtmlOutputCorrectlyFormatted_aLLn6() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    PingJSONPStreaming ping = new PingJSONPStreaming();
    ping.doGet(req, res);
    String expectedOutput = "<html><head><title>Ping JSONP</title></head>";
    assertTrue(out.toString().contains(expectedOutput));
  }
}