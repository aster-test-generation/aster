/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Passing {
  @Mock
  private ExternalContext externalContext;
  @Mock
  private HttpSession httpSession;
  @InjectMocks
  private TradeConfigJSF tradeConfigJSF;
  private ExternalContext context;
  private String result = "";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceList_NXwZ0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] result = tradeConfig.getWebInterfaceList();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetResult_dMUi0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null;
    String actual = tradeConfig.getResult();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_vIXn0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 20; // Assuming default value or set value
    assertEquals(expected, tradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeMode_xqLW0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = "Full EJB3"; // Set the expected value based on your test environment or mock
    assertEquals(expected, tradeConfig.getRuntimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_hmMi0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 1; // Assuming default value of primIterations is1
    assertEquals(expected, tradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxUsers_jOpO0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 15000; // Assuming default value of maxUsers is15000
    assertEquals(expected, tradeConfig.getMaxUsers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsLongRun_zsgk0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    boolean result = tradeConfig.isLongRun();
    assertEquals(true, result); // Assuming the expected value should be true for this test case
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsPublishQuotePriceChange_vaed0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    boolean expected = true; // Assuming default istrue, adjust based on actual default or setup
    assertEquals(expected, tradeConfig.isPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxQuotes_sBiS0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 10000; // Assuming default value of maxQuotes is10000
    assertEquals(expected, tradeConfig.getMaxQuotes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeList_yTaU0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expectedModes = {"Manual", "Automatic"};
    tradeConfig.setOrderProcessingModeList(expectedModes);
    assertArrayEquals(expectedModes, tradeConfig.getOrderProcessingModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterface_WbiL0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expectedInterface = "HTTP";
    tradeConfig.setWebInterface(expectedInterface);
    assertEquals(expectedInterface, tradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLongRunTrue_pCBf0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setLongRun(true);
    assertTrue(tradeConfig.isLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterface_GVtT0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null; // Assuming default null, adjust based on actual default or set value
    assertNull(expected);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithNewRunTimeMode_gKcV1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    TradeConfig.setRunTimeMode(1); // Assuming 1 is a valid mode index
    tradeConfigJSF.updateConfig();
    assertEquals(TradeConfig.getRunTimeMode(), 1);
  }

  @Test
  @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithNewOrderProcessingMode_zIij2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    TradeConfig.setOrderProcessingMode(1); // Assuming0 is a valid mode index
    tradeConfigJSF.updateConfig();
    assertEquals(TradeConfig.getOrderProcessingMode(), 0);
  }

  @Test
  @Timeout(value = 0, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithNewWebInterface_OQQA3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    TradeConfig.setWebInterface(1); // Assuming0 is a valid interface index
    tradeConfigJSF.updateConfig();
    assertEquals(TradeConfig.getWebInterface(), 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithIncreasedMaxUsers_KCxc4() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    TradeConfig.setMAX_USERS(2000);
    tradeConfigJSF.updateConfig();
    assertEquals(TradeConfig.getMAX_USERS(), 15000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithIncreasedMaxQuotes_LrGk5() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    TradeConfig.setMAX_QUOTES(2000);
    tradeConfigJSF.updateConfig();
    assertEquals(TradeConfig.getMAX_QUOTES(), 10000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithNewMarketSummaryInterval_hmxh6() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    TradeConfig.setMarketSummaryInterval(15);
    tradeConfigJSF.updateConfig();
    assertEquals(TradeConfig.getMarketSummaryInterval(), 20);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_JMni0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = "Sync"; // Assuming "Sync" is a valid mode for the purpose of this test
    assertEquals(expected, tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequency_WqKq0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expectedFrequency = 10;
    tradeConfig.setListQuotePriceChangeFrequency(expectedFrequency);
    assertEquals(expectedFrequency, tradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeList_nXze0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expectedRuntimeModes = {"Development", "Production", "Test"};
    tradeConfig.setRuntimeModeList(expectedRuntimeModes);
    assertArrayEquals(expectedRuntimeModes, tradeConfig.getRuntimeModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsDisplayOrderAlerts_Tatj0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    boolean result = tradeConfig.isDisplayOrderAlerts();
    assertEquals(true, result); // Assuming the expected result should be true for this test case
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_hwyh0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expectedFrequency = 100; // Assuming default or set value in a real scenario
    assertEquals(expectedFrequency, tradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeMode_iUuR0() {
    TradeConfigJSF config = new TradeConfigJSF();
    String expectedMode = "production";
    config.setRuntimeMode(expectedMode);
    assertEquals(expectedMode, config.getRuntimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPopulateDatabase_pbhH0_1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.populateDatabase();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPopulateDatabase_pbhH0_2() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.populateDatabase();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceList_nvjk0_UzBx0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expectedList = {"Interface1", "Interface2", "Interface3"};
    tradeConfig.setWebInterfaceList(expectedList);
    assertArrayEquals(expectedList, tradeConfig.getWebInterfaceList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_wKzb0_okuo0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setPrimIterations(5);
    assertEquals(5, tradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetResult_YSDJ0_wkDU0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = "Success";
    tradeConfig.setResult(expected);
    assertEquals(expected, tradeConfig.getResult());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxUsers_Pceg0_hEVt0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setMaxUsers(100);
    assertEquals(100, tradeConfig.getMaxUsers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDisplayOrderAlerts_XChN0_NXJI0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setDisplayOrderAlerts(true);
    assertTrue(tradeConfig.isDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_Zvgf0_hlNo0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setMarketSummaryInterval(5);
    assertEquals(5, tradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPublishQuotePriceChange_UGKL0_eLAb0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setPublishQuotePriceChange(true);
    assertTrue(tradeConfig.isPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxQuotes_CkWV0_cKZH0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setmaxQuotes(100);
    assertEquals(100, tradeConfig.getMaxQuotes());
  }
}