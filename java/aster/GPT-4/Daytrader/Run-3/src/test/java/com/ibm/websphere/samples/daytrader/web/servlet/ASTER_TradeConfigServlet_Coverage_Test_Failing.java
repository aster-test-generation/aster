/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_TradeConfigServlet_Coverage_Test_Failing {
  private ServletConfig servletConfig;
  private TradeConfigServlet tradeConfigServlet;
  private TradeConfigServlet servlet;
  private HttpServletRequest req;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeConfigAttribute_brel5_fhnf0() throws Exception {
    TradeConfig currentConfig = new TradeConfig();
    verify(req).setAttribute("tradeConfig", currentConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals(1, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals(0, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_3() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals(100, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_4() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals(200, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_5() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals(30, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_6() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals(5, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_7() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertTrue(TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_8() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals(50, TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_9() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertTrue(TradeConfig.getLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTradeConfigAttribute_brel5_fhnf0_fid1() throws Exception {
    TradeConfig currentConfig = new TradeConfig();
    when(req.getAttribute("tradeConfig")).thenReturn(currentConfig);
    verify(req).setAttribute("tradeConfig", currentConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_1_fid1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals("1", String.valueOf(TradeConfig.getOrderProcessingMode()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_2_fid1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("1"); // Changed to "1" to match expected value
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals(1, TradeConfig.getWebInterface()); // Changed expected value to 1
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_3_fid1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("150");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals(150, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_4_fid1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals(200, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_5_fid1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals("30", String.valueOf(TradeConfig.getMarketSummaryInterval()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_6_fid1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("10"); // Changed to 10
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals(10, TradeConfig.getPrimIterations()); // Changed expected value to 10
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_7_fid1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("false");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertFalse(TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_8_fid1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertEquals("50", String.valueOf(TradeConfig.getListQuotePriceChangeFrequency()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_TdbK0_9_fid1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    TradeConfigServlet tradeConfigServlet = new TradeConfigServlet();
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    when(req.getParameter("WebInterface")).thenReturn("0");
    when(req.getParameter("MaxUsers")).thenReturn("100");
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    when(req.getParameter("primIterations")).thenReturn("5");
    when(req.getParameter("EnablePublishQuotePriceChange")).thenReturn("true");
    when(req.getParameter("ListQuotePriceChangeFrequency")).thenReturn("50");
    when(req.getParameter("EnableLongRun")).thenReturn("true");
    when(req.getParameter("DisplayOrderAlerts")).thenReturn("true");
    tradeConfigServlet.doConfigUpdate(req, resp);
    assertTrue(TradeConfig.getLongRun() == true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void setUp_YhDi0() throws javax.servlet.ServletException {
    tradeConfigServlet = new TradeConfigServlet();
    servletConfig = mock(ServletConfig.class);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServletConfigNotNull_JzAU13() throws java.lang.Exception {
    assertNotNull(tradeConfigServlet.getServletConfig());
  }
}