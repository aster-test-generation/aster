/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingServletSetContentLength_Coverage_Test_Failing {
  private PingServletSetContentLength pingServlet;
  private ServletConfig mockConfig;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitCallsSuperInit_IcXt1() throws ServletException {
    pingServlet.init(mockConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_SqkH0() {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    String result = servlet.getServletInfo();
    String expected = "Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.";
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetContentType_NFrc1_WVqb0() throws Exception {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType(eq("text/html"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS)
  public void testLengthParamIsNull_TIDb2_AFVy0() throws Exception {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(req.getParameter("contentLength")).thenReturn(null);
    when(res.getOutputStream()).thenReturn(out);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(out).println(contains("Ping Servlet"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLengthParamIsZero_DlEc3_ftTr0() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(req.getParameter("contentLength")).thenReturn("0");
    when(res.getOutputStream()).thenReturn(out);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doGet(req, res);
    verify(out).println(contains("<html><head><title>Ping Servlet</title></head>"));
    verify(out).println(contains("<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet<BR></FONT><FONT size=\"+1\" color=\"#000066\"></B></body></html>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLengthParamIsNegative_rFwl5_HQod0() throws Exception {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(req.getParameter("contentLength")).thenReturn("-100");
    when(res.getOutputStream()).thenReturn(out);
    servlet.doGet(req, res);
    verify(out).println(contains("<html><head><title>Ping Servlet</title></head>"));
    verify(out).println(contains("<body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet<BR></FONT>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOutputStreamIsCalled_tbSt6_XgiY0() throws Exception {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("contentLength")).thenReturn("100");
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(outputStream);
    servlet.doGet(req, res);
    verify(res).getOutputStream();
    verify(outputStream).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetContentType_NFrc1_WVqb0_fid2() throws Exception {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    servlet.doGet(req, res);
    verify(res).setContentType(eq("application/json"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLengthParamIsNegative_rFwl5_HQod0_fid2() throws Exception {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(req.getParameter("contentLength")).thenReturn("-100");
    when(res.getOutputStream()).thenReturn(out);
    servlet.doGet(req, res);
    verify(out).println(contains("<html>"));
    verify(out).println(contains("<body>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOutputStreamIsCalled_tbSt6_XgiY0_fid2() throws Exception {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("contentLength")).thenReturn("100");
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(outputStream);
    servlet.doGet(req, res);
    verify(res).getOutputStream();
    verify(outputStream).print(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithValidConfig_OfDh0() throws ServletException {
    ServletConfig mockConfig = org.mockito.Mockito.mock(ServletConfig.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.init(mockConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_hQmB0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doPost(request, response);
    verify(servlet).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostExecutionCompletes_DPGW1() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_Vesh0() {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    String expectedInfo = "Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.";
    assertEquals(expectedInfo, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetParameterContentLength_SZJG1() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    when(req.getParameter("contentLength")).thenReturn("10");
    servlet.doGet(req, res);
    verify(req).getParameter("contentLength");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testContentLengthNull_gGsq2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    when(req.getParameter("contentLength")).thenReturn(null);
    servlet.doGet(req, res);
    verify(req).getParameter("contentLength");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOutputStream_aQtu5() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    when(req.getParameter("contentLength")).thenReturn("10");
    servlet.doGet(req, res);
    verify(res).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitialBufferValue_kqPR6() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    when(req.getParameter("contentLength")).thenReturn("10");
    servlet.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBufferAppend_oOju7() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    when(req.getParameter("contentLength")).thenReturn("1000");
    servlet.doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCatchException_ijQR10() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    when(req.getParameter("contentLength")).thenThrow(new RuntimeException("Test Exception"));
    servlet.doGet(req, res);
    verify(res).sendError(500, "java.lang.RuntimeException: Test Exception");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetContentType_hlIO0_uoyN0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    when(req.getParameter("contentLength")).thenReturn("10");
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
  }
}