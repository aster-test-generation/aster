/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_PingJSONPObject_Coverage_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_AxnD0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    PingJSONPObject spyPingJSONPObject = spy(pingJSONPObject);
    spyPingJSONPObject.doPost(request, response);
    verify(spyPingJSONPObject).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCompletesWithoutException_aoeV1() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    pingJSONPObject.doPost(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_jhLQ0() {
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    String expectedInfo = "Basic JSON generation and parsing in a servlet";
    assertEquals(expectedInfo, pingJSONPObject.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetOutputStreamError_tBZy1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getOutputStream()).thenThrow(new IOException());
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    try {
      pingJSONPObject.doGet(req, res);
    } catch (IOException e) {
    }
    verify(res).sendError(500, "java.io.IOException");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetIncreaseHitCount_OeeC3() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream out = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(out);
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    pingJSONPObject.doGet(req, res); // First call
    pingJSONPObject.doGet(req, res); // Second call
    verify(out, times(2)).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetCatchGeneralException_rsvZ5() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getOutputStream()).thenThrow(new RuntimeException("Unexpected Error"));
    PingJSONPObject pingJSONPObject = new PingJSONPObject();
    pingJSONPObject.doGet(req, res);
    verify(res).sendError(500, "java.lang.RuntimeException: Unexpected Error");
  }
}