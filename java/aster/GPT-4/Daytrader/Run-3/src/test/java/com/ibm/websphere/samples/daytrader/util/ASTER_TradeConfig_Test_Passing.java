/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessMode_BKEM0() {
    int expectedMode = 5; // Assuming default or a known set value for accessMode
    int actualMode = TradeConfig.getAccessMode();
    assertEquals(expectedMode, actualMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_lDXg0() {
    int expected = 300; // Assuming default or set value for the test
    int actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_NoVd0() {
    int expected = 1; // Assuming default value of primIterations is1
    assertEquals(expected, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_jOIm0_1() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.endsWith(" Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_jOIm0_2() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.matches("\\d+ Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_kMpx0() {
    int initialCount = TradeConfig.getScenarioCount();
    TradeConfig.incrementScenarioCount();
    assertEquals(initialCount + 1, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_hwqW0() {
    TradeConfig.setRunTimeMode(1);
    assertEquals(1, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_Zmmo0_1() {
    String fullName = TradeConfig.rndFullName();
    assertNotNull(fullName);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_Zmmo0_2() {
    String fullName = TradeConfig.rndFullName();
    assertTrue(fullName.startsWith("first:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_Zmmo0_3() {
    String fullName = TradeConfig.rndFullName();
    assertTrue(fullName.contains(" last:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixesNotNull_hCpc0() {
    assertNotNull(TradeConfig.getScenarioMixes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_VYiF0() {
    int expected = 10; // Assuming MAX_USERS is set to10
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_QUOTES_bHAo0() {
    int expected = 100; // Assuming the expected MAX_QUOTES is 100
    assertEquals(expected, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndQuantityRange_uCDl0() {
    float result = TradeConfig.rndQuantity();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongRun_UGVM0() {
    boolean expected = true; // Assuming default or previously set value
    boolean actual = TradeConfig.getLongRun();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequency_MqxT0() {
    TradeConfig.setListQuotePriceChangeFrequency(10);
    assertEquals(10, TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_FBNi0() {
    int expectedMode = 5;
    TradeConfig.setOrderProcessingMode(expectedMode);
    assertEquals(expectedMode, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDisplayOrderAlerts_MiIg0() {
    boolean result = TradeConfig.getDisplayOrderAlerts();
    assertTrue(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_sPzS0() {
    int expectedFrequency = 10; // Assuming 10 is the expected frequency set elsewhere in the application
    assertEquals(expectedFrequency, TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessMode_Xkyt0() {
    int expectedValue = 5;
    TradeConfig.setAccessMode(expectedValue);
    assertEquals(expectedValue, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetJDBCDriverNeedsGlobalTransaction_ycNN0() {
    boolean expected = false; // Assuming a default or expected state for the test
    boolean actual = TradeConfig.getJDBCDriverNeedsGlobalTransation();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_LbKX0() {
    String result = TradeConfig.rndNewUserID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxHoldings_qxHM0() {
    int expected = 100; // Assuming the value of MAX_HOLDINGS is 100 for this test case
    assertEquals(expected, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForBuy_BvmU0() {
    BigDecimal expectedFee = TradeConfig.getOrderFee("BUY");
    assertEquals(expectedFee, TradeConfig.getOrderFee("BUY"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForSell_QfnZ1() {
    BigDecimal expectedFee = TradeConfig.getOrderFee("SELL");
    assertEquals(expectedFee, TradeConfig.getOrderFee("SELL"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForInvalidType_WkyI2() {
    BigDecimal expectedFee = TradeConfig.getOrderFee("RENT");
    assertEquals(expectedFee, TradeConfig.getOrderFee("RENT"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_ValidValue_baUu0() {
    TradeConfig.setPrimIterations(5);
    assertEquals(5, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPageValidIndex_dkqN0() {
    String expectedPageContent = "Expected content of page at index 0";
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_VRit0() {
    String[] expected = new String[]{"Interface1", "Interface2", "Interface3"};
    String[] actual = TradeConfig.getWebInterfaceNames();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePrices_kNFy0() {
    boolean expected = false; // Assuming default or expected state of updateQuotePrices
    boolean actual = TradeConfig.getUpdateQuotePrices();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBoolean_GXiq0() {
    boolean result = TradeConfig.rndBoolean();
    assertTrue(result == true || result == false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetScenarioCount_MlpN0() {
    TradeConfig.setScenarioCount(5);
    assertEquals(5, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_rsnW0() {
    boolean expected = true; // Assuming the default state of publishQuotePriceChange istrue
    boolean actual = TradeConfig.getPublishQuotePriceChange();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_NullParameter_yncS0() {
    TradeConfig.setConfigParam(null, "someValue");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_EmptyParameter_JZmL1() {
    TradeConfig.setConfigParam("", "someValue");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_NullValue_MNAl2() {
    TradeConfig.setConfigParam("orderProcessingMode", null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceDefaultValue_mpqA0() {
    int expected = 0; // Assuming default value of webInterface is 0 if not set
    int actual = TradeConfig.getWebInterface();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRandomValueRange_oSsh0() {
    double result = TradeConfig.random();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_xbZB0() {
    int expectedMode = 0; // Assuming default or previously set value
    int actualMode = TradeConfig.getOrderProcessingMode();
    assertEquals(expectedMode, actualMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_GreaterThanOne_aSxs0() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RandomUser_Hnra0() {
    TradeConfig.RND_USER = true;
    String expected = TradeConfig.rndUserID();
    String actual = TradeConfig.getUserID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_NextUser_mhZk1() {
    TradeConfig.RND_USER = false;
    String expected = TradeConfig.nextUserID();
    String actual = TradeConfig.getUserID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithColonInUserID_uTtr0_1() {
    String userID = "user:123";
    String email = TradeConfig.rndEmail(userID);
    assertFalse(email.contains(":"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithColonInUserID_uTtr0_2() {
    String userID = "user:123";
    String email = TradeConfig.rndEmail(userID);
    assertTrue(email.matches("user123@[0-9]+\\.com"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCount_bjGz0() {
    int expectedCount = 5; // Assuming default scenario count is5
    assertEquals(expectedCount, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCardFormat_fBoo0() {
    String creditCardNumber = TradeConfig.rndCreditCard();
    assertTrue(creditCardNumber.matches("\\d{1,3}-\\d{1,3}-\\d{1,3}-\\d{1,3}"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_OwRD0() {
    int expectedMode = 1; // Assuming 1 is a valid runtime mode for the purpose of this test
    assertEquals(expectedMode, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimalWithPositiveFloat_yLvl0() {
    float input = 10.0f;
    BigDecimal result = TradeConfig.rndBigDecimal(input);
    assertTrue(result.compareTo(BigDecimal.ZERO) >= 0 && result.compareTo(new BigDecimal(input)) <= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterface_bOnk0() {
    TradeConfig.setWebInterface(5);
    assertEquals(5, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_WrNi0_1() {
    String userID = TradeConfig.rndUserID();
    assertNotNull(userID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_WrNi0_2() {
    String userID = TradeConfig.rndUserID();
    assertTrue(userID.startsWith("uid:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBalance_fHZG0() {
    String expected = "1000000";
    String actual = TradeConfig.rndBalance();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_YSxD0_pVmQ0() {
    int i = 10;
    float result = TradeConfig.rndFloat(i);
    assertTrue(result >= 0 && result < 10, "Result should be between 0 and 10");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxHoldings_BJjV0_iSsU0() {
    TradeConfig.setMAX_HOLDINGS(100);
    assertEquals(100, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_FUSC0_pkjC0() {
    TradeConfig.setMarketSummaryInterval(300);
    assertEquals(300, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPublishQuotePriceChange_ddyZ0_ybMn0() {
    TradeConfig.setPublishQuotePriceChange(true);
    assertTrue(TradeConfig.getPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxUsers_fMWg0_Pkyb0() {
    TradeConfig.setMAX_USERS(10);
    assertEquals(10, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUpdateQuotePrices_pvZl0_utnX0() {
    TradeConfig.setUpdateQuotePrices(true);
    assertTrue(TradeConfig.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndPriceRange_jHaA0_KWfV0_1() {
    float result = TradeConfig.rndPrice();
    assertTrue(result >= 1.0, "Price should be at least 1.0");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndPriceRange_jHaA0_KWfV0_2() {
    float result = TradeConfig.rndPrice();
    assertTrue(result <= 201.0, "Price should be no more than 201.0");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_WrapAround_ffAi1_vzCZ0() {
    final int MAX_USERS = 1000; // Assuming MAX_USERS is defined here as it was not defined earlier
    for (int i = 0; i < MAX_USERS; i++) {
      TradeConfig.nextUserID(); // Increment userID_count to MAX_USERS
    }
    String result = TradeConfig.nextUserID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_QUOTES_Blki0_mACu0() {
    TradeConfig.setMAX_QUOTES(100);
    assertEquals(100, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_OrderProcessingModeValid_kGiA3_ExoR0() {
    TradeConfig.setConfigParam("orderProcessingMode", "validMode");
    assertEquals(0, TradeConfig.getOrderProcessingMode()); // Assuming "validMode" corresponds to index 0
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_OrderProcessingModeInvalid_RyCY4_BCqb0() {
    TradeConfig.setConfigParam("orderProcessingMode", "invalidMode");
    assertEquals(0, TradeConfig.getOrderProcessingMode()); // Corrected to use the getter method
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_WebInterfaceInvalid_KPOX8_rlkO5() {
    TradeConfig.setConfigParam("WebInterface", "invalidInterface");
    assertEquals(5, TradeConfig.getWebInterface()); // Using getter method to access private field
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_PrimIterationsInvalid_tOfl14_pUrf0() {
    TradeConfig.setConfigParam("primIterations", "notAnInteger");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndIntReturnsValueWithinRange_dqyc0_SedB0() {
    int i = 10;
    int result = TradeConfig.rndInt(i);
    assertTrue(result >= 0 && result < i, "Result should be within range 0 to " + (i - 1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_AccessModeValid_FRKp5_KVAA0_fid1() {
    TradeConfig.setConfigParam("accessMode", "validAccessMode");
    assertEquals(0, TradeConfig.getAccessMode()); // Assuming "validAccessMode" corresponds to index 0
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_AccessModeInvalid_DqsY6_wEDt0_fid1() {
    TradeConfig.setConfigParam("accessMode", "invalidAccessMode");
    assertEquals(0, TradeConfig.getAccessMode()); // Assuming default is 0
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddress_jOIm0() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.endsWith(" Oak St."));
    assertTrue(address.matches("\\d+ Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullName_Zmmo0() {
    String fullName = TradeConfig.rndFullName();
    assertNotNull(fullName);
    assertTrue(fullName.startsWith("first:"));
    assertTrue(fullName.contains(" last:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithColonInUserID_uTtr0() {
    String userID = "user:123";
    String email = TradeConfig.rndEmail(userID);
    assertFalse(email.contains(":"));
    assertTrue(email.matches("user123@[0-9]+\\.com"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_WrNi0() {
    String userID = TradeConfig.rndUserID();
    assertNotNull(userID);
    assertTrue(userID.startsWith("uid:"));
  }
}