/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_OrdersAlertFilter_Coverage_Test_Passing {
  private OrdersAlertFilter filter;
  private ServletRequest req;
  private ServletResponse resp;
  private FilterChain chain;
  private HttpServletRequest httpReq;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDestroySetsFilterConfigToNull_HinA0() {
    Instance<TradeServices> servicesMock = mock(Instance.class);
    OrdersAlertFilter filter = new OrdersAlertFilter(servicesMock);
    filter.destroy();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDestroyCompletesWithoutException_MILl1() {
    Instance<TradeServices> servicesMock = mock(Instance.class);
    OrdersAlertFilter filter = new OrdersAlertFilter(servicesMock);
    filter.destroy(); // We are testing that calling destroy does not throw an exception.
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitCompletesWithoutException_UQlb1() throws javax.servlet.ServletException {
    FilterConfig mockFilterConfig = mock(FilterConfig.class);
    OrdersAlertFilter ordersAlertFilter = new OrdersAlertFilter(null);
    assertDoesNotThrow(() -> ordersAlertFilter.init(mockFilterConfig), "init should not throw any exceptions");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testFilterConfigIsNull_ofsl1() throws IOException, ServletException {
    when(req.getParameter("action")).thenReturn("someAction");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDiagnosticsCheck_zZTl2() throws IOException, ServletException {
    when(req.getParameter("action")).thenReturn("someAction");
    filter.doFilter(req, resp, chain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDisplayOrderAlertsTrue_CHFD4() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("123");
    filter.doFilter(req, resp, chain);
    verify(req, times(1)).getParameter("uid");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testActionNotNull_XTuV5() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    when(req.getParameter("action")).thenReturn("login");
    filter.doFilter(req, resp, chain);
    verify(req, times(1)).getParameter("action");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testActionNotEmptyAndNotLogout_tTru7() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    when(req.getParameter("action")).thenReturn("view");
    filter.doFilter(req, resp, chain);
    verify(req, times(1)).getParameter("action");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_lTxx11() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("123");
    filter.doFilter(req, resp, chain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLogCollection_eBJz13() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("123");
    when(Log.doTrace()).thenReturn(true);
    filter.doFilter(req, resp, chain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testExceptionHandling_CmCx14() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("123");
    doThrow(new RuntimeException("Test Exception")).when(req).getParameter("uid");
    filter.doFilter(req, resp, chain);
  }
}