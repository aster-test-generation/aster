/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.StringReader;
import java.util.concurrent.TimeUnit;
import javax.json.*;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObjectFactory_Test_Passing {
  private PingJSONPObjectFactory pingJSONPObjectFactory;
  private ServletConfig servletConfig;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  private ServletOutputStream servletOutputStream;
  private static String initTime;
  private static int hitCount;
  private static final JsonReaderFactory jSONReaderFactory = Json.createReaderFactory(null);
  private static final JsonBuilderFactory jSONObjectFactory = Json.createBuilderFactory(null);

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    // Setup
    pingJSONPObjectFactory.doPost(httpServletRequest, httpServletResponse);
    // Verify that doGet is called within doPost
    verify(httpServletRequest, atLeastOnce()).setAttribute(anyString(), any());
    verify(httpServletResponse, atLeastOnce()).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_uyGM0() throws Exception {
    HttpServletRequest mockReq = mock(HttpServletRequest.class);
    HttpServletResponse mockRes = mock(HttpServletResponse.class);
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    factory.doPost(mockReq, mockRes);
    verify(mockReq, atLeastOnce()).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_tgex0() {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    String result = factory.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws ServletException, IOException {
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    servletOutputStream = mock(ServletOutputStream.class);
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    // Setup
    String initTime = "2023-01-01T00:00:00Z";
    int hitCount = 1;
    JsonBuilderFactory jsonBuilderFactory = Json.createBuilderFactory(null);
    JsonReaderFactory jsonReaderFactory = Json.createReaderFactory(null);
    JsonObject json = jsonBuilderFactory.createObjectBuilder()
                .add("initTime", initTime)
                .add("hitCount", hitCount)
                .build();
    String generatedJSON = json.toString();
    JsonReader jsonReader = jsonReaderFactory.createReader(new StringReader(generatedJSON));
    String parsedJSON = jsonReader.readObject().toString();
    // Execute
    pingJSONPObjectFactory.doGet(httpServletRequest, httpServletResponse);
    // Verify
    verify(httpServletResponse).setContentType("text/html");
    verify(servletOutputStream).println(contains("Ping JSONP"));
    verify(servletOutputStream).println(contains("Generated JSON: " + generatedJSON));
    verify(servletOutputStream).println(contains("Parsed JSON: " + parsedJSON));
  }
}