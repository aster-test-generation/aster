/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.impl.ejb3.TradeSLSBBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.Log;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import javax.naming.InitialContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2Entity_Test_Passing {
  @Mock
  private TradeServices tradeSLSBLocal;
  @Mock
  private ServletConfig servletConfig;
  @Mock
  private InitialContext initialContext;
  @Mock
  private Log log;
  @InjectMocks
  private PingServlet2Session2Entity pingServlet;
  PingServlet2Session2Entity pingServlet2Session2Entity;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    pingServlet2Session2Entity = new PingServlet2Session2Entity();
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    // Arrange
    doNothing().when(httpServletResponse).flushBuffer();
    // Act
    pingServlet2Session2Entity.doPost(httpServletRequest, httpServletResponse);
    // Assert
    verify(httpServletResponse, never()).flushBuffer(); // Verify flushBuffer was never called
    verify(httpServletRequest, times(1)).setAttribute(anyString(), any()); // Verify setAttribute was called once
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_mcve0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    servlet.doPost(request, response);
    verify(servlet).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_faFe0() {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    String expected = "web primitive, tests Servlet to Session to Entity EJB path";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNonNullTradeSLSBLocal_cZCF1_jZsE0() throws NoSuchFieldException, IllegalAccessException {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    ServletConfig config = mock(ServletConfig.class);
    Field field = PingServlet2Session2Entity.class.getDeclaredField("tradeSLSBLocal");
    field.setAccessible(true);
    field.set(servlet, mock(TradeSLSBBean.class));
    try {
      servlet.init(config);
    } catch (ServletException e) {
      e.printStackTrace();
    }
    assertNotNull(field.get(servlet), "tradeSLSBLocal should not be null after init");
  }
}