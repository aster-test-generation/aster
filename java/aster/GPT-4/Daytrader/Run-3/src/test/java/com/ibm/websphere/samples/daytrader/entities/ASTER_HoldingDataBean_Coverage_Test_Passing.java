/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingDataBean_Coverage_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_QuoteNotNull_TEsm0() {
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    AccountDataBean account = new AccountDataBean();
    HoldingDataBean holding = new HoldingDataBean(100, new BigDecimal("150.00"), new Date(), account, quote);
    String result = holding.getQuoteID();
    assertEquals("AAPL", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_QuoteNullNoQuoteIDSet_qvZg2() {
    HoldingDataBean holding = new HoldingDataBean();
    String result = holding.getQuoteID();
    assertEquals(null, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNonHoldingDataBeanObject_fAcn0() {
    HoldingDataBean holding = new HoldingDataBean();
    assertFalse(holding.equals(new Object()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullHoldingIDInBothObjects_HeaN1() {
    HoldingDataBean holding1 = new HoldingDataBean();
    HoldingDataBean holding2 = new HoldingDataBean();
    assertTrue(holding1.equals(holding2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameHoldingIDInBothObjects_DGUP2() {
    Integer holdingID = 1;
    HoldingDataBean holding1 = new HoldingDataBean(holdingID, 100.0, BigDecimal.valueOf(500.0), new Date(), "IBM");
    HoldingDataBean holding2 = new HoldingDataBean(holdingID, 100.0, BigDecimal.valueOf(500.0), new Date(), "IBM");
    assertTrue(holding1.equals(holding2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentHoldingID_BuIH3() {
    HoldingDataBean holding1 = new HoldingDataBean(1, 100.0, BigDecimal.valueOf(500.0), new Date(), "IBM");
    HoldingDataBean holding2 = new HoldingDataBean(2, 100.0, BigDecimal.valueOf(500.0), new Date(), "IBM");
    assertFalse(holding1.equals(holding2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNullHoldingIDInOneObject_mhal4() {
    HoldingDataBean holding1 = new HoldingDataBean(null, 100.0, BigDecimal.valueOf(500.0), new Date(), "IBM");
    HoldingDataBean holding2 = new HoldingDataBean(1, 100.0, BigDecimal.valueOf(500.0), new Date(), "IBM");
    assertFalse(holding1.equals(holding2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_vTbh5() {
    HoldingDataBean holding = new HoldingDataBean(1, 100.0, BigDecimal.valueOf(500.0), new Date(), "IBM");
    assertTrue(holding.equals(holding));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithAllFieldsSet_LgVU0_1() {
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    BigDecimal purchasePrice = new BigDecimal("150.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(100, purchasePrice, purchaseDate, account, quote);
    String result = holding.toString();
    assertTrue(result.contains("Holding Data for holding: null"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithAllFieldsSet_LgVU0_2() {
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    BigDecimal purchasePrice = new BigDecimal("150.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(100, purchasePrice, purchaseDate, account, quote);
    String result = holding.toString();
    assertTrue(result.contains("quantity:100.0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithAllFieldsSet_LgVU0_3() {
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    BigDecimal purchasePrice = new BigDecimal("150.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(100, purchasePrice, purchaseDate, account, quote);
    String result = holding.toString();
    assertTrue(result.contains("purchasePrice:150.00"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithAllFieldsSet_LgVU0_4() {
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    BigDecimal purchasePrice = new BigDecimal("150.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(100, purchasePrice, purchaseDate, account, quote);
    String result = holding.toString();
    assertTrue(result.contains("purchaseDate:" + purchaseDate.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithAllFieldsSet_LgVU0_5() {
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL");
    BigDecimal purchasePrice = new BigDecimal("150.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(100, purchasePrice, purchaseDate, account, quote);
    String result = holding.toString();
    assertFalse(result.contains("quoteID:null"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithPartialFieldsSet_iLsN1_1() {
    BigDecimal purchasePrice = new BigDecimal("200.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(null, 50, purchasePrice, purchaseDate, "GOOGL");
    String result = holding.toString();
    assertTrue(result.contains("Holding Data for holding: null"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithPartialFieldsSet_iLsN1_2() {
    BigDecimal purchasePrice = new BigDecimal("200.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(null, 50, purchasePrice, purchaseDate, "GOOGL");
    String result = holding.toString();
    assertTrue(result.contains("quantity:50.0"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithPartialFieldsSet_iLsN1_3() {
    BigDecimal purchasePrice = new BigDecimal("200.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(null, 50, purchasePrice, purchaseDate, "GOOGL");
    String result = holding.toString();
    assertTrue(result.contains("purchasePrice:200.00"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithPartialFieldsSet_iLsN1_4() {
    BigDecimal purchasePrice = new BigDecimal("200.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(null, 50, purchasePrice, purchaseDate, "GOOGL");
    String result = holding.toString();
    assertTrue(result.contains("purchaseDate:" + purchaseDate.toString()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithPartialFieldsSet_iLsN1_5() {
    BigDecimal purchasePrice = new BigDecimal("200.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(null, 50, purchasePrice, purchaseDate, "GOOGL");
    String result = holding.toString();
    assertTrue(result.contains("quoteID:GOOGL"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NullHoldingID_JHQB0() {
    HoldingDataBean holding = new HoldingDataBean();
    int expectedHash = 0;
    assertEquals(expectedHash, holding.hashCode(), "Hash code should be 0 when holdingID is null.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_NonNullHoldingID_Pbvq1() {
    Integer holdingID = 123;
    HoldingDataBean holding = new HoldingDataBean(holdingID, 100.0, BigDecimal.valueOf(150.5), new Date(), "IBM");
    int expectedHash = holdingID.hashCode();
    assertEquals(expectedHash, holding.hashCode(), "Hash code should match the hashCode of holdingID.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_DifferentHoldingIDs_mAEH2_1() {
    Integer holdingID1 = 123;
    Integer holdingID2 = 456;
    HoldingDataBean holding1 = new HoldingDataBean(holdingID1, 100.0, BigDecimal.valueOf(150.5), new Date(), "IBM");
    HoldingDataBean holding2 = new HoldingDataBean(holdingID2, 200.0, BigDecimal.valueOf(250.5), new Date(), "AAPL");
    int hash1 = holding1.hashCode();
    int hash2 = holding2.hashCode();
    assertEquals(holdingID1.hashCode(), hash1, "Hash code should match the hashCode of holdingID1.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_DifferentHoldingIDs_mAEH2_2() {
    Integer holdingID1 = 123;
    Integer holdingID2 = 456;
    HoldingDataBean holding1 = new HoldingDataBean(holdingID1, 100.0, BigDecimal.valueOf(150.5), new Date(), "IBM");
    HoldingDataBean holding2 = new HoldingDataBean(holdingID2, 200.0, BigDecimal.valueOf(250.5), new Date(), "AAPL");
    int hash1 = holding1.hashCode();
    int hash2 = holding2.hashCode();
    assertEquals(holdingID2.hashCode(), hash2, "Hash code should match the hashCode of holdingID2.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_DifferentHoldingIDs_mAEH2_3() {
    Integer holdingID1 = 123;
    Integer holdingID2 = 456;
    HoldingDataBean holding1 = new HoldingDataBean(holdingID1, 100.0, BigDecimal.valueOf(150.5), new Date(), "IBM");
    HoldingDataBean holding2 = new HoldingDataBean(holdingID2, 200.0, BigDecimal.valueOf(250.5), new Date(), "AAPL");
    int hash1 = holding1.hashCode();
    int hash2 = holding2.hashCode();
    assertNotEquals(hash1, hash2, "Hash codes should be different for different holdingIDs.");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_QuoteNull_rDFY1_jZDw0() {
    HoldingDataBean holding = new HoldingDataBean();
    QuoteDataBean quote = new QuoteDataBean("GOOGL");
    holding.setQuote(quote); // Correctly setting the quote object using the appropriate setter method
    String result = holding.getQuoteID();
    assertEquals("GOOGL", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_holdingID_XsHN0_ayqe0_1() {
    HoldingDataBean holding = HoldingDataBean.getRandomInstance();
    assertNotNull(holding.getHoldingID(), "Holding ID should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_holdingID_XsHN0_ayqe0_2() {
    HoldingDataBean holding = HoldingDataBean.getRandomInstance();
    assertTrue(holding.getHoldingID() >= 0 && holding.getHoldingID() <= 100000, "Holding ID should be a positive integer");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_quantity_okXQ1_qudQ0() {
    HoldingDataBean holding = HoldingDataBean.getRandomInstance();
    double quantity = holding.getQuantity();
    assertTrue(quantity >= 0, "Quantity should be non-negative");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_purchasePrice_WmNb2_sNJE0_1() {
    HoldingDataBean holding = HoldingDataBean.getRandomInstance();
    BigDecimal purchasePrice = holding.getPurchasePrice();
    assertNotNull(purchasePrice, "Purchase price should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_purchasePrice_WmNb2_sNJE0_2() {
    HoldingDataBean holding = HoldingDataBean.getRandomInstance();
    BigDecimal purchasePrice = holding.getPurchasePrice();
    assertTrue(purchasePrice.compareTo(BigDecimal.ZERO) >= 0, "Purchase price should be non-negative");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_purchasePrice_WmNb2_sNJE0_3() {
    HoldingDataBean holding = HoldingDataBean.getRandomInstance();
    BigDecimal purchasePrice = holding.getPurchasePrice();
    assertTrue(purchasePrice.compareTo(new BigDecimal("1000.0")) <= 0, "Purchase price should be less than or equal to 1000");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_purchaseDate_bXzC3_SSfm0_1() {
    HoldingDataBean holding = HoldingDataBean.getRandomInstance();
    Date purchaseDate = holding.getPurchaseDate();
    assertNotNull(purchaseDate, "Purchase date should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_purchaseDate_bXzC3_SSfm0_2() {
    HoldingDataBean holding = HoldingDataBean.getRandomInstance();
    Date purchaseDate = holding.getPurchaseDate();
    assertTrue(purchaseDate.getTime() >= 0 && purchaseDate.getTime() <= Long.MAX_VALUE, "Purchase date should be a valid date");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithPartialFieldsSet_iLsN1() {
    BigDecimal purchasePrice = new BigDecimal("200.00");
    Date purchaseDate = new Date();
    HoldingDataBean holding = new HoldingDataBean(null, 50, purchasePrice, purchaseDate, "GOOGL");
    String result = holding.toString();
    assertTrue(result.contains("Holding Data for holding: null"));
    assertTrue(result.contains("quantity:50.0"));
    assertTrue(result.contains("purchasePrice:200.00"));
    assertTrue(result.contains("purchaseDate:" + purchaseDate.toString()));
    assertTrue(result.contains("quoteID:GOOGL"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCode_DifferentHoldingIDs_mAEH2() {
    Integer holdingID1 = 123;
    Integer holdingID2 = 456;
    HoldingDataBean holding1 = new HoldingDataBean(holdingID1, 100.0, BigDecimal.valueOf(150.5), new Date(), "IBM");
    HoldingDataBean holding2 = new HoldingDataBean(holdingID2, 200.0, BigDecimal.valueOf(250.5), new Date(), "AAPL");
    int hash1 = holding1.hashCode();
    int hash2 = holding2.hashCode();
    assertEquals(holdingID1.hashCode(), hash1, "Hash code should match the hashCode of holdingID1.");
    assertEquals(holdingID2.hashCode(), hash2, "Hash code should match the hashCode of holdingID2.");
    assertNotEquals(hash1, hash2, "Hash codes should be different for different holdingIDs.");
  }
}