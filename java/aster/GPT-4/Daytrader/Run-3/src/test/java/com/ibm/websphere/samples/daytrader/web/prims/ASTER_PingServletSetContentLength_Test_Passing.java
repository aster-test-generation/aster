/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletSetContentLength_Test_Passing {
  @InjectMocks
  private PingServletSetContentLength pingservletsetcontentlength;
  @Mock
  private ServletConfig mockServletConfig;
  PingServletSetContentLength pingServletSetContentLength;
  HttpServletResponse httpServletResponse;
  HttpServletRequest httpServletRequest;
  ServletOutputStream servletOutputStream;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit() throws ServletException {
    // Initialization is handled by Mockito annotations
    pingservletsetcontentlength.init(mockServletConfig);
    verify(mockServletConfig, times(1)).getServletContext();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    pingServletSetContentLength = new PingServletSetContentLength();
    pingServletSetContentLength.doPost(httpServletRequest, httpServletResponse);
    verify(pingServletSetContentLength, times(1)).doGet(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_QdvK0() {
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    String expectedInfo = "Basic dynamic HTML generation through a servlet, with contentLength set by contentLength parameter.";
    assertEquals(expectedInfo, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullContentLength() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingServletSetContentLength = new PingServletSetContentLength();
    when(httpServletRequest.getParameter("contentLength")).thenReturn(null);
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    pingServletSetContentLength.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(servletOutputStream).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithValidContentLength() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingServletSetContentLength = new PingServletSetContentLength();
    when(httpServletRequest.getParameter("contentLength")).thenReturn("10");
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    pingServletSetContentLength.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(servletOutputStream).println(contains("aaaaaaaaaa"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetThrowsIOException() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingServletSetContentLength = new PingServletSetContentLength();
    when(httpServletRequest.getParameter("contentLength")).thenReturn("10");
    when(httpServletResponse.getOutputStream()).thenThrow(new IOException());
    pingServletSetContentLength.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).sendError(500, "java.io.IOException");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullContentLength_gMQg0() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(req.getParameter("contentLength")).thenReturn(null);
    when(res.getOutputStream()).thenReturn(outputStream);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(outputStream).println("<html><head><title>Ping Servlet</title></head><body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet<BR></FONT><FONT size=\"+1\" color=\"#000066\"></B></body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithValidContentLength_HVrq1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outputStream = mock(ServletOutputStream.class);
    when(req.getParameter("contentLength")).thenReturn("10");
    when(res.getOutputStream()).thenReturn(outputStream);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(outputStream).println("<html><head><title>Ping Servlet</title></head><body><HR><BR><FONT size=\"+2\" color=\"#000066\">Ping Servlet<BR></FONT><FONT size=\"+1\" color=\"#000066\">aaaaaaaaa</B></body></html>");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidContentLength_qFry2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(req.getParameter("contentLength")).thenReturn("invalid");
    when(res.getOutputStream()).thenReturn(mock(ServletOutputStream.class));
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doGet(req, res);
    verify(res).sendError(500, "java.lang.NumberFormatException: For input string: \"invalid\"");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_nSZg0_kIRN0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletSetContentLength servlet = new PingServletSetContentLength();
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
  }
}