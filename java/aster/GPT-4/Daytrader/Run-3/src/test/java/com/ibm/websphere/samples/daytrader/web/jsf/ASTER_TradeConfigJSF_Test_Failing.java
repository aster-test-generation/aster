/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Failing {
  @Mock
  private ExternalContext externalContext;
  @Mock
  private HttpSession httpSession;
  @InjectMocks
  private TradeConfigJSF tradeConfigJSF;
  private ExternalContext context;
  private String result = "";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_kmWj0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = new String[]{"Full EJB3", "Mode2", "Mode3"};
    assertArrayEquals(expected, tradeConfig.getRuntimeModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_oNQU0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = {"Sync", "Mode2", "Mode3"}; // Assuming these are the expected modes
    assertArrayEquals(expected, tradeConfig.getOrderProcessingModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetResult_dMUi0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null;
    String actual = tradeConfig.getResult();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_kmWj0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = new String[]{"Mode1", "Mode2", "Mode3"};
    assertArrayEquals(expected, tradeConfig.getRuntimeModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_vIXn0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 0; // Assuming default value or set value
    assertEquals(expected, tradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeMode_xqLW0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = "ExpectedRuntimeMode"; // Set the expected value based on your test environment or mock
    assertEquals(expected, tradeConfig.getRuntimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_hmMi0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 0; // Assuming default value of primIterations is 0
    assertEquals(expected, tradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxUsers_jOpO0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 0; // Assuming default value of maxUsers is 0
    assertEquals(expected, tradeConfig.getMaxUsers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsPublishQuotePriceChange_vaed0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    boolean expected = false; // Assuming default is false, adjust based on actual default or setup
    assertEquals(expected, tradeConfig.isPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_oNQU0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = {"Mode1", "Mode2", "Mode3"}; // Assuming these are the expected modes
    assertArrayEquals(expected, tradeConfig.getOrderProcessingModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxQuotes_sBiS0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 0; // Assuming default value of maxQuotes is 0
    assertEquals(expected, tradeConfig.getMaxQuotes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterface_GVtT0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null; // Assuming default null, adjust based on actual default or set value
    assertEquals(expected, tradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithNewOrderProcessingMode_zIij2_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    TradeConfig.setOrderProcessingMode(1); // Assuming 1 is a valid mode index
    tradeConfigJSF.updateConfig();
    assertEquals(TradeConfig.getOrderProcessingMode(), 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithNewWebInterface_OQQA3_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    TradeConfig.setWebInterface(1); // Assuming 1 is a valid interface index
    tradeConfigJSF.updateConfig();
    assertEquals(TradeConfig.getWebInterface(), 1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithIncreasedMaxUsers_KCxc4_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    TradeConfig.setMAX_USERS(2000);
    tradeConfigJSF.updateConfig();
    assertEquals(TradeConfig.getMAX_USERS(), 2000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithIncreasedMaxQuotes_LrGk5_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    TradeConfig.setMAX_QUOTES(2000);
    tradeConfigJSF.updateConfig();
    assertEquals(TradeConfig.getMAX_QUOTES(), 2000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithNewMarketSummaryInterval_hmxh6_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    TradeConfig.setMarketSummaryInterval(15);
    tradeConfigJSF.updateConfig();
    assertEquals(TradeConfig.getMarketSummaryInterval(), 15);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_JMni0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = "defaultMode"; // Assuming "defaultMode" is a valid mode for the purpose of this test
    assertEquals(expected, tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_hwyh0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expectedFrequency = 0; // Assuming default or set value in a real scenario
    assertEquals(expectedFrequency, tradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPopulateDatabase_pbhH0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.populateDatabase();
    assertNotNull(result);
    assertTrue(result.contains("TradeBuildDB: **** DayTrader Database Built"));
    assertTrue(result.contains("users created,"));
    assertTrue(result.contains("quotes created. ****<br/>"));
    assertTrue(result.contains("TradeBuildDB: **** Check System.Out for any errors. ****<br/>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPopulateDatabase_pbhH0_2_fid3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.populateDatabase();
    assertTrue(result.contains("TradeBuildDB: **** DayTrader Database Built"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPopulateDatabase_pbhH0_3() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.populateDatabase();
    assertTrue(result.contains("users created,"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPopulateDatabase_pbhH0_4() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.populateDatabase();
    assertTrue(result.contains("quotes created. ****<br/>"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPopulateDatabase_pbhH0_5() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.populateDatabase();
    assertTrue(result.contains("TradeBuildDB: **** Check System.Out for any errors. ****<br/>"));
  }
}