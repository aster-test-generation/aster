/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MDBStats_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_NewType_wskz0_vEuP0_1() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "newType";
    long sendTime = 100;
    long recvTime = 200;
    TimerStat result = mdbStats.addTiming(type, sendTime, recvTime);
    assertEquals(1, result.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_NewType_wskz0_vEuP0_3() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "newType";
    long sendTime = 100;
    long recvTime = 200;
    TimerStat result = mdbStats.addTiming(type, sendTime, recvTime);
    assertEquals(100, result.getMax(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_NewType_wskz0_vEuP0_4() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "newType";
    long sendTime = 100;
    long recvTime = 200;
    TimerStat result = mdbStats.addTiming(type, sendTime, recvTime);
    assertEquals(100, result.getMin(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeLowerTime_IIdC2_rtwJ0_1() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "existingType";
    mdbStats.addTiming(type, 100, 200); // Initial call to set up
    TimerStat result = mdbStats.addTiming(type, 150, 225);
    assertEquals(2, result.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeLowerTime_IIdC2_rtwJ0_3() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "existingType";
    mdbStats.addTiming(type, 100, 200); // Initial call to set up
    TimerStat result = mdbStats.addTiming(type, 150, 225);
    assertEquals(100, result.getMax(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeLowerTime_IIdC2_rtwJ0_4() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "existingType";
    mdbStats.addTiming(type, 100, 200); // Initial call to set up
    TimerStat result = mdbStats.addTiming(type, 150, 225);
    assertEquals(75, result.getMin(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_SameTimeTwice_ZKEB3_HqHd0_1() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "sameTimeType";
    mdbStats.addTiming(type, 100, 200);
    TimerStat result = mdbStats.addTiming(type, 100, 200);
    assertEquals(2, result.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_SameTimeTwice_ZKEB3_HqHd0_3() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "sameTimeType";
    mdbStats.addTiming(type, 100, 200);
    TimerStat result = mdbStats.addTiming(type, 100, 200);
    assertEquals(100, result.getMax(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_SameTimeTwice_ZKEB3_HqHd0_4() {
    MDBStats mdbStats = MDBStats.getInstance();
    String type = "sameTimeType";
    mdbStats.addTiming(type, 100, 200);
    TimerStat result = mdbStats.addTiming(type, 100, 200);
    assertEquals(100, result.getMin(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetInstance_NotNull_RnOu0_nTnU0() {
    MDBStats instance = MDBStats.getInstance();
    assertNotNull(instance, "Instance should not be null");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetInstance_SingletonProperty_fpDe1_JnlV0() {
    MDBStats instance1 = MDBStats.getInstance();
    MDBStats instance2 = MDBStats.getInstance();
    assertSame(instance1, instance2, "Both instances should be the same");
  }
}