/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.io.IOException;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_OrdersAlertFilter_Test_Failing {
  @Mock
  private FilterConfig filterConfig;
  @Mock
  private TradeServices tradeAction;
  @Mock
  private ServletRequest req;
  @Mock
  private ServletResponse resp;
  @Mock
  private FilterChain chain;
  @Mock
  private HttpServletRequest httpRequest;
  @Mock
  private OrdersAlertFilter ordersAlertFilter;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullFilterConfig_aAjb0() throws IOException, ServletException {
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithDisplayOrderAlertsFalse_KeYf1() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(false);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNoActionParameter_qExO2() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn(null);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithEmptyActionParameter_ctZT3() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithLogoutAction_YTav4() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("logout");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithLoginActionAndNullUserID_dimK5() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn(null);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithLoginActionAndEmptyUserID_bjzS6() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithValidLoginAction_UCyU7_GkVY0() throws IOException, ServletException {
    when(TradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("123");
    try {
      when(tradeAction.getClosedOrders("123")).thenReturn(Collections.emptyList());
    } catch (Exception e) {
    }
    filter.doFilter(req, resp, chain);
    verify(req, never()).setAttribute(eq("closedOrders"), any());
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullFilterConfig_aAjb0_fid1() throws IOException, ServletException {
    Instance<TradeServices> mockServices = mock(Instance.class);
    OrdersAlertFilter filter = new OrdersAlertFilter(mockServices);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithDisplayOrderAlertsFalse_KeYf1_fid1() throws IOException, ServletException {
    TradeConfig mockTradeConfig = mock(TradeConfig.class);
    when(mockTradeConfig.getDisplayOrderAlerts()).thenReturn(false);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNoActionParameter_qExO2_fid1() throws IOException, ServletException {
    TradeConfig mockTradeConfig = mock(TradeConfig.class);
    when(mockTradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn(null);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithEmptyActionParameter_ctZT3_fid1() throws IOException, ServletException {
    TradeConfig mockTradeConfig = mock(TradeConfig.class);
    when(mockTradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithLogoutAction_YTav4_fid1() throws IOException, ServletException {
    TradeConfig mockTradeConfig = mock(TradeConfig.class);
    when(mockTradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("logout");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithLoginActionAndNullUserID_dimK5_fid1() throws IOException, ServletException {
    TradeConfig mockTradeConfig = mock(TradeConfig.class);
    when(mockTradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn(null);
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithLoginActionAndEmptyUserID_bjzS6_fid1() throws IOException, ServletException {
    TradeConfig mockTradeConfig = mock(TradeConfig.class);
    when(mockTradeConfig.getDisplayOrderAlerts()).thenReturn(true);
    OrdersAlertFilter filter = new OrdersAlertFilter(null);
    ServletRequest req = mock(ServletRequest.class);
    ServletResponse resp = mock(ServletResponse.class);
    FilterChain chain = mock(FilterChain.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("");
    filter.doFilter(req, resp, chain);
    verify(chain, times(1)).doFilter(req, resp);
  }
}