/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_Log_Test_Failing {
  private static final Logger log = Logger.getLogger(Log.class.getName());

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTrace_gnZo0() {
    String message = "TestMessage";
    Object parm1 = new Object();
    Object parm2 = new Object();
    Object parm3 = new Object();
    Object parm4 = new Object();
    Log spyLog = spy(Log.class);
    doNothing().when(spyLog).trace(anyString());
    spyLog.trace(message, parm1, parm2, parm3, parm4);
    verify(spyLog).trace("TestMessage(" + parm1 + ", " + parm2 + ", " + parm3 + "), " + parm4);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTraceWithThreeParameters_gEGG0() {
    Log spyLog = spy(Log.class);
    doNothing().when(spyLog).trace(anyString());
    spyLog.trace("Test Message", "Param1", 123, true);
    verify(spyLog).trace("Test Message(Param1, 123, true)");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testTrace_eIpO0() {
    String message = "TestMessage";
    Object parm1 = new Object();
    Object parm2 = new Object();
    Object parm3 = new Object();
    Object parm4 = new Object();
    Object parm5 = new Object();
    Object parm6 = new Object();
    Object parm7 = new Object();
    Log spyLog = spy(Log.class);
    doNothing().when(spyLog).trace(anyString());
    spyLog.trace(message, parm1, parm2, parm3, parm4, parm5, parm6, parm7);
    verify(spyLog).trace("TestMessage(" + parm1 + ", " + parm2 + ", " + parm3 + "), " + parm4 + ", " + parm5 + ", " + parm6 + ", " + parm7);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorMethod_KELf0() {
    Throwable mockThrowable = mock(Throwable.class);
    String msg1 = "Error level 1";
    String msg2 = "Error level 2";
    String msg3 = "Error level 3";
    Log.error(mockThrowable, msg1, msg2, msg3);
    verify(mockThrowable).printStackTrace();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testErrorMethod_oWuX0() {
    Throwable mockThrowable = mock(Throwable.class);
    Log.error("Error message 1", "Error message 2", "Error message 3", mockThrowable);
    verify(mockThrowable).printStackTrace();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoTrace_rlqH0_fid1() {
    Logger log = Logger.getLogger(Log.class.getName());
    log.setLevel(Level.FINE);
    assertTrue(Log.doTrace());
  }
}