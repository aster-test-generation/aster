/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_AccountDataJSF_Test_Passing {
  @Mock
  private ExternalContext context;
  @Mock
  private TradeServices tradeAction;
  @Mock
  private HttpSession session;
  @Mock
  private Instance<TradeServices> services;
  @InjectMocks
  private AccountDataJSF accountDataJSF;
  private OrderData[] closedOrders;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSessionCreationDate_aCTm0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    Date expectedDate = new Date(); // Assuming sessionCreationDate is set to the current date somewhere in the class
    assertEquals(expectedDate, accountData.getSessionCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastLogin_ywyA0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    Date expectedDate = new Date();
    accountData.setLastLogin(expectedDate);
    assertEquals(expectedDate, accountData.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberHoldings_xmWF0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    Integer expected = 0; // Assuming default or initialized to 0
    Integer actual = accountData.getNumberHoldings();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberOfOrders_vTOG0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null is acceptable for the constructor
    Integer expected = 0; // Assuming default or initial value is 0
    Integer actual = accountData.getNumberOfOrders();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGain_CgOP0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal expectedGain = BigDecimal.ZERO; // Assuming default gain is zero if not set
    assertEquals(expectedGain, accountData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_BwLw0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    Date expectedDate = new Date();  // Assuming creationDate is set to the current date when the object is created
    assertEquals(expectedDate, accountData.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_ClMx0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    int expected = 0; // Assuming default or initial value of logoutCount is 0
    assertEquals(expected, accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberOfOrderRows_ADyM0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    Integer expectedRows = 0; // Assuming default or initial value
    Integer actualRows = accountData.getNumberOfOrderRows();
    assertEquals(expectedRows, actualRows);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCurrentTime_WqmE0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null is acceptable for Instance<TradeServices>
    Date expected = new Date();
    Date actual = accountData.getCurrentTime();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_Djbz0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    assertEquals(0, accountData.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_MSoU0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed if not specified otherwise
    OrderData[] result = accountData.getClosedOrders();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID_CNLG0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null is acceptable for the constructor
    Integer expectedAccountID = null; // Assuming the default value of accountID is null
    assertEquals(expectedAccountID, accountData.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_pxpY0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for now due to lack of context
    BigDecimal expected = BigDecimal.ZERO; // Assuming expected value based on default or mocked setup
    BigDecimal result = accountData.getGainPercent();
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentHTML_KhGO0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    String result = accountData.getGainPercentHTML();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_zJpy0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    String expectedProfileID = null; // Assuming profileID is initialized to null
    String actualProfileID = accountData.getProfileID();
    assertEquals(expectedProfileID, actualProfileID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDate_VgbB0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    Date expectedDate = new Date();
    accountData.setCreationDate(expectedDate);
    assertEquals(expectedDate, accountData.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileID_okuW0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null is acceptable for Instance<TradeServices>
    String expectedProfileID = "12345";
    accountData.setProfileID(expectedProfileID);
    assertEquals(expectedProfileID, accountData.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToggleShowAllRowsSetsNumberOfOrderRowsToZero_ctig0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    accountData.toggleShowAllRows();
    assertEquals(0, accountData.getNumberOfOrderRows());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingsTotal_ctht0() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null);
    BigDecimal expected = new BigDecimal("100.00");
    accountDataJSF.setHoldingsTotal(expected);
    assertEquals(expected, accountDataJSF.getHoldingsTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumOfCashHoldings_jgFJ0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming default sumOfCashHoldings is initialized to ZERO
    BigDecimal actual = accountData.getSumOfCashHoldings();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNumberHoldings_mxFJ0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    Integer expectedNumberHoldings = 5;
    accountData.setNumberHoldings(expectedNumberHoldings);
    assertEquals(expectedNumberHoldings, accountData.getNumberHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_AZbn0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal expectedBalance = new BigDecimal("0"); // Assuming initial balance is 0 for this test case
    assertEquals(expectedBalance, accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_HILO0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    Date expected = null; // Assuming lastLogin has not been initialized and defaults to null
    assertEquals(expected, accountData.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsTotal_dJEZ0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming default or initial value
    BigDecimal actual = accountData.getHoldingsTotal();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllOrdersReturnsNotNull_gAhP0() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null); // Assuming null can be passed if Instance<TradeServices> is not used in the method
    OrderData[] result = accountDataJSF.getAllOrders();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSessionCreationDate_VAFA0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    Date expectedDate = new Date();
    accountData.setSessionCreationDate(expectedDate);
    assertEquals(expectedDate, accountData.getSessionCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_ePtQ0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    BigDecimal expected = BigDecimal.ZERO; // Assuming the default openBalance is ZERO
    assertEquals(expected, accountData.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_UMcC0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal expectedBalance = new BigDecimal("100.00");
    accountData.setBalance(expectedBalance);
    assertEquals(expectedBalance, accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCurrentTime_IMVS0_cbbz0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    Date expectedTime = new Date();
    accountData.setCurrentTime(expectedTime);
    assertEquals(expectedTime, accountData.getCurrentTime());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_QgYu0_AGgW0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null is acceptable for the constructor
    accountData.setLoginCount(5);
    assertEquals(5, accountData.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTML_pYBB0_DDKs0() {
    Instance<TradeServices> services = mock(Instance.class);
    AccountDataJSF accountDataJSF = new AccountDataJSF(services);
    BigDecimal gain = BigDecimal.valueOf(100.0); // Corrected type to BigDecimal
    when(FinancialUtils.printGainHTML(gain)).thenReturn("<div>Gain: $100.00</div>");
    String result = accountDataJSF.getGainHTML();
    assertEquals("<div>Gain: $100.00</div>", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNumberOfOrders_WqUF0_hsvz0() {
    AccountDataJSF accountDataJSF = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    accountDataJSF.setNumberOfOrders(5);
    assertEquals(Integer.valueOf(5), accountDataJSF.getNumberOfOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGain_zIiH0_QSAH0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal expectedGain = new BigDecimal("100.00");
    accountData.setGain(expectedGain);
    assertEquals(expectedGain, accountData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_IxQK0_dBdy0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    accountData.setLogoutCount(5);
    assertEquals(5, accountData.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumOfCashHoldings_wILk0_rhUc0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed if Instance<TradeServices> is not used in the test
    BigDecimal expected = new BigDecimal("1000.00");
    accountData.setSumOfCashHoldings(expected);
    assertEquals(expected, accountData.getSumOfCashHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountID_rYVw0_bPpi0() {
    AccountDataJSF accountData = new AccountDataJSF(null); // Assuming null can be passed for Instance<TradeServices>
    Integer expectedAccountID = 123;
    accountData.setAccountID(expectedAccountID);
    assertEquals(expectedAccountID, accountData.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenBalance_kYCM0_BHxa0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    BigDecimal expectedBalance = new BigDecimal("1000");
    accountData.setBalance(expectedBalance);
    assertEquals(expectedBalance, accountData.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNumberOfOrderRows_KioB0_FoQv0() {
    AccountDataJSF accountData = new AccountDataJSF(null);
    Integer expectedNumberOfOrderRows = 5;
    accountData.setNumberOfOrderRows(expectedNumberOfOrderRows);
    assertEquals(expectedNumberOfOrderRows, accountData.getNumberOfOrderRows());
  }
}