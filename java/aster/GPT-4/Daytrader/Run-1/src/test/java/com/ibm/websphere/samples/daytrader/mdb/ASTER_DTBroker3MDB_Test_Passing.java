/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.mdb;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.jms.Message;
import javax.jms.TextMessage;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_DTBroker3MDB_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBootstrapTradeServicesWithInvalidMode_yNTl1() {
    DTBroker3MDB broker = new DTBroker3MDB();
    TradeConfig.setRunTimeMode(-1); // Assuming -1 is an invalid mode index
    Exception exception = assertThrows(RuntimeException.class, () -> broker.boostrapTradeServices());
    assertNotNull(exception);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBootstrapTradeServicesWithHighModeIndex_ZtrQ8() {
    DTBroker3MDB broker = new DTBroker3MDB();
    TradeConfig.setRunTimeMode(100); // Assuming 100 is out of bounds
    Exception exception = assertThrows(ArrayIndexOutOfBoundsException.class, () -> broker.boostrapTradeServices());
    assertNotNull(exception);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBootstrapTradeServicesWithNegativeModeIndex_ndgU9() {
    DTBroker3MDB broker = new DTBroker3MDB();
    TradeConfig.setRunTimeMode(-100); // Assuming -100 is invalid
    Exception exception = assertThrows(ArrayIndexOutOfBoundsException.class, () -> broker.boostrapTradeServices());
    assertNotNull(exception);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageRedeliveredMessage_BHmD4() throws Exception {
    Message message = mock(TextMessage.class);
    when(message.getJMSRedelivered()).thenReturn(true);
    when(((TextMessage) message).getText()).thenReturn("This is a redelivered message");
    DTBroker3MDB broker = new DTBroker3MDB();
    broker.onMessage(message);
    verify(message).getJMSRedelivered();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBootstrapTradeServicesWithInvalidMode_yNTl1_1() {
    DTBroker3MDB broker = new DTBroker3MDB();
    TradeConfig.setRunTimeMode(-1); // Assuming -1 is an invalid mode index
    Exception exception = assertThrows(RuntimeException.class, () -> broker.boostrapTradeServices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBootstrapTradeServicesWithHighModeIndex_ZtrQ8_1() {
    DTBroker3MDB broker = new DTBroker3MDB();
    TradeConfig.setRunTimeMode(100); // Assuming 100 is out of bounds
    Exception exception = assertThrows(ArrayIndexOutOfBoundsException.class, () -> broker.boostrapTradeServices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBootstrapTradeServicesWithNegativeModeIndex_ndgU9_1() {
    DTBroker3MDB broker = new DTBroker3MDB();
    TradeConfig.setRunTimeMode(-100); // Assuming -100 is invalid
    Exception exception = assertThrows(ArrayIndexOutOfBoundsException.class, () -> broker.boostrapTradeServices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnMessageWithNewOrderCommand_lkfI1_fid1() throws Exception {
    Message message = mock(TextMessage.class);
  }
}