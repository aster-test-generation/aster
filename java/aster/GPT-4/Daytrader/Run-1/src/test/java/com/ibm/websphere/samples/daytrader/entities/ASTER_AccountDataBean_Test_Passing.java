/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLoginCount_yxCO0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setLoginCount(5);
    assertEquals(5, accountDataBean.getLoginCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_vIoZ0_1() {
    AccountDataBean randomAccount = AccountDataBean.getRandomInstance();
    assertNotNull(randomAccount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_vIoZ0_2() {
    AccountDataBean randomAccount = AccountDataBean.getRandomInstance();
    assertNotNull(randomAccount.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_vIoZ0_3() {
    AccountDataBean randomAccount = AccountDataBean.getRandomInstance();
    assertTrue(randomAccount.getLoginCount() >= 0 && randomAccount.getLoginCount() <= 10000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_vIoZ0_4() {
    AccountDataBean randomAccount = AccountDataBean.getRandomInstance();
    assertTrue(randomAccount.getLogoutCount() >= 0 && randomAccount.getLogoutCount() <= 10000);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_vIoZ0_5() {
    AccountDataBean randomAccount = AccountDataBean.getRandomInstance();
    assertNotNull(randomAccount.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_vIoZ0_6() {
    AccountDataBean randomAccount = AccountDataBean.getRandomInstance();
    assertNotNull(randomAccount.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_vIoZ0_7() {
    AccountDataBean randomAccount = AccountDataBean.getRandomInstance();
    assertTrue(randomAccount.getBalance().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_vIoZ0_8() {
    AccountDataBean randomAccount = AccountDataBean.getRandomInstance();
    assertTrue(randomAccount.getOpenBalance().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_vIoZ0_9() {
    AccountDataBean randomAccount = AccountDataBean.getRandomInstance();
    assertNotNull(randomAccount.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLogoutCount_cVIG0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    int expectedLogoutCount = 5;
    accountDataBean.setLogoutCount(expectedLogoutCount);
    assertEquals(expectedLogoutCount, accountDataBean.getLogoutCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLastLogin_NXig0() {
    Date expectedLastLogin = new Date();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setLastLogin(expectedLastLogin);
    assertEquals(expectedLastLogin, accountDataBean.getLastLogin());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailureDueToNullProfile_ItnY2() {
    AccountDataBean account = new AccountDataBean();
    account.setProfile(null);
    account.setAccountID(1);
    account.setLoginCount(0);
    account.setLastLogin(new Timestamp(System.currentTimeMillis()));
    try {
      account.login("password123");
      fail("Login should fail but succeeded.");
    } catch (EJBException e) {
      assertEquals("AccountBean:Login failure for account: 1null AccountProfile", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNonNullAccountId_iKXP0() {
    Integer accountId = 123;
    AccountDataBean accountDataBean = new AccountDataBean(accountId, 5, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("150.00"), "profile1");
    int expectedHash = accountId.hashCode();
    assertEquals(expectedHash, accountDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullAccountId_QgLN1() {
    AccountDataBean accountDataBean = new AccountDataBean(null, 5, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("150.00"), "profile1");
    int expectedHash = 0;
    assertEquals(expectedHash, accountDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldings_XNTk0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Collection<HoldingDataBean> holdings = new ArrayList<>();
    holdings.add(new HoldingDataBean());
    accountDataBean.setHoldings(holdings);
    assertEquals(holdings, accountDataBean.getHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreationDate_nzmv0() {
    Date expectedCreationDate = new Date();
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, expectedCreationDate, expectedCreationDate, new BigDecimal("1000"), new BigDecimal("500"), "userProfile");
    Date actualCreationDate = accountDataBean.getCreationDate();
    assertEquals(expectedCreationDate, actualCreationDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLogoutCount_macu0() {
    AccountDataBean accountDataBean = new AccountDataBean(5, 10, new Date(), new Date(), new BigDecimal("1000.00"), new BigDecimal("500.00"), "userProfile");
    int expected = 10;
    int actual = accountDataBean.getLogoutCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_UMSx0() {
    Date lastLogin = new Date();
    Date creationDate = new Date();
    BigDecimal balance = new BigDecimal("1000.00");
    BigDecimal openBalance = new BigDecimal("500.00");
    AccountDataBean accountDataBean = new AccountDataBean(1, 10, 5, lastLogin, creationDate, balance, openBalance, "userProfile");
    String expectedHTML = "<BR>Account Data for account: <B>" + 1 + "</B>" +
        "<LI>   loginCount:" + 10 + "</LI>" +
        "<LI>  logoutCount:" + 5 + "</LI>" +
        "<LI>    lastLogin:" + lastLogin + "</LI>" +
        "<LI> creationDate:" + creationDate + "</LI>" +
        "<LI>      balance:" + balance + "</LI>" +
        "<LI>  openBalance:" + openBalance + "</LI>" +
        "<LI>    profileID:" + "userProfile" + "</LI>";
    String actualHTML = accountDataBean.toHTML();
    assertEquals(expectedHTML, actualHTML);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccountID_dNvx0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Integer expectedAccountID = 123;
    accountDataBean.setAccountID(expectedAccountID);
    assertEquals(expectedAccountID, accountDataBean.getAccountID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLoginCount_rvxD0() {
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("50.00"), "userProfile");
    int expected = 5;
    int actual = accountDataBean.getLoginCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountID_qNMa0() {
    Integer expectedAccountID = 123;
    AccountDataBean accountDataBean = new AccountDataBean(expectedAccountID, 5, 3, new Date(), new Date(), new BigDecimal("100.50"), new BigDecimal("200.75"), "userProfile");
    Integer actualAccountID = accountDataBean.getAccountID();
    assertEquals(expectedAccountID, actualAccountID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_CoKb0() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("100.00"), "profile1");
    assertTrue(accountDataBean1.equals(accountDataBean1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_MOrH1() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("100.00"), "profile1");
    Object otherObject = new Object();
    assertFalse(accountDataBean1.equals(otherObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_lKuk2() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 2, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("100.00"), "profile1");
    assertFalse(accountDataBean1.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentAccountID_paiE3() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 1, 2, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("100.00"), "profile1");
    AccountDataBean accountDataBean2 = new AccountDataBean(2, 1, 2, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("100.00"), "profile1");
    assertFalse(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameAccountID_aZwJ4() {
    AccountDataBean accountDataBean1 = new AccountDataBean(1, 1, 2, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("100.00"), "profile1");
    AccountDataBean accountDataBean2 = new AccountDataBean(1, 1, 2, new Date(), new Date(), new BigDecimal("100.00"), new BigDecimal("100.00"), "profile1");
    assertTrue(accountDataBean1.equals(accountDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_nOMD0() {
    Integer accountID = 1;
    int loginCount = 5;
    int logoutCount = 3;
    Date lastLogin = new Date();
    Date creationDate = new Date();
    BigDecimal balance = new BigDecimal("1000.00");
    BigDecimal openBalance = new BigDecimal("500.00");
    String profileID = "user123";
    AccountDataBean accountDataBean = new AccountDataBean(accountID, loginCount, logoutCount, lastLogin, creationDate, balance, openBalance, profileID);
    String expected = "\n\tAccount Data for account: " + accountDataBean.getAccountID() +
        "\n\t\t   loginCount:" + accountDataBean.getLoginCount() +
        "\n\t\t  logoutCount:" + accountDataBean.getLogoutCount() +
        "\n\t\t    lastLogin:" + accountDataBean.getLastLogin() +
        "\n\t\t creationDate:" + accountDataBean.getCreationDate() +
        "\n\t\t      balance:" + accountDataBean.getBalance() +
        "\n\t\t  openBalance:" + accountDataBean.getOpenBalance() +
        "\n\t\t    profileID:" + accountDataBean.getProfileID();
    assertEquals(expected, accountDataBean.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenBalance_nvGr0() {
    BigDecimal initialOpenBalance = new BigDecimal("1000.00");
    BigDecimal newOpenBalance = new BigDecimal("1500.00");
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("2000.00"), initialOpenBalance, "userProfile");
    accountDataBean.setOpenBalance(newOpenBalance);
    assertEquals(newOpenBalance, accountDataBean.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProfileID_LEga0() {
    String expectedProfileID = "user123";
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("1000.00"), new BigDecimal("500.00"), expectedProfileID);
    String actualProfileID = accountDataBean.getProfileID();
    assertEquals(expectedProfileID, actualProfileID);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreationDate_sxAh0() {
    Date expectedDate = new Date();
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setCreationDate(expectedDate);
    assertEquals(expectedDate, accountDataBean.getCreationDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfileID_GOCp0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    String expectedProfileID = "testProfile";
    accountDataBean.setProfileID(expectedProfileID);
    assertEquals(expectedProfileID, accountDataBean.getProfileID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProfile_vOik0() {
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    account.setProfile(profile);
    assertEquals(profile, account.getProfile());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrders_QFZv0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Collection<OrderDataBean> orders = new ArrayList<>();
    orders.add(new OrderDataBean());
    accountDataBean.setOrders(orders);
    assertEquals(orders, accountDataBean.getOrders());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersReturnsEmptyCollectionWhenNoOrdersAdded_ZQVe0() {
    AccountDataBean accountDataBean = new AccountDataBean();
    Collection<OrderDataBean> orders = accountDataBean.getOrders();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLastLogin_JPKf0() {
    Date expectedLastLogin = new Date();
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, expectedLastLogin, new Date(), BigDecimal.valueOf(1000), BigDecimal.valueOf(500), "user123");
    Date actualLastLogin = accountDataBean.getLastLogin();
    assertEquals(expectedLastLogin, actualLastLogin);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_mWmS0() {
    BigDecimal expectedBalance = new BigDecimal("100.00");
    AccountDataBean accountDataBean = new AccountDataBean(1, 1, new Date(), new Date(), expectedBalance, new BigDecimal("50.00"), "profile1");
    BigDecimal result = accountDataBean.getBalance();
    assertEquals(expectedBalance, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_ZhTv0() {
    BigDecimal expectedOpenBalance = new BigDecimal("1000.00");
    AccountDataBean accountDataBean = new AccountDataBean(5, 3, new Date(), new Date(), new BigDecimal("1500.00"), expectedOpenBalance, "userProfile");
    BigDecimal actualOpenBalance = accountDataBean.getOpenBalance();
    assertEquals(expectedOpenBalance, actualOpenBalance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_UUuh0() {
    BigDecimal newBalance = new BigDecimal("100.00");
    AccountDataBean accountDataBean = new AccountDataBean();
    accountDataBean.setBalance(newBalance);
    assertEquals(newBalance, accountDataBean.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginFailureDueToIncorrectPassword_wtcl1_cPGM0() {
    AccountDataBean account = new AccountDataBean();
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID("user");
    profile.setPassword("password123");
    account.setProfile(profile);
    account.setAccountID(1);
    account.setLoginCount(0);
    account.setLastLogin(new Timestamp(System.currentTimeMillis()));
    try {
      account.login("wrongPassword");
      fail("Login should fail but succeeded.");
    } catch (EJBException e) {
      assertEquals("AccountBean:Login failure for account: 1\n\tIncorrect password-->user:password123", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginUpdatesLastLoginAndCount_UqyA3_xEFS0() {
    AccountDataBean account = new AccountDataBean();
    AccountProfileDataBean profile = new AccountProfileDataBean(); // Assuming default constructor
    profile.setUserID("user");
    profile.setPassword("password123");
    account.setProfile(profile);
    account.setAccountID(1);
    int initialLoginCount = 5;
    account.setLoginCount(initialLoginCount);
    Timestamp beforeLogin = new Timestamp(System.currentTimeMillis());
    account.setLastLogin(beforeLogin);
    try {
      account.login("password123");
      assertFalse(account.getLastLogin().after(beforeLogin));
      assertEquals(initialLoginCount + 1, account.getLoginCount());
    } catch (EJBException e) {
      fail("Login should not throw an exception.");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_vIoZ0() {
    AccountDataBean randomAccount = AccountDataBean.getRandomInstance();
    assertNotNull(randomAccount);
    assertNotNull(randomAccount.getAccountID());
    assertTrue(randomAccount.getLoginCount() >= 0 && randomAccount.getLoginCount() <= 10000);
    assertTrue(randomAccount.getLogoutCount() >= 0 && randomAccount.getLogoutCount() <= 10000);
    assertNotNull(randomAccount.getLastLogin());
    assertNotNull(randomAccount.getCreationDate());
    assertTrue(randomAccount.getBalance().compareTo(BigDecimal.ZERO) >= 0);
    assertTrue(randomAccount.getOpenBalance().compareTo(BigDecimal.ZERO) >= 0);
    assertNotNull(randomAccount.getProfileID());
  }
}