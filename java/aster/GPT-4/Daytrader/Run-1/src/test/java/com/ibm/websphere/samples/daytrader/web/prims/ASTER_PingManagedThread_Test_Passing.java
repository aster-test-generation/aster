/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.util.concurrent.TimeUnit;
import javax.enterprise.concurrent.ManagedThreadFactory;
import javax.servlet.AsyncContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingManagedThread_Test_Passing {
  PingManagedThread pingManagedThread;
  ServletConfig mockConfig;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  @Mock
  private ManagedThreadFactory managedThreadFactory;
  @Mock
  private HttpServletRequest httpservletrequest;
  @Mock
  private HttpServletResponse httpservletresponse;
  @Mock
  private ServletOutputStream servletoutputstream;
  @Mock
  private AsyncContext asyncContext;
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingManagedThread = new PingManagedThread();
    // Arrange
    PingManagedThread spyPingManagedThread = spy(pingManagedThread);
    // Act
    spyPingManagedThread.doPost(httpServletRequest, httpServletResponse);
    // Assert
    verify(spyPingManagedThread, times(1)).doGet(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_FZXO0() throws Exception {
    HttpServletRequest mockRequest = mock(HttpServletRequest.class);
    HttpServletResponse mockResponse = mock(HttpServletResponse.class);
    PingManagedThread pingManagedThread = new PingManagedThread();
    pingManagedThread.doPost(mockRequest, mockResponse);
    verify(mockRequest, atLeastOnce()).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_pPnE0() {
    PingManagedThread pingManagedThread = new PingManagedThread();
    String result = pingManagedThread.getServletInfo();
    assertEquals("Tests a ManagedThread asynchronous servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws Exception {
    when(httpservletresponse.getOutputStream()).thenReturn(servletoutputstream);
    when(httpservletrequest.startAsync()).thenReturn(asyncContext);
    // Setup
    Thread mockThread = new Thread();
    when(managedThreadFactory.newThread(any(Runnable.class))).thenReturn(mockThread);
    // Execute
    pingManagedThread.doGet(httpservletrequest, httpservletresponse);
    // Verify
    verify(httpservletresponse).setContentType("text/html");
    verify(httpservletresponse.getOutputStream()).println(startsWith("<html><head><title>Ping ManagedThread</title></head>"));
    verify(managedThreadFactory).newThread(any(Runnable.class));
    verify(mockThread).start();
    verify(asyncContext, timeout(1000)).complete(); // Ensure async context is completed
    // Since the actual output writing happens in another thread, we might need to add some synchronization
    // or additional checks if we want to verify the output written by the thread.
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_kadt0() throws Exception {
    HttpServletRequest mockReq = mock(HttpServletRequest.class);
    HttpServletResponse mockRes = mock(HttpServletResponse.class);
    AsyncContext mockAsyncContext = mock(AsyncContext.class);
    ServletOutputStream mockOut = mock(ServletOutputStream.class);
    when(mockReq.startAsync()).thenReturn(mockAsyncContext);
    when(mockRes.getOutputStream()).thenReturn(mockOut);
    PingManagedThread servlet = new PingManagedThread();
    servlet.doGet(mockReq, mockRes);
    verify(mockRes).setContentType("text/html");
    verify(mockOut).println(anyString());
    verify(mockAsyncContext).complete();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_HfCM0_1() throws ServletException {
    pingManagedThread = new PingManagedThread();
    mockConfig = mock(ServletConfig.class);
    pingManagedThread.init(mockConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_HfCM0_2() throws ServletException {
    pingManagedThread = new PingManagedThread();
    mockConfig = mock(ServletConfig.class);
    pingManagedThread.init(mockConfig);
    assertEquals(0, hitCount);
  }
}