/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession2_Test_Failing {
  @Mock
  private ServletConfig mockConfig;
  @InjectMocks
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_JEEA0() throws ServletException, IOException {
    HttpServletRequest mockReq = mock(HttpServletRequest.class);
    HttpServletResponse mockRes = mock(HttpServletResponse.class);
    PingSession2 pingSession = new PingSession2();
    pingSession.doPost(mockReq, mockRes);
    verify(mockReq, atLeast(1)).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_BfVY0() {
    PingSession2 session = new PingSession2();
    String expected = "HTTP Session Key: Tests management of a read/write unique id";
    assertEquals(expected, session.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_BfVY0_fid1() {
    PingSession2 session = new PingSession2();
    String expected = "HTTP Session Test 2: Session create/invalidate";
    assertEquals(expected, session.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_diIF0() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    HttpSession httpSession = mock(HttpSession.class);
    PingSession2 pingSession2 = mock(PingSession2.class);
    when(httpServletRequest.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("sessiontest.counter")).thenReturn(null, 1, 2, 3, 4);
    doNothing().when(httpServletResponse).setContentType(anyString());
    doNothing().when(httpServletResponse).setHeader(anyString(), anyString());
    PrintWriter printWriter = mock(PrintWriter.class);
    when(httpServletResponse.getWriter()).thenReturn(printWriter);
    doNothing().when(pingSession2).doGet(any(HttpServletRequest.class), any(HttpServletResponse.class));
    pingSession2.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getSession(true);
    verify(httpSession, times(5)).getAttribute("sessiontest.counter");
    verify(httpSession, times(4)).setAttribute(eq("sessiontest.counter"), any());
    verify(httpServletResponse, never()).sendError(anyInt(), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_diIF0_fid2() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    HttpSession httpSession = mock(HttpSession.class);
    PingSession2 pingSession2 = new PingSession2();
    when(httpServletRequest.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("sessiontest.counter")).thenReturn(null, 1, 2, 3, 4);
    doNothing().when(httpServletResponse).setContentType(anyString());
    doNothing().when(httpServletResponse).setHeader(anyString(), anyString());
    PrintWriter printWriter = mock(PrintWriter.class);
    when(httpServletResponse.getWriter()).thenReturn(printWriter);
    pingSession2.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletRequest, times(1)).getSession(true);
    verify(httpSession, times(5)).getAttribute("sessiontest.counter");
    verify(httpSession, times(4)).setAttribute(eq("sessiontest.counter"), any());
    verify(httpServletResponse, never()).sendError(anyInt(), anyString());
  }
}