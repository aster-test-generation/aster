/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirectDBUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.mock.web.MockServletConfig;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigServlet_Test_Passing {
  @InjectMocks
  private TradeConfigServlet tradeConfigServlet;
  @Mock
  private ServletConfig servletConfig;
  private TradeDirectDBUtils dbUtils;
  private HttpServletResponse httpServletResponse;
  private HttpServletRequest httpServletRequest;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit() throws ServletException {
    // All necessary setup is done via annotations
    // Call the method under test
    tradeConfigServlet.init(servletConfig);
    // Verify that init on the superclass (HttpServlet) is called with the correct parameters
    verify(tradeConfigServlet).init(servletConfig);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_jxFT0() {
    TradeConfigServlet servlet = new TradeConfigServlet();
    ServletConfig config = new MockServletConfig();
    try {
      servlet.init(config);
    } catch (ServletException e) {
      fail("ServletException should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithUpdateConfigAction_hGou1() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("action")).thenReturn("updateConfig");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithResetTradeAction_hWbs2() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("action")).thenReturn("resetTrade");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithException_LKbf8() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("action")).thenThrow(new RuntimeException("Test Exception"));
    TradeConfigServlet servlet = new TradeConfigServlet();
    try {
      servlet.service(req, resp);
      fail("Exception should have been thrown");
    } catch (RuntimeException e) {
      assertEquals("Test Exception", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testServiceWithInvalidAction_GBdO9() throws Exception {
    HttpServletRequest req = Mockito.mock(HttpServletRequest.class);
    HttpServletResponse resp = Mockito.mock(HttpServletResponse.class);
    Mockito.when(req.getParameter("action")).thenReturn("invalidAction");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.service(req, resp);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoResetTrade_SuccessfulReset_Sjwy0() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    String results = "";
    TradeConfigServlet servlet = new TradeConfigServlet();
    RunStatsDataBean expectedRunStatsData = new RunStatsDataBean(); // Assuming default constructor sets up initial state
    TradeConfig expectedTradeConfig = new TradeConfig(); // Assuming default constructor sets up initial state
    servlet.doResetTrade(req, resp, results);
    verify(req).setAttribute("runStatsData", expectedRunStatsData);
    verify(req).setAttribute("tradeConfig", expectedTradeConfig);
    verify(req).setAttribute("status", "Trade Reset completed successfully");
    verify(req).getRequestDispatcher("/path/to/statsPage").include(req, resp); // Assuming TradeConfig.getPage returns "/path/to/statsPage"
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_OrderProcessingMode_Valid() throws Exception {
    tradeConfigServlet = new TradeConfigServlet();
    // Setup
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("1");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn(null);
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn(null);
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn(null);
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn(null);
    when(httpServletRequest.getParameter("primIterations")).thenReturn(null);
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn(null);
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn(null);
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn(null);
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn(null);
    // Execute
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify
    verify(httpServletRequest).getParameter("OrderProcessingMode");
    int expectedMode = 1;
    assertEquals(expectedMode, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_OrderProcessingMode_Invalid() throws Exception {
    tradeConfigServlet = new TradeConfigServlet();
    // Setup
    when(httpServletRequest.getParameter("OrderProcessingMode")).thenReturn("invalid");
    when(httpServletRequest.getParameter("WebInterface")).thenReturn(null);
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn(null);
    when(httpServletRequest.getParameter("MaxQuotes")).thenReturn(null);
    when(httpServletRequest.getParameter("marketSummaryInterval")).thenReturn(null);
    when(httpServletRequest.getParameter("primIterations")).thenReturn(null);
    when(httpServletRequest.getParameter("EnablePublishQuotePriceChange")).thenReturn(null);
    when(httpServletRequest.getParameter("ListQuotePriceChangeFrequency")).thenReturn(null);
    when(httpServletRequest.getParameter("EnableLongRun")).thenReturn(null);
    when(httpServletRequest.getParameter("DisplayOrderAlerts")).thenReturn(null);
    int initialMode = TradeConfig.getOrderProcessingMode();
    // Execute
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify
    verify(httpServletRequest).getParameter("OrderProcessingMode");
    assertEquals(initialMode, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_WebInterface_Valid() throws Exception {
    tradeConfigServlet = new TradeConfigServlet();
    // Setup
    when(httpServletRequest.getParameter("WebInterface")).thenReturn("2");
    // Execute
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify
    verify(httpServletRequest).getParameter("WebInterface");
    int expectedInterface = 2;
    assertEquals(expectedInterface, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdate_MaxUsers_Valid() throws Exception {
    tradeConfigServlet = new TradeConfigServlet();
    // Setup
    when(httpServletRequest.getParameter("MaxUsers")).thenReturn("100");
    // Execute
    tradeConfigServlet.doConfigUpdate(httpServletRequest, httpServletResponse);
    // Verify
    verify(httpServletRequest).getParameter("MaxUsers");
    int expectedMaxUsers = 100;
    assertEquals(expectedMaxUsers, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidOrderProcessingMode_SwnG0() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("1");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(1, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidOrderProcessingMode_pBUH1() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullOrderProcessingMode_LNGI2() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("OrderProcessingMode")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotNull(TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidWebInterface_Brsp3() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("2");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(2, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidWebInterface_xenc4() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullWebInterface_qTeY5() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("WebInterface")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotNull(TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidMaxUsers_iqGY6() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("100");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(100, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidMaxUsers_HGmD7() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullMaxUsers_TTNw8() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxUsers")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotNull(TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidMaxQuotes_Nrhu9() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn("200");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(200, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidMaxQuotes_VzBI10() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullMaxQuotes_WBuv11() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("MaxQuotes")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotNull(TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidMarketSummaryInterval_wugJ12() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn("30");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(30, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidMarketSummaryInterval_jBvV13() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullMarketSummaryInterval_lkPb14() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("marketSummaryInterval")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotNull(TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithValidPrimIterations_pPvS15() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("primIterations")).thenReturn("1000");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertEquals(1000, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithInvalidPrimIterations_FoGl16() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("primIterations")).thenReturn("invalid");
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotEquals("invalid", TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoConfigUpdateWithNullPrimIterations_EmPZ17() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    when(req.getParameter("primIterations")).thenReturn(null);
    TradeConfigServlet servlet = new TradeConfigServlet();
    servlet.doConfigUpdate(req, resp);
    assertNotNull(TradeConfig.getPrimIterations());
  }
}