/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.cdi;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.spi.Bean;
import javax.enterprise.inject.spi.BeanManager;
import javax.enterprise.inject.spi.CDI;
import javax.naming.InitialContext;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingCDIBean_Test_Failing {
  PingCDIBean pingCdiBean;
  InitialContext initialContext;
  BeanManager beanManager;
  private static int getBeanManagerHitCountJNDI = 0;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanManagerViaCDICurrentWithNoBeans_SoTB1() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    BeanManager beanManager = mock(BeanManager.class);
    Set<Bean<?>> beanSet = Collections.emptySet();
    when(beanManager.getBeans(Object.class)).thenReturn(beanSet);
    InitialContext initialContext = mock(InitialContext.class);
    when(initialContext.lookup("java:comp/BeanManager")).thenReturn(beanManager);
    System.setProperty("java.naming.factory.initial", "com.sun.enterprise.naming.SerialInitContextFactory");
    System.setProperty("java.naming.factory.url.pkgs", "com.sun.enterprise.naming");
    System.setProperty("java.naming.factory.state", "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");
    int result = pingCDIBean.getBeanMangerViaJNDI();
    assertEquals(0, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanManagerViaJNDI_WithNonEmptyBeans() throws Exception {
    initialContext = mock(InitialContext.class);
    beanManager = mock(BeanManager.class);
    pingCdiBean = new PingCDIBean();
    when(new InitialContext().lookup("java:comp/BeanManager")).thenReturn(beanManager);
    Set<Bean<?>> beans = new HashSet<>();
    beans.add(mock(Bean.class));
    when(beanManager.getBeans(Object.class)).thenReturn(beans);
    int result = pingCdiBean.getBeanMangerViaJNDI();
    assertEquals(1, result, "The hit count should be incremented to 1");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanManagerViaJNDI_WithEmptyBeans() throws Exception {
    initialContext = mock(InitialContext.class);
    beanManager = mock(BeanManager.class);
    pingCdiBean = new PingCDIBean();
    when(new InitialContext().lookup("java:comp/BeanManager")).thenReturn(beanManager);
    Set<Bean<?>> beans = Collections.emptySet();
    when(beanManager.getBeans(Object.class)).thenReturn(beans);
    int result = pingCdiBean.getBeanMangerViaJNDI();
    assertEquals(0, result, "The hit count should remain 0");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanManagerViaCDICurrentWithBeansPresent_MPnp0() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    CDI<Object> cdi = mock(CDI.class);
    BeanManager beanManager = mock(BeanManager.class);
    Set<Bean<?>> beanSet = new HashSet<>();
    beanSet.add(mock(Bean.class));
    when(cdi.getBeanManager()).thenReturn(beanManager);
    when(beanManager.getBeans(Object.class)).thenReturn(beanSet);
    when(CDI.current()).thenReturn(cdi);
    int result = pingCDIBean.getBeanMangerViaCDICurrent();
    assertEquals(1, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanManagerViaCDICurrentWithNoBeans_SoTB1_fid1() throws Exception {
    PingCDIBean pingCDIBean = new PingCDIBean();
    CDI<Object> cdi = mock(CDI.class);
    BeanManager beanManager = mock(BeanManager.class);
    Set<Bean<?>> beanSet = Collections.emptySet();
    when(cdi.getBeanManager()).thenReturn(beanManager);
    when(beanManager.getBeans(Object.class)).thenReturn(beanSet);
    when(CDI.current()).thenReturn(cdi);
    int result = pingCDIBean.getBeanMangerViaCDICurrent();
    assertEquals(0, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanManagerViaJNDIWithNonEmptyBeans_UqMV0_Pbrp0() throws Exception {
    InitialContext mockedContext = mock(InitialContext.class);
    BeanManager mockedBeanManager = mock(BeanManager.class);
    Set<Bean<?>> mockedBeans = new HashSet<>();
    mockedBeans.add(mock(Bean.class));
    when(mockedContext.lookup("java:comp/BeanManager")).thenReturn(mockedBeanManager);
    when(mockedBeanManager.getBeans(Object.class)).thenReturn(mockedBeans);
    System.setProperty("java.naming.factory.initial", "org.mockito.jndi.MockitoInitialContextFactory");
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.getBeanMangerViaJNDI();
    assertEquals(1, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBeanManagerViaJNDIWithEmptyBeans_uFWe1_EEZl0() throws Exception {
    InitialContext mockedContext = mock(InitialContext.class);
    BeanManager mockedBeanManager = mock(BeanManager.class);
    Set<Bean<?>> mockedBeans = Collections.emptySet();
    when(mockedContext.lookup("java:comp/BeanManager")).thenReturn(mockedBeanManager);
    when(mockedBeanManager.getBeans(Object.class)).thenReturn(mockedBeans);
    System.setProperty("java.naming.factory.initial", "org.mockito.jndi.MockitoInitialContextFactory");
    PingCDIBean pingCDIBean = new PingCDIBean();
    int result = pingCDIBean.getBeanMangerViaJNDI();
    assertEquals(0, result);
  }
}