/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.ejb3;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.ejb.EJBException;
import javax.persistence.EntityManager;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeSLSBBean_Test_Failing {
  @Mock
  private EntityManager entityManager;
  @InjectMocks
  private TradeSLSBBean tradeslsbbean;
  private AccountDataBean account;
  private QuoteDataBean quote;
  private HoldingDataBean holding;
  @Mock
  private AccountProfileDataBean profile;
  @Mock
  private OrderDataBean order;
  @InjectMocks
  private TradeSLSBBean tradeSLSBBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithZeroVolume_OYwh1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("GOOGL", "Google LLC", 0, new BigDecimal("2800"), new BigDecimal("2780"), new BigDecimal("2775"), new BigDecimal("2820"), 10.0);
    BigDecimal oldPrice = new BigDecimal("2780");
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 0;
    try {
      tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
      fail("Expected an EJBException to be thrown");
    } catch (EJBException e) {
      assertEquals("Cannot invoke \"javax.jms.TopicConnectionFactory.createContext()\" because \"this.topicConnectionFactory\" is null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_1() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean();
    holding = new HoldingDataBean();
    // Set necessary stub values
    when(quote.getPrice()).thenReturn(new BigDecimal("100.00"));
    // Setup
    String orderType = "buy";
    double quantity = 50.0;
    // Expected OrderDataBean
    OrderDataBean expectedOrder = new OrderDataBean();
    expectedOrder.setOrderType(orderType);
    expectedOrder.setOrderStatus("open");
    expectedOrder.setOpenDate(new Timestamp(System.currentTimeMillis()));
    expectedOrder.setQuantity(quantity);
    expectedOrder.setPrice(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    expectedOrder.setOrderFee(TradeConfig.getOrderFee(orderType));
    expectedOrder.setAccount(account);
    expectedOrder.setQuote(quote);
    expectedOrder.setHolding(holding);
    // Action
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    // Verify
    verify(entityManager).persist(any(OrderDataBean.class));
    // Assertions
    assertNotNull(resultOrder);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_2() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean();
    holding = new HoldingDataBean();
    // Set necessary stub values
    when(quote.getPrice()).thenReturn(new BigDecimal("100.00"));
    // Setup
    String orderType = "buy";
    double quantity = 50.0;
    // Expected OrderDataBean
    OrderDataBean expectedOrder = new OrderDataBean();
    expectedOrder.setOrderType(orderType);
    expectedOrder.setOrderStatus("open");
    expectedOrder.setOpenDate(new Timestamp(System.currentTimeMillis()));
    expectedOrder.setQuantity(quantity);
    expectedOrder.setPrice(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    expectedOrder.setOrderFee(TradeConfig.getOrderFee(orderType));
    expectedOrder.setAccount(account);
    expectedOrder.setQuote(quote);
    expectedOrder.setHolding(holding);
    // Action
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    // Verify
    verify(entityManager).persist(any(OrderDataBean.class));
    // Assertions
    assertEquals(orderType, resultOrder.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_3() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean();
    holding = new HoldingDataBean();
    // Set necessary stub values
    when(quote.getPrice()).thenReturn(new BigDecimal("100.00"));
    // Setup
    String orderType = "buy";
    double quantity = 50.0;
    // Expected OrderDataBean
    OrderDataBean expectedOrder = new OrderDataBean();
    expectedOrder.setOrderType(orderType);
    expectedOrder.setOrderStatus("open");
    expectedOrder.setOpenDate(new Timestamp(System.currentTimeMillis()));
    expectedOrder.setQuantity(quantity);
    expectedOrder.setPrice(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    expectedOrder.setOrderFee(TradeConfig.getOrderFee(orderType));
    expectedOrder.setAccount(account);
    expectedOrder.setQuote(quote);
    expectedOrder.setHolding(holding);
    // Action
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    // Verify
    verify(entityManager).persist(any(OrderDataBean.class));
    // Assertions
    assertEquals("open", resultOrder.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_4() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean();
    holding = new HoldingDataBean();
    // Set necessary stub values
    when(quote.getPrice()).thenReturn(new BigDecimal("100.00"));
    // Setup
    String orderType = "buy";
    double quantity = 50.0;
    // Expected OrderDataBean
    OrderDataBean expectedOrder = new OrderDataBean();
    expectedOrder.setOrderType(orderType);
    expectedOrder.setOrderStatus("open");
    expectedOrder.setOpenDate(new Timestamp(System.currentTimeMillis()));
    expectedOrder.setQuantity(quantity);
    expectedOrder.setPrice(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    expectedOrder.setOrderFee(TradeConfig.getOrderFee(orderType));
    expectedOrder.setAccount(account);
    expectedOrder.setQuote(quote);
    expectedOrder.setHolding(holding);
    // Action
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    // Verify
    verify(entityManager).persist(any(OrderDataBean.class));
    // Assertions
    assertNotNull(resultOrder.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_5() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean();
    holding = new HoldingDataBean();
    // Set necessary stub values
    when(quote.getPrice()).thenReturn(new BigDecimal("100.00"));
    // Setup
    String orderType = "buy";
    double quantity = 50.0;
    // Expected OrderDataBean
    OrderDataBean expectedOrder = new OrderDataBean();
    expectedOrder.setOrderType(orderType);
    expectedOrder.setOrderStatus("open");
    expectedOrder.setOpenDate(new Timestamp(System.currentTimeMillis()));
    expectedOrder.setQuantity(quantity);
    expectedOrder.setPrice(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    expectedOrder.setOrderFee(TradeConfig.getOrderFee(orderType));
    expectedOrder.setAccount(account);
    expectedOrder.setQuote(quote);
    expectedOrder.setHolding(holding);
    // Action
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    // Verify
    verify(entityManager).persist(any(OrderDataBean.class));
    // Assertions
    assertEquals(quantity, resultOrder.getQuantity());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_6() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean();
    holding = new HoldingDataBean();
    // Set necessary stub values
    when(quote.getPrice()).thenReturn(new BigDecimal("100.00"));
    // Setup
    String orderType = "buy";
    double quantity = 50.0;
    // Expected OrderDataBean
    OrderDataBean expectedOrder = new OrderDataBean();
    expectedOrder.setOrderType(orderType);
    expectedOrder.setOrderStatus("open");
    expectedOrder.setOpenDate(new Timestamp(System.currentTimeMillis()));
    expectedOrder.setQuantity(quantity);
    expectedOrder.setPrice(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    expectedOrder.setOrderFee(TradeConfig.getOrderFee(orderType));
    expectedOrder.setAccount(account);
    expectedOrder.setQuote(quote);
    expectedOrder.setHolding(holding);
    // Action
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    // Verify
    verify(entityManager).persist(any(OrderDataBean.class));
    // Assertions
    assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), resultOrder.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_7() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean();
    holding = new HoldingDataBean();
    // Set necessary stub values
    when(quote.getPrice()).thenReturn(new BigDecimal("100.00"));
    // Setup
    String orderType = "buy";
    double quantity = 50.0;
    // Expected OrderDataBean
    OrderDataBean expectedOrder = new OrderDataBean();
    expectedOrder.setOrderType(orderType);
    expectedOrder.setOrderStatus("open");
    expectedOrder.setOpenDate(new Timestamp(System.currentTimeMillis()));
    expectedOrder.setQuantity(quantity);
    expectedOrder.setPrice(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    expectedOrder.setOrderFee(TradeConfig.getOrderFee(orderType));
    expectedOrder.setAccount(account);
    expectedOrder.setQuote(quote);
    expectedOrder.setHolding(holding);
    // Action
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    // Verify
    verify(entityManager).persist(any(OrderDataBean.class));
    // Assertions
    assertEquals(TradeConfig.getOrderFee(orderType), resultOrder.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_8() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean();
    holding = new HoldingDataBean();
    // Set necessary stub values
    when(quote.getPrice()).thenReturn(new BigDecimal("100.00"));
    // Setup
    String orderType = "buy";
    double quantity = 50.0;
    // Expected OrderDataBean
    OrderDataBean expectedOrder = new OrderDataBean();
    expectedOrder.setOrderType(orderType);
    expectedOrder.setOrderStatus("open");
    expectedOrder.setOpenDate(new Timestamp(System.currentTimeMillis()));
    expectedOrder.setQuantity(quantity);
    expectedOrder.setPrice(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    expectedOrder.setOrderFee(TradeConfig.getOrderFee(orderType));
    expectedOrder.setAccount(account);
    expectedOrder.setQuote(quote);
    expectedOrder.setHolding(holding);
    // Action
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    // Verify
    verify(entityManager).persist(any(OrderDataBean.class));
    // Assertions
    assertEquals(account, resultOrder.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_9() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean();
    holding = new HoldingDataBean();
    // Set necessary stub values
    when(quote.getPrice()).thenReturn(new BigDecimal("100.00"));
    // Setup
    String orderType = "buy";
    double quantity = 50.0;
    // Expected OrderDataBean
    OrderDataBean expectedOrder = new OrderDataBean();
    expectedOrder.setOrderType(orderType);
    expectedOrder.setOrderStatus("open");
    expectedOrder.setOpenDate(new Timestamp(System.currentTimeMillis()));
    expectedOrder.setQuantity(quantity);
    expectedOrder.setPrice(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    expectedOrder.setOrderFee(TradeConfig.getOrderFee(orderType));
    expectedOrder.setAccount(account);
    expectedOrder.setQuote(quote);
    expectedOrder.setHolding(holding);
    // Action
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    // Verify
    verify(entityManager).persist(any(OrderDataBean.class));
    // Assertions
    assertEquals(quote, resultOrder.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_10() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean();
    holding = new HoldingDataBean();
    // Set necessary stub values
    when(quote.getPrice()).thenReturn(new BigDecimal("100.00"));
    // Setup
    String orderType = "buy";
    double quantity = 50.0;
    // Expected OrderDataBean
    OrderDataBean expectedOrder = new OrderDataBean();
    expectedOrder.setOrderType(orderType);
    expectedOrder.setOrderStatus("open");
    expectedOrder.setOpenDate(new Timestamp(System.currentTimeMillis()));
    expectedOrder.setQuantity(quantity);
    expectedOrder.setPrice(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    expectedOrder.setOrderFee(TradeConfig.getOrderFee(orderType));
    expectedOrder.setAccount(account);
    expectedOrder.setQuote(quote);
    expectedOrder.setHolding(holding);
    // Action
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    // Verify
    verify(entityManager).persist(any(OrderDataBean.class));
    // Assertions
    assertEquals(holding, resultOrder.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0_3() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    quote.setPrice(new BigDecimal("100.00")); // Set a default price to avoid NullPointerException
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(expectedOrderFee, resultOrder.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0_8() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    quote.setPrice(new BigDecimal("100.00")); // Setting a default price to avoid NullPointerException
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedPrice = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quote.getPrice(), resultOrder.getQuote().getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterExistingUser_aIGC1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "existingUser";
    String password = "password123";
    String fullname = "Jane Doe";
    String address = "456 Elm St";
    String email = "janedoe@example.com";
    String creditcard = "6543210987654321";
    BigDecimal openBalance = new BigDecimal("2000.00");
    AccountProfileDataBean existingProfile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    entityManager.persist(existingProfile);
    entityManager.flush();
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_BuyOrder_uRwp2_1() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("buy");
    order.setAccount(account);
    order.setQuote(quote);
    order.setPrice(new BigDecimal("100.00"));
    order.setQuantity(10.0);
    OrderDataBean completedOrder = tradeBean.completeOrder(order.getOrderID(), true);
    assertNotNull(completedOrder.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_BuyOrder_uRwp2_2() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("buy");
    order.setAccount(account);
    order.setQuote(quote);
    order.setPrice(new BigDecimal("100.00"));
    order.setQuantity(10.0);
    OrderDataBean completedOrder = tradeBean.completeOrder(order.getOrderID(), true);
    assertEquals("closed", completedOrder.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_BuyOrder_uRwp2_3() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("buy");
    order.setAccount(account);
    order.setQuote(quote);
    order.setPrice(new BigDecimal("100.00"));
    order.setQuantity(10.0);
    OrderDataBean completedOrder = tradeBean.completeOrder(order.getOrderID(), true);
    assertNotNull(completedOrder.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStockRecovery_lRpw1_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("XYZ", TradeConfig.PENNY_STOCK_PRICE, 1000.0);
    assertEquals(TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER, quote.getPrice().divide(TradeConfig.PENNY_STOCK_PRICE));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NoUpdateDueToConfig_wMRE3_2() {
    TradeConfig.setUpdateQuotePrices(false);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", new BigDecimal("1.10"), 300.0);
    assertNull(BigDecimal.ZERO);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithValidData_AhXI0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("AAPL", "Apple Inc.", 10000, new BigDecimal("150"), new BigDecimal("145"), new BigDecimal("140"), new BigDecimal("155"), 5.0);
    BigDecimal oldPrice = new BigDecimal("145");
    BigDecimal changeFactor = new BigDecimal("1.1");
    double sharesTraded = 5000;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithZeroVolume_OYwh1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("GOOGL", "Google LLC", 0, new BigDecimal("2800"), new BigDecimal("2780"), new BigDecimal("2775"), new BigDecimal("2820"), 10.0);
    BigDecimal oldPrice = new BigDecimal("2780");
    BigDecimal changeFactor = new BigDecimal("1.05");
    double sharesTraded = 0;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPublishQuotePriceChangeWithNegativeChangeFactor_Cigb2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean quote = new QuoteDataBean("MSFT", "Microsoft Corp.", 20000, new BigDecimal("300"), new BigDecimal("295"), new BigDecimal("290"), new BigDecimal("305"), -5.0);
    BigDecimal oldPrice = new BigDecimal("295");
    BigDecimal changeFactor = new BigDecimal("-0.1");
    double sharesTraded = 10000;
    tradeSLSBBean.publishQuotePriceChange(quote, oldPrice, changeFactor, sharesTraded);
    assertTrue(true);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedPrice = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(resultOrder);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0_2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedPrice = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(expectedPrice, resultOrder.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0_3_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedPrice = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(expectedOrderFee, resultOrder.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0_4() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedPrice = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(orderType, resultOrder.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0_5() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedPrice = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals("open", resultOrder.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0_6() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedPrice = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quantity, resultOrder.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0_7() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedPrice = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(account, resultOrder.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0_8_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedPrice = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(quote, resultOrder.getQuote());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0_9() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedPrice = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertEquals(holding, resultOrder.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_rhEl0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    MarketSummaryDataBean expected = MarketSummaryDataBean.getRandomInstance();
    MarketSummaryDataBean actual = tradeSLSBBean.getMarketSummary();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_nmWn0_1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_nmWn0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_YYuP0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "newUser";
    String password = "password123";
    String fullname = "John Doe";
    String address = "123 Main St";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_YYuP0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "newUser";
    String password = "password123";
    String fullname = "John Doe";
    String address = "123 Main St";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, result.getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterExistingUser_aIGC1_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "existingUser";
    String password = "password123";
    String fullname = "Jane Doe";
    String address = "456 Elm St";
    String email = "janedoe@example.com";
    String creditcard = "6543210987654321";
    BigDecimal openBalance = new BigDecimal("2000.00");
    AccountProfileDataBean existingProfile = new AccountProfileDataBean(userID, password, fullname, address, email, creditcard);
    entityManager.persist(existingProfile);
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_dDYk0_1_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_dDYk0_2_fid1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_NullOrder_bUSJ0_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    try {
      tradeBean.completeOrder(null, true);
      fail("Should have thrown an exception for null orderID");
    } catch (Exception e) {
      assertTrue(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_OrderAlreadyCompleted_SnuY1_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderStatus("closed");
    try {
      tradeBean.completeOrder(order.getOrderID(), true);
      fail("Should have thrown an exception for already completed order");
    } catch (Exception e) {
      assertTrue(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_SellOrder_NoHolding_dQyx4_fid1() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("sell");
    order.setAccount(account);
    order.setQuote(quote);
    order.setPrice(new BigDecimal("150.00"));
    order.setQuantity(10.0);
    order.setHolding(null);
    try {
      tradeBean.completeOrder(order.getOrderID(), true);
      fail("Should have thrown an exception for selling order without holding");
    } catch (Exception e) {
      assertTrue(e instanceof EJBException);
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NormalConditions_XsXc0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", new BigDecimal("1.05"), 500.0);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NormalConditions_XsXc0_2_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", new BigDecimal("1.05"), 500.0);
    assertTrue(quote.getPrice().compareTo(new BigDecimal("0")) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NormalConditions_XsXc0_3_fid1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", new BigDecimal("1.05"), 500.0);
    assertTrue(quote.getVolume() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MaximumStockSplit_XgUx2_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("BIG", TradeConfig.MAXIMUM_STOCK_PRICE.add(new BigDecimal("1")), 2000.0);
    assertNotNull(quote);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MaximumStockSplit_XgUx2_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("BIG", TradeConfig.MAXIMUM_STOCK_PRICE.add(new BigDecimal("1")), 2000.0);
    assertEquals(TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER, quote.getPrice().divide(TradeConfig.MAXIMUM_STOCK_PRICE.add(new BigDecimal("1"))));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NoUpdateDueToConfig_wMRE3_2_fid1() {
    TradeConfig.setUpdateQuotePrices(false);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", new BigDecimal("1.10"), 300.0);
    assertEquals(BigDecimal.ZERO, quote.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OxSH0_1() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = tradeSLSB.getQuote(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OxSH0_2() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = tradeSLSB.getQuote(symbol);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_oXYY0_1() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSB.createQuote(symbol, companyName, price);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_oXYY0_2() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSB.createQuote(symbol, companyName, price);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_oXYY0_3() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSB.createQuote(symbol, companyName, price);
    assertEquals(companyName, result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_oXYY0_4() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSB.createQuote(symbol, companyName, price);
    assertEquals(price, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kFJX0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newpass123", "John Smith", "456 Oak St", "johnsmith@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeBean.updateAccountProfile(updatedProfile);
    assertEquals("456 Oak St", resultProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kFJX0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newpass123", "John Smith", "456 Oak St", "johnsmith@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeBean.updateAccountProfile(updatedProfile);
    assertEquals("newpass123", resultProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kFJX0_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newpass123", "John Smith", "456 Oak St", "johnsmith@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeBean.updateAccountProfile(updatedProfile);
    assertEquals("John Smith", resultProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kFJX0_4() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newpass123", "John Smith", "456 Oak St", "johnsmith@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeBean.updateAccountProfile(updatedProfile);
    assertEquals("6543-2109-8765-4321", resultProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kFJX0_5() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newpass123", "John Smith", "456 Oak St", "johnsmith@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeBean.updateAccountProfile(updatedProfile);
    assertEquals("johnsmith@example.com", resultProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithValidData_OXLo0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 123;
    boolean twoPhase = true;
    try {
      tradeSLSBBean.queueOrder(orderID, twoPhase);
      System.out.println("Order queued successfully with orderID: " + orderID + " and twoPhase: " + twoPhase);
    } catch (Exception e) {
      fail("Exception should not be thrown");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithNullOrderID_lXiu1() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = null;
    boolean twoPhase = false;
    try {
      tradeSLSBBean.queueOrder(orderID, twoPhase);
      fail("Exception should be thrown for null orderID");
    } catch (EJBException e) {
      assertEquals("orderID is null", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testQueueOrderWithExceptionHandling_YIhR2() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 456;
    boolean twoPhase = true;
    try {
      tradeSLSBBean.queueOrder(orderID, twoPhase);
      System.out.println("Order queued successfully with orderID: " + orderID + " and twoPhase: " + twoPhase);
    } catch (EJBException e) {
      fail("EJBException should not be thrown under normal conditions");
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileDataWithValidUserID_AWvb0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    AccountProfileDataBean expected = AccountProfileDataBean.getRandomInstance();
    AccountProfileDataBean actual = tradeSLSBBean.getAccountProfileData(userID);
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_1() throws Exception {
    tradeslsbbean = new TradeSLSBBean();
    // Setup
    String userID = "user123";
    String symbol = "XYZ";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quote);
    when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
    when(account.getBalance()).thenReturn(new BigDecimal("2000.00"));
    when(order.getOrderFee()).thenReturn(new BigDecimal("15.00"));
    when(order.getOrderID()).thenReturn(1);
    // Execute
    OrderDataBean result = tradeslsbbean.buy(userID, symbol, quantity, orderProcessingMode);
    // Verify
    verify(entityManager).find(AccountProfileDataBean.class, userID);
    verify(entityManager).find(QuoteDataBean.class, symbol);
    verify(account).setBalance(any(BigDecimal.class));
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy_2() throws Exception {
    tradeslsbbean = new TradeSLSBBean();
    // Setup
    String userID = "user123";
    String symbol = "XYZ";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quote);
    when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
    when(account.getBalance()).thenReturn(new BigDecimal("2000.00"));
    when(order.getOrderFee()).thenReturn(new BigDecimal("15.00"));
    when(order.getOrderID()).thenReturn(1);
    // Execute
    OrderDataBean result = tradeslsbbean.buy(userID, symbol, quantity, orderProcessingMode);
    // Verify
    verify(entityManager).find(AccountProfileDataBean.class, userID);
    verify(entityManager).find(QuoteDataBean.class, symbol);
    verify(account).setBalance(any(BigDecimal.class));
    assertEquals(order, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_xDmA0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user1";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_xDmA0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user1";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals("buy", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_xDmA0_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user1";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(new BigDecimal(quantity).multiply(result.getQuote().getPrice()).add(result.getOrderFee()), result.getAccount().getBalance().negate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_uNIH1_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_uNIH1_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals("buy", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_uNIH1_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertTrue(result.getOrderID() != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynch2PhaseMode_GheQ2_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    String symbol = "MSFT";
    double quantity = 150.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynch2PhaseMode_GheQ2_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    String symbol = "MSFT";
    double quantity = 150.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals("buy", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynch2PhaseMode_GheQ2_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    String symbol = "MSFT";
    double quantity = 150.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertTrue(result.getOrderID() != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell() throws Exception {
    tradeSLSBBean = new TradeSLSBBean();
    // Arrange
    String userID = "user1";
    Integer holdingID = 1;
    int orderProcessingMode = TradeConfig.SYNCH;
    AccountProfileDataBean profile = mock(AccountProfileDataBean.class);
    AccountDataBean account = mock(AccountDataBean.class);
    HoldingDataBean holding = mock(HoldingDataBean.class);
    QuoteDataBean quote = mock(QuoteDataBean.class);
    OrderDataBean order = mock(OrderDataBean.class);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(HoldingDataBean.class, holdingID)).thenReturn(holding);
    when(holding.getQuote()).thenReturn(quote);
    when(holding.getQuantity()).thenReturn(100.0);
    when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
    when(order.getOrderFee()).thenReturn(new BigDecimal("5.00"));
    when(order.getOrderID()).thenReturn(100);
    when(account.getBalance()).thenReturn(new BigDecimal("1000.00"));
    // Act
    OrderDataBean result = tradeSLSBBean.sell(userID, holdingID, orderProcessingMode);
    // Assert
    assertNotNull(result);
    verify(entityManager, times(1)).find(AccountProfileDataBean.class, userID);
    verify(entityManager, times(1)).find(HoldingDataBean.class, holdingID);
    verify(account).setBalance(any(BigDecimal.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithNullHolding_veRS0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user1";
    Integer holdingID = 123; // Assuming this holding does not exist
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("cancelled", result.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynch_KVHQ1_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    Integer holdingID = 456; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynch_KVHQ1_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    Integer holdingID = 456; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sell", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynch_KVHQ1_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    Integer holdingID = 456; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch_Jiil2_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    Integer holdingID = 789; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch_Jiil2_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    Integer holdingID = 789; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sell", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch_Jiil2_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    Integer holdingID = 789; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchTwoPhase_Unbo3_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user4";
    Integer holdingID = 101; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchTwoPhase_Unbo3_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user4";
    Integer holdingID = 101; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("sell", result.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchTwoPhase_Unbo3_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user4";
    Integer holdingID = 101; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithValidID_LnKh0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Integer validHoldingID = 1; // Assuming 1 is a valid ID for testing
    HoldingDataBean expectedHolding = HoldingDataBean.getRandomInstance();
    EntityManager entityManager = mock(EntityManager.class);
    when(entityManager.find(HoldingDataBean.class, validHoldingID)).thenReturn(expectedHolding);
    HoldingDataBean result = tradeBean.getHolding(validHoldingID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithValidID_LnKh0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Integer validHoldingID = 1; // Assuming 1 is a valid ID for testing
    HoldingDataBean expectedHolding = HoldingDataBean.getRandomInstance();
    EntityManager entityManager = mock(EntityManager.class);
    when(entityManager.find(HoldingDataBean.class, validHoldingID)).thenReturn(expectedHolding);
    HoldingDataBean result = tradeBean.getHolding(validHoldingID);
    assertEquals(expectedHolding, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_ssjt0() throws Exception {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    Future<OrderDataBean> result = tradeSLSBBean.completeOrderAsync(orderID, twoPhase);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithValidUser_MADO0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUser123";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    for (OrderDataBean order : result) {
    }
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithValidUser_MADO0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUser123";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    for (OrderDataBean order : result) {
    }
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithValidUser_MADO0_3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUser123";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    for (OrderDataBean order : result) {
    }
    assertEquals("completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNoClosedOrders_wUza1_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "userWithNoClosedOrders";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNoClosedOrders_wUza1_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "userWithNoClosedOrders";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUser_uudg2_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "nonExistentUser";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUser_uudg2_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "nonExistentUser";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders_yglu3_kgch0() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Collection<OrderDataBean> closedOrders = tradeBean.getClosedOrders("yglu3");
    for (OrderDataBean order : closedOrders) {
      assertEquals("closed", order.getOrderStatus());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithValidUserId_oAnU0_yhqe0_1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUserID";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = new AccountDataBean();
    account.setProfile(profile);
    List<OrderDataBean> expectedOrders = new ArrayList<>();
    expectedOrders.add(new OrderDataBean());
    account.setOrders(expectedOrders);
    EntityManager entityManager = mock(EntityManager.class);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    Collection<OrderDataBean> orders = tradeBean.getClosedOrders(userID);
    assertNotNull(orders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrdersWithValidUserId_oAnU0_yhqe0_2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUserID";
    AccountProfileDataBean profile = new AccountProfileDataBean();
    profile.setUserID(userID);
    AccountDataBean account = new AccountDataBean();
    account.setProfile(profile);
    List<OrderDataBean> expectedOrders = new ArrayList<>();
    expectedOrders.add(new OrderDataBean());
    account.setOrders(expectedOrders);
    EntityManager entityManager = mock(EntityManager.class);
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    Collection<OrderDataBean> orders = tradeBean.getClosedOrders(userID);
    assertEquals(expectedOrders, new ArrayList<>(orders));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithValidSymbol_qOzO0_bcUm0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    QuoteDataBean expectedQuoteData = QuoteDataBean.getRandomInstance();
    String symbol = expectedQuoteData.getSymbol();
    QuoteDataBean resultQuoteData = null;
    try {
      resultQuoteData = tradeSLSBBean.pingTwoPhase(symbol);
    } catch (Exception e) {
      fail("Exception should not have been thrown");
    }
    assertNotNull(resultQuoteData);
    assertEquals(expectedQuoteData.getSymbol(), resultQuoteData.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPingTwoPhaseWithPriceChange_DKGl1_qqqf0() {
    try {
      TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
      QuoteDataBean initialQuoteData = QuoteDataBean.getRandomInstance();
      String symbol = initialQuoteData.getSymbol();
      BigDecimal initialPrice = initialQuoteData.getPrice();
      QuoteDataBean resultQuoteData = null;
      try {
        resultQuoteData = tradeSLSBBean.pingTwoPhase(symbol);
      } catch (Exception e) {
        fail("Exception occurred in pingTwoPhase method: " + e.getMessage());
      }
      assertNotEquals(initialPrice, resultQuoteData.getPrice());
    } catch (Exception e) {
      fail("Exception occurred: " + e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder() throws Exception {
    account = new AccountDataBean();
    quote = new QuoteDataBean();
    holding = new HoldingDataBean();
    // Set necessary stub values
    when(quote.getPrice()).thenReturn(new BigDecimal("100.00"));
    // Setup
    String orderType = "buy";
    double quantity = 50.0;
    // Expected OrderDataBean
    OrderDataBean expectedOrder = new OrderDataBean();
    expectedOrder.setOrderType(orderType);
    expectedOrder.setOrderStatus("open");
    expectedOrder.setOpenDate(new Timestamp(System.currentTimeMillis()));
    expectedOrder.setQuantity(quantity);
    expectedOrder.setPrice(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND));
    expectedOrder.setOrderFee(TradeConfig.getOrderFee(orderType));
    expectedOrder.setAccount(account);
    expectedOrder.setQuote(quote);
    expectedOrder.setHolding(holding);
    // Action
    OrderDataBean resultOrder = tradeslsbbean.createOrder(account, quote, holding, orderType, quantity);
    // Verify
    verify(entityManager).persist(any(OrderDataBean.class));
    // Assertions
    assertNotNull(resultOrder);
    assertEquals(orderType, resultOrder.getOrderType());
    assertEquals("open", resultOrder.getOrderStatus());
    assertNotNull(resultOrder.getOpenDate());
    assertEquals(quantity, resultOrder.getQuantity());
    assertEquals(quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND), resultOrder.getPrice());
    assertEquals(TradeConfig.getOrderFee(orderType), resultOrder.getOrderFee());
    assertEquals(account, resultOrder.getAccount());
    assertEquals(quote, resultOrder.getQuote());
    assertEquals(holding, resultOrder.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_jPdk0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "buy";
    double quantity = 100.0;
    BigDecimal expectedPrice = quote.getPrice().setScale(FinancialUtils.SCALE, FinancialUtils.ROUND);
    BigDecimal expectedOrderFee = TradeConfig.getOrderFee(orderType);
    OrderDataBean resultOrder = tradeSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(resultOrder);
    assertEquals(expectedPrice, resultOrder.getPrice());
    assertEquals(expectedOrderFee, resultOrder.getOrderFee());
    assertEquals(orderType, resultOrder.getOrderType());
    assertEquals("open", resultOrder.getOrderStatus());
    assertEquals(quantity, resultOrder.getQuantity(), 0.0);
    assertEquals(account, resultOrder.getAccount());
    assertEquals(quote, resultOrder.getQuote());
    assertEquals(holding, resultOrder.getHolding());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_nmWn0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    Collection<QuoteDataBean> result = tradeSLSBBean.getAllQuotes();
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegisterNewUser_YYuP0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "newUser";
    String password = "password123";
    String fullname = "John Doe";
    String address = "123 Main St";
    String email = "johndoe@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = tradeBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
    assertEquals(userID, result.getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsWithValidUserId_dDYk0() {
    TradeSLSBBean tradeSLSBBean = new TradeSLSBBean();
    String userID = "validUserID";
    Collection<HoldingDataBean> result = tradeSLSBBean.getHoldings(userID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_BuyOrder_uRwp2() throws Exception {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    OrderDataBean order = new OrderDataBean();
    order.setOrderType("buy");
    order.setAccount(account);
    order.setQuote(quote);
    order.setPrice(new BigDecimal("100.00"));
    order.setQuantity(10.0);
    OrderDataBean completedOrder = tradeBean.completeOrder(order.getOrderID(), true);
    assertNotNull(completedOrder.getHolding());
    assertEquals("closed", completedOrder.getOrderStatus());
    assertNotNull(completedOrder.getCompletionDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NormalConditions_XsXc0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", new BigDecimal("1.05"), 500.0);
    assertNotNull(quote);
    assertTrue(quote.getPrice().compareTo(new BigDecimal("0")) > 0);
    assertTrue(quote.getVolume() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_PennyStockRecovery_lRpw1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("XYZ", TradeConfig.PENNY_STOCK_PRICE, 1000.0);
    assertNotNull(quote);
    assertEquals(TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER, quote.getPrice().divide(TradeConfig.PENNY_STOCK_PRICE));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MaximumStockSplit_XgUx2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("BIG", TradeConfig.MAXIMUM_STOCK_PRICE.add(new BigDecimal("1")), 2000.0);
    assertNotNull(quote);
    assertEquals(TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER, quote.getPrice().divide(TradeConfig.MAXIMUM_STOCK_PRICE.add(new BigDecimal("1"))));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_NoUpdateDueToConfig_wMRE3() {
    TradeConfig.setUpdateQuotePrices(false);
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    QuoteDataBean quote = tradeBean.updateQuotePriceVolume("AAPL", new BigDecimal("1.10"), 300.0);
    assertNotNull(quote);
    assertEquals(BigDecimal.ZERO, quote.getPrice());
    assertEquals(0.0, quote.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_OxSH0() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = tradeSLSB.getQuote(symbol);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_oXYY0() {
    TradeSLSBBean tradeSLSB = new TradeSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = tradeSLSB.createQuote(symbol, companyName, price);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertEquals(companyName, result.getCompanyName());
    assertEquals(price, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_kFJX0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    AccountProfileDataBean originalProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean updatedProfile = new AccountProfileDataBean("user123", "newpass123", "John Smith", "456 Oak St", "johnsmith@example.com", "6543-2109-8765-4321");
    AccountProfileDataBean resultProfile = tradeBean.updateAccountProfile(updatedProfile);
    assertEquals("456 Oak St", resultProfile.getAddress());
    assertEquals("newpass123", resultProfile.getPassword());
    assertEquals("John Smith", resultProfile.getFullName());
    assertEquals("6543-2109-8765-4321", resultProfile.getCreditCard());
    assertEquals("johnsmith@example.com", resultProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuy() throws Exception {
    tradeslsbbean = new TradeSLSBBean();
    // Setup
    String userID = "user123";
    String symbol = "XYZ";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    when(entityManager.find(AccountProfileDataBean.class, userID)).thenReturn(profile);
    when(profile.getAccount()).thenReturn(account);
    when(entityManager.find(QuoteDataBean.class, symbol)).thenReturn(quote);
    when(quote.getPrice()).thenReturn(new BigDecimal("10.00"));
    when(account.getBalance()).thenReturn(new BigDecimal("2000.00"));
    when(order.getOrderFee()).thenReturn(new BigDecimal("15.00"));
    when(order.getOrderID()).thenReturn(1);
    // Execute
    OrderDataBean result = tradeslsbbean.buy(userID, symbol, quantity, orderProcessingMode);
    // Verify
    verify(entityManager).find(AccountProfileDataBean.class, userID);
    verify(entityManager).find(QuoteDataBean.class, symbol);
    verify(account).setBalance(any(BigDecimal.class));
    assertNotNull(result);
    assertEquals(order, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithSynchMode_xDmA0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user1";
    String symbol = "AAPL";
    double quantity = 50.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals("buy", result.getOrderType());
    assertEquals(new BigDecimal(quantity).multiply(result.getQuote().getPrice()).add(result.getOrderFee()), result.getAccount().getBalance().negate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynchMode_uNIH1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    String symbol = "GOOG";
    double quantity = 100.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals("buy", result.getOrderType());
    assertTrue(result.getOrderID() != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyWithAsynch2PhaseMode_GheQ2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    String symbol = "MSFT";
    double quantity = 150.0;
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals("buy", result.getOrderType());
    assertTrue(result.getOrderID() != null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingSynch_KVHQ1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user2";
    Integer holdingID = 456; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("sell", result.getOrderType());
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynch_Jiil2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user3";
    Integer holdingID = 789; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("sell", result.getOrderType());
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithValidHoldingAsynchTwoPhase_Unbo3() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "user4";
    Integer holdingID = 101; // Assuming this holding exists
    int orderProcessingMode = TradeConfig.ASYNCH_2PHASE;
    OrderDataBean result = tradeBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("sell", result.getOrderType());
    assertTrue(result.getQuantity() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingWithValidID_LnKh0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    Integer validHoldingID = 1; // Assuming 1 is a valid ID for testing
    HoldingDataBean expectedHolding = HoldingDataBean.getRandomInstance();
    EntityManager entityManager = mock(EntityManager.class);
    when(entityManager.find(HoldingDataBean.class, validHoldingID)).thenReturn(expectedHolding);
    HoldingDataBean result = tradeBean.getHolding(validHoldingID);
    assertNotNull(result);
    assertEquals(expectedHolding, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithValidUser_MADO0() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "validUser123";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
    assertFalse(result.isEmpty());
    for (OrderDataBean order : result) {
      assertEquals("completed", order.getOrderStatus());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithNoClosedOrders_wUza1() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "userWithNoClosedOrders";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
    assertTrue(result.isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersWithInvalidUser_uudg2() {
    TradeSLSBBean tradeBean = new TradeSLSBBean();
    String userID = "nonExistentUser";
    Collection<OrderDataBean> result = tradeBean.getClosedOrders(userID);
    assertNotNull(result);
    assertTrue(result.isEmpty());
  }
}