/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession3_Test_Passing {
  private static int NUM_OBJECTS = 2;
  @Mock
  private static int hitCount = 0;
  private static String initTime = null;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_DeUi0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingSession3 pingSession3 = new PingSession3();
    pingSession3.doPost(request, response);
    verify(pingSession3).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_sEeq0() {
    PingSession3 session = new PingSession3();
    String result = session.getServletInfo();
    assertEquals("HTTP Session Object: Tests management of a large custom session class", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithValidSessionAndNumObjectsParameter_TPlp0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    PrintWriter writer = new PrintWriter(System.out);
    when(request.getParameter("num_objects")).thenReturn("5");
    when(request.getSession(true)).thenReturn(session);
    when(response.getWriter()).thenReturn(writer);
    PingSession3 servlet = new PingSession3();
    servlet.doGet(request, response);
    verify(session).invalidate();
    assertTrue(System.out.toString().contains("Session object size set to 5K bytes"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithInvalidNumObjectsParameter_qwaq1() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    PrintWriter writer = new PrintWriter(System.out);
    when(request.getParameter("num_objects")).thenReturn("invalid");
    when(request.getSession(true)).thenReturn(session);
    when(response.getWriter()).thenReturn(writer);
    PingSession3 servlet = new PingSession3();
    servlet.doGet(request, response);
    assertTrue(System.out.toString().contains("input should be an integer"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetWithNullNumObjectsParameter_aDGa2() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    PrintWriter writer = new PrintWriter(System.out);
    when(request.getParameter("num_objects")).thenReturn(null);
    when(request.getSession(true)).thenReturn(session);
    when(response.getWriter()).thenReturn(writer);
    when(session.getAttribute("sessiontest.sessionData")).thenReturn(null);
    PingSession3 servlet = new PingSession3();
    servlet.doGet(request, response);
    verify(session).setAttribute(eq("sessiontest.sessionData"), any());
    assertTrue(System.out.toString().contains("Session object updated"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetSessionCreationException_IMQY3() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PrintWriter writer = new PrintWriter(System.out);
    when(request.getSession(true)).thenThrow(new RuntimeException("Session creation failed"));
    when(response.getWriter()).thenReturn(writer);
    PingSession3 servlet = new PingSession3();
    servlet.doGet(request, response);
    assertTrue(System.out.toString().contains("error getting session"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetIOExceptionOnGetWriter_Dhbm4() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    when(response.getWriter()).thenThrow(new IOException("Failed to get writer"));
    PingSession3 servlet = new PingSession3();
    try {
      servlet.doGet(request, response);
    } catch (IOException e) {
      assertEquals("Failed to get writer", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGetHandlesGeneralException_KFkG5() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PrintWriter writer = new PrintWriter(System.out);
    when(request.getSession(true)).thenThrow(new RuntimeException("General error"));
    when(response.getWriter()).thenReturn(writer);
    PingSession3 servlet = new PingSession3();
    servlet.doGet(request, response);
    assertTrue(System.out.toString().contains("PingSession3.doGet(...): error."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_FQgA0() throws Exception {
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpSession httpSession = mock(HttpSession.class);
    PrintWriter printWriter = mock(PrintWriter.class);
    PingSession3 pingSession3 = new PingSession3();
    when(httpServletResponse.getWriter()).thenReturn(printWriter);
    when(httpServletRequest.getSession(true)).thenReturn(httpSession);
    pingSession3.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse, times(1)).getWriter();
  }
}