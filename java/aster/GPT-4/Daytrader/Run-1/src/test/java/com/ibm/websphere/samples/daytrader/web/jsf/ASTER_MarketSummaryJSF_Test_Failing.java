/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryJSF_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDate_MMyn0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    Date expectedDate = new Date(); // Assuming summaryDate is initialized to current date
    assertEquals(expectedDate, marketSummary.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTSIA_GqTB0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    BigDecimal expectedTSIA = new BigDecimal("0"); // Assuming initial TSIA is set to 0 or some default value
    BigDecimal actualTSIA = marketSummary.getTSIA();
    assertEquals(expectedTSIA, actualTSIA);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTopLosers_XNny0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    QuoteData[] result = marketSummary.getTopLosers();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenTSIA_nORB0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming default or mocked value
    assertEquals(expected, marketSummary.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercent_LwbH0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null); // Assuming null is acceptable for the constructor
    BigDecimal expected = BigDecimal.ZERO; // Assuming default or a known state
    assertEquals(expected, marketSummary.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainPercentHTML_hXWe0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    String result = marketSummary.getGainPercentHTML();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolume_YRtB0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    double expectedVolume = 1000.0;
    marketSummary.setVolume(expectedVolume);
    assertEquals(expectedVolume, marketSummary.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolume_dvfH0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null); // Assuming null is acceptable for the constructor
    assertEquals(0.0, marketSummary.getVolume(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTopGainers_kYIQ0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    QuoteData[] result = marketSummary.getTopGainers();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenTSIA_BgPO0_Cweu0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    BigDecimal expected = new BigDecimal("123.45");
    marketSummary.setOpenTSIA(expected);
    assertEquals(expected, marketSummary.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_eAEi0_Ydgb0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    BigDecimal expectedTSIA = new BigDecimal("12345.678");
    marketSummary.setTSIA(expectedTSIA);
    assertEquals(expectedTSIA, marketSummary.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGainPercent_TTmr0_oExf0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null);
    BigDecimal input = new BigDecimal("123.4567");
    marketSummary.setGainPercent(input);
    assertEquals(new BigDecimal("123.46"), marketSummary.getGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSummaryDate_KtOj0_HYLI0() {
    MarketSummaryJSF marketSummary = new MarketSummaryJSF(null); // Assuming null is acceptable for Instance<TradeServices>
    Date expectedDate = new Date();
    marketSummary.setSummaryDate(expectedDate);
    assertEquals(expectedDate, marketSummary.getSummaryDate());
  }
}