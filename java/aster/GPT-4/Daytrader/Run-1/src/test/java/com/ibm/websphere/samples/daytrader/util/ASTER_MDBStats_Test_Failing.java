/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MDBStats_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_NewType_bEbg0_kkXd0_2() {
    MDBStats mdbStats = MDBStats.getInstance();
    TimerStat result = mdbStats.addTiming("newType", 100, 200);
    assertEquals(100, result.getTotalTime(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeHigherTime_nHez1_LHOj0_2() {
    MDBStats mdbStats = MDBStats.getInstance(); // Use the singleton instance
    mdbStats.addTiming("existingType", 100, 200); // initial setup
    TimerStat result = mdbStats.addTiming("existingType", 150, 300);
    assertEquals(250, result.getTotalTime(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeLowerTime_oZJr2_vWkV0_1() {
    MDBStats mdbStats = MDBStats.getInstance(); // Corrected to use the singleton instance
    mdbStats.addTiming("existingType", 150, 300); // initial setup
    TimerStat result = mdbStats.addTiming("existingType", 100, 1000);
    assertEquals(2, result.getCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeLowerTime_oZJr2_vWkV0_2() {
    MDBStats mdbStats = MDBStats.getInstance(); // Corrected to use the singleton instance
    mdbStats.addTiming("existingType", 150, 300); // initial setup
    TimerStat result = mdbStats.addTiming("existingType", 100, 200);
    assertEquals(250, result.getTotalTime(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeLowerTime_oZJr2_vWkV0_3() {
    MDBStats mdbStats = MDBStats.getInstance(); // Corrected to use the singleton instance
    mdbStats.addTiming("existingType", 150, 300); // initial setup
    TimerStat result = mdbStats.addTiming("existingType", 100, 200);
    assertEquals(150, result.getMax(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_SameTimeTwice_fEFO3_cYCD0_2() {
    MDBStats mdbStats = MDBStats.getInstance(); // Use the singleton instance
    mdbStats.addTiming("sameTimeType", 100, 200); // initial setup
    TimerStat result = mdbStats.addTiming("sameTimeType", 100, 200);
    assertEquals(200, result.getTotalTime(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testAddTiming_ExistingTypeLowerTime_oZJr2_vWkV0_1_fid3() {
    MDBStats mdbStats = MDBStats.getInstance(); // Corrected to use the singleton instance
    mdbStats.addTiming("existingType", 150, 300); // initial setup
    TimerStat result = mdbStats.addTiming("existingType", 100, 200);
    assertEquals(2, result.getCount());
  }
}