/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeScenarioServlet_Test_Passing {
  @Mock
  ServletConfig servletConfig;
  @InjectMocks
  TradeScenarioServlet tradeScenarioServlet;
  private HttpServletResponse httpServletResponse;
  private HttpServletRequest httpServletRequest;
  private PrintWriter printWriter;
  private static final String tasPathPrefix = "/app?action=";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_BHyA0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    servlet.doGet(request, response);
    verify(request, atLeastOnce()).getParameter(anyString());
    verify(response, atLeastOnce()).getWriter();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_CZPe0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    servlet.doPost(request, response);
    verify(request, atLeast(1)).getParameter(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_boed0() {
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    String expected = "TradeScenarioServlet emulates a population of web users";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithActionN_lgqU0_GhoD0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    PrintWriter writer = mock(PrintWriter.class);
    when(req.getParameter("action")).thenReturn("n");
    when(resp.getWriter()).thenReturn(writer);
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(writer).println("<HTML><HEAD>TradeScenarioServlet</HEAD><BODY>Hello</BODY></HTML>");
    verify(writer).close();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithEmptyParameters_cIdP0_NxQj0() {
    ServletConfig mockConfig = mock(ServletConfig.class);
    when(mockConfig.getInitParameterNames()).thenReturn(Collections.enumeration(Collections.emptyList()));
    TradeScenarioServlet servlet = new TradeScenarioServlet();
    try {
      servlet.init(mockConfig);
    } catch (ServletException e) {
      fail("ServletException should not be thrown");
    }
    verify(mockConfig, never()).getInitParameter(anyString());
  }
}