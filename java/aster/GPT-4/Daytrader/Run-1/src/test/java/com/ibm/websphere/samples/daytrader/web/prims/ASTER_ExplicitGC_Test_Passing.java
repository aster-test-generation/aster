/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_ExplicitGC_Test_Passing {
  private ExplicitGC explicitGC;
  private ServletConfig mockServletConfig;
  private HttpServletRequest request;
  private HttpServletResponse response;
  @Mock
  private HttpServletRequest httpServletRequest;
  @Mock
  private HttpServletResponse httpServletResponse;
  @Mock
  private ServletOutputStream servletOutputStream;
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    explicitGC = new ExplicitGC();
    request = mock(HttpServletRequest.class);
    response = mock(HttpServletResponse.class);
    explicitGC.doPost(request, response);
    verify(request, times(1)).setAttribute(anyString(), any());
    verify(response, times(1)).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_mMSN0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    ExplicitGC explicitGC = new ExplicitGC();
    explicitGC.doPost(request, response);
    verify(explicitGC).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_FznL0() {
    ExplicitGC explicitGC = new ExplicitGC();
    String result = explicitGC.getServletInfo();
    assertEquals("Generate Explicit GC to VM", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws ServletException, IOException {
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    explicitGC.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(httpServletResponse).getOutputStream();
    verify(servletOutputStream, atLeastOnce()).println(anyString());
    // Since the actual content is complex and dynamic, we might want to check specific parts:
    String expectedContentPart = "<title>ExplicitGC</title>";
    verify(servletOutputStream).println(argThat(argument -> argument.contains(expectedContentPart)));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_XPjO0_1() throws ServletException {
    explicitGC = new ExplicitGC();
    mockServletConfig = mock(ServletConfig.class);
    explicitGC.init(mockServletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_XPjO0_2() throws ServletException {
    explicitGC = new ExplicitGC();
    mockServletConfig = mock(ServletConfig.class);
    explicitGC.init(mockServletConfig);
    assertEquals(0, hitCount);
  }
}