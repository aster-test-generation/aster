/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.direct;

import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_KeySequenceDirect_Test_Passing {
  Connection connection;
  PreparedStatement preparedStatement;
  ResultSet resultSet;
  private static HashMap<String, Collection<?>> keyMap = new HashMap<String, Collection<?>>();

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextID_FirstIDFromEmptyKeyMap_LTSG0_ZujW0_1_fid2() throws Exception {
    Connection conn = Mockito.mock(Connection.class);
    PreparedStatement stmt = Mockito.mock(PreparedStatement.class);
    Mockito.when(conn.prepareStatement(anyString())).thenReturn(stmt);
    Mockito.when(stmt.executeQuery()).thenReturn(Mockito.mock(ResultSet.class));
    String keyName = "testEntity";
    boolean inSession = false;
    boolean inGlobalTxn = false;
    Integer result = KeySequenceDirect.getNextID(conn, keyName, inSession, inGlobalTxn);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextID_SecondIDFromExistingBlock_qxsU1_ONqT0_1_fid2() throws Exception {
    Connection conn = Mockito.mock(Connection.class);
    PreparedStatement stmt = Mockito.mock(PreparedStatement.class);
    ResultSet rs = Mockito.mock(ResultSet.class);
    Mockito.when(conn.prepareStatement(anyString())).thenReturn(stmt);
    Mockito.when(stmt.executeQuery()).thenReturn(rs);
    Mockito.when(rs.next()).thenReturn(true);
    Mockito.when(rs.getInt(1)).thenReturn(1);
    String keyName = "testEntity";
    boolean inSession = false;
    boolean inGlobalTxn = false;
    Integer firstResult = KeySequenceDirect.getNextID(conn, keyName, inSession, inGlobalTxn);
    Integer secondResult = KeySequenceDirect.getNextID(conn, keyName, inSession, inGlobalTxn);
    assertNotNull(secondResult);
    assertEquals(Integer.valueOf(1), secondResult);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNextID_NewBlockAllocationWhenPreviousBlockExhausted_XmXL2_vzGb0_1_fid2() throws Exception {
    Connection conn = Mockito.mock(Connection.class);
    PreparedStatement stmt = Mockito.mock(PreparedStatement.class);
    Mockito.when(conn.prepareStatement(Mockito.anyString())).thenReturn(stmt);
    Mockito.doNothing().when(stmt).setString(Mockito.anyInt(), Mockito.anyString());
    Mockito.when(stmt.executeQuery()).thenReturn(Mockito.mock(ResultSet.class));
    String keyName = "testEntity";
    boolean inSession = false;
    boolean inGlobalTxn = false;
    for (int i = 0; i < TradeConfig.KEYBLOCKSIZE; i++) {
      KeySequenceDirect.getNextID(conn, keyName, inSession, inGlobalTxn);
    }
    Integer result = KeySequenceDirect.getNextID(conn, keyName, inSession, inGlobalTxn);
    assertNotNull(result);
  }
}