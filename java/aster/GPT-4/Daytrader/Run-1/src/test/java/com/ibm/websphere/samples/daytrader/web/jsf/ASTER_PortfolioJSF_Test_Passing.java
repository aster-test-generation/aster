/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.faces.component.html.HtmlDataTable;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PortfolioJSF_Test_Passing {
  @Mock
  private TradeServices tradeAction;
  @Mock
  private ExternalContext externalContext;
  @Mock
  private HttpSession httpSession;
  @InjectMocks
  private PortfolioJSF portfolioJSF;
  @Mock
  private ExternalContext context;
  @Mock
  private HtmlDataTable dataTable;
  @Mock
  private HttpSession session;
  @Mock
  private HoldingData holdingData;
  @Mock
  private OrderDataBean orderDataBean;
  private BigDecimal totalBasis = new BigDecimal(0.0);
  private BigDecimal totalGain = new BigDecimal(0.0);
  private ArrayList<HoldingData> holdingDatas;
  private BigDecimal totalValue = new BigDecimal(0.0);
  private Integer numberHoldings;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalGainPercent_ccuu0() {
    Instance<TradeServices> servicesInstance = mock(Instance.class);
    PortfolioJSF portfolioJSF = new PortfolioJSF(servicesInstance);
    BigDecimal expected = new BigDecimal("0.00"); // Assuming default or initial value
    BigDecimal result = portfolioJSF.getTotalGainPercent();
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDataTable_JPFb0() {
    PortfolioJSF portfolioJSF = new PortfolioJSF(null); // Assuming null can be passed for Instance<TradeServices>
    HtmlDataTable dataTable = new HtmlDataTable();
    portfolioJSF.setDataTable(dataTable);
    assertEquals(dataTable, portfolioJSF.getDataTable());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetNumberHoldings_cSBu0() {
    PortfolioJSF portfolio = new PortfolioJSF(null); // Assuming null is acceptable for the constructor
    Integer expected = 0; // Assuming default or initial value of numberHoldings is 0
    assertEquals(expected, portfolio.getNumberHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalValue_Hfgq0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming default totalValue is zero
    assertEquals(expected, portfolio.getTotalValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPortfolio_1() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    // Prepare data
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(new BigDecimal("100.00"));
    holdingDataBean.setQuantity(10);
    holdingDataBean.setQuoteID("XYZ");
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("150.00"));
    when(tradeAction.getHoldings("user123")).thenReturn(Arrays.asList(holdingDataBean));
    when(tradeAction.getQuote("XYZ")).thenReturn(quoteDataBean);
    // Call method
    portfolioJSF.getPortfolio();
    // Verify interactions
    verify(tradeAction).getHoldings("user123");
    verify(tradeAction).getQuote("XYZ");
    // Assertions
    HoldingData resultHoldingData = portfolioJSF.getHoldingDatas().get(0);
    assertEquals(1, portfolioJSF.getNumberHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPortfolio_2() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    // Prepare data
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(new BigDecimal("100.00"));
    holdingDataBean.setQuantity(10);
    holdingDataBean.setQuoteID("XYZ");
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("150.00"));
    when(tradeAction.getHoldings("user123")).thenReturn(Arrays.asList(holdingDataBean));
    when(tradeAction.getQuote("XYZ")).thenReturn(quoteDataBean);
    // Call method
    portfolioJSF.getPortfolio();
    // Verify interactions
    verify(tradeAction).getHoldings("user123");
    verify(tradeAction).getQuote("XYZ");
    // Assertions
    HoldingData resultHoldingData = portfolioJSF.getHoldingDatas().get(0);
    assertNotNull(portfolioJSF.getHoldingDatas());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPortfolio_3() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    // Prepare data
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(new BigDecimal("100.00"));
    holdingDataBean.setQuantity(10);
    holdingDataBean.setQuoteID("XYZ");
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("150.00"));
    when(tradeAction.getHoldings("user123")).thenReturn(Arrays.asList(holdingDataBean));
    when(tradeAction.getQuote("XYZ")).thenReturn(quoteDataBean);
    // Call method
    portfolioJSF.getPortfolio();
    // Verify interactions
    verify(tradeAction).getHoldings("user123");
    verify(tradeAction).getQuote("XYZ");
    // Assertions
    HoldingData resultHoldingData = portfolioJSF.getHoldingDatas().get(0);
    assertEquals(1, portfolioJSF.getHoldingDatas().size());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPortfolio_4() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    // Prepare data
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(new BigDecimal("100.00"));
    holdingDataBean.setQuantity(10);
    holdingDataBean.setQuoteID("XYZ");
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("150.00"));
    when(tradeAction.getHoldings("user123")).thenReturn(Arrays.asList(holdingDataBean));
    when(tradeAction.getQuote("XYZ")).thenReturn(quoteDataBean);
    // Call method
    portfolioJSF.getPortfolio();
    // Verify interactions
    verify(tradeAction).getHoldings("user123");
    verify(tradeAction).getQuote("XYZ");
    // Assertions
    HoldingData resultHoldingData = portfolioJSF.getHoldingDatas().get(0);
    assertEquals(new BigDecimal("1000.00"), resultHoldingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPortfolio_5() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    // Prepare data
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(new BigDecimal("100.00"));
    holdingDataBean.setQuantity(10);
    holdingDataBean.setQuoteID("XYZ");
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("150.00"));
    when(tradeAction.getHoldings("user123")).thenReturn(Arrays.asList(holdingDataBean));
    when(tradeAction.getQuote("XYZ")).thenReturn(quoteDataBean);
    // Call method
    portfolioJSF.getPortfolio();
    // Verify interactions
    verify(tradeAction).getHoldings("user123");
    verify(tradeAction).getQuote("XYZ");
    // Assertions
    HoldingData resultHoldingData = portfolioJSF.getHoldingDatas().get(0);
    assertEquals(new BigDecimal("1500.00"), resultHoldingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPortfolio_6() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    // Prepare data
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(new BigDecimal("100.00"));
    holdingDataBean.setQuantity(10);
    holdingDataBean.setQuoteID("XYZ");
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("150.00"));
    when(tradeAction.getHoldings("user123")).thenReturn(Arrays.asList(holdingDataBean));
    when(tradeAction.getQuote("XYZ")).thenReturn(quoteDataBean);
    // Call method
    portfolioJSF.getPortfolio();
    // Verify interactions
    verify(tradeAction).getHoldings("user123");
    verify(tradeAction).getQuote("XYZ");
    // Assertions
    HoldingData resultHoldingData = portfolioJSF.getHoldingDatas().get(0);
    assertEquals(new BigDecimal("500.00"), resultHoldingData.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPortfolio_7() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    // Prepare data
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(new BigDecimal("100.00"));
    holdingDataBean.setQuantity(10);
    holdingDataBean.setQuoteID("XYZ");
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("150.00"));
    when(tradeAction.getHoldings("user123")).thenReturn(Arrays.asList(holdingDataBean));
    when(tradeAction.getQuote("XYZ")).thenReturn(quoteDataBean);
    // Call method
    portfolioJSF.getPortfolio();
    // Verify interactions
    verify(tradeAction).getHoldings("user123");
    verify(tradeAction).getQuote("XYZ");
    // Assertions
    HoldingData resultHoldingData = portfolioJSF.getHoldingDatas().get(0);
    assertEquals(new BigDecimal("500.00"), portfolioJSF.getTotalGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPortfolio_8() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    // Prepare data
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(new BigDecimal("100.00"));
    holdingDataBean.setQuantity(10);
    holdingDataBean.setQuoteID("XYZ");
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("150.00"));
    when(tradeAction.getHoldings("user123")).thenReturn(Arrays.asList(holdingDataBean));
    when(tradeAction.getQuote("XYZ")).thenReturn(quoteDataBean);
    // Call method
    portfolioJSF.getPortfolio();
    // Verify interactions
    verify(tradeAction).getHoldings("user123");
    verify(tradeAction).getQuote("XYZ");
    // Assertions
    HoldingData resultHoldingData = portfolioJSF.getHoldingDatas().get(0);
    assertEquals(new BigDecimal("1000.00"), portfolioJSF.getTotalBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPortfolio_9() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    // Prepare data
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(new BigDecimal("100.00"));
    holdingDataBean.setQuantity(10);
    holdingDataBean.setQuoteID("XYZ");
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("150.00"));
    when(tradeAction.getHoldings("user123")).thenReturn(Arrays.asList(holdingDataBean));
    when(tradeAction.getQuote("XYZ")).thenReturn(quoteDataBean);
    // Call method
    portfolioJSF.getPortfolio();
    // Verify interactions
    verify(tradeAction).getHoldings("user123");
    verify(tradeAction).getQuote("XYZ");
    // Assertions
    HoldingData resultHoldingData = portfolioJSF.getHoldingDatas().get(0);
    assertEquals(new BigDecimal("1500.00"), portfolioJSF.getTotalValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPortfolio_10() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    // Prepare data
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(new BigDecimal("100.00"));
    holdingDataBean.setQuantity(10);
    holdingDataBean.setQuoteID("XYZ");
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("150.00"));
    when(tradeAction.getHoldings("user123")).thenReturn(Arrays.asList(holdingDataBean));
    when(tradeAction.getQuote("XYZ")).thenReturn(quoteDataBean);
    // Call method
    portfolioJSF.getPortfolio();
    // Verify interactions
    verify(tradeAction).getHoldings("user123");
    verify(tradeAction).getQuote("XYZ");
    // Assertions
    HoldingData resultHoldingData = portfolioJSF.getHoldingDatas().get(0);
    assertEquals(new BigDecimal("50.00"), portfolioJSF.getTotalGainPercent());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalGainPercentHTML_cyXl0() {
    Instance<TradeServices> services = mock(Instance.class);
    PortfolioJSF portfolio = new PortfolioJSF(services);
    String result = portfolio.getTotalGainPercentHTML();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalGain_gUxo0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming initial totalGain is ZERO
    BigDecimal actual = portfolio.getTotalGain();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingDatas_DHXr0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    ArrayList<HoldingData> result = portfolio.getHoldingDatas();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTotalBasis_BrtZ0() {
    PortfolioJSF portfolio = new PortfolioJSF(null); // Assuming null can be passed for Instance<TradeServices>
    BigDecimal expected = BigDecimal.ZERO; // Assuming the initial totalBasis is zero
    assertEquals(expected, portfolio.getTotalBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSumOfCashHoldings_rvbo0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming initial sumOfCashHoldings is ZERO
    BigDecimal actual = portfolio.getSumOfCashHoldings();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDataTable_oTUJ0() {
    PortfolioJSF portfolioJSF = new PortfolioJSF(null);
    HtmlDataTable result = portfolioJSF.getDataTable();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetBalance_NmPA0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming initial balance is zero
    assertEquals(expected, portfolio.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingsTotal_CzZb0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = BigDecimal.ZERO; // Assuming default or initial value
    assertEquals(expected, portfolio.getHoldingsTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenBalance_FRHM0() {
    PortfolioJSF portfolio = new PortfolioJSF(null); // Assuming null can be passed if not specified otherwise
    BigDecimal expected = BigDecimal.ZERO; // Assuming initial balance is zero if not specified otherwise
    assertEquals(expected, portfolio.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalBasis_MYdW0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = new BigDecimal("100.00");
    portfolio.setTotalBasis(expected);
    assertEquals(expected, portfolio.getTotalBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotalValue_oqyb0_ynLM0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = new BigDecimal("1000");
    portfolio.setTotalValue(expected);
    assertEquals(expected, portfolio.getTotalValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSumOfCashHoldings_CVtb0_IceJ0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = new BigDecimal("1000");
    portfolio.setSumOfCashHoldings(expected);
    assertEquals(expected, portfolio.getSumOfCashHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenBalance_gTaH0_CBus0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = new BigDecimal("1000");
    portfolio.setOpenBalance(expected);
    assertEquals(expected, portfolio.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSell_UXMT0() throws Exception {
    when(context.getSession(true)).thenReturn(session);
    when(dataTable.getRowData()).thenReturn(holdingData);
    when(session.getAttribute("uidBean")).thenReturn("user123");
    when(holdingData.getHoldingID()).thenReturn(1);
    when(tradeAction.sell(anyString(), anyInt(), anyInt())).thenReturn(orderDataBean);
    when(orderDataBean.getOrderID()).thenReturn(101);
    when(orderDataBean.getOrderStatus()).thenReturn("Completed");
    when(orderDataBean.getOpenDate()).thenReturn(new java.util.Date());
    when(orderDataBean.getCompletionDate()).thenReturn(new java.util.Date());
    when(orderDataBean.getOrderFee()).thenReturn(BigDecimal.valueOf(1.5));
    when(orderDataBean.getOrderType()).thenReturn("Sell");
    when(orderDataBean.getSymbol()).thenReturn("XYZ");
    ArrayList<HoldingData> holdingDatas = new ArrayList<>();
    holdingDatas.add(holdingData);
    portfolioJSF = new PortfolioJSF(null);
    String result = portfolioJSF.sell();
    verify(session).setAttribute(eq("orderData"), any(OrderData.class));
    verify(holdingData).getHoldingID();
    verify(tradeAction).sell("user123", 1, TradeConfig.getOrderProcessingMode());
    assertEquals("sell", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingsTotal_jPTr0_qrJx0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    BigDecimal expected = new BigDecimal("1000");
    portfolio.setHoldingsTotal(expected);
    assertEquals(expected, portfolio.getHoldingsTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetNumberHoldings_hkxk0_mNTY0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    Integer expectedNumberHoldings = 5;
    portfolio.setNumberHoldings(expectedNumberHoldings);
    assertEquals(expectedNumberHoldings, portfolio.getNumberHoldings());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingDatas_ayeA0_OuMV0() {
    PortfolioJSF portfolio = new PortfolioJSF(null);
    ArrayList<HoldingData> expected = new ArrayList<>();
    expected.add(new HoldingData());
    portfolio.setHoldingDatas(expected);
    assertEquals(expected, portfolio.getHoldingDatas());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBalance_Igmv0_JUiH0() {
    PortfolioJSF portfolio = new PortfolioJSF(null); // Assuming null can be passed for Instance<TradeServices>
    BigDecimal expectedBalance = new BigDecimal("100.00");
    portfolio.setBalance(expectedBalance);
    assertEquals(expectedBalance, portfolio.getBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPortfolio() throws Exception {
    when(externalContext.getSession(true)).thenReturn(httpSession);
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    // Prepare data
    HoldingDataBean holdingDataBean = new HoldingDataBean();
    holdingDataBean.setHoldingID(1);
    holdingDataBean.setPurchasePrice(new BigDecimal("100.00"));
    holdingDataBean.setQuantity(10);
    holdingDataBean.setQuoteID("XYZ");
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setPrice(new BigDecimal("150.00"));
    when(tradeAction.getHoldings("user123")).thenReturn(Arrays.asList(holdingDataBean));
    when(tradeAction.getQuote("XYZ")).thenReturn(quoteDataBean);
    // Call method
    portfolioJSF.getPortfolio();
    // Verify interactions
    verify(tradeAction).getHoldings("user123");
    verify(tradeAction).getQuote("XYZ");
    // Assertions
    assertEquals(1, portfolioJSF.getNumberHoldings());
    assertNotNull(portfolioJSF.getHoldingDatas());
    assertEquals(1, portfolioJSF.getHoldingDatas().size());
    HoldingData resultHoldingData = portfolioJSF.getHoldingDatas().get(0);
    assertEquals(new BigDecimal("1000.00"), resultHoldingData.getBasis());
    assertEquals(new BigDecimal("1500.00"), resultHoldingData.getMarketValue());
    assertEquals(new BigDecimal("500.00"), resultHoldingData.getGain());
    assertEquals(new BigDecimal("500.00"), portfolioJSF.getTotalGain());
    assertEquals(new BigDecimal("1000.00"), portfolioJSF.getTotalBasis());
    assertEquals(new BigDecimal("1500.00"), portfolioJSF.getTotalValue());
    assertEquals(new BigDecimal("50.00"), portfolioJSF.getTotalGainPercent());
  }
}