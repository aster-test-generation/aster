/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.websocket;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.websocket.Session;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

public class Aster_MarketSummaryWebSocket_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testOnError_HaXN0() {
    MarketSummaryWebSocket socket = new MarketSummaryWebSocket();
    Throwable mockThrowable = mock(Throwable.class);
    Session mockSession = mock(Session.class);
    socket.onError(mockThrowable, mockSession);
    verify(mockThrowable).printStackTrace();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummaryWithNullAction_zmRs0() {
    MarketSummaryWebSocket socket = new MarketSummaryWebSocket();
    ActionMessage message = mock(ActionMessage.class);
    Session session = mock(Session.class);
    when(message.getDecodedAction()).thenReturn(null);
    socket.sendMarketSummary(message, session);
    verify(session, never()).getAsyncRemote();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummaryWithInvalidAction_EQHR3() {
    MarketSummaryWebSocket socket = new MarketSummaryWebSocket();
    ActionMessage message = mock(ActionMessage.class);
    Session session = mock(Session.class);
    when(message.getDecodedAction()).thenReturn("invalidAction");
    socket.sendMarketSummary(message, session);
    verify(session, never()).getAsyncRemote();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummaryAwaitInterrupted_IcjT5_wTYn0() throws InterruptedException {
    MarketSummaryWebSocket socket = new MarketSummaryWebSocket();
    ActionMessage message = mock(ActionMessage.class);
    Session session = mock(Session.class);
    CountDownLatch latch = new CountDownLatch(1);
    when(message.getDecodedAction()).thenReturn("updateMarketSummary");
    // Using an alternative way to simulate InterruptedException
    Thread testThread = new Thread(() -> {
      try {
        latch.await();
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    });
    testThread.start();
    testThread.interrupt();
    testThread.join();
    socket.sendMarketSummary(message, session);
    verify(session, never()).getAsyncRemote();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSendMarketSummaryAwaitInterrupted_IcjT5_wTYn0_fid1() throws InterruptedException {
    MarketSummaryWebSocket socket = new MarketSummaryWebSocket();
    ActionMessage message = mock(ActionMessage.class);
    Session session = mock(Session.class);
    CountDownLatch latch = new CountDownLatch(1);
    when(message.getDecodedAction()).thenReturn("updateMarketSummary");
    doThrow(new InterruptedException()).when(latch).await();
    socket.sendMarketSummary(message, session);
    verify(session, never()).getAsyncRemote();
  }
}