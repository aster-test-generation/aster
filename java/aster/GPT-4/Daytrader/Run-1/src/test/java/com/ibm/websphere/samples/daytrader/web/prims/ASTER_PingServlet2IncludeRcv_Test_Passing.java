/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2IncludeRcv_Test_Passing {
  @InjectMocks
  private PingServlet2IncludeRcv pingservlet2includercv;
  @Mock
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;
  private HttpServletRequest mockRequest;
  private HttpServletResponse mockResponse;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoPost() throws ServletException, IOException {
    pingservlet2includercv = new PingServlet2IncludeRcv();
    // Call the method under test
    pingservlet2includercv.doPost(request, response);
    // Verify that doGet is called exactly once with the same request and response objects
    verify(pingservlet2includercv, times(1)).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_oneS0() throws ServletException, IOException {
    PingServlet2IncludeRcv servlet = new PingServlet2IncludeRcv();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    servlet.doPost(request, response);
    verify(servlet).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testdoGet() throws Exception {
    pingservlet2includercv = new PingServlet2IncludeRcv();
    mockRequest = mock(HttpServletRequest.class);
    mockResponse = mock(HttpServletResponse.class);
    pingservlet2includercv.doGet(mockRequest, mockResponse);
    verify(mockRequest, atLeast(0)).getParameter(anyString()); // Verifies that getParameter might be called (change as needed)
    verifyNoMoreInteractions(mockResponse); // Ensures no interactions were made with the response object
  }
}