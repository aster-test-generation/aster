/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_AccountProfileDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCreditCard_xdUZ0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    assertEquals("1234-5678-9012-3456", accountProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_KYkj0() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    assertTrue(bean1.equals(bean1));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_FWSj1() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    Object other = new Object();
    assertFalse(bean1.equals(other));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_RQNa2() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    assertFalse(bean1.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_MFuP0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    String expected = "\n\tAccount Profile Data for userID:user123\n\t\t   passwd:pass123\n\t\t   fullName:John Doe\n\t\t    address:1234 Elm St\n\t\t      email:john.doe@example.com\n\t\t creditCard:1234-5678-9012-3456";
    assertEquals(expected, accountProfile.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccount_XprL0() {
    AccountProfileDataBean profile = new AccountProfileDataBean();
    AccountDataBean account = new AccountDataBean();
    profile.setAccount(account);
    assertEquals(account, profile.getAccount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_QaoU0_1() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_QaoU0_2() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_QaoU0_3() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_QaoU0_4() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_QaoU0_5() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_QaoU0_6() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_QaoU0_7() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUserID_FFnz0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String expectedUserID = "user123";
    accountProfile.setUserID(expectedUserID);
    assertEquals(expectedUserID, accountProfile.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetEmail_qAWM0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user123", "password", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    assertEquals("john.doe@example.com", accountProfileDataBean.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_FHrG0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user123", "password", "John Doe", "1234 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    assertEquals("user123", accountProfileDataBean.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNonNullUserID_ulkl0() {
    AccountProfileDataBean account = new AccountProfileDataBean("user123", "password", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    int expectedHashCode = "user123".hashCode();
    assertEquals(expectedHashCode, account.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullUserID_pdDX1() {
    AccountProfileDataBean account = new AccountProfileDataBean(null, "password", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    assertEquals(0, account.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetFullName_XthQ0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String expectedFullName = "John Doe";
    accountProfile.setFullName(expectedFullName);
    assertEquals(expectedFullName, accountProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAddress_LRem0() {
    AccountProfileDataBean accountProfileDataBean = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234567890123456");
    assertEquals("1234 Elm Street", accountProfileDataBean.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPassword_HBLS0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    String expectedPassword = "password123";
    String actualPassword = accountProfile.getPassword();
    assertEquals(expectedPassword, actualPassword);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_yCUJ0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "pass123", "John Doe", "123 Elm St", "john@example.com", "1234-5678-9012-3456");
    String expectedHtml = "<BR>Account Profile Data for userID: <B>user123</B>" +
        "<LI>   passwd:pass123</LI>" +
        "<LI>   fullName:John Doe</LI>" +
        "<LI>    address:123 Elm St</LI>" +
        "<LI>      email:john@example.com</LI>" +
        "<LI> creditCard:1234-5678-9012-3456</LI>";
    assertEquals(expectedHtml, accountProfile.toHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetFullName_WESL0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean("user123", "password123", "John Doe", "123 Elm St", "john.doe@example.com", "1234-5678-9012-3456");
    assertEquals("John Doe", accountProfile.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAddress_UXgA0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String expectedAddress = "1234 Test Lane";
    accountProfile.setAddress(expectedAddress);
    assertEquals(expectedAddress, accountProfile.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentUserID_JZnY3_fUKe0() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    AccountProfileDataBean bean2 = new AccountProfileDataBean("user2", "pass1", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    assertFalse(bean1.equals(bean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameUserID_KOFi4_Dxkc0() {
    AccountProfileDataBean bean1 = new AccountProfileDataBean("user1", "pass1", "John Doe", "123 Elm St", "john@example.com", "1234567890123456");
    AccountProfileDataBean bean2 = new AccountProfileDataBean("user1", "pass2", "Jane Doe", "456 Oak St", "jane@example.com", "6543210987654321");
    assertTrue(bean1.equals(bean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetEmail_sIJe0_TOBR0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String testEmail = "test@example.com";
    accountProfile.setEmail(testEmail);
    assertEquals(testEmail, accountProfile.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCreditCard_zmUO0_fxuM0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String testCreditCard = "1234-5678-9101-1121";
    accountProfile.setCreditCard(testCreditCard);
    assertEquals(testCreditCard, accountProfile.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPassword_LZvO0_Rrdg0() {
    AccountProfileDataBean accountProfile = new AccountProfileDataBean();
    String newPassword = "newPassword123";
    accountProfile.setPassword(newPassword);
    assertEquals(newPassword, accountProfile.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_QaoU0() {
    AccountProfileDataBean randomInstance = AccountProfileDataBean.getRandomInstance();
    assertNotNull(randomInstance);
    assertNotNull(randomInstance.getUserID());
    assertNotNull(randomInstance.getPassword());
    assertNotNull(randomInstance.getFullName());
    assertNotNull(randomInstance.getAddress());
    assertNotNull(randomInstance.getEmail());
    assertNotNull(randomInstance.getCreditCard());
  }
}