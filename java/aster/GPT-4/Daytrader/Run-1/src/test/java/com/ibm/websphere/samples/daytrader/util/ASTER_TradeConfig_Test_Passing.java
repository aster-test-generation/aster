/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessMode_tlod0() {
    int expectedMode = 5; // Assuming default access mode is5
    int actualMode = TradeConfig.getAccessMode();
    assertEquals(expectedMode, actualMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_frfi0() {
    int expected = 300; // Assuming 300 is the default or set value for marketSummaryInterval
    int actual = TradeConfig.getMarketSummaryInterval();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNames_TnuC0() {
    String[] expected = {"MODE1", "MODE2", "MODE3"}; // Example expected values
    String[] actual = TradeConfig.getRunTimeModeNames();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_YkpW0() {
    int expected = 0; // Assuming default or a set value for primIterations
    int actual = TradeConfig.getPrimIterations();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddressFormat_ubSa0_1() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.endsWith(" Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddressFormat_ubSa0_2() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.matches("\\d+ Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIncrementScenarioCount_lreC0() {
    int initialCount = TradeConfig.getScenarioCount();
    TradeConfig.incrementScenarioCount();
    assertEquals(initialCount + 1, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRunTimeMode_kchx0() {
    TradeConfig.setRunTimeMode(1);
    assertEquals(1, TradeConfig.getRunTimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFullNamePattern_QEaH0() {
    String fullName = TradeConfig.rndFullName();
    assertTrue(fullName.matches("first:\\d+ last:\\d+"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioMixesNotNull_YEKM0() {
    int[][] result = TradeConfig.getScenarioMixes();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_VaDN0() {
    int expected = 15000; // Assuming MAX_USERS is initialized to15000 somewhere in the TradeConfig class.
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxQuotes_zRJl0() {
    int expected = 10; // Assuming MAX_QUOTES is set to10
    int actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongRunDefault_zWtN0() {
    assertTrue(TradeConfig.getLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequency_yjur0() {
    TradeConfig.setListQuotePriceChangeFrequency(10);
    assertEquals(10, TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_igBO0() {
    TradeConfig.setOrderProcessingMode(1);
    assertEquals(1, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetDisplayOrderAlerts_TkmR0() {
    boolean result = TradeConfig.getDisplayOrderAlerts();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_PhAI0() {
    int expectedFrequency = 10; // Assuming 10 is the expected frequency set somewhere in the application
    assertEquals(expectedFrequency, TradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetAccessMode_peZj0() {
    int expectedValue = 5;
    TradeConfig.setAccessMode(expectedValue);
    assertEquals(expectedValue, TradeConfig.getAccessMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetJDBCDriverNeedsGlobalTransaction_fqnS0() {
    boolean expected = false; // Assuming a default or expected value for the test
    boolean actual = TradeConfig.getJDBCDriverNeedsGlobalTransation();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndNewUserID_eaaw0() {
    String result = TradeConfig.rndNewUserID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_gpKO0() {
    int expected = 10; // Assuming the expected MAX_HOLDINGS is10
    int actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_NewUser_PlIy0() {
    boolean newUser = true;
    char result = TradeConfig.getScenarioAction(newUser);
    assertFalse(result == 'b' || result == 's' || result == 'h');
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_RandomScenario_PHxx4() {
    boolean newUser = Math.random() < 0.5;
    char result = TradeConfig.getScenarioAction(newUser);
    assertFalse(result == 'b' || result == 's' || result == 'h');
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testNextUserID_InitialCount_iiod0() {
    String result = TradeConfig.nextUserID();
    assertEquals("uid:0", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePrices_ELWk0() {
    boolean expected = true; // Assuming default or expected state of updateQuotePrices
    boolean actual = TradeConfig.getUpdateQuotePrices();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBooleanReturnsBoolean_bpmg0() {
    assertTrue(TradeConfig.rndBoolean() == true || TradeConfig.rndBoolean() == false);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetScenarioCount_BJjV0() {
    TradeConfig.setScenarioCount(5);
    assertEquals(5, TradeConfig.getScenarioCount());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_EppH0() {
    boolean expected = true; // Assuming default or previously set value
    boolean actual = TradeConfig.getPublishQuotePriceChange();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_NullParam_bOgq0() {
    TradeConfig.setConfigParam(null, "someValue");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_EmptyParam_BzPi1() {
    TradeConfig.setConfigParam("   ", "someValue");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_NullValue_HFDd2() {
    TradeConfig.setConfigParam("orderProcessingMode", null);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidOrderProcessingMode_jxIm3() {
    TradeConfig.setConfigParam("orderProcessingMode", "validMode");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidOrderProcessingMode_DerZ4() {
    TradeConfig.setConfigParam("orderProcessingMode", "invalidMode");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidAccessMode_cIwR5() {
    TradeConfig.setConfigParam("accessMode", "validMode");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidAccessMode_DCeZ6() {
    TradeConfig.setConfigParam("accessMode", "invalidMode");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidWebInterface_Yrcy7() {
    TradeConfig.setConfigParam("WebInterface", "validInterface");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidWebInterface_Qaty8() {
    TradeConfig.setConfigParam("WebInterface", "invalidInterface");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidMaxUsers_SkdE9() {
    TradeConfig.setConfigParam("maxUsers", "100");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidMaxUsers_kjQX10() {
    TradeConfig.setConfigParam("maxUsers", "notAnInteger");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidMaxQuotes_eGOM11() {
    TradeConfig.setConfigParam("maxQuotes", "200");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidMaxQuotes_xype12() {
    TradeConfig.setConfigParam("maxQuotes", "notAnInteger");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_ValidPrimIterations_sAsy13() {
    TradeConfig.setConfigParam("primIterations", "50");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetConfigParam_InvalidPrimIterations_ZftN14() {
    TradeConfig.setConfigParam("primIterations", "notAnInteger");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceDefaultValue_GhEq0() {
    int expected = 0; // Assuming default value of webInterface is 0
    int actual = TradeConfig.getWebInterface();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRandomMethodReturnsValueBetweenZeroAndOne_Jayk0() {
    double result = TradeConfig.random();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_opQp0() {
    int expectedMode = 0; // Assuming 0 is a valid default or set mode for the test context
    int actualMode = TradeConfig.getOrderProcessingMode();
    assertEquals(expectedMode, actualMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomPriceChangeFactor_GreaterThanOne_ECYx0() {
    BigDecimal result = TradeConfig.getRandomPriceChangeFactor();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndSymbol_uKEU0() {
    String result = TradeConfig.rndSymbol();
    assertTrue(result.startsWith("s:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithColonInUserID_PRCZ0_1() {
    String userID = "user:123";
    String email = TradeConfig.rndEmail(userID);
    assertFalse(email.contains(":"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithColonInUserID_PRCZ0_2() {
    String userID = "user:123";
    String email = TradeConfig.rndEmail(userID);
    assertTrue(email.matches("user123@[0-9]+\\.com"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndCreditCardFormat_QdMx0() {
    String creditCardNumber = TradeConfig.rndCreditCard();
    assertTrue(creditCardNumber.matches("\\d{1,3}-\\d{1,3}-\\d{1,3}-\\d{1,3}"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeMode_UBJs0() {
    int expectedMode = 1; // Assuming 1 is a valid runtime mode for the context
    int actualMode = TradeConfig.getRunTimeMode();
    assertEquals(expectedMode, actualMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBigDecimalWithZero_OGzT0() {
    BigDecimal result = TradeConfig.rndBigDecimal(0.0f);
    assertEquals(BigDecimal.ZERO.setScale(2, BigDecimal.ROUND_HALF_UP), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterface_ValidValue_nAhP0() {
    TradeConfig.setWebInterface(5);
    assertEquals(5, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndUserID_CMCk0() {
    String userID = TradeConfig.rndUserID();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndBalanceReturnsCorrectValue_fMNo0() {
    String expected = "1000000";
    String actual = TradeConfig.rndBalance();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndFloat_ErNG0_TUFs0() {
    int i = 10;
    float result = TradeConfig.rndFloat(i);
    assertTrue(result >= 0 && result < 10, "Result should be between 0 and 10");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxHoldings_Rjnp0_vRMx0() {
    TradeConfig.setMAX_HOLDINGS(100);
    assertEquals(100, TradeConfig.getMAX_HOLDINGS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_HeJe0_YrQb0() {
    TradeConfig.setMarketSummaryInterval(300);
    assertEquals(300, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndQuantityRange_WiBR0_tcHw0() {
    float result = TradeConfig.rndQuantity();
    assertTrue(result >= 1.0f && result <= 201.0f, "Result should be between 1.0 and 201.0");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetUpdateQuotePrices_MUvW0_eVBQ0() {
    TradeConfig.setUpdateQuotePrices(true);
    assertTrue(TradeConfig.getUpdateQuotePrices());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndPriceRange_ikIn0_FgRX0() {
    float result = TradeConfig.rndPrice();
    assertTrue(result >= 1.0f && result <= 201.0f, "Price should be between 1.0 and 201.0");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_AZjq0_Gico0() {
    TradeConfig.setPrimIterations(5);
    assertEquals(5, TradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMAX_QUOTES_jRnv0_BgQZ0() {
    TradeConfig.setMAX_QUOTES(10);
    assertEquals(10, TradeConfig.getMAX_QUOTES());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccessMode_tlod0_fid1() {
    int expectedMode = 0; // Assuming default access mode is 0
    int actualMode = TradeConfig.getAccessMode();
    assertEquals(expectedMode, actualMode);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndAddressFormat_ubSa0() {
    String address = TradeConfig.rndAddress();
    assertTrue(address.endsWith(" Oak St."));
    assertTrue(address.matches("\\d+ Oak St."));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_USERS_VaDN0_fid1() {
    int expected = 100; // Assuming MAX_USERS is initialized to 100 somewhere in the TradeConfig class.
    int actual = TradeConfig.getMAX_USERS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMAX_HOLDINGS_gpKO0_fid1() {
    int expected = 100; // Assuming the expected MAX_HOLDINGS is 100
    int actual = TradeConfig.getMAX_HOLDINGS();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_RandomScenario_PHxx4_fid1() {
    boolean newUser = Math.random() < 0.5;
    char result = TradeConfig.getScenarioAction(newUser);
    assertTrue(result == 'b' || result == 's' || result == 'h');
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRndEmailWithColonInUserID_PRCZ0() {
    String userID = "user:123";
    String email = TradeConfig.rndEmail(userID);
    assertFalse(email.contains(":"));
    assertTrue(email.matches("user123@[0-9]+\\.com"));
  }
}