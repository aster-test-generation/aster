/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.jaxrs;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TestJSONObject_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0002_FcUT0() {
    TestJSONObject testObject = new TestJSONObject();
    String expected = null; // Assuming default value of prop0002 is null, adjust as per actual default or set value
    String actual = testObject.getProp0002();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0014_SNDr0() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0014();
    assertNotNull("prop0014 should not be null", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0010_aUKf0() {
    TestJSONObject testObject = new TestJSONObject();
    String expected = null; // Assuming default value of prop0010 is null
    assertEquals(expected, testObject.getProp0010());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0012_SKzx0() {
    TestJSONObject testObject = new TestJSONObject();
    String expected = null; // Assuming default null, adjust based on actual default or test setup
    assertEquals(expected, testObject.getProp0012());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0009_zmmk0() {
    TestJSONObject testObj = new TestJSONObject();
    assertEquals(null, testObj.getProp0009());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_djsd0_pWHx0() {
    TestJSONObject testObject = new TestJSONObject();
    String expectedValue = "testValue";
    testObject.setProp0016(expectedValue);
    assertEquals(expectedValue, testObject.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_KLLi0_kYKg0() {
    TestJSONObject obj = new TestJSONObject();
    String expectedValue = "testValue";
    obj.setProp0016(expectedValue);
    assertEquals(expectedValue, obj.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_XmYZ0_cZEI0() {
    TestJSONObject testObject = new TestJSONObject();
    String expectedValue = "newValue";
    testObject.setProp0016(expectedValue);
    assertEquals(expectedValue, testObject.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_HdDP0_UXCB0() {
    TestJSONObject testObject = new TestJSONObject();
    String expectedValue = "new value";
    testObject.setProp0016(expectedValue);
    assertEquals(expectedValue, testObject.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetProp0016_hxAl0_WcjU0() {
    TestJSONObject obj = new TestJSONObject();
    String expected = "testValue";
    obj.setProp0016(expected);
    assertEquals(expected, obj.getProp0016());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0001_PBLP0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0001();
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0005_dQJx0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0005();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0004_ckBj0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0004();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0003_TlYR0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0003();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0013_HPem0_fid2() {
    TestJSONObject obj = new TestJSONObject();
    String result = obj.getProp0013();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0015_oRuq0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0015();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0016_TVDv0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0016();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0011_QBmd0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0011();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0008_vwaS0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0008();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0007_Bkcs0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0007();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetProp0006_SeSa0_fid2() {
    TestJSONObject testObject = new TestJSONObject();
    String result = testObject.getProp0006();
    assertNull(result);
  }
}