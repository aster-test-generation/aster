/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.json.Json;
import javax.json.JsonBuilderFactory;
import javax.json.JsonReaderFactory;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingJSONPObjectFactory_Test_Passing {
  private PingJSONPObjectFactory pingJSONPObjectFactory;
  private ServletConfig mockServletConfig;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  ServletOutputStream servletOutputStream;
  private static String initTime;
  private static int hitCount;
  private static final JsonReaderFactory jSONReaderFactory = Json.createReaderFactory(null);
  private static final JsonBuilderFactory jSONObjectFactory = Json.createBuilderFactory(null);

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    // Arrange
    // No specific arrangement needed for this test as the method only delegates to doGet.
    // Act
    pingJSONPObjectFactory.doPost(httpServletRequest, httpServletResponse);
    // Assert
    // Verify that doGet is called once with the same request and response objects
    verify(httpServletResponse, times(1)).getOutputStream();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_qbzy0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    factory.doPost(request, response);
    verify(request, atLeastOnce()).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_hesx0() {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    String result = factory.getServletInfo();
    assertEquals("Basic JSON generation and parsing in a servlet", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    pingJSONPObjectFactory.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(servletOutputStream).println(anyString());
    // To capture what is printed to the output stream
    ArgumentCaptor<String> stringCaptor = ArgumentCaptor.forClass(String.class);
    verify(servletOutputStream).println(stringCaptor.capture());
    String output = stringCaptor.getValue();
    assertTrue(output.contains("Ping JSONP"));
    assertTrue(output.contains("Generated JSON:"));
    assertTrue(output.contains("Parsed JSON:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_bmMx0() throws ServletException, IOException {
    PingJSONPObjectFactory factory = new PingJSONPObjectFactory();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outStream = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(outStream);
    factory.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(outStream).println(contains("Ping JSONP"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_1() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    pingJSONPObjectFactory.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(servletOutputStream).println(anyString());
    // To capture what is printed to the output stream
    ArgumentCaptor<String> stringCaptor = ArgumentCaptor.forClass(String.class);
    verify(servletOutputStream).println(stringCaptor.capture());
    String output = stringCaptor.getValue();
    assertTrue(output.contains("Ping JSONP"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_2() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    pingJSONPObjectFactory.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(servletOutputStream).println(anyString());
    // To capture what is printed to the output stream
    ArgumentCaptor<String> stringCaptor = ArgumentCaptor.forClass(String.class);
    verify(servletOutputStream).println(stringCaptor.capture());
    String output = stringCaptor.getValue();
    assertTrue(output.contains("Generated JSON:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_3() throws Exception {
    httpServletResponse = mock(HttpServletResponse.class);
    httpServletRequest = mock(HttpServletRequest.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingJSONPObjectFactory = new PingJSONPObjectFactory();
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    pingJSONPObjectFactory.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(servletOutputStream).println(anyString());
    // To capture what is printed to the output stream
    ArgumentCaptor<String> stringCaptor = ArgumentCaptor.forClass(String.class);
    verify(servletOutputStream).println(stringCaptor.capture());
    String output = stringCaptor.getValue();
    assertTrue(output.contains("Parsed JSON:"));
  }
}