/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_TradeConfig_Test_Failing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForBuy_eehg0() {
    BigDecimal expectedFee = new BigDecimal("10.00"); // Assuming orderFee is24.95
    BigDecimal result = TradeConfig.getOrderFee("BUY");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForSell_CCRc1() {
    BigDecimal expectedFee = new BigDecimal("10.00"); // Assuming orderFee is24.95
    BigDecimal result = TradeConfig.getOrderFee("SELL");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForOther_AiKu2() {
    BigDecimal expectedFee = new BigDecimal("5.00"); // Assuming cashFee is0.0
    BigDecimal result = TradeConfig.getOrderFee("RENT");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_ExistingUserActionNonB_TapE2() {
    boolean newUser = false;
    char result = TradeConfig.getScenarioAction(newUser);
    assertEquals('a', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_XpGi0() {
    String[] expected = {"JSP", "Interface2", "Interface3"};
    assertArrayEquals(expected, TradeConfig.getWebInterfaceNames());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_gOhc0() {
    String[] expected = {"Sync", "Mode2", "Mode3"};
    assertArrayEquals(expected, TradeConfig.getOrderProcessingModeNames());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_RandomUser_yqwD0() {
    TradeConfig.RND_USER = true;
    String expected = TradeConfig.rndUserID(); // Assuming rndUserID() is deterministic or mocked
    String actual = TradeConfig.getUserID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUserID_NextUser_MOrv1() {
    TradeConfig.RND_USER = false;
    String expected = TradeConfig.nextUserID(); // Assuming nextUserID() is deterministic or mocked
    String actual = TradeConfig.getUserID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCount_RSHC0() {
    int expected = 7; // Assuming default or reset state scenario count is7
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPageReturnsCorrectPageContent_TTHD0_aOQs0() {
    String expectedContent = "Expected Page Content";
    String actualContent = TradeConfig.getPage(2); // Adjusted index to be within bounds
    assertEquals(expectedContent, actualContent);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRunTimeModeNames_TnuC0_fid1() {
    String[] expected = {"MODE1", "MODE2", "MODE3"}; // Example expected values
    String[] actual = TradeConfig.getRunTimeModeNames();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_YkpW0_fid1() {
    int expected = 0; // Assuming default or a set value for primIterations
    int actual = TradeConfig.getPrimIterations();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxQuotes_zRJl0_fid1() {
    int expected = 100; // Assuming MAX_QUOTES is set to 100
    int actual = TradeConfig.getMAX_QUOTES();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLongRunDefault_zWtN0_fid1() {
    assertFalse(TradeConfig.getLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForBuy_eehg0_fid1() {
    BigDecimal expectedFee = new BigDecimal("10.00"); // Assuming orderFee is 10.00
    BigDecimal result = TradeConfig.getOrderFee("BUY");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForSell_CCRc1_fid1() {
    BigDecimal expectedFee = new BigDecimal("10.00"); // Assuming orderFee is 10.00
    BigDecimal result = TradeConfig.getOrderFee("SELL");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFeeForOther_AiKu2_fid1() {
    BigDecimal expectedFee = new BigDecimal("5.00"); // Assuming cashFee is 5.00
    BigDecimal result = TradeConfig.getOrderFee("RENT");
    assertEquals(expectedFee, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_NewUser_PlIy0_fid1() {
    boolean newUser = true;
    char result = TradeConfig.getScenarioAction(newUser);
    assertTrue(result == 'b' || result == 's' || result == 'h');
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioAction_ExistingUserActionNonB_TapE2_fid1() {
    boolean newUser = false;
    char result = TradeConfig.getScenarioAction(newUser);
    assertEquals('h', result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceNames_XpGi0_fid1() {
    String[] expected = {"Interface1", "Interface2", "Interface3"};
    assertArrayEquals(expected, TradeConfig.getWebInterfaceNames());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetUpdateQuotePrices_ELWk0_fid1() {
    boolean expected = false; // Assuming default or expected state of updateQuotePrices
    boolean actual = TradeConfig.getUpdateQuotePrices();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPublishQuotePriceChange_EppH0_fid1() {
    boolean expected = false; // Assuming default or previously set value
    boolean actual = TradeConfig.getPublishQuotePriceChange();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeNames_gOhc0_fid1() {
    String[] expected = {"Mode1", "Mode2", "Mode3"};
    assertArrayEquals(expected, TradeConfig.getOrderProcessingModeNames());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetScenarioCount_RSHC0_fid1() {
    int expected = 0; // Assuming default or reset state scenario count is 0
    int actual = TradeConfig.getScenarioCount();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPageReturnsCorrectPageContent_TTHD0_aOQs0_fid3() {
    String expectedContent = "Expected Page Content";
    String actualContent = TradeConfig.getPage(5);
    assertEquals(expectedContent, actualContent);
  }
}