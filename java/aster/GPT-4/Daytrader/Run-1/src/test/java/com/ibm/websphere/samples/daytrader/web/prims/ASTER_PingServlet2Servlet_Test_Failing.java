/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Servlet_Test_Failing {
  PingServlet2Servlet pingServlet2Servlet;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  private static int hitCount = 0;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingServlet2Servlet = new PingServlet2Servlet();
    // Setup
    doNothing().when(httpServletResponse).flushBuffer();
    // Execute
    pingServlet2Servlet.doPost(httpServletRequest, httpServletResponse);
    // Verify
    verify(httpServletResponse, never()).flushBuffer(); // Since doPost delegates to doGet, and doGet is not implemented, no interaction with the response's buffer should occur.
    verify(httpServletRequest, times(1)).setAttribute(anyString(), any()); // Check if any attribute was set on the request, which should not happen as doGet is not implemented.
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_FGDo0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServlet2Servlet servlet = new PingServlet2Servlet();
    servlet.doPost(req, res);
    verify(servlet).doGet(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_QBqk0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServlet2Servlet servlet = new PingServlet2Servlet();
    servlet.doGet(req, res);
    verify(req).setAttribute(eq("ab"), any(PingBean.class));
    verify(req).getRequestDispatcher("/servlet/PingServlet2ServletRcv").forward(req, res);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_FGDo0_fid2() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServlet2Servlet servlet = new PingServlet2Servlet();
    servlet.doGet(req, res); // Directly call doGet to simulate doPost calling doGet
    verify(req).setAttribute(eq("ab"), any(PingBean.class));
    verify(res, never()).sendError(anyInt(), anyString());
  }
}