/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Failing {
  private TradeConfigJSF tradeConfigJSF;
  private HttpSession httpSession;
  private ExternalContext externalContext;
  private RunStatsDataBean runStatsDataBean;
  private TradeConfig tradeConfig;
  private ExternalContext context;
  private String result = "";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeMode_JDJI0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = "expectedRuntimeMode"; // Assuming 'Full EJB3' is the expected runtime mode
    assertEquals(expected, tradeConfig.getRuntimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_QNdy0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = new String[]{"Sync", "Mode2", "Mode3"};
    assertArrayEquals(expected, tradeConfig.getOrderProcessingModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetResult_SWkO0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null;
    String actual = tradeConfig.getResult();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeModeList_ygqr0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = null; // Assuming no initialization provided in the snippet
    String[] actual = tradeConfig.getRuntimeModeList();
    assertArrayEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_gdOX0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 0; // Assuming default value is 0 since not initialized in the snippet provided
    assertEquals(expected, tradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRuntimeMode_JDJI0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = "expectedRuntimeMode"; // Assuming 'expectedRuntimeMode' is the expected runtime mode
    assertEquals(expected, tradeConfig.getRuntimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_qunK0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 0; // Assuming default value of primIterations is 0
    assertEquals(expected, tradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxUsers_lBiX0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expectedMaxUsers = 0; // Assuming default or initial value
    assertEquals(expectedMaxUsers, tradeConfig.getMaxUsers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsPublishQuotePriceChange_JEul0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    boolean expected = false; // Assuming default or set to false
    assertEquals(expected, tradeConfig.isPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingModeList_QNdy0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expected = new String[]{"Mode1", "Mode2", "Mode3"};
    assertArrayEquals(expected, tradeConfig.getOrderProcessingModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxQuotes_ejQb0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 0; // Assuming default value of maxQuotes is 0
    assertEquals(expected, tradeConfig.getMaxQuotes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterface_Vhsg0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null; // Assuming default null if not set
    assertEquals(expected, tradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_NosT0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null; // Assuming default is null, adjust based on actual default value or setup
    String actual = tradeConfig.getOrderProcessingMode();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_iyGD0_fid1() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expectedFrequency = 0; // Assuming default or a preset test value
    assertEquals(expectedFrequency, tradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithValidOrderProcessingMode_VfmU0_zpGz0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setOrderProcessingMode("ValidMode");
    tradeConfigJSF.setOrderProcessingModeList(new String[]{"ValidMode"}); // Assuming a setter method exists
    tradeConfigJSF.updateConfig();
    assertEquals("ValidMode", TradeConfig.getOrderProcessingModeNames()[TradeConfig.getOrderProcessingMode()]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithValidWebInterface_lcKM2_kgwp0_fid1() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("ValidInterface");
    tradeConfigJSF.setWebInterfaceList(new String[]{"ValidInterface"});
    tradeConfigJSF.updateConfig();
    assertEquals("ValidInterface", TradeConfig.getWebInterfaceNames()[TradeConfig.getWebInterface()]);
  }
}