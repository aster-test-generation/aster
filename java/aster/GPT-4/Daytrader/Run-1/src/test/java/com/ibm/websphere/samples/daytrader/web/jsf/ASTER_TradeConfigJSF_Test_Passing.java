/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.util.concurrent.TimeUnit;
import javax.faces.context.ExternalContext;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeConfigJSF_Test_Passing {
  private TradeConfigJSF tradeConfigJSF;
  private HttpSession httpSession;
  private ExternalContext externalContext;
  private RunStatsDataBean runStatsDataBean;
  private TradeConfig tradeConfig;
  private ExternalContext context;
  private String result = "";

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterfaceList_Ntfr0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] result = tradeConfig.getWebInterfaceList();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetResult_SWkO0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null;
    String actual = tradeConfig.getResult();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummaryInterval_gdOX0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 15; // Assuming default value is15 since not initialized in the snippet provided
    assertEquals(expected, tradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrimIterations_UkKe0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setPrimIterations(5);
    assertEquals(5, tradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrimIterations_qunK0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 1; // Assuming default value of primIterations is1
    assertEquals(expected, tradeConfig.getPrimIterations());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxUsers_lBiX0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expectedMaxUsers = 15000; // Assuming default or initial value
    assertEquals(expectedMaxUsers, tradeConfig.getMaxUsers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsLongRun_eRfZ0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    boolean result = tradeConfig.isLongRun();
    assertEquals(true, result); // Assuming the expected value should be true for this test case
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsPublishQuotePriceChange_JEul0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    boolean expected = true; // Assuming default or set totrue
    assertEquals(expected, tradeConfig.isPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMaxQuotes_ejQb0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expected = 10000; // Assuming default value of maxQuotes is10000
    assertEquals(expected, tradeConfig.getMaxQuotes());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterface_WypL0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expectedInterface = "WebInterface1";
    tradeConfig.setWebInterface(expectedInterface);
    assertEquals(expectedInterface, tradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLongRun_wLmM0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setLongRun(true);
    assertTrue(tradeConfig.isLongRun());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetWebInterface_Vhsg0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null; // Assuming default null if not set
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPublishQuotePriceChange_WDwV0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setPublishQuotePriceChange(true);
    assertTrue(tradeConfig.isPublishQuotePriceChange());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderProcessingMode_NosT0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = null; // Assuming default is null, adjust based on actual default value or setup
    String actual = tradeConfig.getOrderProcessingMode();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetListQuotePriceChangeFrequency_oVnj0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expectedFrequency = 10;
    tradeConfig.setListQuotePriceChangeFrequency(expectedFrequency);
    assertEquals(expectedFrequency, tradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeModeList_fObL0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expectedRuntimeModes = {"Development", "Production", "Test"};
    tradeConfig.setRuntimeModeList(expectedRuntimeModes);
    assertArrayEquals(expectedRuntimeModes, tradeConfig.getRuntimeModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testIsDisplayOrderAlerts_Djkx0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    boolean result = tradeConfig.isDisplayOrderAlerts();
    assertEquals(true, result); // Assuming the expected default is true for this test case
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetListQuotePriceChangeFrequency_iyGD0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    int expectedFrequency = 100; // Assuming default or a preset test value
    assertEquals(expectedFrequency, tradeConfig.getListQuotePriceChangeFrequency());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetRuntimeMode_jMuf0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expectedRuntimeMode = "production";
    tradeConfig.setRuntimeMode(expectedRuntimeMode);
    assertEquals(expectedRuntimeMode, tradeConfig.getRuntimeMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPopulateDatabase_OQeB0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    String result = tradeConfigJSF.populateDatabase();
    assertEquals("database", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingMode_ONSS0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expectedMode = "AUTOMATIC";
    tradeConfig.setOrderProcessingMode(expectedMode);
    assertEquals(expectedMode, tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetWebInterfaceList_ajEq0_DQGL0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expectedList = {"Interface1", "Interface2", "Interface3"};
    tradeConfig.setWebInterfaceList(expectedList);
    assertArrayEquals(expectedList, tradeConfig.getWebInterfaceList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderProcessingModeList_rdDJ0_iaSR0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String[] expectedModes = {"Manual", "Automatic"};
    tradeConfig.setOrderProcessingModeList(expectedModes);
    assertArrayEquals(expectedModes, tradeConfig.getOrderProcessingModeList());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetResult_FQwl0_wIMq0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    String expected = "Success";
    tradeConfig.setOrderProcessingMode(expected);
    assertEquals(expected, tradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxUsers_rWwd0_uIOl0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setMaxUsers(100);
    assertEquals(100, tradeConfig.getMaxUsers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetDisplayOrderAlerts_zLLm0_uojp0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setDisplayOrderAlerts(true);
    assertTrue(tradeConfig.isDisplayOrderAlerts());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketSummaryInterval_TTmz0_cbdV0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setMarketSummaryInterval(5);
    assertEquals(5, tradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithValidOrderProcessingMode_VfmU0_zpGz0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setOrderProcessingMode("ValidMode");
    tradeConfigJSF.setOrderProcessingModeList(new String[]{"ValidMode"}); // Assuming a setter method exists
    tradeConfigJSF.updateConfig();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithInvalidOrderProcessingMode_zwfu1_SrBp0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setOrderProcessingMode("InvalidMode");
    tradeConfigJSF.setOrderProcessingModeList(new String[]{"ValidMode"});
    int initialMode = TradeConfig.getOrderProcessingMode();
    tradeConfigJSF.updateConfig();
    assertEquals(initialMode, TradeConfig.getOrderProcessingMode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithValidWebInterface_lcKM2_kgwp0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("JSP");
    tradeConfigJSF.setWebInterfaceList(new String[]{"JSP"});
    tradeConfigJSF.updateConfig();
    assertEquals("JSP", TradeConfig.getWebInterfaceNames()[TradeConfig.getWebInterface()]);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithInvalidWebInterface_ZgBP3_SrCm0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setWebInterface("InvalidInterface");
    tradeConfigJSF.setWebInterfaceList(new String[]{"ValidInterface"});
    int initialInterface = TradeConfig.getWebInterface();
    tradeConfigJSF.updateConfig();
    assertEquals(initialInterface, TradeConfig.getWebInterface());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithMaxUsers_sSWZ4_DTZz0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setMaxUsers(1000);
    tradeConfigJSF.updateConfig();
    assertEquals(1000, TradeConfig.getMAX_USERS());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateConfigWithMarketSummaryInterval_djrP6_kNeg0() {
    TradeConfigJSF tradeConfigJSF = new TradeConfigJSF();
    tradeConfigJSF.setMarketSummaryInterval(15);
    tradeConfigJSF.updateConfig();
    assertEquals(15, TradeConfig.getMarketSummaryInterval());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMaxQuotes_BWGz0_mfgk0() {
    TradeConfigJSF tradeConfig = new TradeConfigJSF();
    tradeConfig.setmaxQuotes(100);
    assertEquals(100, tradeConfig.getMaxQuotes());
  }
}