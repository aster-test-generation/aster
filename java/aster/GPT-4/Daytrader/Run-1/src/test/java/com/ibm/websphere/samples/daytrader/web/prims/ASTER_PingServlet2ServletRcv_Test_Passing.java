/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2ServletRcv_Test_Passing {
  private static String initTime = null;
  @InjectMocks
  private PingServlet2ServletRcv pingservlet2servletrcv;
  @Mock
  private ServletConfig servletConfig;
  PingServlet2ServletRcv pingServlet2ServletRcv;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  HttpServlet httpServlet;
  HttpServletRequest request;
  HttpServletResponse response;
  PingBean pingBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit() throws Exception {
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    pingservlet2servletrcv.init(servletConfig);
    // Access the private static field 'initTime'
    Field field = PingServlet2ServletRcv.class.getDeclaredField("initTime");
    field.setAccessible(true);
    String initTime = (String) field.get(null);
    assertNotNull(initTime, "initTime should not be null after initialization");
    assertFalse(initTime.isEmpty(), "initTime should not be empty after initialization");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_jnWh0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServlet2ServletRcv servlet = new PingServlet2ServletRcv();
    servlet.doPost(request, response);
    verify(servlet, times(1)).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_1() throws Exception {
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    pingservlet2servletrcv.init(servletConfig);
    // Access the private static field 'initTime'
    Field field = PingServlet2ServletRcv.class.getDeclaredField("initTime");
    field.setAccessible(true);
    String initTime = (String) field.get(null);
    assertNotNull(initTime, "initTime should not be null after initialization");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_2() throws Exception {
    pingservlet2servletrcv = new PingServlet2ServletRcv();
    pingservlet2servletrcv.init(servletConfig);
    // Access the private static field 'initTime'
    Field field = PingServlet2ServletRcv.class.getDeclaredField("initTime");
    field.setAccessible(true);
    String initTime = (String) field.get(null);
    assertFalse(initTime.isEmpty(), "initTime should not be empty after initialization");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_LwfR0() throws Exception {
    HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
    PingServlet2ServletRcv pingServlet2ServletRcv = new PingServlet2ServletRcv();
    pingServlet2ServletRcv.doPost(httpServletRequest, httpServletResponse);
    verify(httpServletResponse, never()).sendError(anyInt());
  }
}