/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.beans;

import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_MarketSummaryDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithEmptyCollections_XXmW0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("15000"), new BigDecimal("14500"), 5000000.0, new ArrayList<>(), new ArrayList<>());
    String expected = "\n\tMarket Summary at: " + marketSummary.getSummaryDate() + "\n\t\t        TSIA:" + marketSummary.getTSIA() + "\n\t\t    openTSIA:" + marketSummary.getOpenTSIA() + "\n\t\t        gain:" + marketSummary.getGainPercent() + "\n\t\t      volume:" + marketSummary.getVolume() + "\n\t\t   Current Top Gainers:\n\t\t   Current Top Losers:";
    assertEquals(expected, marketSummary.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToStringWithNullGainersAndLosers_mWsv1() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("15000"), new BigDecimal("14500"), 5000000.0, null, null);
    String expected = "\n\tMarket Summary at: " + marketSummary.getSummaryDate() + "\n\t\t        TSIA:" + marketSummary.getTSIA() + "\n\t\t    openTSIA:" + marketSummary.getOpenTSIA() + "\n\t\t        gain:" + marketSummary.getGainPercent() + "\n\t\t      volume:" + marketSummary.getVolume();
    assertEquals(expected, marketSummary.toString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceNotNull_Mird0() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertNotNull(result);
    assertNotNull(result.getTopGainers());
    assertNotNull(result.getTopLosers());
    assertFalse(result.getTopGainers().isEmpty());
    assertFalse(result.getTopLosers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceValues_uTYT1() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertTrue(result.getTSIA().compareTo(BigDecimal.ZERO) > 0);
    assertTrue(result.getOpenTSIA().compareTo(BigDecimal.ZERO) > 0);
    assertTrue(result.getVolume() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenTSIA_Hvap0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean();
    BigDecimal expected = new BigDecimal("123.45");
    marketSummary.setOpenTSIA(expected);
    assertEquals(expected, marketSummary.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTSIA_lPqB0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean();
    BigDecimal expectedTSIA = new BigDecimal("12345.678");
    marketSummary.setTSIA(expectedTSIA);
    assertEquals(expectedTSIA, marketSummary.getTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSummaryDate_WHCv0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean();
    Date expectedDate = new Date();
    marketSummary.setSummaryDate(expectedDate);
    Date actualDate = marketSummary.getSummaryDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSummaryDate_pgjy0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean();
    Date expectedDate = new Date();
    marketSummary.setSummaryDate(expectedDate);
    assertEquals(expectedDate, marketSummary.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTSIA_aadA0() {
    BigDecimal expectedTSIA = new BigDecimal("12345.67");
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(expectedTSIA, BigDecimal.ZERO, 0.0, null, null);
    BigDecimal actualTSIA = marketSummaryDataBean.getTSIA();
    assertEquals(expectedTSIA, actualTSIA);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolume_PPNk0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("10000"), new BigDecimal("9500"), 500000.0, new ArrayList<>(), new ArrayList<>());
    assertEquals(500000.0, marketSummary.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetTopLosers_SZqH0() {
    Collection<QuoteDataBean> expectedLosers = Arrays.asList(new QuoteDataBean(), new QuoteDataBean());
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("10000"), new BigDecimal("9500"), 5000000.0, Arrays.asList(new QuoteDataBean()), expectedLosers);
    Collection<QuoteDataBean> actualLosers = marketSummary.getTopLosers();
    assertEquals(expectedLosers, actualLosers);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithEmptyCollections_CPvU0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("10000"), new BigDecimal("9900"), 5000, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertTrue(result.contains("TSIA:10000") && result.contains("openTSIA:9900") && result.contains("volume:5000"));
    assertTrue(result.contains("Current Top Gainers:") && result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullGainersAndLosers_CVwS1() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("12000"), new BigDecimal("11500"), 7500, null, null);
    String result = marketSummary.toHTML();
    assertFalse(result.contains("Current Top Gainers:"));
    assertFalse(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceNotNull_Mird0_1() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceNotNull_Mird0_2() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertNotNull(result.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceNotNull_Mird0_3() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertNotNull(result.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceNotNull_Mird0_4() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertFalse(result.getTopGainers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceNotNull_Mird0_5() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertFalse(result.getTopLosers().isEmpty());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceValues_uTYT1_1() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertTrue(result.getTSIA().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceValues_uTYT1_2() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertTrue(result.getOpenTSIA().compareTo(BigDecimal.ZERO) > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstanceValues_uTYT1_3() {
    MarketSummaryDataBean result = MarketSummaryDataBean.getRandomInstance();
    assertTrue(result.getVolume() > 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithEmptyCollections_CPvU0_1() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("10000"), new BigDecimal("9900"), 5000, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertTrue(result.contains("TSIA:10000") && result.contains("openTSIA:9900") && result.contains("volume:5000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithEmptyCollections_CPvU0_2() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("10000"), new BigDecimal("9900"), 5000, new ArrayList<>(), new ArrayList<>());
    String result = marketSummary.toHTML();
    assertTrue(result.contains("Current Top Gainers:") && result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullGainersAndLosers_CVwS1_1() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("12000"), new BigDecimal("11500"), 7500, null, null);
    String result = marketSummary.toHTML();
    assertFalse(result.contains("Current Top Gainers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTMLWithNullGainersAndLosers_CVwS1_2() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean(new BigDecimal("12000"), new BigDecimal("11500"), 7500, null, null);
    String result = marketSummary.toHTML();
    assertFalse(result.contains("Current Top Losers:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolume_znMu0_Jdca0() {
    MarketSummaryDataBean marketSummary = new MarketSummaryDataBean();
    double expectedVolume = 15000.0;
    marketSummary.setVolume(expectedVolume);
    assertEquals(expectedVolume, marketSummary.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenTSIA_wRQV0_fid2() {
    BigDecimal expectedOpenTSIA = new BigDecimal("1234.56");
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("1000"), expectedOpenTSIA, 0.0, null, null);
    BigDecimal result = marketSummaryDataBean.getOpenTSIA();
    assertEquals(expectedOpenTSIA, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_lVou0_fid2() {
    MarketSummaryDataBean marketSummaryDataBean = new MarketSummaryDataBean(new BigDecimal("12345.67"), new BigDecimal("12345.67"), 1000000.0, new ArrayList<>(), new ArrayList<>());
    assertDoesNotThrow(() -> marketSummaryDataBean.print());
  }
}