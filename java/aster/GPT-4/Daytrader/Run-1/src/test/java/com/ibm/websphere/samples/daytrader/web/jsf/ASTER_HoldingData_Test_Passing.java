/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_HoldingData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_Uhoi0() {
    HoldingData holdingData = new HoldingData();
    assertEquals(0.0, holdingData.getQuantity(), 0.001);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuoteID_JOHT0() {
    HoldingData holdingData = new HoldingData();
    String expected = null; // Assuming default value of quoteID is null if not set
    assertEquals(expected, holdingData.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchasePrice_GcZO0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expectedPrice = new BigDecimal("100.00");
    holdingData.setPurchasePrice(expectedPrice);
    assertEquals(expectedPrice, holdingData.getPurchasePrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPurchaseDate_wAeH0() {
    HoldingData holdingData = new HoldingData();
    Date expectedDate = null; // Assuming default constructor does not set a date
    assertEquals(expectedDate, holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetGainHTML_Dtex0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal gain = holdingData.getPurchasePrice(); // Assuming getPurchasePrice() is correctly returning a BigDecimal
    if (gain == null) {
      gain = BigDecimal.ZERO; // Setting default value to avoid NullPointerException
    }
    String result = gain.toString() + " HTML"; // Assuming getGainHTML() should return this format
    assertEquals("0 HTML", result); // Adjusted expected value to match default gain
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetBasis_airu0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expectedBasis = new BigDecimal("100.00");
    holdingData.setBasis(expectedBasis);
    assertEquals(expectedBasis, holdingData.getBasis());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPurchaseDate_sAQZ0() {
    HoldingData holdingData = new HoldingData();
    Date expectedDate = new Date();
    holdingData.setPurchaseDate(expectedDate);
    assertEquals(expectedDate, holdingData.getPurchaseDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketValue_NXmF0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expected = new BigDecimal("100.00");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHoldingID_gdUv0() {
    HoldingData holdingData = new HoldingData();
    Integer expected = null; // Assuming default null since no setter or initialization shown
    Integer actual = holdingData.getHoldingID();
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetGain_xBiQ0_Dobt0() {
    HoldingData hd = new HoldingData();
    BigDecimal expectedGain = new BigDecimal("100.00");
    hd.setGain(expectedGain);
    assertEquals(expectedGain, hd.getGain());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuoteID_FqhC0_MZqV0() {
    HoldingData hd = new HoldingData();
    String expectedQuoteID = "Q12345";
    hd.setQuoteID(expectedQuoteID);
    assertEquals(expectedQuoteID, hd.getQuoteID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_ilsn0_Inew0() {
    HoldingData holdingData = new HoldingData();
    double expectedQuantity = 100.0;
    holdingData.setQuantity(expectedQuantity);
    assertEquals(expectedQuantity, holdingData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetMarketValue_ymWY0_JUMy0() {
    HoldingData holdingData = new HoldingData();
    BigDecimal expectedValue = new BigDecimal("1000");
    holdingData.setMarketValue(expectedValue);
    assertEquals(expectedValue, holdingData.getMarketValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHoldingID_EIKz0_gzVB0() {
    HoldingData hd = new HoldingData();
    Integer expectedID = 123;
    hd.setHoldingID(expectedID);
    assertEquals(expectedID, hd.getHoldingID());
  }
}