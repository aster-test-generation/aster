/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TradeAppServlet_Test_Failing {
  private TradeAppServlet tradeAppServlet;
  private ServletConfig servletConfig;
  @Mock
  private HttpServletResponse httpservletresponse;
  @Mock
  private HttpServletRequest httpservletrequest;
  private HttpServletResponse httpServletResponse;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws Exception {
    // Setup is handled by the annotations and MockitoExtension
    // Execute the doGet method
    tradeAppServlet.doGet(httpservletrequest, httpservletresponse);
    // Verify that performTask was called with the correct parameters
    verify(tradeAppServlet).performTask(httpservletrequest, httpservletresponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_uAxD0() throws ServletException, IOException {
    javax.servlet.http.HttpServletRequest request = mock(javax.servlet.http.HttpServletRequest.class);
    javax.servlet.http.HttpServletResponse response = mock(javax.servlet.http.HttpServletResponse.class);
    TradeAppServlet servlet = new TradeAppServlet();
    servlet.doGet(request, response);
    verify(request, atLeastOnce()).getParameter(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_iiij0() throws ServletException, IOException {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    TradeAppServlet servlet = new TradeAppServlet();
    servlet.doPost(request, response);
    verify(request, atLeast(1)).getParameter(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_qFSO0() {
    TradeAppServlet servlet = new TradeAppServlet();
    String result = servlet.getServletInfo();
    assertEquals("TradeAppServlet provides the standard web interface to Trade", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_EJxR0() throws ServletException {
    servletConfig = mock(ServletConfig.class);
    tradeAppServlet = new TradeAppServlet();
    String paramName = "someParameter";
    String paramValue = "someValue";
    Enumeration<String> parameterNames = Collections.enumeration(Arrays.asList(paramName));
    when(servletConfig.getInitParameterNames()).thenReturn(parameterNames);
    when(servletConfig.getInitParameter(paramName)).thenReturn(paramValue);
    tradeAppServlet.init(servletConfig);
    verify(servletConfig).getInitParameterNames();
    verify(servletConfig).getInitParameter(paramName);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithLoginAction_JYzl1_ktHH0() throws Exception {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("user1");
    when(req.getParameter("passwd")).thenReturn("pass1");
    when(req.getServletContext()).thenReturn(ctx);
    when(servlet.getServletConfig()).thenReturn(config);
    when(config.getServletContext()).thenReturn(ctx);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(req).getParameter("uid");
    verify(req).getParameter("passwd");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithRegisterAction_jRTY2_deSi0() throws Exception {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    when(req.getParameter("action")).thenReturn("register");
    when(req.getParameter("user id")).thenReturn("newUser");
    when(req.getParameter("passwd")).thenReturn("newPass");
    when(req.getParameter("confirm passwd")).thenReturn("newPass");
    when(req.getParameter("Full Name")).thenReturn("New User");
    when(req.getParameter("Credit Card Number")).thenReturn("1234567890123456");
    when(req.getParameter("money")).thenReturn("1000");
    when(req.getParameter("email")).thenReturn("newuser@example.com");
    when(req.getParameter("snail mail")).thenReturn("123 New St, New City");
    when(config.getServletContext()).thenReturn(ctx);
    when(servlet.getServletConfig()).thenReturn(config);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(req, times(8)).getParameter(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithSellAction_CjQF5_VTco0() throws Exception {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("sell");
    when(req.getParameter("holdingID")).thenReturn("1001");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(servlet.getServletConfig()).thenReturn(config);
    when(config.getServletContext()).thenReturn(ctx);
    when(req.getServletContext()).thenReturn(ctx);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(req).getParameter("holdingID");
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithPortfolioAction_ZMZh6_zznE0() throws Exception {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("portfolio");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(config.getServletContext()).thenReturn(ctx);
    when(servlet.getServletConfig()).thenReturn(config);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithLogoutAction_LTnv7_FhTk0() throws Exception {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("logout");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(req.getServletContext()).thenReturn(ctx);
    when(config.getServletContext()).thenReturn(ctx);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithHomeAction_rPDY8_xzSJ0() throws Exception {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("home");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(req.getServletContext()).thenReturn(ctx);
    when(config.getServletContext()).thenReturn(ctx);
    when(servlet.getServletConfig()).thenReturn(config);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithAccountAction_ccsv9_CrBP0() throws Exception {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("account");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(config.getServletContext()).thenReturn(ctx);
    when(req.getServletContext()).thenReturn(ctx);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithUpdateProfileAction_ZLVB10_ZDsh0() throws Exception {
    TradeAppServlet servlet = new TradeAppServlet();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("update_profile");
    when(req.getParameter("password")).thenReturn("newPass");
    when(req.getParameter("cpassword")).thenReturn("newPass");
    when(req.getParameter("fullname")).thenReturn("Updated User");
    when(req.getParameter("address")).thenReturn("123 Updated St, Updated City");
    when(req.getParameter("creditcard")).thenReturn("9876543210987654");
    when(req.getParameter("email")).thenReturn("updateduser@example.com");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(servlet.getServletConfig()).thenReturn(config);
    when(config.getServletContext()).thenReturn(ctx);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(req, times(6)).getParameter(anyString());
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithParameters_vshv1_zvpI0() {
    try {
      ServletConfig mockConfig = Mockito.mock(ServletConfig.class);
      HashMap<String, String> parameters = new HashMap<>();
      parameters.put("param1", "value1");
      parameters.put("param2", "value2");
      Mockito.when(mockConfig.getInitParameterNames()).thenReturn(Collections.enumeration(parameters.keySet()));
      Mockito.when(mockConfig.getInitParameter("param1")).thenReturn("value1");
      Mockito.when(mockConfig.getInitParameter("param2")).thenReturn("value2");
      TradeAppServlet servlet = new TradeAppServlet();
      servlet.init(mockConfig);
      Mockito.verify(mockConfig, Mockito.times(1)).getInitParameter("param1");
      Mockito.verify(mockConfig, Mockito.times(1)).getInitParameter("param2");
      System.out.println("Parameters set in TradeConfig: param1=value1, param2=value2");
    } catch (ServletException e) {
      e.printStackTrace();
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_qFSO0_fid2() {
    TradeAppServlet servlet = new TradeAppServlet();
    String result = servlet.getServletInfo();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithLoginAction_JYzl1_ktHH0_fid2() throws Exception {
    TradeAppServlet servlet = mock(TradeAppServlet.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    when(req.getParameter("action")).thenReturn("login");
    when(req.getParameter("uid")).thenReturn("user1");
    when(req.getParameter("passwd")).thenReturn("pass1");
    when(req.getServletContext()).thenReturn(ctx);
    when(servlet.getServletConfig()).thenReturn(config);
    when(config.getServletContext()).thenReturn(ctx);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(req).getParameter("uid");
    verify(req).getParameter("passwd");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithRegisterAction_jRTY2_deSi0_fid2() throws Exception {
    TradeAppServlet servlet = mock(TradeAppServlet.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    when(req.getParameter("action")).thenReturn("register");
    when(req.getParameter("user id")).thenReturn("newUser");
    when(req.getParameter("passwd")).thenReturn("newPass");
    when(req.getParameter("confirm passwd")).thenReturn("newPass");
    when(req.getParameter("Full Name")).thenReturn("New User");
    when(req.getParameter("Credit Card Number")).thenReturn("1234567890123456");
    when(req.getParameter("money")).thenReturn("1000");
    when(req.getParameter("email")).thenReturn("newuser@example.com");
    when(req.getParameter("snail mail")).thenReturn("123 New St, New City");
    when(config.getServletContext()).thenReturn(ctx);
    when(servlet.getServletConfig()).thenReturn(config);
    doNothing().when(servlet).performTask(req, resp);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(req, times(8)).getParameter(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithSellAction_CjQF5_VTco0_fid2() throws Exception {
    TradeAppServlet servlet = mock(TradeAppServlet.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("sell");
    when(req.getParameter("holdingID")).thenReturn("1001");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(servlet.getServletConfig()).thenReturn(config);
    when(config.getServletContext()).thenReturn(ctx);
    when(req.getServletContext()).thenReturn(ctx);
    doNothing().when(servlet).performTask(req, resp);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(req).getParameter("holdingID");
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithPortfolioAction_ZMZh6_zznE0_fid2() throws Exception {
    TradeAppServlet servlet = mock(TradeAppServlet.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("portfolio");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(config.getServletContext()).thenReturn(ctx);
    when(servlet.getServletConfig()).thenReturn(config);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithLogoutAction_LTnv7_FhTk0_fid2() throws Exception {
    // Assuming TradeAppServlet is now accessible or properly mocked
    TradeAppServlet servlet = mock(TradeAppServlet.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("logout");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(req.getServletContext()).thenReturn(ctx);
    when(config.getServletContext()).thenReturn(ctx);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithHomeAction_rPDY8_xzSJ0_fid2() throws Exception {
    TradeAppServlet servlet = mock(TradeAppServlet.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("home");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(req.getServletContext()).thenReturn(ctx);
    when(config.getServletContext()).thenReturn(ctx);
    when(servlet.getServletConfig()).thenReturn(config);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithAccountAction_ccsv9_CrBP0_fid2() throws Exception {
    // Assuming TradeAppServlet is now accessible or correctly mocked
    TradeAppServlet servlet = mock(TradeAppServlet.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("account");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(config.getServletContext()).thenReturn(ctx);
    when(req.getServletContext()).thenReturn(ctx);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPerformTaskWithUpdateProfileAction_ZLVB10_ZDsh0_fid2() throws Exception {
    TradeAppServlet servlet = mock(TradeAppServlet.class);
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse resp = mock(HttpServletResponse.class);
    ServletContext ctx = mock(ServletContext.class);
    ServletConfig config = mock(ServletConfig.class);
    HttpSession session = mock(HttpSession.class);
    when(req.getParameter("action")).thenReturn("update_profile");
    when(req.getParameter("password")).thenReturn("newPass");
    when(req.getParameter("cpassword")).thenReturn("newPass");
    when(req.getParameter("fullname")).thenReturn("Updated User");
    when(req.getParameter("address")).thenReturn("123 Updated St, Updated City");
    when(req.getParameter("creditcard")).thenReturn("9876543210987654");
    when(req.getParameter("email")).thenReturn("updateduser@example.com");
    when(req.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user1");
    when(servlet.getServletConfig()).thenReturn(config);
    when(config.getServletContext()).thenReturn(ctx);
    doNothing().when(servlet).performTask(req, resp);
    servlet.performTask(req, resp);
    verify(resp).setContentType("text/html");
    verify(req, times(6)).getParameter(anyString());
    verify(session).getAttribute("uidBean");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithParameters_vshv1_zvpI0_fid2() {
    try {
      ServletConfig mockConfig = Mockito.mock(ServletConfig.class);
      HashMap<String, String> parameters = new HashMap<>();
      parameters.put("param1", "value1");
      parameters.put("param2", "value2");
      Mockito.when(mockConfig.getInitParameterNames()).thenReturn(Collections.enumeration(parameters.keySet()));
      Mockito.when(mockConfig.getInitParameter("param1")).thenReturn("value1");
      Mockito.when(mockConfig.getInitParameter("param2")).thenReturn("value2");
      // Assuming TradeAppServlet is now accessible or properly mocked
      TradeAppServlet servlet = Mockito.mock(TradeAppServlet.class);
      servlet.init(mockConfig);
      Mockito.verify(mockConfig, Mockito.times(1)).getInitParameter("param1");
      Mockito.verify(mockConfig, Mockito.times(1)).getInitParameter("param2");
      System.out.println("Parameters set in TradeConfig: param1=value1, param2=value2");
    } catch (ServletException e) {
      e.printStackTrace();
    }
  }
}