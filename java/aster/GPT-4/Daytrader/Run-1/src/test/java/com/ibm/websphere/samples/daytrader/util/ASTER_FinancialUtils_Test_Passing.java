/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.util;

import java.math.BigDecimal;
import java.util.Collections;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_FinancialUtils_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTML_PositiveGain_tivi0_1() {
    BigDecimal gain = new BigDecimal("100.00");
    String result = FinancialUtils.printGainHTML(gain);
    assertTrue(result.contains("<FONT color=\"#009900\">"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTML_PositiveGain_tivi0_2() {
    BigDecimal gain = new BigDecimal("100.00");
    String result = FinancialUtils.printGainHTML(gain);
    assertTrue(result.contains("arrowup.gif"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTML_NegativeGain_KTdJ1_1() {
    BigDecimal gain = new BigDecimal("-50.00");
    String result = FinancialUtils.printGainHTML(gain);
    assertTrue(result.contains("<FONT color=\"#ff0000\">"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTML_NegativeGain_KTdJ1_2() {
    BigDecimal gain = new BigDecimal("-50.00");
    String result = FinancialUtils.printGainHTML(gain);
    assertTrue(result.contains("arrowdown.gif"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintQuoteLink_dSZn0() {
    String symbol = "AAPL";
    String expected = "<A href=\"app?action=quotes&symbols=AAPL\">AAPL</A>";
    String result = FinancialUtils.printQuoteLink(symbol);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGain_PositiveGain_xtsS0() {
    BigDecimal currentBalance = new BigDecimal("1200.00");
    BigDecimal openBalance = new BigDecimal("1000.00");
    BigDecimal expectedGain = new BigDecimal("200.00").setScale(FinancialUtils.SCALE);
    BigDecimal actualGain = FinancialUtils.computeGain(currentBalance, openBalance);
    assertEquals(expectedGain, actualGain);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeGainPercentWithNonZeroOpenBalance_suiM0() {
    BigDecimal currentBalance = new BigDecimal("120");
    BigDecimal openBalance = new BigDecimal("100");
    BigDecimal expected = new BigDecimal("0.0000");
    BigDecimal result = FinancialUtils.computeGainPercent(currentBalance, openBalance);
    assertEquals(expected, result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_PositiveGain_BmAm0_1() {
    BigDecimal gain = new BigDecimal("5.1234");
    String result = FinancialUtils.printGainPercentHTML(gain);
    assertTrue(result.contains("images/arrowup.gif"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_PositiveGain_BmAm0_2() {
    BigDecimal gain = new BigDecimal("5.1234");
    String result = FinancialUtils.printGainPercentHTML(gain);
    assertTrue(result.contains("#009900"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_PositiveGain_BmAm0_3() {
    BigDecimal gain = new BigDecimal("5.1234");
    String result = FinancialUtils.printGainPercentHTML(gain);
    assertTrue(result.contains("+5.12%"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_NegativeGain_DShW1_1() {
    BigDecimal gain = new BigDecimal("-3.5678");
    String result = FinancialUtils.printGainPercentHTML(gain);
    assertTrue(result.contains("images/arrowdown.gif"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_NegativeGain_DShW1_2() {
    BigDecimal gain = new BigDecimal("-3.5678");
    String result = FinancialUtils.printGainPercentHTML(gain);
    assertTrue(result.contains("#ff0000"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_NegativeGain_DShW1_3() {
    BigDecimal gain = new BigDecimal("-3.5678");
    String result = FinancialUtils.printGainPercentHTML(gain);
    assertTrue(result.contains("-3.57%"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTML_PositiveChange_aidG0() {
    String result = FinancialUtils.printChangeHTML(5.0);
    assertEquals("<FONT color=\"#009900\">5.0</FONT><IMG src=\"images/arrowup.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintChangeHTML_NegativeChange_snsu1() {
    String result = FinancialUtils.printChangeHTML(-3.0);
    assertEquals("<FONT color=\"#ff0000\">-3.0</FONT><IMG src=\"images/arrowdown.gif\" width=\"10\" height=\"10\" border=\"0\"></IMG>", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeHoldingsTotal_withNullCollection_XUWk0() {
    BigDecimal result = FinancialUtils.computeHoldingsTotal(null);
    assertEquals(new BigDecimal("0.0").setScale(FinancialUtils.SCALE), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testComputeHoldingsTotal_withEmptyCollection_gGdc1() {
    BigDecimal result = FinancialUtils.computeHoldingsTotal(Collections.emptyList());
    assertEquals(new BigDecimal("0.0").setScale(FinancialUtils.SCALE), result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTML_PositiveGain_tivi0() {
    BigDecimal gain = new BigDecimal("100.00");
    String result = FinancialUtils.printGainHTML(gain);
    assertTrue(result.contains("<FONT color=\"#009900\">"));
    assertTrue(result.contains("arrowup.gif"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainHTML_NegativeGain_KTdJ1() {
    BigDecimal gain = new BigDecimal("-50.00");
    String result = FinancialUtils.printGainHTML(gain);
    assertTrue(result.contains("<FONT color=\"#ff0000\">"));
    assertTrue(result.contains("arrowdown.gif"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_PositiveGain_BmAm0() {
    BigDecimal gain = new BigDecimal("5.1234");
    String result = FinancialUtils.printGainPercentHTML(gain);
    assertTrue(result.contains("images/arrowup.gif"));
    assertTrue(result.contains("#009900"));
    assertTrue(result.contains("+5.12%"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrintGainPercentHTML_NegativeGain_DShW1() {
    BigDecimal gain = new BigDecimal("-3.5678");
    String result = FinancialUtils.printGainPercentHTML(gain);
    assertTrue(result.contains("images/arrowdown.gif"));
    assertTrue(result.contains("#ff0000"));
    assertTrue(result.contains("-3.57%"));
  }
}