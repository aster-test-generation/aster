/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.math.BigDecimal;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_OrderData_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderFee_Nvlw0() {
    BigDecimal expectedFee = new BigDecimal("100.00");
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), expectedFee, "TypeA", 50.0, "XYZ");
    BigDecimal actualFee = order.getOrderFee();
    assertEquals(expectedFee, actualFee);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuantity_FaRS0() {
    OrderData orderData = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("100.00"), "TypeA", 50.0, "XYZ");
    assertEquals(50.0, orderData.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderType_Bfea0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "Buy", 100.0, "AAPL");
    order.setOrderType("Sell");
    assertEquals("Sell", order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_pfwM0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "Buy", 100.0, "AAPL", new BigDecimal("150.00"));
    BigDecimal newPrice = new BigDecimal("155.00");
    order.setPrice(newPrice);
    assertEquals(newPrice, order.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderStatus_FiNT0() {
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("10.00"), "Buy", 100.0, "AAPL");
    String status = order.getOrderStatus();
    assertEquals("Completed", status);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_Xqay0() {
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("10.50"), "Buy", 100.0, "AAPL");
    assertEquals("AAPL", order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderID_oSfX0() {
    OrderData order = new OrderData(123, "Completed", new Date(), new Date(), new BigDecimal("10.50"), "TypeA", 100.0, "XYZ");
    Integer expected = 123;
    assertEquals(expected, order.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpenDate_cqkt0() {
    Date expectedDate = new Date();
    OrderData orderData = new OrderData(1, "Active", expectedDate, null, new BigDecimal("100.00"), "TypeA", 50.0, "XYZ");
    Date actualDate = orderData.getOpenDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompletionDate_OmQF0() {
    Date expectedDate = new Date();
    OrderData orderData = new OrderData(1, "Completed", new Date(), expectedDate, new BigDecimal("10.00"), "TypeA", 100.0, "XYZ");
    Date actualDate = orderData.getCompletionDate();
    assertEquals(expectedDate, actualDate);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_cOSR0() {
    BigDecimal expectedPrice = new BigDecimal("100.00");
    OrderData orderData = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("5.00"), "Buy", 10.0, "AAPL", expectedPrice);
    BigDecimal actualPrice = orderData.getPrice();
    assertEquals(expectedPrice, actualPrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrderType_vtOF0() {
    OrderData order = new OrderData(123, "Completed", new Date(), new Date(), new BigDecimal("15.00"), "Buy", 100.0, "AAPL");
    assertEquals("Buy", order.getOrderType());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderID_HvnQ0() {
    OrderData orderData = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "TypeA", 100.0, "AAPL");
    Integer newOrderID = 2;
    orderData.setOrderID(newOrderID);
    assertEquals(newOrderID, orderData.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetTotal_qbwE0() {
    OrderData order = new OrderData(1, "Completed", new Date(), new Date(), new BigDecimal("100.00"), "TypeA", 50.0, "XYZ");
    BigDecimal expectedTotal = new BigDecimal("200.00");
    order.setTotal(expectedTotal);
    assertEquals(expectedTotal, order.getTotal());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderStatus_huFU0_rhws0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "Buy", 100.0, "AAPL");
    order.setOrderStatus("Completed");
    assertEquals("Completed", order.getOrderStatus());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_NJQL0_owHz0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "Buy", 100.0, "AAPL");
    order.setSymbol("GOOGL");
    assertEquals("GOOGL", order.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOrderFee_bFqW0_pfOe0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("100.00"), "TypeA", 50.0, "XYZ");
    BigDecimal newFee = new BigDecimal("150.00");
    order.setOrderFee(newFee);
    assertEquals(newFee, order.getOrderFee());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpenDate_iaik0_ayvu0() {
    Integer orderID = 1;
    String orderStatus = "Pending";
    Date initialOpenDate = new Date();
    Date completeDate = new Date();
    BigDecimal orderFee = new BigDecimal("10.00");
    String orderType = "Market";
    double quantity = 100.0;
    String symbol = "AAPL";
    BigDecimal price = new BigDecimal("150.00");
    OrderData orderData = new OrderData(orderID, orderStatus, initialOpenDate, completeDate, orderFee, orderType, quantity, symbol, price);
    Date newOpenDate = new Date(initialOpenDate.getTime() + 100000); // new date is 100000 milliseconds later
    orderData.setOpenDate(newOpenDate);
    assertEquals(newOpenDate, orderData.getOpenDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetQuantity_vfiN0_zuhF0() {
    OrderData order = new OrderData(1, "Pending", new Date(), null, new BigDecimal("10.00"), "TypeA", 5.0, "AAPL");
    order.setQuantity(10.0);
    assertEquals(10.0, order.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompletionDate_rRHC0_HXaJ0() {
    Integer orderID = 1;
    String orderStatus = "Open";
    Date openDate = new Date();
    Date completeDate = new Date();
    BigDecimal orderFee = new BigDecimal("10.50");
    String orderType = "Market";
    double quantity = 100.0;
    String symbol = "AAPL";
    BigDecimal price = new BigDecimal("150.00");
    OrderData orderData = new OrderData(orderID, orderStatus, openDate, completeDate, orderFee, orderType, quantity, symbol, price);
    Date newCompletionDate = new Date();
    orderData.setCompletionDate(newCompletionDate);
    assertEquals(newCompletionDate, orderData.getCompletionDate());
  }
}