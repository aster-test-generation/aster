/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.jsf;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_JSFLoginFilter_Test_Failing {
  private JSFLoginFilter jsfLoginFilter;
  private HttpServletRequest httpServletRequest;
  private HttpServletResponse httpServletResponse;
  private HttpSession httpSession;
  private FilterChain filterChain;
  private FilterConfig filterConfig = null;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_UserNotLoggedIn_RedirectsToWelcome() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    httpSession = mock(HttpSession.class);
    filterChain = mock(FilterChain.class);
    jsfLoginFilter = new JSFLoginFilter();
    when(httpServletRequest.getSession()).thenReturn(httpSession);
    when(httpServletRequest.getServletPath()).thenReturn("home");
    when(httpSession.getAttribute("uidBean")).thenReturn(null);
    jsfLoginFilter.doFilter(httpServletRequest, httpServletResponse, filterChain);
    verify(httpServletResponse).sendRedirect("welcome.faces");
    verify(filterChain, never()).doFilter(httpServletRequest, httpServletResponse);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_UserLoggedIn_ProceedsFilterChain() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    httpSession = mock(HttpSession.class);
    filterChain = mock(FilterChain.class);
    jsfLoginFilter = new JSFLoginFilter();
    when(httpServletRequest.getSession()).thenReturn(httpSession);
    when(httpServletRequest.getServletPath()).thenReturn("home");
    when(httpSession.getAttribute("uidBean")).thenReturn("user123");
    jsfLoginFilter.doFilter(httpServletRequest, httpServletResponse, filterChain);
    verify(filterChain).doFilter(httpServletRequest, httpServletResponse);
    verify(httpServletResponse, never()).sendRedirect(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilter_NonProtectedPath_ProceedsFilterChain() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    httpSession = mock(HttpSession.class);
    filterChain = mock(FilterChain.class);
    jsfLoginFilter = new JSFLoginFilter();
    when(httpServletRequest.getSession()).thenReturn(httpSession);
    when(httpServletRequest.getServletPath()).thenReturn("login");
    when(httpSession.getAttribute("uidBean")).thenReturn(null);
    jsfLoginFilter.doFilter(httpServletRequest, httpServletResponse, filterChain);
    verify(filterChain).doFilter(httpServletRequest, httpServletResponse);
    verify(httpServletResponse, never()).sendRedirect(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithValidSession_CiAL1() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user123");
    filter.doFilter(request, response, chain);
    verify(chain).doFilter(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndNonProtectedUrl_qIUR2() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("login.faces");
    filter.doFilter(request, response, chain);
    verify(chain).doFilter(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndProtectedUrl_xQhF3() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("home.faces");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndAnotherProtectedUrl_oOpe4() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("account.faces");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndMarketSummaryUrl_xxSX5() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("marketSummary.faces");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndOrderUrl_Amsz6() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("order.faces");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndQuoteUrl_aHys7() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("quote.faces");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndPortfolioUrl_YqYQ8() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("portfolio.faces");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithValidSession_CiAL1_fid1() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn("user123");
    filter.doFilter(request, response, chain);
    verify(chain, times(1)).doFilter(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndProtectedUrl_xQhF3_fid1() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("/home.faces");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndAnotherProtectedUrl_oOpe4_fid1() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("account.faces");
    filter.doFilter(request, response, chain);
    verify(response, times(1)).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndMarketSummaryUrl_xxSX5_fid1() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("/marketSummary.faces");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndOrderUrl_Amsz6_fid1() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("order.faces");
    filter.doFilter(request, response, chain);
    verify(response, times(1)).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndQuoteUrl_aHys7_fid1() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("quote.faces");
    filter.doFilter(request, response, chain);
    verify(response, times(1)).sendRedirect("welcome.faces");
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoFilterWithNullUserIDAndPortfolioUrl_YqYQ8_fid1() throws IOException, ServletException {
    JSFLoginFilter filter = new JSFLoginFilter();
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    HttpSession session = mock(HttpSession.class);
    FilterChain chain = mock(FilterChain.class);
    when(request.getSession()).thenReturn(session);
    when(session.getAttribute("uidBean")).thenReturn(null);
    when(request.getServletPath()).thenReturn("/portfolio.faces");
    filter.doFilter(request, response, chain);
    verify(response).sendRedirect("welcome.faces");
  }
}