/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.entities;

import java.math.BigDecimal;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

public class Aster_QuoteDataBean_Test_Passing {
  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_gJLg0_1() {
    QuoteDataBean instance = QuoteDataBean.getRandomInstance();
    assertNotNull(instance);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_gJLg0_2() {
    QuoteDataBean instance = QuoteDataBean.getRandomInstance();
    assertNotNull(instance.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_gJLg0_3() {
    QuoteDataBean instance = QuoteDataBean.getRandomInstance();
    assertTrue(instance.getCompanyName().contains("Incorporated"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_gJLg0_4() {
    QuoteDataBean instance = QuoteDataBean.getRandomInstance();
    assertTrue(instance.getVolume() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_gJLg0_5() {
    QuoteDataBean instance = QuoteDataBean.getRandomInstance();
    assertNotNull(instance.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_gJLg0_6() {
    QuoteDataBean instance = QuoteDataBean.getRandomInstance();
    assertNotNull(instance.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_gJLg0_7() {
    QuoteDataBean instance = QuoteDataBean.getRandomInstance();
    assertNotNull(instance.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_gJLg0_8() {
    QuoteDataBean instance = QuoteDataBean.getRandomInstance();
    assertNotNull(instance.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_gJLg0_9() {
    QuoteDataBean instance = QuoteDataBean.getRandomInstance();
    assertTrue(instance.getChange() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetCompanyName_lrUS0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, new BigDecimal("150.00"), new BigDecimal("148.00"), new BigDecimal("147.00"), new BigDecimal("151.00"), 2.5);
    assertEquals("Apple Inc.", quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNonNullSymbol_jsCf0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    int expectedHashCode = "AAPL".hashCode();
    assertEquals(expectedHashCode, quoteDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testHashCodeWithNullSymbol_rXDB1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    assertEquals(0, quoteDataBean.hashCode());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetPrice_wuxo0() {
    BigDecimal expectedPrice = new BigDecimal("150.00");
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 1000000, expectedPrice, new BigDecimal("145.00"), new BigDecimal("140.00"), new BigDecimal("155.00"), 5.00);
    BigDecimal actualPrice = quoteDataBean.getPrice();
    assertEquals(expectedPrice, actualPrice);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testPrint_jrJX0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.print();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToHTML_VHep0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 5000000, new BigDecimal("150.50"), new BigDecimal("151.00"), new BigDecimal("148.20"), new BigDecimal("152.30"), -1.50);
    String expectedHtml = "<BR>Quote Data for: AAPL<LI> companyName: Apple Inc.</LI><LI>      volume: 5000000.0</LI><LI>       price: 150.50</LI><LI>        open1: 151.00</LI><LI>         low: 148.20</LI><LI>        high: 152.30</LI><LI>      change1: -1.5</LI>";
    assertEquals(expectedHtml, quoteDataBean.toHTML());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOpen_fqPg0() {
    BigDecimal expectedOpen = new BigDecimal("150.00");
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 5000, new BigDecimal("145.00"), expectedOpen, new BigDecimal("140.00"), new BigDecimal("155.00"), 5.00);
    BigDecimal actualOpen = quoteDataBean.getOpen();
    assertEquals(expectedOpen, actualOpen);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetLow_xLVv0() {
    BigDecimal expectedLow = new BigDecimal("100.00");
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 5000, new BigDecimal("150.00"), new BigDecimal("155.00"), expectedLow, new BigDecimal("160.00"), 5.0);
    assertEquals(expectedLow, quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetChange_mPPG0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 5000000, new BigDecimal("150.00"), new BigDecimal("148.00"), new BigDecimal("147.50"), new BigDecimal("151.00"), 1.5);
    assertEquals(1.5, quoteDataBean.getChange(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetHigh_XStx0() {
    BigDecimal expectedHigh = new BigDecimal("150.75");
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 5000, new BigDecimal("120.50"), new BigDecimal("119.00"), new BigDecimal("118.00"), expectedHigh, 1.25);
    BigDecimal actualHigh = quoteDataBean.getHigh();
    assertEquals(expectedHigh, actualHigh);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetPrice_IVMX0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal newPrice = new BigDecimal("100.00");
    quoteDataBean.setPrice(newPrice);
    assertEquals(newPrice, quoteDataBean.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameObject_iMyF0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    assertTrue(quoteDataBean.equals(quoteDataBean));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentClass_riwh1() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    Object otherObject = new Object();
    assertFalse(quoteDataBean.equals(otherObject));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithNull_KjxV2() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    assertFalse(quoteDataBean.equals(null));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithDifferentSymbol_jcNZ3() {
    QuoteDataBean quoteDataBean1 = new QuoteDataBean("AAPL");
    QuoteDataBean quoteDataBean2 = new QuoteDataBean("MSFT");
    assertFalse(quoteDataBean1.equals(quoteDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testEqualsWithSameSymbol_SrLB4() {
    QuoteDataBean quoteDataBean1 = new QuoteDataBean("AAPL");
    QuoteDataBean quoteDataBean2 = new QuoteDataBean("AAPL");
    assertTrue(quoteDataBean1.equals(quoteDataBean2));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetSymbol_TSnp0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testToString_hIyF0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 5000000, new BigDecimal("150.50"), new BigDecimal("151.00"), new BigDecimal("148.20"), new BigDecimal("152.30"), 1.25);
    double expectedVolume = 5000000;
    assertEquals(expectedVolume, quoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetCompanyName_KmvX0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    String expectedCompanyName = "Test Company";
    quoteDataBean.setCompanyName(expectedCompanyName);
    assertEquals(expectedCompanyName, quoteDataBean.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetVolume_mJtn0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean("AAPL", "Apple Inc.", 5000.0, new BigDecimal("150.00"), new BigDecimal("148.00"), new BigDecimal("147.00"), new BigDecimal("151.00"), 2.0);
    assertEquals(5000.0, quoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetSymbol_twIw0_ddnB0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    quoteDataBean.setSymbol("AAPL");
    assertEquals("AAPL", quoteDataBean.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetHigh_RKYt0_UocF0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal expectedHigh = new BigDecimal("150.00");
    quoteDataBean.setHigh(expectedHigh);
    assertEquals(expectedHigh, quoteDataBean.getHigh());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetVolume_uVLA0_Uyqz0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    double expectedVolume = 1500.0;
    quoteDataBean.setVolume(expectedVolume);
    assertEquals(expectedVolume, quoteDataBean.getVolume(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetOpen_Zrsd0_vRZq0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal expectedOpen = new BigDecimal("123.45");
    quoteDataBean.setOpen(expectedOpen);
    assertEquals(expectedOpen, quoteDataBean.getOpen());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetChange_TmBp0_bgmO0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    double expectedChange = 5.0;
    quoteDataBean.setChange(expectedChange);
    assertEquals(expectedChange, quoteDataBean.getChange(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSetLow_hZHO0_llhB0() {
    QuoteDataBean quoteDataBean = new QuoteDataBean();
    BigDecimal expectedLow = new BigDecimal("100.00");
    quoteDataBean.setLow(expectedLow);
    assertEquals(expectedLow, quoteDataBean.getLow());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetRandomInstance_gJLg0() {
    QuoteDataBean instance = QuoteDataBean.getRandomInstance();
    assertNotNull(instance);
    assertNotNull(instance.getSymbol());
    assertTrue(instance.getCompanyName().contains("Incorporated"));
    assertTrue(instance.getVolume() >= 0);
    assertNotNull(instance.getPrice());
    assertNotNull(instance.getOpen());
    assertNotNull(instance.getLow());
    assertNotNull(instance.getHigh());
    assertTrue(instance.getChange() >= 0);
  }
}