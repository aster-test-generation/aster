/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingSession1_Test_Failing {
  PingSession1 pingSession1;
  ServletConfig mockServletConfig;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  HttpServletRequest request;
  HttpServletResponse response;
  HttpSession session;
  PrintWriter printWriter;
  private static int count;
  private static int hitCount;
  private static String initTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingSession1 = new PingSession1();
    // Setup
    pingSession1.doPost(httpServletRequest, httpServletResponse);
    // Verify that doGet is called within doPost
    verify(httpServletRequest, atLeastOnce()).getSession(any(Boolean.class));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_dbmH0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingSession1 pingSession = new PingSession1();
    pingSession.doPost(request, response);
    verify(pingSession).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_Ealg0() {
    PingSession1 session = new PingSession1();
    String result = session.getServletInfo();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_yVdv0_2() throws ServletException {
    try {
      pingSession1 = new PingSession1();
    } catch (Throwable e) {
      fail("Initialization of PingSession1 failed with error: " + e.getMessage());
    }
    mockServletConfig = mock(ServletConfig.class);
    pingSession1.init(mockServletConfig);
    assertNotNull(pingSession1);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_Ealg0_fid2() {
    PingSession1 session = new PingSession1();
    String result = session.getServletInfo();
    assertEquals("HTTP Session Key: Tests management of a read only unique id", result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_yVdv0_1() throws ServletException {
    pingSession1 = new PingSession1();
    mockServletConfig = mock(ServletConfig.class);
    pingSession1.init(mockServletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_yVdv0_2_fid2() throws ServletException {
    pingSession1 = new PingSession1();
    mockServletConfig = mock(ServletConfig.class);
    pingSession1.init(mockServletConfig);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_yVdv0_3_fid2() throws ServletException {
    pingSession1 = new PingSession1();
    mockServletConfig = mock(ServletConfig.class);
    pingSession1.init(mockServletConfig);
    assertEquals(0, count);
  }
}