/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.ejb3;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.concurrent.TimeUnit;
import javax.naming.InitialContext;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServlet2Session2Entity_Test_Failing {
  @Mock
  private ServletConfig servletConfig;
  @Mock
  private TradeServices tradeSLSBLocal;
  @Mock
  private InitialContext initialContext;
  private PingServlet2Session2Entity pingServlet2Session2Entity;
  HttpServletRequest request;
  HttpServletResponse response;
  private static String initTime;
  private static int hitCount;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    pingServlet2Session2Entity = new PingServlet2Session2Entity();
    request = mock(HttpServletRequest.class);
    response = mock(HttpServletResponse.class);
    // Setup
    doNothing().when(response).setStatus(anyInt());
    // Execute
    pingServlet2Session2Entity.doPost(request, response);
    // Verify
    verify(request, times(1)).setAttribute(anyString(), any());
    verify(response, never()).sendError(anyInt(), anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_myUv0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    servlet.doPost(request, response);
    verify(servlet).doGet(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_GeeO0() {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    String expected = "web primitive, tests Servlet to Session to Entity EJB path";
    assertEquals(expected, servlet.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_Exception_xtet1() throws IOException, ServletException {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    when(res.getWriter()).thenThrow(new IOException("Simulated IOException"));
    try {
      servlet.doGet(req, res);
      fail("Expected IOException was not thrown");
    } catch (IOException e) {
      assertEquals("Simulated IOException", e.getMessage());
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_NormalConditions_lphE0_1() throws Exception {
    pingServlet2Session2Entity = new PingServlet2Session2Entity();
    when(new InitialContext()).thenReturn(initialContext);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenReturn(tradeSLSBLocal);
    pingServlet2Session2Entity.init(servletConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_NormalConditions_lphE0_2() throws Exception {
    pingServlet2Session2Entity = new PingServlet2Session2Entity();
    when(new InitialContext()).thenReturn(initialContext);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenReturn(tradeSLSBLocal);
    pingServlet2Session2Entity.init(servletConfig);
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_NormalConditions_lphE0_3() throws Exception {
    pingServlet2Session2Entity = new PingServlet2Session2Entity();
    when(new InitialContext()).thenReturn(initialContext);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenReturn(tradeSLSBLocal);
    pingServlet2Session2Entity.init(servletConfig);
    assertNotNull(tradeSLSBLocal);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_JNDILookupFailure_bYAB0_1() throws Exception {
    pingServlet2Session2Entity = new PingServlet2Session2Entity();
    when(new InitialContext()).thenReturn(initialContext);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenReturn(tradeSLSBLocal);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenThrow(new RuntimeException("JNDI lookup failed"));
    Exception exception = assertThrows(ServletException.class, () -> {
      pingServlet2Session2Entity.init(servletConfig);
    });
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_JNDILookupFailure_bYAB0_3() throws Exception {
    pingServlet2Session2Entity = new PingServlet2Session2Entity();
    when(new InitialContext()).thenReturn(initialContext);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenReturn(tradeSLSBLocal);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenThrow(new RuntimeException("JNDI lookup failed"));
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_JNDILookupFailure_bYAB0_4() throws Exception {
    pingServlet2Session2Entity = new PingServlet2Session2Entity();
    when(new InitialContext()).thenReturn(initialContext);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenReturn(tradeSLSBLocal);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenThrow(new RuntimeException("JNDI lookup failed"));
    assertEquals(0, hitCount);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_JNDILookupFailure_bYAB0_5() throws Exception {
    pingServlet2Session2Entity = new PingServlet2Session2Entity();
    when(new InitialContext()).thenReturn(initialContext);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenReturn(tradeSLSBLocal);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenThrow(new RuntimeException("JNDI lookup failed"));
    assertNull(tradeSLSBLocal);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInitWithNullTradeSLSBLocal_EdCx0_GYec0() throws ServletException, NoSuchFieldException, IllegalAccessException {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    ServletConfig mockConfig = mock(ServletConfig.class);
    servlet.init(mockConfig);
    Field tradeSLSBLocalField = PingServlet2Session2Entity.class.getDeclaredField("tradeSLSBLocal");
    tradeSLSBLocalField.setAccessible(true);
    assertNotNull(tradeSLSBLocalField.get(servlet));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_GeeO0_fid1() {
    PingServlet2Session2Entity servlet = new PingServlet2Session2Entity();
    String actual = servlet.getServletInfo();
    String expected = "web primitive, tests Servlet to Session to Entity EJB path";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_JNDILookupFailure_bYAB0_1_fid1() throws Exception {
    try {
      pingServlet2Session2Entity = new PingServlet2Session2Entity();
    } catch (Throwable e) {
      fail("Initialization of PingServlet2Session2Entity failed: " + e.getMessage());
    }
    when(new InitialContext()).thenReturn(initialContext);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenReturn(tradeSLSBLocal);
    when(initialContext.lookup("java:comp/env/ejb/TradeSLSBBean")).thenThrow(new RuntimeException("JNDI lookup failed"));
    Exception exception = assertThrows(ServletException.class, () -> {
      pingServlet2Session2Entity.init(servletConfig);
    });
    assertEquals("JNDI lookup failed", exception.getCause().getMessage());
  }
}