/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.servlet;

import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.enterprise.inject.Instance;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_TestServlet_Test_Passing {
  @InjectMocks
  private TestServlet testServlet;
  @Mock
  private ServletConfig mockServletConfig;
  @Mock
  private HttpServletRequest request;
  @Mock
  private HttpServletResponse response;
  @Mock
  private TradeServices tradeServices;
  @Mock
  private TradeServices tradeAction;
  @Mock
  private HttpServletRequest req;
  @Mock
  private HttpServletResponse resp;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit() throws ServletException {
    // Initialization is handled by Mockito annotations
    // Call the method to test
    testServlet.init(mockServletConfig);
    // Verify that super.init(config) was called
    verify(mockServletConfig, times(1)).getServletContext();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_vqLL0() throws ServletException {
    ServletConfig mockConfig = mock(ServletConfig.class);
    TestServlet servlet = new TestServlet(null);
    servlet.init(mockConfig);
    assertNotNull(servlet);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws ServletException, IOException {
    // Assuming TradeServices is an interface and you have a way to inject it into TestServlet
    // Since the constructor of TestServlet is not fully shown in your example, assuming it sets a field
    // This setup is handled by @InjectMocks which initializes testServlet with mocked tradeServices
    // Act
    testServlet.doPost(request, response);
    // Assert
    verify(testServlet, times(1)).performTask(request, response);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost_Hfhl0() throws Exception {
    HttpServletRequest request = mock(HttpServletRequest.class);
    HttpServletResponse response = mock(HttpServletResponse.class);
    Instance<TradeServices> services = mock(Instance.class);
    TestServlet servlet = new TestServlet(services);
    servlet.doPost(request, response);
    verify(request, atLeast(1)).getParameter(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws ServletException, IOException {
    // Assuming TradeServices is an interface and you have a mock for it
    // Setup any common mock interactions here if necessary
    // Call the method under test
    testServlet.doGet(request, response);
    // Verify that performTask was called with the mocked request and response
    verify(testServlet).performTask(request, response);
  }
}