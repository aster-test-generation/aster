/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.web.prims.drive;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_PingServletDrive_Test_Failing {
  @Mock
  private ServletConfig mockConfig;
  private PingServletDrive pingServletDrive;
  HttpServletRequest httpServletRequest;
  HttpServletResponse httpServletResponse;
  ServletOutputStream servletOutputStream;
  private static int hitCount;
  private static String initTime;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPost() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    pingServletDrive = new PingServletDrive();
    // Arrange
    doNothing().when(httpServletResponse).sendRedirect(anyString());
    // Act
    pingServletDrive.doPost(httpServletRequest, httpServletResponse);
    // Assert
    verify(httpServletResponse, never()).sendError(anyInt());
    verify(httpServletResponse, never()).sendRedirect(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_aNsZ0() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    PingServletDrive servlet = new PingServletDrive();
    servlet.doPost(req, res);
    verify(req, atLeastOnce()).getMethod();
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_aIPS0() {
    PingServletDrive servletDrive = new PingServletDrive();
    String expected = "Basic dynamic HTML generation through a servlet";
    assertEquals(expected, servletDrive.getServletInfo());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet() throws Exception {
    httpServletRequest = mock(HttpServletRequest.class);
    httpServletResponse = mock(HttpServletResponse.class);
    servletOutputStream = mock(ServletOutputStream.class);
    pingServletDrive = new PingServletDrive();
    when(httpServletResponse.getOutputStream()).thenReturn(servletOutputStream);
    pingServletDrive.doGet(httpServletRequest, httpServletResponse);
    verify(httpServletResponse).setContentType("text/html");
    verify(servletOutputStream).println(anyString());
    verify(servletOutputStream, times(1)).println(contains("Ping Servlet"));
    verify(servletOutputStream, times(1)).println(contains("Hit Count: 1"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoGet_ObYf0() throws Exception {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream servletOutputStream = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(servletOutputStream);
    PingServletDrive servlet = new PingServletDrive();
    servlet.doGet(req, res);
    verify(res).setContentType("text/html");
    verify(servletOutputStream).println(contains("Ping Servlet"));
    verify(servletOutputStream).println(contains("Hit Count:"));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testDoPostCallsDoGet_aNsZ0_fid1() throws ServletException, IOException {
    HttpServletRequest req = mock(HttpServletRequest.class);
    HttpServletResponse res = mock(HttpServletResponse.class);
    ServletOutputStream outStream = mock(ServletOutputStream.class);
    when(res.getOutputStream()).thenReturn(outStream);
    PingServletDrive servlet = new PingServletDrive();
    servlet.doGet(req, res);
    verify(res, atLeastOnce()).setContentType("text/html");
    verify(outStream, atLeastOnce()).println(anyString());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetServletInfo_aIPS0_fid1() {
    PingServletDrive servletDrive = new PingServletDrive();
    String actual = servletDrive.getServletInfo();
    String expected = "Basic dynamic HTML generation through a servlet";
    assertEquals(expected, actual);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_ZuBd0_1() throws ServletException {
    try {
      pingServletDrive = new PingServletDrive();
      pingServletDrive.init(mockConfig);
      fail("Expected an ExceptionInInitializerError to be thrown");
    } catch (ExceptionInInitializerError e) {
      // Expected exception caught, test passes
    }
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_ZuBd0_1_fid2() throws ServletException {
    pingServletDrive = new PingServletDrive();
    pingServletDrive.init(mockConfig);
    assertNotNull(initTime);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testInit_ZuBd0_2() throws ServletException {
    pingServletDrive = new PingServletDrive();
    pingServletDrive.init(mockConfig);
    assertEquals(0, hitCount);
  }
}