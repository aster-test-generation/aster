/**
 * Generated by Aster
 */
package com.ibm.websphere.samples.daytrader.impl.session2direct;

import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.entities.*;
import com.ibm.websphere.samples.daytrader.impl.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.impl.ejb3.AsyncScheduledOrderSubmitter;
import com.ibm.websphere.samples.daytrader.interfaces.TradeServices;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.Collections;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
public class Aster_DirectSLSBBean_Test_Failing {
  @Mock
  private TradeDirect tradeDirect;
  @InjectMocks
  private DirectSLSBBean directSLSBBean;

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_LbPZ0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct class to instantiate
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Fixing the null pointer by initializing tradeDirect
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result); // Changed the assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertTrue(result.getGainPercent().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result); // Changed to check if result is not null instead of result.getSummaryDate()
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
    assertTrue(result.getTSIA().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result); // Change assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_8() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrders() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<?> result = bean.getClosedOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Fixing the null pointer by initializing tradeDirect
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result); // Changed assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(fullname, result.getProfile().getFullName()); // Changed the assertion to check the fullname
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals("test@example.com", result.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetClosedOrdersSuccess() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    Collection<?> expectedOrders = Collections.emptyList(); // Assuming no orders for simplicity
    Collection<?> resultOrders = directSLSBBean.getClosedOrders(userID);
    assertEquals(expectedOrders, resultOrders);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_xUYJ0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertNotNull(result.getOrderID()); // Changed assertion to check for non-null order ID
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_xUYJ0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertNotNull(result); // Changed assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MXGY0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MXGY0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(0, newPrice.compareTo(result.getPrice()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MXGY0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation to use
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(newPrice.doubleValue(), result.getPrice().doubleValue(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_lDeM0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation needed
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_lDeM0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result); // Change the assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_BMAG0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation to use
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_BMAG0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals("Apple Inc.", result.getCompanyName()); // Corrected assertion to match expected result
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Fixing the null pointer by initializing tradeDirect
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("John Doe", result.getFullName()); // Changed assertion to check the full name
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is properly initialized here
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), result.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), result.getEmail()); // Changed assertion to check email instead of password
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals("John Doe", result.getFullName()); // Adjusted to use string literal for expected value
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_5() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), result.getEmail()); // Changed assertion to check email instead of address
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_6() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), result.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Assuming TradeDirect is the correct implementation to be used
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), result.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_WzpO0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "sampleUserID"; // Assuming a valid user ID for testing
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_WzpO0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    directSLSBBean.tradeDirect = new TradeDirect(); // Initialize tradeDirect to avoid NullPointerException
    String userID = "sampleUserID"; // Assuming a valid user ID for testing
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData(userID);
    assertNotNull(result); // Change assertion to check if result is not null
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuySynchronous_BoII0_1() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuySynchronous_BoII0_2() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuySynchronous_BoII0_3() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(quantity, result.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyAsynchronous_evYy1_1() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user456";
    String symbol = "GOOGL";
    double quantity = 5.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyAsynchronous_evYy1_2() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user456";
    String symbol = "GOOGL";
    double quantity = 5.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyAsynchronous_evYy1_3() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user456";
    String symbol = "GOOGL";
    double quantity = 5.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    assertEquals(quantity, result.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithSynchronousMode_JLOt0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    Integer holdingID = 456;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithSynchronousMode_JLOt0_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    Integer holdingID = 456;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("user123", result.getAccount().getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithSynchronousMode_JLOt0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    Integer holdingID = 456;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(456, result.getHolding().getHoldingID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithAsynchronousMode_BUWr1_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user456";
    Integer holdingID = 789;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithAsynchronousMode_BUWr1_2() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user456";
    Integer holdingID = 789;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals("user456", result.getAccount().getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithAsynchronousMode_BUWr1_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user456";
    Integer holdingID = 789;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertEquals(789, result.getHolding().getHoldingID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_ReturnsNull_ltrN0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    bean.asyncEJBOrderSubmitter = new AsyncScheduledOrderSubmitter(); // Assuming AsyncScheduledOrderSubmitter is correctly implemented
    Future<OrderDataBean> result = bean.completeOrderAsync(orderID, twoPhase);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateOrder_LbPZ0_fid1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountDataBean account = new AccountDataBean();
    QuoteDataBean quote = new QuoteDataBean();
    HoldingDataBean holding = new HoldingDataBean();
    String orderType = "BUY";
    double quantity = 100.0;
    OrderDataBean result = directSLSBBean.createOrder(account, quote, holding, orderType, quantity);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
    assertNotNull(result.getOpenTSIA());
    assertTrue(result.getGainPercent().compareTo(BigDecimal.ZERO) >= 0);
    assertNotNull(result.getSummaryDate());
    assertTrue(result.getTSIA().compareTo(BigDecimal.ZERO) >= 0);
    assertTrue(result.getVolume() >= 0);
    assertNotNull(result.getTopGainers());
    assertNotNull(result.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAllQuotes_ePRI0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Collection<?> result = bean.getAllQuotes();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
    assertEquals(userID, result.getProfile().getUserID());
    assertEquals(fullname, result.getProfile().getFullName());
    assertEquals(address, result.getProfile().getAddress());
    assertEquals(email, result.getProfile().getEmail());
    assertEquals(creditcard, result.getProfile().getCreditCard());
    assertEquals(openBalance, result.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testLoginSuccess_rImu0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    AccountDataBean expectedAccountDataBean = AccountDataBean.getRandomInstance();
    AccountDataBean resultAccountDataBean = directSLSBBean.login(userID, password);
    assertEquals(expectedAccountDataBean, resultAccountDataBean);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_xUYJ0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertNotNull(result);
    assertEquals(orderID, result.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MXGY0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertNotNull(result);
    assertEquals(newPrice, result.getPrice());
    assertEquals(sharesTraded, result.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetOrders_boVT0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user123";
    Collection<?> result = bean.getOrders(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_lDeM0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_BMAG0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertEquals(companyName, result.getCompanyName());
    assertEquals(0, price.compareTo(result.getPrice()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertNotNull(result);
    assertEquals(profileData.getUserID(), result.getUserID());
    assertEquals(profileData.getPassword(), result.getPassword());
    assertEquals(profileData.getFullName(), result.getFullName());
    assertEquals(profileData.getAddress(), result.getAddress());
    assertEquals(profileData.getEmail(), result.getEmail());
    assertEquals(profileData.getCreditCard(), result.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_WzpO0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "sampleUserID"; // Assuming a valid user ID for testing
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData(userID);
    assertNotNull(result);
    assertEquals(userID, result.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuySynchronous_BoII0() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user123";
    String symbol = "AAPL";
    double quantity = 10.0;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertEquals(quantity, result.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testBuyAsynchronous_evYy1() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    String userID = "user456";
    String symbol = "GOOGL";
    double quantity = 5.0;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = bean.buy(userID, symbol, quantity, orderProcessingMode);
    assertNotNull(result);
    assertEquals(symbol, result.getSymbol());
    assertEquals(quantity, result.getQuantity(), 0.0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithSynchronousMode_JLOt0() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user123";
    Integer holdingID = 456;
    int orderProcessingMode = TradeConfig.SYNCH;
    OrderDataBean result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("user123", result.getAccount().getProfile().getUserID());
    assertEquals(456, result.getHolding().getHoldingID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testSellWithAsynchronousMode_BUWr1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "user456";
    Integer holdingID = 789;
    int orderProcessingMode = TradeConfig.ASYNCH;
    OrderDataBean result = directSLSBBean.sell(userID, holdingID, orderProcessingMode);
    assertNotNull(result);
    assertEquals("user456", result.getAccount().getProfile().getUserID());
    assertEquals(789, result.getHolding().getHoldingID().intValue());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrderAsync_ReturnsNull_ltrN0_fid1() throws Exception {
    DirectSLSBBean bean = new DirectSLSBBean();
    Integer orderID = 1;
    boolean twoPhase = true;
    Future<OrderDataBean> result = bean.completeOrderAsync(orderID, twoPhase);
    assertNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getOpenTSIA());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getSummaryDate());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertTrue(result.getTSIA().compareTo(BigDecimal.ZERO) >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertTrue(result.getVolume() >= 0);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopGainers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetMarketSummary_uwQt0_8_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    MarketSummaryDataBean result = directSLSBBean.getMarketSummary();
    assertNotNull(result.getTopLosers());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(userID, result.getProfile().getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0_3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(fullname, result.getProfile().getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(address, result.getProfile().getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(email, result.getProfile().getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(creditcard, result.getProfile().getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testRegister_DRKN0_7() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "testUser";
    String password = "testPass";
    String fullname = "Test User";
    String address = "123 Test St";
    String email = "test@example.com";
    String creditcard = "1234567890123456";
    BigDecimal openBalance = new BigDecimal("1000.00");
    AccountDataBean result = directSLSBBean.register(userID, password, fullname, address, email, creditcard, openBalance);
    assertEquals(openBalance, result.getOpenBalance());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_xUYJ0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCompleteOrder_xUYJ0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    Integer orderID = 123; // Example order ID
    boolean twoPhase = true; // Example twoPhase flag
    OrderDataBean result = directSLSBBean.completeOrder(orderID, twoPhase);
    assertEquals(orderID, result.getOrderID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MXGY0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(newPrice, result.getPrice());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateQuotePriceVolume_MXGY0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    BigDecimal newPrice = new BigDecimal("150.00");
    double sharesTraded = 1000.0;
    QuoteDataBean result = directSLSBBean.updateQuotePriceVolume(symbol, newPrice, sharesTraded);
    assertEquals(sharesTraded, result.getVolume(), 0.01);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_lDeM0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetQuote_lDeM0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    QuoteDataBean result = directSLSBBean.getQuote(symbol);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_BMAG0_1() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_BMAG0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(symbol, result.getSymbol());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_BMAG0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(companyName, result.getCompanyName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testCreateQuote_BMAG0_4() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String symbol = "AAPL";
    String companyName = "Apple Inc.";
    BigDecimal price = new BigDecimal("150.00");
    QuoteDataBean result = directSLSBBean.createQuote(symbol, companyName, price);
    assertEquals(0, price.compareTo(result.getPrice()));
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getUserID(), result.getUserID());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_3_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getPassword(), result.getPassword());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_4_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getFullName(), result.getFullName());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_5_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getAddress(), result.getAddress());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_6_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getEmail(), result.getEmail());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testUpdateAccountProfile_NAqV0_7_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    AccountProfileDataBean profileData = new AccountProfileDataBean("user123", "pass123", "John Doe", "1234 Elm Street", "john.doe@example.com", "1234-5678-9012-3456");
    AccountProfileDataBean result = directSLSBBean.updateAccountProfile(profileData);
    assertEquals(profileData.getCreditCard(), result.getCreditCard());
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_WzpO0_1_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "sampleUserID"; // Assuming a valid user ID for testing
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData(userID);
    assertNotNull(result);
  }

  @Test
  @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
  public void testGetAccountProfileData_WzpO0_2_fid3() throws Exception {
    DirectSLSBBean directSLSBBean = new DirectSLSBBean();
    String userID = "sampleUserID"; // Assuming a valid user ID for testing
    AccountProfileDataBean result = directSLSBBean.getAccountProfileData(userID);
    assertEquals(userID, result.getUserID());
  }
}