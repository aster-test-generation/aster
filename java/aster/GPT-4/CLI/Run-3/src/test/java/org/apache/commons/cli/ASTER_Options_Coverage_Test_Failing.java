/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Failing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringInitialEmpty_wZPO0_fid1() {
        Options options = new Options();
        String expected = "[ Options: [ short null ] [ long null ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithShortOptsOnly_TZCn1_oGFw0_fid1() {
        Options options = new Options();
        Option shortOption = new Option("opt", "description");
        options.addOption("opt", "description");
        String expected = "[ Options: [ short [opt] ] [ long [] ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOptsOnly_ilCZ2_JbMO0_fid1() {
        Options options = new Options();
        options.addOption("longOption", "A long option");
        String expected = "[ Options: [ short null ] [ long longOption ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBothOpts_sahK3_MsNR0_fid1() {
        Options options = new Options();
        Option shortOption = new Option("s", "shortOptions", false, "Short option description");
        Option longOption = new Option("l", "longOptions", true, "Long option description");
        options.addOption(shortOption);
        options.addOption(longOption);
        String expected = "[ Options: [ short shortOptions ] [ long longOptions ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyLongOpts_HifI5_GwTm0_fid1() {
        Options options = new Options();
        options.addOption("s", "shortOptions");
        String expected = "[ Options: [ short shortOptions ] [ long  ]";
        assertEquals(expected, options.toString());
    }
}