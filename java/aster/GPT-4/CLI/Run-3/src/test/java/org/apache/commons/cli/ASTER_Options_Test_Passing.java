/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Test_Passing {
    private OptionGroup mockOptionGroup;
    private Map<String, OptionGroup> optionGroups = new LinkedHashMap<>();
    private Options newOptions;
    private Option option1;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHelpOptionsReturnsEmptyListWhenNoOptionsAreSet_NoDQ0() throws Exception {
        Options options = new Options();
        assertTrue(options.helpOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_ttAO0_1() throws Exception {
        Options options = new Options();
        String opt = "v";
        String longOpt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        options.addRequiredOption(opt, longOpt, hasArg, description);
        Option resultOption = options.getOption(opt);
        assertNotNull(resultOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_ttAO0_2() throws Exception {
        Options options = new Options();
        String opt = "v";
        String longOpt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        options.addRequiredOption(opt, longOpt, hasArg, description);
        Option resultOption = options.getOption(opt);
        assertTrue(resultOption.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_ttAO0_3() throws Exception {
        Options options = new Options();
        String opt = "v";
        String longOpt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        options.addRequiredOption(opt, longOpt, hasArg, description);
        Option resultOption = options.getOption(opt);
        assertEquals(longOpt, resultOption.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_ttAO0_4() throws Exception {
        Options options = new Options();
        String opt = "v";
        String longOpt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        options.addRequiredOption(opt, longOpt, hasArg, description);
        Option resultOption = options.getOption(opt);
        assertEquals(description, resultOption.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddRequiredOption_ttAO0_5() throws Exception {
        Options options = new Options();
        String opt = "v";
        String longOpt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        options.addRequiredOption(opt, longOpt, hasArg, description);
        Option resultOption = options.getOption(opt);
        assertFalse(resultOption.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOption_snJi0_1() throws Exception {
        Options options = new Options();
        Option opt = new Option("o", "longOption", true, "Option with long option");
        options.addOption(opt);
        assertTrue(options.hasLongOption("longOption"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithLongOption_snJi0_2() throws Exception {
        Options options = new Options();
        Option opt = new Option("o", "longOption", true, "Option with long option");
        options.addOption(opt);
        assertEquals(opt, options.getOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOption_NmNB1_1() throws Exception {
        Options options = new Options();
        Option opt = new Option("o", false, "Option without long option");
        options.addOption(opt);
        assertFalse(options.hasLongOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionWithoutLongOption_NmNB1_2() throws Exception {
        Options options = new Options();
        Option opt = new Option("o", false, "Option without long option");
        options.addOption(opt);
        assertEquals(opt, options.getOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionRequired_Uwch2_1() throws Exception {
        Options options = new Options();
        Option opt = new Option("r", "requiredOption", true, "Required option");
        opt.setRequired(true);
        options.addOption(opt);
        assertTrue(options.getRequiredOptions().contains("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionRequired_Uwch2_2() throws Exception {
        Options options = new Options();
        Option opt = new Option("r", "requiredOption", true, "Required option");
        opt.setRequired(true);
        options.addOption(opt);
        assertEquals(opt, options.getOption("r"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionNotRequired_Huwn3_1() throws Exception {
        Options options = new Options();
        Option opt = new Option("n", "notRequiredOption", false, "Not required option");
        options.addOption(opt);
        assertFalse(options.getRequiredOptions().contains("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionNotRequired_Huwn3_2() throws Exception {
        Options options = new Options();
        Option opt = new Option("n", "notRequiredOption", false, "Not required option");
        options.addOption(opt);
        assertEquals(opt, options.getOption("n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupWithExistingOption_jZHW0_1() throws Exception {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(option);
        options.addOptionGroup(optionGroup);
        OptionGroup result = options.getOptionGroup(option);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupWithExistingOption_jZHW0_2() throws Exception {
        Options options = new Options();
        Option option = new Option("opt", "longOpt", true, "description");
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.addOption(option);
        options.addOptionGroup(optionGroup);
        OptionGroup result = options.getOptionGroup(option);
        assertTrue(result.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionGroupsReturnsEmptySetWhenNoOptionGroupsAdded_HGyy0() throws Exception {
        Options options = new Options();
        assertTrue(options.getOptionGroups().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_UYDP0_1() throws Exception {
        Options options = new Options();
        String opt = "v";
        String longOpt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        Options result = options.addOption(opt, longOpt, hasArg, description);
        Option addedOption = result.getOption(opt);
        assertNotNull(addedOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_UYDP0_2() throws Exception {
        Options options = new Options();
        String opt = "v";
        String longOpt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        Options result = options.addOption(opt, longOpt, hasArg, description);
        Option addedOption = result.getOption(opt);
        assertEquals(longOpt, addedOption.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_UYDP0_3() throws Exception {
        Options options = new Options();
        String opt = "v";
        String longOpt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        Options result = options.addOption(opt, longOpt, hasArg, description);
        Option addedOption = result.getOption(opt);
        assertEquals(hasArg, addedOption.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_UYDP0_4() throws Exception {
        Options options = new Options();
        String opt = "v";
        String longOpt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        Options result = options.addOption(opt, longOpt, hasArg, description);
        Option addedOption = result.getOption(opt);
        assertEquals(description, addedOption.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithNoDuplicates_wfCD0() throws Exception {
        Options options1 = new Options();
        options1.addOption("a", "alpha", false, "Alpha option");
        options1.addOption("b", "beta", true, "Beta option");
        Options options2 = new Options();
        options2.addOption("c", "gamma", true, "Gamma option");
        Options result = options1.addOptions(options2);
        assertEquals(3, result.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithDuplicates_UOdE1() throws Exception {
        Options options1 = new Options();
        options1.addOption("a", "alpha", false, "Alpha option");
        Options options2 = new Options();
        options2.addOption("a", "alpha", false, "Alpha option");
        assertThrows(IllegalArgumentException.class, () -> {
            options1.addOptions(options2);
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionsWithOptionGroups_SefG2() throws Exception {
        Options options1 = new Options();
        OptionGroup group1 = new OptionGroup();
        group1.addOption(new Option("x", "extra", false, "Extra option"));
        options1.addOptionGroup(group1);
        Options options2 = new Options();
        OptionGroup group2 = new OptionGroup();
        group2.addOption(new Option("y", "yet", true, "Yet option"));
        options2.addOptionGroup(group2);
        Options result = options1.addOptions(options2);
        assertEquals(2, result.getOptionGroups().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroupWithRequiredGroup_fLBM0_1() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        Option option = new Option("key", "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertTrue(options.getRequiredOptions().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroupWithRequiredGroup_fLBM0_2() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        Option option = new Option("key", "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroupWithRequiredGroup_fLBM0_3() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(true);
        Option option = new Option("key", "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertEquals(group, options.getOptionGroup(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroupWithNonRequiredGroup_kljB1_1() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(false);
        Option option = new Option("key", "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertFalse(options.getRequiredOptions().contains(group));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroupWithNonRequiredGroup_kljB1_2() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(false);
        Option option = new Option("key", "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOptionGroupWithNonRequiredGroup_kljB1_3() throws Exception {
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.setRequired(false);
        Option option = new Option("key", "description");
        group.addOption(option);
        options.addOptionGroup(group);
        assertEquals(group, options.getOptionGroup(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_exLG0_1() throws Exception {
        Options options = new Options();
        String opt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        options.addOption(opt, hasArg, description);
        assertTrue(options.hasOption(opt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_exLG0_2() throws Exception {
        Options options = new Options();
        String opt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        options.addOption(opt, hasArg, description);
        assertNotNull(options.getOption(opt));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_exLG0_3() throws Exception {
        Options options = new Options();
        String opt = "verbose";
        boolean hasArg = false;
        String description = "Enables verbose mode";
        options.addOption(opt, hasArg, description);
        assertEquals(description, options.getOption(opt).getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetRequiredOptionsReturnsUnmodifiableList_UJET0() throws Exception {
        Options options = new Options();
        List<?> result = options.getRequiredOptions();
        assertThrows(UnsupportedOperationException.class, () -> result.add(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionWithNonExistingOption_jEfp2() throws Exception {
        Options options = new Options();
        assertFalse(options.hasOption("nonexistent"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_uPtk0() throws Exception {
        Options options = new Options();
        String opt = "verbose";
        String description = "Enables verbose mode";
        options.addOption(opt, description);
        assertTrue(options.hasOption(opt));
    }
}