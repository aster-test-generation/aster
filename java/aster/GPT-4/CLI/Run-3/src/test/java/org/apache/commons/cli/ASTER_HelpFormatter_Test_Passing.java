/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.Comparator;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptPrefix_HYea0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.getOptPrefix();
        assertEquals("Expected default prefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetWidth_IbQM0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(80);
        assertEquals(80, formatter.defaultWidth);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptSeparator_tpor0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.getLongOptSeparator();
        assertNotNull("Long option separator should not be null", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_SxzI0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        formatter.printHelp("usage", options);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_ShortTextNoWrap_DCqt0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "Short text";
        int width = 20;
        int nextLineTabStop = 5;
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("Short text", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_LongTextWithWrap_ffmf1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a longer piece of text that should wrap around at least once";
        int width = 10;
        int nextLineTabStop = 5;
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertTrue(result.toString().contains("\n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_ExactWidthNoWrap_NdQs2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "1234567890";
        int width = 10;
        int nextLineTabStop = 5;
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("1234567890", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_EmptyText_WWaD3() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "";
        int width = 10;
        int nextLineTabStop = 5;
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertEquals("", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_TabStopGreaterThanWidth_CjgS4() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This text has a tab stop greater than the width.";
        int width = 10;
        int nextLineTabStop = 15;
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertTrue(result.toString().contains("\n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_NewLineInText_mcdl5() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This text contains a new line\ncharacter.";
        int width = 20;
        int nextLineTabStop = 5;
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        assertTrue(result.toString().contains("\n"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_NewLineBeforeWidth_qrHr0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 10;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_TabBeforeWidth_yDlx1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 10;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_EndOfString_mwgi2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 11;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_SpaceBeforeWidth_Xvzk3() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(5, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_BreakAtNewLine_rxBt5() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\nWorld";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_BreakAtTab_sike6() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello\tWorld";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_BreakAtSpace_kaEO7() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 7;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(6, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_NoBreakCharacterWithinWidth_umqt8() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String text = "HelloWorld";
        int width = 10;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_StartPosAtMiddle_GHzb9() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 5;
        int startPos = 6;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_WidthZero_uyfZ10() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String text = "Hello World";
        int width = 0;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(0, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFindWrapPos_EmptyString_Pmsu11() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String text = "";
        int width = 5;
        int startPos = 0;
        int result = formatter.findWrapPos(text, width, startPos);
        assertEquals(-1, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_YCuL0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setArgName("exampleArgName");
        assertEquals("exampleArgName", formatter.defaultArgName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLeftPadding_dsjo0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setLeftPadding(10);
        assertEquals(10, formatter.defaultLeftPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_rjPr0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "usage: java MyApp";
        boolean autoUsage = true;
        formatter.printHelp(cmdLineSyntax, options, autoUsage);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreatePaddingWithPositiveLength_VHqq0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.createPadding(5);
        assertEquals("     ", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_EmptyOptions_vMkG0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertEquals("", result.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_SingleShortOption_OnBA1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", false, "Option A");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_SingleLongOption_pMTX2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption(null, "long", false, "Long option");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("--long"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_OptionWithArgument_CJUt3() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("b", "longb", true, "Option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("<arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_MultipleOptions_BWxp4_1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "longa", false, "First option");
        options.addOption("b", "longb", true, "Second option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-a, --longa"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_MultipleOptions_BWxp4_2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("a", "longa", false, "First option");
        options.addOption("b", "longb", true, "Second option with argument");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-b, --longb <arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_WideWidth_JOZk5() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("c", "longc", false, "Wide option");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 120, options, 2, 5);
        assertTrue(result.toString().contains("--longc"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_NarrowWidth_jrZV6() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("d", "longd", true, "Narrow option");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 30, options, 2, 5);
        assertTrue(result.toString().contains("--longd"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_NoPadding_pIDE7() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("e", "longe", false, "Option no padding");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 0, 0);
        assertTrue(result.toString().contains("-e, --longe"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_MaxPadding_gzut8() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("f", "longf", true, "Option max padding");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 10, 10);
        assertTrue(result.toString().contains("-f, --longf <arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_DescriptionPadding_wavY9() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("g", "longg", false, "Option description padding");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 10);
        assertTrue(result.toString().contains("Option description padding"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_LongDescription_ejEP10() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("h", "longh", false, "This is a very long description that should wrap around in the output buffer");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 50, options, 2, 5);
        assertTrue(result.toString().contains("This is a very long description that should wrap"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_ShortDescription_NNKa11() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("i", "longi", false, "Short");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("Short"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_EmptyDescription_gfxU12() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("j", "longj", false, "");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-j, --longj"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_NullDescription_XtGo13() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addOption("k", "longk", false, null);
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-k, --longk"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_OptionGroup_cFbX14() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("l", "longl", false, "Group option"));
        options.addOptionGroup(group);
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-l, --longl"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_MultipleOptionGroups_MLZl15_1() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group1 = new OptionGroup();
        group1.addOption(new Option("m", "longm", false, "First group option"));
        OptionGroup group2 = new OptionGroup();
        group2.addOption(new Option("n", "longn", true, "Second group option"));
        options.addOptionGroup(group1);
        options.addOptionGroup(group2);
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-m, --longm"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_MultipleOptionGroups_MLZl15_2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        OptionGroup group1 = new OptionGroup();
        group1.addOption(new Option("m", "longm", false, "First group option"));
        OptionGroup group2 = new OptionGroup();
        group2.addOption(new Option("n", "longn", true, "Second group option"));
        options.addOptionGroup(group1);
        options.addOptionGroup(group2);
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-n, --longn <arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptions_RequiredOption_wgta16() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        options.addRequiredOption("o", "longo", false, "Required option");
        StringBuffer sb = new StringBuffer();
        StringBuffer result = formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(result.toString().contains("-o, --longo"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetNewLine_cJmq0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String newLine = "\n";
        formatter.setNewLine(newLine);
        assertEquals(newLine, formatter.defaultNewLine);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSyntaxPrefix_wBxf0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.getSyntaxPrefix();
        assertEquals("Expected syntax prefix", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_SMgL0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "usage: java MyApp";
        String header = "Header: MyApp options";
        String footer = "Footer: End of options";
        boolean autoUsage = true;
        formatter.printHelp(cmdLineSyntax, header, options, footer, autoUsage);
        assertTrue(true);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNewLine_wQCr0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.getNewLine();
        assertEquals("\n", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetLongOptPrefix_URVB0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String expectedPrefix = "--";
        formatter.setLongOptPrefix(expectedPrefix);
        assertEquals(expectedPrefix, formatter.defaultLongOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_KVsC0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String expected = "defaultArgName"; // Assuming "defaultArgName" is a valid default value
        assertEquals(expected, formatter.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionComparator_xvIN0() throws Exception {
        HelpFormatter helpFormatter = new HelpFormatter();
        Comparator<Option> result = helpFormatter.getOptionComparator();
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetOptPrefix_wguD0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String expectedPrefix = "newPrefix";
        formatter.setOptPrefix(expectedPrefix);
        assertEquals(expectedPrefix, formatter.defaultOptPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetDescPadding_aIRg0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setDescPadding(10);
        assertEquals(10, formatter.defaultDescPad);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLeftPadding_sxZu0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        int expected = 0; // Assuming defaultLeftPad is initialized to 0
        assertEquals(expected, formatter.getLeftPadding());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptPrefix_gjUo0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.getLongOptPrefix();
        assertEquals("--", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithTrailingSpaces_cKMJ0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("hello world   ");
        assertEquals("hello world", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithOnlySpaces_gIaM2() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim("     ");
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRtrimWithNull_CGNs4() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String result = formatter.rtrim(null);
        assertNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSyntaxPrefix_Wryj0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        String expectedPrefix = "Usage: ";
        formatter.setSyntaxPrefix(expectedPrefix);
        assertEquals(expectedPrefix, formatter.defaultSyntaxPrefix);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testPrintHelp_yxAn0() throws Exception {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        String cmdLineSyntax = "usage: java MyApp";
        String header = "Header: MyApp options";
        String footer = "Footer: End of options";
        formatter.printHelp(cmdLineSyntax, header, options, footer);
        assertTrue(true);
    }
}