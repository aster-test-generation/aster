/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_PatternOptionBuilder_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueTypeWithCharAt_YxXm0() throws Exception {
        assertEquals(PatternOptionBuilder.OBJECT_VALUE, PatternOptionBuilder.getValueType('@'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testUnsupported_wDyP0() throws Exception {
        Object result = PatternOptionBuilder.unsupported();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternEmpty_Nhxg0() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("");
        assertTrue(options.getOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternSingleOption_PoCz1_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternSingleOption_PoCz1_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a");
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternSingleOptionWithRequirement_XWZn2_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternSingleOptionWithRequirement_XWZn2_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!");
        assertTrue(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternSingleOptionWithType_ZXKd3_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a%");
        assertEquals(1, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternSingleOptionWithType_ZXKd3_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a%");
        assertEquals(Integer.class, options.getOption("a").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptions_Sxym4_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("ab");
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptions_Sxym4_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("ab");
        assertTrue(options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptions_Sxym4_3() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("ab");
        assertTrue(options.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptionsWithTypesAndRequirements_cjrq5_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!%b#");
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptionsWithTypesAndRequirements_cjrq5_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!%b#");
        assertTrue(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptionsWithTypesAndRequirements_cjrq5_3() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!%b#");
        assertEquals(Integer.class, options.getOption("a").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternMultipleOptionsWithTypesAndRequirements_cjrq5_4() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!%b#");
        assertEquals(String.class, options.getOption("b").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionGroup_onQI6_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a|b");
        assertEquals(2, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionGroup_onQI6_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a|b");
        assertNotNull(options.getOptionGroup(options.getOption("a")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternOptionGroup_onQI6_3() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a|b");
        assertNotNull(options.getOptionGroup(options.getOption("b")));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternComplex_Talh7_1() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!%b#c|d*");
        assertEquals(4, options.getOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternComplex_Talh7_2() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!%b#c|d*");
        assertTrue(options.getOption("a").isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternComplex_Talh7_3() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!%b#c|d*");
        assertEquals(Integer.class, options.getOption("a").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternComplex_Talh7_4() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!%b#c|d*");
        assertEquals(String.class, options.getOption("b").getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParsePatternComplex_Talh7_5() throws Exception {
        Options options = PatternOptionBuilder.parsePattern("a!%b#c|d*");
        assertTrue(options.getOption("d").hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueClassWithValidInput_XYXD0() throws Exception {
        char inputChar = 'a'; // Assuming 'a' is a valid input for getValueType method
        Object expected = PatternOptionBuilder.getValueType(inputChar);
        Object actual = PatternOptionBuilder.getValueClass(inputChar);
        assertEquals(expected, actual);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithAtSign_zFdX0() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('@'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithColon_JUpn1() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode(':'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithPercent_pRFT2() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('%'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithPlus_bcbb3() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('+'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithHash_duCg4() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('#'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithLessThan_dkYx5() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('<'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithGreaterThan_YkBy6() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('>'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithAsterisk_Vndr7() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('*'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithSlash_rVGT8() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('/'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithExclamation_OgDO9() throws Exception {
        assertTrue(PatternOptionBuilder.isValueCode('!'));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsValueCodeWithNonSpecialCharacter_nmTd10() throws Exception {
        assertFalse(PatternOptionBuilder.isValueCode('A'));
    }
}