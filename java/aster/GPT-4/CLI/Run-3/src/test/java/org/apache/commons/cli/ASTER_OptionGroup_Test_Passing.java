/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionGroup_Test_Passing {
    private Option option2;
    private final Map<String, Option> optionMap = new LinkedHashMap<>();
    private String selected;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredTrue_VrzZ0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        optionGroup.setRequired(true);
        assertTrue(optionGroup.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetNamesReturnsEmptyCollectionWhenNoOptionsAdded_cGoN0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        assertTrue(optionGroup.getNames().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOptionsReturnsEmptyCollectionWhenNoOptionsAdded_fcew0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        assertTrue(optionGroup.getOptions().isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_CpXM0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        boolean result = optionGroup.isRequired();
        assertEquals(false, result); // Assuming default 'required' is false
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetSelectedReturnsNullInitially_MdhS0() throws Exception {
        OptionGroup optionGroup = new OptionGroup();
        assertNull("Expected initial selected value to be null", optionGroup.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringEmptyOptionGroup_ryer0() throws Exception {
        OptionGroup group = new OptionGroup();
        assertEquals("[]", group.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringSingleShortOption_iHDw1() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option = new Option("a", "alpha", false, "Alpha option");
        group.addOption(option);
        assertEquals("[-a Alpha option]", group.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringSingleLongOption_vozV2() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option = new Option(null, "beta", false, "Beta option");
        group.addOption(option);
        assertEquals("[--beta Beta option]", group.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringMultipleOptions_iIyw3() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option1 = new Option("a", "alpha", false, "Alpha option");
        Option option2 = new Option(null, "beta", false, "Beta option");
        group.addOption(option1);
        group.addOption(option2);
        assertEquals("[-a Alpha option, --beta Beta option]", group.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringOptionWithoutDescription_Xbut4() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option = new Option("c", null, false, null);
        group.addOption(option);
        assertEquals("[-c]", group.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_ZWLr0() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option = new Option("opt", "longOpt", true, "Test option");
        group.addOption(option);
        assertTrue(group.getOptions().contains(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelected_NullOption_qmQF0() throws Exception {
        OptionGroup group = new OptionGroup();
        group.setSelected(null);
        assertNull(group.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelected_FirstTimeSelection_zAfM1() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option = new Option("a", "alpha", false, "Alpha option");
        group.setSelected(option);
        assertEquals("a", group.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetSelected_SameOptionSelectedTwice_xeVB2() throws Exception {
        OptionGroup group = new OptionGroup();
        Option option = new Option("a", "alpha", false, "Alpha option");
        group.setSelected(option);
        group.setSelected(option);
        assertEquals("a", group.getSelected());
    }
}