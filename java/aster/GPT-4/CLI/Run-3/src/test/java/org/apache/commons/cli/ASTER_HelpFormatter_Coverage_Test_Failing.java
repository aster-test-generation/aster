/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.when;

import java.io.PrintWriter;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_HelpFormatter_Coverage_Test_Failing {
    private HelpFormatter helpFormatter;
    private PrintWriter printWriter;
    private Options options;
    private Option option;
    private OptionGroup optionGroup;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderWrappedText_CoverSpecialCondition_WWLl0() {
        HelpFormatter formatter = new HelpFormatter();
        StringBuffer sb = new StringBuffer();
        String text = "This is a long line that needs to wrap around more than once";
        int width = 10;
        int nextLineTabStop = 9; // Set this to width - 1 to trigger the special condition
        StringBuffer result = formatter.renderWrappedText(sb, width, nextLineTabStop, text);
        String expected = "This is a\nlong line\nthat needs\nto wrap\naround\nmore than\nonce";
        assertEquals(expected, result.toString().trim());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithEmptyArgName_bYvh1() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "description");
        option.setArgName("");
        options.addOption(option);
        when(options.helpOptions()).thenReturn(Arrays.asList(option));
        when(formatter.getArgName()).thenReturn("arg");
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(sb.toString().contains(" "));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithLongOptSeparator_gRxJ2() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "description");
        option.setLongOpt("alpha");
        options.addOption(option);
        when(options.helpOptions()).thenReturn(Arrays.asList(option));
        when(formatter.getLongOptSeparator()).thenReturn("=");
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(sb.toString().contains("="));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithArgName_RkmL3() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("a", null, true, "description");
        option.setArgName("arg");
        options.addOption(option);
        when(options.helpOptions()).thenReturn(Arrays.asList(option));
        when(formatter.getArgName()).thenReturn("arg");
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(sb.toString().contains("<arg>"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testRenderOptionsWithNonEmptyArgName_gjgH7() {
        HelpFormatter formatter = new HelpFormatter();
        Options options = new Options();
        Option option = new Option("a", "alpha", true, "description");
        option.setArgName("value");
        options.addOption(option);
        when(options.helpOptions()).thenReturn(Arrays.asList(option));
        StringBuffer sb = new StringBuffer();
        formatter.renderOptions(sb, 80, options, 2, 5);
        assertTrue(sb.toString().contains("<value>"));
    }
}