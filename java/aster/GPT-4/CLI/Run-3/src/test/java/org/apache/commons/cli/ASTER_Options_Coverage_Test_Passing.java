/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Options_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringInitialEmpty_wZPO0() {
        Options options = new Options();
        String expected = "[ Options: [ short {} ] [ long {} ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionAlreadyExists_upBM0_1() {
        Options options = new Options();
        Option opt1 = new Option("a", "alpha", true, "First Option");
        opt1.setRequired(true);
        options.addOption(opt1); // Add the option initially
        Option opt2 = new Option("a", "alpha", true, "Second Option");
        opt2.setRequired(true);
        options.addOption(opt2);
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionAlreadyExists_upBM0_2() {
        Options options = new Options();
        Option opt1 = new Option("a", "alpha", true, "First Option");
        opt1.setRequired(true);
        options.addOption(opt1); // Add the option initially
        Option opt2 = new Option("a", "alpha", true, "Second Option");
        opt2.setRequired(true);
        options.addOption(opt2);
        assertTrue(options.getRequiredOptions().contains("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionNotExistsInitially_Fiye1_1() {
        Options options = new Options();
        Option opt = new Option("b", "beta", true, "Option Description");
        opt.setRequired(true);
        options.addOption(opt);
        assertEquals(1, options.getRequiredOptions().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionNotExistsInitially_Fiye1_2() {
        Options options = new Options();
        Option opt = new Option("b", "beta", true, "Option Description");
        opt.setRequired(true);
        options.addOption(opt);
        assertTrue(options.getRequiredOptions().contains("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithShortOptsOnly_TZCn1_oGFw0() {
        Options options = new Options();
        Option shortOption = new Option("opt", "description");
        options.addOption("opt", "description");
        String expected = "[ Options: [ short {opt=[ Option opt :: description :: class java.lang.String ]} ] [ long {} ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOptsOnly_ilCZ2_JbMO0() {
        Options options = new Options();
        options.addOption("longOption", "A long option");
        String expected = "[ Options: [ short {longOption=[ Option longOption :: A long option :: class java.lang.String ]} ] [ long {} ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithBothOpts_sahK3_MsNR0() {
        Options options = new Options();
        Option shortOption = new Option("s", "shortOptions", false, "Short option description");
        Option longOption = new Option("l", "longOptions", true, "Long option description");
        options.addOption(shortOption);
        options.addOption(longOption);
        String expected = "[ Options: [ short {s=[ Option s shortOptions :: Short option description :: class java.lang.String ], l=[ Option l longOptions [ARG] :: Long option description :: class java.lang.String ]} ] [ long {shortOptions=[ Option s shortOptions :: Short option description :: class java.lang.String ], longOptions=[ Option l longOptions [ARG] :: Long option description :: class java.lang.String ]} ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithEmptyLongOpts_HifI5_GwTm0() {
        Options options = new Options();
        options.addOption("s", "shortOptions");
        String expected = "[ Options: [ short {s=[ Option s :: shortOptions :: class java.lang.String ]} ] [ long {} ]";
        assertEquals(expected, options.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_otUv0_dphM0_1() {
        Options options = new Options();
        options.addOption("a", "Option a");
        options.addOption("alpha", "Option alpha");
        assertTrue(options.hasOption("a"), "Expected to find 'a' as a short option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_otUv0_dphM0_2() {
        Options options = new Options();
        options.addOption("a", "Option a");
        options.addOption("alpha", "Option alpha");
        assertTrue(options.hasOption("alpha"), "Expected to find 'alpha' as a long option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOption_otUv0_dphM0_3() {
        Options options = new Options();
        options.addOption("a", "Option a");
        options.addOption("alpha", "Option alpha");
        assertFalse(options.hasOption("beta"), "Did not expect to find 'beta' as an option");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionAlreadyExists_upBM0() {
        Options options = new Options();
        Option opt1 = new Option("a", "alpha", true, "First Option");
        opt1.setRequired(true);
        options.addOption(opt1); // Add the option initially
        Option opt2 = new Option("a", "alpha", true, "Second Option");
        opt2.setRequired(true);
        options.addOption(opt2);
        assertEquals(1, options.getRequiredOptions().size());
        assertTrue(options.getRequiredOptions().contains("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testAddOption_RequiredOptionNotExistsInitially_Fiye1() {
        Options options = new Options();
        Option opt = new Option("b", "beta", true, "Option Description");
        opt.setRequired(true);
        options.addOption(opt);
        assertEquals(1, options.getRequiredOptions().size());
        assertTrue(options.getRequiredOptions().contains("b"));
    }
}