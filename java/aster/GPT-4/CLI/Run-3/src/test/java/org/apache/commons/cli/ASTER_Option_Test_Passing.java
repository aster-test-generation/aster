/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_Option_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgs_WithArg_dbyg0() throws Exception {
        Option option = new Option("o", true, "Option with argument");
        assertEquals(1, option.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDescription_lqnR0() throws Exception {
        Option option = new Option("opt", "This is a test description");
        assertEquals("This is a test description", option.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetArgName_qnVr0() throws Exception {
        Option option = new Option("o", "option", true, "Test option");
        option.setArgName("argumentName");
        assertEquals("argumentName", option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetLongOptWithLongOption_mCyC0() throws Exception {
        Option option = new Option("opt", "longOpt", true, "description");
        assertEquals("longOpt", option.getLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetRequiredTrue_wLmn0() throws Exception {
        Option option = new Option("a", "alpha", true, "Option requires an argument");
        option.setRequired(true);
        assertTrue(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyValuesList_ZXSn0() throws Exception {
        Option option = new Option("a", "Option A");
        assertNull(option.getValue(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameObject_ulAD0() throws Exception {
        Option option = new Option("a", "alpha", true, "Option A");
        assertTrue(option.equals(option));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentType_hagu1() throws Exception {
        Option option = new Option("a", "alpha", true, "Option A");
        assertFalse(option.equals(new Object()));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithNull_VRZj2() throws Exception {
        Option option = new Option("a", "alpha", true, "Option A");
        assertFalse(option.equals(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithDifferentValues_qfnK3() throws Exception {
        Option option1 = new Option("a", "alpha", true, "Option A");
        Option option2 = new Option("b", "beta", true, "Option B");
        assertFalse(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testEqualsWithSameValues_dOfT4() throws Exception {
        Option option1 = new Option("a", "alpha", true, "Option A");
        Option option2 = new Option("a", "alpha", true, "Option A");
        assertTrue(option1.equals(option2));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithLongOption_BACH0() throws Exception {
        Option option = new Option("a", "longOption", true, "description");
        String expected = "[ Option a longOption [ARG] :: description :: null ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithoutLongOption_EyMJ1() throws Exception {
        Option option = new Option("b", false, "description");
        String expected = "[ Option b :: description :: null ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithOnlyShortOption_BayM2() throws Exception {
        Option option = new Option("c", "description");
        String expected = "[ Option c :: description :: null ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithArgs_UZfL3() throws Exception {
        Option option = new Option("d", "longOption", true, "description");
        String expected = "[ Option d longOption [ARG] :: description :: null ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToStringWithoutArgs_jqiS4() throws Exception {
        Option option = new Option("e", "longOption", false, "description");
        String expected = "[ Option e longOption :: description :: null ]";
        assertEquals(expected, option.toString());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testToDeprecatedStringWhenNotDeprecated_omNt0() throws Exception {
        Option option = new Option("a", "alpha", false, "Option A");
        String result = option.toDeprecatedString();
        assertEquals("", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueSeparator_jNbX0() throws Exception {
        Option option = new Option("o", "option", true, "Test option with value separator");
        char result = option.getValueSeparator();
        assertEquals(';', result); // Assuming ';' is the default value separator
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneMethod_EZIq0_1() throws Exception {
        Option originalOption = new Option("a", "alpha", true, "Test option");
        Option clonedOption = (Option) originalOption.clone();
        assertNotSame(originalOption, clonedOption);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneMethod_EZIq0_2() throws Exception {
        Option originalOption = new Option("a", "alpha", true, "Test option");
        Option clonedOption = (Option) originalOption.clone();
        assertEquals(originalOption.getClass(), clonedOption.getClass());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneMethod_EZIq0_3() throws Exception {
        Option originalOption = new Option("a", "alpha", true, "Test option");
        Option clonedOption = (Option) originalOption.clone();
        assertEquals(originalOption.getDescription(), clonedOption.getDescription());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneMethod_EZIq0_4() throws Exception {
        Option originalOption = new Option("a", "alpha", true, "Test option");
        Option clonedOption = (Option) originalOption.clone();
        assertNotSame(originalOption.getValues(), clonedOption.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCloneMethod_EZIq0_5() throws Exception {
        Option originalOption = new Option("a", "alpha", true, "Test option");
        Option clonedOption = (Option) originalOption.clone();
        assertEquals(originalOption.getValues(), clonedOption.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetDeprecated_PVnL0() throws Exception {
        Option option = new Option("a", "longA", true, "Test option");
        DeprecatedAttributes deprecatedAttributes = option.getDeprecated();
        assertNotNull(deprecatedAttributes);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testProcessValue_NoArgsAllowed_shso3() throws Exception {
        Option option = new Option("d", "No args allowed");
        try {
            option.processValue("anyValue");
            fail("Expected an IllegalArgumentException to be thrown");
        } catch (IllegalArgumentException e) {
            assertEquals("NO_ARGS_ALLOWED", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHashCodeConsistency_MUDR0() throws Exception {
        Option option1 = new Option("a", "alpha", true, "Option A");
        int hashCode1 = option1.hashCode();
        int hashCode2 = option1.hashCode();
        assertEquals(hashCode1, hashCode2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetOpt_KnYx0() throws Exception {
        Option option = new Option("opt", "Option for testing", false, "This is a test description");
        String result = option.getOpt();
        assertEquals("opt", result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithValidClassType_qjho0() throws Exception {
        Option option = new Option("a", "alpha", true, "Option with argument");
        option.setType(String.class);
        assertEquals(String.class, option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetIdWithSingleCharacterOption_BGcj0() throws Exception {
        Option option = new Option("a", "Option with single character");
        assertEquals('a', option.getId());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesReturnsNullWhenNoValues_CuGE0() throws Exception {
        Option option = new Option("a", "alpha", false, "No values");
        assertNull(option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesReturnsNonEmptyArrayWhenValuesExist_ndLg1() throws Exception {
        Option option = new Option("b", "beta", true, "With values");
        option.addValue("value1");
        option.addValue("value2");
        String[] expected = {"value1", "value2"};
        assertArrayEquals(expected, option.getValues());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetType_XECv0() throws Exception {
        Option option = new Option("a", "alpha", true, "Test option");
        assertNull(option.getType());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyWithShortOption_kDsc0() throws Exception {
        Option option = new Option("o", "Option for testing", false, "Test description");
        assertEquals("o", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetKeyWithLongOption_vOLA1() throws Exception {
        Option option = new Option(null, "longOption", false, "Test description");
        assertEquals("longOption", option.getKey());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithLongOption_VMaj0() throws Exception {
        Option option = new Option("opt", "longOpt", true, "description");
        assertTrue(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasLongOptWithoutLongOption_oOEI1() throws Exception {
        Option option = new Option("opt", true, "description");
        assertFalse(option.hasLongOpt());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgTrueWithArg_aStd0() throws Exception {
        Option option = new Option("a", "alpha", true, "Option with argument");
        assertTrue(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgFalseWithoutArg_olTi1() throws Exception {
        Option option = new Option("b", "beta", false, "Option without argument");
        assertFalse(option.hasArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWhenNoValues_CVjT0() throws Exception {
        Option option = new Option("a", "alpha", false, "Option without values");
        assertNull(option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithSingleValue_xoYQ1() throws Exception {
        Option option = new Option("b", "beta", true, "Option with single value");
        option.addValue("testValue");
        assertEquals("testValue", option.getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValuesList_aRGU0() throws Exception {
        Option option = new Option("opt", "Option for testing", false, "Test description");
        List<String> expectedValues = new ArrayList<>();
        assertEquals(expectedValues, option.getValuesList());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetArgName_JhFi0() throws Exception {
        Option option = new Option("opt", "longOpt", true, "Test description");
        String expected = "argName";
        assertEquals(expected, option.getArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsDeprecatedWhenNotDeprecated_GaSv0() throws Exception {
        Option option = new Option("a", "alpha", false, "Option without deprecation");
        assertFalse(option.isDeprecated());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArg_AuhP0() throws Exception {
        Option option = new Option("opt", "longOpt", true, "Test option with optional argument");
        assertTrue(option.hasOptionalArg());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithArgNameSet_RjUZ0() throws Exception {
        Option option = new Option("a", "alpha", true, "Option with argument");
        assertTrue(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithNoArgName_lwDl1() throws Exception {
        Option option = new Option("b", false, "Option without argument");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgNameWithEmptyArgName_OQlf2() throws Exception {
        Option option = new Option("c", "Option with empty argument name");
        assertFalse(option.hasArgName());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithDefaultValueNonNull_iKGA0() throws Exception {
        Option option = new Option("a", "alpha", true, "Option with argument");
        assertEquals("default", option.getValue("default"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithDefaultValueNull_rOLG1() throws Exception {
        Option option = new Option("b", false, "Option without argument");
        assertEquals(null, option.getValue(null));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithEmptyDefaultValue_gmPA3() throws Exception {
        Option option = new Option("d", "Option without argument");
        assertEquals("", option.getValue(""));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithNonEmptyDefaultValue_kTLQ4() throws Exception {
        Option option = new Option("e", true, "Option with argument");
        assertEquals("non-empty", option.getValue("non-empty"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testGetValueWithDefaultValueWhenValueIsNull_wgDl5() throws Exception {
        Option option = new Option("f", "foxtrot", false, "Option without argument");
        assertEquals("default", option.getValue("default"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequired_iVeW0() throws Exception {
        Option option = new Option("opt", "Option description");
        assertFalse(option.isRequired());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testSetTypeWithValidClass_yrRb0() throws Exception {
        Option option = new Option("a", "alpha", true, "Option with argument");
        option.setType(Integer.class);
        assertEquals(Integer.class, option.getType());
    }
}