/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_DefaultParser_Test_Passing {
    private CommandLine commandLine;

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_HrlK0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.getOptions().length == 2);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_zmtj1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = false;
        assertThrows(UnrecognizedOptionException.class, () -> parser.handleConcatenatedOptions("-ax"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_bGUy2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-ax");
        assertTrue(parser.cmd.getArgs().length == 1 && parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_WithArgument_VCWB3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "option a");
        parser.options = options;
        parser.handleConcatenatedOptions("-a123");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArguments_KvmD4_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "option a");
        options.addOption("b", true, "option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-a123-b456");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptionsWithArguments_KvmD4_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "option a");
        options.addOption("b", true, "option b");
        parser.options = options;
        parser.handleConcatenatedOptions("-a123-b456");
        assertEquals("456", parser.cmd.getOptionValue("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOptionWithStopAtNonOption_xoLj5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.getArgs().length == 1 && parser.skipParsing);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOptionWithoutStopAtNonOption_MOaU6() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        parser.options = options;
        parser.stopAtNonOption = false;
        assertThrows(UnrecognizedOptionException.class, () -> parser.handleConcatenatedOptions("-b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_uCJp2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        parser.options = options;
        assertThrows(ParseException.class, () -> parser.handleConcatenatedOptions("-x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleKnownOption_BNSK0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", false, "test option");
        options.addOption(opt);
        parser.options = options;
        parser.handleConcatenatedOptions("-a");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_LrBE1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption(new Option("a", false, "option a"));
        options.addOption(new Option("b", false, "option b"));
        parser.options = options;
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_LrBE1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption(new Option("a", false, "option a"));
        options.addOption(new Option("b", false, "option b"));
        parser.options = options;
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_CeZm2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        parser.options = options;
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.handleConcatenatedOptions("-x");
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_eJgG3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", true, "option requires argument");
        options.addOption(opt);
        parser.options = options;
        parser.handleConcatenatedOptions("-a123");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithMissingArgument_WAHp4_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", true, "option requires argument");
        options.addOption(opt);
        parser.options = options;
        Exception exception = assertThrows(MissingArgumentException.class, () -> {
            parser.handleConcatenatedOptions("-a");
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_nAMB5_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption(new Option("a", false, "option a"));
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-a123");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_nAMB5_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption(new Option("a", false, "option a"));
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-a123");
        assertFalse(parser.cmd.hasOption("123"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_WithJavaProperty_wyzA6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("D", true, "java property");
        options.addOption(opt);
        parser.options = options;
        parser.handleConcatenatedOptions("-Dkey=value");
        assertEquals("value", parser.cmd.getOptionValue("D"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleKnownOption_KKTe0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("a", "alpha", false, "Alpha option");
        options.addOption(opt);
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("-a");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_eqRH1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleKnownOptions_eqRH1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        options.addOption("b", "beta", false, "Beta option");
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_hQdo2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        parser.options = options;
        parser.cmd = new CommandLine();
        assertThrows(ParseException.class, () -> parser.handleConcatenatedOptions("-x"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_xcXb3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("f", "file", true, "File option");
        options.addOption(opt);
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.handleConcatenatedOptions("-fvalue");
        assertEquals("value", parser.cmd.getOptionValue("f"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MissingArgument_VeIf5() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        Option opt = new Option("c", "config", true, "Config option requires an argument");
        options.addOption(opt);
        parser.options = options;
        parser.cmd = new CommandLine();
        assertThrows(MissingArgumentException.class, () -> parser.handleConcatenatedOptions("-c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_DrWt6_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose mode");
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-v-extra");
        assertTrue(parser.cmd.hasOption("v"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_DrWt6_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose mode");
        parser.options = options;
        parser.cmd = new CommandLine();
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-v-extra");
        assertFalse(parser.cmd.hasOption("-extra"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_SingleOption_LXTw0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.options = new Options();
        Option opt = new Option("a", "alpha", false, "Alpha option");
        parser.options.addOption(opt);
        parser.handleConcatenatedOptions("-a");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptions_NddT1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.options = new Options();
        parser.options.addOption(new Option("a", "alpha", false, "Alpha option"));
        parser.options.addOption(new Option("b", "beta", false, "Beta option"));
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_MultipleOptions_NddT1_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.options = new Options();
        parser.options.addOption(new Option("a", "alpha", false, "Alpha option"));
        parser.options.addOption(new Option("b", "beta", false, "Beta option"));
        parser.handleConcatenatedOptions("-ab");
        assertTrue(parser.cmd.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithArgument_aeCR2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.options = new Options();
        parser.options.addOption(new Option("a", "alpha", true, "Alpha option"));
        parser.handleConcatenatedOptions("-a123");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionGroupSelection_OwUw3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.options = new Options();
        OptionGroup group = new OptionGroup();
        Option opt1 = new Option("a", "alpha", false, "Alpha option");
        Option opt2 = new Option("b", "beta", false, "Beta option");
        group.addOption(opt1).addOption(opt2);
        parser.options.addOptionGroup(group);
        parser.handleConcatenatedOptions("-a");
        assertEquals(opt1, group.getSelected());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_uUoJ4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.options = new Options();
        parser.options.addOption(new Option("a", "alpha", false, "Alpha option"));
        try {
            parser.handleConcatenatedOptions("-b");
            fail("Expected ParseException");
        } catch (ParseException e) {
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_RequiredOptionMissing_eRzX5() throws ParseException {
        DefaultParser parser = new DefaultParser();
        parser.options = new Options();
        Option opt = new Option("a", "alpha", false, "Alpha option");
        opt.setRequired(true);
        parser.options.addOption(opt);
        parser.handleConcatenatedOptions("-a");
        assertFalse(parser.expectedOpts.contains("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_WrGg6() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        parser.options = new Options();
        parser.options.addOption(new Option("a", "alpha", false, "Alpha option"));
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("-a123");
        assertEquals("123", parser.cmd.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_assL0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");
        parser.options = options;
        parser.stopAtNonOption = false;
        parser.handleConcatenatedOptions("ab");
        assertTrue(parser.options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_AllKnownOptions_assL0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");
        parser.options = options;
        parser.stopAtNonOption = false;
        parser.handleConcatenatedOptions("ab");
        assertTrue(parser.options.hasOption("b"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_UnknownOption_tTSY1_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        Exception exception = assertThrows(ParseException.class, () -> {
            parser.handleConcatenatedOptions("ac");
        });
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_wSGM2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("a-c");
        assertTrue(parser.options.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_wSGM2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("a-c");
        assertFalse(parser.options.hasOption("-"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_StopAtNonOption_wSGM2_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        parser.options = options;
        parser.stopAtNonOption = true;
        parser.handleConcatenatedOptions("a-c");
        assertFalse(parser.options.hasOption("c"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHandleConcatenatedOptions_OptionWithEmbeddedDash_zENx6() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a-b", true, "option a-b");
        parser.options = options;
        parser.stopAtNonOption = false;
        parser.handleConcatenatedOptions("a-bvalue");
        assertEquals("value", options.getOption("a-b").getValue());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_IFIE0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        CommandLine result = parser.parse(options, arguments);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_IFIE0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        CommandLine result = parser.parse(options, arguments);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_wqHV0_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_wqHV0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_GMWU1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_doNZ2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Enable verbose mode");
        String[] arguments = new String[]{"--verbose"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_doNZ2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Enable verbose mode");
        String[] arguments = new String[]{"--verbose"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("verbose"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_cDDC3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "config", true, "Config file path");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("config", "path/to/config");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_cDDC3_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("c", "config", true, "Config file path");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("config", "path/to/config");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("path/to/config", result.getOptionValue("config"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_lCUO1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        try {
            CommandLine result = parser.parse(options, arguments, properties, false);
            fail("ParseException expected");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_cTHB3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha", "randomArg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_cTHB3_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha", "randomArg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_cTHB3_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha", "randomArg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertArrayEquals(new String[]{"randomArg"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_kjrl1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_AoIJ2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_AoIJ2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_wbzW3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta", "value", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_wbzW3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta", "value", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_wbzW3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta", "value", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("value", result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_wbzW3_4() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta", "value", "non-option"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertArrayEquals(new String[]{"non-option"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_LKJg0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        CommandLine result = parser.parse(options, new String[]{}, new Properties(), false);
        assertTrue(result.getOptions().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_TLsO1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha description");
        CommandLine result = parser.parse(options, new String[]{"--alpha"}, new Properties(), false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_gFca2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta description");
        CommandLine result = parser.parse(options, new String[]{"-b", "value"}, new Properties(), false);
        assertEquals("value", result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ykTn3_1() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("c", "charlie", false, "Charlie description");
        CommandLine result = parser.parse(options, new String[]{"-c", "non-option"}, new Properties(), true);
        assertTrue(result.hasOption("charlie"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ykTn3_2() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("c", "charlie", false, "Charlie description");
        CommandLine result = parser.parse(options, new String[]{"-c", "non-option"}, new Properties(), true);
        assertEquals(1, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ykTn3_3() throws ParseException {
        DefaultParser parser = new DefaultParser(true);
        Options options = new Options();
        options.addOption("c", "charlie", false, "Charlie description");
        CommandLine result = parser.parse(options, new String[]{"-c", "non-option"}, new Properties(), true);
        assertEquals("non-option", result.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_TJoZ0() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"--alpha"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_WZQp1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("b", "beta", false, "Beta option");
        String[] arguments = {"-b"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_vghN2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--gamma"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertEquals("Unrecognized option: --gamma", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_qLGH3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option");
        String[] arguments = {"-d", "--", "non-option-arg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("delta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_qLGH3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option");
        String[] arguments = {"-d", "--", "non-option-arg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertArrayEquals(new String[]{"non-option-arg"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_FqJI0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_FqJI0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_kZly1_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_kZly1_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidLongOption_pDcN2_1() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "option", false, "A valid option");
        String[] arguments = new String[]{"--option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidLongOption_pDcN2_2() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "option", false, "A valid option");
        String[] arguments = new String[]{"--option"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ptxB3_1() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "option", false, "A valid option");
        String[] arguments = new String[]{"--option", "arg1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ptxB3_2() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "option", false, "A valid option");
        String[] arguments = new String[]{"--option", "arg1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("option"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_ptxB3_3() throws ParseException {
        Options options = new Options();
        options.addOption("opt", "option", false, "A valid option");
        String[] arguments = new String[]{"--option", "arg1"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertArrayEquals(new String[]{"arg1"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOption_hDgu0() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = {"-a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOption_OSen1() throws ParseException {
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = {"--beta=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_BzWk2() throws ParseException {
        Options options = new Options();
        String[] arguments = {"--gamma"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, arguments, properties, false);
            fail("ParseException expected due to unknown option");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_yygV3_1() throws ParseException {
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option");
        String[] arguments = {"-d", "--", "non-option-arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("d"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_yygV3_2() throws ParseException {
        Options options = new Options();
        options.addOption("d", "delta", false, "Delta option");
        String[] arguments = {"-d", "--", "non-option-arg"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("non-option-arg", result.getArgs()[0]);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_NRuc2_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose mode");
        String[] arguments = new String[]{"--verbose"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_NRuc2_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Verbose mode");
        String[] arguments = new String[]{"--verbose"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("verbose"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_MSyZ3_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha", "file.txt"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_MSyZ3_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha", "file.txt"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_MSyZ3_3() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha", "file.txt"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertArrayEquals(new String[]{"file.txt"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_HRPW0_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArguments_HRPW0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(result.getOptions().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_fuXZ1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_IIEv2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Enable verbose mode");
        String[] arguments = new String[]{"--verbose"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOption_IIEv2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("v", "verbose", false, "Enable verbose mode");
        String[] arguments = new String[]{"--verbose"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(result.hasOption("verbose"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArgumentsAndNoProperties_LSDW0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals(0, result.getArgs().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndEqualSign_ZnHC1_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndEqualSign_ZnHC1_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt=value"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndNoValue_dQrN2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        String[] arguments = new String[]{"-o"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithShortOptionAndNoValue_dQrN2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("o", "option", false, "description");
        String[] arguments = new String[]{"-o"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("o"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertiesAndStopAtNonOption_bqpy3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt=value", "nonOptionArg"};
        Properties properties = new Properties();
        properties.setProperty("longOpt", "newValue");
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertiesAndStopAtNonOption_bqpy3_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt=value", "nonOptionArg"};
        Properties properties = new Properties();
        properties.setProperty("longOpt", "newValue");
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("newValue", result.getOptionValue("longOpt"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithPropertiesAndStopAtNonOption_bqpy3_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("opt", "longOpt", true, "description");
        String[] arguments = new String[]{"--longOpt=value", "nonOptionArg"};
        Properties properties = new Properties();
        properties.setProperty("longOpt", "newValue");
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertArrayEquals(new String[]{"nonOptionArg"}, result.getArgs());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_epmX1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[]{"--unknown"};
        Properties properties = new Properties();
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException for unknown option");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_NNyg0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithNoArguments_NNyg0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals(0, result.getOptions().length);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_yQMt1_1() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithoutEqual_yQMt1_2() throws ParseException {
        Options options = new Options();
        options.addOption("a", "alpha", false, "Alpha option");
        String[] arguments = new String[]{"--alpha"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(result.hasOption("alpha"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_OvTv2_1() throws ParseException {
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_OvTv2_2() throws ParseException {
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertTrue(result.hasOption("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionWithEqual_OvTv2_3() throws ParseException {
        Options options = new Options();
        options.addOption("b", "beta", true, "Beta option");
        String[] arguments = new String[]{"--beta=value"};
        Properties properties = new Properties();
        boolean stopAtNonOption = false;
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, stopAtNonOption);
        assertEquals("value", result.getOptionValue("beta"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnknownOption_vBjo3() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[]{"--gamma"};
        Properties properties = new Properties();
        boolean stopAtNonOption = true;
        DefaultParser parser = new DefaultParser();
        try {
            parser.parse(options, arguments, properties, stopAtNonOption);
            fail("Expected ParseException was not thrown.");
        } catch (ParseException e) {
            assertNotNull(e);
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleShortOption_gldr1_1() throws Exception {
        Options options = new Options();
        options.addOption("a", false, "activate something");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithSingleShortOption_gldr1_2() throws Exception {
        Options options = new Options();
        options.addOption("a", false, "activate something");
        String[] arguments = new String[]{"-a"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_pLAx2_1() throws Exception {
        Options options = new Options();
        options.addOption("setup", "setup", true, "setup configuration");
        String[] arguments = new String[]{"--setup=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_pLAx2_2() throws Exception {
        Options options = new Options();
        options.addOption("setup", "setup", true, "setup configuration");
        String[] arguments = new String[]{"--setup=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.hasOption("setup"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithLongOptionAndValue_pLAx2_3() throws Exception {
        Options options = new Options();
        options.addOption("setup", "setup", true, "setup configuration");
        String[] arguments = new String[]{"--setup=value"};
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("setup"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_vcNx3_1() throws Exception {
        Options options = new Options();
        options.addOption("config", true, "configuration file");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("config", "path/to/config");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithProperties_vcNx3_2() throws Exception {
        Options options = new Options();
        options.addOption("config", true, "configuration file");
        String[] arguments = new String[]{};
        Properties properties = new Properties();
        properties.setProperty("config", "path/to/config");
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("path/to/config", result.getOptionValue("config"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArgumentsAndEmptyProperties_qSxg0_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertTrue(result.getOptions().length == 0);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithUnrecognizedOptionInProperties_vkgA1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "toggle A");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("b", "true");
        try {
            parser.parse(options, arguments, properties, false);
            fail("Expected ParseException was not thrown.");
        } catch (ParseException e) {
            assertEquals("Default option wasn't defined", e.getMessage());
        }
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionInProperties_mCpJ2_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "requires an argument");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithValidOptionInProperties_mCpJ2_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", true, "requires an argument");
        String[] arguments = new String[0];
        Properties properties = new Properties();
        properties.setProperty("a", "value");
        CommandLine result = parser.parse(options, arguments, properties, false);
        assertEquals("value", result.getOptionValue("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStoppingAtNonOption_MgQv3_1() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "toggle A");
        String[] arguments = new String[]{"-a", "nonOptionArg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStoppingAtNonOption_MgQv3_2() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "toggle A");
        String[] arguments = new String[]{"-a", "nonOptionArg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertTrue(result.hasOption("a"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStoppingAtNonOption_MgQv3_3() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "toggle A");
        String[] arguments = new String[]{"-a", "nonOptionArg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals(1, result.getArgList().size());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseStoppingAtNonOption_MgQv3_4() throws Exception {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        options.addOption("a", false, "toggle A");
        String[] arguments = new String[]{"-a", "nonOptionArg"};
        Properties properties = new Properties();
        CommandLine result = parser.parse(options, arguments, properties, true);
        assertEquals("nonOptionArg", result.getArgList().get(0));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIndexOfEqual_WhenEqualSignPresent_wqqL0() throws Exception {
        String input = "key=value";
        int result = DefaultParser.indexOfEqual(input);
        assertEquals(3, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCheckRequiredOptionsWithEmptyExpectedOpts_TOUO0() throws Exception {
        DefaultParser parser = new DefaultParser();
        parser.checkRequiredOptions();
        assertTrue(parser.expectedOpts.isEmpty());
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_XGky0_1() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2"};
        CommandLine result = parser.parse(options, arguments, true);
        assertTrue(result.hasOption("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithStopAtNonOption_XGky0_2() throws ParseException {
        DefaultParser parser = new DefaultParser();
        Options options = new Options();
        String[] arguments = {"--option1", "value1", "--option2"};
        CommandLine result = parser.parse(options, arguments, true);
        assertEquals("value1", result.getOptionValue("option1"));
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArgumentsAndProperties_UhkT0_1() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties);
        assertNotNull(result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testParseWithEmptyArgumentsAndProperties_UhkT0_2() throws ParseException {
        Options options = new Options();
        String[] arguments = new String[0];
        Properties properties = new Properties();
        DefaultParser parser = new DefaultParser();
        CommandLine result = parser.parse(options, arguments, properties);
        assertEquals(0, result.getOptions().length);
    }
}