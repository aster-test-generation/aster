/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_GnuParser_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithSimpleOption_WnIJ0() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("a", false, "option a");
        String[] arguments = {"-a"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"-a"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithUnrecognizedOption_eAFW1() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = {"-b"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"-b"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithStopAtNonOption_Xsag2() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = {"-b", "arg1", "arg2"};
        String[] result = parser.flatten(options, arguments, true);
        assertArrayEquals(new String[]{"-b", "arg1", "arg2"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithLongOption_PkfM3() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("long", true, "long option");
        String[] arguments = {"--long=value"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"--long", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOptionAndNonOptionArguments_DbLj4() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("c", false, "option c");
        String[] arguments = {"-c", "arg1", "arg2"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"-c", "arg1", "arg2"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithMultipleOptions_NZoa5() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("d", false, "option d");
        options.addOption("e", false, "option e");
        String[] arguments = {"-d", "-e"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"-d", "-e"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOptionGroup_ZWGY6() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        OptionGroup group = new OptionGroup();
        group.addOption(new Option("f", "option f"));
        options.addOptionGroup(group);
        String[] arguments = {"-f"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"-f"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithHyphen_WUZR7() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = {"-"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"-"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithDoubleHyphen_cLQP8() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        String[] arguments = {"--"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"--"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithOptionAndEqualSign_ZwYU9() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("g", true, "option g");
        String[] arguments = {"-g=value"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"-g", "value"}, result);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testFlattenWithComplexScenario_MrIC10() throws Exception {
        GnuParser parser = new GnuParser();
        Options options = new Options();
        options.addOption("x", false, "option x");
        options.addOption("y", true, "option y");
        String[] arguments = {"-x", "-y", "value", "arg1"};
        String[] result = parser.flatten(options, arguments, false);
        assertArrayEquals(new String[]{"-x", "-y", "value", "arg1"}, result);
    }
}