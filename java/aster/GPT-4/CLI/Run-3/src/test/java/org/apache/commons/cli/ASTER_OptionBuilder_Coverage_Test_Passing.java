/**
 * Generated by Aster
 */
package org.apache.commons.cli;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Timeout.ThreadMode.SEPARATE_THREAD;
import static org.mockito.Mockito.*;

import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

public class Aster_OptionBuilder_Coverage_Test_Passing {
    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgsSetsArgCount_nnkd0() {
        int numArgs = 5;
        OptionBuilder result = OptionBuilder.hasOptionalArgs(numArgs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgsSetsOptionalArgTrue_LSvJ1() {
        int numArgs = 3;
        OptionBuilder result = OptionBuilder.hasOptionalArgs(numArgs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasOptionalArgsReturnsSameInstance_YTGz2() {
        int numArgs = 2;
        OptionBuilder result = OptionBuilder.hasOptionalArgs(numArgs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithArgNameSetsArgNameCorrectly_liTj0() {
        String expectedArgName = "testArgName";
        OptionBuilder result = OptionBuilder.withArgName(expectedArgName);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithLongOptSetsLongOption_ymbU0() {
        String expectedLongOpt = "verbose";
        OptionBuilder.withLongOpt(expectedLongOpt);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithLongOptReturnsInstance_TgPi1() {
        OptionBuilder result = OptionBuilder.withLongOpt("debug");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithPositiveNumber_TWuh0() {
        int numArgs = 5;
        OptionBuilder result = OptionBuilder.hasArgs(numArgs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testHasArgsWithZero_QnUn1() {
        int numArgs = 0;
        OptionBuilder result = OptionBuilder.hasArgs(numArgs);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithValueSeparatorSetsCorrectValue_KoIo0() {
        char expectedSeparator = ';';
        OptionBuilder result = OptionBuilder.withValueSeparator(expectedSeparator);
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testIsRequiredSetsRequiredTrue_pjIj0() {
        OptionBuilder result = OptionBuilder.isRequired();
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testWithTypeCasting_UkwM0_koLu0() {
        Class<?> expectedType = Integer.class;
        OptionBuilder result = OptionBuilder.withType(expectedType);
        assertNotNull(result, "OptionBuilder should not return null after setting type");
    }

    @Test
    @Timeout(value = 1, unit = TimeUnit.SECONDS, threadMode = SEPARATE_THREAD)
    public void testCreateWithNullCallsCreateWithNullArgument_TPWF3_zQpp0() throws java.lang.IllegalArgumentException {
        OptionBuilder spyBuilder = spy(OptionBuilder.class);
        spyBuilder.create();
        verify(spyBuilder, times(1)).create(null);
    }
}